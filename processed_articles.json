[
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I‚Äôm looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "My honest opinions about Typer.", "Author": "RevolutionaryPen4661", "Content": "First of all, it's a very nice library to build great CLI, I have built like 10 CLIs till now just for my purposes like interaction with PYPI API, nodemon-like thing for Python (deleted the project for some reason, made when I was 12.5 years old) etc. but something makes me sad about this. Typer could've been a great tool if it was only built on top of argparse or optparse just like click (it is great but lacks good-quality documentation as said by a commenter on Reddit or Hacker News maybe).\nSee, Typer is itself written as a wrapper over click which is based on optparse which is calling functions over functions whatsoever! I know someone will come up with a joke called \"\". In general terms, it's wrapper + additional over a customizable wrapper over optparse. Which degrades the speed of execution time. I respect the project, that it simplifies the way of creating CLIs but it has a drawback, speed. I'm sceptical as to why they chose to click (for its internal dependency) over optparse or argparse for Typer development. If someone says, I don't give a this/that something your opinion. Undestand. This is just an opinion."},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast‚Ñ¢Ô∏è because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience üòé Commands are in preview so expect missing stuff."},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC‚Ä¶), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "Building AI Text-to-Video Model From Scratch", "Author": "FareedKhan557", "Content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos."},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "My Thoughts on Python in Excel", "Author": "fzumstein", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel Here‚Äôs the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn‚Äôt suitable for Python beginners nor for interactive data analysis"},
{"Title": "GUI Recommendations", "Author": "Mrkrabsstalker", "Content": "I built a Matlab app for my grandfather's business with my student version. I need to make it accessible on his employees computers. Matlab comiler seems not worth it, so I was wondering if I translated it into a python GUI which one would make it easy to distribute for preferably a low to zero cost."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Kwargs appreciation thread", "Author": "TheRealFrostMana", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though! I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go. Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean: some_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)"},
{"Title": "Suck at Automate the Boring Stuff - Need Assurance", "Author": "COOKIEMONSTER-315", "Content": "I‚Äôve been working hard at learning Python this past year and I‚Äôve been doing ok at it. I‚Äôve used a lot of the commonly recommended books and YouTube channels and like them all except for some reason, I still struggle like crazy with the practice problems in Automate the Boring Stuff. Is this a sign that I still suck a Python, or are the practice problems at the end of the chapters known to be difficult? Looking for a sanity check in my progress basically. Automate The Boring Stuff"},
{"Title": "Open-source AI shorts generator in python", "Author": "ANil1729", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc. Link to code :- https://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "Tiny Python for x64 Server 2022?", "Author": "amckern", "Content": "I am using a 5-line script on Windows Server (production container is set up with 1GB memory) - is there a tiny Python that I can use that is optimised for small memory machines? I am not familiar with self-compiling the source (I have grown up with Visual Studio) so am after a pre-compiled release. Happy to use anything in the 3.12.x branch."},
{"Title": "Made a Minimalistic Router for Uvicorn", "Author": "achaayb", "Content": "Hey everyone, I've been working on a simple router for Uvicorn called ASGIRouter. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\nWhat My Project Does\nASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn. This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Author": "itssimon86", "Content": "Hey Python community! I‚Äôd like to introduce you to my indie product Apitally, a simple API monitoring & analytics tool for Python projects.\nWhat My Project Does\nApitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down. Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally‚Äôs servers in regular intervals."},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Author": "aman6944", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found https://github.com/SeleniumHQ/selenium/pull/13173 .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find. I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "Textchat: TUI Single Server IRC Client", "Author": "rmpython", "Content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/ I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!"},
{"Title": "Virtual Python workshops", "Author": "szabgab", "Content": "I have been been teaching programming at hi-tech companies for 24 years. For many years I taught Perl üê™ - I know, you all love it üòä and then for even more years I taught Python üêç. These days I also teach Rust. Recently I started to offer free online workshops via Zoom for all 3 languages. They include a presentation and then hands-on assignments to practice the things I explained. I hope these workshops will be interesting to some of the r/python members and that it is acceptable to occasionally mention the Python workshops here. (and I hope this time I put the proper flair on it)"},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Author": "0akman", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera. The Python code and documentation on my GitHub: https://github.com/FrunzaDan/Tool-Chip_Contact_Length The video: https://youtu.be/bndai6SlF6E Enjoy!\nWhat My Project Does"},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Author": "Character-Maybe-4400", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil. I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a pytest-edit plugin that adds an --edit option to Pytest. There isn't. So I created just that. Enjoy."},
{"Title": "Why would anyone use pyqt if pyside exists", "Author": "AccordingBeyond2985", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "Building an HTTP Server in Python", "Author": "mraza007", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python. Link to blog post"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "open source CLI tool for finding out how programs work", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow users to find out what frameworks, tools, engines a program / game was made in. Looks through a directory and searches for common folder structures, and file names. You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries. Image Example\nTarget Audience\nAnyone! Developers looking to learn how other programs were made, people who are just interested."},
{"Title": "Python CLIs becoming too slow.", "Author": "RevolutionaryPen4661", "Content": "I have written a simple CLI program using (Argparse - Native Python CLI toolkit) that compares the size of the PyPI packages passed to parameters. It takes 4 seconds to print just a help message. On the other hand, clis like `uv` are extremely fast. (Made in Rust). What if we make a CLI toolkit similar to typer (a superset of click), click to improve the performance of our CLIs? This may seem silly to you. (I asked Claude 3 for a sample performance chart, here it is)\nHere's a comparison chart showing the estimated performance and speed improvements you might expect when using a Rust-based CLI toolkit for Python, as opposed to existing Python-based CLI libraries like Typer and Click:"},
{"Title": "Kivy School - Crowdfunding Update", "Author": "filipemarch", "Content": "We're excited to share that our Kivy School crowdfunding project on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal! We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at kivyschool.com and our course on Udemy. Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!"},
{"Title": "Async Python Clarifications", "Author": "Cool-Focus6556", "Content": "Ok, so just so I have this straight:\nAsyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\nThe threading library creates threads and uses preemptive multitasking to context switch between threads\nAsyncio is more efficient than threading for the reasons above"},
{"Title": "The Problems with Celery", "Author": "hatchet-dev", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: https://docs.hatchet.run/blog/problems-with-celery Our issues with the Celery project were part of the reason why we started Hatchet. Would love to hear comments or feedback!"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "EFT - A file extension for implementing user created themes", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable Example:\nmy_theme.eft - My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool"},
{"Title": "Flappy Berd in PyQt", "Author": "GhnQuix", "Content": "Hello there What my project does: I‚Äôm excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! üòÉ As Richard Watterson once said: \"10/10 game, would play again.\" Target Audience This game is for anyone who‚Äôs bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience. Comparison Think of it as a faithful recreation of Flappy Bird with a PyQt twist."},
{"Title": "I have made an open source library for logging errors / messages :)", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file. Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience"},
{"Title": "Just released my first Python package: Melodica Notes üé∂", "Author": "bettercallsenna", "Content": "Hey everyone! I‚Äôm excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics. What My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players. Target Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it‚Äôs fully functional, I consider it an evolving tool and welcome contributions to enhance its features."},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Author": "jcoelho93", "Content": "What my project does: It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc. Target Audience Developers mostly, I guess Comparison I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line. Code: Here's the GitHub repo https://github.com/jcoelho93/steer"},
{"Title": "Async Python adoption?", "Author": "mcharytoniuk", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python? I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can‚Äôt build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I‚Äôm looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "Global Silent Disco Live Broadcasting app", "Author": "HapHeirohFlow", "Content": "Import necessary libraries\nfrom flask import Flask, render_template, request, redirect, url_for, session from flask_socketio import SocketIO, emit, join_room, leave_room from flask_sqlalchemy import SQLAlchemy from werkzeug.security import generate_password_hash, check_password_hash from datetime import datetime import os\nInitialize the app and related components"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "My honest opinions about Typer.", "Author": "RevolutionaryPen4661", "Content": "First of all, it's a very nice library to build great CLI, I have built like 10 CLIs till now just for my purposes like interaction with PYPI API, nodemon-like thing for Python (deleted the project for some reason, made when I was 12.5 years old) etc. but something makes me sad about this. Typer could've been a great tool if it was only built on top of argparse or optparse just like click (it is great but lacks good-quality documentation as said by a commenter on Reddit or Hacker News maybe).\nSee, Typer is itself written as a wrapper over click which is based on optparse which is calling functions over functions whatsoever! I know someone will come up with a joke called \"\". In general terms, it's wrapper + additional over a customizable wrapper over optparse. Which degrades the speed of execution time. I respect the project, that it simplifies the way of creating CLIs but it has a drawback, speed. I'm sceptical as to why they chose to click (for its internal dependency) over optparse or argparse for Typer development. If someone says, I don't give a this/that something your opinion. Undestand. This is just an opinion."},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I‚Äôm looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "My honest opinions about Typer.", "Author": "RevolutionaryPen4661", "Content": "First of all, it's a very nice library to build great CLI, I have built like 10 CLIs till now just for my purposes like interaction with PYPI API, nodemon-like thing for Python (deleted the project for some reason, made when I was 12.5 years old) etc. but something makes me sad about this. Typer could've been a great tool if it was only built on top of argparse or optparse just like click (it is great but lacks good-quality documentation as said by a commenter on Reddit or Hacker News maybe).\nSee, Typer is itself written as a wrapper over click which is based on optparse which is calling functions over functions whatsoever! I know someone will come up with a joke called \"\". In general terms, it's wrapper + additional over a customizable wrapper over optparse. Which degrades the speed of execution time. I respect the project, that it simplifies the way of creating CLIs but it has a drawback, speed. I'm sceptical as to why they chose to click (for its internal dependency) over optparse or argparse for Typer development. If someone says, I don't give a this/that something your opinion. Undestand. This is just an opinion."},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast‚Ñ¢Ô∏è because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience üòé Commands are in preview so expect missing stuff."},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC‚Ä¶), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast‚Ñ¢Ô∏è because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience üòé Commands are in preview so expect missing stuff."},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC‚Ä¶), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "Building AI Text-to-Video Model From Scratch", "Author": "FareedKhan557", "Content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "My Thoughts on Python in Excel", "Author": "fzumstein", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel Here‚Äôs the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn‚Äôt suitable for Python beginners nor for interactive data analysis"},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "GUI Recommendations", "Author": "Mrkrabsstalker", "Content": "I built a Matlab app for my grandfather's business with my student version. I need to make it accessible on his employees computers. Matlab comiler seems not worth it, so I was wondering if I translated it into a python GUI which one would make it easy to distribute for preferably a low to zero cost."},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "Kwargs appreciation thread", "Author": "TheRealFrostMana", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though! I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go. Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean: some_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)"},
{"Title": "Building AI Text-to-Video Model From Scratch", "Author": "FareedKhan557", "Content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos."},
{"Title": "Suck at Automate the Boring Stuff - Need Assurance", "Author": "COOKIEMONSTER-315", "Content": "I‚Äôve been working hard at learning Python this past year and I‚Äôve been doing ok at it. I‚Äôve used a lot of the commonly recommended books and YouTube channels and like them all except for some reason, I still struggle like crazy with the practice problems in Automate the Boring Stuff. Is this a sign that I still suck a Python, or are the practice problems at the end of the chapters known to be difficult? Looking for a sanity check in my progress basically. Automate The Boring Stuff"},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "Open-source AI shorts generator in python", "Author": "ANil1729", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc. Link to code :- https://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "My Thoughts on Python in Excel", "Author": "fzumstein", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel Here‚Äôs the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn‚Äôt suitable for Python beginners nor for interactive data analysis"},
{"Title": "Tiny Python for x64 Server 2022?", "Author": "amckern", "Content": "I am using a 5-line script on Windows Server (production container is set up with 1GB memory) - is there a tiny Python that I can use that is optimised for small memory machines? I am not familiar with self-compiling the source (I have grown up with Visual Studio) so am after a pre-compiled release. Happy to use anything in the 3.12.x branch."},
{"Title": "GUI Recommendations", "Author": "Mrkrabsstalker", "Content": "I built a Matlab app for my grandfather's business with my student version. I need to make it accessible on his employees computers. Matlab comiler seems not worth it, so I was wondering if I translated it into a python GUI which one would make it easy to distribute for preferably a low to zero cost."},
{"Title": "Made a Minimalistic Router for Uvicorn", "Author": "achaayb", "Content": "Hey everyone, I've been working on a simple router for Uvicorn called ASGIRouter. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\nWhat My Project Does\nASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn. This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Kwargs appreciation thread", "Author": "TheRealFrostMana", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though! I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go. Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean: some_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)"},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Author": "itssimon86", "Content": "Hey Python community! I‚Äôd like to introduce you to my indie product Apitally, a simple API monitoring & analytics tool for Python projects.\nWhat My Project Does\nApitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down. Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally‚Äôs servers in regular intervals."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Author": "aman6944", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found https://github.com/SeleniumHQ/selenium/pull/13173 .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find. I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "Suck at Automate the Boring Stuff - Need Assurance", "Author": "COOKIEMONSTER-315", "Content": "I‚Äôve been working hard at learning Python this past year and I‚Äôve been doing ok at it. I‚Äôve used a lot of the commonly recommended books and YouTube channels and like them all except for some reason, I still struggle like crazy with the practice problems in Automate the Boring Stuff. Is this a sign that I still suck a Python, or are the practice problems at the end of the chapters known to be difficult? Looking for a sanity check in my progress basically. Automate The Boring Stuff"},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Textchat: TUI Single Server IRC Client", "Author": "rmpython", "Content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/ I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!"},
{"Title": "Open-source AI shorts generator in python", "Author": "ANil1729", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc. Link to code :- https://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I‚Äôm looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Virtual Python workshops", "Author": "szabgab", "Content": "I have been been teaching programming at hi-tech companies for 24 years. For many years I taught Perl üê™ - I know, you all love it üòä and then for even more years I taught Python üêç. These days I also teach Rust. Recently I started to offer free online workshops via Zoom for all 3 languages. They include a presentation and then hands-on assignments to practice the things I explained. I hope these workshops will be interesting to some of the r/python members and that it is acceptable to occasionally mention the Python workshops here. (and I hope this time I put the proper flair on it)"},
{"Title": "Tiny Python for x64 Server 2022?", "Author": "amckern", "Content": "I am using a 5-line script on Windows Server (production container is set up with 1GB memory) - is there a tiny Python that I can use that is optimised for small memory machines? I am not familiar with self-compiling the source (I have grown up with Visual Studio) so am after a pre-compiled release. Happy to use anything in the 3.12.x branch."},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I‚Äôm looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "Global Silent Disco Live Broadcasting app", "Author": "HapHeirohFlow", "Content": "Import necessary libraries\nfrom flask import Flask, render_template, request, redirect, url_for, session from flask_socketio import SocketIO, emit, join_room, leave_room from flask_sqlalchemy import SQLAlchemy from werkzeug.security import generate_password_hash, check_password_hash from datetime import datetime import os\nInitialize the app and related components"},
{"Title": "Made a Minimalistic Router for Uvicorn", "Author": "achaayb", "Content": "Hey everyone, I've been working on a simple router for Uvicorn called ASGIRouter. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\nWhat My Project Does\nASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn. This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs."},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Author": "0akman", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera. The Python code and documentation on my GitHub: https://github.com/FrunzaDan/Tool-Chip_Contact_Length The video: https://youtu.be/bndai6SlF6E Enjoy!\nWhat My Project Does"},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "Global Silent Disco Live Broadcasting app", "Author": "HapHeirohFlow", "Content": "Import necessary libraries\nfrom flask import Flask, render_template, request, redirect, url_for, session from flask_socketio import SocketIO, emit, join_room, leave_room from flask_sqlalchemy import SQLAlchemy from werkzeug.security import generate_password_hash, check_password_hash from datetime import datetime import os\nInitialize the app and related components"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Author": "Character-Maybe-4400", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil. I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a pytest-edit plugin that adds an --edit option to Pytest. There isn't. So I created just that. Enjoy."},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Author": "itssimon86", "Content": "Hey Python community! I‚Äôd like to introduce you to my indie product Apitally, a simple API monitoring & analytics tool for Python projects.\nWhat My Project Does\nApitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down. Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally‚Äôs servers in regular intervals."},
{"Title": "Why would anyone use pyqt if pyside exists", "Author": "AccordingBeyond2985", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "My honest opinions about Typer.", "Author": "RevolutionaryPen4661", "Content": "First of all, it's a very nice library to build great CLI, I have built like 10 CLIs till now just for my purposes like interaction with PYPI API, nodemon-like thing for Python (deleted the project for some reason, made when I was 12.5 years old) etc. but something makes me sad about this. Typer could've been a great tool if it was only built on top of argparse or optparse just like click (it is great but lacks good-quality documentation as said by a commenter on Reddit or Hacker News maybe).\nSee, Typer is itself written as a wrapper over click which is based on optparse which is calling functions over functions whatsoever! I know someone will come up with a joke called \"\". In general terms, it's wrapper + additional over a customizable wrapper over optparse. Which degrades the speed of execution time. I respect the project, that it simplifies the way of creating CLIs but it has a drawback, speed. I'm sceptical as to why they chose to click (for its internal dependency) over optparse or argparse for Typer development. If someone says, I don't give a this/that something your opinion. Undestand. This is just an opinion."},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "Building an HTTP Server in Python", "Author": "mraza007", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python. Link to blog post"},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Author": "aman6944", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found https://github.com/SeleniumHQ/selenium/pull/13173 .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find. I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "My honest opinions about Typer.", "Author": "RevolutionaryPen4661", "Content": "First of all, it's a very nice library to build great CLI, I have built like 10 CLIs till now just for my purposes like interaction with PYPI API, nodemon-like thing for Python (deleted the project for some reason, made when I was 12.5 years old) etc. but something makes me sad about this. Typer could've been a great tool if it was only built on top of argparse or optparse just like click (it is great but lacks good-quality documentation as said by a commenter on Reddit or Hacker News maybe).\nSee, Typer is itself written as a wrapper over click which is based on optparse which is calling functions over functions whatsoever! I know someone will come up with a joke called \"\". In general terms, it's wrapper + additional over a customizable wrapper over optparse. Which degrades the speed of execution time. I respect the project, that it simplifies the way of creating CLIs but it has a drawback, speed. I'm sceptical as to why they chose to click (for its internal dependency) over optparse or argparse for Typer development. If someone says, I don't give a this/that something your opinion. Undestand. This is just an opinion."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Textchat: TUI Single Server IRC Client", "Author": "rmpython", "Content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/ I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "open source CLI tool for finding out how programs work", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow users to find out what frameworks, tools, engines a program / game was made in. Looks through a directory and searches for common folder structures, and file names. You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries. Image Example\nTarget Audience\nAnyone! Developers looking to learn how other programs were made, people who are just interested."},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Virtual Python workshops", "Author": "szabgab", "Content": "I have been been teaching programming at hi-tech companies for 24 years. For many years I taught Perl üê™ - I know, you all love it üòä and then for even more years I taught Python üêç. These days I also teach Rust. Recently I started to offer free online workshops via Zoom for all 3 languages. They include a presentation and then hands-on assignments to practice the things I explained. I hope these workshops will be interesting to some of the r/python members and that it is acceptable to occasionally mention the Python workshops here. (and I hope this time I put the proper flair on it)"},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I‚Äôm looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "Python CLIs becoming too slow.", "Author": "RevolutionaryPen4661", "Content": "I have written a simple CLI program using (Argparse - Native Python CLI toolkit) that compares the size of the PyPI packages passed to parameters. It takes 4 seconds to print just a help message. On the other hand, clis like `uv` are extremely fast. (Made in Rust). What if we make a CLI toolkit similar to typer (a superset of click), click to improve the performance of our CLIs? This may seem silly to you. (I asked Claude 3 for a sample performance chart, here it is)\nHere's a comparison chart showing the estimated performance and speed improvements you might expect when using a Rust-based CLI toolkit for Python, as opposed to existing Python-based CLI libraries like Typer and Click:"},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Author": "0akman", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera. The Python code and documentation on my GitHub: https://github.com/FrunzaDan/Tool-Chip_Contact_Length The video: https://youtu.be/bndai6SlF6E Enjoy!\nWhat My Project Does"},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "Global Silent Disco Live Broadcasting app", "Author": "HapHeirohFlow", "Content": "Import necessary libraries\nfrom flask import Flask, render_template, request, redirect, url_for, session from flask_socketio import SocketIO, emit, join_room, leave_room from flask_sqlalchemy import SQLAlchemy from werkzeug.security import generate_password_hash, check_password_hash from datetime import datetime import os\nInitialize the app and related components"},
{"Title": "Kivy School - Crowdfunding Update", "Author": "filipemarch", "Content": "We're excited to share that our Kivy School crowdfunding project on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal! We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at kivyschool.com and our course on Udemy. Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!"},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Author": "Character-Maybe-4400", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil. I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a pytest-edit plugin that adds an --edit option to Pytest. There isn't. So I created just that. Enjoy."},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "Async Python Clarifications", "Author": "Cool-Focus6556", "Content": "Ok, so just so I have this straight:\nAsyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\nThe threading library creates threads and uses preemptive multitasking to context switch between threads\nAsyncio is more efficient than threading for the reasons above"},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "Why would anyone use pyqt if pyside exists", "Author": "AccordingBeyond2985", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "Building an HTTP Server in Python", "Author": "mraza007", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python. Link to blog post"},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "The Problems with Celery", "Author": "hatchet-dev", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: https://docs.hatchet.run/blog/problems-with-celery Our issues with the Celery project were part of the reason why we started Hatchet. Would love to hear comments or feedback!"},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "My honest opinions about Typer.", "Author": "RevolutionaryPen4661", "Content": "First of all, it's a very nice library to build great CLI, I have built like 10 CLIs till now just for my purposes like interaction with PYPI API, nodemon-like thing for Python (deleted the project for some reason, made when I was 12.5 years old) etc. but something makes me sad about this. Typer could've been a great tool if it was only built on top of argparse or optparse just like click (it is great but lacks good-quality documentation as said by a commenter on Reddit or Hacker News maybe).\nSee, Typer is itself written as a wrapper over click which is based on optparse which is calling functions over functions whatsoever! I know someone will come up with a joke called \"\". In general terms, it's wrapper + additional over a customizable wrapper over optparse. Which degrades the speed of execution time. I respect the project, that it simplifies the way of creating CLIs but it has a drawback, speed. I'm sceptical as to why they chose to click (for its internal dependency) over optparse or argparse for Typer development. If someone says, I don't give a this/that something your opinion. Undestand. This is just an opinion."},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast‚Ñ¢Ô∏è because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience üòé Commands are in preview so expect missing stuff."},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "EFT - A file extension for implementing user created themes", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable Example:\nmy_theme.eft - My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool"},
{"Title": "open source CLI tool for finding out how programs work", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow users to find out what frameworks, tools, engines a program / game was made in. Looks through a directory and searches for common folder structures, and file names. You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries. Image Example\nTarget Audience\nAnyone! Developers looking to learn how other programs were made, people who are just interested."},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC‚Ä¶), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast‚Ñ¢Ô∏è because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience üòé Commands are in preview so expect missing stuff."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Flappy Berd in PyQt", "Author": "GhnQuix", "Content": "Hello there What my project does: I‚Äôm excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! üòÉ As Richard Watterson once said: \"10/10 game, would play again.\" Target Audience This game is for anyone who‚Äôs bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience. Comparison Think of it as a faithful recreation of Flappy Bird with a PyQt twist."},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "Python CLIs becoming too slow.", "Author": "RevolutionaryPen4661", "Content": "I have written a simple CLI program using (Argparse - Native Python CLI toolkit) that compares the size of the PyPI packages passed to parameters. It takes 4 seconds to print just a help message. On the other hand, clis like `uv` are extremely fast. (Made in Rust). What if we make a CLI toolkit similar to typer (a superset of click), click to improve the performance of our CLIs? This may seem silly to you. (I asked Claude 3 for a sample performance chart, here it is)\nHere's a comparison chart showing the estimated performance and speed improvements you might expect when using a Rust-based CLI toolkit for Python, as opposed to existing Python-based CLI libraries like Typer and Click:"},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC‚Ä¶), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "I have made an open source library for logging errors / messages :)", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file. Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience"},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "Kivy School - Crowdfunding Update", "Author": "filipemarch", "Content": "We're excited to share that our Kivy School crowdfunding project on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal! We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at kivyschool.com and our course on Udemy. Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "Just released my first Python package: Melodica Notes üé∂", "Author": "bettercallsenna", "Content": "Hey everyone! I‚Äôm excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics. What My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players. Target Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it‚Äôs fully functional, I consider it an evolving tool and welcome contributions to enhance its features."},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "Async Python Clarifications", "Author": "Cool-Focus6556", "Content": "Ok, so just so I have this straight:\nAsyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\nThe threading library creates threads and uses preemptive multitasking to context switch between threads\nAsyncio is more efficient than threading for the reasons above"},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Author": "jcoelho93", "Content": "What my project does: It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc. Target Audience Developers mostly, I guess Comparison I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line. Code: Here's the GitHub repo https://github.com/jcoelho93/steer"},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "The Problems with Celery", "Author": "hatchet-dev", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: https://docs.hatchet.run/blog/problems-with-celery Our issues with the Celery project were part of the reason why we started Hatchet. Would love to hear comments or feedback!"},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "Async Python adoption?", "Author": "mcharytoniuk", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python? I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "Building AI Text-to-Video Model From Scratch", "Author": "FareedKhan557", "Content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos."},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "EFT - A file extension for implementing user created themes", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable Example:\nmy_theme.eft - My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool"},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast‚Ñ¢Ô∏è because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience üòé Commands are in preview so expect missing stuff."},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "Building AI Text-to-Video Model From Scratch", "Author": "FareedKhan557", "Content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos."},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC‚Ä¶), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "Flappy Berd in PyQt", "Author": "GhnQuix", "Content": "Hello there What my project does: I‚Äôm excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! üòÉ As Richard Watterson once said: \"10/10 game, would play again.\" Target Audience This game is for anyone who‚Äôs bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience. Comparison Think of it as a faithful recreation of Flappy Bird with a PyQt twist."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "My Thoughts on Python in Excel", "Author": "fzumstein", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel Here‚Äôs the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn‚Äôt suitable for Python beginners nor for interactive data analysis"},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "I have made an open source library for logging errors / messages :)", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file. Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience"},
{"Title": "GUI Recommendations", "Author": "Mrkrabsstalker", "Content": "I built a Matlab app for my grandfather's business with my student version. I need to make it accessible on his employees computers. Matlab comiler seems not worth it, so I was wondering if I translated it into a python GUI which one would make it easy to distribute for preferably a low to zero cost."},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "My Thoughts on Python in Excel", "Author": "fzumstein", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel Here‚Äôs the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn‚Äôt suitable for Python beginners nor for interactive data analysis"},
{"Title": "Just released my first Python package: Melodica Notes üé∂", "Author": "bettercallsenna", "Content": "Hey everyone! I‚Äôm excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics. What My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players. Target Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it‚Äôs fully functional, I consider it an evolving tool and welcome contributions to enhance its features."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "GUI Recommendations", "Author": "Mrkrabsstalker", "Content": "I built a Matlab app for my grandfather's business with my student version. I need to make it accessible on his employees computers. Matlab comiler seems not worth it, so I was wondering if I translated it into a python GUI which one would make it easy to distribute for preferably a low to zero cost."},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Author": "jcoelho93", "Content": "What my project does: It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc. Target Audience Developers mostly, I guess Comparison I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line. Code: Here's the GitHub repo https://github.com/jcoelho93/steer"},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Kwargs appreciation thread", "Author": "TheRealFrostMana", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though! I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go. Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean: some_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)"},
{"Title": "Async Python adoption?", "Author": "mcharytoniuk", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python? I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "Suck at Automate the Boring Stuff - Need Assurance", "Author": "COOKIEMONSTER-315", "Content": "I‚Äôve been working hard at learning Python this past year and I‚Äôve been doing ok at it. I‚Äôve used a lot of the commonly recommended books and YouTube channels and like them all except for some reason, I still struggle like crazy with the practice problems in Automate the Boring Stuff. Is this a sign that I still suck a Python, or are the practice problems at the end of the chapters known to be difficult? Looking for a sanity check in my progress basically. Automate The Boring Stuff"},
{"Title": "Kwargs appreciation thread", "Author": "TheRealFrostMana", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though! I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go. Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean: some_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)"},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can‚Äôt build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "Building AI Text-to-Video Model From Scratch", "Author": "FareedKhan557", "Content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos."},
{"Title": "Suck at Automate the Boring Stuff - Need Assurance", "Author": "COOKIEMONSTER-315", "Content": "I‚Äôve been working hard at learning Python this past year and I‚Äôve been doing ok at it. I‚Äôve used a lot of the commonly recommended books and YouTube channels and like them all except for some reason, I still struggle like crazy with the practice problems in Automate the Boring Stuff. Is this a sign that I still suck a Python, or are the practice problems at the end of the chapters known to be difficult? Looking for a sanity check in my progress basically. Automate The Boring Stuff"},
{"Title": "Open-source AI shorts generator in python", "Author": "ANil1729", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc. Link to code :- https://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "Tiny Python for x64 Server 2022?", "Author": "amckern", "Content": "I am using a 5-line script on Windows Server (production container is set up with 1GB memory) - is there a tiny Python that I can use that is optimised for small memory machines? I am not familiar with self-compiling the source (I have grown up with Visual Studio) so am after a pre-compiled release. Happy to use anything in the 3.12.x branch."},
{"Title": "Open-source AI shorts generator in python", "Author": "ANil1729", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc. Link to code :- https://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "Made a Minimalistic Router for Uvicorn", "Author": "achaayb", "Content": "Hey everyone, I've been working on a simple router for Uvicorn called ASGIRouter. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\nWhat My Project Does\nASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn. This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs."},
{"Title": "Tiny Python for x64 Server 2022?", "Author": "amckern", "Content": "I am using a 5-line script on Windows Server (production container is set up with 1GB memory) - is there a tiny Python that I can use that is optimised for small memory machines? I am not familiar with self-compiling the source (I have grown up with Visual Studio) so am after a pre-compiled release. Happy to use anything in the 3.12.x branch."},
{"Title": "My Thoughts on Python in Excel", "Author": "fzumstein", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel Here‚Äôs the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn‚Äôt suitable for Python beginners nor for interactive data analysis"},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone üëã The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Made a Minimalistic Router for Uvicorn", "Author": "achaayb", "Content": "Hey everyone, I've been working on a simple router for Uvicorn called ASGIRouter. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\nWhat My Project Does\nASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn. This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs."},
{"Title": "GUI Recommendations", "Author": "Mrkrabsstalker", "Content": "I built a Matlab app for my grandfather's business with my student version. I need to make it accessible on his employees computers. Matlab comiler seems not worth it, so I was wondering if I translated it into a python GUI which one would make it easy to distribute for preferably a low to zero cost."},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Author": "itssimon86", "Content": "Hey Python community! I‚Äôd like to introduce you to my indie product Apitally, a simple API monitoring & analytics tool for Python projects.\nWhat My Project Does\nApitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down. Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally‚Äôs servers in regular intervals."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Author": "itssimon86", "Content": "Hey Python community! I‚Äôd like to introduce you to my indie product Apitally, a simple API monitoring & analytics tool for Python projects.\nWhat My Project Does\nApitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down. Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally‚Äôs servers in regular intervals."},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Author": "aman6944", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found https://github.com/SeleniumHQ/selenium/pull/13173 .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find. I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "Kwargs appreciation thread", "Author": "TheRealFrostMana", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though! I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go. Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean: some_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)"},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Author": "aman6944", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found https://github.com/SeleniumHQ/selenium/pull/13173 .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find. I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "Textchat: TUI Single Server IRC Client", "Author": "rmpython", "Content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/ I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!"},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "Suck at Automate the Boring Stuff - Need Assurance", "Author": "COOKIEMONSTER-315", "Content": "I‚Äôve been working hard at learning Python this past year and I‚Äôve been doing ok at it. I‚Äôve used a lot of the commonly recommended books and YouTube channels and like them all except for some reason, I still struggle like crazy with the practice problems in Automate the Boring Stuff. Is this a sign that I still suck a Python, or are the practice problems at the end of the chapters known to be difficult? Looking for a sanity check in my progress basically. Automate The Boring Stuff"},
{"Title": "Textchat: TUI Single Server IRC Client", "Author": "rmpython", "Content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/ I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!"},
{"Title": "Open-source AI shorts generator in python", "Author": "ANil1729", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc. Link to code :- https://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "Virtual Python workshops", "Author": "szabgab", "Content": "I have been been teaching programming at hi-tech companies for 24 years. For many years I taught Perl üê™ - I know, you all love it üòä and then for even more years I taught Python üêç. These days I also teach Rust. Recently I started to offer free online workshops via Zoom for all 3 languages. They include a presentation and then hands-on assignments to practice the things I explained. I hope these workshops will be interesting to some of the r/python members and that it is acceptable to occasionally mention the Python workshops here. (and I hope this time I put the proper flair on it)"},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and clich√©, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "Virtual Python workshops", "Author": "szabgab", "Content": "I have been been teaching programming at hi-tech companies for 24 years. For many years I taught Perl üê™ - I know, you all love it üòä and then for even more years I taught Python üêç. These days I also teach Rust. Recently I started to offer free online workshops via Zoom for all 3 languages. They include a presentation and then hands-on assignments to practice the things I explained. I hope these workshops will be interesting to some of the r/python members and that it is acceptable to occasionally mention the Python workshops here. (and I hope this time I put the proper flair on it)"},
{"Title": "Tiny Python for x64 Server 2022?", "Author": "amckern", "Content": "I am using a 5-line script on Windows Server (production container is set up with 1GB memory) - is there a tiny Python that I can use that is optimised for small memory machines? I am not familiar with self-compiling the source (I have grown up with Visual Studio) so am after a pre-compiled release. Happy to use anything in the 3.12.x branch."},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Author": "0akman", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera. The Python code and documentation on my GitHub: https://github.com/FrunzaDan/Tool-Chip_Contact_Length The video: https://youtu.be/bndai6SlF6E Enjoy!\nWhat My Project Does"},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "Made a Minimalistic Router for Uvicorn", "Author": "achaayb", "Content": "Hey everyone, I've been working on a simple router for Uvicorn called ASGIRouter. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\nWhat My Project Does\nASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn. This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs."},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Author": "0akman", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera. The Python code and documentation on my GitHub: https://github.com/FrunzaDan/Tool-Chip_Contact_Length The video: https://youtu.be/bndai6SlF6E Enjoy!\nWhat My Project Does"},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Author": "Character-Maybe-4400", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil. I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a pytest-edit plugin that adds an --edit option to Pytest. There isn't. So I created just that. Enjoy."},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Author": "Character-Maybe-4400", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil. I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a pytest-edit plugin that adds an --edit option to Pytest. There isn't. So I created just that. Enjoy."},
{"Title": "Why would anyone use pyqt if pyside exists", "Author": "AccordingBeyond2985", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Author": "itssimon86", "Content": "Hey Python community! I‚Äôd like to introduce you to my indie product Apitally, a simple API monitoring & analytics tool for Python projects.\nWhat My Project Does\nApitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down. Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally‚Äôs servers in regular intervals."},
{"Title": "Why would anyone use pyqt if pyside exists", "Author": "AccordingBeyond2985", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "Building an HTTP Server in Python", "Author": "mraza007", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python. Link to blog post"},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboardüóíÔ∏è. I created a script to automate Bing searches for reward generation\nüëç Excellent command line experience.\nüôÇ User friendly."},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Author": "aman6944", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found https://github.com/SeleniumHQ/selenium/pull/13173 .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find. I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "Building an HTTP Server in Python", "Author": "mraza007", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python. Link to blog post"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Textchat: TUI Single Server IRC Client", "Author": "rmpython", "Content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/ I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!"},
{"Title": "open source CLI tool for finding out how programs work", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow users to find out what frameworks, tools, engines a program / game was made in. Looks through a directory and searches for common folder structures, and file names. You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries. Image Example\nTarget Audience\nAnyone! Developers looking to learn how other programs were made, people who are just interested."},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "Virtual Python workshops", "Author": "szabgab", "Content": "I have been been teaching programming at hi-tech companies for 24 years. For many years I taught Perl üê™ - I know, you all love it üòä and then for even more years I taught Python üêç. These days I also teach Rust. Recently I started to offer free online workshops via Zoom for all 3 languages. They include a presentation and then hands-on assignments to practice the things I explained. I hope these workshops will be interesting to some of the r/python members and that it is acceptable to occasionally mention the Python workshops here. (and I hope this time I put the proper flair on it)"},
{"Title": "open source CLI tool for finding out how programs work", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow users to find out what frameworks, tools, engines a program / game was made in. Looks through a directory and searches for common folder structures, and file names. You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries. Image Example\nTarget Audience\nAnyone! Developers looking to learn how other programs were made, people who are just interested."},
{"Title": "Python CLIs becoming too slow.", "Author": "RevolutionaryPen4661", "Content": "I have written a simple CLI program using (Argparse - Native Python CLI toolkit) that compares the size of the PyPI packages passed to parameters. It takes 4 seconds to print just a help message. On the other hand, clis like `uv` are extremely fast. (Made in Rust). What if we make a CLI toolkit similar to typer (a superset of click), click to improve the performance of our CLIs? This may seem silly to you. (I asked Claude 3 for a sample performance chart, here it is)\nHere's a comparison chart showing the estimated performance and speed improvements you might expect when using a Rust-based CLI toolkit for Python, as opposed to existing Python-based CLI libraries like Typer and Click:"},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you‚Äôre working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Author": "0akman", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera. The Python code and documentation on my GitHub: https://github.com/FrunzaDan/Tool-Chip_Contact_Length The video: https://youtu.be/bndai6SlF6E Enjoy!\nWhat My Project Does"},
{"Title": "Python CLIs becoming too slow.", "Author": "RevolutionaryPen4661", "Content": "I have written a simple CLI program using (Argparse - Native Python CLI toolkit) that compares the size of the PyPI packages passed to parameters. It takes 4 seconds to print just a help message. On the other hand, clis like `uv` are extremely fast. (Made in Rust). What if we make a CLI toolkit similar to typer (a superset of click), click to improve the performance of our CLIs? This may seem silly to you. (I asked Claude 3 for a sample performance chart, here it is)\nHere's a comparison chart showing the estimated performance and speed improvements you might expect when using a Rust-based CLI toolkit for Python, as opposed to existing Python-based CLI libraries like Typer and Click:"},
{"Title": "Kivy School - Crowdfunding Update", "Author": "filipemarch", "Content": "We're excited to share that our Kivy School crowdfunding project on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal! We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at kivyschool.com and our course on Udemy. Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!"},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Author": "Character-Maybe-4400", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil. I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a pytest-edit plugin that adds an --edit option to Pytest. There isn't. So I created just that. Enjoy."},
{"Title": "Kivy School - Crowdfunding Update", "Author": "filipemarch", "Content": "We're excited to share that our Kivy School crowdfunding project on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal! We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at kivyschool.com and our course on Udemy. Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!"},
{"Title": "Async Python Clarifications", "Author": "Cool-Focus6556", "Content": "Ok, so just so I have this straight:\nAsyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\nThe threading library creates threads and uses preemptive multitasking to context switch between threads\nAsyncio is more efficient than threading for the reasons above"},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "Why would anyone use pyqt if pyside exists", "Author": "AccordingBeyond2985", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "The Problems with Celery", "Author": "hatchet-dev", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: https://docs.hatchet.run/blog/problems-with-celery Our issues with the Celery project were part of the reason why we started Hatchet. Would love to hear comments or feedback!"},
{"Title": "Async Python Clarifications", "Author": "Cool-Focus6556", "Content": "Ok, so just so I have this straight:\nAsyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\nThe threading library creates threads and uses preemptive multitasking to context switch between threads\nAsyncio is more efficient than threading for the reasons above"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Building an HTTP Server in Python", "Author": "mraza007", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python. Link to blog post"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "The Problems with Celery", "Author": "hatchet-dev", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: https://docs.hatchet.run/blog/problems-with-celery Our issues with the Celery project were part of the reason why we started Hatchet. Would love to hear comments or feedback!"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "EFT - A file extension for implementing user created themes", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable Example:\nmy_theme.eft - My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "open source CLI tool for finding out how programs work", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow users to find out what frameworks, tools, engines a program / game was made in. Looks through a directory and searches for common folder structures, and file names. You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries. Image Example\nTarget Audience\nAnyone! Developers looking to learn how other programs were made, people who are just interested."},
{"Title": "Flappy Berd in PyQt", "Author": "GhnQuix", "Content": "Hello there What my project does: I‚Äôm excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! üòÉ As Richard Watterson once said: \"10/10 game, would play again.\" Target Audience This game is for anyone who‚Äôs bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience. Comparison Think of it as a faithful recreation of Flappy Bird with a PyQt twist."},
{"Title": "EFT - A file extension for implementing user created themes", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable Example:\nmy_theme.eft - My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool"},
{"Title": "Tuples Are Underrated! List vs Tuple üêç", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ‚ò∫Ô∏è https://youtu.be/-sO4FG6W4ho"},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I‚Äôm looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "Python CLIs becoming too slow.", "Author": "RevolutionaryPen4661", "Content": "I have written a simple CLI program using (Argparse - Native Python CLI toolkit) that compares the size of the PyPI packages passed to parameters. It takes 4 seconds to print just a help message. On the other hand, clis like `uv` are extremely fast. (Made in Rust). What if we make a CLI toolkit similar to typer (a superset of click), click to improve the performance of our CLIs? This may seem silly to you. (I asked Claude 3 for a sample performance chart, here it is)\nHere's a comparison chart showing the estimated performance and speed improvements you might expect when using a Rust-based CLI toolkit for Python, as opposed to existing Python-based CLI libraries like Typer and Click:"},
{"Title": "I have made an open source library for logging errors / messages :)", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file. Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience"},
{"Title": "Flappy Berd in PyQt", "Author": "GhnQuix", "Content": "Hello there What my project does: I‚Äôm excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! üòÉ As Richard Watterson once said: \"10/10 game, would play again.\" Target Audience This game is for anyone who‚Äôs bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience. Comparison Think of it as a faithful recreation of Flappy Bird with a PyQt twist."},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, ‚Ä¶)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "Global Silent Disco Live Broadcasting app", "Author": "HapHeirohFlow", "Content": "Import necessary libraries\nfrom flask import Flask, render_template, request, redirect, url_for, session from flask_socketio import SocketIO, emit, join_room, leave_room from flask_sqlalchemy import SQLAlchemy from werkzeug.security import generate_password_hash, check_password_hash from datetime import datetime import os\nInitialize the app and related components"},
{"Title": "Just released my first Python package: Melodica Notes üé∂", "Author": "bettercallsenna", "Content": "Hey everyone! I‚Äôm excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics. What My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players. Target Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it‚Äôs fully functional, I consider it an evolving tool and welcome contributions to enhance its features."},
{"Title": "Kivy School - Crowdfunding Update", "Author": "filipemarch", "Content": "We're excited to share that our Kivy School crowdfunding project on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal! We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at kivyschool.com and our course on Udemy. Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!"},
{"Title": "I have made an open source library for logging errors / messages :)", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file. Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience"},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "Async Python Clarifications", "Author": "Cool-Focus6556", "Content": "Ok, so just so I have this straight:\nAsyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\nThe threading library creates threads and uses preemptive multitasking to context switch between threads\nAsyncio is more efficient than threading for the reasons above"},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Author": "jcoelho93", "Content": "What my project does: It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc. Target Audience Developers mostly, I guess Comparison I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line. Code: Here's the GitHub repo https://github.com/jcoelho93/steer"},
{"Title": "Just released my first Python package: Melodica Notes üé∂", "Author": "bettercallsenna", "Content": "Hey everyone! I‚Äôm excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics. What My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players. Target Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it‚Äôs fully functional, I consider it an evolving tool and welcome contributions to enhance its features."},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "Async Python adoption?", "Author": "mcharytoniuk", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python? I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "The Problems with Celery", "Author": "hatchet-dev", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: https://docs.hatchet.run/blog/problems-with-celery Our issues with the Celery project were part of the reason why we started Hatchet. Would love to hear comments or feedback!"},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Author": "jcoelho93", "Content": "What my project does: It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc. Target Audience Developers mostly, I guess Comparison I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line. Code: Here's the GitHub repo https://github.com/jcoelho93/steer"},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "My honest opinions about Typer.", "Author": "RevolutionaryPen4661", "Content": "First of all, it's a very nice library to build great CLI, I have built like 10 CLIs till now just for my purposes like interaction with PYPI API, nodemon-like thing for Python (deleted the project for some reason, made when I was 12.5 years old) etc. but something makes me sad about this. Typer could've been a great tool if it was only built on top of argparse or optparse just like click (it is great but lacks good-quality documentation as said by a commenter on Reddit or Hacker News maybe).\nSee, Typer is itself written as a wrapper over click which is based on optparse which is calling functions over functions whatsoever! I know someone will come up with a joke called \"\". In general terms, it's wrapper + additional over a customizable wrapper over optparse. Which degrades the speed of execution time. I respect the project, that it simplifies the way of creating CLIs but it has a drawback, speed. I'm sceptical as to why they chose to click (for its internal dependency) over optparse or argparse for Typer development. If someone says, I don't give a this/that something your opinion. Undestand. This is just an opinion."},
{"Title": "Async Python adoption?", "Author": "mcharytoniuk", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python? I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Author": "jgloewen", "Content": "The Python Shiny library is a framework for building interactive web applications in Python. Developed by RStudio, the same team behind the Shiny library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills. All that is needed is knowledge of the Shiny user interface Application Programming Interface (API). Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone."},
{"Title": "EFT - A file extension for implementing user created themes", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable Example:\nmy_theme.eft - My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool"},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "Flappy Berd in PyQt", "Author": "GhnQuix", "Content": "Hello there What my project does: I‚Äôm excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! üòÉ As Richard Watterson once said: \"10/10 game, would play again.\" Target Audience This game is for anyone who‚Äôs bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience. Comparison Think of it as a faithful recreation of Flappy Bird with a PyQt twist."},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "I have made an open source library for logging errors / messages :)", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file. Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience"},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "Just released my first Python package: Melodica Notes üé∂", "Author": "bettercallsenna", "Content": "Hey everyone! I‚Äôm excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics. What My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players. Target Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it‚Äôs fully functional, I consider it an evolving tool and welcome contributions to enhance its features."},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Author": "jcoelho93", "Content": "What my project does: It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc. Target Audience Developers mostly, I guess Comparison I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line. Code: Here's the GitHub repo https://github.com/jcoelho93/steer"},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "Async Python adoption?", "Author": "mcharytoniuk", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python? I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast‚Ñ¢Ô∏è because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience üòé Commands are in preview so expect missing stuff."},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC‚Ä¶), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "Building AI Text-to-Video Model From Scratch", "Author": "FareedKhan557", "Content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos."},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "My Thoughts on Python in Excel", "Author": "fzumstein", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel Here‚Äôs the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn‚Äôt suitable for Python beginners nor for interactive data analysis"},
{"Title": "GUI Recommendations", "Author": "Mrkrabsstalker", "Content": "I built a Matlab app for my grandfather's business with my student version. I need to make it accessible on his employees computers. Matlab comiler seems not worth it, so I was wondering if I translated it into a python GUI which one would make it easy to distribute for preferably a low to zero cost."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Kwargs appreciation thread", "Author": "TheRealFrostMana", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though! I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go. Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean: some_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)"},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "Suck at Automate the Boring Stuff - Need Assurance", "Author": "COOKIEMONSTER-315", "Content": "I‚Äôve been working hard at learning Python this past year and I‚Äôve been doing ok at it. I‚Äôve used a lot of the commonly recommended books and YouTube channels and like them all except for some reason, I still struggle like crazy with the practice problems in Automate the Boring Stuff. Is this a sign that I still suck a Python, or are the practice problems at the end of the chapters known to be difficult? Looking for a sanity check in my progress basically. Automate The Boring Stuff"},
{"Title": "Open-source AI shorts generator in python", "Author": "ANil1729", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc. Link to code :- https://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tiny Python for x64 Server 2022?", "Author": "amckern", "Content": "I am using a 5-line script on Windows Server (production container is set up with 1GB memory) - is there a tiny Python that I can use that is optimised for small memory machines? I am not familiar with self-compiling the source (I have grown up with Visual Studio) so am after a pre-compiled release. Happy to use anything in the 3.12.x branch."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Made a Minimalistic Router for Uvicorn", "Author": "achaayb", "Content": "Hey everyone, I've been working on a simple router for Uvicorn called ASGIRouter. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\nWhat My Project Does\nASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn. This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I‚Äôm looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Author": "itssimon86", "Content": "Hey Python community! I‚Äôd like to introduce you to my indie product Apitally, a simple API monitoring & analytics tool for Python projects.\nWhat My Project Does\nApitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down. Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally‚Äôs servers in regular intervals."},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Author": "aman6944", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found https://github.com/SeleniumHQ/selenium/pull/13173 .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find. I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "Global Silent Disco Live Broadcasting app", "Author": "HapHeirohFlow", "Content": "Import necessary libraries\nfrom flask import Flask, render_template, request, redirect, url_for, session from flask_socketio import SocketIO, emit, join_room, leave_room from flask_sqlalchemy import SQLAlchemy from werkzeug.security import generate_password_hash, check_password_hash from datetime import datetime import os\nInitialize the app and related components"},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I‚Äôm looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "Textchat: TUI Single Server IRC Client", "Author": "rmpython", "Content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/ I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!"},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "Global Silent Disco Live Broadcasting app", "Author": "HapHeirohFlow", "Content": "Import necessary libraries\nfrom flask import Flask, render_template, request, redirect, url_for, session from flask_socketio import SocketIO, emit, join_room, leave_room from flask_sqlalchemy import SQLAlchemy from werkzeug.security import generate_password_hash, check_password_hash from datetime import datetime import os\nInitialize the app and related components"},
{"Title": "Virtual Python workshops", "Author": "szabgab", "Content": "I have been been teaching programming at hi-tech companies for 24 years. For many years I taught Perl üê™ - I know, you all love it üòä and then for even more years I taught Python üêç. These days I also teach Rust. Recently I started to offer free online workshops via Zoom for all 3 languages. They include a presentation and then hands-on assignments to practice the things I explained. I hope these workshops will be interesting to some of the r/python members and that it is acceptable to occasionally mention the Python workshops here. (and I hope this time I put the proper flair on it)"},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone üëã The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "My honest opinions about Typer.", "Author": "RevolutionaryPen4661", "Content": "First of all, it's a very nice library to build great CLI, I have built like 10 CLIs till now just for my purposes like interaction with PYPI API, nodemon-like thing for Python (deleted the project for some reason, made when I was 12.5 years old) etc. but something makes me sad about this. Typer could've been a great tool if it was only built on top of argparse or optparse just like click (it is great but lacks good-quality documentation as said by a commenter on Reddit or Hacker News maybe).\nSee, Typer is itself written as a wrapper over click which is based on optparse which is calling functions over functions whatsoever! I know someone will come up with a joke called \"\". In general terms, it's wrapper + additional over a customizable wrapper over optparse. Which degrades the speed of execution time. I respect the project, that it simplifies the way of creating CLIs but it has a drawback, speed. I'm sceptical as to why they chose to click (for its internal dependency) over optparse or argparse for Typer development. If someone says, I don't give a this/that something your opinion. Undestand. This is just an opinion."},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Author": "0akman", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera. The Python code and documentation on my GitHub: https://github.com/FrunzaDan/Tool-Chip_Contact_Length The video: https://youtu.be/bndai6SlF6E Enjoy!\nWhat My Project Does"},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Author": "Character-Maybe-4400", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil. I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a pytest-edit plugin that adds an --edit option to Pytest. There isn't. So I created just that. Enjoy."},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "Why would anyone use pyqt if pyside exists", "Author": "AccordingBeyond2985", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "My honest opinions about Typer.", "Author": "RevolutionaryPen4661", "Content": "First of all, it's a very nice library to build great CLI, I have built like 10 CLIs till now just for my purposes like interaction with PYPI API, nodemon-like thing for Python (deleted the project for some reason, made when I was 12.5 years old) etc. but something makes me sad about this. Typer could've been a great tool if it was only built on top of argparse or optparse just like click (it is great but lacks good-quality documentation as said by a commenter on Reddit or Hacker News maybe).\nSee, Typer is itself written as a wrapper over click which is based on optparse which is calling functions over functions whatsoever! I know someone will come up with a joke called \"\". In general terms, it's wrapper + additional over a customizable wrapper over optparse. Which degrades the speed of execution time. I respect the project, that it simplifies the way of creating CLIs but it has a drawback, speed. I'm sceptical as to why they chose to click (for its internal dependency) over optparse or argparse for Typer development. If someone says, I don't give a this/that something your opinion. Undestand. This is just an opinion."},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Building an HTTP Server in Python", "Author": "mraza007", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python. Link to blog post"},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I‚Äôm looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and clich√©, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "Global Silent Disco Live Broadcasting app", "Author": "HapHeirohFlow", "Content": "Import necessary libraries\nfrom flask import Flask, render_template, request, redirect, url_for, session from flask_socketio import SocketIO, emit, join_room, leave_room from flask_sqlalchemy import SQLAlchemy from werkzeug.security import generate_password_hash, check_password_hash from datetime import datetime import os\nInitialize the app and related components"},
{"Title": "open source CLI tool for finding out how programs work", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow users to find out what frameworks, tools, engines a program / game was made in. Looks through a directory and searches for common folder structures, and file names. You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries. Image Example\nTarget Audience\nAnyone! Developers looking to learn how other programs were made, people who are just interested."},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "Python CLIs becoming too slow.", "Author": "RevolutionaryPen4661", "Content": "I have written a simple CLI program using (Argparse - Native Python CLI toolkit) that compares the size of the PyPI packages passed to parameters. It takes 4 seconds to print just a help message. On the other hand, clis like `uv` are extremely fast. (Made in Rust). What if we make a CLI toolkit similar to typer (a superset of click), click to improve the performance of our CLIs? This may seem silly to you. (I asked Claude 3 for a sample performance chart, here it is)\nHere's a comparison chart showing the estimated performance and speed improvements you might expect when using a Rust-based CLI toolkit for Python, as opposed to existing Python-based CLI libraries like Typer and Click:"},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Kivy School - Crowdfunding Update", "Author": "filipemarch", "Content": "We're excited to share that our Kivy School crowdfunding project on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal! We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at kivyschool.com and our course on Udemy. Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!"},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast‚Ñ¢Ô∏è because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience üòé Commands are in preview so expect missing stuff."},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "My honest opinions about Typer.", "Author": "RevolutionaryPen4661", "Content": "First of all, it's a very nice library to build great CLI, I have built like 10 CLIs till now just for my purposes like interaction with PYPI API, nodemon-like thing for Python (deleted the project for some reason, made when I was 12.5 years old) etc. but something makes me sad about this. Typer could've been a great tool if it was only built on top of argparse or optparse just like click (it is great but lacks good-quality documentation as said by a commenter on Reddit or Hacker News maybe).\nSee, Typer is itself written as a wrapper over click which is based on optparse which is calling functions over functions whatsoever! I know someone will come up with a joke called \"\". In general terms, it's wrapper + additional over a customizable wrapper over optparse. Which degrades the speed of execution time. I respect the project, that it simplifies the way of creating CLIs but it has a drawback, speed. I'm sceptical as to why they chose to click (for its internal dependency) over optparse or argparse for Typer development. If someone says, I don't give a this/that something your opinion. Undestand. This is just an opinion."},
{"Title": "Async Python Clarifications", "Author": "Cool-Focus6556", "Content": "Ok, so just so I have this straight:\nAsyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\nThe threading library creates threads and uses preemptive multitasking to context switch between threads\nAsyncio is more efficient than threading for the reasons above"},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboardüóíÔ∏è. I created a script to automate Bing searches for reward generation\nüëç Excellent command line experience.\nüôÇ User friendly."},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC‚Ä¶), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "The Problems with Celery", "Author": "hatchet-dev", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: https://docs.hatchet.run/blog/problems-with-celery Our issues with the Celery project were part of the reason why we started Hatchet. Would love to hear comments or feedback!"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast‚Ñ¢Ô∏è because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience üòé Commands are in preview so expect missing stuff."},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC‚Ä¶), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "EFT - A file extension for implementing user created themes", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable Example:\nmy_theme.eft - My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool"},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you‚Äôre working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "Flappy Berd in PyQt", "Author": "GhnQuix", "Content": "Hello there What my project does: I‚Äôm excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! üòÉ As Richard Watterson once said: \"10/10 game, would play again.\" Target Audience This game is for anyone who‚Äôs bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience. Comparison Think of it as a faithful recreation of Flappy Bird with a PyQt twist."},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "I have made an open source library for logging errors / messages :)", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file. Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience"},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "Just released my first Python package: Melodica Notes üé∂", "Author": "bettercallsenna", "Content": "Hey everyone! I‚Äôm excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics. What My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players. Target Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it‚Äôs fully functional, I consider it an evolving tool and welcome contributions to enhance its features."},
{"Title": "Building AI Text-to-Video Model From Scratch", "Author": "FareedKhan557", "Content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos."},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast‚Ñ¢Ô∏è because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience üòé Commands are in preview so expect missing stuff."},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Author": "jcoelho93", "Content": "What my project does: It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc. Target Audience Developers mostly, I guess Comparison I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line. Code: Here's the GitHub repo https://github.com/jcoelho93/steer"},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC‚Ä¶), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "Async Python adoption?", "Author": "mcharytoniuk", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python? I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "My Thoughts on Python in Excel", "Author": "fzumstein", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel Here‚Äôs the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn‚Äôt suitable for Python beginners nor for interactive data analysis"},
{"Title": "Building AI Text-to-Video Model From Scratch", "Author": "FareedKhan557", "Content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos."},
{"Title": "Tuples Are Underrated! List vs Tuple üêç", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ‚ò∫Ô∏è https://youtu.be/-sO4FG6W4ho"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can‚Äôt build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "GUI Recommendations", "Author": "Mrkrabsstalker", "Content": "I built a Matlab app for my grandfather's business with my student version. I need to make it accessible on his employees computers. Matlab comiler seems not worth it, so I was wondering if I translated it into a python GUI which one would make it easy to distribute for preferably a low to zero cost."},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, ‚Ä¶)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "My Thoughts on Python in Excel", "Author": "fzumstein", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel Here‚Äôs the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn‚Äôt suitable for Python beginners nor for interactive data analysis"},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "Kwargs appreciation thread", "Author": "TheRealFrostMana", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though! I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go. Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean: some_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)"},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "GUI Recommendations", "Author": "Mrkrabsstalker", "Content": "I built a Matlab app for my grandfather's business with my student version. I need to make it accessible on his employees computers. Matlab comiler seems not worth it, so I was wondering if I translated it into a python GUI which one would make it easy to distribute for preferably a low to zero cost."},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "Suck at Automate the Boring Stuff - Need Assurance", "Author": "COOKIEMONSTER-315", "Content": "I‚Äôve been working hard at learning Python this past year and I‚Äôve been doing ok at it. I‚Äôve used a lot of the commonly recommended books and YouTube channels and like them all except for some reason, I still struggle like crazy with the practice problems in Automate the Boring Stuff. Is this a sign that I still suck a Python, or are the practice problems at the end of the chapters known to be difficult? Looking for a sanity check in my progress basically. Automate The Boring Stuff"},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone üëã The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "Open-source AI shorts generator in python", "Author": "ANil1729", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc. Link to code :- https://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Author": "jgloewen", "Content": "The Python Shiny library is a framework for building interactive web applications in Python. Developed by RStudio, the same team behind the Shiny library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills. All that is needed is knowledge of the Shiny user interface Application Programming Interface (API). Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone."},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "Building AI Text-to-Video Model From Scratch", "Author": "FareedKhan557", "Content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos."},
{"Title": "Kwargs appreciation thread", "Author": "TheRealFrostMana", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though! I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go. Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean: some_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)"},
{"Title": "Tiny Python for x64 Server 2022?", "Author": "amckern", "Content": "I am using a 5-line script on Windows Server (production container is set up with 1GB memory) - is there a tiny Python that I can use that is optimised for small memory machines? I am not familiar with self-compiling the source (I have grown up with Visual Studio) so am after a pre-compiled release. Happy to use anything in the 3.12.x branch."},
{"Title": "Suck at Automate the Boring Stuff - Need Assurance", "Author": "COOKIEMONSTER-315", "Content": "I‚Äôve been working hard at learning Python this past year and I‚Äôve been doing ok at it. I‚Äôve used a lot of the commonly recommended books and YouTube channels and like them all except for some reason, I still struggle like crazy with the practice problems in Automate the Boring Stuff. Is this a sign that I still suck a Python, or are the practice problems at the end of the chapters known to be difficult? Looking for a sanity check in my progress basically. Automate The Boring Stuff"},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "Made a Minimalistic Router for Uvicorn", "Author": "achaayb", "Content": "Hey everyone, I've been working on a simple router for Uvicorn called ASGIRouter. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\nWhat My Project Does\nASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn. This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs."},
{"Title": "Open-source AI shorts generator in python", "Author": "ANil1729", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc. Link to code :- https://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "My Thoughts on Python in Excel", "Author": "fzumstein", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel Here‚Äôs the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn‚Äôt suitable for Python beginners nor for interactive data analysis"},
{"Title": "Tiny Python for x64 Server 2022?", "Author": "amckern", "Content": "I am using a 5-line script on Windows Server (production container is set up with 1GB memory) - is there a tiny Python that I can use that is optimised for small memory machines? I am not familiar with self-compiling the source (I have grown up with Visual Studio) so am after a pre-compiled release. Happy to use anything in the 3.12.x branch."},
{"Title": "GUI Recommendations", "Author": "Mrkrabsstalker", "Content": "I built a Matlab app for my grandfather's business with my student version. I need to make it accessible on his employees computers. Matlab comiler seems not worth it, so I was wondering if I translated it into a python GUI which one would make it easy to distribute for preferably a low to zero cost."},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and clich√©, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Author": "itssimon86", "Content": "Hey Python community! I‚Äôd like to introduce you to my indie product Apitally, a simple API monitoring & analytics tool for Python projects.\nWhat My Project Does\nApitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down. Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally‚Äôs servers in regular intervals."},
{"Title": "Made a Minimalistic Router for Uvicorn", "Author": "achaayb", "Content": "Hey everyone, I've been working on a simple router for Uvicorn called ASGIRouter. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\nWhat My Project Does\nASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn. This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Author": "aman6944", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found https://github.com/SeleniumHQ/selenium/pull/13173 .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find. I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Textchat: TUI Single Server IRC Client", "Author": "rmpython", "Content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/ I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!"},
{"Title": "Kwargs appreciation thread", "Author": "TheRealFrostMana", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though! I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go. Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean: some_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)"},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "Suck at Automate the Boring Stuff - Need Assurance", "Author": "COOKIEMONSTER-315", "Content": "I‚Äôve been working hard at learning Python this past year and I‚Äôve been doing ok at it. I‚Äôve used a lot of the commonly recommended books and YouTube channels and like them all except for some reason, I still struggle like crazy with the practice problems in Automate the Boring Stuff. Is this a sign that I still suck a Python, or are the practice problems at the end of the chapters known to be difficult? Looking for a sanity check in my progress basically. Automate The Boring Stuff"},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Author": "itssimon86", "Content": "Hey Python community! I‚Äôd like to introduce you to my indie product Apitally, a simple API monitoring & analytics tool for Python projects.\nWhat My Project Does\nApitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down. Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally‚Äôs servers in regular intervals."},
{"Title": "Virtual Python workshops", "Author": "szabgab", "Content": "I have been been teaching programming at hi-tech companies for 24 years. For many years I taught Perl üê™ - I know, you all love it üòä and then for even more years I taught Python üêç. These days I also teach Rust. Recently I started to offer free online workshops via Zoom for all 3 languages. They include a presentation and then hands-on assignments to practice the things I explained. I hope these workshops will be interesting to some of the r/python members and that it is acceptable to occasionally mention the Python workshops here. (and I hope this time I put the proper flair on it)"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Open-source AI shorts generator in python", "Author": "ANil1729", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc. Link to code :- https://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Author": "aman6944", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found https://github.com/SeleniumHQ/selenium/pull/13173 .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find. I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Author": "0akman", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera. The Python code and documentation on my GitHub: https://github.com/FrunzaDan/Tool-Chip_Contact_Length The video: https://youtu.be/bndai6SlF6E Enjoy!\nWhat My Project Does"},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboardüóíÔ∏è. I created a script to automate Bing searches for reward generation\nüëç Excellent command line experience.\nüôÇ User friendly."},
{"Title": "Tiny Python for x64 Server 2022?", "Author": "amckern", "Content": "I am using a 5-line script on Windows Server (production container is set up with 1GB memory) - is there a tiny Python that I can use that is optimised for small memory machines? I am not familiar with self-compiling the source (I have grown up with Visual Studio) so am after a pre-compiled release. Happy to use anything in the 3.12.x branch."},
{"Title": "Textchat: TUI Single Server IRC Client", "Author": "rmpython", "Content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/ I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!"},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Author": "Character-Maybe-4400", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil. I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a pytest-edit plugin that adds an --edit option to Pytest. There isn't. So I created just that. Enjoy."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "Made a Minimalistic Router for Uvicorn", "Author": "achaayb", "Content": "Hey everyone, I've been working on a simple router for Uvicorn called ASGIRouter. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\nWhat My Project Does\nASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn. This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs."},
{"Title": "Why would anyone use pyqt if pyside exists", "Author": "AccordingBeyond2985", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Virtual Python workshops", "Author": "szabgab", "Content": "I have been been teaching programming at hi-tech companies for 24 years. For many years I taught Perl üê™ - I know, you all love it üòä and then for even more years I taught Python üêç. These days I also teach Rust. Recently I started to offer free online workshops via Zoom for all 3 languages. They include a presentation and then hands-on assignments to practice the things I explained. I hope these workshops will be interesting to some of the r/python members and that it is acceptable to occasionally mention the Python workshops here. (and I hope this time I put the proper flair on it)"},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Author": "0akman", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera. The Python code and documentation on my GitHub: https://github.com/FrunzaDan/Tool-Chip_Contact_Length The video: https://youtu.be/bndai6SlF6E Enjoy!\nWhat My Project Does"},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Building an HTTP Server in Python", "Author": "mraza007", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python. Link to blog post"},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you‚Äôre working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Author": "itssimon86", "Content": "Hey Python community! I‚Äôd like to introduce you to my indie product Apitally, a simple API monitoring & analytics tool for Python projects.\nWhat My Project Does\nApitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down. Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally‚Äôs servers in regular intervals."},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Author": "Character-Maybe-4400", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil. I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a pytest-edit plugin that adds an --edit option to Pytest. There isn't. So I created just that. Enjoy."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "Why would anyone use pyqt if pyside exists", "Author": "AccordingBeyond2985", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies", "Author": "ManyInterests", "Content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are yanked. The important effect this has had is anyone who may have defined their requirements as something like PySimpleGUI<5 or PySimpleGUI==4.x.x for a now-deleted version, your installations will fail with a message like:"},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Author": "aman6944", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found https://github.com/SeleniumHQ/selenium/pull/13173 .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find. I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "open source CLI tool for finding out how programs work", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow users to find out what frameworks, tools, engines a program / game was made in. Looks through a directory and searches for common folder structures, and file names. You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries. Image Example\nTarget Audience\nAnyone! Developers looking to learn how other programs were made, people who are just interested."},
{"Title": "Building an HTTP Server in Python", "Author": "mraza007", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python. Link to blog post"},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "Textchat: TUI Single Server IRC Client", "Author": "rmpython", "Content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/ I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!"},
{"Title": "Python CLIs becoming too slow.", "Author": "RevolutionaryPen4661", "Content": "I have written a simple CLI program using (Argparse - Native Python CLI toolkit) that compares the size of the PyPI packages passed to parameters. It takes 4 seconds to print just a help message. On the other hand, clis like `uv` are extremely fast. (Made in Rust). What if we make a CLI toolkit similar to typer (a superset of click), click to improve the performance of our CLIs? This may seem silly to you. (I asked Claude 3 for a sample performance chart, here it is)\nHere's a comparison chart showing the estimated performance and speed improvements you might expect when using a Rust-based CLI toolkit for Python, as opposed to existing Python-based CLI libraries like Typer and Click:"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Virtual Python workshops", "Author": "szabgab", "Content": "I have been been teaching programming at hi-tech companies for 24 years. For many years I taught Perl üê™ - I know, you all love it üòä and then for even more years I taught Python üêç. These days I also teach Rust. Recently I started to offer free online workshops via Zoom for all 3 languages. They include a presentation and then hands-on assignments to practice the things I explained. I hope these workshops will be interesting to some of the r/python members and that it is acceptable to occasionally mention the Python workshops here. (and I hope this time I put the proper flair on it)"},
{"Title": "Kivy School - Crowdfunding Update", "Author": "filipemarch", "Content": "We're excited to share that our Kivy School crowdfunding project on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal! We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at kivyschool.com and our course on Udemy. Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!"},
{"Title": "open source CLI tool for finding out how programs work", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow users to find out what frameworks, tools, engines a program / game was made in. Looks through a directory and searches for common folder structures, and file names. You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries. Image Example\nTarget Audience\nAnyone! Developers looking to learn how other programs were made, people who are just interested."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Author": "0akman", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera. The Python code and documentation on my GitHub: https://github.com/FrunzaDan/Tool-Chip_Contact_Length The video: https://youtu.be/bndai6SlF6E Enjoy!\nWhat My Project Does"},
{"Title": "Async Python Clarifications", "Author": "Cool-Focus6556", "Content": "Ok, so just so I have this straight:\nAsyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\nThe threading library creates threads and uses preemptive multitasking to context switch between threads\nAsyncio is more efficient than threading for the reasons above"},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "Python CLIs becoming too slow.", "Author": "RevolutionaryPen4661", "Content": "I have written a simple CLI program using (Argparse - Native Python CLI toolkit) that compares the size of the PyPI packages passed to parameters. It takes 4 seconds to print just a help message. On the other hand, clis like `uv` are extremely fast. (Made in Rust). What if we make a CLI toolkit similar to typer (a superset of click), click to improve the performance of our CLIs? This may seem silly to you. (I asked Claude 3 for a sample performance chart, here it is)\nHere's a comparison chart showing the estimated performance and speed improvements you might expect when using a Rust-based CLI toolkit for Python, as opposed to existing Python-based CLI libraries like Typer and Click:"},
{"Title": "The Problems with Celery", "Author": "hatchet-dev", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: https://docs.hatchet.run/blog/problems-with-celery Our issues with the Celery project were part of the reason why we started Hatchet. Would love to hear comments or feedback!"},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Author": "Character-Maybe-4400", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil. I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a pytest-edit plugin that adds an --edit option to Pytest. There isn't. So I created just that. Enjoy."},
{"Title": "Tuples Are Underrated! List vs Tuple üêç", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ‚ò∫Ô∏è https://youtu.be/-sO4FG6W4ho"},
{"Title": "Kivy School - Crowdfunding Update", "Author": "filipemarch", "Content": "We're excited to share that our Kivy School crowdfunding project on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal! We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at kivyschool.com and our course on Udemy. Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Why would anyone use pyqt if pyside exists", "Author": "AccordingBeyond2985", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "Async Python Clarifications", "Author": "Cool-Focus6556", "Content": "Ok, so just so I have this straight:\nAsyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\nThe threading library creates threads and uses preemptive multitasking to context switch between threads\nAsyncio is more efficient than threading for the reasons above"},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, ‚Ä¶)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "EFT - A file extension for implementing user created themes", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable Example:\nmy_theme.eft - My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool"},
{"Title": "Building an HTTP Server in Python", "Author": "mraza007", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python. Link to blog post"},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I‚Äôm looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "The Problems with Celery", "Author": "hatchet-dev", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: https://docs.hatchet.run/blog/problems-with-celery Our issues with the Celery project were part of the reason why we started Hatchet. Would love to hear comments or feedback!"},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "Flappy Berd in PyQt", "Author": "GhnQuix", "Content": "Hello there What my project does: I‚Äôm excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! üòÉ As Richard Watterson once said: \"10/10 game, would play again.\" Target Audience This game is for anyone who‚Äôs bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience. Comparison Think of it as a faithful recreation of Flappy Bird with a PyQt twist."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Global Silent Disco Live Broadcasting app", "Author": "HapHeirohFlow", "Content": "Import necessary libraries\nfrom flask import Flask, render_template, request, redirect, url_for, session from flask_socketio import SocketIO, emit, join_room, leave_room from flask_sqlalchemy import SQLAlchemy from werkzeug.security import generate_password_hash, check_password_hash from datetime import datetime import os\nInitialize the app and related components"},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I have made an open source library for logging errors / messages :)", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file. Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience"},
{"Title": "open source CLI tool for finding out how programs work", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow users to find out what frameworks, tools, engines a program / game was made in. Looks through a directory and searches for common folder structures, and file names. You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries. Image Example\nTarget Audience\nAnyone! Developers looking to learn how other programs were made, people who are just interested."},
{"Title": "EFT - A file extension for implementing user created themes", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable Example:\nmy_theme.eft - My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool"},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "Tach - enforce module boundaries + deps, now in Rust ü¶Ä", "Author": "the1024", "Content": "https://github.com/gauge-sh/tach Hey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\nRe-wrote the core in Rust, leading to a ~19x speed up on large repos\nRe-worked the interface, and added a TUI to let you interactively declare modules\nWe built Tach to solve the ‚Äúball of mud‚Äù problem that we‚Äôve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!"},
{"Title": "Just released my first Python package: Melodica Notes üé∂", "Author": "bettercallsenna", "Content": "Hey everyone! I‚Äôm excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics. What My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players. Target Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it‚Äôs fully functional, I consider it an evolving tool and welcome contributions to enhance its features."},
{"Title": "Python CLIs becoming too slow.", "Author": "RevolutionaryPen4661", "Content": "I have written a simple CLI program using (Argparse - Native Python CLI toolkit) that compares the size of the PyPI packages passed to parameters. It takes 4 seconds to print just a help message. On the other hand, clis like `uv` are extremely fast. (Made in Rust). What if we make a CLI toolkit similar to typer (a superset of click), click to improve the performance of our CLIs? This may seem silly to you. (I asked Claude 3 for a sample performance chart, here it is)\nHere's a comparison chart showing the estimated performance and speed improvements you might expect when using a Rust-based CLI toolkit for Python, as opposed to existing Python-based CLI libraries like Typer and Click:"},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "Flappy Berd in PyQt", "Author": "GhnQuix", "Content": "Hello there What my project does: I‚Äôm excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! üòÉ As Richard Watterson once said: \"10/10 game, would play again.\" Target Audience This game is for anyone who‚Äôs bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience. Comparison Think of it as a faithful recreation of Flappy Bird with a PyQt twist."},
{"Title": "New Lands RPG (Play testers welcome)", "Author": "Littlebudddy_321", "Content": "Good \"time of day\" my fellow peeps What my project does: I wanted to share my Python game I've been slowly working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you... Target Audience: I'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax..."},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Author": "jcoelho93", "Content": "What my project does: It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc. Target Audience Developers mostly, I guess Comparison I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line. Code: Here's the GitHub repo https://github.com/jcoelho93/steer"},
{"Title": "Kivy School - Crowdfunding Update", "Author": "filipemarch", "Content": "We're excited to share that our Kivy School crowdfunding project on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal! We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at kivyschool.com and our course on Udemy. Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!"},
{"Title": "I have made an open source library for logging errors / messages :)", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file. Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience"},
{"Title": "My honest opinions about Typer.", "Author": "RevolutionaryPen4661", "Content": "First of all, it's a very nice library to build great CLI, I have built like 10 CLIs till now just for my purposes like interaction with PYPI API, nodemon-like thing for Python (deleted the project for some reason, made when I was 12.5 years old) etc. but something makes me sad about this. Typer could've been a great tool if it was only built on top of argparse or optparse just like click (it is great but lacks good-quality documentation as said by a commenter on Reddit or Hacker News maybe).\nSee, Typer is itself written as a wrapper over click which is based on optparse which is calling functions over functions whatsoever! I know someone will come up with a joke called \"\". In general terms, it's wrapper + additional over a customizable wrapper over optparse. Which degrades the speed of execution time. I respect the project, that it simplifies the way of creating CLIs but it has a drawback, speed. I'm sceptical as to why they chose to click (for its internal dependency) over optparse or argparse for Typer development. If someone says, I don't give a this/that something your opinion. Undestand. This is just an opinion."},
{"Title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite", "Author": "JaggedParadigm", "Content": "What My Project Does: Moonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\necstatic: price too low so they are extra happy\ncontent: price is what they were expecting,\nsad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period"},
{"Title": "Async Python adoption?", "Author": "mcharytoniuk", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python? I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "Async Python Clarifications", "Author": "Cool-Focus6556", "Content": "Ok, so just so I have this straight:\nAsyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\nThe threading library creates threads and uses preemptive multitasking to context switch between threads\nAsyncio is more efficient than threading for the reasons above"},
{"Title": "Just released my first Python package: Melodica Notes üé∂", "Author": "bettercallsenna", "Content": "Hey everyone! I‚Äôm excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics. What My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players. Target Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it‚Äôs fully functional, I consider it an evolving tool and welcome contributions to enhance its features."},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "Mesop, open-source Python UI framework used at Google to quickly build delightful web apps", "Author": "wwwillchen", "Content": "What my project does: I‚Äôm excited to share about Mesop - a new, open-source Python UI framework that enables Python developers to quickly build delightful web apps in a scalable way. A small team of us at Google have been developing Mesop as an unofficial 20% project for the past few months. A wide range of research and product teams at Google have been using it to rapidly build internal apps and we‚Äôve gotten a lot of positive feedback internally so now we‚Äôre looking to get feedback from the open-source community. Target audience: Python developers looking to build AI demos & internal apps."},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can‚Äôt build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "The Problems with Celery", "Author": "hatchet-dev", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: https://docs.hatchet.run/blog/problems-with-celery Our issues with the Celery project were part of the reason why we started Hatchet. Would love to hear comments or feedback!"},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Author": "jcoelho93", "Content": "What my project does: It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc. Target Audience Developers mostly, I guess Comparison I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line. Code: Here's the GitHub repo https://github.com/jcoelho93/steer"},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "Dask DataFrame is Fast Now!", "Author": "phofl93", "Content": "My colleagues and I have been working on making Dask fast. It‚Äôs been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload). I wrote a blog post on what we did: https://docs.coiled.io/blog/dask-dataframe-is-fast.html Really, this came down not to doing one thing really well, but doing lots of small things ‚Äúpretty good‚Äù. Some of the most prominent changes include:\nApache Arrow support in pandas"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "Async Python adoption?", "Author": "mcharytoniuk", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python? I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "EFT - A file extension for implementing user created themes", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable Example:\nmy_theme.eft - My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool"},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "Automate your WordPress new-page creation with Python", "Author": "EngineeringFit5761", "Content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin). It's a simple app, but has great expansion potential and it's really easy to use. To start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page. Run the program, add sections, choose your desired structure, and select the right widgets for your content. Once you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)"},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can‚Äôt build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone üëã The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "Flappy Berd in PyQt", "Author": "GhnQuix", "Content": "Hello there What my project does: I‚Äôm excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! üòÉ As Richard Watterson once said: \"10/10 game, would play again.\" Target Audience This game is for anyone who‚Äôs bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience. Comparison Think of it as a faithful recreation of Flappy Bird with a PyQt twist."},
{"Title": "Granian 1.4 is out", "Author": "gi0baro", "Content": "Granian ‚Äì the Rust HTTP server for Python applications ‚Äì 1.4 was released! Blog post: https://polar.sh/emmett-framework/posts/granian-1-4 Release details: https://github.com/emmett-framework/granian/releases/tag/v1.4.0 Repo: https://github.com/emmett-framework/granian"},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "I have made an open source library for logging errors / messages :)", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file. Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience"},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast‚Ñ¢Ô∏è because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience üòé Commands are in preview so expect missing stuff."},
{"Title": "Just released my first Python package: Melodica Notes üé∂", "Author": "bettercallsenna", "Content": "Hey everyone! I‚Äôm excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics. What My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players. Target Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it‚Äôs fully functional, I consider it an evolving tool and welcome contributions to enhance its features."},
{"Title": "My little ChatGPT-Multimodal Server Starter", "Author": "TwistedMinda", "Content": "Please check out my Desktoppy Server. What My Project Does It allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's. It uses ollama internally so you can use all the open-source Models but by default it's using:\nLLama3 for text-generation\nLLava for image recognition\nStable Diffusion 2 for image generation"},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone üëã The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC‚Ä¶), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Author": "jcoelho93", "Content": "What my project does: It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc. Target Audience Developers mostly, I guess Comparison I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line. Code: Here's the GitHub repo https://github.com/jcoelho93/steer"},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation", "Author": "pdcz", "Content": "Hi everyone, I'd like to share couple of news regarding my personal project:\nNew documentation written in Ludic showcasing it's capabilities: https://getludic.dev/docs/\nNew section regrading Layouts inspired from the Every Layout Book: https://getludic.dev/catalog/layouts\nCookiecutter template to get quickly started: https://github.com/paveldedik/ludic-template\nI have a lot of plans with this project and I'd appreciate any feedback. About The Project Ludic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components."},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Async Python adoption?", "Author": "mcharytoniuk", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python? I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "Python's many command-line utilities", "Author": "treyhunner", "Content": "Python 3.12 comes bundled with 50 command-line tools. For example, python -m webbrowser http://example.com opens a web browser, python -m sqlite3 launches a sqlite prompt, and python -m ast my_file.py shows the abstract syntax tree for a given Python file. I've dug into each of them and categorized them based on their purpose and how useful they are. Python's many command-line tools"},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and clich√©, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can‚Äôt build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa", "Author": "Jaeger1987", "Content": "What My Project Does Hello everyone! I've just released a new Python package, notion2pandas, which allows you to import a Notion database into a pandas dataframe with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code. Target Audience Whether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding! üîó GitLab repo: https://gitlab.com/Jaeger87/notion2pandas Key Features"},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and clich√©, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can‚Äôt build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it ü§û", "Author": "VoyZan", "Content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts: tl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in this Gist.\nProblem\nRequest rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of counter. Multiprocessing is not great at having a single shared variable."},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone üëã The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "Using python for static typing benefits", "Author": "britishbanana", "Content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced. I'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things."},
{"Title": "Building AI Text-to-Video Model From Scratch", "Author": "FareedKhan557", "Content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos."},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboardüóíÔ∏è. I created a script to automate Bing searches for reward generation\nüëç Excellent command line experience.\nüôÇ User friendly."},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "PyODMongo an ODM for MongoDB", "Author": "maurinhoandre", "Content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\nBuilt on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents."},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tutorial on Surprisingly Simple Python Streamlit Dashboards", "Author": "jgloewen", "Content": "Streamlit is becoming an increasingly a popular framework for data visualization prototyping with Python. The Streamlit framework saves time, effort, and reduces the complexity traditionally associated with crafting maps and charts.Particularly if we approach application development with a modular approach. Starting simple, let‚Äôs put together 4 specific examples that leverage Streamlit for interactive data visualization:\nA global choropleth map for a dataset for a specific year."},
{"Title": "My Thoughts on Python in Excel", "Author": "fzumstein", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel Here‚Äôs the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn‚Äôt suitable for Python beginners nor for interactive data analysis"},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboardüóíÔ∏è. I created a script to automate Bing searches for reward generation\nüëç Excellent command line experience.\nüôÇ User friendly."},
{"Title": "GUI Recommendations", "Author": "Mrkrabsstalker", "Content": "I built a Matlab app for my grandfather's business with my student version. I need to make it accessible on his employees computers. Matlab comiler seems not worth it, so I was wondering if I translated it into a python GUI which one would make it easy to distribute for preferably a low to zero cost."},
{"Title": "Self updating spreadsheet with popular questions from Ask Reddit and summarized answers using OpenAI", "Author": "DouweOsinga", "Content": "What My Project Does\nThis is a small Python script that runs inside a Google Sheet by way of the Python add-on. It uses the reddit api to fetch posts from Ask Reddit twice daily. For posts with enough upvotes, it uses the OpenAI API to summarize an answer to the question based on the comments. I then inserts any new questions and their answers into the spreadsheet and uses the Twitter APIto also post the answer to Twitter I mean X. Should be interesting to anybody looking to connect (a subset) of those APIs."},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you‚Äôre working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and clich√©, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Kwargs appreciation thread", "Author": "TheRealFrostMana", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though! I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go. Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean: some_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)"},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you‚Äôre working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Suck at Automate the Boring Stuff - Need Assurance", "Author": "COOKIEMONSTER-315", "Content": "I‚Äôve been working hard at learning Python this past year and I‚Äôve been doing ok at it. I‚Äôve used a lot of the commonly recommended books and YouTube channels and like them all except for some reason, I still struggle like crazy with the practice problems in Automate the Boring Stuff. Is this a sign that I still suck a Python, or are the practice problems at the end of the chapters known to be difficult? Looking for a sanity check in my progress basically. Automate The Boring Stuff"},
{"Title": "1BRC solution using CPython", "Author": "pappuks", "Content": "What My Project Does: I finally got some time to attempt the 1 Billion Row Challenge (1BRC) (https://www.morling.dev/blog/one-billion-row-challenge/) where we are supposed to process a file with 1 billion records of temperature values for cities and print a sorted list with min, max and mean temperature per city. I am a sucker for optimization. So when I heard about 1BRC I got intrigued and in the last few days started experimenting with python implementations. I achieved my goal and implemented the fastest implementation running on CPython, without any external libraries. My motivation for CPython was so that I can apply any of the learning's in my day to day work, as I don't see us moving to PyPy any time sooner."},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Community Insights on PgQueuer", "Author": "GabelSnabel", "Content": "Hey r/Python! A while ago, I introduced you to PgQueuer, a Python library designed for handling job queues using Postgres native functionalities. If you've started using PgQueuer, I‚Äôm keen to initiate a discussion on your experiences with it.\nHow and where have you integrated PgQueuer into your projects?\nAny difficulties or shortcomings you‚Äôve experienced while using PgQueuer?\nThoughts on the library‚Äôs efficiency and features?"},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "Keep system awake (prevent sleep) using python: wakepy", "Author": "fohrloop", "Content": "Hi all, I had previously a problem that I wanted to run some long running python scripts without being interrupted by the automatic suspend. I did not find a package that would solve the problem, so I decided to create my own. In the design, I have selected non-disruptive methods which do not rely on mouse movement or pressing a button like F15 or alter system settings. Instead, I've chosen methods that use the APIs and executables meant specifically for the purpose. I've just released wakepy 0.9.0 which supports Windows, macOS, Gnome, KDE and freedesktop.org compliant DEs."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboardüóíÔ∏è. I created a script to automate Bing searches for reward generation\nüëç Excellent command line experience.\nüôÇ User friendly."},
{"Title": "Tuples Are Underrated! List vs Tuple üêç", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ‚ò∫Ô∏è https://youtu.be/-sO4FG6W4ho"},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone üëã The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, ‚Ä¶)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "Tuples Are Underrated! List vs Tuple üêç", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ‚ò∫Ô∏è https://youtu.be/-sO4FG6W4ho"},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you‚Äôre working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, ‚Ä¶)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and clich√©, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tuples Are Underrated! List vs Tuple üêç", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ‚ò∫Ô∏è https://youtu.be/-sO4FG6W4ho"},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboardüóíÔ∏è. I created a script to automate Bing searches for reward generation\nüëç Excellent command line experience.\nüôÇ User friendly."},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, ‚Ä¶)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you‚Äôre working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "Tuples Are Underrated! List vs Tuple üêç", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ‚ò∫Ô∏è https://youtu.be/-sO4FG6W4ho"},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, ‚Ä¶)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Author": "Content_Ad_4153", "Content": "Problem Statement I recently explored SonarQube for static code analysis. While it‚Äôs a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself. Target Audience This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback! Comparison with Similar Tools There was only one similar tool in the Sonar Marketplace, but it‚Äôs no longer maintained. Project Details I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub."},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Author": "Eastern_Reporter_834", "Content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!"},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can‚Äôt build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Author": "good-guy-coder", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities. What My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI. GitHub Repository: NiimPrintX"},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I‚Äôm looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "zeroize: Securely clear secrets from memory", "Author": "radumarias", "Content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "Global Silent Disco Live Broadcasting app", "Author": "HapHeirohFlow", "Content": "Import necessary libraries\nfrom flask import Flask, render_template, request, redirect, url_for, session from flask_socketio import SocketIO, emit, join_room, leave_room from flask_sqlalchemy import SQLAlchemy from werkzeug.security import generate_password_hash, check_password_hash from datetime import datetime import os\nInitialize the app and related components"},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Author": "radumarias", "Content": "https://github.com/radumarias/rencrypt-python\nWhat My Project Does: A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\nTarget Audience This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet."},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Author": "eonlav", "Content": "What My Project Does Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models. Video running Phi-2 model on a MacBook Air with 8GB RAM, all CPU Target Audience Devs looking to experiment with integrating on-device AI into their software. Comparison\nJARVIS - an all API-based solution using DeepGram, OpenAI and ElevenLabs\nLocal Talking LLM - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word."},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can‚Äôt build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "My honest opinions about Typer.", "Author": "RevolutionaryPen4661", "Content": "First of all, it's a very nice library to build great CLI, I have built like 10 CLIs till now just for my purposes like interaction with PYPI API, nodemon-like thing for Python (deleted the project for some reason, made when I was 12.5 years old) etc. but something makes me sad about this. Typer could've been a great tool if it was only built on top of argparse or optparse just like click (it is great but lacks good-quality documentation as said by a commenter on Reddit or Hacker News maybe).\nSee, Typer is itself written as a wrapper over click which is based on optparse which is calling functions over functions whatsoever! I know someone will come up with a joke called \"\". In general terms, it's wrapper + additional over a customizable wrapper over optparse. Which degrades the speed of execution time. I respect the project, that it simplifies the way of creating CLIs but it has a drawback, speed. I'm sceptical as to why they chose to click (for its internal dependency) over optparse or argparse for Typer development. If someone says, I don't give a this/that something your opinion. Undestand. This is just an opinion."},
{"Title": "Calculator without eval()", "Author": "Zorgon-589", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python. TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions. COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators! See the below link for github: https://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try."},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone üëã The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Author": "neozhaoliang", "Content": "What My Project Does An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs. Target Audience RAG applications developers. Comparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies."},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "Circler imports in Observer design pattern in Python", "Author": "ALior1", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve. At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error. I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this."},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can‚Äôt build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python) * **What My Project Does** A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try. * **Target Audience** This is just a toy project as a learning experience"},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone üëã The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "AndroidWorld ‚Äî Build and test AI agents on Android", "Author": "crawles89", "Content": "What it does: It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging. It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them. Target Audience: Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you‚Äôd like and test out the default agent, M3A, on it. Just give it a task like ‚ÄúShow my most recent purchases on Amazon.‚Äù You can also build your own agent."},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and clich√©, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone üëã The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast‚Ñ¢Ô∏è because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience üòé Commands are in preview so expect missing stuff."},
{"Title": "Rio: WebApps in pure Python ‚Äì Thanks and Feedback wanted!", "Author": "Sn3llius", "Content": "Hey everyone, I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for! As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned! We are looking forward to your feedback, so let us hear from you! :) GitHub"},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC‚Ä¶), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "2024 StackOverflow Survey", "Author": "monorepo", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish. Link to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "cachebox: The fastest caching library written in Rust", "Author": "SpareRevolution1487", "Content": "What my library does You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs. One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary. Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code."},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and clich√©, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Author": "jgloewen", "Content": "The Python Shiny library is a framework for building interactive web applications in Python. Developed by RStudio, the same team behind the Shiny library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills. All that is needed is knowledge of the Shiny user interface Application Programming Interface (API). Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone."},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboardüóíÔ∏è. I created a script to automate Bing searches for reward generation\nüëç Excellent command line experience.\nüôÇ User friendly."},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies", "Author": "ManyInterests", "Content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are yanked. The important effect this has had is anyone who may have defined their requirements as something like PySimpleGUI<5 or PySimpleGUI==4.x.x for a now-deleted version, your installations will fail with a message like:"},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and clich√©, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Author": "PyDataAmsterdam", "Content": "Hey all, we will close the Call for Proposals portal this Sunday, June 2, for our PyData Amsterdam 2024 Conference which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > https://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tach - enforce module boundaries + deps, now in Rust ü¶Ä", "Author": "the1024", "Content": "https://github.com/gauge-sh/tach Hey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\nRe-wrote the core in Rust, leading to a ~19x speed up on large repos\nRe-worked the interface, and added a TUI to let you interactively declare modules\nWe built Tach to solve the ‚Äúball of mud‚Äù problem that we‚Äôve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!"},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you‚Äôre working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboardüóíÔ∏è. I created a script to automate Bing searches for reward generation\nüëç Excellent command line experience.\nüôÇ User friendly."},
{"Title": "New Lands RPG (Play testers welcome)", "Author": "Littlebudddy_321", "Content": "Good \"time of day\" my fellow peeps What my project does: I wanted to share my Python game I've been slowly working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you... Target Audience: I'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax..."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Building AI Text-to-Video Model From Scratch", "Author": "FareedKhan557", "Content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos."},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite", "Author": "JaggedParadigm", "Content": "What My Project Does: Moonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\necstatic: price too low so they are extra happy\ncontent: price is what they were expecting,\nsad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboardüóíÔ∏è. I created a script to automate Bing searches for reward generation\nüëç Excellent command line experience.\nüôÇ User friendly."},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "Mesop, open-source Python UI framework used at Google to quickly build delightful web apps", "Author": "wwwillchen", "Content": "What my project does: I‚Äôm excited to share about Mesop - a new, open-source Python UI framework that enables Python developers to quickly build delightful web apps in a scalable way. A small team of us at Google have been developing Mesop as an unofficial 20% project for the past few months. A wide range of research and product teams at Google have been using it to rapidly build internal apps and we‚Äôve gotten a lot of positive feedback internally so now we‚Äôre looking to get feedback from the open-source community. Target audience: Python developers looking to build AI demos & internal apps."},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "My Thoughts on Python in Excel", "Author": "fzumstein", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel Here‚Äôs the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn‚Äôt suitable for Python beginners nor for interactive data analysis"},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you‚Äôre working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "Dask DataFrame is Fast Now!", "Author": "phofl93", "Content": "My colleagues and I have been working on making Dask fast. It‚Äôs been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload). I wrote a blog post on what we did: https://docs.coiled.io/blog/dask-dataframe-is-fast.html Really, this came down not to doing one thing really well, but doing lots of small things ‚Äúpretty good‚Äù. Some of the most prominent changes include:\nApache Arrow support in pandas"},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "GUI Recommendations", "Author": "Mrkrabsstalker", "Content": "I built a Matlab app for my grandfather's business with my student version. I need to make it accessible on his employees computers. Matlab comiler seems not worth it, so I was wondering if I translated it into a python GUI which one would make it easy to distribute for preferably a low to zero cost."},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "Automate your WordPress new-page creation with Python", "Author": "EngineeringFit5761", "Content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin). It's a simple app, but has great expansion potential and it's really easy to use. To start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page. Run the program, add sections, choose your desired structure, and select the right widgets for your content. Once you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you‚Äôre working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "Granian 1.4 is out", "Author": "gi0baro", "Content": "Granian ‚Äì the Rust HTTP server for Python applications ‚Äì 1.4 was released! Blog post: https://polar.sh/emmett-framework/posts/granian-1-4 Release details: https://github.com/emmett-framework/granian/releases/tag/v1.4.0 Repo: https://github.com/emmett-framework/granian"},
{"Title": "musicnotes: Python module for playing musical instruments!", "Author": "must1088", "Content": "https://github.com/must108/musicnotes\nWhat My Project Does\nmusicnotes is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers."},
{"Title": "Tuples Are Underrated! List vs Tuple üêç", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ‚ò∫Ô∏è https://youtu.be/-sO4FG6W4ho"},
{"Title": "Kwargs appreciation thread", "Author": "TheRealFrostMana", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though! I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go. Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean: some_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Author": "XUtYwYzz", "Content": "I saw the words 'visual effects', just give me GIFs Understandable, visit the Effects Showroom first. Then come back if you like what you see. What My Project Does TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features. Use cases:\nInvoke at terminal launch to produce an animation (ex: fetch)."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Suck at Automate the Boring Stuff - Need Assurance", "Author": "COOKIEMONSTER-315", "Content": "I‚Äôve been working hard at learning Python this past year and I‚Äôve been doing ok at it. I‚Äôve used a lot of the commonly recommended books and YouTube channels and like them all except for some reason, I still struggle like crazy with the practice problems in Automate the Boring Stuff. Is this a sign that I still suck a Python, or are the practice problems at the end of the chapters known to be difficult? Looking for a sanity check in my progress basically. Automate The Boring Stuff"},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, ‚Ä¶)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "My little ChatGPT-Multimodal Server Starter", "Author": "TwistedMinda", "Content": "Please check out my Desktoppy Server. What My Project Does It allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's. It uses ollama internally so you can use all the open-source Models but by default it's using:\nLLama3 for text-generation\nLLava for image recognition\nStable Diffusion 2 for image generation"},
{"Title": "Open-source AI shorts generator in python", "Author": "ANil1729", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc. Link to code :- https://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "Preferred method to run python in VS Code", "Author": "SuperMB13", "Content": "Been working on a python tool for VS Code. Curious to get peoples' opinion on how they run python files (not notebooks) within VS Code. Do you typically run files python by:\nTyping the python command into the integrated terminal\nClicking the run button at the top of the file\nPressing F5 for debugging\nPressing Ctrl+F5 for run but not debug"},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tiny Python for x64 Server 2022?", "Author": "amckern", "Content": "I am using a 5-line script on Windows Server (production container is set up with 1GB memory) - is there a tiny Python that I can use that is optimised for small memory machines? I am not familiar with self-compiling the source (I have grown up with Visual Studio) so am after a pre-compiled release. Happy to use anything in the 3.12.x branch."},
{"Title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation", "Author": "pdcz", "Content": "Hi everyone, I'd like to share couple of news regarding my personal project:\nNew documentation written in Ludic showcasing it's capabilities: https://getludic.dev/docs/\nNew section regrading Layouts inspired from the Every Layout Book: https://getludic.dev/catalog/layouts\nCookiecutter template to get quickly started: https://github.com/paveldedik/ludic-template\nI have a lot of plans with this project and I'd appreciate any feedback. About The Project Ludic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components."},
{"Title": "Tuples Are Underrated! List vs Tuple üêç", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ‚ò∫Ô∏è https://youtu.be/-sO4FG6W4ho"},
{"Title": "Choosing between dash and react", "Author": "Berlibur", "Content": "At work I'm getting the question to build a platform that will be used to navigate all kinds of business metrics to different levels of granularity. Ideally there is also insights on their relationships, and advice on actions to take. I have experience with both Dash and React, and my feeling says to go with React (and a python backend). Mostly because I foresee this application to grow over time, and managing big Dash applications (as a dev) can get clunky. However, in my team there's no extra JavaScript (let alone React) knowledge. While there is a solid base for Python. There might be opportunities to source outside the team/company, which I'd have to make a strong case for."},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "Made a Minimalistic Router for Uvicorn", "Author": "achaayb", "Content": "Hey everyone, I've been working on a simple router for Uvicorn called ASGIRouter. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\nWhat My Project Does\nASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn. This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs."},
{"Title": "Python's many command-line utilities", "Author": "treyhunner", "Content": "Python 3.12 comes bundled with 50 command-line tools. For example, python -m webbrowser http://example.com opens a web browser, python -m sqlite3 launches a sqlite prompt, and python -m ast my_file.py shows the abstract syntax tree for a given Python file. I've dug into each of them and categorized them based on their purpose and how useful they are. Python's many command-line tools"},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, ‚Ä¶)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "Gloe: A lightweight lib to create readable and type-safe pipelines", "Author": "justme_sam", "Content": "Have you ever faced a moment when your code is a mess of nested classes and functions, and you have to dig through dozens of levels to understand a simple function? Gloe (pronounced like ‚Äúglow‚Äù) is a library designed to assist you organize your code into a type-safe flow, making it flat and linear. What My Project Does Here‚Äôs what it can do for you:\nWrite type-safe pipelines with pure Python.\nExpress your code as a set of atomic and extensible units of responsibility called transformers."},
{"Title": "Tuples Are Underrated! List vs Tuple üêç", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ‚ò∫Ô∏è https://youtu.be/-sO4FG6W4ho"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Author": "jgloewen", "Content": "The Python Shiny library is a framework for building interactive web applications in Python. Developed by RStudio, the same team behind the Shiny library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills. All that is needed is knowledge of the Shiny user interface Application Programming Interface (API). Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone."},
{"Title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa", "Author": "Jaeger1987", "Content": "What My Project Does Hello everyone! I've just released a new Python package, notion2pandas, which allows you to import a Notion database into a pandas dataframe with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code. Target Audience Whether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding! üîó GitLab repo: https://gitlab.com/Jaeger87/notion2pandas Key Features"},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, ‚Ä¶)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "Book Management Restful-API", "Author": "ThePawners", "Content": "What My Project Does: This project aims to provide a simple and efficient way to manage a collection of books through various API endpoints. This API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn."},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Author": "itssimon86", "Content": "Hey Python community! I‚Äôd like to introduce you to my indie product Apitally, a simple API monitoring & analytics tool for Python projects.\nWhat My Project Does\nApitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down. Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally‚Äôs servers in regular intervals."},
{"Title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies", "Author": "ManyInterests", "Content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are yanked. The important effect this has had is anyone who may have defined their requirements as something like PySimpleGUI<5 or PySimpleGUI==4.x.x for a now-deleted version, your installations will fail with a message like:"},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Author": "aman6944", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found https://github.com/SeleniumHQ/selenium/pull/13173 .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find. I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it ü§û", "Author": "VoyZan", "Content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts: tl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in this Gist.\nProblem\nRequest rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of counter. Multiprocessing is not great at having a single shared variable."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "SH1106 OLED Screen App Framework for Raspberry Pi - Now on PyPI", "Author": "danyourmaster", "Content": "What it does:\nToday, I released the first working version of my SH1106 app framework for Raspberry Pi on PyPI! The SH1106 is an affordable OLED screen, costing under $3, and it's perfect for projects of all sizes. This package enables the creation of apps for it with graphics support, state management, image conversion utilities, and custom fonts. Check it out here: SH1106 Framework on PyPI. Target audience:\nThe package is mainly aimed at hobbyists who want to create small projects using the SH1106 OLED without having to manually write a lot of the graphics code typically needed on top of standard packages. I am also developing a hardware synthesizer keyboard from scratch that utilizes this framework extensively. So far, the framework handles the massive scaling required for this project excellently in terms of both code organization and performance."},
{"Title": "Textchat: TUI Single Server IRC Client", "Author": "rmpython", "Content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/ I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!"},
{"Title": "Tach - enforce module boundaries + deps, now in Rust ü¶Ä", "Author": "the1024", "Content": "https://github.com/gauge-sh/tach Hey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\nRe-wrote the core in Rust, leading to a ~19x speed up on large repos\nRe-worked the interface, and added a TUI to let you interactively declare modules\nWe built Tach to solve the ‚Äúball of mud‚Äù problem that we‚Äôve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!"},
{"Title": "Using python for static typing benefits", "Author": "britishbanana", "Content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced. I'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things."},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "Crowbar - Package Management without Venv", "Author": "coryalanfitz", "Content": "https://github.com/coryfitz/crowbar What it does: I'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don‚Äôt have to think about them. First: pip install crowbar-package-manager Basically you just install and run things with the crowbar command rather than pip: crowbar install package_name And then you also run things with the crowbar command rather than using \"python\" - crowbar then runs the program based on the packages in the local environment rather than having to activate your virtual environment. It's inspired by npm if you've used that with js."},
{"Title": "Virtual Python workshops", "Author": "szabgab", "Content": "I have been been teaching programming at hi-tech companies for 24 years. For many years I taught Perl üê™ - I know, you all love it üòä and then for even more years I taught Python üêç. These days I also teach Rust. Recently I started to offer free online workshops via Zoom for all 3 languages. They include a presentation and then hands-on assignments to practice the things I explained. I hope these workshops will be interesting to some of the r/python members and that it is acceptable to occasionally mention the Python workshops here. (and I hope this time I put the proper flair on it)"},
{"Title": "PyODMongo an ODM for MongoDB", "Author": "maurinhoandre", "Content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\nBuilt on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents."},
{"Title": "New Lands RPG (Play testers welcome)", "Author": "Littlebudddy_321", "Content": "Good \"time of day\" my fellow peeps What my project does: I wanted to share my Python game I've been slowly working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you... Target Audience: I'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax..."},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Author": "jgloewen", "Content": "The Python Shiny library is a framework for building interactive web applications in Python. Developed by RStudio, the same team behind the Shiny library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills. All that is needed is knowledge of the Shiny user interface Application Programming Interface (API). Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone."},
{"Title": "An IDE with the same step by step functionality as in Matlab", "Author": "Cerricola", "Content": "When working with Matlab I love how I can run the code step by step to debug it. Even being able to \"step in\" functions and loops. Then, I was looking to an IDE with a similar functionality for Python. Nowadays I'm using Spyder."},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Author": "0akman", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera. The Python code and documentation on my GitHub: https://github.com/FrunzaDan/Tool-Chip_Contact_Length The video: https://youtu.be/bndai6SlF6E Enjoy!\nWhat My Project Does"},
{"Title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite", "Author": "JaggedParadigm", "Content": "What My Project Does: Moonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\necstatic: price too low so they are extra happy\ncontent: price is what they were expecting,\nsad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period"},
{"Title": "Tutorial on Surprisingly Simple Python Streamlit Dashboards", "Author": "jgloewen", "Content": "Streamlit is becoming an increasingly a popular framework for data visualization prototyping with Python. The Streamlit framework saves time, effort, and reduces the complexity traditionally associated with crafting maps and charts.Particularly if we approach application development with a modular approach. Starting simple, let‚Äôs put together 4 specific examples that leverage Streamlit for interactive data visualization:\nA global choropleth map for a dataset for a specific year."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies", "Author": "ManyInterests", "Content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are yanked. The important effect this has had is anyone who may have defined their requirements as something like PySimpleGUI<5 or PySimpleGUI==4.x.x for a now-deleted version, your installations will fail with a message like:"},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Author": "Character-Maybe-4400", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil. I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a pytest-edit plugin that adds an --edit option to Pytest. There isn't. So I created just that. Enjoy."},
{"Title": "Mesop, open-source Python UI framework used at Google to quickly build delightful web apps", "Author": "wwwillchen", "Content": "What my project does: I‚Äôm excited to share about Mesop - a new, open-source Python UI framework that enables Python developers to quickly build delightful web apps in a scalable way. A small team of us at Google have been developing Mesop as an unofficial 20% project for the past few months. A wide range of research and product teams at Google have been using it to rapidly build internal apps and we‚Äôve gotten a lot of positive feedback internally so now we‚Äôre looking to get feedback from the open-source community. Target audience: Python developers looking to build AI demos & internal apps."},
{"Title": "Self updating spreadsheet with popular questions from Ask Reddit and summarized answers using OpenAI", "Author": "DouweOsinga", "Content": "What My Project Does\nThis is a small Python script that runs inside a Google Sheet by way of the Python add-on. It uses the reddit api to fetch posts from Ask Reddit twice daily. For posts with enough upvotes, it uses the OpenAI API to summarize an answer to the question based on the comments. I then inserts any new questions and their answers into the spreadsheet and uses the Twitter APIto also post the answer to Twitter I mean X. Should be interesting to anybody looking to connect (a subset) of those APIs."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Spotify Lyrics visualizer", "Author": "Mews75", "Content": "What My Project Does Because spotify made their lyrics menu a premium only feature, I thought I'd make my own replacement for it.\nThe app connects to your spotify account, fetches the lyrics from various websites, and then syncs them automatically to what is currently playing. Basically does the exact same as the lyrics menu used to do. Target Audience Anyone who wants to see the lyrics to songs really. Comparison Most other apps that I've found are either browser only, or don't actually sync the lyrics to the song, they just show the entire lyrics at once.\nIn comparison, my app shows the lyrics line by line, synced with the song, and also has (in my opinion lol) a fairly nice looking ui.\nIt's also very easy to use for non programmers too, since you can just download an executable to use the app."},
{"Title": "Why would anyone use pyqt if pyside exists", "Author": "AccordingBeyond2985", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Dask DataFrame is Fast Now!", "Author": "phofl93", "Content": "My colleagues and I have been working on making Dask fast. It‚Äôs been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload). I wrote a blog post on what we did: https://docs.coiled.io/blog/dask-dataframe-is-fast.html Really, this came down not to doing one thing really well, but doing lots of small things ‚Äúpretty good‚Äù. Some of the most prominent changes include:\nApache Arrow support in pandas"},
{"Title": "Tach - enforce module boundaries + deps, now in Rust ü¶Ä", "Author": "the1024", "Content": "https://github.com/gauge-sh/tach Hey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\nRe-wrote the core in Rust, leading to a ~19x speed up on large repos\nRe-worked the interface, and added a TUI to let you interactively declare modules\nWe built Tach to solve the ‚Äúball of mud‚Äù problem that we‚Äôve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!"},
{"Title": "I created an unofficial module for the ShipEngine API", "Author": "Status_Bid_1604", "Content": "What My Project Does Simplifies the interaction with the ShipEngine API with most response and requests built as objects, which in my opinion makes interaction much easier. This is my first released package so all criticism and feedback is very welcome. Target Audience Anyone who deals with the current ShipEngine API using Python. Comparison There is an official ShipEngine API module that is created by the company but I have found it somewhat lack luster with no way to create batches or bulk shipments (and other missing functionality), this is much more suited to accomplishing that task."},
{"Title": "Building an HTTP Server in Python", "Author": "mraza007", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python. Link to blog post"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Automate your WordPress new-page creation with Python", "Author": "EngineeringFit5761", "Content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin). It's a simple app, but has great expansion potential and it's really easy to use. To start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page. Run the program, add sections, choose your desired structure, and select the right widgets for your content. Once you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)"},
{"Title": "New Lands RPG (Play testers welcome)", "Author": "Littlebudddy_321", "Content": "Good \"time of day\" my fellow peeps What my project does: I wanted to share my Python game I've been slowly working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you... Target Audience: I'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax..."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Xenharmlib - An advanced music theory library that supports microtonality", "Author": "realretooth", "Content": "Introducing Xenharmlib (Source code here) What My Project Does (taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music. Target Audience Composers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general."},
{"Title": "1BRC solution using CPython", "Author": "pappuks", "Content": "What My Project Does: I finally got some time to attempt the 1 Billion Row Challenge (1BRC) (https://www.morling.dev/blog/one-billion-row-challenge/) where we are supposed to process a file with 1 billion records of temperature values for cities and print a sorted list with min, max and mean temperature per city. I am a sucker for optimization. So when I heard about 1BRC I got intrigued and in the last few days started experimenting with python implementations. I achieved my goal and implemented the fastest implementation running on CPython, without any external libraries. My motivation for CPython was so that I can apply any of the learning's in my day to day work, as I don't see us moving to PyPy any time sooner."},
{"Title": "Granian 1.4 is out", "Author": "gi0baro", "Content": "Granian ‚Äì the Rust HTTP server for Python applications ‚Äì 1.4 was released! Blog post: https://polar.sh/emmett-framework/posts/granian-1-4 Release details: https://github.com/emmett-framework/granian/releases/tag/v1.4.0 Repo: https://github.com/emmett-framework/granian"},
{"Title": "open source CLI tool for finding out how programs work", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow users to find out what frameworks, tools, engines a program / game was made in. Looks through a directory and searches for common folder structures, and file names. You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries. Image Example\nTarget Audience\nAnyone! Developers looking to learn how other programs were made, people who are just interested."},
{"Title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite", "Author": "JaggedParadigm", "Content": "What My Project Does: Moonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\necstatic: price too low so they are extra happy\ncontent: price is what they were expecting,\nsad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Community Insights on PgQueuer", "Author": "GabelSnabel", "Content": "Hey r/Python! A while ago, I introduced you to PgQueuer, a Python library designed for handling job queues using Postgres native functionalities. If you've started using PgQueuer, I‚Äôm keen to initiate a discussion on your experiences with it.\nHow and where have you integrated PgQueuer into your projects?\nAny difficulties or shortcomings you‚Äôve experienced while using PgQueuer?\nThoughts on the library‚Äôs efficiency and features?"},
{"Title": "Mesop, open-source Python UI framework used at Google to quickly build delightful web apps", "Author": "wwwillchen", "Content": "What my project does: I‚Äôm excited to share about Mesop - a new, open-source Python UI framework that enables Python developers to quickly build delightful web apps in a scalable way. A small team of us at Google have been developing Mesop as an unofficial 20% project for the past few months. A wide range of research and product teams at Google have been using it to rapidly build internal apps and we‚Äôve gotten a lot of positive feedback internally so now we‚Äôre looking to get feedback from the open-source community. Target audience: Python developers looking to build AI demos & internal apps."},
{"Title": "AI planner: AI tool for efficient event scheduling in Google Calendar.", "Author": "nginx26", "Content": "Good evening! I have created a new projectfor adding events to google calendar based on the text a user inputs. What My Project Does The project is a tool that uses large language models to understand the user's input and add events to the user's Google Calendar based on the user's input. It uses Ollama for natural language understanding and Google Calendar API for adding events to the user's calendar. How My Project Works Ollama uses Llama 3 with pre-instructions to act as a calendar event planner. The tool uses the model to generate responses to extract the event's details from the user's input inserted in the Web Interface. tool then asks the user to confirm the details extracted from the user's input and adds the event to the user's Google Calendar (example shown )"},
{"Title": "Python CLIs becoming too slow.", "Author": "RevolutionaryPen4661", "Content": "I have written a simple CLI program using (Argparse - Native Python CLI toolkit) that compares the size of the PyPI packages passed to parameters. It takes 4 seconds to print just a help message. On the other hand, clis like `uv` are extremely fast. (Made in Rust). What if we make a CLI toolkit similar to typer (a superset of click), click to improve the performance of our CLIs? This may seem silly to you. (I asked Claude 3 for a sample performance chart, here it is)\nHere's a comparison chart showing the estimated performance and speed improvements you might expect when using a Rust-based CLI toolkit for Python, as opposed to existing Python-based CLI libraries like Typer and Click:"},
{"Title": "My little ChatGPT-Multimodal Server Starter", "Author": "TwistedMinda", "Content": "Please check out my Desktoppy Server. What My Project Does It allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's. It uses ollama internally so you can use all the open-source Models but by default it's using:\nLLama3 for text-generation\nLLava for image recognition\nStable Diffusion 2 for image generation"},
{"Title": "Keep system awake (prevent sleep) using python: wakepy", "Author": "fohrloop", "Content": "Hi all, I had previously a problem that I wanted to run some long running python scripts without being interrupted by the automatic suspend. I did not find a package that would solve the problem, so I decided to create my own. In the design, I have selected non-disruptive methods which do not rely on mouse movement or pressing a button like F15 or alter system settings. Instead, I've chosen methods that use the APIs and executables meant specifically for the purpose. I've just released wakepy 0.9.0 which supports Windows, macOS, Gnome, KDE and freedesktop.org compliant DEs."},
{"Title": "Kivy School - Crowdfunding Update", "Author": "filipemarch", "Content": "We're excited to share that our Kivy School crowdfunding project on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal! We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at kivyschool.com and our course on Udemy. Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!"},
{"Title": "PyPods: A lightweight solution to execute Python dependencies in an isolated fashion.", "Author": "Brilliant_Emphasis63", "Content": "Introducing PyPods What My Project Does A Python library designed to manage monolithic project architectures by isolating dependencies. Traditionally, monolithic architectures cluster all dependencies into one project, creating complexities and potential conflicts. PyPods offers a solution by isolating these dependencies and enabling the main project to communicate with them via remote procedure calls. This approach eliminates the need to install dependencies directly in the main project. Feel free to take a look and I am happy to receive some feedback! Target Audience"},
{"Title": "Dask DataFrame is Fast Now!", "Author": "phofl93", "Content": "My colleagues and I have been working on making Dask fast. It‚Äôs been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload). I wrote a blog post on what we did: https://docs.coiled.io/blog/dask-dataframe-is-fast.html Really, this came down not to doing one thing really well, but doing lots of small things ‚Äúpretty good‚Äù. Some of the most prominent changes include:\nApache Arrow support in pandas"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation", "Author": "pdcz", "Content": "Hi everyone, I'd like to share couple of news regarding my personal project:\nNew documentation written in Ludic showcasing it's capabilities: https://getludic.dev/docs/\nNew section regrading Layouts inspired from the Every Layout Book: https://getludic.dev/catalog/layouts\nCookiecutter template to get quickly started: https://github.com/paveldedik/ludic-template\nI have a lot of plans with this project and I'd appreciate any feedback. About The Project Ludic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components."},
{"Title": "Async Python Clarifications", "Author": "Cool-Focus6556", "Content": "Ok, so just so I have this straight:\nAsyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\nThe threading library creates threads and uses preemptive multitasking to context switch between threads\nAsyncio is more efficient than threading for the reasons above"},
{"Title": "Automate your WordPress new-page creation with Python", "Author": "EngineeringFit5761", "Content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin). It's a simple app, but has great expansion potential and it's really easy to use. To start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page. Run the program, add sections, choose your desired structure, and select the right widgets for your content. Once you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)"},
{"Title": "I made a desktop chat app :)", "Author": "Reasonable-Zone-7909", "Content": "What My Project Does Hi! This is my first time doing a python project more than a few hours in size. I made a chat app which features E2E encryption using a passcode and has a multiclient architecture. All comments are welcome! Target Audience It is just a toy project for my portfolio. Comparison Compared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner. But I think that IRC already has this, so it doesn't differ much XD. Git link: https://github.com/xxzoltanxx/Balvan-Chat"},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Author": "Content_Ad_4153", "Content": "Problem Statement I recently explored SonarQube for static code analysis. While it‚Äôs a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself. Target Audience This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback! Comparison with Similar Tools There was only one similar tool in the Sonar Marketplace, but it‚Äôs no longer maintained. Project Details I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub."},
{"Title": "Python's many command-line utilities", "Author": "treyhunner", "Content": "Python 3.12 comes bundled with 50 command-line tools. For example, python -m webbrowser http://example.com opens a web browser, python -m sqlite3 launches a sqlite prompt, and python -m ast my_file.py shows the abstract syntax tree for a given Python file. I've dug into each of them and categorized them based on their purpose and how useful they are. Python's many command-line tools"},
{"Title": "The Problems with Celery", "Author": "hatchet-dev", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: https://docs.hatchet.run/blog/problems-with-celery Our issues with the Celery project were part of the reason why we started Hatchet. Would love to hear comments or feedback!"},
{"Title": "Granian 1.4 is out", "Author": "gi0baro", "Content": "Granian ‚Äì the Rust HTTP server for Python applications ‚Äì 1.4 was released! Blog post: https://polar.sh/emmett-framework/posts/granian-1-4 Release details: https://github.com/emmett-framework/granian/releases/tag/v1.4.0 Repo: https://github.com/emmett-framework/granian"},
{"Title": "Rye-Tui, a Text-based User Interface (TUI) to manage rye projects", "Author": "Zaloog1337", "Content": "Hi everyone, Ive reached a state of my current project, where I want to share it with you, and gather some feedback. This is my first time using rye and I am surprised, how Hassle-Free building a package with it went. Source Code: github\nInstallation\npython -m pip install rye-tui"},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Author": "Eastern_Reporter_834", "Content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa", "Author": "Jaeger1987", "Content": "What My Project Does Hello everyone! I've just released a new Python package, notion2pandas, which allows you to import a Notion database into a pandas dataframe with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code. Target Audience Whether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding! üîó GitLab repo: https://gitlab.com/Jaeger87/notion2pandas Key Features"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Author": "good-guy-coder", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities. What My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI. GitHub Repository: NiimPrintX"},
{"Title": "EFT - A file extension for implementing user created themes", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable Example:\nmy_theme.eft - My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool"},
{"Title": "I built a pipeline sending my wife and I SMSs twice a week with budgeting advice generated by AI", "Author": "MoodAppropriate4108", "Content": "What My Project Does:\nI built a pipeline of Dagger modules to send my wife and I SMSs twice a week with actionable financial advice generated by AI based on data from bank accounts regarding our daily spending. Details: Dagger is an open source programmable CI/CD engine. I built each step in the pipeline as a Dagger method. Dagger spins up ephemeral containers, running everything within its own container. I use GitHub Actions to trigger dagger methods that;"},
{"Title": "Flappy Berd in PyQt", "Author": "GhnQuix", "Content": "Hello there What my project does: I‚Äôm excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! üòÉ As Richard Watterson once said: \"10/10 game, would play again.\" Target Audience This game is for anyone who‚Äôs bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience. Comparison Think of it as a faithful recreation of Flappy Bird with a PyQt twist."},
{"Title": "My little ChatGPT-Multimodal Server Starter", "Author": "TwistedMinda", "Content": "Please check out my Desktoppy Server. What My Project Does It allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's. It uses ollama internally so you can use all the open-source Models but by default it's using:\nLLama3 for text-generation\nLLava for image recognition\nStable Diffusion 2 for image generation"},
{"Title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it ü§û", "Author": "VoyZan", "Content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts: tl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in this Gist.\nProblem\nRequest rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of counter. Multiprocessing is not great at having a single shared variable."},
{"Title": "We built open-source SDK for adding custom code interpreters to AI apps", "Author": "mlejva", "Content": "What My Project Does Hey everyone! I'm the CEO of the company that built an SDK that makes it easy to build custom code interpreters for AI apps. We're a company called E2B [0]. We're building and open-source [1] secure environments for running untrusted AI-generated code and AI agents. We call these environments sandboxes and they are built on top of micro VM called Firecracker [2]. We specifically decided to use Firecrackers instead of containers because of their security and ability to do snapshots. You can think of us as giving small cloud computers to LLMs. We recently created a dedicated SDK for building custom code interpreters in Python or JS/TS. We saw this need after a lot of our users have been adding code execution capabilities to their AI apps with our core SDK [3]. These use cases were often centered around AI data analysis so code interpreter-like behavior made sense"},
{"Title": "zeroize: Securely clear secrets from memory", "Author": "radumarias", "Content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "I have made an open source library for logging errors / messages :)", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file. Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience"},
{"Title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation", "Author": "pdcz", "Content": "Hi everyone, I'd like to share couple of news regarding my personal project:\nNew documentation written in Ludic showcasing it's capabilities: https://getludic.dev/docs/\nNew section regrading Layouts inspired from the Every Layout Book: https://getludic.dev/catalog/layouts\nCookiecutter template to get quickly started: https://github.com/paveldedik/ludic-template\nI have a lot of plans with this project and I'd appreciate any feedback. About The Project Ludic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components."},
{"Title": "Using python for static typing benefits", "Author": "britishbanana", "Content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced. I'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things."},
{"Title": "I made a small Python script that uses NASA'S APOD API to set cool backgrounds on a Windows machine", "Author": "Potato_eating_a_dog", "Content": "https://github.com/william7491681/APOD_Wallpaper_Script\nWhat my project does\nNASA has a ton of accessible API's, one of which being the APOD (Astronomy Picture Of the Day) API. I made a script to get the last 9 pictures of the day and set them as my Windows 10 background, and then used task scheduler to have the script re-run every day at noon and whenever the computer boots up. It's fairly hard coded for my setup (specific file paths, 1920x1080 monitor, etc), but it shouldn't be too hard to change if one wanted to."},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Author": "radumarias", "Content": "https://github.com/radumarias/rencrypt-python\nWhat My Project Does: A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\nTarget Audience This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet."},
{"Title": "Just released my first Python package: Melodica Notes üé∂", "Author": "bettercallsenna", "Content": "Hey everyone! I‚Äôm excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics. What My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players. Target Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it‚Äôs fully functional, I consider it an evolving tool and welcome contributions to enhance its features."},
{"Title": "Python's many command-line utilities", "Author": "treyhunner", "Content": "Python 3.12 comes bundled with 50 command-line tools. For example, python -m webbrowser http://example.com opens a web browser, python -m sqlite3 launches a sqlite prompt, and python -m ast my_file.py shows the abstract syntax tree for a given Python file. I've dug into each of them and categorized them based on their purpose and how useful they are. Python's many command-line tools"},
{"Title": "PyODMongo an ODM for MongoDB", "Author": "maurinhoandre", "Content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\nBuilt on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents."},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Author": "eonlav", "Content": "What My Project Does Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models. Video running Phi-2 model on a MacBook Air with 8GB RAM, all CPU Target Audience Devs looking to experiment with integrating on-device AI into their software. Comparison\nJARVIS - an all API-based solution using DeepGram, OpenAI and ElevenLabs\nLocal Talking LLM - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word."},
{"Title": "JSX Syntax inside Python files. (Packed)", "Author": "RevolutionaryPen4661", "Content": "There was a JSX-style syntax preprocessor for Python called \"Packed,\" which allowed us to write JSX inside Python (*.pyx and *.py) files. It's unclear why they chose *.pyx for the file extension, as it conflicts with the naming of Cythonic file extensions (I have checked their issues). This project might have thrived with sufficient contributions and could have changed the way apps are built. However, the project is now archived on GitHub. The last commit was 5 years ago (LICENSE), and the last development commit was 9 years ago. This repository needs someone to revive it, but I don't have enough experience to take on that task. Even though I don't have enough information, we should start with Rust + Python to build a compiler (aka. template replacer) (this doesn't compile Python but replaces all JSX with a dictionary) and cleaner syntax. Integration with Django (Packed has an example too), Flask, FastAPI, Robyn etc."},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Author": "jcoelho93", "Content": "What my project does: It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc. Target Audience Developers mostly, I guess Comparison I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line. Code: Here's the GitHub repo https://github.com/jcoelho93/steer"},
{"Title": "Tutorial on Surprisingly Simple Python Streamlit Dashboards", "Author": "jgloewen", "Content": "Streamlit is becoming an increasingly a popular framework for data visualization prototyping with Python. The Streamlit framework saves time, effort, and reduces the complexity traditionally associated with crafting maps and charts.Particularly if we approach application development with a modular approach. Starting simple, let‚Äôs put together 4 specific examples that leverage Streamlit for interactive data visualization:\nA global choropleth map for a dataset for a specific year."},
{"Title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa", "Author": "Jaeger1987", "Content": "What My Project Does Hello everyone! I've just released a new Python package, notion2pandas, which allows you to import a Notion database into a pandas dataframe with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code. Target Audience Whether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding! üîó GitLab repo: https://gitlab.com/Jaeger87/notion2pandas Key Features"},
{"Title": "Calculator without eval()", "Author": "Zorgon-589", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python. TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions. COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators! See the below link for github: https://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It‚Äôs a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Author": "jgloewen", "Content": "The Python Shiny library is a framework for building interactive web applications in Python. Developed by RStudio, the same team behind the Shiny library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills. All that is needed is knowledge of the Shiny user interface Application Programming Interface (API). Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone."},
{"Title": "Async Python adoption?", "Author": "mcharytoniuk", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python? I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "Self updating spreadsheet with popular questions from Ask Reddit and summarized answers using OpenAI", "Author": "DouweOsinga", "Content": "What My Project Does\nThis is a small Python script that runs inside a Google Sheet by way of the Python add-on. It uses the reddit api to fetch posts from Ask Reddit twice daily. For posts with enough upvotes, it uses the OpenAI API to summarize an answer to the question based on the comments. I then inserts any new questions and their answers into the spreadsheet and uses the Twitter APIto also post the answer to Twitter I mean X. Should be interesting to anybody looking to connect (a subset) of those APIs."},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try."},
{"Title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies", "Author": "ManyInterests", "Content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are yanked. The important effect this has had is anyone who may have defined their requirements as something like PySimpleGUI<5 or PySimpleGUI==4.x.x for a now-deleted version, your installations will fail with a message like:"},
{"Title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it ü§û", "Author": "VoyZan", "Content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts: tl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in this Gist.\nProblem\nRequest rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of counter. Multiprocessing is not great at having a single shared variable."},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can‚Äôt build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Author": "neozhaoliang", "Content": "What My Project Does An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs. Target Audience RAG applications developers. Comparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Using python for static typing benefits", "Author": "britishbanana", "Content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced. I'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things."},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Circler imports in Observer design pattern in Python", "Author": "ALior1", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve. At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error. I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this."},
{"Title": "PyODMongo an ODM for MongoDB", "Author": "maurinhoandre", "Content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\nBuilt on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents."},
{"Title": "Tach - enforce module boundaries + deps, now in Rust ü¶Ä", "Author": "the1024", "Content": "https://github.com/gauge-sh/tach Hey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\nRe-wrote the core in Rust, leading to a ~19x speed up on large repos\nRe-worked the interface, and added a TUI to let you interactively declare modules\nWe built Tach to solve the ‚Äúball of mud‚Äù problem that we‚Äôve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!"},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "1BRC solution using CPython", "Author": "pappuks", "Content": "What My Project Does: I finally got some time to attempt the 1 Billion Row Challenge (1BRC) (https://www.morling.dev/blog/one-billion-row-challenge/) where we are supposed to process a file with 1 billion records of temperature values for cities and print a sorted list with min, max and mean temperature per city. I am a sucker for optimization. So when I heard about 1BRC I got intrigued and in the last few days started experimenting with python implementations. I achieved my goal and implemented the fastest implementation running on CPython, without any external libraries. My motivation for CPython was so that I can apply any of the learning's in my day to day work, as I don't see us moving to PyPy any time sooner."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tutorial on Surprisingly Simple Python Streamlit Dashboards", "Author": "jgloewen", "Content": "Streamlit is becoming an increasingly a popular framework for data visualization prototyping with Python. The Streamlit framework saves time, effort, and reduces the complexity traditionally associated with crafting maps and charts.Particularly if we approach application development with a modular approach. Starting simple, let‚Äôs put together 4 specific examples that leverage Streamlit for interactive data visualization:\nA global choropleth map for a dataset for a specific year."},
{"Title": "New Lands RPG (Play testers welcome)", "Author": "Littlebudddy_321", "Content": "Good \"time of day\" my fellow peeps What my project does: I wanted to share my Python game I've been slowly working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you... Target Audience: I'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax..."},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone üëã The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "Community Insights on PgQueuer", "Author": "GabelSnabel", "Content": "Hey r/Python! A while ago, I introduced you to PgQueuer, a Python library designed for handling job queues using Postgres native functionalities. If you've started using PgQueuer, I‚Äôm keen to initiate a discussion on your experiences with it.\nHow and where have you integrated PgQueuer into your projects?\nAny difficulties or shortcomings you‚Äôve experienced while using PgQueuer?\nThoughts on the library‚Äôs efficiency and features?"},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python) * **What My Project Does** A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try. * **Target Audience** This is just a toy project as a learning experience"},
{"Title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite", "Author": "JaggedParadigm", "Content": "What My Project Does: Moonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\necstatic: price too low so they are extra happy\ncontent: price is what they were expecting,\nsad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period"},
{"Title": "Self updating spreadsheet with popular questions from Ask Reddit and summarized answers using OpenAI", "Author": "DouweOsinga", "Content": "What My Project Does\nThis is a small Python script that runs inside a Google Sheet by way of the Python add-on. It uses the reddit api to fetch posts from Ask Reddit twice daily. For posts with enough upvotes, it uses the OpenAI API to summarize an answer to the question based on the comments. I then inserts any new questions and their answers into the spreadsheet and uses the Twitter APIto also post the answer to Twitter I mean X. Should be interesting to anybody looking to connect (a subset) of those APIs."},
{"Title": "Keep system awake (prevent sleep) using python: wakepy", "Author": "fohrloop", "Content": "Hi all, I had previously a problem that I wanted to run some long running python scripts without being interrupted by the automatic suspend. I did not find a package that would solve the problem, so I decided to create my own. In the design, I have selected non-disruptive methods which do not rely on mouse movement or pressing a button like F15 or alter system settings. Instead, I've chosen methods that use the APIs and executables meant specifically for the purpose. I've just released wakepy 0.9.0 which supports Windows, macOS, Gnome, KDE and freedesktop.org compliant DEs."},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "AndroidWorld ‚Äî Build and test AI agents on Android", "Author": "crawles89", "Content": "What it does: It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging. It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them. Target Audience: Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you‚Äôd like and test out the default agent, M3A, on it. Just give it a task like ‚ÄúShow my most recent purchases on Amazon.‚Äù You can also build your own agent."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Mesop, open-source Python UI framework used at Google to quickly build delightful web apps", "Author": "wwwillchen", "Content": "What my project does: I‚Äôm excited to share about Mesop - a new, open-source Python UI framework that enables Python developers to quickly build delightful web apps in a scalable way. A small team of us at Google have been developing Mesop as an unofficial 20% project for the past few months. A wide range of research and product teams at Google have been using it to rapidly build internal apps and we‚Äôve gotten a lot of positive feedback internally so now we‚Äôre looking to get feedback from the open-source community. Target audience: Python developers looking to build AI demos & internal apps."},
{"Title": "Rio: WebApps in pure Python ‚Äì Thanks and Feedback wanted!", "Author": "Sn3llius", "Content": "Hey everyone, I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for! As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned! We are looking forward to your feedback, so let us hear from you! :) GitHub"},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Dask DataFrame is Fast Now!", "Author": "phofl93", "Content": "My colleagues and I have been working on making Dask fast. It‚Äôs been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload). I wrote a blog post on what we did: https://docs.coiled.io/blog/dask-dataframe-is-fast.html Really, this came down not to doing one thing really well, but doing lots of small things ‚Äúpretty good‚Äù. Some of the most prominent changes include:\nApache Arrow support in pandas"},
{"Title": "2024 StackOverflow Survey", "Author": "monorepo", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish. Link to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "1BRC solution using CPython", "Author": "pappuks", "Content": "What My Project Does: I finally got some time to attempt the 1 Billion Row Challenge (1BRC) (https://www.morling.dev/blog/one-billion-row-challenge/) where we are supposed to process a file with 1 billion records of temperature values for cities and print a sorted list with min, max and mean temperature per city. I am a sucker for optimization. So when I heard about 1BRC I got intrigued and in the last few days started experimenting with python implementations. I achieved my goal and implemented the fastest implementation running on CPython, without any external libraries. My motivation for CPython was so that I can apply any of the learning's in my day to day work, as I don't see us moving to PyPy any time sooner."},
{"Title": "cachebox: The fastest caching library written in Rust", "Author": "SpareRevolution1487", "Content": "What my library does You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs. One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary. Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code."},
{"Title": "Automate your WordPress new-page creation with Python", "Author": "EngineeringFit5761", "Content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin). It's a simple app, but has great expansion potential and it's really easy to use. To start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page. Run the program, add sections, choose your desired structure, and select the right widgets for your content. Once you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)"},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and clich√©, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Community Insights on PgQueuer", "Author": "GabelSnabel", "Content": "Hey r/Python! A while ago, I introduced you to PgQueuer, a Python library designed for handling job queues using Postgres native functionalities. If you've started using PgQueuer, I‚Äôm keen to initiate a discussion on your experiences with it.\nHow and where have you integrated PgQueuer into your projects?\nAny difficulties or shortcomings you‚Äôve experienced while using PgQueuer?\nThoughts on the library‚Äôs efficiency and features?"},
{"Title": "Granian 1.4 is out", "Author": "gi0baro", "Content": "Granian ‚Äì the Rust HTTP server for Python applications ‚Äì 1.4 was released! Blog post: https://polar.sh/emmett-framework/posts/granian-1-4 Release details: https://github.com/emmett-framework/granian/releases/tag/v1.4.0 Repo: https://github.com/emmett-framework/granian"},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "Keep system awake (prevent sleep) using python: wakepy", "Author": "fohrloop", "Content": "Hi all, I had previously a problem that I wanted to run some long running python scripts without being interrupted by the automatic suspend. I did not find a package that would solve the problem, so I decided to create my own. In the design, I have selected non-disruptive methods which do not rely on mouse movement or pressing a button like F15 or alter system settings. Instead, I've chosen methods that use the APIs and executables meant specifically for the purpose. I've just released wakepy 0.9.0 which supports Windows, macOS, Gnome, KDE and freedesktop.org compliant DEs."},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Author": "PyDataAmsterdam", "Content": "Hey all, we will close the Call for Proposals portal this Sunday, June 2, for our PyData Amsterdam 2024 Conference which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > https://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "My little ChatGPT-Multimodal Server Starter", "Author": "TwistedMinda", "Content": "Please check out my Desktoppy Server. What My Project Does It allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's. It uses ollama internally so you can use all the open-source Models but by default it's using:\nLLama3 for text-generation\nLLava for image recognition\nStable Diffusion 2 for image generation"},
{"Title": "musicnotes: Python module for playing musical instruments!", "Author": "must1088", "Content": "https://github.com/must108/musicnotes\nWhat My Project Does\nmusicnotes is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers."},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboardüóíÔ∏è. I created a script to automate Bing searches for reward generation\nüëç Excellent command line experience.\nüôÇ User friendly."},
{"Title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation", "Author": "pdcz", "Content": "Hi everyone, I'd like to share couple of news regarding my personal project:\nNew documentation written in Ludic showcasing it's capabilities: https://getludic.dev/docs/\nNew section regrading Layouts inspired from the Every Layout Book: https://getludic.dev/catalog/layouts\nCookiecutter template to get quickly started: https://github.com/paveldedik/ludic-template\nI have a lot of plans with this project and I'd appreciate any feedback. About The Project Ludic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components."},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Author": "XUtYwYzz", "Content": "I saw the words 'visual effects', just give me GIFs Understandable, visit the Effects Showroom first. Then come back if you like what you see. What My Project Does TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features. Use cases:\nInvoke at terminal launch to produce an animation (ex: fetch)."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "Python's many command-line utilities", "Author": "treyhunner", "Content": "Python 3.12 comes bundled with 50 command-line tools. For example, python -m webbrowser http://example.com opens a web browser, python -m sqlite3 launches a sqlite prompt, and python -m ast my_file.py shows the abstract syntax tree for a given Python file. I've dug into each of them and categorized them based on their purpose and how useful they are. Python's many command-line tools"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa", "Author": "Jaeger1987", "Content": "What My Project Does Hello everyone! I've just released a new Python package, notion2pandas, which allows you to import a Notion database into a pandas dataframe with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code. Target Audience Whether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding! üîó GitLab repo: https://gitlab.com/Jaeger87/notion2pandas Key Features"},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you‚Äôre working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it ü§û", "Author": "VoyZan", "Content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts: tl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in this Gist.\nProblem\nRequest rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of counter. Multiprocessing is not great at having a single shared variable."},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "Using python for static typing benefits", "Author": "britishbanana", "Content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced. I'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "PyODMongo an ODM for MongoDB", "Author": "maurinhoandre", "Content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\nBuilt on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tutorial on Surprisingly Simple Python Streamlit Dashboards", "Author": "jgloewen", "Content": "Streamlit is becoming an increasingly a popular framework for data visualization prototyping with Python. The Streamlit framework saves time, effort, and reduces the complexity traditionally associated with crafting maps and charts.Particularly if we approach application development with a modular approach. Starting simple, let‚Äôs put together 4 specific examples that leverage Streamlit for interactive data visualization:\nA global choropleth map for a dataset for a specific year."},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "Self updating spreadsheet with popular questions from Ask Reddit and summarized answers using OpenAI", "Author": "DouweOsinga", "Content": "What My Project Does\nThis is a small Python script that runs inside a Google Sheet by way of the Python add-on. It uses the reddit api to fetch posts from Ask Reddit twice daily. For posts with enough upvotes, it uses the OpenAI API to summarize an answer to the question based on the comments. I then inserts any new questions and their answers into the spreadsheet and uses the Twitter APIto also post the answer to Twitter I mean X. Should be interesting to anybody looking to connect (a subset) of those APIs."},
{"Title": "Tuples Are Underrated! List vs Tuple üêç", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ‚ò∫Ô∏è https://youtu.be/-sO4FG6W4ho"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, ‚Ä¶)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "Preferred method to run python in VS Code", "Author": "SuperMB13", "Content": "Been working on a python tool for VS Code. Curious to get peoples' opinion on how they run python files (not notebooks) within VS Code. Do you typically run files python by:\nTyping the python command into the integrated terminal\nClicking the run button at the top of the file\nPressing F5 for debugging\nPressing Ctrl+F5 for run but not debug"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "Choosing between dash and react", "Author": "Berlibur", "Content": "At work I'm getting the question to build a platform that will be used to navigate all kinds of business metrics to different levels of granularity. Ideally there is also insights on their relationships, and advice on actions to take. I have experience with both Dash and React, and my feeling says to go with React (and a python backend). Mostly because I foresee this application to grow over time, and managing big Dash applications (as a dev) can get clunky. However, in my team there's no extra JavaScript (let alone React) knowledge. While there is a solid base for Python. There might be opportunities to source outside the team/company, which I'd have to make a strong case for."},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Author": "jgloewen", "Content": "The Python Shiny library is a framework for building interactive web applications in Python. Developed by RStudio, the same team behind the Shiny library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills. All that is needed is knowledge of the Shiny user interface Application Programming Interface (API). Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone."},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "1BRC solution using CPython", "Author": "pappuks", "Content": "What My Project Does: I finally got some time to attempt the 1 Billion Row Challenge (1BRC) (https://www.morling.dev/blog/one-billion-row-challenge/) where we are supposed to process a file with 1 billion records of temperature values for cities and print a sorted list with min, max and mean temperature per city. I am a sucker for optimization. So when I heard about 1BRC I got intrigued and in the last few days started experimenting with python implementations. I achieved my goal and implemented the fastest implementation running on CPython, without any external libraries. My motivation for CPython was so that I can apply any of the learning's in my day to day work, as I don't see us moving to PyPy any time sooner."},
{"Title": "Gloe: A lightweight lib to create readable and type-safe pipelines", "Author": "justme_sam", "Content": "Have you ever faced a moment when your code is a mess of nested classes and functions, and you have to dig through dozens of levels to understand a simple function? Gloe (pronounced like ‚Äúglow‚Äù) is a library designed to assist you organize your code into a type-safe flow, making it flat and linear. What My Project Does Here‚Äôs what it can do for you:\nWrite type-safe pipelines with pure Python.\nExpress your code as a set of atomic and extensible units of responsibility called transformers."},
{"Title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies", "Author": "ManyInterests", "Content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are yanked. The important effect this has had is anyone who may have defined their requirements as something like PySimpleGUI<5 or PySimpleGUI==4.x.x for a now-deleted version, your installations will fail with a message like:"},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "Community Insights on PgQueuer", "Author": "GabelSnabel", "Content": "Hey r/Python! A while ago, I introduced you to PgQueuer, a Python library designed for handling job queues using Postgres native functionalities. If you've started using PgQueuer, I‚Äôm keen to initiate a discussion on your experiences with it.\nHow and where have you integrated PgQueuer into your projects?\nAny difficulties or shortcomings you‚Äôve experienced while using PgQueuer?\nThoughts on the library‚Äôs efficiency and features?"},
{"Title": "Book Management Restful-API", "Author": "ThePawners", "Content": "What My Project Does: This project aims to provide a simple and efficient way to manage a collection of books through various API endpoints. This API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Keep system awake (prevent sleep) using python: wakepy", "Author": "fohrloop", "Content": "Hi all, I had previously a problem that I wanted to run some long running python scripts without being interrupted by the automatic suspend. I did not find a package that would solve the problem, so I decided to create my own. In the design, I have selected non-disruptive methods which do not rely on mouse movement or pressing a button like F15 or alter system settings. Instead, I've chosen methods that use the APIs and executables meant specifically for the purpose. I've just released wakepy 0.9.0 which supports Windows, macOS, Gnome, KDE and freedesktop.org compliant DEs."},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Author": "jgloewen", "Content": "The Python Shiny library is a framework for building interactive web applications in Python. Developed by RStudio, the same team behind the Shiny library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills. All that is needed is knowledge of the Shiny user interface Application Programming Interface (API). Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tach - enforce module boundaries + deps, now in Rust ü¶Ä", "Author": "the1024", "Content": "https://github.com/gauge-sh/tach Hey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\nRe-wrote the core in Rust, leading to a ~19x speed up on large repos\nRe-worked the interface, and added a TUI to let you interactively declare modules\nWe built Tach to solve the ‚Äúball of mud‚Äù problem that we‚Äôve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies", "Author": "ManyInterests", "Content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are yanked. The important effect this has had is anyone who may have defined their requirements as something like PySimpleGUI<5 or PySimpleGUI==4.x.x for a now-deleted version, your installations will fail with a message like:"},
{"Title": "SH1106 OLED Screen App Framework for Raspberry Pi - Now on PyPI", "Author": "danyourmaster", "Content": "What it does:\nToday, I released the first working version of my SH1106 app framework for Raspberry Pi on PyPI! The SH1106 is an affordable OLED screen, costing under $3, and it's perfect for projects of all sizes. This package enables the creation of apps for it with graphics support, state management, image conversion utilities, and custom fonts. Check it out here: SH1106 Framework on PyPI. Target audience:\nThe package is mainly aimed at hobbyists who want to create small projects using the SH1106 OLED without having to manually write a lot of the graphics code typically needed on top of standard packages. I am also developing a hardware synthesizer keyboard from scratch that utilizes this framework extensively. So far, the framework handles the massive scaling required for this project excellently in terms of both code organization and performance."},
{"Title": "New Lands RPG (Play testers welcome)", "Author": "Littlebudddy_321", "Content": "Good \"time of day\" my fellow peeps What my project does: I wanted to share my Python game I've been slowly working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you... Target Audience: I'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax..."},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Author": "Content_Ad_4153", "Content": "Problem Statement I recently explored SonarQube for static code analysis. While it‚Äôs a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself. Target Audience This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback! Comparison with Similar Tools There was only one similar tool in the Sonar Marketplace, but it‚Äôs no longer maintained. Project Details I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Crowbar - Package Management without Venv", "Author": "coryalanfitz", "Content": "https://github.com/coryfitz/crowbar What it does: I'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don‚Äôt have to think about them. First: pip install crowbar-package-manager Basically you just install and run things with the crowbar command rather than pip: crowbar install package_name And then you also run things with the crowbar command rather than using \"python\" - crowbar then runs the program based on the packages in the local environment rather than having to activate your virtual environment. It's inspired by npm if you've used that with js."},
{"Title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite", "Author": "JaggedParadigm", "Content": "What My Project Does: Moonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\necstatic: price too low so they are extra happy\ncontent: price is what they were expecting,\nsad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period"},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Author": "Eastern_Reporter_834", "Content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!"},
{"Title": "Tach - enforce module boundaries + deps, now in Rust ü¶Ä", "Author": "the1024", "Content": "https://github.com/gauge-sh/tach Hey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\nRe-wrote the core in Rust, leading to a ~19x speed up on large repos\nRe-worked the interface, and added a TUI to let you interactively declare modules\nWe built Tach to solve the ‚Äúball of mud‚Äù problem that we‚Äôve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!"},
{"Title": "An IDE with the same step by step functionality as in Matlab", "Author": "Cerricola", "Content": "When working with Matlab I love how I can run the code step by step to debug it. Even being able to \"step in\" functions and loops. Then, I was looking to an IDE with a similar functionality for Python. Nowadays I'm using Spyder."},
{"Title": "Mesop, open-source Python UI framework used at Google to quickly build delightful web apps", "Author": "wwwillchen", "Content": "What my project does: I‚Äôm excited to share about Mesop - a new, open-source Python UI framework that enables Python developers to quickly build delightful web apps in a scalable way. A small team of us at Google have been developing Mesop as an unofficial 20% project for the past few months. A wide range of research and product teams at Google have been using it to rapidly build internal apps and we‚Äôve gotten a lot of positive feedback internally so now we‚Äôre looking to get feedback from the open-source community. Target audience: Python developers looking to build AI demos & internal apps."},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Author": "good-guy-coder", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities. What My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI. GitHub Repository: NiimPrintX"},
{"Title": "New Lands RPG (Play testers welcome)", "Author": "Littlebudddy_321", "Content": "Good \"time of day\" my fellow peeps What my project does: I wanted to share my Python game I've been slowly working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you... Target Audience: I'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax..."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Dask DataFrame is Fast Now!", "Author": "phofl93", "Content": "My colleagues and I have been working on making Dask fast. It‚Äôs been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload). I wrote a blog post on what we did: https://docs.coiled.io/blog/dask-dataframe-is-fast.html Really, this came down not to doing one thing really well, but doing lots of small things ‚Äúpretty good‚Äù. Some of the most prominent changes include:\nApache Arrow support in pandas"},
{"Title": "zeroize: Securely clear secrets from memory", "Author": "radumarias", "Content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite", "Author": "JaggedParadigm", "Content": "What My Project Does: Moonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\necstatic: price too low so they are extra happy\ncontent: price is what they were expecting,\nsad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period"},
{"Title": "Automate your WordPress new-page creation with Python", "Author": "EngineeringFit5761", "Content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin). It's a simple app, but has great expansion potential and it's really easy to use. To start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page. Run the program, add sections, choose your desired structure, and select the right widgets for your content. Once you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)"},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Author": "Content_Ad_4153", "Content": "Problem Statement I recently explored SonarQube for static code analysis. While it‚Äôs a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself. Target Audience This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback! Comparison with Similar Tools There was only one similar tool in the Sonar Marketplace, but it‚Äôs no longer maintained. Project Details I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub."},
{"Title": "Spotify Lyrics visualizer", "Author": "Mews75", "Content": "What My Project Does Because spotify made their lyrics menu a premium only feature, I thought I'd make my own replacement for it.\nThe app connects to your spotify account, fetches the lyrics from various websites, and then syncs them automatically to what is currently playing. Basically does the exact same as the lyrics menu used to do. Target Audience Anyone who wants to see the lyrics to songs really. Comparison Most other apps that I've found are either browser only, or don't actually sync the lyrics to the song, they just show the entire lyrics at once.\nIn comparison, my app shows the lyrics line by line, synced with the song, and also has (in my opinion lol) a fairly nice looking ui.\nIt's also very easy to use for non programmers too, since you can just download an executable to use the app."},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Author": "radumarias", "Content": "https://github.com/radumarias/rencrypt-python\nWhat My Project Does: A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\nTarget Audience This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet."},
{"Title": "Mesop, open-source Python UI framework used at Google to quickly build delightful web apps", "Author": "wwwillchen", "Content": "What my project does: I‚Äôm excited to share about Mesop - a new, open-source Python UI framework that enables Python developers to quickly build delightful web apps in a scalable way. A small team of us at Google have been developing Mesop as an unofficial 20% project for the past few months. A wide range of research and product teams at Google have been using it to rapidly build internal apps and we‚Äôve gotten a lot of positive feedback internally so now we‚Äôre looking to get feedback from the open-source community. Target audience: Python developers looking to build AI demos & internal apps."},
{"Title": "Granian 1.4 is out", "Author": "gi0baro", "Content": "Granian ‚Äì the Rust HTTP server for Python applications ‚Äì 1.4 was released! Blog post: https://polar.sh/emmett-framework/posts/granian-1-4 Release details: https://github.com/emmett-framework/granian/releases/tag/v1.4.0 Repo: https://github.com/emmett-framework/granian"},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Author": "Eastern_Reporter_834", "Content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!"},
{"Title": "I created an unofficial module for the ShipEngine API", "Author": "Status_Bid_1604", "Content": "What My Project Does Simplifies the interaction with the ShipEngine API with most response and requests built as objects, which in my opinion makes interaction much easier. This is my first released package so all criticism and feedback is very welcome. Target Audience Anyone who deals with the current ShipEngine API using Python. Comparison There is an official ShipEngine API module that is created by the company but I have found it somewhat lack luster with no way to create batches or bulk shipments (and other missing functionality), this is much more suited to accomplishing that task."},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Author": "eonlav", "Content": "What My Project Does Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models. Video running Phi-2 model on a MacBook Air with 8GB RAM, all CPU Target Audience Devs looking to experiment with integrating on-device AI into their software. Comparison\nJARVIS - an all API-based solution using DeepGram, OpenAI and ElevenLabs\nLocal Talking LLM - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word."},
{"Title": "Dask DataFrame is Fast Now!", "Author": "phofl93", "Content": "My colleagues and I have been working on making Dask fast. It‚Äôs been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload). I wrote a blog post on what we did: https://docs.coiled.io/blog/dask-dataframe-is-fast.html Really, this came down not to doing one thing really well, but doing lots of small things ‚Äúpretty good‚Äù. Some of the most prominent changes include:\nApache Arrow support in pandas"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Author": "good-guy-coder", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities. What My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI. GitHub Repository: NiimPrintX"},
{"Title": "Xenharmlib - An advanced music theory library that supports microtonality", "Author": "realretooth", "Content": "Introducing Xenharmlib (Source code here) What My Project Does (taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music. Target Audience Composers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general."},
{"Title": "Calculator without eval()", "Author": "Zorgon-589", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python. TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions. COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators! See the below link for github: https://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "Automate your WordPress new-page creation with Python", "Author": "EngineeringFit5761", "Content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin). It's a simple app, but has great expansion potential and it's really easy to use. To start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page. Run the program, add sections, choose your desired structure, and select the right widgets for your content. Once you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)"},
{"Title": "My little ChatGPT-Multimodal Server Starter", "Author": "TwistedMinda", "Content": "Please check out my Desktoppy Server. What My Project Does It allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's. It uses ollama internally so you can use all the open-source Models but by default it's using:\nLLama3 for text-generation\nLLava for image recognition\nStable Diffusion 2 for image generation"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "zeroize: Securely clear secrets from memory", "Author": "radumarias", "Content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try."},
{"Title": "Granian 1.4 is out", "Author": "gi0baro", "Content": "Granian ‚Äì the Rust HTTP server for Python applications ‚Äì 1.4 was released! Blog post: https://polar.sh/emmett-framework/posts/granian-1-4 Release details: https://github.com/emmett-framework/granian/releases/tag/v1.4.0 Repo: https://github.com/emmett-framework/granian"},
{"Title": "AI planner: AI tool for efficient event scheduling in Google Calendar.", "Author": "nginx26", "Content": "Good evening! I have created a new projectfor adding events to google calendar based on the text a user inputs. What My Project Does The project is a tool that uses large language models to understand the user's input and add events to the user's Google Calendar based on the user's input. It uses Ollama for natural language understanding and Google Calendar API for adding events to the user's calendar. How My Project Works Ollama uses Llama 3 with pre-instructions to act as a calendar event planner. The tool uses the model to generate responses to extract the event's details from the user's input inserted in the Web Interface. tool then asks the user to confirm the details extracted from the user's input and adds the event to the user's Google Calendar (example shown )"},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Author": "radumarias", "Content": "https://github.com/radumarias/rencrypt-python\nWhat My Project Does: A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\nTarget Audience This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet."},
{"Title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation", "Author": "pdcz", "Content": "Hi everyone, I'd like to share couple of news regarding my personal project:\nNew documentation written in Ludic showcasing it's capabilities: https://getludic.dev/docs/\nNew section regrading Layouts inspired from the Every Layout Book: https://getludic.dev/catalog/layouts\nCookiecutter template to get quickly started: https://github.com/paveldedik/ludic-template\nI have a lot of plans with this project and I'd appreciate any feedback. About The Project Ludic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Author": "neozhaoliang", "Content": "What My Project Does An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs. Target Audience RAG applications developers. Comparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies."},
{"Title": "PyPods: A lightweight solution to execute Python dependencies in an isolated fashion.", "Author": "Brilliant_Emphasis63", "Content": "Introducing PyPods What My Project Does A Python library designed to manage monolithic project architectures by isolating dependencies. Traditionally, monolithic architectures cluster all dependencies into one project, creating complexities and potential conflicts. PyPods offers a solution by isolating these dependencies and enabling the main project to communicate with them via remote procedure calls. This approach eliminates the need to install dependencies directly in the main project. Feel free to take a look and I am happy to receive some feedback! Target Audience"},
{"Title": "Python's many command-line utilities", "Author": "treyhunner", "Content": "Python 3.12 comes bundled with 50 command-line tools. For example, python -m webbrowser http://example.com opens a web browser, python -m sqlite3 launches a sqlite prompt, and python -m ast my_file.py shows the abstract syntax tree for a given Python file. I've dug into each of them and categorized them based on their purpose and how useful they are. Python's many command-line tools"},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Author": "eonlav", "Content": "What My Project Does Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models. Video running Phi-2 model on a MacBook Air with 8GB RAM, all CPU Target Audience Devs looking to experiment with integrating on-device AI into their software. Comparison\nJARVIS - an all API-based solution using DeepGram, OpenAI and ElevenLabs\nLocal Talking LLM - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word."},
{"Title": "Circler imports in Observer design pattern in Python", "Author": "ALior1", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve. At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error. I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this."},
{"Title": "My little ChatGPT-Multimodal Server Starter", "Author": "TwistedMinda", "Content": "Please check out my Desktoppy Server. What My Project Does It allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's. It uses ollama internally so you can use all the open-source Models but by default it's using:\nLLama3 for text-generation\nLLava for image recognition\nStable Diffusion 2 for image generation"},
{"Title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa", "Author": "Jaeger1987", "Content": "What My Project Does Hello everyone! I've just released a new Python package, notion2pandas, which allows you to import a Notion database into a pandas dataframe with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code. Target Audience Whether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding! üîó GitLab repo: https://gitlab.com/Jaeger87/notion2pandas Key Features"},
{"Title": "I made a desktop chat app :)", "Author": "Reasonable-Zone-7909", "Content": "What My Project Does Hi! This is my first time doing a python project more than a few hours in size. I made a chat app which features E2E encryption using a passcode and has a multiclient architecture. All comments are welcome! Target Audience It is just a toy project for my portfolio. Comparison Compared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner. But I think that IRC already has this, so it doesn't differ much XD. Git link: https://github.com/xxzoltanxx/Balvan-Chat"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Calculator without eval()", "Author": "Zorgon-589", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python. TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions. COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators! See the below link for github: https://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can‚Äôt build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation", "Author": "pdcz", "Content": "Hi everyone, I'd like to share couple of news regarding my personal project:\nNew documentation written in Ludic showcasing it's capabilities: https://getludic.dev/docs/\nNew section regrading Layouts inspired from the Every Layout Book: https://getludic.dev/catalog/layouts\nCookiecutter template to get quickly started: https://github.com/paveldedik/ludic-template\nI have a lot of plans with this project and I'd appreciate any feedback. About The Project Ludic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components."},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python) * **What My Project Does** A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try. * **Target Audience** This is just a toy project as a learning experience"},
{"Title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it ü§û", "Author": "VoyZan", "Content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts: tl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in this Gist.\nProblem\nRequest rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of counter. Multiprocessing is not great at having a single shared variable."},
{"Title": "Rye-Tui, a Text-based User Interface (TUI) to manage rye projects", "Author": "Zaloog1337", "Content": "Hi everyone, Ive reached a state of my current project, where I want to share it with you, and gather some feedback. This is my first time using rye and I am surprised, how Hassle-Free building a package with it went. Source Code: github\nInstallation\npython -m pip install rye-tui"},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try."},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "AndroidWorld ‚Äî Build and test AI agents on Android", "Author": "crawles89", "Content": "What it does: It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging. It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them. Target Audience: Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you‚Äôd like and test out the default agent, M3A, on it. Just give it a task like ‚ÄúShow my most recent purchases on Amazon.‚Äù You can also build your own agent."},
{"Title": "Python's many command-line utilities", "Author": "treyhunner", "Content": "Python 3.12 comes bundled with 50 command-line tools. For example, python -m webbrowser http://example.com opens a web browser, python -m sqlite3 launches a sqlite prompt, and python -m ast my_file.py shows the abstract syntax tree for a given Python file. I've dug into each of them and categorized them based on their purpose and how useful they are. Python's many command-line tools"},
{"Title": "Using python for static typing benefits", "Author": "britishbanana", "Content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced. I'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Author": "neozhaoliang", "Content": "What My Project Does An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs. Target Audience RAG applications developers. Comparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies."},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "Rio: WebApps in pure Python ‚Äì Thanks and Feedback wanted!", "Author": "Sn3llius", "Content": "Hey everyone, I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for! As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned! We are looking forward to your feedback, so let us hear from you! :) GitHub"},
{"Title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa", "Author": "Jaeger1987", "Content": "What My Project Does Hello everyone! I've just released a new Python package, notion2pandas, which allows you to import a Notion database into a pandas dataframe with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code. Target Audience Whether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding! üîó GitLab repo: https://gitlab.com/Jaeger87/notion2pandas Key Features"},
{"Title": "PyODMongo an ODM for MongoDB", "Author": "maurinhoandre", "Content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\nBuilt on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents."},
{"Title": "I built a pipeline sending my wife and I SMSs twice a week with budgeting advice generated by AI", "Author": "MoodAppropriate4108", "Content": "What My Project Does:\nI built a pipeline of Dagger modules to send my wife and I SMSs twice a week with actionable financial advice generated by AI based on data from bank accounts regarding our daily spending. Details: Dagger is an open source programmable CI/CD engine. I built each step in the pipeline as a Dagger method. Dagger spins up ephemeral containers, running everything within its own container. I use GitHub Actions to trigger dagger methods that;"},
{"Title": "Circler imports in Observer design pattern in Python", "Author": "ALior1", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve. At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error. I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this."},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone üëã The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "2024 StackOverflow Survey", "Author": "monorepo", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish. Link to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "Tutorial on Surprisingly Simple Python Streamlit Dashboards", "Author": "jgloewen", "Content": "Streamlit is becoming an increasingly a popular framework for data visualization prototyping with Python. The Streamlit framework saves time, effort, and reduces the complexity traditionally associated with crafting maps and charts.Particularly if we approach application development with a modular approach. Starting simple, let‚Äôs put together 4 specific examples that leverage Streamlit for interactive data visualization:\nA global choropleth map for a dataset for a specific year."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "We built open-source SDK for adding custom code interpreters to AI apps", "Author": "mlejva", "Content": "What My Project Does Hey everyone! I'm the CEO of the company that built an SDK that makes it easy to build custom code interpreters for AI apps. We're a company called E2B [0]. We're building and open-source [1] secure environments for running untrusted AI-generated code and AI agents. We call these environments sandboxes and they are built on top of micro VM called Firecracker [2]. We specifically decided to use Firecrackers instead of containers because of their security and ability to do snapshots. You can think of us as giving small cloud computers to LLMs. We recently created a dedicated SDK for building custom code interpreters in Python or JS/TS. We saw this need after a lot of our users have been adding code execution capabilities to their AI apps with our core SDK [3]. These use cases were often centered around AI data analysis so code interpreter-like behavior made sense"},
{"Title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it ü§û", "Author": "VoyZan", "Content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts: tl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in this Gist.\nProblem\nRequest rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of counter. Multiprocessing is not great at having a single shared variable."},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "cachebox: The fastest caching library written in Rust", "Author": "SpareRevolution1487", "Content": "What my library does You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs. One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary. Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code."},
{"Title": "Self updating spreadsheet with popular questions from Ask Reddit and summarized answers using OpenAI", "Author": "DouweOsinga", "Content": "What My Project Does\nThis is a small Python script that runs inside a Google Sheet by way of the Python add-on. It uses the reddit api to fetch posts from Ask Reddit twice daily. For posts with enough upvotes, it uses the OpenAI API to summarize an answer to the question based on the comments. I then inserts any new questions and their answers into the spreadsheet and uses the Twitter APIto also post the answer to Twitter I mean X. Should be interesting to anybody looking to connect (a subset) of those APIs."},
{"Title": "I made a small Python script that uses NASA'S APOD API to set cool backgrounds on a Windows machine", "Author": "Potato_eating_a_dog", "Content": "https://github.com/william7491681/APOD_Wallpaper_Script\nWhat my project does\nNASA has a ton of accessible API's, one of which being the APOD (Astronomy Picture Of the Day) API. I made a script to get the last 9 pictures of the day and set them as my Windows 10 background, and then used task scheduler to have the script re-run every day at noon and whenever the computer boots up. It's fairly hard coded for my setup (specific file paths, 1920x1080 monitor, etc), but it shouldn't be too hard to change if one wanted to."},
{"Title": "Using python for static typing benefits", "Author": "britishbanana", "Content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced. I'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things."},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python) * **What My Project Does** A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try. * **Target Audience** This is just a toy project as a learning experience"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "PyODMongo an ODM for MongoDB", "Author": "maurinhoandre", "Content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\nBuilt on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents."},
{"Title": "JSX Syntax inside Python files. (Packed)", "Author": "RevolutionaryPen4661", "Content": "There was a JSX-style syntax preprocessor for Python called \"Packed,\" which allowed us to write JSX inside Python (*.pyx and *.py) files. It's unclear why they chose *.pyx for the file extension, as it conflicts with the naming of Cythonic file extensions (I have checked their issues). This project might have thrived with sufficient contributions and could have changed the way apps are built. However, the project is now archived on GitHub. The last commit was 5 years ago (LICENSE), and the last development commit was 9 years ago. This repository needs someone to revive it, but I don't have enough experience to take on that task. Even though I don't have enough information, we should start with Rust + Python to build a compiler (aka. template replacer) (this doesn't compile Python but replaces all JSX with a dictionary) and cleaner syntax. Integration with Django (Packed has an example too), Flask, FastAPI, Robyn etc."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "AndroidWorld ‚Äî Build and test AI agents on Android", "Author": "crawles89", "Content": "What it does: It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging. It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them. Target Audience: Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you‚Äôd like and test out the default agent, M3A, on it. Just give it a task like ‚ÄúShow my most recent purchases on Amazon.‚Äù You can also build your own agent."},
{"Title": "Tutorial on Surprisingly Simple Python Streamlit Dashboards", "Author": "jgloewen", "Content": "Streamlit is becoming an increasingly a popular framework for data visualization prototyping with Python. The Streamlit framework saves time, effort, and reduces the complexity traditionally associated with crafting maps and charts.Particularly if we approach application development with a modular approach. Starting simple, let‚Äôs put together 4 specific examples that leverage Streamlit for interactive data visualization:\nA global choropleth map for a dataset for a specific year."},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Author": "PyDataAmsterdam", "Content": "Hey all, we will close the Call for Proposals portal this Sunday, June 2, for our PyData Amsterdam 2024 Conference which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > https://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It‚Äôs a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Rio: WebApps in pure Python ‚Äì Thanks and Feedback wanted!", "Author": "Sn3llius", "Content": "Hey everyone, I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for! As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned! We are looking forward to your feedback, so let us hear from you! :) GitHub"},
{"Title": "Self updating spreadsheet with popular questions from Ask Reddit and summarized answers using OpenAI", "Author": "DouweOsinga", "Content": "What My Project Does\nThis is a small Python script that runs inside a Google Sheet by way of the Python add-on. It uses the reddit api to fetch posts from Ask Reddit twice daily. For posts with enough upvotes, it uses the OpenAI API to summarize an answer to the question based on the comments. I then inserts any new questions and their answers into the spreadsheet and uses the Twitter APIto also post the answer to Twitter I mean X. Should be interesting to anybody looking to connect (a subset) of those APIs."},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and clich√©, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "2024 StackOverflow Survey", "Author": "monorepo", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish. Link to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "1BRC solution using CPython", "Author": "pappuks", "Content": "What My Project Does: I finally got some time to attempt the 1 Billion Row Challenge (1BRC) (https://www.morling.dev/blog/one-billion-row-challenge/) where we are supposed to process a file with 1 billion records of temperature values for cities and print a sorted list with min, max and mean temperature per city. I am a sucker for optimization. So when I heard about 1BRC I got intrigued and in the last few days started experimenting with python implementations. I achieved my goal and implemented the fastest implementation running on CPython, without any external libraries. My motivation for CPython was so that I can apply any of the learning's in my day to day work, as I don't see us moving to PyPy any time sooner."},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "cachebox: The fastest caching library written in Rust", "Author": "SpareRevolution1487", "Content": "What my library does You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs. One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary. Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code."},
{"Title": "Community Insights on PgQueuer", "Author": "GabelSnabel", "Content": "Hey r/Python! A while ago, I introduced you to PgQueuer, a Python library designed for handling job queues using Postgres native functionalities. If you've started using PgQueuer, I‚Äôm keen to initiate a discussion on your experiences with it.\nHow and where have you integrated PgQueuer into your projects?\nAny difficulties or shortcomings you‚Äôve experienced while using PgQueuer?\nThoughts on the library‚Äôs efficiency and features?"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "1BRC solution using CPython", "Author": "pappuks", "Content": "What My Project Does: I finally got some time to attempt the 1 Billion Row Challenge (1BRC) (https://www.morling.dev/blog/one-billion-row-challenge/) where we are supposed to process a file with 1 billion records of temperature values for cities and print a sorted list with min, max and mean temperature per city. I am a sucker for optimization. So when I heard about 1BRC I got intrigued and in the last few days started experimenting with python implementations. I achieved my goal and implemented the fastest implementation running on CPython, without any external libraries. My motivation for CPython was so that I can apply any of the learning's in my day to day work, as I don't see us moving to PyPy any time sooner."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Keep system awake (prevent sleep) using python: wakepy", "Author": "fohrloop", "Content": "Hi all, I had previously a problem that I wanted to run some long running python scripts without being interrupted by the automatic suspend. I did not find a package that would solve the problem, so I decided to create my own. In the design, I have selected non-disruptive methods which do not rely on mouse movement or pressing a button like F15 or alter system settings. Instead, I've chosen methods that use the APIs and executables meant specifically for the purpose. I've just released wakepy 0.9.0 which supports Windows, macOS, Gnome, KDE and freedesktop.org compliant DEs."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Author": "PyDataAmsterdam", "Content": "Hey all, we will close the Call for Proposals portal this Sunday, June 2, for our PyData Amsterdam 2024 Conference which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > https://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "Community Insights on PgQueuer", "Author": "GabelSnabel", "Content": "Hey r/Python! A while ago, I introduced you to PgQueuer, a Python library designed for handling job queues using Postgres native functionalities. If you've started using PgQueuer, I‚Äôm keen to initiate a discussion on your experiences with it.\nHow and where have you integrated PgQueuer into your projects?\nAny difficulties or shortcomings you‚Äôve experienced while using PgQueuer?\nThoughts on the library‚Äôs efficiency and features?"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboardüóíÔ∏è. I created a script to automate Bing searches for reward generation\nüëç Excellent command line experience.\nüôÇ User friendly."},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "Keep system awake (prevent sleep) using python: wakepy", "Author": "fohrloop", "Content": "Hi all, I had previously a problem that I wanted to run some long running python scripts without being interrupted by the automatic suspend. I did not find a package that would solve the problem, so I decided to create my own. In the design, I have selected non-disruptive methods which do not rely on mouse movement or pressing a button like F15 or alter system settings. Instead, I've chosen methods that use the APIs and executables meant specifically for the purpose. I've just released wakepy 0.9.0 which supports Windows, macOS, Gnome, KDE and freedesktop.org compliant DEs."},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Author": "Content_Ad_4153", "Content": "Problem Statement I recently explored SonarQube for static code analysis. While it‚Äôs a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself. Target Audience This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback! Comparison with Similar Tools There was only one similar tool in the Sonar Marketplace, but it‚Äôs no longer maintained. Project Details I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub."},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Author": "Eastern_Reporter_834", "Content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!"},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Author": "Content_Ad_4153", "Content": "Problem Statement I recently explored SonarQube for static code analysis. While it‚Äôs a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself. Target Audience This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback! Comparison with Similar Tools There was only one similar tool in the Sonar Marketplace, but it‚Äôs no longer maintained. Project Details I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub."},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you‚Äôre working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Author": "good-guy-coder", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities. What My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI. GitHub Repository: NiimPrintX"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Author": "Eastern_Reporter_834", "Content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!"},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "zeroize: Securely clear secrets from memory", "Author": "radumarias", "Content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Author": "good-guy-coder", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities. What My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI. GitHub Repository: NiimPrintX"},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Author": "radumarias", "Content": "https://github.com/radumarias/rencrypt-python\nWhat My Project Does: A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\nTarget Audience This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "zeroize: Securely clear secrets from memory", "Author": "radumarias", "Content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Author": "eonlav", "Content": "What My Project Does Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models. Video running Phi-2 model on a MacBook Air with 8GB RAM, all CPU Target Audience Devs looking to experiment with integrating on-device AI into their software. Comparison\nJARVIS - an all API-based solution using DeepGram, OpenAI and ElevenLabs\nLocal Talking LLM - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Author": "radumarias", "Content": "https://github.com/radumarias/rencrypt-python\nWhat My Project Does: A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\nTarget Audience This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Calculator without eval()", "Author": "Zorgon-589", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python. TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions. COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators! See the below link for github: https://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "musicnotes: Python module for playing musical instruments!", "Author": "must1088", "Content": "https://github.com/must108/musicnotes\nWhat My Project Does\nmusicnotes is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers."},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Author": "eonlav", "Content": "What My Project Does Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models. Video running Phi-2 model on a MacBook Air with 8GB RAM, all CPU Target Audience Devs looking to experiment with integrating on-device AI into their software. Comparison\nJARVIS - an all API-based solution using DeepGram, OpenAI and ElevenLabs\nLocal Talking LLM - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word."},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try."},
{"Title": "Tuples Are Underrated! List vs Tuple üêç", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ‚ò∫Ô∏è https://youtu.be/-sO4FG6W4ho"},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Author": "XUtYwYzz", "Content": "I saw the words 'visual effects', just give me GIFs Understandable, visit the Effects Showroom first. Then come back if you like what you see. What My Project Does TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features. Use cases:\nInvoke at terminal launch to produce an animation (ex: fetch)."},
{"Title": "Calculator without eval()", "Author": "Zorgon-589", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python. TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions. COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators! See the below link for github: https://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Author": "neozhaoliang", "Content": "What My Project Does An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs. Target Audience RAG applications developers. Comparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies."},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, ‚Ä¶)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try."},
{"Title": "Preferred method to run python in VS Code", "Author": "SuperMB13", "Content": "Been working on a python tool for VS Code. Curious to get peoples' opinion on how they run python files (not notebooks) within VS Code. Do you typically run files python by:\nTyping the python command into the integrated terminal\nClicking the run button at the top of the file\nPressing F5 for debugging\nPressing Ctrl+F5 for run but not debug"},
{"Title": "Circler imports in Observer design pattern in Python", "Author": "ALior1", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve. At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error. I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this."},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Author": "neozhaoliang", "Content": "What My Project Does An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs. Target Audience RAG applications developers. Comparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies."},
{"Title": "Choosing between dash and react", "Author": "Berlibur", "Content": "At work I'm getting the question to build a platform that will be used to navigate all kinds of business metrics to different levels of granularity. Ideally there is also insights on their relationships, and advice on actions to take. I have experience with both Dash and React, and my feeling says to go with React (and a python backend). Mostly because I foresee this application to grow over time, and managing big Dash applications (as a dev) can get clunky. However, in my team there's no extra JavaScript (let alone React) knowledge. While there is a solid base for Python. There might be opportunities to source outside the team/company, which I'd have to make a strong case for."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "Circler imports in Observer design pattern in Python", "Author": "ALior1", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve. At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error. I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this."},
{"Title": "Gloe: A lightweight lib to create readable and type-safe pipelines", "Author": "justme_sam", "Content": "Have you ever faced a moment when your code is a mess of nested classes and functions, and you have to dig through dozens of levels to understand a simple function? Gloe (pronounced like ‚Äúglow‚Äù) is a library designed to assist you organize your code into a type-safe flow, making it flat and linear. What My Project Does Here‚Äôs what it can do for you:\nWrite type-safe pipelines with pure Python.\nExpress your code as a set of atomic and extensible units of responsibility called transformers."},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python) * **What My Project Does** A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try. * **Target Audience** This is just a toy project as a learning experience"},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Book Management Restful-API", "Author": "ThePawners", "Content": "What My Project Does: This project aims to provide a simple and efficient way to manage a collection of books through various API endpoints. This API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn."},
{"Title": "AndroidWorld ‚Äî Build and test AI agents on Android", "Author": "crawles89", "Content": "What it does: It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging. It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them. Target Audience: Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you‚Äôd like and test out the default agent, M3A, on it. Just give it a task like ‚ÄúShow my most recent purchases on Amazon.‚Äù You can also build your own agent."},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Author": "jgloewen", "Content": "The Python Shiny library is a framework for building interactive web applications in Python. Developed by RStudio, the same team behind the Shiny library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills. All that is needed is knowledge of the Shiny user interface Application Programming Interface (API). Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone."},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python) * **What My Project Does** A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try. * **Target Audience** This is just a toy project as a learning experience"},
{"Title": "DeepFusion: a highly modular Deep Learning Framework.", "Author": "atharvaaalok1", "Content": "What My Project Does: Hello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning. And Voila... I've developed a deep learning library, DeepFusion! Details: It's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code. You can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Rio: WebApps in pure Python ‚Äì Thanks and Feedback wanted!", "Author": "Sn3llius", "Content": "Hey everyone, I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for! As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned! We are looking forward to your feedback, so let us hear from you! :) GitHub"},
{"Title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies", "Author": "ManyInterests", "Content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are yanked. The important effect this has had is anyone who may have defined their requirements as something like PySimpleGUI<5 or PySimpleGUI==4.x.x for a now-deleted version, your installations will fail with a message like:"},
{"Title": "AndroidWorld ‚Äî Build and test AI agents on Android", "Author": "crawles89", "Content": "What it does: It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging. It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them. Target Audience: Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you‚Äôd like and test out the default agent, M3A, on it. Just give it a task like ‚ÄúShow my most recent purchases on Amazon.‚Äù You can also build your own agent."},
{"Title": "SH1106 OLED Screen App Framework for Raspberry Pi - Now on PyPI", "Author": "danyourmaster", "Content": "What it does:\nToday, I released the first working version of my SH1106 app framework for Raspberry Pi on PyPI! The SH1106 is an affordable OLED screen, costing under $3, and it's perfect for projects of all sizes. This package enables the creation of apps for it with graphics support, state management, image conversion utilities, and custom fonts. Check it out here: SH1106 Framework on PyPI. Target audience:\nThe package is mainly aimed at hobbyists who want to create small projects using the SH1106 OLED without having to manually write a lot of the graphics code typically needed on top of standard packages. I am also developing a hardware synthesizer keyboard from scratch that utilizes this framework extensively. So far, the framework handles the massive scaling required for this project excellently in terms of both code organization and performance."},
{"Title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer What My Project Does: MyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience. mytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/"},
{"Title": "2024 StackOverflow Survey", "Author": "monorepo", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish. Link to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Rio: WebApps in pure Python ‚Äì Thanks and Feedback wanted!", "Author": "Sn3llius", "Content": "Hey everyone, I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for! As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned! We are looking forward to your feedback, so let us hear from you! :) GitHub"},
{"Title": "Crowbar - Package Management without Venv", "Author": "coryalanfitz", "Content": "https://github.com/coryfitz/crowbar What it does: I'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don‚Äôt have to think about them. First: pip install crowbar-package-manager Basically you just install and run things with the crowbar command rather than pip: crowbar install package_name And then you also run things with the crowbar command rather than using \"python\" - crowbar then runs the program based on the packages in the local environment rather than having to activate your virtual environment. It's inspired by npm if you've used that with js."},
{"Title": "cachebox: The fastest caching library written in Rust", "Author": "SpareRevolution1487", "Content": "What my library does You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs. One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary. Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code."},
{"Title": "Tach - enforce module boundaries + deps, now in Rust ü¶Ä", "Author": "the1024", "Content": "https://github.com/gauge-sh/tach Hey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\nRe-wrote the core in Rust, leading to a ~19x speed up on large repos\nRe-worked the interface, and added a TUI to let you interactively declare modules\nWe built Tach to solve the ‚Äúball of mud‚Äù problem that we‚Äôve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!"},
{"Title": "Thank You PyConUS 2024 !!!", "Author": "ryanstephendavis", "Content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon... I've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture."},
{"Title": "2024 StackOverflow Survey", "Author": "monorepo", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish. Link to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "An IDE with the same step by step functionality as in Matlab", "Author": "Cerricola", "Content": "When working with Matlab I love how I can run the code step by step to debug it. Even being able to \"step in\" functions and loops. Then, I was looking to an IDE with a similar functionality for Python. Nowadays I'm using Spyder."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "New Lands RPG (Play testers welcome)", "Author": "Littlebudddy_321", "Content": "Good \"time of day\" my fellow peeps What my project does: I wanted to share my Python game I've been slowly working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you... Target Audience: I'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax..."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "cachebox: The fastest caching library written in Rust", "Author": "SpareRevolution1487", "Content": "What my library does You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs. One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary. Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Speed improvements in Polars over Pandas", "Author": "zzoetrop_1999", "Content": "I'm giving a talk on polars in July. It's been pretty fast for us, but I'm curious to hear some examples of improvements other people have seen. I got one process down from over three minutes to around 10 seconds.\nAlso curious whether people have switched over to using polars instead of pandas or they reserve it for specific use cases."},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Author": "PyDataAmsterdam", "Content": "Hey all, we will close the Call for Proposals portal this Sunday, June 2, for our PyData Amsterdam 2024 Conference which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > https://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite", "Author": "JaggedParadigm", "Content": "What My Project Does: Moonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\necstatic: price too low so they are extra happy\ncontent: price is what they were expecting,\nsad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Author": "Content_Ad_4153", "Content": "Problem Statement I recently explored SonarQube for static code analysis. While it‚Äôs a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself. Target Audience This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback! Comparison with Similar Tools There was only one similar tool in the Sonar Marketplace, but it‚Äôs no longer maintained. Project Details I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub."},
{"Title": "Interfacing Custom USB endpoints using Python!", "Author": "shekhuu", "Content": "Hi everyone, I was building something that required me to communicate over USB to Raspberry Pi Pico using Pyusb Python. So I decided to make a blog post about it showing the concepts, process, and source code.\nCheck out the blog post here!\nCheck out the source code here!"},
{"Title": "Spotify Lyrics visualizer", "Author": "Mews75", "Content": "What My Project Does Because spotify made their lyrics menu a premium only feature, I thought I'd make my own replacement for it.\nThe app connects to your spotify account, fetches the lyrics from various websites, and then syncs them automatically to what is currently playing. Basically does the exact same as the lyrics menu used to do. Target Audience Anyone who wants to see the lyrics to songs really. Comparison Most other apps that I've found are either browser only, or don't actually sync the lyrics to the song, they just show the entire lyrics at once.\nIn comparison, my app shows the lyrics line by line, synced with the song, and also has (in my opinion lol) a fairly nice looking ui.\nIt's also very easy to use for non programmers too, since you can just download an executable to use the app."},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "Mesop, open-source Python UI framework used at Google to quickly build delightful web apps", "Author": "wwwillchen", "Content": "What my project does: I‚Äôm excited to share about Mesop - a new, open-source Python UI framework that enables Python developers to quickly build delightful web apps in a scalable way. A small team of us at Google have been developing Mesop as an unofficial 20% project for the past few months. A wide range of research and product teams at Google have been using it to rapidly build internal apps and we‚Äôve gotten a lot of positive feedback internally so now we‚Äôre looking to get feedback from the open-source community. Target audience: Python developers looking to build AI demos & internal apps."},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Author": "PyDataAmsterdam", "Content": "Hey all, we will close the Call for Proposals portal this Sunday, June 2, for our PyData Amsterdam 2024 Conference which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > https://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "Mystique: Sparse data matching for Python tests", "Author": "jonocodes", "Content": "What My Project Does I made this library to help assert test responses inline while directing the comparison to be as rigid or lax as it needs to be. Motivation I write a lot of tests that assert values in complex nested dictionaries. But really I only need to check some parts in the response, not all of it. I often find myself transforming the response or maliciously extracting the important parts I need - in order to satisfy the assertions. This gets messy and can make tests hard to follow. Target Audience Anyone who writes tests. This is particularly useful if you generate fake data in your tests with something like Faker, Factory Boy, or Model Bakery."},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Author": "Eastern_Reporter_834", "Content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!"},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "I created an unofficial module for the ShipEngine API", "Author": "Status_Bid_1604", "Content": "What My Project Does Simplifies the interaction with the ShipEngine API with most response and requests built as objects, which in my opinion makes interaction much easier. This is my first released package so all criticism and feedback is very welcome. Target Audience Anyone who deals with the current ShipEngine API using Python. Comparison There is an official ShipEngine API module that is created by the company but I have found it somewhat lack luster with no way to create batches or bulk shipments (and other missing functionality), this is much more suited to accomplishing that task."},
{"Title": "Dask DataFrame is Fast Now!", "Author": "phofl93", "Content": "My colleagues and I have been working on making Dask fast. It‚Äôs been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload). I wrote a blog post on what we did: https://docs.coiled.io/blog/dask-dataframe-is-fast.html Really, this came down not to doing one thing really well, but doing lots of small things ‚Äúpretty good‚Äù. Some of the most prominent changes include:\nApache Arrow support in pandas"},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "I made python audioplayer with FFmpeg and Qt6", "Author": "WyseTwist", "Content": "Midnight Player - a simple python audiplayer for playing audio What My Project Does: My project is just an audio player for playing music, it can play audio from folders, supports different audio formats like Flac, Mp3 and can show some information about the track. Player uses subprocess to access ffmpeg, then it decodes the audio file into pcm format, then plays this file using sounddevice library. the use of these libraries is to ensure that the audio file does not lose quality during processing. Target Audience: This project was made to increase experience in python programming and to understand how the audio playback process works, but the project is also useful for people who are interested in learning the structure of the audio player as it is open source."},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Author": "good-guy-coder", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities. What My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI. GitHub Repository: NiimPrintX"},
{"Title": "Xenharmlib - An advanced music theory library that supports microtonality", "Author": "realretooth", "Content": "Introducing Xenharmlib (Source code here) What My Project Does (taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music. Target Audience Composers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Automate your WordPress new-page creation with Python", "Author": "EngineeringFit5761", "Content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin). It's a simple app, but has great expansion potential and it's really easy to use. To start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page. Run the program, add sections, choose your desired structure, and select the right widgets for your content. Once you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)"},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "How to publish a Python package with GitHub Actions using Poetry", "Author": "johnfraney", "Content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/ If you've got any tips for publishing a Python package, I'd be happy to hear those, too"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Granian 1.4 is out", "Author": "gi0baro", "Content": "Granian ‚Äì the Rust HTTP server for Python applications ‚Äì 1.4 was released! Blog post: https://polar.sh/emmett-framework/posts/granian-1-4 Release details: https://github.com/emmett-framework/granian/releases/tag/v1.4.0 Repo: https://github.com/emmett-framework/granian"},
{"Title": "zeroize: Securely clear secrets from memory", "Author": "radumarias", "Content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Reforger Whitelist Py", "Author": "PyjamaZombie", "Content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually. The target audience for this is the Arma Reforger community, for which, the application is made for. Currently, to my knowledge, there is no application like this available to the Arma Reforger community. I am very open to feedback, contributions and advice as want to expand this as much as possible!"},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "AI planner: AI tool for efficient event scheduling in Google Calendar.", "Author": "nginx26", "Content": "Good evening! I have created a new projectfor adding events to google calendar based on the text a user inputs. What My Project Does The project is a tool that uses large language models to understand the user's input and add events to the user's Google Calendar based on the user's input. It uses Ollama for natural language understanding and Google Calendar API for adding events to the user's calendar. How My Project Works Ollama uses Llama 3 with pre-instructions to act as a calendar event planner. The tool uses the model to generate responses to extract the event's details from the user's input inserted in the Web Interface. tool then asks the user to confirm the details extracted from the user's input and adds the event to the user's Google Calendar (example shown )"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Author": "radumarias", "Content": "https://github.com/radumarias/rencrypt-python\nWhat My Project Does: A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\nTarget Audience This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyPods: A lightweight solution to execute Python dependencies in an isolated fashion.", "Author": "Brilliant_Emphasis63", "Content": "Introducing PyPods What My Project Does A Python library designed to manage monolithic project architectures by isolating dependencies. Traditionally, monolithic architectures cluster all dependencies into one project, creating complexities and potential conflicts. PyPods offers a solution by isolating these dependencies and enabling the main project to communicate with them via remote procedure calls. This approach eliminates the need to install dependencies directly in the main project. Feel free to take a look and I am happy to receive some feedback! Target Audience"},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "My little ChatGPT-Multimodal Server Starter", "Author": "TwistedMinda", "Content": "Please check out my Desktoppy Server. What My Project Does It allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's. It uses ollama internally so you can use all the open-source Models but by default it's using:\nLLama3 for text-generation\nLLava for image recognition\nStable Diffusion 2 for image generation"},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Author": "eonlav", "Content": "What My Project Does Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models. Video running Phi-2 model on a MacBook Air with 8GB RAM, all CPU Target Audience Devs looking to experiment with integrating on-device AI into their software. Comparison\nJARVIS - an all API-based solution using DeepGram, OpenAI and ElevenLabs\nLocal Talking LLM - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word."},
{"Title": "I made a Traversible Tree in Python", "Author": "frankstan33", "Content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure. What My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times. There are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth)."},
{"Title": "I made a desktop chat app :)", "Author": "Reasonable-Zone-7909", "Content": "What My Project Does Hi! This is my first time doing a python project more than a few hours in size. I made a chat app which features E2E encryption using a passcode and has a multiclient architecture. All comments are welcome! Target Audience It is just a toy project for my portfolio. Comparison Compared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner. But I think that IRC already has this, so it doesn't differ much XD. Git link: https://github.com/xxzoltanxx/Balvan-Chat"},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation", "Author": "pdcz", "Content": "Hi everyone, I'd like to share couple of news regarding my personal project:\nNew documentation written in Ludic showcasing it's capabilities: https://getludic.dev/docs/\nNew section regrading Layouts inspired from the Every Layout Book: https://getludic.dev/catalog/layouts\nCookiecutter template to get quickly started: https://github.com/paveldedik/ludic-template\nI have a lot of plans with this project and I'd appreciate any feedback. About The Project Ludic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components."},
{"Title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python", "Author": "aoeu512", "Content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging. Programmable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement."},
{"Title": "Calculator without eval()", "Author": "Zorgon-589", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python. TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions. COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators! See the below link for github: https://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "Rye-Tui, a Text-based User Interface (TUI) to manage rye projects", "Author": "Zaloog1337", "Content": "Hi everyone, Ive reached a state of my current project, where I want to share it with you, and gather some feedback. This is my first time using rye and I am surprised, how Hassle-Free building a package with it went. Source Code: github\nInstallation\npython -m pip install rye-tui"},
{"Title": "Python's many command-line utilities", "Author": "treyhunner", "Content": "Python 3.12 comes bundled with 50 command-line tools. For example, python -m webbrowser http://example.com opens a web browser, python -m sqlite3 launches a sqlite prompt, and python -m ast my_file.py shows the abstract syntax tree for a given Python file. I've dug into each of them and categorized them based on their purpose and how useful they are. Python's many command-line tools"},
{"Title": "try... except... finally!", "Author": "young-and-ignorant", "Content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally. from your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()"},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa", "Author": "Jaeger1987", "Content": "What My Project Does Hello everyone! I've just released a new Python package, notion2pandas, which allows you to import a Notion database into a pandas dataframe with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code. Target Audience Whether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding! üîó GitLab repo: https://gitlab.com/Jaeger87/notion2pandas Key Features"},
{"Title": "Durable Python - Infrastructure failures should not stop the process", "Author": "autokitteh", "Content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience. It automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns. Consider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete. import requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)"},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Author": "neozhaoliang", "Content": "What My Project Does An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs. Target Audience RAG applications developers. Comparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies."},
{"Title": "I built a pipeline sending my wife and I SMSs twice a week with budgeting advice generated by AI", "Author": "MoodAppropriate4108", "Content": "What My Project Does:\nI built a pipeline of Dagger modules to send my wife and I SMSs twice a week with actionable financial advice generated by AI based on data from bank accounts regarding our daily spending. Details: Dagger is an open source programmable CI/CD engine. I built each step in the pipeline as a Dagger method. Dagger spins up ephemeral containers, running everything within its own container. I use GitHub Actions to trigger dagger methods that;"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Circler imports in Observer design pattern in Python", "Author": "ALior1", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve. At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error. I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this."},
{"Title": "We built open-source SDK for adding custom code interpreters to AI apps", "Author": "mlejva", "Content": "What My Project Does Hey everyone! I'm the CEO of the company that built an SDK that makes it easy to build custom code interpreters for AI apps. We're a company called E2B [0]. We're building and open-source [1] secure environments for running untrusted AI-generated code and AI agents. We call these environments sandboxes and they are built on top of micro VM called Firecracker [2]. We specifically decided to use Firecrackers instead of containers because of their security and ability to do snapshots. You can think of us as giving small cloud computers to LLMs. We recently created a dedicated SDK for building custom code interpreters in Python or JS/TS. We saw this need after a lot of our users have been adding code execution capabilities to their AI apps with our core SDK [3]. These use cases were often centered around AI data analysis so code interpreter-like behavior made sense"},
{"Title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it ü§û", "Author": "VoyZan", "Content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts: tl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in this Gist.\nProblem\nRequest rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of counter. Multiprocessing is not great at having a single shared variable."},
{"Title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation", "Author": "AlSweigart", "Content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books Be sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!) For $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Using python for static typing benefits", "Author": "britishbanana", "Content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced. I'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things."},
{"Title": "I made a small Python script that uses NASA'S APOD API to set cool backgrounds on a Windows machine", "Author": "Potato_eating_a_dog", "Content": "https://github.com/william7491681/APOD_Wallpaper_Script\nWhat my project does\nNASA has a ton of accessible API's, one of which being the APOD (Astronomy Picture Of the Day) API. I made a script to get the last 9 pictures of the day and set them as my Windows 10 background, and then used task scheduler to have the script re-run every day at noon and whenever the computer boots up. It's fairly hard coded for my setup (specific file paths, 1920x1080 monitor, etc), but it shouldn't be too hard to change if one wanted to."},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python) * **What My Project Does** A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try. * **Target Audience** This is just a toy project as a learning experience"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyODMongo an ODM for MongoDB", "Author": "maurinhoandre", "Content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\nBuilt on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents."},
{"Title": "JSX Syntax inside Python files. (Packed)", "Author": "RevolutionaryPen4661", "Content": "There was a JSX-style syntax preprocessor for Python called \"Packed,\" which allowed us to write JSX inside Python (*.pyx and *.py) files. It's unclear why they chose *.pyx for the file extension, as it conflicts with the naming of Cythonic file extensions (I have checked their issues). This project might have thrived with sufficient contributions and could have changed the way apps are built. However, the project is now archived on GitHub. The last commit was 5 years ago (LICENSE), and the last development commit was 9 years ago. This repository needs someone to revive it, but I don't have enough experience to take on that task. Even though I don't have enough information, we should start with Rust + Python to build a compiler (aka. template replacer) (this doesn't compile Python but replaces all JSX with a dictionary) and cleaner syntax. Integration with Django (Packed has an example too), Flask, FastAPI, Robyn etc."},
{"Title": "AndroidWorld ‚Äî Build and test AI agents on Android", "Author": "crawles89", "Content": "What it does: It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging. It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them. Target Audience: Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you‚Äôd like and test out the default agent, M3A, on it. Just give it a task like ‚ÄúShow my most recent purchases on Amazon.‚Äù You can also build your own agent."},
{"Title": "Tutorial on Surprisingly Simple Python Streamlit Dashboards", "Author": "jgloewen", "Content": "Streamlit is becoming an increasingly a popular framework for data visualization prototyping with Python. The Streamlit framework saves time, effort, and reduces the complexity traditionally associated with crafting maps and charts.Particularly if we approach application development with a modular approach. Starting simple, let‚Äôs put together 4 specific examples that leverage Streamlit for interactive data visualization:\nA global choropleth map for a dataset for a specific year."},
{"Title": "A Beginner's Guide to Unit Testing with Pytest", "Author": "Stanulilic", "Content": "Hey r/python! I wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link."},
{"Title": "Rio: WebApps in pure Python ‚Äì Thanks and Feedback wanted!", "Author": "Sn3llius", "Content": "Hey everyone, I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for! As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned! We are looking forward to your feedback, so let us hear from you! :) GitHub"},
{"Title": "Self updating spreadsheet with popular questions from Ask Reddit and summarized answers using OpenAI", "Author": "DouweOsinga", "Content": "What My Project Does\nThis is a small Python script that runs inside a Google Sheet by way of the Python add-on. It uses the reddit api to fetch posts from Ask Reddit twice daily. For posts with enough upvotes, it uses the OpenAI API to summarize an answer to the question based on the comments. I then inserts any new questions and their answers into the spreadsheet and uses the Twitter APIto also post the answer to Twitter I mean X. Should be interesting to anybody looking to connect (a subset) of those APIs."},
{"Title": "Reactive programming for Python with live-cells-py", "Author": "alex-gutev", "Content": "live-cells-py (Live Cells Python) is a reactive programming library which I ported from Live Cells for Dart.\nWhat my project Does:\nYou can declare cells which are observable containers for data: import live_cells as lc\n\na = lc.mutable(0)"},
{"Title": "2024 StackOverflow Survey", "Author": "monorepo", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish. Link to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "The possibility to build Android apps with python professionally is here and needs your support.", "Author": "klargstein", "Content": "You guys really need to check this. I believe new comers to python would love to tinker with the android ecosystem from the safety of python :-) Imgur: https://imgur.com/gallery/DtfwOVi https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course Edit: added imgur link."},
{"Title": "cachebox: The fastest caching library written in Rust", "Author": "SpareRevolution1487", "Content": "What my library does You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs. One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary. Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "You should only use licensed version of python", "Author": "vikashgraja", "Content": "I‚Äôm an intern in a company and I automated some processes using python. My company‚Äôs IT wing said that as long as it is a licensed software you can use it in our company. In my mind I was like where the f I‚Äôm going to get a license for an open source software. Note : They mention that another team has been using licensed python. I thought either IT is so stupid or that team is so smart that they brought license for pycharm or anaconda (claim that it is a Python license) and fooled IT. If I am wrong then tell me where I can get that license. And I am also looking for job in data analyst."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "1BRC solution using CPython", "Author": "pappuks", "Content": "What My Project Does: I finally got some time to attempt the 1 Billion Row Challenge (1BRC) (https://www.morling.dev/blog/one-billion-row-challenge/) where we are supposed to process a file with 1 billion records of temperature values for cities and print a sorted list with min, max and mean temperature per city. I am a sucker for optimization. So when I heard about 1BRC I got intrigued and in the last few days started experimenting with python implementations. I achieved my goal and implemented the fastest implementation running on CPython, without any external libraries. My motivation for CPython was so that I can apply any of the learning's in my day to day work, as I don't see us moving to PyPy any time sooner."},
{"Title": "Dash Pip Components", "Author": "Soolsily", "Content": "What My Project Does\nHey everyone, just released 8 new pip components for plotly and dash including:\nFull Calendar Component - A Full Calendar Component for Dash\nDash Summernote - A rich text WYSIWYG Editor for Dash\nDash Emoji Mart - A Slack-like Emoji Picker for Dash\nDash Charty - A Charting Library for Dash"},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Author": "PyDataAmsterdam", "Content": "Hey all, we will close the Call for Proposals portal this Sunday, June 2, for our PyData Amsterdam 2024 Conference which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > https://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "Community Insights on PgQueuer", "Author": "GabelSnabel", "Content": "Hey r/Python! A while ago, I introduced you to PgQueuer, a Python library designed for handling job queues using Postgres native functionalities. If you've started using PgQueuer, I‚Äôm keen to initiate a discussion on your experiences with it.\nHow and where have you integrated PgQueuer into your projects?\nAny difficulties or shortcomings you‚Äôve experienced while using PgQueuer?\nThoughts on the library‚Äôs efficiency and features?"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "Keep system awake (prevent sleep) using python: wakepy", "Author": "fohrloop", "Content": "Hi all, I had previously a problem that I wanted to run some long running python scripts without being interrupted by the automatic suspend. I did not find a package that would solve the problem, so I decided to create my own. In the design, I have selected non-disruptive methods which do not rely on mouse movement or pressing a button like F15 or alter system settings. Instead, I've chosen methods that use the APIs and executables meant specifically for the purpose. I've just released wakepy 0.9.0 which supports Windows, macOS, Gnome, KDE and freedesktop.org compliant DEs."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "HS-transform, python package for hyperbolic S-transform in signal processing", "Author": "Ok_Employ_2414", "Content": "I made a python package for S-transform with Hyperbolic window (Hyperbolic S-transform or HSTransform package). This is my first time publishing a python package, so the project is still far from stable and still under beta release.\nWhat my project does: This transformation is applied to signal processing, analyzing transient changes of a signal during very short-time. Some special use case can be in power system signal, or Geophysical signal analysis, or MRI ..."},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Author": "Content_Ad_4153", "Content": "Problem Statement I recently explored SonarQube for static code analysis. While it‚Äôs a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself. Target Audience This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback! Comparison with Similar Tools There was only one similar tool in the Sonar Marketplace, but it‚Äôs no longer maintained. Project Details I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a cheatsheet for pydash", "Author": "poopatroopa3", "Content": "https://brunodantas.github.io/pydash-cheatsheet/en/\nWhat my project does: pydash is a library with great potential to make you code more Functional and simple. I made this cheatsheet a while ago to highlight some of the most useful functions of the library, since there are so many. I hope it's useful.\nTarget audience: anyone who is interested in pydash, functional programming, not reinventing the wheel."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Author": "Eastern_Reporter_834", "Content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!"},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Author": "Content_Ad_4153", "Content": "Problem Statement I recently explored SonarQube for static code analysis. While it‚Äôs a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself. Target Audience This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback! Comparison with Similar Tools There was only one similar tool in the Sonar Marketplace, but it‚Äôs no longer maintained. Project Details I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub."},
{"Title": "IconMatch - find icons and letters positions from images!", "Author": "TraditionalDistrict9", "Content": "Hey all, I am not the original creator, but found that 4yo project, and decided to revive it! What my project does: IconMatch is library allowing you to extract icons and letter positions from image or from display! There is also realtime demo on repo showcasing how it works! Target Audience: For all detecting objects from display! Comparison: I did not find other project like that - but it was my first find too! It is also not OCR! https://github.com/NativeSensors/IconMatch Have fun!"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Author": "good-guy-coder", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities. What My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI. GitHub Repository: NiimPrintX"},
{"Title": "Tutorial: Simple Pretty Maps That Will Improve Your Python Streamlit Skills", "Author": "jgloewen", "Content": "Interactive web applications for data visualization improve user engagement and understanding. These days, Streamlit is a very popular framework used to provide web applications for data science. It is a terrific programming tool to have in you Python knowledge toolbox. Here‚Äôs a fun and practical tutorial on how to create a simple interactive and dynamic Streamlit application. This application generates a beautiful and original map using the prettymaps library. Free article: HERE"},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Author": "Eastern_Reporter_834", "Content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!"},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "zeroize: Securely clear secrets from memory", "Author": "radumarias", "Content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Author": "good-guy-coder", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities. What My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI. GitHub Repository: NiimPrintX"},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Author": "radumarias", "Content": "https://github.com/radumarias/rencrypt-python\nWhat My Project Does: A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\nTarget Audience This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet."},
{"Title": "Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient Code", "Author": "Slow_Scene_7972", "Content": "Optimize Your Python Workflow: Proven Techniques for Crafting Production-Ready Code Link"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "zeroize: Securely clear secrets from memory", "Author": "radumarias", "Content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Author": "eonlav", "Content": "What My Project Does Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models. Video running Phi-2 model on a MacBook Air with 8GB RAM, all CPU Target Audience Devs looking to experiment with integrating on-device AI into their software. Comparison\nJARVIS - an all API-based solution using DeepGram, OpenAI and ElevenLabs\nLocal Talking LLM - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word."},
{"Title": "musicnotes: Python module for playing musical instruments!", "Author": "must1088", "Content": "https://github.com/must108/musicnotes\nWhat My Project Does\nmusicnotes is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers."},
{"Title": "Picodi - Simplifying Dependency Injection in Python", "Author": "yakimka", "Content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features"},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Author": "radumarias", "Content": "https://github.com/radumarias/rencrypt-python\nWhat My Project Does: A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\nTarget Audience This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet."},
{"Title": "musicnotes: Python module for playing musical instruments!", "Author": "must1088", "Content": "https://github.com/must108/musicnotes\nWhat My Project Does\nmusicnotes is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers."},
{"Title": "Calculator without eval()", "Author": "Zorgon-589", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python. TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions. COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators! See the below link for github: https://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "Homoiconic Python Code", "Author": "moonbunR", "Content": "Homoiconic, what does it mean? In simple terms, homoiconic code is when code is treated as data and can be manipulated as you would data. This means the code can be changed, new functions and variables added, the code can generate new code or even examine and modify its own structure and behavior all while it is running. That‚Äôs why homoiconic languages like Lisp are so powerful. But what if we can make a homoiconic python code, where the code and the data are one and the same and can be modified in the same way? This guide does a good job in trying to explain how you would create a python version of the ‚ÄúLisp in Lisp‚Äù code which would give you access to all those homoiconic features that Lisp brags of like the macro systems, the expressiveness and flexibility, the metaprogramming etc. while still using python. What do you guys think of this?"},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Author": "XUtYwYzz", "Content": "I saw the words 'visual effects', just give me GIFs Understandable, visit the Effects Showroom first. Then come back if you like what you see. What My Project Does TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features. Use cases:\nInvoke at terminal launch to produce an animation (ex: fetch)."},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Author": "eonlav", "Content": "What My Project Does Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models. Video running Phi-2 model on a MacBook Air with 8GB RAM, all CPU Target Audience Devs looking to experiment with integrating on-device AI into their software. Comparison\nJARVIS - an all API-based solution using DeepGram, OpenAI and ElevenLabs\nLocal Talking LLM - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word."},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Author": "XUtYwYzz", "Content": "I saw the words 'visual effects', just give me GIFs Understandable, visit the Effects Showroom first. Then come back if you like what you see. What My Project Does TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features. Use cases:\nInvoke at terminal launch to produce an animation (ex: fetch)."},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try."},
{"Title": "Preferred method to run python in VS Code", "Author": "SuperMB13", "Content": "Been working on a python tool for VS Code. Curious to get peoples' opinion on how they run python files (not notebooks) within VS Code. Do you typically run files python by:\nTyping the python command into the integrated terminal\nClicking the run button at the top of the file\nPressing F5 for debugging\nPressing Ctrl+F5 for run but not debug"},
{"Title": "Calculator without eval()", "Author": "Zorgon-589", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python. TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions. COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators! See the below link for github: https://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "The best Python CLI library, arguably.", "Author": "AND_MY_HAX", "Content": "What My Project Does https://github.com/treykeown/arguably arguably makes it super simple to define complex CLIs. It uses your function signatures and docstrings to set everything up. Here's how it works:\nAdding the @arguably.command decorator to a function makes it appear on the CLI.\nIf multiple functions are decorated, they'll all be set up as subcommands. You can even set up multiple levels of subcommands."},
{"Title": "Preferred method to run python in VS Code", "Author": "SuperMB13", "Content": "Been working on a python tool for VS Code. Curious to get peoples' opinion on how they run python files (not notebooks) within VS Code. Do you typically run files python by:\nTyping the python command into the integrated terminal\nClicking the run button at the top of the file\nPressing F5 for debugging\nPressing Ctrl+F5 for run but not debug"},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Author": "neozhaoliang", "Content": "What My Project Does An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs. Target Audience RAG applications developers. Comparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies."},
{"Title": "Choosing between dash and react", "Author": "Berlibur", "Content": "At work I'm getting the question to build a platform that will be used to navigate all kinds of business metrics to different levels of granularity. Ideally there is also insights on their relationships, and advice on actions to take. I have experience with both Dash and React, and my feeling says to go with React (and a python backend). Mostly because I foresee this application to grow over time, and managing big Dash applications (as a dev) can get clunky. However, in my team there's no extra JavaScript (let alone React) knowledge. While there is a solid base for Python. There might be opportunities to source outside the team/company, which I'd have to make a strong case for."},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try."},
{"Title": "LinkedIn-Learning-Downloader v1.1", "Author": "YounesWinter", "Content": "With Python i created a tool that enables users to download LinkedIn Learning courses, including the often overlooked but incredibly valuable exercise files. This feature sets our project apart, offering a complete learning experience by providing both the course videos and the materials needed for practical application.\nWhat great about it and beyond other tools in the same genre concerned LinkedIn Learning Downloaders, now you can download the whole courses from a path link. this is was never possible without Python."},
{"Title": "Choosing between dash and react", "Author": "Berlibur", "Content": "At work I'm getting the question to build a platform that will be used to navigate all kinds of business metrics to different levels of granularity. Ideally there is also insights on their relationships, and advice on actions to take. I have experience with both Dash and React, and my feeling says to go with React (and a python backend). Mostly because I foresee this application to grow over time, and managing big Dash applications (as a dev) can get clunky. However, in my team there's no extra JavaScript (let alone React) knowledge. While there is a solid base for Python. There might be opportunities to source outside the team/company, which I'd have to make a strong case for."},
{"Title": "Circler imports in Observer design pattern in Python", "Author": "ALior1", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve. At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error. I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this."},
{"Title": "Gloe: A lightweight lib to create readable and type-safe pipelines", "Author": "justme_sam", "Content": "Have you ever faced a moment when your code is a mess of nested classes and functions, and you have to dig through dozens of levels to understand a simple function? Gloe (pronounced like ‚Äúglow‚Äù) is a library designed to assist you organize your code into a type-safe flow, making it flat and linear. What My Project Does Here‚Äôs what it can do for you:\nWrite type-safe pipelines with pure Python.\nExpress your code as a set of atomic and extensible units of responsibility called transformers."},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Author": "neozhaoliang", "Content": "What My Project Does An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs. Target Audience RAG applications developers. Comparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies."},
{"Title": "FastAPI Backend Template for SaaS products", "Author": "shekhuu", "Content": "Hello there, I just created a template for creating a backend for your SaaS products. What my project does: It is a FastAPI project/template for creating SaaS backends and admin dashboards. Comparison: \nOut of the box, it supports\nLicence key generation and validation.\nOAuth 2 authentication with scopes."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Gloe: A lightweight lib to create readable and type-safe pipelines", "Author": "justme_sam", "Content": "Have you ever faced a moment when your code is a mess of nested classes and functions, and you have to dig through dozens of levels to understand a simple function? Gloe (pronounced like ‚Äúglow‚Äù) is a library designed to assist you organize your code into a type-safe flow, making it flat and linear. What My Project Does Here‚Äôs what it can do for you:\nWrite type-safe pipelines with pure Python.\nExpress your code as a set of atomic and extensible units of responsibility called transformers."},
{"Title": "Book Management Restful-API", "Author": "ThePawners", "Content": "What My Project Does: This project aims to provide a simple and efficient way to manage a collection of books through various API endpoints. This API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn."},
{"Title": "Circler imports in Observer design pattern in Python", "Author": "ALior1", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve. At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error. I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this."},
{"Title": "this.s and this.d", "Author": "VladTbk", "Content": "Recently, I found out about the this \"Easter egg\" in python3. Adding import this into a py file will print \"The Zen of Python\" by Tim Peters. Also, this has two attributes: this.s and this.d, which I guess form the actual Easter egg. this.s returns an encrypted version of \"The Zen\" and this.d well, see for yourself, maybe you'll solve the puzzle."},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python) * **What My Project Does** A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try. * **Target Audience** This is just a toy project as a learning experience"},
{"Title": "Book Management Restful-API", "Author": "ThePawners", "Content": "What My Project Does: This project aims to provide a simple and efficient way to manage a collection of books through various API endpoints. This API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Mandelbrot Zoom using Python", "Author": "AbideByReason", "Content": "I made a YouTube video which previews the zoom and explains the code, which you can find here: https://youtu.be/HtNUFdh2sjg What my project does: it creates a Mandelbrot Zoom. Comparison: it uses Pillow and consists of just 2 main blocks of code: one is the main function that finds which points are in the Mandelbrot Set and the other is the main loop that applies appropriate colors to each image. It gives the option of being black and white OR in color. It works fairly well but can definitely be faster if parallelized. I'd love to hear any suggestions on how it can be improved. Target Audience: fun/toy project"},
{"Title": "AndroidWorld ‚Äî Build and test AI agents on Android", "Author": "crawles89", "Content": "What it does: It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging. It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them. Target Audience: Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you‚Äôd like and test out the default agent, M3A, on it. Just give it a task like ‚ÄúShow my most recent purchases on Amazon.‚Äù You can also build your own agent."},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Author": "jgloewen", "Content": "The Python Shiny library is a framework for building interactive web applications in Python. Developed by RStudio, the same team behind the Shiny library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills. All that is needed is knowledge of the Shiny user interface Application Programming Interface (API). Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "SH1106 OLED Screen App Framework for Raspberry Pi - Now on PyPI", "Author": "danyourmaster", "Content": "What it does:\nToday, I released the first working version of my SH1106 app framework for Raspberry Pi on PyPI! The SH1106 is an affordable OLED screen, costing under $3, and it's perfect for projects of all sizes. This package enables the creation of apps for it with graphics support, state management, image conversion utilities, and custom fonts. Check it out here: SH1106 Framework on PyPI. Target audience:\nThe package is mainly aimed at hobbyists who want to create small projects using the SH1106 OLED without having to manually write a lot of the graphics code typically needed on top of standard packages. I am also developing a hardware synthesizer keyboard from scratch that utilizes this framework extensively. So far, the framework handles the massive scaling required for this project excellently in terms of both code organization and performance."},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python) * **What My Project Does** A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try. * **Target Audience** This is just a toy project as a learning experience"},
{"Title": "Rio: WebApps in pure Python ‚Äì Thanks and Feedback wanted!", "Author": "Sn3llius", "Content": "Hey everyone, I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for! As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned! We are looking forward to your feedback, so let us hear from you! :) GitHub"},
{"Title": "Crowbar - Package Management without Venv", "Author": "coryalanfitz", "Content": "https://github.com/coryfitz/crowbar What it does: I'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don‚Äôt have to think about them. First: pip install crowbar-package-manager Basically you just install and run things with the crowbar command rather than pip: crowbar install package_name And then you also run things with the crowbar command rather than using \"python\" - crowbar then runs the program based on the packages in the local environment rather than having to activate your virtual environment. It's inspired by npm if you've used that with js."},
{"Title": "sjvisualizer: a python package to animate time-series data", "Author": "PieChartPirate", "Content": "What the project does: data animation library for time-series data. Currently it supports the following chart types:\nBar races\nAnimated Pie Charts\nAnimated Line Charts\nAnimated Stacked Area Charts"},
{"Title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies", "Author": "ManyInterests", "Content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are yanked. The important effect this has had is anyone who may have defined their requirements as something like PySimpleGUI<5 or PySimpleGUI==4.x.x for a now-deleted version, your installations will fail with a message like:"},
{"Title": "SH1106 OLED Screen App Framework for Raspberry Pi - Now on PyPI", "Author": "danyourmaster", "Content": "What it does:\nToday, I released the first working version of my SH1106 app framework for Raspberry Pi on PyPI! The SH1106 is an affordable OLED screen, costing under $3, and it's perfect for projects of all sizes. This package enables the creation of apps for it with graphics support, state management, image conversion utilities, and custom fonts. Check it out here: SH1106 Framework on PyPI. Target audience:\nThe package is mainly aimed at hobbyists who want to create small projects using the SH1106 OLED without having to manually write a lot of the graphics code typically needed on top of standard packages. I am also developing a hardware synthesizer keyboard from scratch that utilizes this framework extensively. So far, the framework handles the massive scaling required for this project excellently in terms of both code organization and performance."},
{"Title": "An IDE with the same step by step functionality as in Matlab", "Author": "Cerricola", "Content": "When working with Matlab I love how I can run the code step by step to debug it. Even being able to \"step in\" functions and loops. Then, I was looking to an IDE with a similar functionality for Python. Nowadays I'm using Spyder."},
{"Title": "AndroidWorld ‚Äî Build and test AI agents on Android", "Author": "crawles89", "Content": "What it does: It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging. It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them. Target Audience: Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you‚Äôd like and test out the default agent, M3A, on it. Just give it a task like ‚ÄúShow my most recent purchases on Amazon.‚Äù You can also build your own agent."},
{"Title": "2024 StackOverflow Survey", "Author": "monorepo", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish. Link to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Crowbar - Package Management without Venv", "Author": "coryalanfitz", "Content": "https://github.com/coryfitz/crowbar What it does: I'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don‚Äôt have to think about them. First: pip install crowbar-package-manager Basically you just install and run things with the crowbar command rather than pip: crowbar install package_name And then you also run things with the crowbar command rather than using \"python\" - crowbar then runs the program based on the packages in the local environment rather than having to activate your virtual environment. It's inspired by npm if you've used that with js."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "cachebox: The fastest caching library written in Rust", "Author": "SpareRevolution1487", "Content": "What my library does You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs. One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary. Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code."},
{"Title": "Rio: WebApps in pure Python ‚Äì Thanks and Feedback wanted!", "Author": "Sn3llius", "Content": "Hey everyone, I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for! As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned! We are looking forward to your feedback, so let us hear from you! :) GitHub"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Tach - enforce module boundaries + deps, now in Rust ü¶Ä", "Author": "the1024", "Content": "https://github.com/gauge-sh/tach Hey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\nRe-wrote the core in Rust, leading to a ~19x speed up on large repos\nRe-worked the interface, and added a TUI to let you interactively declare modules\nWe built Tach to solve the ‚Äúball of mud‚Äù problem that we‚Äôve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!"},
{"Title": "An IDE with the same step by step functionality as in Matlab", "Author": "Cerricola", "Content": "When working with Matlab I love how I can run the code step by step to debug it. Even being able to \"step in\" functions and loops. Then, I was looking to an IDE with a similar functionality for Python. Nowadays I'm using Spyder."},
{"Title": "2024 StackOverflow Survey", "Author": "monorepo", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish. Link to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "Spotify Lyrics visualizer", "Author": "Mews75", "Content": "What My Project Does Because spotify made their lyrics menu a premium only feature, I thought I'd make my own replacement for it.\nThe app connects to your spotify account, fetches the lyrics from various websites, and then syncs them automatically to what is currently playing. Basically does the exact same as the lyrics menu used to do. Target Audience Anyone who wants to see the lyrics to songs really. Comparison Most other apps that I've found are either browser only, or don't actually sync the lyrics to the song, they just show the entire lyrics at once.\nIn comparison, my app shows the lyrics line by line, synced with the song, and also has (in my opinion lol) a fairly nice looking ui.\nIt's also very easy to use for non programmers too, since you can just download an executable to use the app."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Auto Data Analysis python packages to know", "Author": "mehul_gupta1997", "Content": "Check this video tutorial to explore different AutoEDA python packages like pandas-profiling, sweetviz, dataprep,etc which can enable automatic data analysis within minutes without any effort : https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry"},
{"Title": "New Lands RPG (Play testers welcome)", "Author": "Littlebudddy_321", "Content": "Good \"time of day\" my fellow peeps What my project does: I wanted to share my Python game I've been slowly working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you... Target Audience: I'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax..."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I created an unofficial module for the ShipEngine API", "Author": "Status_Bid_1604", "Content": "What My Project Does Simplifies the interaction with the ShipEngine API with most response and requests built as objects, which in my opinion makes interaction much easier. This is my first released package so all criticism and feedback is very welcome. Target Audience Anyone who deals with the current ShipEngine API using Python. Comparison There is an official ShipEngine API module that is created by the company but I have found it somewhat lack luster with no way to create batches or bulk shipments (and other missing functionality), this is much more suited to accomplishing that task."},
{"Title": "cachebox: The fastest caching library written in Rust", "Author": "SpareRevolution1487", "Content": "What my library does You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs. One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary. Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code."},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Author": "PyDataAmsterdam", "Content": "Hey all, we will close the Call for Proposals portal this Sunday, June 2, for our PyData Amsterdam 2024 Conference which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > https://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "Folks who know the internals: Where does operator precedence \"happen\"?", "Author": "BeerIsTheMindKiller", "Content": "Hey! Messing around with instaviz, cool library, highly recommend. You can visualize a function's bytecode as well as AST and some other stuff. i entered this: def f():\n  x = 1 + 2 - 10**2\n  return x I was expecting the AST nodes for 1 + 2 - 10**2 to be rearranged somehow, with 10**2 being moved to the left hand of the expression, because exponents get evaluated before addition/subtraction. but no! just looks like this:"},
{"Title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite", "Author": "JaggedParadigm", "Content": "What My Project Does: Moonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\necstatic: price too low so they are extra happy\ncontent: price is what they were expecting,\nsad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period"},
{"Title": "Spotify Lyrics visualizer", "Author": "Mews75", "Content": "What My Project Does Because spotify made their lyrics menu a premium only feature, I thought I'd make my own replacement for it.\nThe app connects to your spotify account, fetches the lyrics from various websites, and then syncs them automatically to what is currently playing. Basically does the exact same as the lyrics menu used to do. Target Audience Anyone who wants to see the lyrics to songs really. Comparison Most other apps that I've found are either browser only, or don't actually sync the lyrics to the song, they just show the entire lyrics at once.\nIn comparison, my app shows the lyrics line by line, synced with the song, and also has (in my opinion lol) a fairly nice looking ui.\nIt's also very easy to use for non programmers too, since you can just download an executable to use the app."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Xenharmlib - An advanced music theory library that supports microtonality", "Author": "realretooth", "Content": "Introducing Xenharmlib (Source code here) What My Project Does (taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music. Target Audience Composers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general."},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Mesop, open-source Python UI framework used at Google to quickly build delightful web apps", "Author": "wwwillchen", "Content": "What my project does: I‚Äôm excited to share about Mesop - a new, open-source Python UI framework that enables Python developers to quickly build delightful web apps in a scalable way. A small team of us at Google have been developing Mesop as an unofficial 20% project for the past few months. A wide range of research and product teams at Google have been using it to rapidly build internal apps and we‚Äôve gotten a lot of positive feedback internally so now we‚Äôre looking to get feedback from the open-source community. Target audience: Python developers looking to build AI demos & internal apps."},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Author": "PyDataAmsterdam", "Content": "Hey all, we will close the Call for Proposals portal this Sunday, June 2, for our PyData Amsterdam 2024 Conference which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > https://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "I created an unofficial module for the ShipEngine API", "Author": "Status_Bid_1604", "Content": "What My Project Does Simplifies the interaction with the ShipEngine API with most response and requests built as objects, which in my opinion makes interaction much easier. This is my first released package so all criticism and feedback is very welcome. Target Audience Anyone who deals with the current ShipEngine API using Python. Comparison There is an official ShipEngine API module that is created by the company but I have found it somewhat lack luster with no way to create batches or bulk shipments (and other missing functionality), this is much more suited to accomplishing that task."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "pip time machine", "Author": "rejectedlesbian", "Content": "https://github.com/nevakrien/time_machine_pip this is a fairly simple project barely anything to it but I think its promising\nthe idea is to put pip in a time machine so it can not use package versions that were made after the project is made. I am doing this by proxiying pypi and cutting out the newer versions. initial tests show that pip respects the proxy and works like you would expect"},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "Dask DataFrame is Fast Now!", "Author": "phofl93", "Content": "My colleagues and I have been working on making Dask fast. It‚Äôs been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload). I wrote a blog post on what we did: https://docs.coiled.io/blog/dask-dataframe-is-fast.html Really, this came down not to doing one thing really well, but doing lots of small things ‚Äúpretty good‚Äù. Some of the most prominent changes include:\nApache Arrow support in pandas"},
{"Title": "AI planner: AI tool for efficient event scheduling in Google Calendar.", "Author": "nginx26", "Content": "Good evening! I have created a new projectfor adding events to google calendar based on the text a user inputs. What My Project Does The project is a tool that uses large language models to understand the user's input and add events to the user's Google Calendar based on the user's input. It uses Ollama for natural language understanding and Google Calendar API for adding events to the user's calendar. How My Project Works Ollama uses Llama 3 with pre-instructions to act as a calendar event planner. The tool uses the model to generate responses to extract the event's details from the user's input inserted in the Web Interface. tool then asks the user to confirm the details extracted from the user's input and adds the event to the user's Google Calendar (example shown )"},
{"Title": "Xenharmlib - An advanced music theory library that supports microtonality", "Author": "realretooth", "Content": "Introducing Xenharmlib (Source code here) What My Project Does (taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music. Target Audience Composers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Automate your WordPress new-page creation with Python", "Author": "EngineeringFit5761", "Content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin). It's a simple app, but has great expansion potential and it's really easy to use. To start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page. Run the program, add sections, choose your desired structure, and select the right widgets for your content. Once you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)"},
{"Title": "Building an LLM chat application using RAG Agent", "Author": "iryna_kondr", "Content": "Motivation\nChatbots are among the most popular applications of large language models (LLMs). Often, an LLM's internal knowledge base is adequate for answering users questions. However, in those cases, the model may generate outdated, incorrect, or too generic responses when specificity is expected. These challenges can be partially addressed by supplementing the LLM with an external knowledge base and employing the retrieval-augmented generation (RAG) technique. However, if user queries are complex, it may be necessary to break the task into several sub-parts. In such cases, relying solely on the RAG technique may not be sufficient, and the use of agents may be required."},
{"Title": "PyPods: A lightweight solution to execute Python dependencies in an isolated fashion.", "Author": "Brilliant_Emphasis63", "Content": "Introducing PyPods What My Project Does A Python library designed to manage monolithic project architectures by isolating dependencies. Traditionally, monolithic architectures cluster all dependencies into one project, creating complexities and potential conflicts. PyPods offers a solution by isolating these dependencies and enabling the main project to communicate with them via remote procedure calls. This approach eliminates the need to install dependencies directly in the main project. Feel free to take a look and I am happy to receive some feedback! Target Audience"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Granian 1.4 is out", "Author": "gi0baro", "Content": "Granian ‚Äì the Rust HTTP server for Python applications ‚Äì 1.4 was released! Blog post: https://polar.sh/emmett-framework/posts/granian-1-4 Release details: https://github.com/emmett-framework/granian/releases/tag/v1.4.0 Repo: https://github.com/emmett-framework/granian"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "I made a desktop chat app :)", "Author": "Reasonable-Zone-7909", "Content": "What My Project Does Hi! This is my first time doing a python project more than a few hours in size. I made a chat app which features E2E encryption using a passcode and has a multiclient architecture. All comments are welcome! Target Audience It is just a toy project for my portfolio. Comparison Compared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner. But I think that IRC already has this, so it doesn't differ much XD. Git link: https://github.com/xxzoltanxx/Balvan-Chat"},
{"Title": "What changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ?", "Author": "These_Shoe3594", "Content": "What are all the changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ? There are some CVE fixes available in the latest 3.x version of werkzueg. To take the fixes as part of my code, we want to upgrade the version. When I do so, I‚Äôve faced lot of breakages. I found some on documents and release notes. But it would be easier if someone already did some changes regarding this."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "AI planner: AI tool for efficient event scheduling in Google Calendar.", "Author": "nginx26", "Content": "Good evening! I have created a new projectfor adding events to google calendar based on the text a user inputs. What My Project Does The project is a tool that uses large language models to understand the user's input and add events to the user's Google Calendar based on the user's input. It uses Ollama for natural language understanding and Google Calendar API for adding events to the user's calendar. How My Project Works Ollama uses Llama 3 with pre-instructions to act as a calendar event planner. The tool uses the model to generate responses to extract the event's details from the user's input inserted in the Web Interface. tool then asks the user to confirm the details extracted from the user's input and adds the event to the user's Google Calendar (example shown )"},
{"Title": "Rye-Tui, a Text-based User Interface (TUI) to manage rye projects", "Author": "Zaloog1337", "Content": "Hi everyone, Ive reached a state of my current project, where I want to share it with you, and gather some feedback. This is my first time using rye and I am surprised, how Hassle-Free building a package with it went. Source Code: github\nInstallation\npython -m pip install rye-tui"},
{"Title": "My little ChatGPT-Multimodal Server Starter", "Author": "TwistedMinda", "Content": "Please check out my Desktoppy Server. What My Project Does It allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's. It uses ollama internally so you can use all the open-source Models but by default it's using:\nLLama3 for text-generation\nLLava for image recognition\nStable Diffusion 2 for image generation"},
{"Title": "Langchain using llama3 to build recommendation system", "Author": "yngwieHero", "Content": "Hi, Recently I played a bit with LLMs, specifcally exploring ways of running the models locally and building prompts using LangChain. As a result ended up coding a small recommendation system, powered with Llama3-7b model, which suggests topics to read on HackerNews. Wanted to share my experiences, so I wrote a small article where I described all my findings.\nHope you'll like it: https://lukaszksiezak.github.io/ScrapyToLLM/ Github repo: https://github.com/lukaszksiezak/ScrapyToLLM What the project does: It's a Python application which uses scrapy to scrape HackerNews page. Scraped articles are pipelined to redis, which is then feeding Llama3 using langchain. Prompter is configured to serve a user articles which are matching his request."},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "PyPods: A lightweight solution to execute Python dependencies in an isolated fashion.", "Author": "Brilliant_Emphasis63", "Content": "Introducing PyPods What My Project Does A Python library designed to manage monolithic project architectures by isolating dependencies. Traditionally, monolithic architectures cluster all dependencies into one project, creating complexities and potential conflicts. PyPods offers a solution by isolating these dependencies and enabling the main project to communicate with them via remote procedure calls. This approach eliminates the need to install dependencies directly in the main project. Feel free to take a look and I am happy to receive some feedback! Target Audience"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyCon US 2024 is here!", "Author": "monorepo", "Content": "Official Event"},
{"Title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation", "Author": "pdcz", "Content": "Hi everyone, I'd like to share couple of news regarding my personal project:\nNew documentation written in Ludic showcasing it's capabilities: https://getludic.dev/docs/\nNew section regrading Layouts inspired from the Every Layout Book: https://getludic.dev/catalog/layouts\nCookiecutter template to get quickly started: https://github.com/paveldedik/ludic-template\nI have a lot of plans with this project and I'd appreciate any feedback. About The Project Ludic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components."},
{"Title": "I built a pipeline sending my wife and I SMSs twice a week with budgeting advice generated by AI", "Author": "MoodAppropriate4108", "Content": "What My Project Does:\nI built a pipeline of Dagger modules to send my wife and I SMSs twice a week with actionable financial advice generated by AI based on data from bank accounts regarding our daily spending. Details: Dagger is an open source programmable CI/CD engine. I built each step in the pipeline as a Dagger method. Dagger spins up ephemeral containers, running everything within its own container. I use GitHub Actions to trigger dagger methods that;"},
{"Title": "Blat AI generates Python code to do web-scraping (code based on Scrapy framework)", "Author": "arnaupv", "Content": "Miguel Algorri and Arnau Pont V√≠lchez here, blat co-founders! Target Audience\nPeople who need to collect public data from the web (pricing, articles, reviews, leads etc). What does our Project Do?\nAt blat we aim to deliver production-ready web scraping code in minutes (written in Python, Scrapy framework).\nThis is feasible thanks to our Web Scraping AI Agent üß†. Here our CLI to interact with the Web Scraping AI Agent (github). Too good to be true?"},
{"Title": "I made a desktop chat app :)", "Author": "Reasonable-Zone-7909", "Content": "What My Project Does Hi! This is my first time doing a python project more than a few hours in size. I made a chat app which features E2E encryption using a passcode and has a multiclient architecture. All comments are welcome! Target Audience It is just a toy project for my portfolio. Comparison Compared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner. But I think that IRC already has this, so it doesn't differ much XD. Git link: https://github.com/xxzoltanxx/Balvan-Chat"},
{"Title": "Python's many command-line utilities", "Author": "treyhunner", "Content": "Python 3.12 comes bundled with 50 command-line tools. For example, python -m webbrowser http://example.com opens a web browser, python -m sqlite3 launches a sqlite prompt, and python -m ast my_file.py shows the abstract syntax tree for a given Python file. I've dug into each of them and categorized them based on their purpose and how useful they are. Python's many command-line tools"},
{"Title": "We built open-source SDK for adding custom code interpreters to AI apps", "Author": "mlejva", "Content": "What My Project Does Hey everyone! I'm the CEO of the company that built an SDK that makes it easy to build custom code interpreters for AI apps. We're a company called E2B [0]. We're building and open-source [1] secure environments for running untrusted AI-generated code and AI agents. We call these environments sandboxes and they are built on top of micro VM called Firecracker [2]. We specifically decided to use Firecrackers instead of containers because of their security and ability to do snapshots. You can think of us as giving small cloud computers to LLMs. We recently created a dedicated SDK for building custom code interpreters in Python or JS/TS. We saw this need after a lot of our users have been adding code execution capabilities to their AI apps with our core SDK [3]. These use cases were often centered around AI data analysis so code interpreter-like behavior made sense"},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Rye-Tui, a Text-based User Interface (TUI) to manage rye projects", "Author": "Zaloog1337", "Content": "Hi everyone, Ive reached a state of my current project, where I want to share it with you, and gather some feedback. This is my first time using rye and I am surprised, how Hassle-Free building a package with it went. Source Code: github\nInstallation\npython -m pip install rye-tui"},
{"Title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa", "Author": "Jaeger1987", "Content": "What My Project Does Hello everyone! I've just released a new Python package, notion2pandas, which allows you to import a Notion database into a pandas dataframe with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code. Target Audience Whether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding! üîó GitLab repo: https://gitlab.com/Jaeger87/notion2pandas Key Features"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a small Python script that uses NASA'S APOD API to set cool backgrounds on a Windows machine", "Author": "Potato_eating_a_dog", "Content": "https://github.com/william7491681/APOD_Wallpaper_Script\nWhat my project does\nNASA has a ton of accessible API's, one of which being the APOD (Astronomy Picture Of the Day) API. I made a script to get the last 9 pictures of the day and set them as my Windows 10 background, and then used task scheduler to have the script re-run every day at noon and whenever the computer boots up. It's fairly hard coded for my setup (specific file paths, 1920x1080 monitor, etc), but it shouldn't be too hard to change if one wanted to."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "JSX Syntax inside Python files. (Packed)", "Author": "RevolutionaryPen4661", "Content": "There was a JSX-style syntax preprocessor for Python called \"Packed,\" which allowed us to write JSX inside Python (*.pyx and *.py) files. It's unclear why they chose *.pyx for the file extension, as it conflicts with the naming of Cythonic file extensions (I have checked their issues). This project might have thrived with sufficient contributions and could have changed the way apps are built. However, the project is now archived on GitHub. The last commit was 5 years ago (LICENSE), and the last development commit was 9 years ago. This repository needs someone to revive it, but I don't have enough experience to take on that task. Even though I don't have enough information, we should start with Rust + Python to build a compiler (aka. template replacer) (this doesn't compile Python but replaces all JSX with a dictionary) and cleaner syntax. Integration with Django (Packed has an example too), Flask, FastAPI, Robyn etc."},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Author": "Content_Ad_4153", "Content": "Problem Statement I recently explored SonarQube for static code analysis. While it‚Äôs a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself. Target Audience This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback! Comparison with Similar Tools There was only one similar tool in the Sonar Marketplace, but it‚Äôs no longer maintained. Project Details I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it ü§û", "Author": "VoyZan", "Content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts: tl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in this Gist.\nProblem\nRequest rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of counter. Multiprocessing is not great at having a single shared variable."},
{"Title": "I built a pipeline sending my wife and I SMSs twice a week with budgeting advice generated by AI", "Author": "MoodAppropriate4108", "Content": "What My Project Does:\nI built a pipeline of Dagger modules to send my wife and I SMSs twice a week with actionable financial advice generated by AI based on data from bank accounts regarding our daily spending. Details: Dagger is an open source programmable CI/CD engine. I built each step in the pipeline as a Dagger method. Dagger spins up ephemeral containers, running everything within its own container. I use GitHub Actions to trigger dagger methods that;"},
{"Title": "Using python for static typing benefits", "Author": "britishbanana", "Content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced. I'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things."},
{"Title": "We built open-source SDK for adding custom code interpreters to AI apps", "Author": "mlejva", "Content": "What My Project Does Hey everyone! I'm the CEO of the company that built an SDK that makes it easy to build custom code interpreters for AI apps. We're a company called E2B [0]. We're building and open-source [1] secure environments for running untrusted AI-generated code and AI agents. We call these environments sandboxes and they are built on top of micro VM called Firecracker [2]. We specifically decided to use Firecrackers instead of containers because of their security and ability to do snapshots. You can think of us as giving small cloud computers to LLMs. We recently created a dedicated SDK for building custom code interpreters in Python or JS/TS. We saw this need after a lot of our users have been adding code execution capabilities to their AI apps with our core SDK [3]. These use cases were often centered around AI data analysis so code interpreter-like behavior made sense"},
{"Title": "PyODMongo an ODM for MongoDB", "Author": "maurinhoandre", "Content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\nBuilt on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents."},
{"Title": "I made a small Python script that uses NASA'S APOD API to set cool backgrounds on a Windows machine", "Author": "Potato_eating_a_dog", "Content": "https://github.com/william7491681/APOD_Wallpaper_Script\nWhat my project does\nNASA has a ton of accessible API's, one of which being the APOD (Astronomy Picture Of the Day) API. I made a script to get the last 9 pictures of the day and set them as my Windows 10 background, and then used task scheduler to have the script re-run every day at noon and whenever the computer boots up. It's fairly hard coded for my setup (specific file paths, 1920x1080 monitor, etc), but it shouldn't be too hard to change if one wanted to."},
{"Title": "Tutorial on Surprisingly Simple Python Streamlit Dashboards", "Author": "jgloewen", "Content": "Streamlit is becoming an increasingly a popular framework for data visualization prototyping with Python. The Streamlit framework saves time, effort, and reduces the complexity traditionally associated with crafting maps and charts.Particularly if we approach application development with a modular approach. Starting simple, let‚Äôs put together 4 specific examples that leverage Streamlit for interactive data visualization:\nA global choropleth map for a dataset for a specific year."},
{"Title": "JSX Syntax inside Python files. (Packed)", "Author": "RevolutionaryPen4661", "Content": "There was a JSX-style syntax preprocessor for Python called \"Packed,\" which allowed us to write JSX inside Python (*.pyx and *.py) files. It's unclear why they chose *.pyx for the file extension, as it conflicts with the naming of Cythonic file extensions (I have checked their issues). This project might have thrived with sufficient contributions and could have changed the way apps are built. However, the project is now archived on GitHub. The last commit was 5 years ago (LICENSE), and the last development commit was 9 years ago. This repository needs someone to revive it, but I don't have enough experience to take on that task. Even though I don't have enough information, we should start with Rust + Python to build a compiler (aka. template replacer) (this doesn't compile Python but replaces all JSX with a dictionary) and cleaner syntax. Integration with Django (Packed has an example too), Flask, FastAPI, Robyn etc."},
{"Title": "Self updating spreadsheet with popular questions from Ask Reddit and summarized answers using OpenAI", "Author": "DouweOsinga", "Content": "What My Project Does\nThis is a small Python script that runs inside a Google Sheet by way of the Python add-on. It uses the reddit api to fetch posts from Ask Reddit twice daily. For posts with enough upvotes, it uses the OpenAI API to summarize an answer to the question based on the comments. I then inserts any new questions and their answers into the spreadsheet and uses the Twitter APIto also post the answer to Twitter I mean X. Should be interesting to anybody looking to connect (a subset) of those APIs."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Author": "Eastern_Reporter_834", "Content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!"},
{"Title": "1BRC solution using CPython", "Author": "pappuks", "Content": "What My Project Does: I finally got some time to attempt the 1 Billion Row Challenge (1BRC) (https://www.morling.dev/blog/one-billion-row-challenge/) where we are supposed to process a file with 1 billion records of temperature values for cities and print a sorted list with min, max and mean temperature per city. I am a sucker for optimization. So when I heard about 1BRC I got intrigued and in the last few days started experimenting with python implementations. I achieved my goal and implemented the fastest implementation running on CPython, without any external libraries. My motivation for CPython was so that I can apply any of the learning's in my day to day work, as I don't see us moving to PyPy any time sooner."},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Author": "good-guy-coder", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities. What My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI. GitHub Repository: NiimPrintX"},
{"Title": "Community Insights on PgQueuer", "Author": "GabelSnabel", "Content": "Hey r/Python! A while ago, I introduced you to PgQueuer, a Python library designed for handling job queues using Postgres native functionalities. If you've started using PgQueuer, I‚Äôm keen to initiate a discussion on your experiences with it.\nHow and where have you integrated PgQueuer into your projects?\nAny difficulties or shortcomings you‚Äôve experienced while using PgQueuer?\nThoughts on the library‚Äôs efficiency and features?"},
{"Title": "zeroize: Securely clear secrets from memory", "Author": "radumarias", "Content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "Keep system awake (prevent sleep) using python: wakepy", "Author": "fohrloop", "Content": "Hi all, I had previously a problem that I wanted to run some long running python scripts without being interrupted by the automatic suspend. I did not find a package that would solve the problem, so I decided to create my own. In the design, I have selected non-disruptive methods which do not rely on mouse movement or pressing a button like F15 or alter system settings. Instead, I've chosen methods that use the APIs and executables meant specifically for the purpose. I've just released wakepy 0.9.0 which supports Windows, macOS, Gnome, KDE and freedesktop.org compliant DEs."},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Author": "radumarias", "Content": "https://github.com/radumarias/rencrypt-python\nWhat My Project Does: A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\nTarget Audience This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a cheatsheet for pydash", "Author": "poopatroopa3", "Content": "https://brunodantas.github.io/pydash-cheatsheet/en/\nWhat my project does: pydash is a library with great potential to make you code more Functional and simple. I made this cheatsheet a while ago to highlight some of the most useful functions of the library, since there are so many. I hope it's useful.\nTarget audience: anyone who is interested in pydash, functional programming, not reinventing the wheel."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Author": "eonlav", "Content": "What My Project Does Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models. Video running Phi-2 model on a MacBook Air with 8GB RAM, all CPU Target Audience Devs looking to experiment with integrating on-device AI into their software. Comparison\nJARVIS - an all API-based solution using DeepGram, OpenAI and ElevenLabs\nLocal Talking LLM - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word."},
{"Title": "musicnotes: Python module for playing musical instruments!", "Author": "must1088", "Content": "https://github.com/must108/musicnotes\nWhat My Project Does\nmusicnotes is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers."},
{"Title": "IconMatch - find icons and letters positions from images!", "Author": "TraditionalDistrict9", "Content": "Hey all, I am not the original creator, but found that 4yo project, and decided to revive it! What my project does: IconMatch is library allowing you to extract icons and letter positions from image or from display! There is also realtime demo on repo showcasing how it works! Target Audience: For all detecting objects from display! Comparison: I did not find other project like that - but it was my first find too! It is also not OCR! https://github.com/NativeSensors/IconMatch Have fun!"},
{"Title": "musicnotes: Python module for playing musical instruments!", "Author": "must1088", "Content": "https://github.com/must108/musicnotes\nWhat My Project Does\nmusicnotes is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers."},
{"Title": "Calculator without eval()", "Author": "Zorgon-589", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python. TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions. COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators! See the below link for github: https://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Author": "XUtYwYzz", "Content": "I saw the words 'visual effects', just give me GIFs Understandable, visit the Effects Showroom first. Then come back if you like what you see. What My Project Does TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features. Use cases:\nInvoke at terminal launch to produce an animation (ex: fetch)."},
{"Title": "Tutorial: Simple Pretty Maps That Will Improve Your Python Streamlit Skills", "Author": "jgloewen", "Content": "Interactive web applications for data visualization improve user engagement and understanding. These days, Streamlit is a very popular framework used to provide web applications for data science. It is a terrific programming tool to have in you Python knowledge toolbox. Here‚Äôs a fun and practical tutorial on how to create a simple interactive and dynamic Streamlit application. This application generates a beautiful and original map using the prettymaps library. Free article: HERE"},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Author": "XUtYwYzz", "Content": "I saw the words 'visual effects', just give me GIFs Understandable, visit the Effects Showroom first. Then come back if you like what you see. What My Project Does TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features. Use cases:\nInvoke at terminal launch to produce an animation (ex: fetch)."},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try."},
{"Title": "Preferred method to run python in VS Code", "Author": "SuperMB13", "Content": "Been working on a python tool for VS Code. Curious to get peoples' opinion on how they run python files (not notebooks) within VS Code. Do you typically run files python by:\nTyping the python command into the integrated terminal\nClicking the run button at the top of the file\nPressing F5 for debugging\nPressing Ctrl+F5 for run but not debug"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Preferred method to run python in VS Code", "Author": "SuperMB13", "Content": "Been working on a python tool for VS Code. Curious to get peoples' opinion on how they run python files (not notebooks) within VS Code. Do you typically run files python by:\nTyping the python command into the integrated terminal\nClicking the run button at the top of the file\nPressing F5 for debugging\nPressing Ctrl+F5 for run but not debug"},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Author": "neozhaoliang", "Content": "What My Project Does An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs. Target Audience RAG applications developers. Comparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies."},
{"Title": "Choosing between dash and react", "Author": "Berlibur", "Content": "At work I'm getting the question to build a platform that will be used to navigate all kinds of business metrics to different levels of granularity. Ideally there is also insights on their relationships, and advice on actions to take. I have experience with both Dash and React, and my feeling says to go with React (and a python backend). Mostly because I foresee this application to grow over time, and managing big Dash applications (as a dev) can get clunky. However, in my team there's no extra JavaScript (let alone React) knowledge. While there is a solid base for Python. There might be opportunities to source outside the team/company, which I'd have to make a strong case for."},
{"Title": "Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient Code", "Author": "Slow_Scene_7972", "Content": "Optimize Your Python Workflow: Proven Techniques for Crafting Production-Ready Code Link"},
{"Title": "Choosing between dash and react", "Author": "Berlibur", "Content": "At work I'm getting the question to build a platform that will be used to navigate all kinds of business metrics to different levels of granularity. Ideally there is also insights on their relationships, and advice on actions to take. I have experience with both Dash and React, and my feeling says to go with React (and a python backend). Mostly because I foresee this application to grow over time, and managing big Dash applications (as a dev) can get clunky. However, in my team there's no extra JavaScript (let alone React) knowledge. While there is a solid base for Python. There might be opportunities to source outside the team/company, which I'd have to make a strong case for."},
{"Title": "Circler imports in Observer design pattern in Python", "Author": "ALior1", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve. At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error. I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this."},
{"Title": "Gloe: A lightweight lib to create readable and type-safe pipelines", "Author": "justme_sam", "Content": "Have you ever faced a moment when your code is a mess of nested classes and functions, and you have to dig through dozens of levels to understand a simple function? Gloe (pronounced like ‚Äúglow‚Äù) is a library designed to assist you organize your code into a type-safe flow, making it flat and linear. What My Project Does Here‚Äôs what it can do for you:\nWrite type-safe pipelines with pure Python.\nExpress your code as a set of atomic and extensible units of responsibility called transformers."},
{"Title": "Picodi - Simplifying Dependency Injection in Python", "Author": "yakimka", "Content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Gloe: A lightweight lib to create readable and type-safe pipelines", "Author": "justme_sam", "Content": "Have you ever faced a moment when your code is a mess of nested classes and functions, and you have to dig through dozens of levels to understand a simple function? Gloe (pronounced like ‚Äúglow‚Äù) is a library designed to assist you organize your code into a type-safe flow, making it flat and linear. What My Project Does Here‚Äôs what it can do for you:\nWrite type-safe pipelines with pure Python.\nExpress your code as a set of atomic and extensible units of responsibility called transformers."},
{"Title": "Homoiconic Python Code", "Author": "moonbunR", "Content": "Homoiconic, what does it mean? In simple terms, homoiconic code is when code is treated as data and can be manipulated as you would data. This means the code can be changed, new functions and variables added, the code can generate new code or even examine and modify its own structure and behavior all while it is running. That‚Äôs why homoiconic languages like Lisp are so powerful. But what if we can make a homoiconic python code, where the code and the data are one and the same and can be modified in the same way? This guide does a good job in trying to explain how you would create a python version of the ‚ÄúLisp in Lisp‚Äù code which would give you access to all those homoiconic features that Lisp brags of like the macro systems, the expressiveness and flexibility, the metaprogramming etc. while still using python. What do you guys think of this?"},
{"Title": "Book Management Restful-API", "Author": "ThePawners", "Content": "What My Project Does: This project aims to provide a simple and efficient way to manage a collection of books through various API endpoints. This API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn."},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python) * **What My Project Does** A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try. * **Target Audience** This is just a toy project as a learning experience"},
{"Title": "Book Management Restful-API", "Author": "ThePawners", "Content": "What My Project Does: This project aims to provide a simple and efficient way to manage a collection of books through various API endpoints. This API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn."},
{"Title": "The best Python CLI library, arguably.", "Author": "AND_MY_HAX", "Content": "What My Project Does https://github.com/treykeown/arguably arguably makes it super simple to define complex CLIs. It uses your function signatures and docstrings to set everything up. Here's how it works:\nAdding the @arguably.command decorator to a function makes it appear on the CLI.\nIf multiple functions are decorated, they'll all be set up as subcommands. You can even set up multiple levels of subcommands."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "AndroidWorld ‚Äî Build and test AI agents on Android", "Author": "crawles89", "Content": "What it does: It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging. It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them. Target Audience: Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you‚Äôd like and test out the default agent, M3A, on it. Just give it a task like ‚ÄúShow my most recent purchases on Amazon.‚Äù You can also build your own agent."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "LinkedIn-Learning-Downloader v1.1", "Author": "YounesWinter", "Content": "With Python i created a tool that enables users to download LinkedIn Learning courses, including the often overlooked but incredibly valuable exercise files. This feature sets our project apart, offering a complete learning experience by providing both the course videos and the materials needed for practical application.\nWhat great about it and beyond other tools in the same genre concerned LinkedIn Learning Downloaders, now you can download the whole courses from a path link. this is was never possible without Python."},
{"Title": "SH1106 OLED Screen App Framework for Raspberry Pi - Now on PyPI", "Author": "danyourmaster", "Content": "What it does:\nToday, I released the first working version of my SH1106 app framework for Raspberry Pi on PyPI! The SH1106 is an affordable OLED screen, costing under $3, and it's perfect for projects of all sizes. This package enables the creation of apps for it with graphics support, state management, image conversion utilities, and custom fonts. Check it out here: SH1106 Framework on PyPI. Target audience:\nThe package is mainly aimed at hobbyists who want to create small projects using the SH1106 OLED without having to manually write a lot of the graphics code typically needed on top of standard packages. I am also developing a hardware synthesizer keyboard from scratch that utilizes this framework extensively. So far, the framework handles the massive scaling required for this project excellently in terms of both code organization and performance."},
{"Title": "Rio: WebApps in pure Python ‚Äì Thanks and Feedback wanted!", "Author": "Sn3llius", "Content": "Hey everyone, I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for! As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned! We are looking forward to your feedback, so let us hear from you! :) GitHub"},
{"Title": "SH1106 OLED Screen App Framework for Raspberry Pi - Now on PyPI", "Author": "danyourmaster", "Content": "What it does:\nToday, I released the first working version of my SH1106 app framework for Raspberry Pi on PyPI! The SH1106 is an affordable OLED screen, costing under $3, and it's perfect for projects of all sizes. This package enables the creation of apps for it with graphics support, state management, image conversion utilities, and custom fonts. Check it out here: SH1106 Framework on PyPI. Target audience:\nThe package is mainly aimed at hobbyists who want to create small projects using the SH1106 OLED without having to manually write a lot of the graphics code typically needed on top of standard packages. I am also developing a hardware synthesizer keyboard from scratch that utilizes this framework extensively. So far, the framework handles the massive scaling required for this project excellently in terms of both code organization and performance."},
{"Title": "Crowbar - Package Management without Venv", "Author": "coryalanfitz", "Content": "https://github.com/coryfitz/crowbar What it does: I'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don‚Äôt have to think about them. First: pip install crowbar-package-manager Basically you just install and run things with the crowbar command rather than pip: crowbar install package_name And then you also run things with the crowbar command rather than using \"python\" - crowbar then runs the program based on the packages in the local environment rather than having to activate your virtual environment. It's inspired by npm if you've used that with js."},
{"Title": "FastAPI Backend Template for SaaS products", "Author": "shekhuu", "Content": "Hello there, I just created a template for creating a backend for your SaaS products. What my project does: It is a FastAPI project/template for creating SaaS backends and admin dashboards. Comparison: \nOut of the box, it supports\nLicence key generation and validation.\nOAuth 2 authentication with scopes."},
{"Title": "2024 StackOverflow Survey", "Author": "monorepo", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish. Link to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "An IDE with the same step by step functionality as in Matlab", "Author": "Cerricola", "Content": "When working with Matlab I love how I can run the code step by step to debug it. Even being able to \"step in\" functions and loops. Then, I was looking to an IDE with a similar functionality for Python. Nowadays I'm using Spyder."},
{"Title": "Crowbar - Package Management without Venv", "Author": "coryalanfitz", "Content": "https://github.com/coryfitz/crowbar What it does: I'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don‚Äôt have to think about them. First: pip install crowbar-package-manager Basically you just install and run things with the crowbar command rather than pip: crowbar install package_name And then you also run things with the crowbar command rather than using \"python\" - crowbar then runs the program based on the packages in the local environment rather than having to activate your virtual environment. It's inspired by npm if you've used that with js."},
{"Title": "this.s and this.d", "Author": "VladTbk", "Content": "Recently, I found out about the this \"Easter egg\" in python3. Adding import this into a py file will print \"The Zen of Python\" by Tim Peters. Also, this has two attributes: this.s and this.d, which I guess form the actual Easter egg. this.s returns an encrypted version of \"The Zen\" and this.d well, see for yourself, maybe you'll solve the puzzle."},
{"Title": "cachebox: The fastest caching library written in Rust", "Author": "SpareRevolution1487", "Content": "What my library does You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs. One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary. Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code."},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Author": "Content_Ad_4153", "Content": "Problem Statement I recently explored SonarQube for static code analysis. While it‚Äôs a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself. Target Audience This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback! Comparison with Similar Tools There was only one similar tool in the Sonar Marketplace, but it‚Äôs no longer maintained. Project Details I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub."},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It‚Äôs a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "An IDE with the same step by step functionality as in Matlab", "Author": "Cerricola", "Content": "When working with Matlab I love how I can run the code step by step to debug it. Even being able to \"step in\" functions and loops. Then, I was looking to an IDE with a similar functionality for Python. Nowadays I'm using Spyder."},
{"Title": "I made a Mandelbrot Zoom using Python", "Author": "AbideByReason", "Content": "I made a YouTube video which previews the zoom and explains the code, which you can find here: https://youtu.be/HtNUFdh2sjg What my project does: it creates a Mandelbrot Zoom. Comparison: it uses Pillow and consists of just 2 main blocks of code: one is the main function that finds which points are in the Mandelbrot Set and the other is the main loop that applies appropriate colors to each image. It gives the option of being black and white OR in color. It works fairly well but can definitely be faster if parallelized. I'd love to hear any suggestions on how it can be improved. Target Audience: fun/toy project"},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Author": "PyDataAmsterdam", "Content": "Hey all, we will close the Call for Proposals portal this Sunday, June 2, for our PyData Amsterdam 2024 Conference which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > https://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Author": "Eastern_Reporter_834", "Content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!"},
{"Title": "DeepFusion: a highly modular Deep Learning Framework.", "Author": "atharvaaalok1", "Content": "What My Project Does: Hello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning. And Voila... I've developed a deep learning library, DeepFusion! Details: It's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code. You can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Spotify Lyrics visualizer", "Author": "Mews75", "Content": "What My Project Does Because spotify made their lyrics menu a premium only feature, I thought I'd make my own replacement for it.\nThe app connects to your spotify account, fetches the lyrics from various websites, and then syncs them automatically to what is currently playing. Basically does the exact same as the lyrics menu used to do. Target Audience Anyone who wants to see the lyrics to songs really. Comparison Most other apps that I've found are either browser only, or don't actually sync the lyrics to the song, they just show the entire lyrics at once.\nIn comparison, my app shows the lyrics line by line, synced with the song, and also has (in my opinion lol) a fairly nice looking ui.\nIt's also very easy to use for non programmers too, since you can just download an executable to use the app."},
{"Title": "sjvisualizer: a python package to animate time-series data", "Author": "PieChartPirate", "Content": "What the project does: data animation library for time-series data. Currently it supports the following chart types:\nBar races\nAnimated Pie Charts\nAnimated Line Charts\nAnimated Stacked Area Charts"},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Author": "good-guy-coder", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities. What My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI. GitHub Repository: NiimPrintX"},
{"Title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer What My Project Does: MyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience. mytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/"},
{"Title": "Spotify Lyrics visualizer", "Author": "Mews75", "Content": "What My Project Does Because spotify made their lyrics menu a premium only feature, I thought I'd make my own replacement for it.\nThe app connects to your spotify account, fetches the lyrics from various websites, and then syncs them automatically to what is currently playing. Basically does the exact same as the lyrics menu used to do. Target Audience Anyone who wants to see the lyrics to songs really. Comparison Most other apps that I've found are either browser only, or don't actually sync the lyrics to the song, they just show the entire lyrics at once.\nIn comparison, my app shows the lyrics line by line, synced with the song, and also has (in my opinion lol) a fairly nice looking ui.\nIt's also very easy to use for non programmers too, since you can just download an executable to use the app."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I created an unofficial module for the ShipEngine API", "Author": "Status_Bid_1604", "Content": "What My Project Does Simplifies the interaction with the ShipEngine API with most response and requests built as objects, which in my opinion makes interaction much easier. This is my first released package so all criticism and feedback is very welcome. Target Audience Anyone who deals with the current ShipEngine API using Python. Comparison There is an official ShipEngine API module that is created by the company but I have found it somewhat lack luster with no way to create batches or bulk shipments (and other missing functionality), this is much more suited to accomplishing that task."},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "zeroize: Securely clear secrets from memory", "Author": "radumarias", "Content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "Thank You PyConUS 2024 !!!", "Author": "ryanstephendavis", "Content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon... I've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture."},
{"Title": "I created an unofficial module for the ShipEngine API", "Author": "Status_Bid_1604", "Content": "What My Project Does Simplifies the interaction with the ShipEngine API with most response and requests built as objects, which in my opinion makes interaction much easier. This is my first released package so all criticism and feedback is very welcome. Target Audience Anyone who deals with the current ShipEngine API using Python. Comparison There is an official ShipEngine API module that is created by the company but I have found it somewhat lack luster with no way to create batches or bulk shipments (and other missing functionality), this is much more suited to accomplishing that task."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Xenharmlib - An advanced music theory library that supports microtonality", "Author": "realretooth", "Content": "Introducing Xenharmlib (Source code here) What My Project Does (taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music. Target Audience Composers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Author": "radumarias", "Content": "https://github.com/radumarias/rencrypt-python\nWhat My Project Does: A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\nTarget Audience This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet."},
{"Title": "Xenharmlib - An advanced music theory library that supports microtonality", "Author": "realretooth", "Content": "Introducing Xenharmlib (Source code here) What My Project Does (taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music. Target Audience Composers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Auto Data Analysis python packages to know", "Author": "mehul_gupta1997", "Content": "Check this video tutorial to explore different AutoEDA python packages like pandas-profiling, sweetviz, dataprep,etc which can enable automatic data analysis within minutes without any effort : https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Speed improvements in Polars over Pandas", "Author": "zzoetrop_1999", "Content": "I'm giving a talk on polars in July. It's been pretty fast for us, but I'm curious to hear some examples of improvements other people have seen. I got one process down from over three minutes to around 10 seconds.\nAlso curious whether people have switched over to using polars instead of pandas or they reserve it for specific use cases."},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Author": "eonlav", "Content": "What My Project Does Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models. Video running Phi-2 model on a MacBook Air with 8GB RAM, all CPU Target Audience Devs looking to experiment with integrating on-device AI into their software. Comparison\nJARVIS - an all API-based solution using DeepGram, OpenAI and ElevenLabs\nLocal Talking LLM - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "AI planner: AI tool for efficient event scheduling in Google Calendar.", "Author": "nginx26", "Content": "Good evening! I have created a new projectfor adding events to google calendar based on the text a user inputs. What My Project Does The project is a tool that uses large language models to understand the user's input and add events to the user's Google Calendar based on the user's input. It uses Ollama for natural language understanding and Google Calendar API for adding events to the user's calendar. How My Project Works Ollama uses Llama 3 with pre-instructions to act as a calendar event planner. The tool uses the model to generate responses to extract the event's details from the user's input inserted in the Web Interface. tool then asks the user to confirm the details extracted from the user's input and adds the event to the user's Google Calendar (example shown )"},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "Folks who know the internals: Where does operator precedence \"happen\"?", "Author": "BeerIsTheMindKiller", "Content": "Hey! Messing around with instaviz, cool library, highly recommend. You can visualize a function's bytecode as well as AST and some other stuff. i entered this: def f():\n  x = 1 + 2 - 10**2\n  return x I was expecting the AST nodes for 1 + 2 - 10**2 to be rearranged somehow, with 10**2 being moved to the left hand of the expression, because exponents get evaluated before addition/subtraction. but no! just looks like this:"},
{"Title": "Calculator without eval()", "Author": "Zorgon-589", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python. TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions. COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators! See the below link for github: https://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "Interfacing Custom USB endpoints using Python!", "Author": "shekhuu", "Content": "Hi everyone, I was building something that required me to communicate over USB to Raspberry Pi Pico using Pyusb Python. So I decided to make a blog post about it showing the concepts, process, and source code.\nCheck out the blog post here!\nCheck out the source code here!"},
{"Title": "AI planner: AI tool for efficient event scheduling in Google Calendar.", "Author": "nginx26", "Content": "Good evening! I have created a new projectfor adding events to google calendar based on the text a user inputs. What My Project Does The project is a tool that uses large language models to understand the user's input and add events to the user's Google Calendar based on the user's input. It uses Ollama for natural language understanding and Google Calendar API for adding events to the user's calendar. How My Project Works Ollama uses Llama 3 with pre-instructions to act as a calendar event planner. The tool uses the model to generate responses to extract the event's details from the user's input inserted in the Web Interface. tool then asks the user to confirm the details extracted from the user's input and adds the event to the user's Google Calendar (example shown )"},
{"Title": "PyPods: A lightweight solution to execute Python dependencies in an isolated fashion.", "Author": "Brilliant_Emphasis63", "Content": "Introducing PyPods What My Project Does A Python library designed to manage monolithic project architectures by isolating dependencies. Traditionally, monolithic architectures cluster all dependencies into one project, creating complexities and potential conflicts. PyPods offers a solution by isolating these dependencies and enabling the main project to communicate with them via remote procedure calls. This approach eliminates the need to install dependencies directly in the main project. Feel free to take a look and I am happy to receive some feedback! Target Audience"},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try."},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Mystique: Sparse data matching for Python tests", "Author": "jonocodes", "Content": "What My Project Does I made this library to help assert test responses inline while directing the comparison to be as rigid or lax as it needs to be. Motivation I write a lot of tests that assert values in complex nested dictionaries. But really I only need to check some parts in the response, not all of it. I often find myself transforming the response or maliciously extracting the important parts I need - in order to satisfy the assertions. This gets messy and can make tests hard to follow. Target Audience Anyone who writes tests. This is particularly useful if you generate fake data in your tests with something like Faker, Factory Boy, or Model Bakery."},
{"Title": "PyPods: A lightweight solution to execute Python dependencies in an isolated fashion.", "Author": "Brilliant_Emphasis63", "Content": "Introducing PyPods What My Project Does A Python library designed to manage monolithic project architectures by isolating dependencies. Traditionally, monolithic architectures cluster all dependencies into one project, creating complexities and potential conflicts. PyPods offers a solution by isolating these dependencies and enabling the main project to communicate with them via remote procedure calls. This approach eliminates the need to install dependencies directly in the main project. Feel free to take a look and I am happy to receive some feedback! Target Audience"},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Author": "neozhaoliang", "Content": "What My Project Does An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs. Target Audience RAG applications developers. Comparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies."},
{"Title": "I made a desktop chat app :)", "Author": "Reasonable-Zone-7909", "Content": "What My Project Does Hi! This is my first time doing a python project more than a few hours in size. I made a chat app which features E2E encryption using a passcode and has a multiclient architecture. All comments are welcome! Target Audience It is just a toy project for my portfolio. Comparison Compared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner. But I think that IRC already has this, so it doesn't differ much XD. Git link: https://github.com/xxzoltanxx/Balvan-Chat"},
{"Title": "pip time machine", "Author": "rejectedlesbian", "Content": "https://github.com/nevakrien/time_machine_pip this is a fairly simple project barely anything to it but I think its promising\nthe idea is to put pip in a time machine so it can not use package versions that were made after the project is made. I am doing this by proxiying pypi and cutting out the newer versions. initial tests show that pip respects the proxy and works like you would expect"},
{"Title": "I made python audioplayer with FFmpeg and Qt6", "Author": "WyseTwist", "Content": "Midnight Player - a simple python audiplayer for playing audio What My Project Does: My project is just an audio player for playing music, it can play audio from folders, supports different audio formats like Flac, Mp3 and can show some information about the track. Player uses subprocess to access ffmpeg, then it decodes the audio file into pcm format, then plays this file using sounddevice library. the use of these libraries is to ensure that the audio file does not lose quality during processing. Target Audience: This project was made to increase experience in python programming and to understand how the audio playback process works, but the project is also useful for people who are interested in learning the structure of the audio player as it is open source."},
{"Title": "I made a desktop chat app :)", "Author": "Reasonable-Zone-7909", "Content": "What My Project Does Hi! This is my first time doing a python project more than a few hours in size. I made a chat app which features E2E encryption using a passcode and has a multiclient architecture. All comments are welcome! Target Audience It is just a toy project for my portfolio. Comparison Compared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner. But I think that IRC already has this, so it doesn't differ much XD. Git link: https://github.com/xxzoltanxx/Balvan-Chat"},
{"Title": "Circler imports in Observer design pattern in Python", "Author": "ALior1", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve. At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error. I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this."},
{"Title": "Rye-Tui, a Text-based User Interface (TUI) to manage rye projects", "Author": "Zaloog1337", "Content": "Hi everyone, Ive reached a state of my current project, where I want to share it with you, and gather some feedback. This is my first time using rye and I am surprised, how Hassle-Free building a package with it went. Source Code: github\nInstallation\npython -m pip install rye-tui"},
{"Title": "Building an LLM chat application using RAG Agent", "Author": "iryna_kondr", "Content": "Motivation\nChatbots are among the most popular applications of large language models (LLMs). Often, an LLM's internal knowledge base is adequate for answering users questions. However, in those cases, the model may generate outdated, incorrect, or too generic responses when specificity is expected. These challenges can be partially addressed by supplementing the LLM with an external knowledge base and employing the retrieval-augmented generation (RAG) technique. However, if user queries are complex, it may be necessary to break the task into several sub-parts. In such cases, relying solely on the RAG technique may not be sufficient, and the use of agents may be required."},
{"Title": "How to publish a Python package with GitHub Actions using Poetry", "Author": "johnfraney", "Content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/ If you've got any tips for publishing a Python package, I'd be happy to hear those, too"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Rye-Tui, a Text-based User Interface (TUI) to manage rye projects", "Author": "Zaloog1337", "Content": "Hi everyone, Ive reached a state of my current project, where I want to share it with you, and gather some feedback. This is my first time using rye and I am surprised, how Hassle-Free building a package with it went. Source Code: github\nInstallation\npython -m pip install rye-tui"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "What changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ?", "Author": "These_Shoe3594", "Content": "What are all the changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ? There are some CVE fixes available in the latest 3.x version of werkzueg. To take the fixes as part of my code, we want to upgrade the version. When I do so, I‚Äôve faced lot of breakages. I found some on documents and release notes. But it would be easier if someone already did some changes regarding this."},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python) * **What My Project Does** A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try. * **Target Audience** This is just a toy project as a learning experience"},
{"Title": "Reforger Whitelist Py", "Author": "PyjamaZombie", "Content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually. The target audience for this is the Arma Reforger community, for which, the application is made for. Currently, to my knowledge, there is no application like this available to the Arma Reforger community. I am very open to feedback, contributions and advice as want to expand this as much as possible!"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Langchain using llama3 to build recommendation system", "Author": "yngwieHero", "Content": "Hi, Recently I played a bit with LLMs, specifcally exploring ways of running the models locally and building prompts using LangChain. As a result ended up coding a small recommendation system, powered with Llama3-7b model, which suggests topics to read on HackerNews. Wanted to share my experiences, so I wrote a small article where I described all my findings.\nHope you'll like it: https://lukaszksiezak.github.io/ScrapyToLLM/ Github repo: https://github.com/lukaszksiezak/ScrapyToLLM What the project does: It's a Python application which uses scrapy to scrape HackerNews page. Scraped articles are pipelined to redis, which is then feeding Llama3 using langchain. Prompter is configured to serve a user articles which are matching his request."},
{"Title": "AndroidWorld ‚Äî Build and test AI agents on Android", "Author": "crawles89", "Content": "What it does: It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging. It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them. Target Audience: Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you‚Äôd like and test out the default agent, M3A, on it. Just give it a task like ‚ÄúShow my most recent purchases on Amazon.‚Äù You can also build your own agent."},
{"Title": "I built a pipeline sending my wife and I SMSs twice a week with budgeting advice generated by AI", "Author": "MoodAppropriate4108", "Content": "What My Project Does:\nI built a pipeline of Dagger modules to send my wife and I SMSs twice a week with actionable financial advice generated by AI based on data from bank accounts regarding our daily spending. Details: Dagger is an open source programmable CI/CD engine. I built each step in the pipeline as a Dagger method. Dagger spins up ephemeral containers, running everything within its own container. I use GitHub Actions to trigger dagger methods that;"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I built a pipeline sending my wife and I SMSs twice a week with budgeting advice generated by AI", "Author": "MoodAppropriate4108", "Content": "What My Project Does:\nI built a pipeline of Dagger modules to send my wife and I SMSs twice a week with actionable financial advice generated by AI based on data from bank accounts regarding our daily spending. Details: Dagger is an open source programmable CI/CD engine. I built each step in the pipeline as a Dagger method. Dagger spins up ephemeral containers, running everything within its own container. I use GitHub Actions to trigger dagger methods that;"},
{"Title": "Rio: WebApps in pure Python ‚Äì Thanks and Feedback wanted!", "Author": "Sn3llius", "Content": "Hey everyone, I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for! As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned! We are looking forward to your feedback, so let us hear from you! :) GitHub"},
{"Title": "PyCon US 2024 is here!", "Author": "monorepo", "Content": "Official Event"},
{"Title": "I made a Traversible Tree in Python", "Author": "frankstan33", "Content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure. What My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times. There are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth)."},
{"Title": "We built open-source SDK for adding custom code interpreters to AI apps", "Author": "mlejva", "Content": "What My Project Does Hey everyone! I'm the CEO of the company that built an SDK that makes it easy to build custom code interpreters for AI apps. We're a company called E2B [0]. We're building and open-source [1] secure environments for running untrusted AI-generated code and AI agents. We call these environments sandboxes and they are built on top of micro VM called Firecracker [2]. We specifically decided to use Firecrackers instead of containers because of their security and ability to do snapshots. You can think of us as giving small cloud computers to LLMs. We recently created a dedicated SDK for building custom code interpreters in Python or JS/TS. We saw this need after a lot of our users have been adding code execution capabilities to their AI apps with our core SDK [3]. These use cases were often centered around AI data analysis so code interpreter-like behavior made sense"},
{"Title": "We built open-source SDK for adding custom code interpreters to AI apps", "Author": "mlejva", "Content": "What My Project Does Hey everyone! I'm the CEO of the company that built an SDK that makes it easy to build custom code interpreters for AI apps. We're a company called E2B [0]. We're building and open-source [1] secure environments for running untrusted AI-generated code and AI agents. We call these environments sandboxes and they are built on top of micro VM called Firecracker [2]. We specifically decided to use Firecrackers instead of containers because of their security and ability to do snapshots. You can think of us as giving small cloud computers to LLMs. We recently created a dedicated SDK for building custom code interpreters in Python or JS/TS. We saw this need after a lot of our users have been adding code execution capabilities to their AI apps with our core SDK [3]. These use cases were often centered around AI data analysis so code interpreter-like behavior made sense"},
{"Title": "2024 StackOverflow Survey", "Author": "monorepo", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish. Link to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python", "Author": "aoeu512", "Content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging. Programmable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement."},
{"Title": "Blat AI generates Python code to do web-scraping (code based on Scrapy framework)", "Author": "arnaupv", "Content": "Miguel Algorri and Arnau Pont V√≠lchez here, blat co-founders! Target Audience\nPeople who need to collect public data from the web (pricing, articles, reviews, leads etc). What does our Project Do?\nAt blat we aim to deliver production-ready web scraping code in minutes (written in Python, Scrapy framework).\nThis is feasible thanks to our Web Scraping AI Agent üß†. Here our CLI to interact with the Web Scraping AI Agent (github). Too good to be true?"},
{"Title": "I made a small Python script that uses NASA'S APOD API to set cool backgrounds on a Windows machine", "Author": "Potato_eating_a_dog", "Content": "https://github.com/william7491681/APOD_Wallpaper_Script\nWhat my project does\nNASA has a ton of accessible API's, one of which being the APOD (Astronomy Picture Of the Day) API. I made a script to get the last 9 pictures of the day and set them as my Windows 10 background, and then used task scheduler to have the script re-run every day at noon and whenever the computer boots up. It's fairly hard coded for my setup (specific file paths, 1920x1080 monitor, etc), but it shouldn't be too hard to change if one wanted to."},
{"Title": "I made a small Python script that uses NASA'S APOD API to set cool backgrounds on a Windows machine", "Author": "Potato_eating_a_dog", "Content": "https://github.com/william7491681/APOD_Wallpaper_Script\nWhat my project does\nNASA has a ton of accessible API's, one of which being the APOD (Astronomy Picture Of the Day) API. I made a script to get the last 9 pictures of the day and set them as my Windows 10 background, and then used task scheduler to have the script re-run every day at noon and whenever the computer boots up. It's fairly hard coded for my setup (specific file paths, 1920x1080 monitor, etc), but it shouldn't be too hard to change if one wanted to."},
{"Title": "cachebox: The fastest caching library written in Rust", "Author": "SpareRevolution1487", "Content": "What my library does You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs. One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary. Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code."},
{"Title": "try... except... finally!", "Author": "young-and-ignorant", "Content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally. from your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "JSX Syntax inside Python files. (Packed)", "Author": "RevolutionaryPen4661", "Content": "There was a JSX-style syntax preprocessor for Python called \"Packed,\" which allowed us to write JSX inside Python (*.pyx and *.py) files. It's unclear why they chose *.pyx for the file extension, as it conflicts with the naming of Cythonic file extensions (I have checked their issues). This project might have thrived with sufficient contributions and could have changed the way apps are built. However, the project is now archived on GitHub. The last commit was 5 years ago (LICENSE), and the last development commit was 9 years ago. This repository needs someone to revive it, but I don't have enough experience to take on that task. Even though I don't have enough information, we should start with Rust + Python to build a compiler (aka. template replacer) (this doesn't compile Python but replaces all JSX with a dictionary) and cleaner syntax. Integration with Django (Packed has an example too), Flask, FastAPI, Robyn etc."},
{"Title": "JSX Syntax inside Python files. (Packed)", "Author": "RevolutionaryPen4661", "Content": "There was a JSX-style syntax preprocessor for Python called \"Packed,\" which allowed us to write JSX inside Python (*.pyx and *.py) files. It's unclear why they chose *.pyx for the file extension, as it conflicts with the naming of Cythonic file extensions (I have checked their issues). This project might have thrived with sufficient contributions and could have changed the way apps are built. However, the project is now archived on GitHub. The last commit was 5 years ago (LICENSE), and the last development commit was 9 years ago. This repository needs someone to revive it, but I don't have enough experience to take on that task. Even though I don't have enough information, we should start with Rust + Python to build a compiler (aka. template replacer) (this doesn't compile Python but replaces all JSX with a dictionary) and cleaner syntax. Integration with Django (Packed has an example too), Flask, FastAPI, Robyn etc."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Durable Python - Infrastructure failures should not stop the process", "Author": "autokitteh", "Content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience. It automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns. Consider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete. import requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)"},
{"Title": "Apple Health data exploration with Atlas, Clickhouse, Vega-Altair, Quarto", "Author": "__tosh", "Content": "What My Project Does A few days ago I wrote a simple python script (\"Atlas\") that turns the Apple Health export.xml file (which is about 1 GB in my case, with about 10 years of data) into a very simple parquet file (a bit like a compressed CSV) that is also way smaller (40 MB). The parquet file has 5 columns:\ntype (e.g. \"CyclingDistance\")\nvalue (e.g. \"12.100\")"},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It‚Äôs a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Author": "PyDataAmsterdam", "Content": "Hey all, we will close the Call for Proposals portal this Sunday, June 2, for our PyData Amsterdam 2024 Conference which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > https://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It‚Äôs a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a python bot that plays minesweeper", "Author": "_dwightshrute", "Content": "Hello, I made this Minesweeper bot that I wanted to share with you all. What My Project Does - The bot takes a screenshot of the board and runs a classification algorithm to extract the contents of the board. It then analyzes the board, finds as many mines as it can, and sends clicks. If it cannot find any mines then it guesses the most probable position of a mine. Target Audience - It's a toy project for anyone interested in algorithms or problem-solving. Comparison - This is just my attempt at making a minesweeper bot. I'm sure there are many bots out there that are much more efficient than this."},
{"Title": "DeepFusion: a highly modular Deep Learning Framework.", "Author": "atharvaaalok1", "Content": "What My Project Does: Hello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning. And Voila... I've developed a deep learning library, DeepFusion! Details: It's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code. You can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion"},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "DeepFusion: a highly modular Deep Learning Framework.", "Author": "atharvaaalok1", "Content": "What My Project Does: Hello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning. And Voila... I've developed a deep learning library, DeepFusion! Details: It's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code. You can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion"},
{"Title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation", "Author": "AlSweigart", "Content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books Be sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!) For $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate"},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "Production grade AI Web apps, just using python ?", "Author": "prime_danger", "Content": "Hey guys, I have worked on building multiple ai/ml usecases and their specific backends. But now I want build interfaces for easy and quick integration. I saw a blog which used FastUI which looks quick decent but when I tried it just showed me a Json of elements on the page. Are there any other libraries I should use? ü§î"},
{"Title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer What My Project Does: MyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience. mytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/"},
{"Title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer What My Project Does: MyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience. mytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Is PyGame still alive?", "Author": "pyeri", "Content": "So it was a long time ago in the good old Python 2.x days (circa 2010 probably) that I had learned PyGame with some tutorials at my former work place. But nowadays since I mostly freelance with business apps, I never felt the need for it. But since such a game development project is on the horizon after all these years, I was wondering if PyGame can still be up for the task with Python 3.x? Or is there a better Python library available these days? I don't need any advanced gaming features of modern day VFX or anything, all I need is some basic Mario/Luigi style graphics, that's all!"},
{"Title": "Thank You PyConUS 2024 !!!", "Author": "ryanstephendavis", "Content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon... I've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture."},
{"Title": "Thank You PyConUS 2024 !!!", "Author": "ryanstephendavis", "Content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon... I've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture."},
{"Title": "musicnotes: Python module for playing musical instruments!", "Author": "must1088", "Content": "https://github.com/must108/musicnotes\nWhat My Project Does\nmusicnotes is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Track the size of your PyInstaller packages in CI", "Author": "bencherdev", "Content": "If you have ever wanted to track the size of your PyInstaller packages in CI, Bencher now supports tracking your package size: https://bencher.dev/docs/how-to/track-file-size/"},
{"Title": "A Beginner's Guide to Unit Testing with Pytest", "Author": "Stanulilic", "Content": "Hey r/python! I wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Author": "XUtYwYzz", "Content": "I saw the words 'visual effects', just give me GIFs Understandable, visit the Effects Showroom first. Then come back if you like what you see. What My Project Does TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features. Use cases:\nInvoke at terminal launch to produce an animation (ex: fetch)."},
{"Title": "I created a Python script that makes it easier to track how your baby's sleep is improving", "Author": "BX1959", "Content": "My wife and I use the Huckleberry app to track our baby's sleep periods. Although the free version of the app allows you to view a number of sleep-related metrics, I also wanted to see whether his longest nightly sleep stretches were getting longer over time. Therefore, I created a Python project to help me answer this and other questions I had about my baby's sleep.\nWhat My Project Does\nThis project reads in data from a Huckleberry .csv export (or a separate custom .csv file); analyzes its sleep information; and then produces ."},
{"Title": "Reactive programming for Python with live-cells-py", "Author": "alex-gutev", "Content": "live-cells-py (Live Cells Python) is a reactive programming library which I ported from Live Cells for Dart.\nWhat my project Does:\nYou can declare cells which are observable containers for data: import live_cells as lc\n\na = lc.mutable(0)"},
{"Title": "Speed improvements in Polars over Pandas", "Author": "zzoetrop_1999", "Content": "I'm giving a talk on polars in July. It's been pretty fast for us, but I'm curious to hear some examples of improvements other people have seen. I got one process down from over three minutes to around 10 seconds.\nAlso curious whether people have switched over to using polars instead of pandas or they reserve it for specific use cases."},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "Speed improvements in Polars over Pandas", "Author": "zzoetrop_1999", "Content": "I'm giving a talk on polars in July. It's been pretty fast for us, but I'm curious to hear some examples of improvements other people have seen. I got one process down from over three minutes to around 10 seconds.\nAlso curious whether people have switched over to using polars instead of pandas or they reserve it for specific use cases."},
{"Title": "Preferred method to run python in VS Code", "Author": "SuperMB13", "Content": "Been working on a python tool for VS Code. Curious to get peoples' opinion on how they run python files (not notebooks) within VS Code. Do you typically run files python by:\nTyping the python command into the integrated terminal\nClicking the run button at the top of the file\nPressing F5 for debugging\nPressing Ctrl+F5 for run but not debug"},
{"Title": "Interfacing Custom USB endpoints using Python!", "Author": "shekhuu", "Content": "Hi everyone, I was building something that required me to communicate over USB to Raspberry Pi Pico using Pyusb Python. So I decided to make a blog post about it showing the concepts, process, and source code.\nCheck out the blog post here!\nCheck out the source code here!"},
{"Title": "The possibility to build Android apps with python professionally is here and needs your support.", "Author": "klargstein", "Content": "You guys really need to check this. I believe new comers to python would love to tinker with the android ecosystem from the safety of python :-) Imgur: https://imgur.com/gallery/DtfwOVi https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course Edit: added imgur link."},
{"Title": "ChatGPT can talk with all my Python notebooks", "Author": "pp314159", "Content": "I'm working on an open-source framework for converting Python notebooks into web applications, it is called Mercury. Recently, I have added an option to execute notebooks with REST API. You can pass paramters in POST request body to the notebook, execute all cells and return JSON as response. I'm also running a SaaS service, Mercury Cloud where you can deploy notebooks with one-click with unique website domain. What My Project Does It makes Python notebooks extermely easy to integrate with custom ChatGPT, so GPT can execute Python notebooks and get response. It is 3-steps process:"},
{"Title": "Interfacing Custom USB endpoints using Python!", "Author": "shekhuu", "Content": "Hi everyone, I was building something that required me to communicate over USB to Raspberry Pi Pico using Pyusb Python. So I decided to make a blog post about it showing the concepts, process, and source code.\nCheck out the blog post here!\nCheck out the source code here!"},
{"Title": "Choosing between dash and react", "Author": "Berlibur", "Content": "At work I'm getting the question to build a platform that will be used to navigate all kinds of business metrics to different levels of granularity. Ideally there is also insights on their relationships, and advice on actions to take. I have experience with both Dash and React, and my feeling says to go with React (and a python backend). Mostly because I foresee this application to grow over time, and managing big Dash applications (as a dev) can get clunky. However, in my team there's no extra JavaScript (let alone React) knowledge. While there is a solid base for Python. There might be opportunities to source outside the team/company, which I'd have to make a strong case for."},
{"Title": "Framework to use for backend", "Author": "Clickyz", "Content": "Hello guys I recently decided to move from nodejs(expressjs) to python for general purposes but mostly for backend. I have couple of questions.\nWill i regret my migration to python? :)\nWhich framework you suggest for backend solo dev?\nAnd what tips are you suggesting me in general to get used to python."},
{"Title": "You should only use licensed version of python", "Author": "vikashgraja", "Content": "I‚Äôm an intern in a company and I automated some processes using python. My company‚Äôs IT wing said that as long as it is a licensed software you can use it in our company. In my mind I was like where the f I‚Äôm going to get a license for an open source software. Note : They mention that another team has been using licensed python. I thought either IT is so stupid or that team is so smart that they brought license for pycharm or anaconda (claim that it is a Python license) and fooled IT. If I am wrong then tell me where I can get that license. And I am also looking for job in data analyst."},
{"Title": "Mystique: Sparse data matching for Python tests", "Author": "jonocodes", "Content": "What My Project Does I made this library to help assert test responses inline while directing the comparison to be as rigid or lax as it needs to be. Motivation I write a lot of tests that assert values in complex nested dictionaries. But really I only need to check some parts in the response, not all of it. I often find myself transforming the response or maliciously extracting the important parts I need - in order to satisfy the assertions. This gets messy and can make tests hard to follow. Target Audience Anyone who writes tests. This is particularly useful if you generate fake data in your tests with something like Faker, Factory Boy, or Model Bakery."},
{"Title": "Mystique: Sparse data matching for Python tests", "Author": "jonocodes", "Content": "What My Project Does I made this library to help assert test responses inline while directing the comparison to be as rigid or lax as it needs to be. Motivation I write a lot of tests that assert values in complex nested dictionaries. But really I only need to check some parts in the response, not all of it. I often find myself transforming the response or maliciously extracting the important parts I need - in order to satisfy the assertions. This gets messy and can make tests hard to follow. Target Audience Anyone who writes tests. This is particularly useful if you generate fake data in your tests with something like Faker, Factory Boy, or Model Bakery."},
{"Title": "Gloe: A lightweight lib to create readable and type-safe pipelines", "Author": "justme_sam", "Content": "Have you ever faced a moment when your code is a mess of nested classes and functions, and you have to dig through dozens of levels to understand a simple function? Gloe (pronounced like ‚Äúglow‚Äù) is a library designed to assist you organize your code into a type-safe flow, making it flat and linear. What My Project Does Here‚Äôs what it can do for you:\nWrite type-safe pipelines with pure Python.\nExpress your code as a set of atomic and extensible units of responsibility called transformers."},
{"Title": "New Python-only abstractions for extracting data from apis", "Author": "Thinker_Assignment", "Content": "Hey there, you are probably familiar with REST APIs.\nWe at dlt library added a new way to get data from apis (and dlt can already load it with best practice to db or parquet). We already did some internal hackathons but we would appreciate your feedback so we can improve it further\n- Our new REST API Source is a short, declarative configuration driven way of creating sources.\n- Our new REST API Client is a collection of Python helpers used by the above source, which you can also use as a standalone, config-free, imperative high-level abstraction for building pipelines.\nYou can read more about the source here or go to our docs for the REST APIClient info\n\nPS: see you at Pycon Pittsburgh!"},
{"Title": "I made python audioplayer with FFmpeg and Qt6", "Author": "WyseTwist", "Content": "Midnight Player - a simple python audiplayer for playing audio What My Project Does: My project is just an audio player for playing music, it can play audio from folders, supports different audio formats like Flac, Mp3 and can show some information about the track. Player uses subprocess to access ffmpeg, then it decodes the audio file into pcm format, then plays this file using sounddevice library. the use of these libraries is to ensure that the audio file does not lose quality during processing. Target Audience: This project was made to increase experience in python programming and to understand how the audio playback process works, but the project is also useful for people who are interested in learning the structure of the audio player as it is open source."},
{"Title": "Dash Pip Components", "Author": "Soolsily", "Content": "What My Project Does\nHey everyone, just released 8 new pip components for plotly and dash including:\nFull Calendar Component - A Full Calendar Component for Dash\nDash Summernote - A rich text WYSIWYG Editor for Dash\nDash Emoji Mart - A Slack-like Emoji Picker for Dash\nDash Charty - A Charting Library for Dash"},
{"Title": "I made python audioplayer with FFmpeg and Qt6", "Author": "WyseTwist", "Content": "Midnight Player - a simple python audiplayer for playing audio What My Project Does: My project is just an audio player for playing music, it can play audio from folders, supports different audio formats like Flac, Mp3 and can show some information about the track. Player uses subprocess to access ffmpeg, then it decodes the audio file into pcm format, then plays this file using sounddevice library. the use of these libraries is to ensure that the audio file does not lose quality during processing. Target Audience: This project was made to increase experience in python programming and to understand how the audio playback process works, but the project is also useful for people who are interested in learning the structure of the audio player as it is open source."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Book Management Restful-API", "Author": "ThePawners", "Content": "What My Project Does: This project aims to provide a simple and efficient way to manage a collection of books through various API endpoints. This API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "How to publish a Python package with GitHub Actions using Poetry", "Author": "johnfraney", "Content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/ If you've got any tips for publishing a Python package, I'd be happy to hear those, too"},
{"Title": "How to publish a Python package with GitHub Actions using Poetry", "Author": "johnfraney", "Content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/ If you've got any tips for publishing a Python package, I'd be happy to hear those, too"},
{"Title": "Interactive Data Visualization with Python: A Showcase of Plotly Dash", "Author": "AbhishekSuryavanshee", "Content": "What My Project Does:\nI'm excited to introduce my latest project built with Python ‚Äì an interactive data visualization application using Plotly Dash. This project aims to empower users to explore and analyze datasets dynamically through interactive visualizations. By leveraging Plotly Dash's capabilities, users can interact with data in real-time, customize visualizations on the fly, and gain deeper insights with just a few clicks. Target Audience:\nThis project caters to a wide range of users, from data enthusiasts and analysts to professionals seeking to communicate insights effectively. Whether you're a data scientist exploring patterns in large datasets or a business analyst presenting findings to stakeholders, this tool is designed to streamline your workflow and enhance your data storytelling capabilities. It's suitable for both production-grade applications and educational purposes, offering a versatile platform for data visualization tasks of varying complexity."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "HS-transform, python package for hyperbolic S-transform in signal processing", "Author": "Ok_Employ_2414", "Content": "I made a python package for S-transform with Hyperbolic window (Hyperbolic S-transform or HSTransform package). This is my first time publishing a python package, so the project is still far from stable and still under beta release.\nWhat my project does: This transformation is applied to signal processing, analyzing transient changes of a signal during very short-time. Some special use case can be in power system signal, or Geophysical signal analysis, or MRI ..."},
{"Title": "Reforger Whitelist Py", "Author": "PyjamaZombie", "Content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually. The target audience for this is the Arma Reforger community, for which, the application is made for. Currently, to my knowledge, there is no application like this available to the Arma Reforger community. I am very open to feedback, contributions and advice as want to expand this as much as possible!"},
{"Title": "Reforger Whitelist Py", "Author": "PyjamaZombie", "Content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually. The target audience for this is the Arma Reforger community, for which, the application is made for. Currently, to my knowledge, there is no application like this available to the Arma Reforger community. I am very open to feedback, contributions and advice as want to expand this as much as possible!"},
{"Title": "Declarative GUI Slint v1.6 released with Design Mode (WYSIWYG) Improvements", "Author": "madnirua", "Content": "https://slint.dev/blog/slint-1.6-released Slint is a declarative GUI toolkit to build native user interfaces for desktop and embedded applications. Find more information at https://slint.dev/ or check out the source code at https://github.com/slint-ui/slint. EDIT: The Python APIs are currently in alpha. More info -- https://github.com/slint-ui/slint/tree/master/api/python"},
{"Title": "SH1106 OLED Screen App Framework for Raspberry Pi - Now on PyPI", "Author": "danyourmaster", "Content": "What it does:\nToday, I released the first working version of my SH1106 app framework for Raspberry Pi on PyPI! The SH1106 is an affordable OLED screen, costing under $3, and it's perfect for projects of all sizes. This package enables the creation of apps for it with graphics support, state management, image conversion utilities, and custom fonts. Check it out here: SH1106 Framework on PyPI. Target audience:\nThe package is mainly aimed at hobbyists who want to create small projects using the SH1106 OLED without having to manually write a lot of the graphics code typically needed on top of standard packages. I am also developing a hardware synthesizer keyboard from scratch that utilizes this framework extensively. So far, the framework handles the massive scaling required for this project excellently in terms of both code organization and performance."},
{"Title": "I made a cheatsheet for pydash", "Author": "poopatroopa3", "Content": "https://brunodantas.github.io/pydash-cheatsheet/en/\nWhat my project does: pydash is a library with great potential to make you code more Functional and simple. I made this cheatsheet a while ago to highlight some of the most useful functions of the library, since there are so many. I hope it's useful.\nTarget audience: anyone who is interested in pydash, functional programming, not reinventing the wheel."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Implementing your own pypi clone", "Author": "chione99", "Content": "Hi, Just want to know how difficult is it to manage your own pypi clone and how do you recommend to create a seperation between dev and prod systems."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Crowbar - Package Management without Venv", "Author": "coryalanfitz", "Content": "https://github.com/coryfitz/crowbar What it does: I'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don‚Äôt have to think about them. First: pip install crowbar-package-manager Basically you just install and run things with the crowbar command rather than pip: crowbar install package_name And then you also run things with the crowbar command rather than using \"python\" - crowbar then runs the program based on the packages in the local environment rather than having to activate your virtual environment. It's inspired by npm if you've used that with js."},
{"Title": "I made a Traversible Tree in Python", "Author": "frankstan33", "Content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure. What My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times. There are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth)."},
{"Title": "IconMatch - find icons and letters positions from images!", "Author": "TraditionalDistrict9", "Content": "Hey all, I am not the original creator, but found that 4yo project, and decided to revive it! What my project does: IconMatch is library allowing you to extract icons and letter positions from image or from display! There is also realtime demo on repo showcasing how it works! Target Audience: For all detecting objects from display! Comparison: I did not find other project like that - but it was my first find too! It is also not OCR! https://github.com/NativeSensors/IconMatch Have fun!"},
{"Title": "I made a Traversible Tree in Python", "Author": "frankstan33", "Content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure. What My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times. There are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth)."},
{"Title": "Manage Your Squid Proxy Server Efficiently with This Python Script", "Author": "SAV_NC", "Content": "ü¶ë Squid Proxy Manager Script Hello fellow Python enthusiasts! I've created a Python script that makes managing your Squid Proxy Server a breeze. If you're looking for an efficient and straightforward way to interact with your Squid server remotely, this script is for you. üéâ What My Project Does The Squid Proxy Manager script allows you to manage your Squid Proxy Server remotely using a simple command-line interface. Here are some of the key features:\nCheck Squid Service Status: Quickly check if your Squid service is running or not."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "An IDE with the same step by step functionality as in Matlab", "Author": "Cerricola", "Content": "When working with Matlab I love how I can run the code step by step to debug it. Even being able to \"step in\" functions and loops. Then, I was looking to an IDE with a similar functionality for Python. Nowadays I'm using Spyder."},
{"Title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python", "Author": "aoeu512", "Content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging. Programmable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement."},
{"Title": "Tutorial: Simple Pretty Maps That Will Improve Your Python Streamlit Skills", "Author": "jgloewen", "Content": "Interactive web applications for data visualization improve user engagement and understanding. These days, Streamlit is a very popular framework used to provide web applications for data science. It is a terrific programming tool to have in you Python knowledge toolbox. Here‚Äôs a fun and practical tutorial on how to create a simple interactive and dynamic Streamlit application. This application generates a beautiful and original map using the prettymaps library. Free article: HERE"},
{"Title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python", "Author": "aoeu512", "Content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging. Programmable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement."},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Author": "Content_Ad_4153", "Content": "Problem Statement I recently explored SonarQube for static code analysis. While it‚Äôs a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself. Target Audience This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback! Comparison with Similar Tools There was only one similar tool in the Sonar Marketplace, but it‚Äôs no longer maintained. Project Details I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub."},
{"Title": "modern_colorthief - Modified Median Cut Quantization algorithm in rust + python", "Author": "BasePlate_Admin", "Content": "github\ndocumentation\nWhat my project does : It gets the dominant color/color palette from given image. Target Audience: Anyone Usage modern_colorthief exposes two functions get_color and get_palette Here is how to use get_color: from modern_colorthief import get_color\n\n# Path to any image\npath = ...\n\nprint(get_color(path)) # returns tuple[int,int,int]"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "try... except... finally!", "Author": "young-and-ignorant", "Content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally. from your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "try... except... finally!", "Author": "young-and-ignorant", "Content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally. from your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Author": "Eastern_Reporter_834", "Content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!"},
{"Title": "Durable Python - Infrastructure failures should not stop the process", "Author": "autokitteh", "Content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience. It automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns. Consider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete. import requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)"},
{"Title": "Spotify Lyrics visualizer", "Author": "Mews75", "Content": "What My Project Does Because spotify made their lyrics menu a premium only feature, I thought I'd make my own replacement for it.\nThe app connects to your spotify account, fetches the lyrics from various websites, and then syncs them automatically to what is currently playing. Basically does the exact same as the lyrics menu used to do. Target Audience Anyone who wants to see the lyrics to songs really. Comparison Most other apps that I've found are either browser only, or don't actually sync the lyrics to the song, they just show the entire lyrics at once.\nIn comparison, my app shows the lyrics line by line, synced with the song, and also has (in my opinion lol) a fairly nice looking ui.\nIt's also very easy to use for non programmers too, since you can just download an executable to use the app."},
{"Title": "Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient Code", "Author": "Slow_Scene_7972", "Content": "Optimize Your Python Workflow: Proven Techniques for Crafting Production-Ready Code Link"},
{"Title": "Durable Python - Infrastructure failures should not stop the process", "Author": "autokitteh", "Content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience. It automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns. Consider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete. import requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)"},
{"Title": "Frame - a new language for programming state machines in Python", "Author": "framelanger", "Content": "Hey, I am (re)releasing a project called Frame that I've been working on to create a language and transpiler to easily create state machines/automata in Python. It also is able to generate UML documentation as well. This project is for people who are interested in programming state machines for a wide range of purposes such as game programming, workflows, MBSE modeling as well as school projects for comp sci theory. It is also useful simply for generating flow documentation. The Framepiler (Frame transpiler) is in beta at this time. It would be great to get feedback from the Python community on any gaps in key functionality or bugs."},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Author": "good-guy-coder", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities. What My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI. GitHub Repository: NiimPrintX"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I created an unofficial module for the ShipEngine API", "Author": "Status_Bid_1604", "Content": "What My Project Does Simplifies the interaction with the ShipEngine API with most response and requests built as objects, which in my opinion makes interaction much easier. This is my first released package so all criticism and feedback is very welcome. Target Audience Anyone who deals with the current ShipEngine API using Python. Comparison There is an official ShipEngine API module that is created by the company but I have found it somewhat lack luster with no way to create batches or bulk shipments (and other missing functionality), this is much more suited to accomplishing that task."},
{"Title": "Picodi - Simplifying Dependency Injection in Python", "Author": "yakimka", "Content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "zeroize: Securely clear secrets from memory", "Author": "radumarias", "Content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "SQLPage - a Python library to add string token based pagination easily", "Author": "kernelslayer", "Content": "What My Project Does - This is a Python package to easily add string token based pagination. Currently it supports SQLModel and SQLAlchemy ORMs. Recently I wanted to add pagination in one of my Python projects and in the API response, I had to return a string next page token. Now I could not find a straight-forward way of doing this in Python. All of the tutorials or blog posts I saw, there in the response the server always returned a page_number, page_size, and total_elements and then the onus was on the calling service to adjust this accordingly.  Comparison - The current packages and methods requires some changes in the app layer as well. I tried using a few but those did not satisfy the use case and were also a bit harder to implement. I could not find a easy to use option. The present ones returned integers instead of a string token"},
{"Title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation", "Author": "AlSweigart", "Content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books Be sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!) For $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate"},
{"Title": "Xenharmlib - An advanced music theory library that supports microtonality", "Author": "realretooth", "Content": "Introducing Xenharmlib (Source code here) What My Project Does (taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music. Target Audience Composers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general."},
{"Title": "Homoiconic Python Code", "Author": "moonbunR", "Content": "Homoiconic, what does it mean? In simple terms, homoiconic code is when code is treated as data and can be manipulated as you would data. This means the code can be changed, new functions and variables added, the code can generate new code or even examine and modify its own structure and behavior all while it is running. That‚Äôs why homoiconic languages like Lisp are so powerful. But what if we can make a homoiconic python code, where the code and the data are one and the same and can be modified in the same way? This guide does a good job in trying to explain how you would create a python version of the ‚ÄúLisp in Lisp‚Äù code which would give you access to all those homoiconic features that Lisp brags of like the macro systems, the expressiveness and flexibility, the metaprogramming etc. while still using python. What do you guys think of this?"},
{"Title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation", "Author": "AlSweigart", "Content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books Be sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!) For $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate"},
{"Title": "UXsim 1.3.0 released with vehicle tracking and improved vehicle routing", "Author": "Balance-", "Content": "Main Changes\nAdd GUI functions\nVehicle tracking: You can now track a specific vehicle to see their route\nDataframe viewer: Stats can be confirmed\nImprove vehicle routing functions\nAdd example of routing optimization"},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Author": "radumarias", "Content": "https://github.com/radumarias/rencrypt-python\nWhat My Project Does: A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\nTarget Audience This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "The best Python CLI library, arguably.", "Author": "AND_MY_HAX", "Content": "What My Project Does https://github.com/treykeown/arguably arguably makes it super simple to define complex CLIs. It uses your function signatures and docstrings to set everything up. Here's how it works:\nAdding the @arguably.command decorator to a function makes it appear on the CLI.\nIf multiple functions are decorated, they'll all be set up as subcommands. You can even set up multiple levels of subcommands."},
{"Title": "A Beginner's Guide to Unit Testing with Pytest", "Author": "Stanulilic", "Content": "Hey r/python! I wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Resume Screening Chatbot using RAG Fusion", "Author": "Babe_My_Name_Is_Hung", "Content": "Hi everyone! I recently finished a small side project for my graduating thesis, which is about experimenting with RAG-based frameworks in improving resume screening. What my project does: The project for the thesis is a GPT-4 Chatbot with RAG Fusion retrieval. Given a job description as input, the system retrieves the most relevant candidate profiles to perform follow-up tasks such as analysis, summarization, and decision-making, which can assist the screening process better. The revolving idea is that the similarity-based retrieval process can effectively narrow the initial large pool of applicants down to the most relevant resumes. However, this simple similarity ranking should not be used to evaluate a candidate's actual ability. Therefore, the top resumes are used to augment the GPT-4 Chatbot so it can be conditioned on these profiles and perform further downstream tasks."},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Author": "eonlav", "Content": "What My Project Does Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models. Video running Phi-2 model on a MacBook Air with 8GB RAM, all CPU Target Audience Devs looking to experiment with integrating on-device AI into their software. Comparison\nJARVIS - an all API-based solution using DeepGram, OpenAI and ElevenLabs\nLocal Talking LLM - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word."},
{"Title": "LinkedIn-Learning-Downloader v1.1", "Author": "YounesWinter", "Content": "With Python i created a tool that enables users to download LinkedIn Learning courses, including the often overlooked but incredibly valuable exercise files. This feature sets our project apart, offering a complete learning experience by providing both the course videos and the materials needed for practical application.\nWhat great about it and beyond other tools in the same genre concerned LinkedIn Learning Downloaders, now you can download the whole courses from a path link. this is was never possible without Python."},
{"Title": "Reactive programming for Python with live-cells-py", "Author": "alex-gutev", "Content": "live-cells-py (Live Cells Python) is a reactive programming library which I ported from Live Cells for Dart.\nWhat my project Does:\nYou can declare cells which are observable containers for data: import live_cells as lc\n\na = lc.mutable(0)"},
{"Title": "Calculator without eval()", "Author": "Zorgon-589", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python. TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions. COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators! See the below link for github: https://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "A Beginner's Guide to Unit Testing with Pytest", "Author": "Stanulilic", "Content": "Hey r/python! I wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link."},
{"Title": "Giving New Life to JModelica: Bringing Powerful Modelica Simulations to Python", "Author": "foadsf", "Content": "Five years ago, I posted about JModelica, a fantastic open-source tool for simulating complex systems that combined the ease of Python with the strength of Modelica. Sadly, the project went quiet, but I'm thrilled to share that, thanks to the dedication of a few folks (myself included!), JModelica is back! You can find the revived project on GitHub: https://github.com/JModelica/JModelica. What JModelica Does: JModelica provides a way to write complex simulations using the Modelica language, which is known for its ability to handle differential equations and model physical systems beautifully. The magic of JModelica lies in its Python integration‚Äîyou can solve your Modelica models and access the results directly in Python for in-depth analysis, visualization, and even optimization using libraries you already love!"},
{"Title": "FastAPI Backend Template for SaaS products", "Author": "shekhuu", "Content": "Hello there, I just created a template for creating a backend for your SaaS products. What my project does: It is a FastAPI project/template for creating SaaS backends and admin dashboards. Comparison: \nOut of the box, it supports\nLicence key generation and validation.\nOAuth 2 authentication with scopes."},
{"Title": "The possibility to build Android apps with python professionally is here and needs your support.", "Author": "klargstein", "Content": "You guys really need to check this. I believe new comers to python would love to tinker with the android ecosystem from the safety of python :-) Imgur: https://imgur.com/gallery/DtfwOVi https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course Edit: added imgur link."},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try."},
{"Title": "Reactive programming for Python with live-cells-py", "Author": "alex-gutev", "Content": "live-cells-py (Live Cells Python) is a reactive programming library which I ported from Live Cells for Dart.\nWhat my project Does:\nYou can declare cells which are observable containers for data: import live_cells as lc\n\na = lc.mutable(0)"},
{"Title": "this.s and this.d", "Author": "VladTbk", "Content": "Recently, I found out about the this \"Easter egg\" in python3. Adding import this into a py file will print \"The Zen of Python\" by Tim Peters. Also, this has two attributes: this.s and this.d, which I guess form the actual Easter egg. this.s returns an encrypted version of \"The Zen\" and this.d well, see for yourself, maybe you'll solve the puzzle."},
{"Title": "You should only use licensed version of python", "Author": "vikashgraja", "Content": "I‚Äôm an intern in a company and I automated some processes using python. My company‚Äôs IT wing said that as long as it is a licensed software you can use it in our company. In my mind I was like where the f I‚Äôm going to get a license for an open source software. Note : They mention that another team has been using licensed python. I thought either IT is so stupid or that team is so smart that they brought license for pycharm or anaconda (claim that it is a Python license) and fooled IT. If I am wrong then tell me where I can get that license. And I am also looking for job in data analyst."},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Author": "neozhaoliang", "Content": "What My Project Does An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs. Target Audience RAG applications developers. Comparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies."},
{"Title": "The possibility to build Android apps with python professionally is here and needs your support.", "Author": "klargstein", "Content": "You guys really need to check this. I believe new comers to python would love to tinker with the android ecosystem from the safety of python :-) Imgur: https://imgur.com/gallery/DtfwOVi https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course Edit: added imgur link."},
{"Title": "CLI to embed code snippets in your README, from actual (testable) code", "Author": "realazthat", "Content": "What My Project Does What My Project Does: snipinator is a CLI to embed (testable) snippets from your codebase into your README, using Jinja2 and functions provided by snipinator to assist with embedding code, shell output, etc. Please provide any feedback in the comments or GH issues. Target Audience Target Audience: Developers of {GitHub,other} projects that have a README. It works for me, it might work for you. Comparison Features:\nSupports anything Jinja2 supports."},
{"Title": "Dash Pip Components", "Author": "Soolsily", "Content": "What My Project Does\nHey everyone, just released 8 new pip components for plotly and dash including:\nFull Calendar Component - A Full Calendar Component for Dash\nDash Summernote - A rich text WYSIWYG Editor for Dash\nDash Emoji Mart - A Slack-like Emoji Picker for Dash\nDash Charty - A Charting Library for Dash"},
{"Title": "I made a Mandelbrot Zoom using Python", "Author": "AbideByReason", "Content": "I made a YouTube video which previews the zoom and explains the code, which you can find here: https://youtu.be/HtNUFdh2sjg What my project does: it creates a Mandelbrot Zoom. Comparison: it uses Pillow and consists of just 2 main blocks of code: one is the main function that finds which points are in the Mandelbrot Set and the other is the main loop that applies appropriate colors to each image. It gives the option of being black and white OR in color. It works fairly well but can definitely be faster if parallelized. I'd love to hear any suggestions on how it can be improved. Target Audience: fun/toy project"},
{"Title": "Circler imports in Observer design pattern in Python", "Author": "ALior1", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve. At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error. I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this."},
{"Title": "You should only use licensed version of python", "Author": "vikashgraja", "Content": "I‚Äôm an intern in a company and I automated some processes using python. My company‚Äôs IT wing said that as long as it is a licensed software you can use it in our company. In my mind I was like where the f I‚Äôm going to get a license for an open source software. Note : They mention that another team has been using licensed python. I thought either IT is so stupid or that team is so smart that they brought license for pycharm or anaconda (claim that it is a Python license) and fooled IT. If I am wrong then tell me where I can get that license. And I am also looking for job in data analyst."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "sjvisualizer: a python package to animate time-series data", "Author": "PieChartPirate", "Content": "What the project does: data animation library for time-series data. Currently it supports the following chart types:\nBar races\nAnimated Pie Charts\nAnimated Line Charts\nAnimated Stacked Area Charts"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Dash Pip Components", "Author": "Soolsily", "Content": "What My Project Does\nHey everyone, just released 8 new pip components for plotly and dash including:\nFull Calendar Component - A Full Calendar Component for Dash\nDash Summernote - A rich text WYSIWYG Editor for Dash\nDash Emoji Mart - A Slack-like Emoji Picker for Dash\nDash Charty - A Charting Library for Dash"},
{"Title": "AI planner: AI tool for efficient event scheduling in Google Calendar.", "Author": "nginx26", "Content": "Good evening! I have created a new projectfor adding events to google calendar based on the text a user inputs. What My Project Does The project is a tool that uses large language models to understand the user's input and add events to the user's Google Calendar based on the user's input. It uses Ollama for natural language understanding and Google Calendar API for adding events to the user's calendar. How My Project Works Ollama uses Llama 3 with pre-instructions to act as a calendar event planner. The tool uses the model to generate responses to extract the event's details from the user's input inserted in the Web Interface. tool then asks the user to confirm the details extracted from the user's input and adds the event to the user's Google Calendar (example shown )"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "map_plotter - abstracts complexity of creating intensity plots overlaid onto global map", "Author": "teamamentum", "Content": "What My Project Does\nOverlaying intensity plots onto a geographical map using cartopy/matplotlib can be complex. So we created this map_plotter package to abstract away that complexity for a common use case. Installation (opinionated use of conda to avoid cartopy dependency hell and install precompiled binaries) conda install cartopy\ngit clone git@github.com:amentumspace/map_plotter.git\ncd map_plotter\npip install ."},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python) * **What My Project Does** A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try. * **Target Audience** This is just a toy project as a learning experience"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "PyPods: A lightweight solution to execute Python dependencies in an isolated fashion.", "Author": "Brilliant_Emphasis63", "Content": "Introducing PyPods What My Project Does A Python library designed to manage monolithic project architectures by isolating dependencies. Traditionally, monolithic architectures cluster all dependencies into one project, creating complexities and potential conflicts. PyPods offers a solution by isolating these dependencies and enabling the main project to communicate with them via remote procedure calls. This approach eliminates the need to install dependencies directly in the main project. Feel free to take a look and I am happy to receive some feedback! Target Audience"},
{"Title": "AndroidWorld ‚Äî Build and test AI agents on Android", "Author": "crawles89", "Content": "What it does: It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging. It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them. Target Audience: Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you‚Äôd like and test out the default agent, M3A, on it. Just give it a task like ‚ÄúShow my most recent purchases on Amazon.‚Äù You can also build your own agent."},
{"Title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"", "Author": "AlSweigart", "Content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs I'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10) Once printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become."},
{"Title": "Auto Data Analysis python packages to know", "Author": "mehul_gupta1997", "Content": "Check this video tutorial to explore different AutoEDA python packages like pandas-profiling, sweetviz, dataprep,etc which can enable automatic data analysis within minutes without any effort : https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry"},
{"Title": "Rio: WebApps in pure Python ‚Äì Thanks and Feedback wanted!", "Author": "Sn3llius", "Content": "Hey everyone, I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for! As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned! We are looking forward to your feedback, so let us hear from you! :) GitHub"},
{"Title": "I made a desktop chat app :)", "Author": "Reasonable-Zone-7909", "Content": "What My Project Does Hi! This is my first time doing a python project more than a few hours in size. I made a chat app which features E2E encryption using a passcode and has a multiclient architecture. All comments are welcome! Target Audience It is just a toy project for my portfolio. Comparison Compared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner. But I think that IRC already has this, so it doesn't differ much XD. Git link: https://github.com/xxzoltanxx/Balvan-Chat"},
{"Title": "Folks who know the internals: Where does operator precedence \"happen\"?", "Author": "BeerIsTheMindKiller", "Content": "Hey! Messing around with instaviz, cool library, highly recommend. You can visualize a function's bytecode as well as AST and some other stuff. i entered this: def f():\n  x = 1 + 2 - 10**2\n  return x I was expecting the AST nodes for 1 + 2 - 10**2 to be rearranged somehow, with 10**2 being moved to the left hand of the expression, because exponents get evaluated before addition/subtraction. but no! just looks like this:"},
{"Title": "2024 StackOverflow Survey", "Author": "monorepo", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish. Link to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "Rye-Tui, a Text-based User Interface (TUI) to manage rye projects", "Author": "Zaloog1337", "Content": "Hi everyone, Ive reached a state of my current project, where I want to share it with you, and gather some feedback. This is my first time using rye and I am surprised, how Hassle-Free building a package with it went. Source Code: github\nInstallation\npython -m pip install rye-tui"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "cachebox: The fastest caching library written in Rust", "Author": "SpareRevolution1487", "Content": "What my library does You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs. One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary. Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "pip time machine", "Author": "rejectedlesbian", "Content": "https://github.com/nevakrien/time_machine_pip this is a fairly simple project barely anything to it but I think its promising\nthe idea is to put pip in a time machine so it can not use package versions that were made after the project is made. I am doing this by proxiying pypi and cutting out the newer versions. initial tests show that pip respects the proxy and works like you would expect"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I built a pipeline sending my wife and I SMSs twice a week with budgeting advice generated by AI", "Author": "MoodAppropriate4108", "Content": "What My Project Does:\nI built a pipeline of Dagger modules to send my wife and I SMSs twice a week with actionable financial advice generated by AI based on data from bank accounts regarding our daily spending. Details: Dagger is an open source programmable CI/CD engine. I built each step in the pipeline as a Dagger method. Dagger spins up ephemeral containers, running everything within its own container. I use GitHub Actions to trigger dagger methods that;"},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Author": "PyDataAmsterdam", "Content": "Hey all, we will close the Call for Proposals portal this Sunday, June 2, for our PyData Amsterdam 2024 Conference which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > https://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "Building an LLM chat application using RAG Agent", "Author": "iryna_kondr", "Content": "Motivation\nChatbots are among the most popular applications of large language models (LLMs). Often, an LLM's internal knowledge base is adequate for answering users questions. However, in those cases, the model may generate outdated, incorrect, or too generic responses when specificity is expected. These challenges can be partially addressed by supplementing the LLM with an external knowledge base and employing the retrieval-augmented generation (RAG) technique. However, if user queries are complex, it may be necessary to break the task into several sub-parts. In such cases, relying solely on the RAG technique may not be sufficient, and the use of agents may be required."},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "What changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ?", "Author": "These_Shoe3594", "Content": "What are all the changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ? There are some CVE fixes available in the latest 3.x version of werkzueg. To take the fixes as part of my code, we want to upgrade the version. When I do so, I‚Äôve faced lot of breakages. I found some on documents and release notes. But it would be easier if someone already did some changes regarding this."},
{"Title": "We built open-source SDK for adding custom code interpreters to AI apps", "Author": "mlejva", "Content": "What My Project Does Hey everyone! I'm the CEO of the company that built an SDK that makes it easy to build custom code interpreters for AI apps. We're a company called E2B [0]. We're building and open-source [1] secure environments for running untrusted AI-generated code and AI agents. We call these environments sandboxes and they are built on top of micro VM called Firecracker [2]. We specifically decided to use Firecrackers instead of containers because of their security and ability to do snapshots. You can think of us as giving small cloud computers to LLMs. We recently created a dedicated SDK for building custom code interpreters in Python or JS/TS. We saw this need after a lot of our users have been adding code execution capabilities to their AI apps with our core SDK [3]. These use cases were often centered around AI data analysis so code interpreter-like behavior made sense"},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "I made a small Python script that uses NASA'S APOD API to set cool backgrounds on a Windows machine", "Author": "Potato_eating_a_dog", "Content": "https://github.com/william7491681/APOD_Wallpaper_Script\nWhat my project does\nNASA has a ton of accessible API's, one of which being the APOD (Astronomy Picture Of the Day) API. I made a script to get the last 9 pictures of the day and set them as my Windows 10 background, and then used task scheduler to have the script re-run every day at noon and whenever the computer boots up. It's fairly hard coded for my setup (specific file paths, 1920x1080 monitor, etc), but it shouldn't be too hard to change if one wanted to."},
{"Title": "Langchain using llama3 to build recommendation system", "Author": "yngwieHero", "Content": "Hi, Recently I played a bit with LLMs, specifcally exploring ways of running the models locally and building prompts using LangChain. As a result ended up coding a small recommendation system, powered with Llama3-7b model, which suggests topics to read on HackerNews. Wanted to share my experiences, so I wrote a small article where I described all my findings.\nHope you'll like it: https://lukaszksiezak.github.io/ScrapyToLLM/ Github repo: https://github.com/lukaszksiezak/ScrapyToLLM What the project does: It's a Python application which uses scrapy to scrape HackerNews page. Scraped articles are pipelined to redis, which is then feeding Llama3 using langchain. Prompter is configured to serve a user articles which are matching his request."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyCon US 2024 is here!", "Author": "monorepo", "Content": "Official Event"},
{"Title": "JSX Syntax inside Python files. (Packed)", "Author": "RevolutionaryPen4661", "Content": "There was a JSX-style syntax preprocessor for Python called \"Packed,\" which allowed us to write JSX inside Python (*.pyx and *.py) files. It's unclear why they chose *.pyx for the file extension, as it conflicts with the naming of Cythonic file extensions (I have checked their issues). This project might have thrived with sufficient contributions and could have changed the way apps are built. However, the project is now archived on GitHub. The last commit was 5 years ago (LICENSE), and the last development commit was 9 years ago. This repository needs someone to revive it, but I don't have enough experience to take on that task. Even though I don't have enough information, we should start with Rust + Python to build a compiler (aka. template replacer) (this doesn't compile Python but replaces all JSX with a dictionary) and cleaner syntax. Integration with Django (Packed has an example too), Flask, FastAPI, Robyn etc."},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It‚Äôs a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Blat AI generates Python code to do web-scraping (code based on Scrapy framework)", "Author": "arnaupv", "Content": "Miguel Algorri and Arnau Pont V√≠lchez here, blat co-founders! Target Audience\nPeople who need to collect public data from the web (pricing, articles, reviews, leads etc). What does our Project Do?\nAt blat we aim to deliver production-ready web scraping code in minutes (written in Python, Scrapy framework).\nThis is feasible thanks to our Web Scraping AI Agent üß†. Here our CLI to interact with the Web Scraping AI Agent (github). Too good to be true?"},
{"Title": "DeepFusion: a highly modular Deep Learning Framework.", "Author": "atharvaaalok1", "Content": "What My Project Does: Hello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning. And Voila... I've developed a deep learning library, DeepFusion! Details: It's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code. You can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion"},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It‚Äôs a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer What My Project Does: MyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience. mytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/"},
{"Title": "Thank You PyConUS 2024 !!!", "Author": "ryanstephendavis", "Content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon... I've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture."},
{"Title": "DeepFusion: a highly modular Deep Learning Framework.", "Author": "atharvaaalok1", "Content": "What My Project Does: Hello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning. And Voila... I've developed a deep learning library, DeepFusion! Details: It's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code. You can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Apple Health data exploration with Atlas, Clickhouse, Vega-Altair, Quarto", "Author": "__tosh", "Content": "What My Project Does A few days ago I wrote a simple python script (\"Atlas\") that turns the Apple Health export.xml file (which is about 1 GB in my case, with about 10 years of data) into a very simple parquet file (a bit like a compressed CSV) that is also way smaller (40 MB). The parquet file has 5 columns:\ntype (e.g. \"CyclingDistance\")\nvalue (e.g. \"12.100\")"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer What My Project Does: MyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience. mytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/"},
{"Title": "musicnotes: Python module for playing musical instruments!", "Author": "must1088", "Content": "https://github.com/must108/musicnotes\nWhat My Project Does\nmusicnotes is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers."},
{"Title": "I made a python bot that plays minesweeper", "Author": "_dwightshrute", "Content": "Hello, I made this Minesweeper bot that I wanted to share with you all. What My Project Does - The bot takes a screenshot of the board and runs a classification algorithm to extract the contents of the board. It then analyzes the board, finds as many mines as it can, and sends clicks. If it cannot find any mines then it guesses the most probable position of a mine. Target Audience - It's a toy project for anyone interested in algorithms or problem-solving. Comparison - This is just my attempt at making a minesweeper bot. I'm sure there are many bots out there that are much more efficient than this."},
{"Title": "Speed improvements in Polars over Pandas", "Author": "zzoetrop_1999", "Content": "I'm giving a talk on polars in July. It's been pretty fast for us, but I'm curious to hear some examples of improvements other people have seen. I got one process down from over three minutes to around 10 seconds.\nAlso curious whether people have switched over to using polars instead of pandas or they reserve it for specific use cases."},
{"Title": "Thank You PyConUS 2024 !!!", "Author": "ryanstephendavis", "Content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon... I've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture."},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Author": "XUtYwYzz", "Content": "I saw the words 'visual effects', just give me GIFs Understandable, visit the Effects Showroom first. Then come back if you like what you see. What My Project Does TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features. Use cases:\nInvoke at terminal launch to produce an animation (ex: fetch)."},
{"Title": "Production grade AI Web apps, just using python ?", "Author": "prime_danger", "Content": "Hey guys, I have worked on building multiple ai/ml usecases and their specific backends. But now I want build interfaces for easy and quick integration. I saw a blog which used FastUI which looks quick decent but when I tried it just showed me a Json of elements on the page. Are there any other libraries I should use? ü§î"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Interfacing Custom USB endpoints using Python!", "Author": "shekhuu", "Content": "Hi everyone, I was building something that required me to communicate over USB to Raspberry Pi Pico using Pyusb Python. So I decided to make a blog post about it showing the concepts, process, and source code.\nCheck out the blog post here!\nCheck out the source code here!"},
{"Title": "Preferred method to run python in VS Code", "Author": "SuperMB13", "Content": "Been working on a python tool for VS Code. Curious to get peoples' opinion on how they run python files (not notebooks) within VS Code. Do you typically run files python by:\nTyping the python command into the integrated terminal\nClicking the run button at the top of the file\nPressing F5 for debugging\nPressing Ctrl+F5 for run but not debug"},
{"Title": "Is PyGame still alive?", "Author": "pyeri", "Content": "So it was a long time ago in the good old Python 2.x days (circa 2010 probably) that I had learned PyGame with some tutorials at my former work place. But nowadays since I mostly freelance with business apps, I never felt the need for it. But since such a game development project is on the horizon after all these years, I was wondering if PyGame can still be up for the task with Python 3.x? Or is there a better Python library available these days? I don't need any advanced gaming features of modern day VFX or anything, all I need is some basic Mario/Luigi style graphics, that's all!"},
{"Title": "Speed improvements in Polars over Pandas", "Author": "zzoetrop_1999", "Content": "I'm giving a talk on polars in July. It's been pretty fast for us, but I'm curious to hear some examples of improvements other people have seen. I got one process down from over three minutes to around 10 seconds.\nAlso curious whether people have switched over to using polars instead of pandas or they reserve it for specific use cases."},
{"Title": "Mystique: Sparse data matching for Python tests", "Author": "jonocodes", "Content": "What My Project Does I made this library to help assert test responses inline while directing the comparison to be as rigid or lax as it needs to be. Motivation I write a lot of tests that assert values in complex nested dictionaries. But really I only need to check some parts in the response, not all of it. I often find myself transforming the response or maliciously extracting the important parts I need - in order to satisfy the assertions. This gets messy and can make tests hard to follow. Target Audience Anyone who writes tests. This is particularly useful if you generate fake data in your tests with something like Faker, Factory Boy, or Model Bakery."},
{"Title": "Choosing between dash and react", "Author": "Berlibur", "Content": "At work I'm getting the question to build a platform that will be used to navigate all kinds of business metrics to different levels of granularity. Ideally there is also insights on their relationships, and advice on actions to take. I have experience with both Dash and React, and my feeling says to go with React (and a python backend). Mostly because I foresee this application to grow over time, and managing big Dash applications (as a dev) can get clunky. However, in my team there's no extra JavaScript (let alone React) knowledge. While there is a solid base for Python. There might be opportunities to source outside the team/company, which I'd have to make a strong case for."},
{"Title": "Track the size of your PyInstaller packages in CI", "Author": "bencherdev", "Content": "If you have ever wanted to track the size of your PyInstaller packages in CI, Bencher now supports tracking your package size: https://bencher.dev/docs/how-to/track-file-size/"},
{"Title": "Interfacing Custom USB endpoints using Python!", "Author": "shekhuu", "Content": "Hi everyone, I was building something that required me to communicate over USB to Raspberry Pi Pico using Pyusb Python. So I decided to make a blog post about it showing the concepts, process, and source code.\nCheck out the blog post here!\nCheck out the source code here!"},
{"Title": "I made python audioplayer with FFmpeg and Qt6", "Author": "WyseTwist", "Content": "Midnight Player - a simple python audiplayer for playing audio What My Project Does: My project is just an audio player for playing music, it can play audio from folders, supports different audio formats like Flac, Mp3 and can show some information about the track. Player uses subprocess to access ffmpeg, then it decodes the audio file into pcm format, then plays this file using sounddevice library. the use of these libraries is to ensure that the audio file does not lose quality during processing. Target Audience: This project was made to increase experience in python programming and to understand how the audio playback process works, but the project is also useful for people who are interested in learning the structure of the audio player as it is open source."},
{"Title": "Gloe: A lightweight lib to create readable and type-safe pipelines", "Author": "justme_sam", "Content": "Have you ever faced a moment when your code is a mess of nested classes and functions, and you have to dig through dozens of levels to understand a simple function? Gloe (pronounced like ‚Äúglow‚Äù) is a library designed to assist you organize your code into a type-safe flow, making it flat and linear. What My Project Does Here‚Äôs what it can do for you:\nWrite type-safe pipelines with pure Python.\nExpress your code as a set of atomic and extensible units of responsibility called transformers."},
{"Title": "I created a Python script that makes it easier to track how your baby's sleep is improving", "Author": "BX1959", "Content": "My wife and I use the Huckleberry app to track our baby's sleep periods. Although the free version of the app allows you to view a number of sleep-related metrics, I also wanted to see whether his longest nightly sleep stretches were getting longer over time. Therefore, I created a Python project to help me answer this and other questions I had about my baby's sleep.\nWhat My Project Does\nThis project reads in data from a Huckleberry .csv export (or a separate custom .csv file); analyzes its sleep information; and then produces ."},
{"Title": "Mystique: Sparse data matching for Python tests", "Author": "jonocodes", "Content": "What My Project Does I made this library to help assert test responses inline while directing the comparison to be as rigid or lax as it needs to be. Motivation I write a lot of tests that assert values in complex nested dictionaries. But really I only need to check some parts in the response, not all of it. I often find myself transforming the response or maliciously extracting the important parts I need - in order to satisfy the assertions. This gets messy and can make tests hard to follow. Target Audience Anyone who writes tests. This is particularly useful if you generate fake data in your tests with something like Faker, Factory Boy, or Model Bakery."},
{"Title": "How to publish a Python package with GitHub Actions using Poetry", "Author": "johnfraney", "Content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/ If you've got any tips for publishing a Python package, I'd be happy to hear those, too"},
{"Title": "Book Management Restful-API", "Author": "ThePawners", "Content": "What My Project Does: This project aims to provide a simple and efficient way to manage a collection of books through various API endpoints. This API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn."},
{"Title": "ChatGPT can talk with all my Python notebooks", "Author": "pp314159", "Content": "I'm working on an open-source framework for converting Python notebooks into web applications, it is called Mercury. Recently, I have added an option to execute notebooks with REST API. You can pass paramters in POST request body to the notebook, execute all cells and return JSON as response. I'm also running a SaaS service, Mercury Cloud where you can deploy notebooks with one-click with unique website domain. What My Project Does It makes Python notebooks extermely easy to integrate with custom ChatGPT, so GPT can execute Python notebooks and get response. It is 3-steps process:"},
{"Title": "I made python audioplayer with FFmpeg and Qt6", "Author": "WyseTwist", "Content": "Midnight Player - a simple python audiplayer for playing audio What My Project Does: My project is just an audio player for playing music, it can play audio from folders, supports different audio formats like Flac, Mp3 and can show some information about the track. Player uses subprocess to access ffmpeg, then it decodes the audio file into pcm format, then plays this file using sounddevice library. the use of these libraries is to ensure that the audio file does not lose quality during processing. Target Audience: This project was made to increase experience in python programming and to understand how the audio playback process works, but the project is also useful for people who are interested in learning the structure of the audio player as it is open source."},
{"Title": "Reforger Whitelist Py", "Author": "PyjamaZombie", "Content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually. The target audience for this is the Arma Reforger community, for which, the application is made for. Currently, to my knowledge, there is no application like this available to the Arma Reforger community. I am very open to feedback, contributions and advice as want to expand this as much as possible!"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Framework to use for backend", "Author": "Clickyz", "Content": "Hello guys I recently decided to move from nodejs(expressjs) to python for general purposes but mostly for backend. I have couple of questions.\nWill i regret my migration to python? :)\nWhich framework you suggest for backend solo dev?\nAnd what tips are you suggesting me in general to get used to python."},
{"Title": "How to publish a Python package with GitHub Actions using Poetry", "Author": "johnfraney", "Content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/ If you've got any tips for publishing a Python package, I'd be happy to hear those, too"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "SH1106 OLED Screen App Framework for Raspberry Pi - Now on PyPI", "Author": "danyourmaster", "Content": "What it does:\nToday, I released the first working version of my SH1106 app framework for Raspberry Pi on PyPI! The SH1106 is an affordable OLED screen, costing under $3, and it's perfect for projects of all sizes. This package enables the creation of apps for it with graphics support, state management, image conversion utilities, and custom fonts. Check it out here: SH1106 Framework on PyPI. Target audience:\nThe package is mainly aimed at hobbyists who want to create small projects using the SH1106 OLED without having to manually write a lot of the graphics code typically needed on top of standard packages. I am also developing a hardware synthesizer keyboard from scratch that utilizes this framework extensively. So far, the framework handles the massive scaling required for this project excellently in terms of both code organization and performance."},
{"Title": "New Python-only abstractions for extracting data from apis", "Author": "Thinker_Assignment", "Content": "Hey there, you are probably familiar with REST APIs.\nWe at dlt library added a new way to get data from apis (and dlt can already load it with best practice to db or parquet). We already did some internal hackathons but we would appreciate your feedback so we can improve it further\n- Our new REST API Source is a short, declarative configuration driven way of creating sources.\n- Our new REST API Client is a collection of Python helpers used by the above source, which you can also use as a standalone, config-free, imperative high-level abstraction for building pipelines.\nYou can read more about the source here or go to our docs for the REST APIClient info\n\nPS: see you at Pycon Pittsburgh!"},
{"Title": "Reforger Whitelist Py", "Author": "PyjamaZombie", "Content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually. The target audience for this is the Arma Reforger community, for which, the application is made for. Currently, to my knowledge, there is no application like this available to the Arma Reforger community. I am very open to feedback, contributions and advice as want to expand this as much as possible!"},
{"Title": "I made a Traversible Tree in Python", "Author": "frankstan33", "Content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure. What My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times. There are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth)."},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It‚Äôs a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "Crowbar - Package Management without Venv", "Author": "coryalanfitz", "Content": "https://github.com/coryfitz/crowbar What it does: I'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don‚Äôt have to think about them. First: pip install crowbar-package-manager Basically you just install and run things with the crowbar command rather than pip: crowbar install package_name And then you also run things with the crowbar command rather than using \"python\" - crowbar then runs the program based on the packages in the local environment rather than having to activate your virtual environment. It's inspired by npm if you've used that with js."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python", "Author": "aoeu512", "Content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging. Programmable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement."},
{"Title": "An IDE with the same step by step functionality as in Matlab", "Author": "Cerricola", "Content": "When working with Matlab I love how I can run the code step by step to debug it. Even being able to \"step in\" functions and loops. Then, I was looking to an IDE with a similar functionality for Python. Nowadays I'm using Spyder."},
{"Title": "DeepFusion: a highly modular Deep Learning Framework.", "Author": "atharvaaalok1", "Content": "What My Project Does: Hello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning. And Voila... I've developed a deep learning library, DeepFusion! Details: It's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code. You can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion"},
{"Title": "HS-transform, python package for hyperbolic S-transform in signal processing", "Author": "Ok_Employ_2414", "Content": "I made a python package for S-transform with Hyperbolic window (Hyperbolic S-transform or HSTransform package). This is my first time publishing a python package, so the project is still far from stable and still under beta release.\nWhat my project does: This transformation is applied to signal processing, analyzing transient changes of a signal during very short-time. Some special use case can be in power system signal, or Geophysical signal analysis, or MRI ..."},
{"Title": "I made a Traversible Tree in Python", "Author": "frankstan33", "Content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure. What My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times. There are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth)."},
{"Title": "Interactive Data Visualization with Python: A Showcase of Plotly Dash", "Author": "AbhishekSuryavanshee", "Content": "What My Project Does:\nI'm excited to introduce my latest project built with Python ‚Äì an interactive data visualization application using Plotly Dash. This project aims to empower users to explore and analyze datasets dynamically through interactive visualizations. By leveraging Plotly Dash's capabilities, users can interact with data in real-time, customize visualizations on the fly, and gain deeper insights with just a few clicks. Target Audience:\nThis project caters to a wide range of users, from data enthusiasts and analysts to professionals seeking to communicate insights effectively. Whether you're a data scientist exploring patterns in large datasets or a business analyst presenting findings to stakeholders, this tool is designed to streamline your workflow and enhance your data storytelling capabilities. It's suitable for both production-grade applications and educational purposes, offering a versatile platform for data visualization tasks of varying complexity."},
{"Title": "try... except... finally!", "Author": "young-and-ignorant", "Content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally. from your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer What My Project Does: MyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience. mytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/"},
{"Title": "I made a cheatsheet for pydash", "Author": "poopatroopa3", "Content": "https://brunodantas.github.io/pydash-cheatsheet/en/\nWhat my project does: pydash is a library with great potential to make you code more Functional and simple. I made this cheatsheet a while ago to highlight some of the most useful functions of the library, since there are so many. I hope it's useful.\nTarget audience: anyone who is interested in pydash, functional programming, not reinventing the wheel."},
{"Title": "Durable Python - Infrastructure failures should not stop the process", "Author": "autokitteh", "Content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience. It automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns. Consider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete. import requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)"},
{"Title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python", "Author": "aoeu512", "Content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging. Programmable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement."},
{"Title": "Spotify Lyrics visualizer", "Author": "Mews75", "Content": "What My Project Does Because spotify made their lyrics menu a premium only feature, I thought I'd make my own replacement for it.\nThe app connects to your spotify account, fetches the lyrics from various websites, and then syncs them automatically to what is currently playing. Basically does the exact same as the lyrics menu used to do. Target Audience Anyone who wants to see the lyrics to songs really. Comparison Most other apps that I've found are either browser only, or don't actually sync the lyrics to the song, they just show the entire lyrics at once.\nIn comparison, my app shows the lyrics line by line, synced with the song, and also has (in my opinion lol) a fairly nice looking ui.\nIt's also very easy to use for non programmers too, since you can just download an executable to use the app."},
{"Title": "Declarative GUI Slint v1.6 released with Design Mode (WYSIWYG) Improvements", "Author": "madnirua", "Content": "https://slint.dev/blog/slint-1.6-released Slint is a declarative GUI toolkit to build native user interfaces for desktop and embedded applications. Find more information at https://slint.dev/ or check out the source code at https://github.com/slint-ui/slint. EDIT: The Python APIs are currently in alpha. More info -- https://github.com/slint-ui/slint/tree/master/api/python"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Thank You PyConUS 2024 !!!", "Author": "ryanstephendavis", "Content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon... I've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture."},
{"Title": "IconMatch - find icons and letters positions from images!", "Author": "TraditionalDistrict9", "Content": "Hey all, I am not the original creator, but found that 4yo project, and decided to revive it! What my project does: IconMatch is library allowing you to extract icons and letter positions from image or from display! There is also realtime demo on repo showcasing how it works! Target Audience: For all detecting objects from display! Comparison: I did not find other project like that - but it was my first find too! It is also not OCR! https://github.com/NativeSensors/IconMatch Have fun!"},
{"Title": "try... except... finally!", "Author": "young-and-ignorant", "Content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally. from your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()"},
{"Title": "I created an unofficial module for the ShipEngine API", "Author": "Status_Bid_1604", "Content": "What My Project Does Simplifies the interaction with the ShipEngine API with most response and requests built as objects, which in my opinion makes interaction much easier. This is my first released package so all criticism and feedback is very welcome. Target Audience Anyone who deals with the current ShipEngine API using Python. Comparison There is an official ShipEngine API module that is created by the company but I have found it somewhat lack luster with no way to create batches or bulk shipments (and other missing functionality), this is much more suited to accomplishing that task."},
{"Title": "Implementing your own pypi clone", "Author": "chione99", "Content": "Hi, Just want to know how difficult is it to manage your own pypi clone and how do you recommend to create a seperation between dev and prod systems."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Xenharmlib - An advanced music theory library that supports microtonality", "Author": "realretooth", "Content": "Introducing Xenharmlib (Source code here) What My Project Does (taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music. Target Audience Composers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general."},
{"Title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation", "Author": "AlSweigart", "Content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books Be sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!) For $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate"},
{"Title": "Manage Your Squid Proxy Server Efficiently with This Python Script", "Author": "SAV_NC", "Content": "ü¶ë Squid Proxy Manager Script Hello fellow Python enthusiasts! I've created a Python script that makes managing your Squid Proxy Server a breeze. If you're looking for an efficient and straightforward way to interact with your Squid server remotely, this script is for you. üéâ What My Project Does The Squid Proxy Manager script allows you to manage your Squid Proxy Server remotely using a simple command-line interface. Here are some of the key features:\nCheck Squid Service Status: Quickly check if your Squid service is running or not."},
{"Title": "Tutorial: Simple Pretty Maps That Will Improve Your Python Streamlit Skills", "Author": "jgloewen", "Content": "Interactive web applications for data visualization improve user engagement and understanding. These days, Streamlit is a very popular framework used to provide web applications for data science. It is a terrific programming tool to have in you Python knowledge toolbox. Here‚Äôs a fun and practical tutorial on how to create a simple interactive and dynamic Streamlit application. This application generates a beautiful and original map using the prettymaps library. Free article: HERE"},
{"Title": "Durable Python - Infrastructure failures should not stop the process", "Author": "autokitteh", "Content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience. It automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns. Consider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete. import requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Speed improvements in Polars over Pandas", "Author": "zzoetrop_1999", "Content": "I'm giving a talk on polars in July. It's been pretty fast for us, but I'm curious to hear some examples of improvements other people have seen. I got one process down from over three minutes to around 10 seconds.\nAlso curious whether people have switched over to using polars instead of pandas or they reserve it for specific use cases."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "modern_colorthief - Modified Median Cut Quantization algorithm in rust + python", "Author": "BasePlate_Admin", "Content": "github\ndocumentation\nWhat my project does : It gets the dominant color/color palette from given image. Target Audience: Anyone Usage modern_colorthief exposes two functions get_color and get_palette Here is how to use get_color: from modern_colorthief import get_color\n\n# Path to any image\npath = ...\n\nprint(get_color(path)) # returns tuple[int,int,int]"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "AI planner: AI tool for efficient event scheduling in Google Calendar.", "Author": "nginx26", "Content": "Good evening! I have created a new projectfor adding events to google calendar based on the text a user inputs. What My Project Does The project is a tool that uses large language models to understand the user's input and add events to the user's Google Calendar based on the user's input. It uses Ollama for natural language understanding and Google Calendar API for adding events to the user's calendar. How My Project Works Ollama uses Llama 3 with pre-instructions to act as a calendar event planner. The tool uses the model to generate responses to extract the event's details from the user's input inserted in the Web Interface. tool then asks the user to confirm the details extracted from the user's input and adds the event to the user's Google Calendar (example shown )"},
{"Title": "Interfacing Custom USB endpoints using Python!", "Author": "shekhuu", "Content": "Hi everyone, I was building something that required me to communicate over USB to Raspberry Pi Pico using Pyusb Python. So I decided to make a blog post about it showing the concepts, process, and source code.\nCheck out the blog post here!\nCheck out the source code here!"},
{"Title": "A Beginner's Guide to Unit Testing with Pytest", "Author": "Stanulilic", "Content": "Hey r/python! I wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient Code", "Author": "Slow_Scene_7972", "Content": "Optimize Your Python Workflow: Proven Techniques for Crafting Production-Ready Code Link"},
{"Title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation", "Author": "AlSweigart", "Content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books Be sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!) For $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate"},
{"Title": "PyPods: A lightweight solution to execute Python dependencies in an isolated fashion.", "Author": "Brilliant_Emphasis63", "Content": "Introducing PyPods What My Project Does A Python library designed to manage monolithic project architectures by isolating dependencies. Traditionally, monolithic architectures cluster all dependencies into one project, creating complexities and potential conflicts. PyPods offers a solution by isolating these dependencies and enabling the main project to communicate with them via remote procedure calls. This approach eliminates the need to install dependencies directly in the main project. Feel free to take a look and I am happy to receive some feedback! Target Audience"},
{"Title": "Mystique: Sparse data matching for Python tests", "Author": "jonocodes", "Content": "What My Project Does I made this library to help assert test responses inline while directing the comparison to be as rigid or lax as it needs to be. Motivation I write a lot of tests that assert values in complex nested dictionaries. But really I only need to check some parts in the response, not all of it. I often find myself transforming the response or maliciously extracting the important parts I need - in order to satisfy the assertions. This gets messy and can make tests hard to follow. Target Audience Anyone who writes tests. This is particularly useful if you generate fake data in your tests with something like Faker, Factory Boy, or Model Bakery."},
{"Title": "Frame - a new language for programming state machines in Python", "Author": "framelanger", "Content": "Hey, I am (re)releasing a project called Frame that I've been working on to create a language and transpiler to easily create state machines/automata in Python. It also is able to generate UML documentation as well. This project is for people who are interested in programming state machines for a wide range of purposes such as game programming, workflows, MBSE modeling as well as school projects for comp sci theory. It is also useful simply for generating flow documentation. The Framepiler (Frame transpiler) is in beta at this time. It would be great to get feedback from the Python community on any gaps in key functionality or bugs."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Picodi - Simplifying Dependency Injection in Python", "Author": "yakimka", "Content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features"},
{"Title": "Reactive programming for Python with live-cells-py", "Author": "alex-gutev", "Content": "live-cells-py (Live Cells Python) is a reactive programming library which I ported from Live Cells for Dart.\nWhat my project Does:\nYou can declare cells which are observable containers for data: import live_cells as lc\n\na = lc.mutable(0)"},
{"Title": "I made a desktop chat app :)", "Author": "Reasonable-Zone-7909", "Content": "What My Project Does Hi! This is my first time doing a python project more than a few hours in size. I made a chat app which features E2E encryption using a passcode and has a multiclient architecture. All comments are welcome! Target Audience It is just a toy project for my portfolio. Comparison Compared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner. But I think that IRC already has this, so it doesn't differ much XD. Git link: https://github.com/xxzoltanxx/Balvan-Chat"},
{"Title": "A Beginner's Guide to Unit Testing with Pytest", "Author": "Stanulilic", "Content": "Hey r/python! I wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link."},
{"Title": "SQLPage - a Python library to add string token based pagination easily", "Author": "kernelslayer", "Content": "What My Project Does - This is a Python package to easily add string token based pagination. Currently it supports SQLModel and SQLAlchemy ORMs. Recently I wanted to add pagination in one of my Python projects and in the API response, I had to return a string next page token. Now I could not find a straight-forward way of doing this in Python. All of the tutorials or blog posts I saw, there in the response the server always returned a page_number, page_size, and total_elements and then the onus was on the calling service to adjust this accordingly.  Comparison - The current packages and methods requires some changes in the app layer as well. I tried using a few but those did not satisfy the use case and were also a bit harder to implement. I could not find a easy to use option. The present ones returned integers instead of a string token"},
{"Title": "Homoiconic Python Code", "Author": "moonbunR", "Content": "Homoiconic, what does it mean? In simple terms, homoiconic code is when code is treated as data and can be manipulated as you would data. This means the code can be changed, new functions and variables added, the code can generate new code or even examine and modify its own structure and behavior all while it is running. That‚Äôs why homoiconic languages like Lisp are so powerful. But what if we can make a homoiconic python code, where the code and the data are one and the same and can be modified in the same way? This guide does a good job in trying to explain how you would create a python version of the ‚ÄúLisp in Lisp‚Äù code which would give you access to all those homoiconic features that Lisp brags of like the macro systems, the expressiveness and flexibility, the metaprogramming etc. while still using python. What do you guys think of this?"},
{"Title": "The possibility to build Android apps with python professionally is here and needs your support.", "Author": "klargstein", "Content": "You guys really need to check this. I believe new comers to python would love to tinker with the android ecosystem from the safety of python :-) Imgur: https://imgur.com/gallery/DtfwOVi https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course Edit: added imgur link."},
{"Title": "Rye-Tui, a Text-based User Interface (TUI) to manage rye projects", "Author": "Zaloog1337", "Content": "Hi everyone, Ive reached a state of my current project, where I want to share it with you, and gather some feedback. This is my first time using rye and I am surprised, how Hassle-Free building a package with it went. Source Code: github\nInstallation\npython -m pip install rye-tui"},
{"Title": "Reactive programming for Python with live-cells-py", "Author": "alex-gutev", "Content": "live-cells-py (Live Cells Python) is a reactive programming library which I ported from Live Cells for Dart.\nWhat my project Does:\nYou can declare cells which are observable containers for data: import live_cells as lc\n\na = lc.mutable(0)"},
{"Title": "You should only use licensed version of python", "Author": "vikashgraja", "Content": "I‚Äôm an intern in a company and I automated some processes using python. My company‚Äôs IT wing said that as long as it is a licensed software you can use it in our company. In my mind I was like where the f I‚Äôm going to get a license for an open source software. Note : They mention that another team has been using licensed python. I thought either IT is so stupid or that team is so smart that they brought license for pycharm or anaconda (claim that it is a Python license) and fooled IT. If I am wrong then tell me where I can get that license. And I am also looking for job in data analyst."},
{"Title": "UXsim 1.3.0 released with vehicle tracking and improved vehicle routing", "Author": "Balance-", "Content": "Main Changes\nAdd GUI functions\nVehicle tracking: You can now track a specific vehicle to see their route\nDataframe viewer: Stats can be confirmed\nImprove vehicle routing functions\nAdd example of routing optimization"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "The possibility to build Android apps with python professionally is here and needs your support.", "Author": "klargstein", "Content": "You guys really need to check this. I believe new comers to python would love to tinker with the android ecosystem from the safety of python :-) Imgur: https://imgur.com/gallery/DtfwOVi https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course Edit: added imgur link."},
{"Title": "Dash Pip Components", "Author": "Soolsily", "Content": "What My Project Does\nHey everyone, just released 8 new pip components for plotly and dash including:\nFull Calendar Component - A Full Calendar Component for Dash\nDash Summernote - A rich text WYSIWYG Editor for Dash\nDash Emoji Mart - A Slack-like Emoji Picker for Dash\nDash Charty - A Charting Library for Dash"},
{"Title": "I built a pipeline sending my wife and I SMSs twice a week with budgeting advice generated by AI", "Author": "MoodAppropriate4108", "Content": "What My Project Does:\nI built a pipeline of Dagger modules to send my wife and I SMSs twice a week with actionable financial advice generated by AI based on data from bank accounts regarding our daily spending. Details: Dagger is an open source programmable CI/CD engine. I built each step in the pipeline as a Dagger method. Dagger spins up ephemeral containers, running everything within its own container. I use GitHub Actions to trigger dagger methods that;"},
{"Title": "You should only use licensed version of python", "Author": "vikashgraja", "Content": "I‚Äôm an intern in a company and I automated some processes using python. My company‚Äôs IT wing said that as long as it is a licensed software you can use it in our company. In my mind I was like where the f I‚Äôm going to get a license for an open source software. Note : They mention that another team has been using licensed python. I thought either IT is so stupid or that team is so smart that they brought license for pycharm or anaconda (claim that it is a Python license) and fooled IT. If I am wrong then tell me where I can get that license. And I am also looking for job in data analyst."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "We built open-source SDK for adding custom code interpreters to AI apps", "Author": "mlejva", "Content": "What My Project Does Hey everyone! I'm the CEO of the company that built an SDK that makes it easy to build custom code interpreters for AI apps. We're a company called E2B [0]. We're building and open-source [1] secure environments for running untrusted AI-generated code and AI agents. We call these environments sandboxes and they are built on top of micro VM called Firecracker [2]. We specifically decided to use Firecrackers instead of containers because of their security and ability to do snapshots. You can think of us as giving small cloud computers to LLMs. We recently created a dedicated SDK for building custom code interpreters in Python or JS/TS. We saw this need after a lot of our users have been adding code execution capabilities to their AI apps with our core SDK [3]. These use cases were often centered around AI data analysis so code interpreter-like behavior made sense"},
{"Title": "Dash Pip Components", "Author": "Soolsily", "Content": "What My Project Does\nHey everyone, just released 8 new pip components for plotly and dash including:\nFull Calendar Component - A Full Calendar Component for Dash\nDash Summernote - A rich text WYSIWYG Editor for Dash\nDash Emoji Mart - A Slack-like Emoji Picker for Dash\nDash Charty - A Charting Library for Dash"},
{"Title": "I made python audioplayer with FFmpeg and Qt6", "Author": "WyseTwist", "Content": "Midnight Player - a simple python audiplayer for playing audio What My Project Does: My project is just an audio player for playing music, it can play audio from folders, supports different audio formats like Flac, Mp3 and can show some information about the track. Player uses subprocess to access ffmpeg, then it decodes the audio file into pcm format, then plays this file using sounddevice library. the use of these libraries is to ensure that the audio file does not lose quality during processing. Target Audience: This project was made to increase experience in python programming and to understand how the audio playback process works, but the project is also useful for people who are interested in learning the structure of the audio player as it is open source."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a small Python script that uses NASA'S APOD API to set cool backgrounds on a Windows machine", "Author": "Potato_eating_a_dog", "Content": "https://github.com/william7491681/APOD_Wallpaper_Script\nWhat my project does\nNASA has a ton of accessible API's, one of which being the APOD (Astronomy Picture Of the Day) API. I made a script to get the last 9 pictures of the day and set them as my Windows 10 background, and then used task scheduler to have the script re-run every day at noon and whenever the computer boots up. It's fairly hard coded for my setup (specific file paths, 1920x1080 monitor, etc), but it shouldn't be too hard to change if one wanted to."},
{"Title": "How to publish a Python package with GitHub Actions using Poetry", "Author": "johnfraney", "Content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/ If you've got any tips for publishing a Python package, I'd be happy to hear those, too"},
{"Title": "JSX Syntax inside Python files. (Packed)", "Author": "RevolutionaryPen4661", "Content": "There was a JSX-style syntax preprocessor for Python called \"Packed,\" which allowed us to write JSX inside Python (*.pyx and *.py) files. It's unclear why they chose *.pyx for the file extension, as it conflicts with the naming of Cythonic file extensions (I have checked their issues). This project might have thrived with sufficient contributions and could have changed the way apps are built. However, the project is now archived on GitHub. The last commit was 5 years ago (LICENSE), and the last development commit was 9 years ago. This repository needs someone to revive it, but I don't have enough experience to take on that task. Even though I don't have enough information, we should start with Rust + Python to build a compiler (aka. template replacer) (this doesn't compile Python but replaces all JSX with a dictionary) and cleaner syntax. Integration with Django (Packed has an example too), Flask, FastAPI, Robyn etc."},
{"Title": "Reforger Whitelist Py", "Author": "PyjamaZombie", "Content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually. The target audience for this is the Arma Reforger community, for which, the application is made for. Currently, to my knowledge, there is no application like this available to the Arma Reforger community. I am very open to feedback, contributions and advice as want to expand this as much as possible!"},
{"Title": "The best Python CLI library, arguably.", "Author": "AND_MY_HAX", "Content": "What My Project Does https://github.com/treykeown/arguably arguably makes it super simple to define complex CLIs. It uses your function signatures and docstrings to set everything up. Here's how it works:\nAdding the @arguably.command decorator to a function makes it appear on the CLI.\nIf multiple functions are decorated, they'll all be set up as subcommands. You can even set up multiple levels of subcommands."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "LinkedIn-Learning-Downloader v1.1", "Author": "YounesWinter", "Content": "With Python i created a tool that enables users to download LinkedIn Learning courses, including the often overlooked but incredibly valuable exercise files. This feature sets our project apart, offering a complete learning experience by providing both the course videos and the materials needed for practical application.\nWhat great about it and beyond other tools in the same genre concerned LinkedIn Learning Downloaders, now you can download the whole courses from a path link. this is was never possible without Python."},
{"Title": "Resume Screening Chatbot using RAG Fusion", "Author": "Babe_My_Name_Is_Hung", "Content": "Hi everyone! I recently finished a small side project for my graduating thesis, which is about experimenting with RAG-based frameworks in improving resume screening. What my project does: The project for the thesis is a GPT-4 Chatbot with RAG Fusion retrieval. Given a job description as input, the system retrieves the most relevant candidate profiles to perform follow-up tasks such as analysis, summarization, and decision-making, which can assist the screening process better. The revolving idea is that the similarity-based retrieval process can effectively narrow the initial large pool of applicants down to the most relevant resumes. However, this simple similarity ranking should not be used to evaluate a candidate's actual ability. Therefore, the top resumes are used to augment the GPT-4 Chatbot so it can be conditioned on these profiles and perform further downstream tasks."},
{"Title": "I made a Traversible Tree in Python", "Author": "frankstan33", "Content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure. What My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times. There are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth)."},
{"Title": "FastAPI Backend Template for SaaS products", "Author": "shekhuu", "Content": "Hello there, I just created a template for creating a backend for your SaaS products. What my project does: It is a FastAPI project/template for creating SaaS backends and admin dashboards. Comparison: \nOut of the box, it supports\nLicence key generation and validation.\nOAuth 2 authentication with scopes."},
{"Title": "Giving New Life to JModelica: Bringing Powerful Modelica Simulations to Python", "Author": "foadsf", "Content": "Five years ago, I posted about JModelica, a fantastic open-source tool for simulating complex systems that combined the ease of Python with the strength of Modelica. Sadly, the project went quiet, but I'm thrilled to share that, thanks to the dedication of a few folks (myself included!), JModelica is back! You can find the revived project on GitHub: https://github.com/JModelica/JModelica. What JModelica Does: JModelica provides a way to write complex simulations using the Modelica language, which is known for its ability to handle differential equations and model physical systems beautifully. The magic of JModelica lies in its Python integration‚Äîyou can solve your Modelica models and access the results directly in Python for in-depth analysis, visualization, and even optimization using libraries you already love!"},
{"Title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python", "Author": "aoeu512", "Content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging. Programmable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement."},
{"Title": "this.s and this.d", "Author": "VladTbk", "Content": "Recently, I found out about the this \"Easter egg\" in python3. Adding import this into a py file will print \"The Zen of Python\" by Tim Peters. Also, this has two attributes: this.s and this.d, which I guess form the actual Easter egg. this.s returns an encrypted version of \"The Zen\" and this.d well, see for yourself, maybe you'll solve the puzzle."},
{"Title": "try... except... finally!", "Author": "young-and-ignorant", "Content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally. from your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()"},
{"Title": "I made a Mandelbrot Zoom using Python", "Author": "AbideByReason", "Content": "I made a YouTube video which previews the zoom and explains the code, which you can find here: https://youtu.be/HtNUFdh2sjg What my project does: it creates a Mandelbrot Zoom. Comparison: it uses Pillow and consists of just 2 main blocks of code: one is the main function that finds which points are in the Mandelbrot Set and the other is the main loop that applies appropriate colors to each image. It gives the option of being black and white OR in color. It works fairly well but can definitely be faster if parallelized. I'd love to hear any suggestions on how it can be improved. Target Audience: fun/toy project"},
{"Title": "Durable Python - Infrastructure failures should not stop the process", "Author": "autokitteh", "Content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience. It automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns. Consider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete. import requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)"},
{"Title": "CLI to embed code snippets in your README, from actual (testable) code", "Author": "realazthat", "Content": "What My Project Does What My Project Does: snipinator is a CLI to embed (testable) snippets from your codebase into your README, using Jinja2 and functions provided by snipinator to assist with embedding code, shell output, etc. Please provide any feedback in the comments or GH issues. Target Audience Target Audience: Developers of {GitHub,other} projects that have a README. It works for me, it might work for you. Comparison Features:\nSupports anything Jinja2 supports."},
{"Title": "sjvisualizer: a python package to animate time-series data", "Author": "PieChartPirate", "Content": "What the project does: data animation library for time-series data. Currently it supports the following chart types:\nBar races\nAnimated Pie Charts\nAnimated Line Charts\nAnimated Stacked Area Charts"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "map_plotter - abstracts complexity of creating intensity plots overlaid onto global map", "Author": "teamamentum", "Content": "What My Project Does\nOverlaying intensity plots onto a geographical map using cartopy/matplotlib can be complex. So we created this map_plotter package to abstract away that complexity for a common use case. Installation (opinionated use of conda to avoid cartopy dependency hell and install precompiled binaries) conda install cartopy\ngit clone git@github.com:amentumspace/map_plotter.git\ncd map_plotter\npip install ."},
{"Title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation", "Author": "AlSweigart", "Content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books Be sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!) For $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"", "Author": "AlSweigart", "Content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs I'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10) Once printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become."},
{"Title": "Auto Data Analysis python packages to know", "Author": "mehul_gupta1997", "Content": "Check this video tutorial to explore different AutoEDA python packages like pandas-profiling, sweetviz, dataprep,etc which can enable automatic data analysis within minutes without any effort : https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry"},
{"Title": "A Beginner's Guide to Unit Testing with Pytest", "Author": "Stanulilic", "Content": "Hey r/python! I wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link."},
{"Title": "Folks who know the internals: Where does operator precedence \"happen\"?", "Author": "BeerIsTheMindKiller", "Content": "Hey! Messing around with instaviz, cool library, highly recommend. You can visualize a function's bytecode as well as AST and some other stuff. i entered this: def f():\n  x = 1 + 2 - 10**2\n  return x I was expecting the AST nodes for 1 + 2 - 10**2 to be rearranged somehow, with 10**2 being moved to the left hand of the expression, because exponents get evaluated before addition/subtraction. but no! just looks like this:"},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It‚Äôs a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It‚Äôs a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "Reactive programming for Python with live-cells-py", "Author": "alex-gutev", "Content": "live-cells-py (Live Cells Python) is a reactive programming library which I ported from Live Cells for Dart.\nWhat my project Does:\nYou can declare cells which are observable containers for data: import live_cells as lc\n\na = lc.mutable(0)"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "DeepFusion: a highly modular Deep Learning Framework.", "Author": "atharvaaalok1", "Content": "What My Project Does: Hello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning. And Voila... I've developed a deep learning library, DeepFusion! Details: It's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code. You can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion"},
{"Title": "DeepFusion: a highly modular Deep Learning Framework.", "Author": "atharvaaalok1", "Content": "What My Project Does: Hello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning. And Voila... I've developed a deep learning library, DeepFusion! Details: It's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code. You can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion"},
{"Title": "The possibility to build Android apps with python professionally is here and needs your support.", "Author": "klargstein", "Content": "You guys really need to check this. I believe new comers to python would love to tinker with the android ecosystem from the safety of python :-) Imgur: https://imgur.com/gallery/DtfwOVi https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course Edit: added imgur link."},
{"Title": "pip time machine", "Author": "rejectedlesbian", "Content": "https://github.com/nevakrien/time_machine_pip this is a fairly simple project barely anything to it but I think its promising\nthe idea is to put pip in a time machine so it can not use package versions that were made after the project is made. I am doing this by proxiying pypi and cutting out the newer versions. initial tests show that pip respects the proxy and works like you would expect"},
{"Title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer What My Project Does: MyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience. mytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/"},
{"Title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer What My Project Does: MyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience. mytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/"},
{"Title": "You should only use licensed version of python", "Author": "vikashgraja", "Content": "I‚Äôm an intern in a company and I automated some processes using python. My company‚Äôs IT wing said that as long as it is a licensed software you can use it in our company. In my mind I was like where the f I‚Äôm going to get a license for an open source software. Note : They mention that another team has been using licensed python. I thought either IT is so stupid or that team is so smart that they brought license for pycharm or anaconda (claim that it is a Python license) and fooled IT. If I am wrong then tell me where I can get that license. And I am also looking for job in data analyst."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Building an LLM chat application using RAG Agent", "Author": "iryna_kondr", "Content": "Motivation\nChatbots are among the most popular applications of large language models (LLMs). Often, an LLM's internal knowledge base is adequate for answering users questions. However, in those cases, the model may generate outdated, incorrect, or too generic responses when specificity is expected. These challenges can be partially addressed by supplementing the LLM with an external knowledge base and employing the retrieval-augmented generation (RAG) technique. However, if user queries are complex, it may be necessary to break the task into several sub-parts. In such cases, relying solely on the RAG technique may not be sufficient, and the use of agents may be required."},
{"Title": "Thank You PyConUS 2024 !!!", "Author": "ryanstephendavis", "Content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon... I've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture."},
{"Title": "Thank You PyConUS 2024 !!!", "Author": "ryanstephendavis", "Content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon... I've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture."},
{"Title": "Dash Pip Components", "Author": "Soolsily", "Content": "What My Project Does\nHey everyone, just released 8 new pip components for plotly and dash including:\nFull Calendar Component - A Full Calendar Component for Dash\nDash Summernote - A rich text WYSIWYG Editor for Dash\nDash Emoji Mart - A Slack-like Emoji Picker for Dash\nDash Charty - A Charting Library for Dash"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "musicnotes: Python module for playing musical instruments!", "Author": "must1088", "Content": "https://github.com/must108/musicnotes\nWhat My Project Does\nmusicnotes is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "What changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ?", "Author": "These_Shoe3594", "Content": "What are all the changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ? There are some CVE fixes available in the latest 3.x version of werkzueg. To take the fixes as part of my code, we want to upgrade the version. When I do so, I‚Äôve faced lot of breakages. I found some on documents and release notes. But it would be easier if someone already did some changes regarding this."},
{"Title": "Speed improvements in Polars over Pandas", "Author": "zzoetrop_1999", "Content": "I'm giving a talk on polars in July. It's been pretty fast for us, but I'm curious to hear some examples of improvements other people have seen. I got one process down from over three minutes to around 10 seconds.\nAlso curious whether people have switched over to using polars instead of pandas or they reserve it for specific use cases."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Speed improvements in Polars over Pandas", "Author": "zzoetrop_1999", "Content": "I'm giving a talk on polars in July. It's been pretty fast for us, but I'm curious to hear some examples of improvements other people have seen. I got one process down from over three minutes to around 10 seconds.\nAlso curious whether people have switched over to using polars instead of pandas or they reserve it for specific use cases."},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Author": "XUtYwYzz", "Content": "I saw the words 'visual effects', just give me GIFs Understandable, visit the Effects Showroom first. Then come back if you like what you see. What My Project Does TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features. Use cases:\nInvoke at terminal launch to produce an animation (ex: fetch)."},
{"Title": "Langchain using llama3 to build recommendation system", "Author": "yngwieHero", "Content": "Hi, Recently I played a bit with LLMs, specifcally exploring ways of running the models locally and building prompts using LangChain. As a result ended up coding a small recommendation system, powered with Llama3-7b model, which suggests topics to read on HackerNews. Wanted to share my experiences, so I wrote a small article where I described all my findings.\nHope you'll like it: https://lukaszksiezak.github.io/ScrapyToLLM/ Github repo: https://github.com/lukaszksiezak/ScrapyToLLM What the project does: It's a Python application which uses scrapy to scrape HackerNews page. Scraped articles are pipelined to redis, which is then feeding Llama3 using langchain. Prompter is configured to serve a user articles which are matching his request."},
{"Title": "Interfacing Custom USB endpoints using Python!", "Author": "shekhuu", "Content": "Hi everyone, I was building something that required me to communicate over USB to Raspberry Pi Pico using Pyusb Python. So I decided to make a blog post about it showing the concepts, process, and source code.\nCheck out the blog post here!\nCheck out the source code here!"},
{"Title": "Interfacing Custom USB endpoints using Python!", "Author": "shekhuu", "Content": "Hi everyone, I was building something that required me to communicate over USB to Raspberry Pi Pico using Pyusb Python. So I decided to make a blog post about it showing the concepts, process, and source code.\nCheck out the blog post here!\nCheck out the source code here!"},
{"Title": "Preferred method to run python in VS Code", "Author": "SuperMB13", "Content": "Been working on a python tool for VS Code. Curious to get peoples' opinion on how they run python files (not notebooks) within VS Code. Do you typically run files python by:\nTyping the python command into the integrated terminal\nClicking the run button at the top of the file\nPressing F5 for debugging\nPressing Ctrl+F5 for run but not debug"},
{"Title": "PyCon US 2024 is here!", "Author": "monorepo", "Content": "Official Event"},
{"Title": "Mystique: Sparse data matching for Python tests", "Author": "jonocodes", "Content": "What My Project Does I made this library to help assert test responses inline while directing the comparison to be as rigid or lax as it needs to be. Motivation I write a lot of tests that assert values in complex nested dictionaries. But really I only need to check some parts in the response, not all of it. I often find myself transforming the response or maliciously extracting the important parts I need - in order to satisfy the assertions. This gets messy and can make tests hard to follow. Target Audience Anyone who writes tests. This is particularly useful if you generate fake data in your tests with something like Faker, Factory Boy, or Model Bakery."},
{"Title": "Choosing between dash and react", "Author": "Berlibur", "Content": "At work I'm getting the question to build a platform that will be used to navigate all kinds of business metrics to different levels of granularity. Ideally there is also insights on their relationships, and advice on actions to take. I have experience with both Dash and React, and my feeling says to go with React (and a python backend). Mostly because I foresee this application to grow over time, and managing big Dash applications (as a dev) can get clunky. However, in my team there's no extra JavaScript (let alone React) knowledge. While there is a solid base for Python. There might be opportunities to source outside the team/company, which I'd have to make a strong case for."},
{"Title": "Mystique: Sparse data matching for Python tests", "Author": "jonocodes", "Content": "What My Project Does I made this library to help assert test responses inline while directing the comparison to be as rigid or lax as it needs to be. Motivation I write a lot of tests that assert values in complex nested dictionaries. But really I only need to check some parts in the response, not all of it. I often find myself transforming the response or maliciously extracting the important parts I need - in order to satisfy the assertions. This gets messy and can make tests hard to follow. Target Audience Anyone who writes tests. This is particularly useful if you generate fake data in your tests with something like Faker, Factory Boy, or Model Bakery."},
{"Title": "Blat AI generates Python code to do web-scraping (code based on Scrapy framework)", "Author": "arnaupv", "Content": "Miguel Algorri and Arnau Pont V√≠lchez here, blat co-founders! Target Audience\nPeople who need to collect public data from the web (pricing, articles, reviews, leads etc). What does our Project Do?\nAt blat we aim to deliver production-ready web scraping code in minutes (written in Python, Scrapy framework).\nThis is feasible thanks to our Web Scraping AI Agent üß†. Here our CLI to interact with the Web Scraping AI Agent (github). Too good to be true?"},
{"Title": "I made python audioplayer with FFmpeg and Qt6", "Author": "WyseTwist", "Content": "Midnight Player - a simple python audiplayer for playing audio What My Project Does: My project is just an audio player for playing music, it can play audio from folders, supports different audio formats like Flac, Mp3 and can show some information about the track. Player uses subprocess to access ffmpeg, then it decodes the audio file into pcm format, then plays this file using sounddevice library. the use of these libraries is to ensure that the audio file does not lose quality during processing. Target Audience: This project was made to increase experience in python programming and to understand how the audio playback process works, but the project is also useful for people who are interested in learning the structure of the audio player as it is open source."},
{"Title": "I made python audioplayer with FFmpeg and Qt6", "Author": "WyseTwist", "Content": "Midnight Player - a simple python audiplayer for playing audio What My Project Does: My project is just an audio player for playing music, it can play audio from folders, supports different audio formats like Flac, Mp3 and can show some information about the track. Player uses subprocess to access ffmpeg, then it decodes the audio file into pcm format, then plays this file using sounddevice library. the use of these libraries is to ensure that the audio file does not lose quality during processing. Target Audience: This project was made to increase experience in python programming and to understand how the audio playback process works, but the project is also useful for people who are interested in learning the structure of the audio player as it is open source."},
{"Title": "Gloe: A lightweight lib to create readable and type-safe pipelines", "Author": "justme_sam", "Content": "Have you ever faced a moment when your code is a mess of nested classes and functions, and you have to dig through dozens of levels to understand a simple function? Gloe (pronounced like ‚Äúglow‚Äù) is a library designed to assist you organize your code into a type-safe flow, making it flat and linear. What My Project Does Here‚Äôs what it can do for you:\nWrite type-safe pipelines with pure Python.\nExpress your code as a set of atomic and extensible units of responsibility called transformers."},
{"Title": "How to publish a Python package with GitHub Actions using Poetry", "Author": "johnfraney", "Content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/ If you've got any tips for publishing a Python package, I'd be happy to hear those, too"},
{"Title": "How to publish a Python package with GitHub Actions using Poetry", "Author": "johnfraney", "Content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/ If you've got any tips for publishing a Python package, I'd be happy to hear those, too"},
{"Title": "Book Management Restful-API", "Author": "ThePawners", "Content": "What My Project Does: This project aims to provide a simple and efficient way to manage a collection of books through various API endpoints. This API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn."},
{"Title": "Reforger Whitelist Py", "Author": "PyjamaZombie", "Content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually. The target audience for this is the Arma Reforger community, for which, the application is made for. Currently, to my knowledge, there is no application like this available to the Arma Reforger community. I am very open to feedback, contributions and advice as want to expand this as much as possible!"},
{"Title": "Reforger Whitelist Py", "Author": "PyjamaZombie", "Content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually. The target audience for this is the Arma Reforger community, for which, the application is made for. Currently, to my knowledge, there is no application like this available to the Arma Reforger community. I am very open to feedback, contributions and advice as want to expand this as much as possible!"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Reviewing Dataframe Changes? Looking for Your Preferred Methods!", "Author": "rageagainistjg", "Content": "After playing around with a dataframe‚Äîapplying filters or other transformations‚ÄîI'm curious about your methods for reviewing the changes. In VS Code, the variable explorer is quite handy for a quick look at the modified dataframe. Alternatively, when working in a Jupyter notebook within VS Code, exporting the data to an Excel file provides a detailed view and allows for an easy deep dive into the results. What are your preferred practices for ensuring your data adjustments are precisely what you intended?"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Traversible Tree in Python", "Author": "frankstan33", "Content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure. What My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times. There are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth)."},
{"Title": "SH1106 OLED Screen App Framework for Raspberry Pi - Now on PyPI", "Author": "danyourmaster", "Content": "What it does:\nToday, I released the first working version of my SH1106 app framework for Raspberry Pi on PyPI! The SH1106 is an affordable OLED screen, costing under $3, and it's perfect for projects of all sizes. This package enables the creation of apps for it with graphics support, state management, image conversion utilities, and custom fonts. Check it out here: SH1106 Framework on PyPI. Target audience:\nThe package is mainly aimed at hobbyists who want to create small projects using the SH1106 OLED without having to manually write a lot of the graphics code typically needed on top of standard packages. I am also developing a hardware synthesizer keyboard from scratch that utilizes this framework extensively. So far, the framework handles the massive scaling required for this project excellently in terms of both code organization and performance."},
{"Title": "I made a Traversible Tree in Python", "Author": "frankstan33", "Content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure. What My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times. There are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth)."},
{"Title": "Library for automatic Cython 3.0 code annotations generation.", "Author": "Cool-Nefariousness76", "Content": "Hi everybody, over the last year I've been developing a library that adds some Cython 3.0 annotations to existing python code. What My Project Does: For example if it sees a for i in range(): in a function it recognizes i as an integer and adds a i = cython.declare(cython.int)line at the beginning of the function. It actually uses the built-in ast module under the hood for parsing, I found it a super useful library! Target Audience: It is a side project I made mainly for fun. I don't know if it can be of interest to anybody, or if it could have some potential utility."},
{"Title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python", "Author": "aoeu512", "Content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging. Programmable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement."},
{"Title": "Crowbar - Package Management without Venv", "Author": "coryalanfitz", "Content": "https://github.com/coryfitz/crowbar What it does: I'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don‚Äôt have to think about them. First: pip install crowbar-package-manager Basically you just install and run things with the crowbar command rather than pip: crowbar install package_name And then you also run things with the crowbar command rather than using \"python\" - crowbar then runs the program based on the packages in the local environment rather than having to activate your virtual environment. It's inspired by npm if you've used that with js."},
{"Title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python", "Author": "aoeu512", "Content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging. Programmable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement."},
{"Title": "APScheduler vs Schedule package", "Author": "kostakos14", "Content": "Hey folks, looking to use one library to implement some background scheduling logic on my application. I find in Google search APScheduler to be frequently mentioned, but I can see the Schedule package has more GH stars. Was curious if anybody has used one of them, and which one would you recommend based on your own experience."},
{"Title": "try... except... finally!", "Author": "young-and-ignorant", "Content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally. from your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()"},
{"Title": "An IDE with the same step by step functionality as in Matlab", "Author": "Cerricola", "Content": "When working with Matlab I love how I can run the code step by step to debug it. Even being able to \"step in\" functions and loops. Then, I was looking to an IDE with a similar functionality for Python. Nowadays I'm using Spyder."},
{"Title": "try... except... finally!", "Author": "young-and-ignorant", "Content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally. from your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()"},
{"Title": "Durable Python - Infrastructure failures should not stop the process", "Author": "autokitteh", "Content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience. It automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns. Consider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete. import requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Introducing Notolog: Python Markdown Editor built with PySide6", "Author": "devotaku", "Content": "Excited to share my personal open-source project: Notolog - Python Markdown Editor (MIT License). The main motivation for developing another markdown editor was my passion for learning new things and enhancing my development skills in Python. I developed it in my spare time over a few months, despite having no prior experience in creating full-scale Python applications. What My Project Does ‚àó Multiplatform ‚àó Markdown async syntax highlighting created by me ‚àó Several pre-installed color themes ‚àó Supports English and 17 other languages right out of the box ‚àó Integration with OpenAI API for AI-assisted features"},
{"Title": "Durable Python - Infrastructure failures should not stop the process", "Author": "autokitteh", "Content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience. It automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns. Consider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete. import requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Spotify Lyrics visualizer", "Author": "Mews75", "Content": "What My Project Does Because spotify made their lyrics menu a premium only feature, I thought I'd make my own replacement for it.\nThe app connects to your spotify account, fetches the lyrics from various websites, and then syncs them automatically to what is currently playing. Basically does the exact same as the lyrics menu used to do. Target Audience Anyone who wants to see the lyrics to songs really. Comparison Most other apps that I've found are either browser only, or don't actually sync the lyrics to the song, they just show the entire lyrics at once.\nIn comparison, my app shows the lyrics line by line, synced with the song, and also has (in my opinion lol) a fairly nice looking ui.\nIt's also very easy to use for non programmers too, since you can just download an executable to use the app."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I've developed a library for send metrics to zabbix asynchronously", "Author": "Royal_Section4889", "Content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this. Tests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async What My Project Does Send zabbix sender messages using asyncio tasks. Target Audience SysAdmins who use Zabbix to monitor a large number of metrics. Comparison Instead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix"},
{"Title": "I created an unofficial module for the ShipEngine API", "Author": "Status_Bid_1604", "Content": "What My Project Does Simplifies the interaction with the ShipEngine API with most response and requests built as objects, which in my opinion makes interaction much easier. This is my first released package so all criticism and feedback is very welcome. Target Audience Anyone who deals with the current ShipEngine API using Python. Comparison There is an official ShipEngine API module that is created by the company but I have found it somewhat lack luster with no way to create batches or bulk shipments (and other missing functionality), this is much more suited to accomplishing that task."},
{"Title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation", "Author": "AlSweigart", "Content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books Be sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!) For $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate"},
{"Title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation", "Author": "AlSweigart", "Content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books Be sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!) For $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate"},
{"Title": "I made a Python text to speech library - Pyt2s", "Author": "asksumanth", "Content": "What my project does: It supports services like IBM Watson, Acapela and Stream labs' demo websites to convert your text to speech. Target audience: It's a toy project and would not recommend you to use in Production. Comparison: It's wayyyyy easy to use. Just pip install and use in your project. No extra setup required like other libraries. Also supports various languages and voices and accents. Check docs for more. Here is the link to repository. Please go do check it out and star it if it's helpful to you guys. Thank you. I made this library taking inspiration from this php tts library by chrisjp."},
{"Title": "Xenharmlib - An advanced music theory library that supports microtonality", "Author": "realretooth", "Content": "Introducing Xenharmlib (Source code here) What My Project Does (taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music. Target Audience Composers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "HS-transform, python package for hyperbolic S-transform in signal processing", "Author": "Ok_Employ_2414", "Content": "I made a python package for S-transform with Hyperbolic window (Hyperbolic S-transform or HSTransform package). This is my first time publishing a python package, so the project is still far from stable and still under beta release.\nWhat my project does: This transformation is applied to signal processing, analyzing transient changes of a signal during very short-time. Some special use case can be in power system signal, or Geophysical signal analysis, or MRI ..."},
{"Title": "Interactive plots in the terminal", "Author": "Spiffidimus", "Content": "I made a library to create interactive plots in the terminal (pip install itrm). It uses braille characters (by default) to display the data with sub-character resolution. There are several keybindings for moving a vertical cursor left and right, for zooming in or out on data, and for changing which curve to focus on. There are occasions (such as when working with a server) where MatPlotLib is not an option and the terminal is the only available tool. But, in my opinion, it is actually faster to use this tool (itrm) to zoom in on interesting parts of data and analyze patterns than using other tools like MatPlotLib. In fact, with large data sets (~1 million points), this tool actually renders faster than MatPlotLib. Please check it out and let know what you think."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A Beginner's Guide to Unit Testing with Pytest", "Author": "Stanulilic", "Content": "Hey r/python! I wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link."},
{"Title": "I made a cheatsheet for pydash", "Author": "poopatroopa3", "Content": "https://brunodantas.github.io/pydash-cheatsheet/en/\nWhat my project does: pydash is a library with great potential to make you code more Functional and simple. I made this cheatsheet a while ago to highlight some of the most useful functions of the library, since there are so many. I hope it's useful.\nTarget audience: anyone who is interested in pydash, functional programming, not reinventing the wheel."},
{"Title": "A Beginner's Guide to Unit Testing with Pytest", "Author": "Stanulilic", "Content": "Hey r/python! I wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link."},
{"Title": "AI planner: AI tool for efficient event scheduling in Google Calendar.", "Author": "nginx26", "Content": "Good evening! I have created a new projectfor adding events to google calendar based on the text a user inputs. What My Project Does The project is a tool that uses large language models to understand the user's input and add events to the user's Google Calendar based on the user's input. It uses Ollama for natural language understanding and Google Calendar API for adding events to the user's calendar. How My Project Works Ollama uses Llama 3 with pre-instructions to act as a calendar event planner. The tool uses the model to generate responses to extract the event's details from the user's input inserted in the Web Interface. tool then asks the user to confirm the details extracted from the user's input and adds the event to the user's Google Calendar (example shown )"},
{"Title": "Hi! I've published a Python client for IBKR REST and WebSocket APIs - IBind. Hope you like it üëã", "Author": "VoyZan", "Content": "Hi! I want to share a library I've built recently. IBind is a REST and WebSocket Python client for Interactive Brokers Client Portal Web API. It is directed at IBKR users. You can find IBind on GitHub: https://github.com/Voyz/ibind What My Project Does: It is a REST and WebSocket API for the Interactive Brokers' Web API. I'm particularly proud of a few things in this release:\nThe REST and WebSocket API clients are based on an abstract base class RestClient and WsClient accordingly. These could be implemented to use some other Web APIs in a relatively straightforward way. I have in fact used a version of that for a cryptocurrency WebSocket API, and it is nice to see it adapt to a different environment."},
{"Title": "Reactive programming for Python with live-cells-py", "Author": "alex-gutev", "Content": "live-cells-py (Live Cells Python) is a reactive programming library which I ported from Live Cells for Dart.\nWhat my project Does:\nYou can declare cells which are observable containers for data: import live_cells as lc\n\na = lc.mutable(0)"},
{"Title": "IconMatch - find icons and letters positions from images!", "Author": "TraditionalDistrict9", "Content": "Hey all, I am not the original creator, but found that 4yo project, and decided to revive it! What my project does: IconMatch is library allowing you to extract icons and letter positions from image or from display! There is also realtime demo on repo showcasing how it works! Target Audience: For all detecting objects from display! Comparison: I did not find other project like that - but it was my first find too! It is also not OCR! https://github.com/NativeSensors/IconMatch Have fun!"},
{"Title": "PyPods: A lightweight solution to execute Python dependencies in an isolated fashion.", "Author": "Brilliant_Emphasis63", "Content": "Introducing PyPods What My Project Does A Python library designed to manage monolithic project architectures by isolating dependencies. Traditionally, monolithic architectures cluster all dependencies into one project, creating complexities and potential conflicts. PyPods offers a solution by isolating these dependencies and enabling the main project to communicate with them via remote procedure calls. This approach eliminates the need to install dependencies directly in the main project. Feel free to take a look and I am happy to receive some feedback! Target Audience"},
{"Title": "Reactive programming for Python with live-cells-py", "Author": "alex-gutev", "Content": "live-cells-py (Live Cells Python) is a reactive programming library which I ported from Live Cells for Dart.\nWhat my project Does:\nYou can declare cells which are observable containers for data: import live_cells as lc\n\na = lc.mutable(0)"},
{"Title": "Python Streamlit Spotlight Tutorial: an Interactive Dashboard using UNHCR Refugee Data", "Author": "jgloewen", "Content": "Python Streamlit is a terrific tool for creating interactive data visualizations. It packages all your visualizations up into a neat little application - including charts and maps - and displays them in your default browser. No muss, no fuss. Recently, I found a new dataset (to me) on the UN High Commission for Refugees (UNHCR) website. It contains country-to-country movements for refugees both from origin country and country of asylum Using this dataset, here's a step-by-step on how to code a Python Streamlit application that has:"},
{"Title": "The possibility to build Android apps with python professionally is here and needs your support.", "Author": "klargstein", "Content": "You guys really need to check this. I believe new comers to python would love to tinker with the android ecosystem from the safety of python :-) Imgur: https://imgur.com/gallery/DtfwOVi https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course Edit: added imgur link."},
{"Title": "Tutorial: Simple Pretty Maps That Will Improve Your Python Streamlit Skills", "Author": "jgloewen", "Content": "Interactive web applications for data visualization improve user engagement and understanding. These days, Streamlit is a very popular framework used to provide web applications for data science. It is a terrific programming tool to have in you Python knowledge toolbox. Here‚Äôs a fun and practical tutorial on how to create a simple interactive and dynamic Streamlit application. This application generates a beautiful and original map using the prettymaps library. Free article: HERE"},
{"Title": "I made a desktop chat app :)", "Author": "Reasonable-Zone-7909", "Content": "What My Project Does Hi! This is my first time doing a python project more than a few hours in size. I made a chat app which features E2E encryption using a passcode and has a multiclient architecture. All comments are welcome! Target Audience It is just a toy project for my portfolio. Comparison Compared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner. But I think that IRC already has this, so it doesn't differ much XD. Git link: https://github.com/xxzoltanxx/Balvan-Chat"},
{"Title": "The possibility to build Android apps with python professionally is here and needs your support.", "Author": "klargstein", "Content": "You guys really need to check this. I believe new comers to python would love to tinker with the android ecosystem from the safety of python :-) Imgur: https://imgur.com/gallery/DtfwOVi https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course Edit: added imgur link."},
{"Title": "You should only use licensed version of python", "Author": "vikashgraja", "Content": "I‚Äôm an intern in a company and I automated some processes using python. My company‚Äôs IT wing said that as long as it is a licensed software you can use it in our company. In my mind I was like where the f I‚Äôm going to get a license for an open source software. Note : They mention that another team has been using licensed python. I thought either IT is so stupid or that team is so smart that they brought license for pycharm or anaconda (claim that it is a Python license) and fooled IT. If I am wrong then tell me where I can get that license. And I am also looking for job in data analyst."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "IP subnet or IP calculator tool need feedback", "Author": "nicanorflavier", "Content": "Hey folks, I've been dabbling with a Python project recently that's all about making life easier for us I.T. people. It's a nifty little tool that calculates IP subnets and does IP calculations from the command or CLI. Here's the GitHub link and the code: https://github.com/nicanorflavier/ipnet I‚Äôm pretty stoked about it, but I know there‚Äôs always room for improvement. So, I thought, better to turn to than the wise minds of this python community? I‚Äôm all ears for any feedback, tips, tricks, or advice you guys might have. Thanks a ton in advance!"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Rye-Tui, a Text-based User Interface (TUI) to manage rye projects", "Author": "Zaloog1337", "Content": "Hi everyone, Ive reached a state of my current project, where I want to share it with you, and gather some feedback. This is my first time using rye and I am surprised, how Hassle-Free building a package with it went. Source Code: github\nInstallation\npython -m pip install rye-tui"},
{"Title": "You should only use licensed version of python", "Author": "vikashgraja", "Content": "I‚Äôm an intern in a company and I automated some processes using python. My company‚Äôs IT wing said that as long as it is a licensed software you can use it in our company. In my mind I was like where the f I‚Äôm going to get a license for an open source software. Note : They mention that another team has been using licensed python. I thought either IT is so stupid or that team is so smart that they brought license for pycharm or anaconda (claim that it is a Python license) and fooled IT. If I am wrong then tell me where I can get that license. And I am also looking for job in data analyst."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Dash Pip Components", "Author": "Soolsily", "Content": "What My Project Does\nHey everyone, just released 8 new pip components for plotly and dash including:\nFull Calendar Component - A Full Calendar Component for Dash\nDash Summernote - A rich text WYSIWYG Editor for Dash\nDash Emoji Mart - A Slack-like Emoji Picker for Dash\nDash Charty - A Charting Library for Dash"},
{"Title": "Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient Code", "Author": "Slow_Scene_7972", "Content": "Optimize Your Python Workflow: Proven Techniques for Crafting Production-Ready Code Link"},
{"Title": "Apple Health data exploration with Atlas, Clickhouse, Vega-Altair, Quarto", "Author": "__tosh", "Content": "What My Project Does A few days ago I wrote a simple python script (\"Atlas\") that turns the Apple Health export.xml file (which is about 1 GB in my case, with about 10 years of data) into a very simple parquet file (a bit like a compressed CSV) that is also way smaller (40 MB). The parquet file has 5 columns:\ntype (e.g. \"CyclingDistance\")\nvalue (e.g. \"12.100\")"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Dash Pip Components", "Author": "Soolsily", "Content": "What My Project Does\nHey everyone, just released 8 new pip components for plotly and dash including:\nFull Calendar Component - A Full Calendar Component for Dash\nDash Summernote - A rich text WYSIWYG Editor for Dash\nDash Emoji Mart - A Slack-like Emoji Picker for Dash\nDash Charty - A Charting Library for Dash"},
{"Title": "Pre-commit hook to keep coverage badge in README up to date", "Author": "60percentcocoa", "Content": "Wrote this as a tool to keep README coverage badges up to date without relying on 3rd party services or having to do anything extra, thought others might get some utility out of it: coverage-pre-commit. A .coverage file is expected at the root of the project, generated by running coverage run directly or using a plugin such as pytest-cov when running tests. Most convenient when used as a pre-push hook imo. Feel free to opine, be it positive or negative!"},
{"Title": "Picodi - Simplifying Dependency Injection in Python", "Author": "yakimka", "Content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a python bot that plays minesweeper", "Author": "_dwightshrute", "Content": "Hello, I made this Minesweeper bot that I wanted to share with you all. What My Project Does - The bot takes a screenshot of the board and runs a classification algorithm to extract the contents of the board. It then analyzes the board, finds as many mines as it can, and sends clicks. If it cannot find any mines then it guesses the most probable position of a mine. Target Audience - It's a toy project for anyone interested in algorithms or problem-solving. Comparison - This is just my attempt at making a minesweeper bot. I'm sure there are many bots out there that are much more efficient than this."},
{"Title": "I built a pipeline sending my wife and I SMSs twice a week with budgeting advice generated by AI", "Author": "MoodAppropriate4108", "Content": "What My Project Does:\nI built a pipeline of Dagger modules to send my wife and I SMSs twice a week with actionable financial advice generated by AI based on data from bank accounts regarding our daily spending. Details: Dagger is an open source programmable CI/CD engine. I built each step in the pipeline as a Dagger method. Dagger spins up ephemeral containers, running everything within its own container. I use GitHub Actions to trigger dagger methods that;"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyWolt: Wolt food delivery service API wrapper", "Author": "daivushe1", "Content": "I'm thrilled to share my first open-source project with you all: PyWolt! üéâ PyWolt is a Python library that makes it super easy to interact with the Wolt API.\nWhat My Project Does:\nDiscover Venues: Find nearby spots to grab a bite.\nExplore Menus: Dive into a venue's menu and pick your favorites.\nTarget Audience:"},
{"Title": "Homoiconic Python Code", "Author": "moonbunR", "Content": "Homoiconic, what does it mean? In simple terms, homoiconic code is when code is treated as data and can be manipulated as you would data. This means the code can be changed, new functions and variables added, the code can generate new code or even examine and modify its own structure and behavior all while it is running. That‚Äôs why homoiconic languages like Lisp are so powerful. But what if we can make a homoiconic python code, where the code and the data are one and the same and can be modified in the same way? This guide does a good job in trying to explain how you would create a python version of the ‚ÄúLisp in Lisp‚Äù code which would give you access to all those homoiconic features that Lisp brags of like the macro systems, the expressiveness and flexibility, the metaprogramming etc. while still using python. What do you guys think of this?"},
{"Title": "HS-transform, python package for hyperbolic S-transform in signal processing", "Author": "Ok_Employ_2414", "Content": "I made a python package for S-transform with Hyperbolic window (Hyperbolic S-transform or HSTransform package). This is my first time publishing a python package, so the project is still far from stable and still under beta release.\nWhat my project does: This transformation is applied to signal processing, analyzing transient changes of a signal during very short-time. Some special use case can be in power system signal, or Geophysical signal analysis, or MRI ..."},
{"Title": "Production grade AI Web apps, just using python ?", "Author": "prime_danger", "Content": "Hey guys, I have worked on building multiple ai/ml usecases and their specific backends. But now I want build interfaces for easy and quick integration. I saw a blog which used FastUI which looks quick decent but when I tried it just showed me a Json of elements on the page. Are there any other libraries I should use? ü§î"},
{"Title": "HS-transform, python package for hyperbolic S-transform in signal processing", "Author": "Ok_Employ_2414", "Content": "I made a python package for S-transform with Hyperbolic window (Hyperbolic S-transform or HSTransform package). This is my first time publishing a python package, so the project is still far from stable and still under beta release.\nWhat my project does: This transformation is applied to signal processing, analyzing transient changes of a signal during very short-time. Some special use case can be in power system signal, or Geophysical signal analysis, or MRI ..."},
{"Title": "We built open-source SDK for adding custom code interpreters to AI apps", "Author": "mlejva", "Content": "What My Project Does Hey everyone! I'm the CEO of the company that built an SDK that makes it easy to build custom code interpreters for AI apps. We're a company called E2B [0]. We're building and open-source [1] secure environments for running untrusted AI-generated code and AI agents. We call these environments sandboxes and they are built on top of micro VM called Firecracker [2]. We specifically decided to use Firecrackers instead of containers because of their security and ability to do snapshots. You can think of us as giving small cloud computers to LLMs. We recently created a dedicated SDK for building custom code interpreters in Python or JS/TS. We saw this need after a lot of our users have been adding code execution capabilities to their AI apps with our core SDK [3]. These use cases were often centered around AI data analysis so code interpreter-like behavior made sense"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Is PyGame still alive?", "Author": "pyeri", "Content": "So it was a long time ago in the good old Python 2.x days (circa 2010 probably) that I had learned PyGame with some tutorials at my former work place. But nowadays since I mostly freelance with business apps, I never felt the need for it. But since such a game development project is on the horizon after all these years, I was wondering if PyGame can still be up for the task with Python 3.x? Or is there a better Python library available these days? I don't need any advanced gaming features of modern day VFX or anything, all I need is some basic Mario/Luigi style graphics, that's all!"},
{"Title": "The best Python CLI library, arguably.", "Author": "AND_MY_HAX", "Content": "What My Project Does https://github.com/treykeown/arguably arguably makes it super simple to define complex CLIs. It uses your function signatures and docstrings to set everything up. Here's how it works:\nAdding the @arguably.command decorator to a function makes it appear on the CLI.\nIf multiple functions are decorated, they'll all be set up as subcommands. You can even set up multiple levels of subcommands."},
{"Title": "I made a cheatsheet for pydash", "Author": "poopatroopa3", "Content": "https://brunodantas.github.io/pydash-cheatsheet/en/\nWhat my project does: pydash is a library with great potential to make you code more Functional and simple. I made this cheatsheet a while ago to highlight some of the most useful functions of the library, since there are so many. I hope it's useful.\nTarget audience: anyone who is interested in pydash, functional programming, not reinventing the wheel."},
{"Title": "I made a small Python script that uses NASA'S APOD API to set cool backgrounds on a Windows machine", "Author": "Potato_eating_a_dog", "Content": "https://github.com/william7491681/APOD_Wallpaper_Script\nWhat my project does\nNASA has a ton of accessible API's, one of which being the APOD (Astronomy Picture Of the Day) API. I made a script to get the last 9 pictures of the day and set them as my Windows 10 background, and then used task scheduler to have the script re-run every day at noon and whenever the computer boots up. It's fairly hard coded for my setup (specific file paths, 1920x1080 monitor, etc), but it shouldn't be too hard to change if one wanted to."},
{"Title": "I made a cheatsheet for pydash", "Author": "poopatroopa3", "Content": "https://brunodantas.github.io/pydash-cheatsheet/en/\nWhat my project does: pydash is a library with great potential to make you code more Functional and simple. I made this cheatsheet a while ago to highlight some of the most useful functions of the library, since there are so many. I hope it's useful.\nTarget audience: anyone who is interested in pydash, functional programming, not reinventing the wheel."},
{"Title": "Track the size of your PyInstaller packages in CI", "Author": "bencherdev", "Content": "If you have ever wanted to track the size of your PyInstaller packages in CI, Bencher now supports tracking your package size: https://bencher.dev/docs/how-to/track-file-size/"},
{"Title": "I made a React-like web framework for Python üëã", "Author": "Rawing7", "Content": "I'm Paul, one of the creators of Rio. Over the years I've tried many different established python GUI frameworks, but none of them really satisfied me. So I teamed up with a few like minded developers and spent the last few months to create our own framework. Rio is the result of this effort. What My Project Does Rio is a brand new GUI framework that lets you create modern web apps in just a few lines of Python. Our goal is to simplify web and app development, so you can focus on the things you care about, instead of wasting countless hours on frustrating user interface details. We do this by following the core principles of Python that we all know and love. Python is supposed to be simple and compact - and so is Rio. There is no need to learn any additional languages such as HTML, CSS or JavaScript, because all of the UI, Logic, Components and even layouting is done entirely in Python. There‚Äôs not even a distinction between front-end and back-end. Rio handles all of the communication transparently for you."},
{"Title": "LinkedIn-Learning-Downloader v1.1", "Author": "YounesWinter", "Content": "With Python i created a tool that enables users to download LinkedIn Learning courses, including the often overlooked but incredibly valuable exercise files. This feature sets our project apart, offering a complete learning experience by providing both the course videos and the materials needed for practical application.\nWhat great about it and beyond other tools in the same genre concerned LinkedIn Learning Downloaders, now you can download the whole courses from a path link. this is was never possible without Python."},
{"Title": "IconMatch - find icons and letters positions from images!", "Author": "TraditionalDistrict9", "Content": "Hey all, I am not the original creator, but found that 4yo project, and decided to revive it! What my project does: IconMatch is library allowing you to extract icons and letter positions from image or from display! There is also realtime demo on repo showcasing how it works! Target Audience: For all detecting objects from display! Comparison: I did not find other project like that - but it was my first find too! It is also not OCR! https://github.com/NativeSensors/IconMatch Have fun!"},
{"Title": "JSX Syntax inside Python files. (Packed)", "Author": "RevolutionaryPen4661", "Content": "There was a JSX-style syntax preprocessor for Python called \"Packed,\" which allowed us to write JSX inside Python (*.pyx and *.py) files. It's unclear why they chose *.pyx for the file extension, as it conflicts with the naming of Cythonic file extensions (I have checked their issues). This project might have thrived with sufficient contributions and could have changed the way apps are built. However, the project is now archived on GitHub. The last commit was 5 years ago (LICENSE), and the last development commit was 9 years ago. This repository needs someone to revive it, but I don't have enough experience to take on that task. Even though I don't have enough information, we should start with Rust + Python to build a compiler (aka. template replacer) (this doesn't compile Python but replaces all JSX with a dictionary) and cleaner syntax. Integration with Django (Packed has an example too), Flask, FastAPI, Robyn etc."},
{"Title": "IconMatch - find icons and letters positions from images!", "Author": "TraditionalDistrict9", "Content": "Hey all, I am not the original creator, but found that 4yo project, and decided to revive it! What my project does: IconMatch is library allowing you to extract icons and letter positions from image or from display! There is also realtime demo on repo showcasing how it works! Target Audience: For all detecting objects from display! Comparison: I did not find other project like that - but it was my first find too! It is also not OCR! https://github.com/NativeSensors/IconMatch Have fun!"},
{"Title": "I created a Python script that makes it easier to track how your baby's sleep is improving", "Author": "BX1959", "Content": "My wife and I use the Huckleberry app to track our baby's sleep periods. Although the free version of the app allows you to view a number of sleep-related metrics, I also wanted to see whether his longest nightly sleep stretches were getting longer over time. Therefore, I created a Python project to help me answer this and other questions I had about my baby's sleep.\nWhat My Project Does\nThis project reads in data from a Huckleberry .csv export (or a separate custom .csv file); analyzes its sleep information; and then produces ."},
{"Title": "Tutorial: Simple Pretty Maps That Will Improve Your Python Streamlit Skills", "Author": "jgloewen", "Content": "Interactive web applications for data visualization improve user engagement and understanding. These days, Streamlit is a very popular framework used to provide web applications for data science. It is a terrific programming tool to have in you Python knowledge toolbox. Here‚Äôs a fun and practical tutorial on how to create a simple interactive and dynamic Streamlit application. This application generates a beautiful and original map using the prettymaps library. Free article: HERE"},
{"Title": "The new REPL in Python 3.13.0 beta 1", "Author": "treyhunner", "Content": "Python 3.13.0 beta 1 was released today. The feature I'm most excited about is the new Python REPL. Here's a summary of my favorite features in the new REPL along with animated gifs. The TLDR:\nSupport for block-leveling history and block-level editing\nPasting code (even with blank lines within it) works as expected now\nTyping exit will exit (no more Use exit() or Ctrl-D (i.e. EOF) to exit message)"},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It‚Äôs a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "FastAPI Backend Template for SaaS products", "Author": "shekhuu", "Content": "Hello there, I just created a template for creating a backend for your SaaS products. What my project does: It is a FastAPI project/template for creating SaaS backends and admin dashboards. Comparison: \nOut of the box, it supports\nLicence key generation and validation.\nOAuth 2 authentication with scopes."},
{"Title": "Tutorial: Simple Pretty Maps That Will Improve Your Python Streamlit Skills", "Author": "jgloewen", "Content": "Interactive web applications for data visualization improve user engagement and understanding. These days, Streamlit is a very popular framework used to provide web applications for data science. It is a terrific programming tool to have in you Python knowledge toolbox. Here‚Äôs a fun and practical tutorial on how to create a simple interactive and dynamic Streamlit application. This application generates a beautiful and original map using the prettymaps library. Free article: HERE"},
{"Title": "ChatGPT can talk with all my Python notebooks", "Author": "pp314159", "Content": "I'm working on an open-source framework for converting Python notebooks into web applications, it is called Mercury. Recently, I have added an option to execute notebooks with REST API. You can pass paramters in POST request body to the notebook, execute all cells and return JSON as response. I'm also running a SaaS service, Mercury Cloud where you can deploy notebooks with one-click with unique website domain. What My Project Does It makes Python notebooks extermely easy to integrate with custom ChatGPT, so GPT can execute Python notebooks and get response. It is 3-steps process:"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "DeepFusion: a highly modular Deep Learning Framework.", "Author": "atharvaaalok1", "Content": "What My Project Does: Hello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning. And Voila... I've developed a deep learning library, DeepFusion! Details: It's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code. You can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion"},
{"Title": "this.s and this.d", "Author": "VladTbk", "Content": "Recently, I found out about the this \"Easter egg\" in python3. Adding import this into a py file will print \"The Zen of Python\" by Tim Peters. Also, this has two attributes: this.s and this.d, which I guess form the actual Easter egg. this.s returns an encrypted version of \"The Zen\" and this.d well, see for yourself, maybe you'll solve the puzzle."},
{"Title": "Calculating Virtual Cycling Power With Python", "Author": "TokenChingy", "Content": "I was doing some light reading and stumbled across Steve Gribbles Power vs Speed Calculator and thought I'd give it a go at rebuilding it based on his Physics model using Python. Then I wrote an article about. Thought I'd share it with you all: Calculating Virtual Cycling Power (jasonlei.com)"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient Code", "Author": "Slow_Scene_7972", "Content": "Optimize Your Python Workflow: Proven Techniques for Crafting Production-Ready Code Link"},
{"Title": "Framework to use for backend", "Author": "Clickyz", "Content": "Hello guys I recently decided to move from nodejs(expressjs) to python for general purposes but mostly for backend. I have couple of questions.\nWill i regret my migration to python? :)\nWhich framework you suggest for backend solo dev?\nAnd what tips are you suggesting me in general to get used to python."},
{"Title": "I made a Mandelbrot Zoom using Python", "Author": "AbideByReason", "Content": "I made a YouTube video which previews the zoom and explains the code, which you can find here: https://youtu.be/HtNUFdh2sjg What my project does: it creates a Mandelbrot Zoom. Comparison: it uses Pillow and consists of just 2 main blocks of code: one is the main function that finds which points are in the Mandelbrot Set and the other is the main loop that applies appropriate colors to each image. It gives the option of being black and white OR in color. It works fairly well but can definitely be faster if parallelized. I'd love to hear any suggestions on how it can be improved. Target Audience: fun/toy project"},
{"Title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer What My Project Does: MyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience. mytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/"},
{"Title": "Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient Code", "Author": "Slow_Scene_7972", "Content": "Optimize Your Python Workflow: Proven Techniques for Crafting Production-Ready Code Link"},
{"Title": "Thank You PyConUS 2024 !!!", "Author": "ryanstephendavis", "Content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon... I've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture."},
{"Title": "Picodi - Simplifying Dependency Injection in Python", "Author": "yakimka", "Content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features"},
{"Title": "New Python-only abstractions for extracting data from apis", "Author": "Thinker_Assignment", "Content": "Hey there, you are probably familiar with REST APIs.\nWe at dlt library added a new way to get data from apis (and dlt can already load it with best practice to db or parquet). We already did some internal hackathons but we would appreciate your feedback so we can improve it further\n- Our new REST API Source is a short, declarative configuration driven way of creating sources.\n- Our new REST API Client is a collection of Python helpers used by the above source, which you can also use as a standalone, config-free, imperative high-level abstraction for building pipelines.\nYou can read more about the source here or go to our docs for the REST APIClient info\n\nPS: see you at Pycon Pittsburgh!"},
{"Title": "sjvisualizer: a python package to animate time-series data", "Author": "PieChartPirate", "Content": "What the project does: data animation library for time-series data. Currently it supports the following chart types:\nBar races\nAnimated Pie Charts\nAnimated Line Charts\nAnimated Stacked Area Charts"},
{"Title": "InterProcessPyObjects: Fast IPC for Sharing and Modifying Objects Across Processes", "Author": "FI_Mihej", "Content": "InterProcessPyObjects Python package\ngithub.com/FI-Mihej/InterProcessPyObjects If you like the project, consider giving it a star on GitHub to show your support and help further development. :) pypi.org/project/InterProcessPyObjects\nWhat My Project Does\nInterProcessPyObjects is a part of the Cengal library. If you have any questions or would like to participate in discussions, feel free to join the . Your support and involvement are greatly appreciated as Cengal evolves."},
{"Title": "Picodi - Simplifying Dependency Injection in Python", "Author": "yakimka", "Content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Homoiconic Python Code", "Author": "moonbunR", "Content": "Homoiconic, what does it mean? In simple terms, homoiconic code is when code is treated as data and can be manipulated as you would data. This means the code can be changed, new functions and variables added, the code can generate new code or even examine and modify its own structure and behavior all while it is running. That‚Äôs why homoiconic languages like Lisp are so powerful. But what if we can make a homoiconic python code, where the code and the data are one and the same and can be modified in the same way? This guide does a good job in trying to explain how you would create a python version of the ‚ÄúLisp in Lisp‚Äù code which would give you access to all those homoiconic features that Lisp brags of like the macro systems, the expressiveness and flexibility, the metaprogramming etc. while still using python. What do you guys think of this?"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "AzuracastPy: An Unofficial Python Wrapper for the Azuracast API.", "Author": "ARandomBoiIsMe", "Content": "Source code What My Project Does: It acts as a wrapper for the AzuraCast API, providing custom functions and classes for more straightforward use of the API in python projects. Target Audience: Python users who are interested in programmatically interacting with online radios hosted on AzuraCast. Comparison: The idea of API Wrappers is not new. However, I noticed that the only existing wrapper for this API is written in PHP, which I am not experienced with. I created this project so I, and other python programmers by extension, could have an easier time working with the API."},
{"Title": "Homoiconic Python Code", "Author": "moonbunR", "Content": "Homoiconic, what does it mean? In simple terms, homoiconic code is when code is treated as data and can be manipulated as you would data. This means the code can be changed, new functions and variables added, the code can generate new code or even examine and modify its own structure and behavior all while it is running. That‚Äôs why homoiconic languages like Lisp are so powerful. But what if we can make a homoiconic python code, where the code and the data are one and the same and can be modified in the same way? This guide does a good job in trying to explain how you would create a python version of the ‚ÄúLisp in Lisp‚Äù code which would give you access to all those homoiconic features that Lisp brags of like the macro systems, the expressiveness and flexibility, the metaprogramming etc. while still using python. What do you guys think of this?"},
{"Title": "Speed improvements in Polars over Pandas", "Author": "zzoetrop_1999", "Content": "I'm giving a talk on polars in July. It's been pretty fast for us, but I'm curious to hear some examples of improvements other people have seen. I got one process down from over three minutes to around 10 seconds.\nAlso curious whether people have switched over to using polars instead of pandas or they reserve it for specific use cases."},
{"Title": "The best Python CLI library, arguably.", "Author": "AND_MY_HAX", "Content": "What My Project Does https://github.com/treykeown/arguably arguably makes it super simple to define complex CLIs. It uses your function signatures and docstrings to set everything up. Here's how it works:\nAdding the @arguably.command decorator to a function makes it appear on the CLI.\nIf multiple functions are decorated, they'll all be set up as subcommands. You can even set up multiple levels of subcommands."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Interactive Data Visualization with Python: A Showcase of Plotly Dash", "Author": "AbhishekSuryavanshee", "Content": "What My Project Does:\nI'm excited to introduce my latest project built with Python ‚Äì an interactive data visualization application using Plotly Dash. This project aims to empower users to explore and analyze datasets dynamically through interactive visualizations. By leveraging Plotly Dash's capabilities, users can interact with data in real-time, customize visualizations on the fly, and gain deeper insights with just a few clicks. Target Audience:\nThis project caters to a wide range of users, from data enthusiasts and analysts to professionals seeking to communicate insights effectively. Whether you're a data scientist exploring patterns in large datasets or a business analyst presenting findings to stakeholders, this tool is designed to streamline your workflow and enhance your data storytelling capabilities. It's suitable for both production-grade applications and educational purposes, offering a versatile platform for data visualization tasks of varying complexity."},
{"Title": "diskcache: This key-value store library is faster than Redis and Memcached üòÆ (built by Grant Jenks)", "Author": "RevolutionaryPen4661", "Content": "PYPI (From the README, Released Last Year, Edited by Grammarly) Github pip install diskcache The cloud-based computing of 2024 puts a premium on memory. Gigabytes of space are left on disks as processes vie for memory. Memcached (and sometimes Redis) is used as a cache among these processes. Wouldn‚Äôt it be nice to leverage empty disk space for caching? Django is Python‚Äôs most popular web framework and has several caching backends. Unfortunately, the file-based cache in Django is essentially broken. The culling method is random and large caches repeatedly scan a cache directory which slows linearly with growth. Can you allow it to take sixty milliseconds to store a key in a cache with a thousand items?"},
{"Title": "Interfacing Custom USB endpoints using Python!", "Author": "shekhuu", "Content": "Hi everyone, I was building something that required me to communicate over USB to Raspberry Pi Pico using Pyusb Python. So I decided to make a blog post about it showing the concepts, process, and source code.\nCheck out the blog post here!\nCheck out the source code here!"},
{"Title": "The best Python CLI library, arguably.", "Author": "AND_MY_HAX", "Content": "What My Project Does https://github.com/treykeown/arguably arguably makes it super simple to define complex CLIs. It uses your function signatures and docstrings to set everything up. Here's how it works:\nAdding the @arguably.command decorator to a function makes it appear on the CLI.\nIf multiple functions are decorated, they'll all be set up as subcommands. You can even set up multiple levels of subcommands."},
{"Title": "Auto Data Analysis python packages to know", "Author": "mehul_gupta1997", "Content": "Check this video tutorial to explore different AutoEDA python packages like pandas-profiling, sweetviz, dataprep,etc which can enable automatic data analysis within minutes without any effort : https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry"},
{"Title": "LinkedIn-Learning-Downloader v1.1", "Author": "YounesWinter", "Content": "With Python i created a tool that enables users to download LinkedIn Learning courses, including the often overlooked but incredibly valuable exercise files. This feature sets our project apart, offering a complete learning experience by providing both the course videos and the materials needed for practical application.\nWhat great about it and beyond other tools in the same genre concerned LinkedIn Learning Downloaders, now you can download the whole courses from a path link. this is was never possible without Python."},
{"Title": "Declarative GUI Slint v1.6 released with Design Mode (WYSIWYG) Improvements", "Author": "madnirua", "Content": "https://slint.dev/blog/slint-1.6-released Slint is a declarative GUI toolkit to build native user interfaces for desktop and embedded applications. Find more information at https://slint.dev/ or check out the source code at https://github.com/slint-ui/slint. EDIT: The Python APIs are currently in alpha. More info -- https://github.com/slint-ui/slint/tree/master/api/python"},
{"Title": "Who is using quart framework for microservices?", "Author": "Dry_Raspberry4514", "Content": "I am using quart framework (https://quart.palletsprojects.com) for a number of microservices in a SaaS application. However, I hardly hear anything about this framework on any social media platform which seems to be dominated by FastAPI. Also I'm unable to find which all projects/companies are using this framework. All this is leading to anxiety around the future of this project. Are there any well known projects / companies which are using this framework for microservices?"},
{"Title": "LinkedIn-Learning-Downloader v1.1", "Author": "YounesWinter", "Content": "With Python i created a tool that enables users to download LinkedIn Learning courses, including the often overlooked but incredibly valuable exercise files. This feature sets our project apart, offering a complete learning experience by providing both the course videos and the materials needed for practical application.\nWhat great about it and beyond other tools in the same genre concerned LinkedIn Learning Downloaders, now you can download the whole courses from a path link. this is was never possible without Python."},
{"Title": "Mystique: Sparse data matching for Python tests", "Author": "jonocodes", "Content": "What My Project Does I made this library to help assert test responses inline while directing the comparison to be as rigid or lax as it needs to be. Motivation I write a lot of tests that assert values in complex nested dictionaries. But really I only need to check some parts in the response, not all of it. I often find myself transforming the response or maliciously extracting the important parts I need - in order to satisfy the assertions. This gets messy and can make tests hard to follow. Target Audience Anyone who writes tests. This is particularly useful if you generate fake data in your tests with something like Faker, Factory Boy, or Model Bakery."},
{"Title": "Implementing your own pypi clone", "Author": "chione99", "Content": "Hi, Just want to know how difficult is it to manage your own pypi clone and how do you recommend to create a seperation between dev and prod systems."},
{"Title": "Folks who know the internals: Where does operator precedence \"happen\"?", "Author": "BeerIsTheMindKiller", "Content": "Hey! Messing around with instaviz, cool library, highly recommend. You can visualize a function's bytecode as well as AST and some other stuff. i entered this: def f():\n  x = 1 + 2 - 10**2\n  return x I was expecting the AST nodes for 1 + 2 - 10**2 to be rearranged somehow, with 10**2 being moved to the left hand of the expression, because exponents get evaluated before addition/subtraction. but no! just looks like this:"},
{"Title": "FastAPI Backend Template for SaaS products", "Author": "shekhuu", "Content": "Hello there, I just created a template for creating a backend for your SaaS products. What my project does: It is a FastAPI project/template for creating SaaS backends and admin dashboards. Comparison: \nOut of the box, it supports\nLicence key generation and validation.\nOAuth 2 authentication with scopes."},
{"Title": "Why is Plotly so cumbersome to tweak?", "Author": "olive_oil_for_you", "Content": "I made this visualisation with this code. I have three questions:\nIs Plotly supposed to be this cumbersome to tweak? Would other libraries require the same amount of code to add the details I did?\nCan my code be reduced in size? Maybe it's me who is complicating things with Plotly and there are easier ways to do what I am doing.\nAny R enthusiast who can tell me how much shorter this code would look like with ggplot2? I asked ChatGPT but the result was garbage."},
{"Title": "FastAPI Backend Template for SaaS products", "Author": "shekhuu", "Content": "Hello there, I just created a template for creating a backend for your SaaS products. What my project does: It is a FastAPI project/template for creating SaaS backends and admin dashboards. Comparison: \nOut of the box, it supports\nLicence key generation and validation.\nOAuth 2 authentication with scopes."},
{"Title": "I made python audioplayer with FFmpeg and Qt6", "Author": "WyseTwist", "Content": "Midnight Player - a simple python audiplayer for playing audio What My Project Does: My project is just an audio player for playing music, it can play audio from folders, supports different audio formats like Flac, Mp3 and can show some information about the track. Player uses subprocess to access ffmpeg, then it decodes the audio file into pcm format, then plays this file using sounddevice library. the use of these libraries is to ensure that the audio file does not lose quality during processing. Target Audience: This project was made to increase experience in python programming and to understand how the audio playback process works, but the project is also useful for people who are interested in learning the structure of the audio player as it is open source."},
{"Title": "Manage Your Squid Proxy Server Efficiently with This Python Script", "Author": "SAV_NC", "Content": "ü¶ë Squid Proxy Manager Script Hello fellow Python enthusiasts! I've created a Python script that makes managing your Squid Proxy Server a breeze. If you're looking for an efficient and straightforward way to interact with your Squid server remotely, this script is for you. üéâ What My Project Does The Squid Proxy Manager script allows you to manage your Squid Proxy Server remotely using a simple command-line interface. Here are some of the key features:\nCheck Squid Service Status: Quickly check if your Squid service is running or not."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "this.s and this.d", "Author": "VladTbk", "Content": "Recently, I found out about the this \"Easter egg\" in python3. Adding import this into a py file will print \"The Zen of Python\" by Tim Peters. Also, this has two attributes: this.s and this.d, which I guess form the actual Easter egg. this.s returns an encrypted version of \"The Zen\" and this.d well, see for yourself, maybe you'll solve the puzzle."},
{"Title": "I connected LLM to Python runtime and generated unit-tests (OpenSource)", "Author": "Financial_Muffin396", "Content": "Hi all, I initially started this adventure by trying to automate bug fixes with the help of LLMs. However, I received feedback saying the fixes aren't always correct, leading to the question: why bother reviewing PRs that might add more issues? (It's really hard for LLMs to say \"I don't know\"). So, I decided to focus on reliability perfecting unit tests. The source code is available at: https://github.com/CaptureFlow/captureflow-py What My Project Does: It incorporates a tracer client-side Python library and a backend that accumulates such traces and is capable of proposing code improvements and generating tests for your repository. It traverses the execution graph, extracts relevant parts, enriches them with implementation data from the GitHub API, and then generates tests with the help of GPT4."},
{"Title": "this.s and this.d", "Author": "VladTbk", "Content": "Recently, I found out about the this \"Easter egg\" in python3. Adding import this into a py file will print \"The Zen of Python\" by Tim Peters. Also, this has two attributes: this.s and this.d, which I guess form the actual Easter egg. this.s returns an encrypted version of \"The Zen\" and this.d well, see for yourself, maybe you'll solve the puzzle."},
{"Title": "How to publish a Python package with GitHub Actions using Poetry", "Author": "johnfraney", "Content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/ If you've got any tips for publishing a Python package, I'd be happy to hear those, too"},
{"Title": "pip time machine", "Author": "rejectedlesbian", "Content": "https://github.com/nevakrien/time_machine_pip this is a fairly simple project barely anything to it but I think its promising\nthe idea is to put pip in a time machine so it can not use package versions that were made after the project is made. I am doing this by proxiying pypi and cutting out the newer versions. initial tests show that pip respects the proxy and works like you would expect"},
{"Title": "modern_colorthief - Modified Median Cut Quantization algorithm in rust + python", "Author": "BasePlate_Admin", "Content": "github\ndocumentation\nWhat my project does : It gets the dominant color/color palette from given image. Target Audience: Anyone Usage modern_colorthief exposes two functions get_color and get_palette Here is how to use get_color: from modern_colorthief import get_color\n\n# Path to any image\npath = ...\n\nprint(get_color(path)) # returns tuple[int,int,int]"},
{"Title": "I made a Mandelbrot Zoom using Python", "Author": "AbideByReason", "Content": "I made a YouTube video which previews the zoom and explains the code, which you can find here: https://youtu.be/HtNUFdh2sjg What my project does: it creates a Mandelbrot Zoom. Comparison: it uses Pillow and consists of just 2 main blocks of code: one is the main function that finds which points are in the Mandelbrot Set and the other is the main loop that applies appropriate colors to each image. It gives the option of being black and white OR in color. It works fairly well but can definitely be faster if parallelized. I'd love to hear any suggestions on how it can be improved. Target Audience: fun/toy project"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Mandelbrot Zoom using Python", "Author": "AbideByReason", "Content": "I made a YouTube video which previews the zoom and explains the code, which you can find here: https://youtu.be/HtNUFdh2sjg What my project does: it creates a Mandelbrot Zoom. Comparison: it uses Pillow and consists of just 2 main blocks of code: one is the main function that finds which points are in the Mandelbrot Set and the other is the main loop that applies appropriate colors to each image. It gives the option of being black and white OR in color. It works fairly well but can definitely be faster if parallelized. I'd love to hear any suggestions on how it can be improved. Target Audience: fun/toy project"},
{"Title": "Reforger Whitelist Py", "Author": "PyjamaZombie", "Content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually. The target audience for this is the Arma Reforger community, for which, the application is made for. Currently, to my knowledge, there is no application like this available to the Arma Reforger community. I am very open to feedback, contributions and advice as want to expand this as much as possible!"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "sjvisualizer: a python package to animate time-series data", "Author": "PieChartPirate", "Content": "What the project does: data animation library for time-series data. Currently it supports the following chart types:\nBar races\nAnimated Pie Charts\nAnimated Line Charts\nAnimated Stacked Area Charts"},
{"Title": "Building an LLM chat application using RAG Agent", "Author": "iryna_kondr", "Content": "Motivation\nChatbots are among the most popular applications of large language models (LLMs). Often, an LLM's internal knowledge base is adequate for answering users questions. However, in those cases, the model may generate outdated, incorrect, or too generic responses when specificity is expected. These challenges can be partially addressed by supplementing the LLM with an external knowledge base and employing the retrieval-augmented generation (RAG) technique. However, if user queries are complex, it may be necessary to break the task into several sub-parts. In such cases, relying solely on the RAG technique may not be sufficient, and the use of agents may be required."},
{"Title": "Seeking Your Input: Let's Co-Create FreeCodeCamp for python together", "Author": "globalwarming_isreal", "Content": "Hello all, This is probably my first post here. I usuallly lurk around here and Django subreddits. I've been brewing up an idea and I need your input before I take the plunge! Picture this: a website like FreeCodeCamp but for python and related technologies, a learning oasis where anyone can kickstart their journey from Python newbie to job-ready pro, and it's all free! But here's the thing, I want this to be our platform, crafted with your needs and dreams in mind. So, before I start, I need to know: would this be something that gets you excited? Imagine quizzes helping you find your starting point, interactive challenges that keep you in the zone, and a supportive community to cheer you on every step of the way. Plus, videos, written tutorials, and a progress tracker to keep you motivated!"},
{"Title": "sjvisualizer: a python package to animate time-series data", "Author": "PieChartPirate", "Content": "What the project does: data animation library for time-series data. Currently it supports the following chart types:\nBar races\nAnimated Pie Charts\nAnimated Line Charts\nAnimated Stacked Area Charts"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Frame - a new language for programming state machines in Python", "Author": "framelanger", "Content": "Hey, I am (re)releasing a project called Frame that I've been working on to create a language and transpiler to easily create state machines/automata in Python. It also is able to generate UML documentation as well. This project is for people who are interested in programming state machines for a wide range of purposes such as game programming, workflows, MBSE modeling as well as school projects for comp sci theory. It is also useful simply for generating flow documentation. The Framepiler (Frame transpiler) is in beta at this time. It would be great to get feedback from the Python community on any gaps in key functionality or bugs."},
{"Title": "What changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ?", "Author": "These_Shoe3594", "Content": "What are all the changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ? There are some CVE fixes available in the latest 3.x version of werkzueg. To take the fixes as part of my code, we want to upgrade the version. When I do so, I‚Äôve faced lot of breakages. I found some on documents and release notes. But it would be easier if someone already did some changes regarding this."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Traversible Tree in Python", "Author": "frankstan33", "Content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure. What My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times. There are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth)."},
{"Title": "Tutorial on Creating Useful Data Visuals with Python seaborn and matplotlib libraries", "Author": "jgloewen", "Content": "With the current global deluge of data and information, there has never been a more important to visualize your data in a clear and simple manner. Python is a terrific tool to help us do this. The key to this lies in choosing the the right data visualization techniques to tell the most interesting and relevant story. Three useful visuals are:\nsmall multiples\nheat maps"},
{"Title": "Langchain using llama3 to build recommendation system", "Author": "yngwieHero", "Content": "Hi, Recently I played a bit with LLMs, specifcally exploring ways of running the models locally and building prompts using LangChain. As a result ended up coding a small recommendation system, powered with Llama3-7b model, which suggests topics to read on HackerNews. Wanted to share my experiences, so I wrote a small article where I described all my findings.\nHope you'll like it: https://lukaszksiezak.github.io/ScrapyToLLM/ Github repo: https://github.com/lukaszksiezak/ScrapyToLLM What the project does: It's a Python application which uses scrapy to scrape HackerNews page. Scraped articles are pipelined to redis, which is then feeding Llama3 using langchain. Prompter is configured to serve a user articles which are matching his request."},
{"Title": "SQLPage - a Python library to add string token based pagination easily", "Author": "kernelslayer", "Content": "What My Project Does - This is a Python package to easily add string token based pagination. Currently it supports SQLModel and SQLAlchemy ORMs. Recently I wanted to add pagination in one of my Python projects and in the API response, I had to return a string next page token. Now I could not find a straight-forward way of doing this in Python. All of the tutorials or blog posts I saw, there in the response the server always returned a page_number, page_size, and total_elements and then the onus was on the calling service to adjust this accordingly.  Comparison - The current packages and methods requires some changes in the app layer as well. I tried using a few but those did not satisfy the use case and were also a bit harder to implement. I could not find a easy to use option. The present ones returned integers instead of a string token"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python", "Author": "aoeu512", "Content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging. Programmable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement."},
{"Title": "Rethinking String Encoding: a 37.5% space efficient string encoding than UTF-8 in Apache Fury", "Author": "Shawn-Yang25", "Content": "In rpc/serialization systems, we often need to send namespace/path/filename/fieldName/packageName/moduleName/className/enumValue string between processes.\nThose strings are mostly ascii strings. In order to transfer between processes, we encode such strings using utf-8 encodings. Such encoding will take one byte for every char, which is not space efficient actually.\nIf we take a deeper look, we will found that most chars are lowercase chars, ., $ and _, which can be expressed in a much smaller range 0~32. But one byte can represent range 0~255, the significant bits are wasted, and this cost is not ignorable. In a dynamic serialization framework, such meta will take considerable cost compared to actual data.\nSo we proposed a new string encoding which we called meta string encoding in Fury. It will encode most chars using 5 bits instead of 8 bits in utf-8 encoding, which can bring 37.5% space cost savings compared to utf-8 encoding.\nFor string can't be represented by 5 bits, we also proposed encoding using 6 bits which can bring 25% space cost savings"},
{"Title": "PyCon US 2024 is here!", "Author": "monorepo", "Content": "Official Event"},
{"Title": "UXsim 1.3.0 released with vehicle tracking and improved vehicle routing", "Author": "Balance-", "Content": "Main Changes\nAdd GUI functions\nVehicle tracking: You can now track a specific vehicle to see their route\nDataframe viewer: Stats can be confirmed\nImprove vehicle routing functions\nAdd example of routing optimization"},
{"Title": "Auto Data Analysis python packages to know", "Author": "mehul_gupta1997", "Content": "Check this video tutorial to explore different AutoEDA python packages like pandas-profiling, sweetviz, dataprep,etc which can enable automatic data analysis within minutes without any effort : https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry"},
{"Title": "try... except... finally!", "Author": "young-and-ignorant", "Content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally. from your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()"},
{"Title": "Python script to convert Spotify Artists to Playlists", "Author": "RJW-20", "Content": "I've made my first bit of useful software and I wanted to share it here. I'd love some feedback (and it would be amazing to hear if someone has used it!) What My Project Does: Using the third party requests package, the script interacts with the Spotify web API to request all albums from the given Artist, then all the tracks from all of those albums. It then goes through the list to remove any duplicates and also tries to remove any unwanted versions (only done by examining the name of the track, since Spotify does not attribute a version type to its tracks). Once that's done a playlist is then created on your Spotify account with the name of the Artist and all the tracks are posted there in chronological (essentially per album) order."},
{"Title": "Auto Data Analysis python packages to know", "Author": "mehul_gupta1997", "Content": "Check this video tutorial to explore different AutoEDA python packages like pandas-profiling, sweetviz, dataprep,etc which can enable automatic data analysis within minutes without any effort : https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry"},
{"Title": "Durable Python - Infrastructure failures should not stop the process", "Author": "autokitteh", "Content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience. It automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns. Consider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete. import requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)"},
{"Title": "Blat AI generates Python code to do web-scraping (code based on Scrapy framework)", "Author": "arnaupv", "Content": "Miguel Algorri and Arnau Pont V√≠lchez here, blat co-founders! Target Audience\nPeople who need to collect public data from the web (pricing, articles, reviews, leads etc). What does our Project Do?\nAt blat we aim to deliver production-ready web scraping code in minutes (written in Python, Scrapy framework).\nThis is feasible thanks to our Web Scraping AI Agent üß†. Here our CLI to interact with the Web Scraping AI Agent (github). Too good to be true?"},
{"Title": "Folks who know the internals: Where does operator precedence \"happen\"?", "Author": "BeerIsTheMindKiller", "Content": "Hey! Messing around with instaviz, cool library, highly recommend. You can visualize a function's bytecode as well as AST and some other stuff. i entered this: def f():\n  x = 1 + 2 - 10**2\n  return x I was expecting the AST nodes for 1 + 2 - 10**2 to be rearranged somehow, with 10**2 being moved to the left hand of the expression, because exponents get evaluated before addition/subtraction. but no! just looks like this:"},
{"Title": "Folks who know the internals: Where does operator precedence \"happen\"?", "Author": "BeerIsTheMindKiller", "Content": "Hey! Messing around with instaviz, cool library, highly recommend. You can visualize a function's bytecode as well as AST and some other stuff. i entered this: def f():\n  x = 1 + 2 - 10**2\n  return x I was expecting the AST nodes for 1 + 2 - 10**2 to be rearranged somehow, with 10**2 being moved to the left hand of the expression, because exponents get evaluated before addition/subtraction. but no! just looks like this:"},
{"Title": "List of Sites that Packages Need to Connect to?", "Author": "BullCityPicker", "Content": "I'm doing most of my work behind a government firewall, and I'm having trouble connecting to certain sites. I can do the usual \"pip\" installs just fine, but I'm talking about packages that need to download data to do their job. An example is the NLTK (Natural Language Toolkit) package, which downloads dictionaries, lookup tables for sentiment analysis, and so on. I know what sites to open up for that particular problem (pastebin.com and nltk.org), but I wonder if anybody's made a list of such sites for different packages. I can ask for the two sites I know about to be opened up, but I'd like to have a more comprehensive list so I don't have to go through the red tape multiple times."},
{"Title": "Resume Screening Chatbot using RAG Fusion", "Author": "Babe_My_Name_Is_Hung", "Content": "Hi everyone! I recently finished a small side project for my graduating thesis, which is about experimenting with RAG-based frameworks in improving resume screening. What my project does: The project for the thesis is a GPT-4 Chatbot with RAG Fusion retrieval. Given a job description as input, the system retrieves the most relevant candidate profiles to perform follow-up tasks such as analysis, summarization, and decision-making, which can assist the screening process better. The revolving idea is that the similarity-based retrieval process can effectively narrow the initial large pool of applicants down to the most relevant resumes. However, this simple similarity ranking should not be used to evaluate a candidate's actual ability. Therefore, the top resumes are used to augment the GPT-4 Chatbot so it can be conditioned on these profiles and perform further downstream tasks."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Giving New Life to JModelica: Bringing Powerful Modelica Simulations to Python", "Author": "foadsf", "Content": "Five years ago, I posted about JModelica, a fantastic open-source tool for simulating complex systems that combined the ease of Python with the strength of Modelica. Sadly, the project went quiet, but I'm thrilled to share that, thanks to the dedication of a few folks (myself included!), JModelica is back! You can find the revived project on GitHub: https://github.com/JModelica/JModelica. What JModelica Does: JModelica provides a way to write complex simulations using the Modelica language, which is known for its ability to handle differential equations and model physical systems beautifully. The magic of JModelica lies in its Python integration‚Äîyou can solve your Modelica models and access the results directly in Python for in-depth analysis, visualization, and even optimization using libraries you already love!"},
{"Title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation", "Author": "AlSweigart", "Content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books Be sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!) For $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate"},
{"Title": "pip time machine", "Author": "rejectedlesbian", "Content": "https://github.com/nevakrien/time_machine_pip this is a fairly simple project barely anything to it but I think its promising\nthe idea is to put pip in a time machine so it can not use package versions that were made after the project is made. I am doing this by proxiying pypi and cutting out the newer versions. initial tests show that pip respects the proxy and works like you would expect"},
{"Title": "pip time machine", "Author": "rejectedlesbian", "Content": "https://github.com/nevakrien/time_machine_pip this is a fairly simple project barely anything to it but I think its promising\nthe idea is to put pip in a time machine so it can not use package versions that were made after the project is made. I am doing this by proxiying pypi and cutting out the newer versions. initial tests show that pip respects the proxy and works like you would expect"},
{"Title": "Apple Health data exploration with Atlas, Clickhouse, Vega-Altair, Quarto", "Author": "__tosh", "Content": "What My Project Does A few days ago I wrote a simple python script (\"Atlas\") that turns the Apple Health export.xml file (which is about 1 GB in my case, with about 10 years of data) into a very simple parquet file (a bit like a compressed CSV) that is also way smaller (40 MB). The parquet file has 5 columns:\ntype (e.g. \"CyclingDistance\")\nvalue (e.g. \"12.100\")"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Pip 24.1 beta released, and it's a big one", "Author": "zurtex", "Content": "I'd like to call attention to pip 24.1 beta asit is unusual for the pip team to release betas:\nhttps://pip.pypa.io/en/latest/news/#b1-2024-05-06\nhttps://pypi.org/project/pip/24.1b1/\nYou can install with: python -m pip install pip==24.1b1 In particular they have upgraded their vendored version of packaging from 21.3 to 24.0, this was a and , included significant performance improvements, and will allow pip to support . However, it also means legacy versions and specifiers are with pip."},
{"Title": "CLI to embed code snippets in your README, from actual (testable) code", "Author": "realazthat", "Content": "What My Project Does What My Project Does: snipinator is a CLI to embed (testable) snippets from your codebase into your README, using Jinja2 and functions provided by snipinator to assist with embedding code, shell output, etc. Please provide any feedback in the comments or GH issues. Target Audience Target Audience: Developers of {GitHub,other} projects that have a README. It works for me, it might work for you. Comparison Features:\nSupports anything Jinja2 supports."},
{"Title": "Building an LLM chat application using RAG Agent", "Author": "iryna_kondr", "Content": "Motivation\nChatbots are among the most popular applications of large language models (LLMs). Often, an LLM's internal knowledge base is adequate for answering users questions. However, in those cases, the model may generate outdated, incorrect, or too generic responses when specificity is expected. These challenges can be partially addressed by supplementing the LLM with an external knowledge base and employing the retrieval-augmented generation (RAG) technique. However, if user queries are complex, it may be necessary to break the task into several sub-parts. In such cases, relying solely on the RAG technique may not be sufficient, and the use of agents may be required."},
{"Title": "I made a python bot that plays minesweeper", "Author": "_dwightshrute", "Content": "Hello, I made this Minesweeper bot that I wanted to share with you all. What My Project Does - The bot takes a screenshot of the board and runs a classification algorithm to extract the contents of the board. It then analyzes the board, finds as many mines as it can, and sends clicks. If it cannot find any mines then it guesses the most probable position of a mine. Target Audience - It's a toy project for anyone interested in algorithms or problem-solving. Comparison - This is just my attempt at making a minesweeper bot. I'm sure there are many bots out there that are much more efficient than this."},
{"Title": "A Beginner's Guide to Unit Testing with Pytest", "Author": "Stanulilic", "Content": "Hey r/python! I wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link."},
{"Title": "Building an LLM chat application using RAG Agent", "Author": "iryna_kondr", "Content": "Motivation\nChatbots are among the most popular applications of large language models (LLMs). Often, an LLM's internal knowledge base is adequate for answering users questions. However, in those cases, the model may generate outdated, incorrect, or too generic responses when specificity is expected. These challenges can be partially addressed by supplementing the LLM with an external knowledge base and employing the retrieval-augmented generation (RAG) technique. However, if user queries are complex, it may be necessary to break the task into several sub-parts. In such cases, relying solely on the RAG technique may not be sufficient, and the use of agents may be required."},
{"Title": "How Python Asyncio Works: Recreating it from Scratch", "Author": "jpjacobpadilla", "Content": "Do you understand how asyncio works behind the scenes? Read this article and see how you can use Python generators to create your own version of asyncio, and then use the __await__ dunder method to use the async/await keywords to come full circle! https://jacobpadilla.com/articles/recreating-asyncio"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "What changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ?", "Author": "These_Shoe3594", "Content": "What are all the changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ? There are some CVE fixes available in the latest 3.x version of werkzueg. To take the fixes as part of my code, we want to upgrade the version. When I do so, I‚Äôve faced lot of breakages. I found some on documents and release notes. But it would be easier if someone already did some changes regarding this."},
{"Title": "Production grade AI Web apps, just using python ?", "Author": "prime_danger", "Content": "Hey guys, I have worked on building multiple ai/ml usecases and their specific backends. But now I want build interfaces for easy and quick integration. I saw a blog which used FastUI which looks quick decent but when I tried it just showed me a Json of elements on the page. Are there any other libraries I should use? ü§î"},
{"Title": "What changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ?", "Author": "These_Shoe3594", "Content": "What are all the changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ? There are some CVE fixes available in the latest 3.x version of werkzueg. To take the fixes as part of my code, we want to upgrade the version. When I do so, I‚Äôve faced lot of breakages. I found some on documents and release notes. But it would be easier if someone already did some changes regarding this."},
{"Title": "Reactive programming for Python with live-cells-py", "Author": "alex-gutev", "Content": "live-cells-py (Live Cells Python) is a reactive programming library which I ported from Live Cells for Dart.\nWhat my project Does:\nYou can declare cells which are observable containers for data: import live_cells as lc\n\na = lc.mutable(0)"},
{"Title": "Build tool support for PySide / PyQt", "Author": "jmacey", "Content": "Just interested in how people approach this, typically I just use VSCode or QtCreator to build simple projects. However I now want to automate some of the build process such as running uic, and rcc. I've tried to use CMake but can't seem to get it to work without a lot of custom scripting (for example the AUTOUIC etc functions need c++ projects), can't see any info on running uic in QtCreator (which would be ideal but python support is really just an after thought). I could write some Makefiles but this is a little ad-hoc and also confuses the IDE's (and at the end of the day I want a simple process for my students to use and I already teach cmake for C++ dev)."},
{"Title": "Langchain using llama3 to build recommendation system", "Author": "yngwieHero", "Content": "Hi, Recently I played a bit with LLMs, specifcally exploring ways of running the models locally and building prompts using LangChain. As a result ended up coding a small recommendation system, powered with Llama3-7b model, which suggests topics to read on HackerNews. Wanted to share my experiences, so I wrote a small article where I described all my findings.\nHope you'll like it: https://lukaszksiezak.github.io/ScrapyToLLM/ Github repo: https://github.com/lukaszksiezak/ScrapyToLLM What the project does: It's a Python application which uses scrapy to scrape HackerNews page. Scraped articles are pipelined to redis, which is then feeding Llama3 using langchain. Prompter is configured to serve a user articles which are matching his request."},
{"Title": "map_plotter - abstracts complexity of creating intensity plots overlaid onto global map", "Author": "teamamentum", "Content": "What My Project Does\nOverlaying intensity plots onto a geographical map using cartopy/matplotlib can be complex. So we created this map_plotter package to abstract away that complexity for a common use case. Installation (opinionated use of conda to avoid cartopy dependency hell and install precompiled binaries) conda install cartopy\ngit clone git@github.com:amentumspace/map_plotter.git\ncd map_plotter\npip install ."},
{"Title": "The possibility to build Android apps with python professionally is here and needs your support.", "Author": "klargstein", "Content": "You guys really need to check this. I believe new comers to python would love to tinker with the android ecosystem from the safety of python :-) Imgur: https://imgur.com/gallery/DtfwOVi https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course Edit: added imgur link."},
{"Title": "Is PyGame still alive?", "Author": "pyeri", "Content": "So it was a long time ago in the good old Python 2.x days (circa 2010 probably) that I had learned PyGame with some tutorials at my former work place. But nowadays since I mostly freelance with business apps, I never felt the need for it. But since such a game development project is on the horizon after all these years, I was wondering if PyGame can still be up for the task with Python 3.x? Or is there a better Python library available these days? I don't need any advanced gaming features of modern day VFX or anything, all I need is some basic Mario/Luigi style graphics, that's all!"},
{"Title": "Langchain using llama3 to build recommendation system", "Author": "yngwieHero", "Content": "Hi, Recently I played a bit with LLMs, specifcally exploring ways of running the models locally and building prompts using LangChain. As a result ended up coding a small recommendation system, powered with Llama3-7b model, which suggests topics to read on HackerNews. Wanted to share my experiences, so I wrote a small article where I described all my findings.\nHope you'll like it: https://lukaszksiezak.github.io/ScrapyToLLM/ Github repo: https://github.com/lukaszksiezak/ScrapyToLLM What the project does: It's a Python application which uses scrapy to scrape HackerNews page. Scraped articles are pipelined to redis, which is then feeding Llama3 using langchain. Prompter is configured to serve a user articles which are matching his request."},
{"Title": "relax-py - Web framework for htmx with hot module replacement", "Author": "MindLopsided4430", "Content": "Excited to finally showcase this! It's still pretty rough around the edges, but I'm finally happy enough with the feature set and curious to see what the community thinks about a framework like this. Code: github.com/crpier/relax-py Documentation: crpier.github.io/relax-py What My Project Does relax-py is a Python framework for building full-stack applications with htmx It provides tools for writing HTML in a manner similar to simple_html (which also inspired the decision to use standard Python to write HTML, rather than use Jinja2 or to make something like templ work in Python) It has:"},
{"Title": "PyCon US 2024 is here!", "Author": "monorepo", "Content": "Official Event"},
{"Title": "PyCon US 2024 is here!", "Author": "monorepo", "Content": "Official Event"},
{"Title": "You should only use licensed version of python", "Author": "vikashgraja", "Content": "I‚Äôm an intern in a company and I automated some processes using python. My company‚Äôs IT wing said that as long as it is a licensed software you can use it in our company. In my mind I was like where the f I‚Äôm going to get a license for an open source software. Note : They mention that another team has been using licensed python. I thought either IT is so stupid or that team is so smart that they brought license for pycharm or anaconda (claim that it is a Python license) and fooled IT. If I am wrong then tell me where I can get that license. And I am also looking for job in data analyst."},
{"Title": "Track the size of your PyInstaller packages in CI", "Author": "bencherdev", "Content": "If you have ever wanted to track the size of your PyInstaller packages in CI, Bencher now supports tracking your package size: https://bencher.dev/docs/how-to/track-file-size/"},
{"Title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"", "Author": "AlSweigart", "Content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs I'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10) Once printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become."},
{"Title": "python-oracledb 2.2 and the VECTOR type in Oracle Database 23ai", "Author": "cjbj", "Content": "python-oracledb 2.2, the Oracle Database driver, has been released with support for Oracle Database 23ai features such as the VECTOR and BOOLEAN data types, Implicit Connection Pooling, and improved connection performance. See the release announcement."},
{"Title": "Blat AI generates Python code to do web-scraping (code based on Scrapy framework)", "Author": "arnaupv", "Content": "Miguel Algorri and Arnau Pont V√≠lchez here, blat co-founders! Target Audience\nPeople who need to collect public data from the web (pricing, articles, reviews, leads etc). What does our Project Do?\nAt blat we aim to deliver production-ready web scraping code in minutes (written in Python, Scrapy framework).\nThis is feasible thanks to our Web Scraping AI Agent üß†. Here our CLI to interact with the Web Scraping AI Agent (github). Too good to be true?"},
{"Title": "Blat AI generates Python code to do web-scraping (code based on Scrapy framework)", "Author": "arnaupv", "Content": "Miguel Algorri and Arnau Pont V√≠lchez here, blat co-founders! Target Audience\nPeople who need to collect public data from the web (pricing, articles, reviews, leads etc). What does our Project Do?\nAt blat we aim to deliver production-ready web scraping code in minutes (written in Python, Scrapy framework).\nThis is feasible thanks to our Web Scraping AI Agent üß†. Here our CLI to interact with the Web Scraping AI Agent (github). Too good to be true?"},
{"Title": "I created a Python script that makes it easier to track how your baby's sleep is improving", "Author": "BX1959", "Content": "My wife and I use the Huckleberry app to track our baby's sleep periods. Although the free version of the app allows you to view a number of sleep-related metrics, I also wanted to see whether his longest nightly sleep stretches were getting longer over time. Therefore, I created a Python project to help me answer this and other questions I had about my baby's sleep.\nWhat My Project Does\nThis project reads in data from a Huckleberry .csv export (or a separate custom .csv file); analyzes its sleep information; and then produces ."},
{"Title": "Dash Pip Components", "Author": "Soolsily", "Content": "What My Project Does\nHey everyone, just released 8 new pip components for plotly and dash including:\nFull Calendar Component - A Full Calendar Component for Dash\nDash Summernote - A rich text WYSIWYG Editor for Dash\nDash Emoji Mart - A Slack-like Emoji Picker for Dash\nDash Charty - A Charting Library for Dash"},
{"Title": "Reviewing Dataframe Changes? Looking for Your Preferred Methods!", "Author": "rageagainistjg", "Content": "After playing around with a dataframe‚Äîapplying filters or other transformations‚ÄîI'm curious about your methods for reviewing the changes. In VS Code, the variable explorer is quite handy for a quick look at the modified dataframe. Alternatively, when working in a Jupyter notebook within VS Code, exporting the data to an Excel file provides a detailed view and allows for an easy deep dive into the results. What are your preferred practices for ensuring your data adjustments are precisely what you intended?"},
{"Title": "I've started writing Python bindings for lexertl", "Author": "BenHanson", "Content": "See https://github.com/BenHanson/pylexertl I will see about registering as an official library when I am happy I have completed all the bindings. I added all the missing functions for the rules objects today, so things are in reasonable shape already. My python experience has been limited up until now, but it is big for my new role. I have a runtime parser generator https://github.com/BenHanson/parsertl17 which I also plan to add bindings for. I hope this is of interest to somebody! What My Project Does Allows you to build lexical analysers at runtime and use them to lex text (in this case utf-8)"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ChatGPT can talk with all my Python notebooks", "Author": "pp314159", "Content": "I'm working on an open-source framework for converting Python notebooks into web applications, it is called Mercury. Recently, I have added an option to execute notebooks with REST API. You can pass paramters in POST request body to the notebook, execute all cells and return JSON as response. I'm also running a SaaS service, Mercury Cloud where you can deploy notebooks with one-click with unique website domain. What My Project Does It makes Python notebooks extermely easy to integrate with custom ChatGPT, so GPT can execute Python notebooks and get response. It is 3-steps process:"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Framework to use for backend", "Author": "Clickyz", "Content": "Hello guys I recently decided to move from nodejs(expressjs) to python for general purposes but mostly for backend. I have couple of questions.\nWill i regret my migration to python? :)\nWhich framework you suggest for backend solo dev?\nAnd what tips are you suggesting me in general to get used to python."},
{"Title": "Library for automatic Cython 3.0 code annotations generation.", "Author": "Cool-Nefariousness76", "Content": "Hi everybody, over the last year I've been developing a library that adds some Cython 3.0 annotations to existing python code. What My Project Does: For example if it sees a for i in range(): in a function it recognizes i as an integer and adds a i = cython.declare(cython.int)line at the beginning of the function. It actually uses the built-in ast module under the hood for parsing, I found it a super useful library! Target Audience: It is a side project I made mainly for fun. I don't know if it can be of interest to anybody, or if it could have some potential utility."},
{"Title": "Introducing PgQueuer: A Minimalist Python Job Queue Built on PostgreSQL", "Author": "GabelSnabel", "Content": "What My Project Does PgQueuer is a Python library designed to manage job queues using PostgreSQL features. It leverages PostgreSQL's native LISTEN/NOTIFY, along with advanced locking mechanisms, to handle job queues efficiently. This allows for real-time job processing, concurrency, and reliable task execution without the need for a separate queuing system. Target Audience PgQueuer is ideal for developers and teams who already use PostgreSQL in their projects and are looking for a simple, integrated way to handle background tasks and job queues. It's designed for production use, offering a dependable solution that scales seamlessly with existing PostgreSQL databases."},
{"Title": "New Python-only abstractions for extracting data from apis", "Author": "Thinker_Assignment", "Content": "Hey there, you are probably familiar with REST APIs.\nWe at dlt library added a new way to get data from apis (and dlt can already load it with best practice to db or parquet). We already did some internal hackathons but we would appreciate your feedback so we can improve it further\n- Our new REST API Source is a short, declarative configuration driven way of creating sources.\n- Our new REST API Client is a collection of Python helpers used by the above source, which you can also use as a standalone, config-free, imperative high-level abstraction for building pipelines.\nYou can read more about the source here or go to our docs for the REST APIClient info\n\nPS: see you at Pycon Pittsburgh!"},
{"Title": "APScheduler vs Schedule package", "Author": "kostakos14", "Content": "Hey folks, looking to use one library to implement some background scheduling logic on my application. I find in Google search APScheduler to be frequently mentioned, but I can see the Schedule package has more GH stars. Was curious if anybody has used one of them, and which one would you recommend based on your own experience."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Introducing Notolog: Python Markdown Editor built with PySide6", "Author": "devotaku", "Content": "Excited to share my personal open-source project: Notolog - Python Markdown Editor (MIT License). The main motivation for developing another markdown editor was my passion for learning new things and enhancing my development skills in Python. I developed it in my spare time over a few months, despite having no prior experience in creating full-scale Python applications. What My Project Does ‚àó Multiplatform ‚àó Markdown async syntax highlighting created by me ‚àó Several pre-installed color themes ‚àó Supports English and 17 other languages right out of the box ‚àó Integration with OpenAI API for AI-assisted features"},
{"Title": "Interactive Data Visualization with Python: A Showcase of Plotly Dash", "Author": "AbhishekSuryavanshee", "Content": "What My Project Does:\nI'm excited to introduce my latest project built with Python ‚Äì an interactive data visualization application using Plotly Dash. This project aims to empower users to explore and analyze datasets dynamically through interactive visualizations. By leveraging Plotly Dash's capabilities, users can interact with data in real-time, customize visualizations on the fly, and gain deeper insights with just a few clicks. Target Audience:\nThis project caters to a wide range of users, from data enthusiasts and analysts to professionals seeking to communicate insights effectively. Whether you're a data scientist exploring patterns in large datasets or a business analyst presenting findings to stakeholders, this tool is designed to streamline your workflow and enhance your data storytelling capabilities. It's suitable for both production-grade applications and educational purposes, offering a versatile platform for data visualization tasks of varying complexity."},
{"Title": "Reboot Your Router with a Python Script", "Author": "SAV_NC", "Content": "Hello r/python, I've developed a Python script that allows you to reboot your router remotely via SSH! This script handles the countdown and checks when the router is back online after a reboot. What My Project Does: Key Features:\nAutomated Router Reboot: Remotely trigger a reboot of your router.\nMonitoring: After sending the reboot command, the script counts down from 350 seconds and starts checking the router's status by pinging it after the first 100 seconds have passed."},
{"Title": "I've developed a library for send metrics to zabbix asynchronously", "Author": "Royal_Section4889", "Content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this. Tests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async What My Project Does Send zabbix sender messages using asyncio tasks. Target Audience SysAdmins who use Zabbix to monitor a large number of metrics. Comparison Instead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix"},
{"Title": "Declarative GUI Slint v1.6 released with Design Mode (WYSIWYG) Improvements", "Author": "madnirua", "Content": "https://slint.dev/blog/slint-1.6-released Slint is a declarative GUI toolkit to build native user interfaces for desktop and embedded applications. Find more information at https://slint.dev/ or check out the source code at https://github.com/slint-ui/slint. EDIT: The Python APIs are currently in alpha. More info -- https://github.com/slint-ui/slint/tree/master/api/python"},
{"Title": "Opinions sought: Modernising the Apache NiFi Python client", "Author": "Samausi", "Content": "Hello folks, I am the author of NiPyAPI, the defacto Python client for the Apache NiFi project. For those unfamiliar, Apache NiFi is an open-source ETL tool designed around the flow-based programming paradigm. It excels at continuously moving and managing arbitrary data flows between disparate systems with low latency at large scale, and is often contrasted with Airflow. Amongst many features, NiFi allows for Command & Control via a native UI, enabling live edits to data routing and transformation. NiFi also enforces an API-first approach, and produces a swagger definition during code compilation, which allowed creation of a Python client to enable automated Data Flow testing and a Design & Deploy approach by running it through tool shaped by mustache templates. This produces a verbose low-level client, which I then leverage in higher-level operational functions and demo scripts in the library."},
{"Title": "I made a Python text to speech library - Pyt2s", "Author": "asksumanth", "Content": "What my project does: It supports services like IBM Watson, Acapela and Stream labs' demo websites to convert your text to speech. Target audience: It's a toy project and would not recommend you to use in Production. Comparison: It's wayyyyy easy to use. Just pip install and use in your project. No extra setup required like other libraries. Also supports various languages and voices and accents. Check docs for more. Here is the link to repository. Please go do check it out and star it if it's helpful to you guys. Thank you. I made this library taking inspiration from this php tts library by chrisjp."},
{"Title": "Implementing your own pypi clone", "Author": "chione99", "Content": "Hi, Just want to know how difficult is it to manage your own pypi clone and how do you recommend to create a seperation between dev and prod systems."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Interactive plots in the terminal", "Author": "Spiffidimus", "Content": "I made a library to create interactive plots in the terminal (pip install itrm). It uses braille characters (by default) to display the data with sub-character resolution. There are several keybindings for moving a vertical cursor left and right, for zooming in or out on data, and for changing which curve to focus on. There are occasions (such as when working with a server) where MatPlotLib is not an option and the terminal is the only available tool. But, in my opinion, it is actually faster to use this tool (itrm) to zoom in on interesting parts of data and analyze patterns than using other tools like MatPlotLib. In fact, with large data sets (~1 million points), this tool actually renders faster than MatPlotLib. Please check it out and let know what you think."},
{"Title": "Python Test 220: Getting the most out of PyCon, including juggling - Rob Ludwick", "Author": "variedthoughts", "Content": "Listen at https://podcast.pythontest.com/episodes/220-juggling-pycon\nEven if you never get a chance to go to PyCon, I hope this interview helps you get a feel for the welcoming aspect of the Python community. The juggling at PyCon is one of the inspirations for PythonPeople.fm, one of PythonTests's sibling podcasts. Do you have any conference tips to add?"},
{"Title": "Manage Your Squid Proxy Server Efficiently with This Python Script", "Author": "SAV_NC", "Content": "ü¶ë Squid Proxy Manager Script Hello fellow Python enthusiasts! I've created a Python script that makes managing your Squid Proxy Server a breeze. If you're looking for an efficient and straightforward way to interact with your Squid server remotely, this script is for you. üéâ What My Project Does The Squid Proxy Manager script allows you to manage your Squid Proxy Server remotely using a simple command-line interface. Here are some of the key features:\nCheck Squid Service Status: Quickly check if your Squid service is running or not."},
{"Title": "Hi! I've published a Python client for IBKR REST and WebSocket APIs - IBind. Hope you like it üëã", "Author": "VoyZan", "Content": "Hi! I want to share a library I've built recently. IBind is a REST and WebSocket Python client for Interactive Brokers Client Portal Web API. It is directed at IBKR users. You can find IBind on GitHub: https://github.com/Voyz/ibind What My Project Does: It is a REST and WebSocket API for the Interactive Brokers' Web API. I'm particularly proud of a few things in this release:\nThe REST and WebSocket API clients are based on an abstract base class RestClient and WsClient accordingly. These could be implemented to use some other Web APIs in a relatively straightforward way. I have in fact used a version of that for a cryptocurrency WebSocket API, and it is nice to see it adapt to a different environment."},
{"Title": "Suggestions for python libraries to contribute to", "Author": "JimJimBerry", "Content": "Hey, python folks ! I have been coding in python for around 3 years, 2 years professionally. I have worked with asyncio, typing and other stuff that is needed to build a server. I was looking for a small but impactful enough open source core python library/application to work on. I tried cpython but it seems to be beyond my capability at the moment. As for my interests I was interested in lower level stuff as well as libraries like asyncio and celery. Any suggestions for libraries that could use a bit of help and teach me some stuff as well would be appreciated"},
{"Title": "modern_colorthief - Modified Median Cut Quantization algorithm in rust + python", "Author": "BasePlate_Admin", "Content": "github\ndocumentation\nWhat my project does : It gets the dominant color/color palette from given image. Target Audience: Anyone Usage modern_colorthief exposes two functions get_color and get_palette Here is how to use get_color: from modern_colorthief import get_color\n\n# Path to any image\npath = ...\n\nprint(get_color(path)) # returns tuple[int,int,int]"},
{"Title": "Python Streamlit Spotlight Tutorial: an Interactive Dashboard using UNHCR Refugee Data", "Author": "jgloewen", "Content": "Python Streamlit is a terrific tool for creating interactive data visualizations. It packages all your visualizations up into a neat little application - including charts and maps - and displays them in your default browser. No muss, no fuss. Recently, I found a new dataset (to me) on the UN High Commission for Refugees (UNHCR) website. It contains country-to-country movements for refugees both from origin country and country of asylum Using this dataset, here's a step-by-step on how to code a Python Streamlit application that has:"},
{"Title": "Project: Simple Interactive Python Streamlit Maps With NASA GIS Data", "Author": "jgloewen", "Content": "Python Streamlit is terrific for putting together interactive dashboards. Combined with the geopandas library, streamlit can easily display GIS data points on a map for you. Forest fires in my home province of British Columbia, Canada have been really bad recently. NASA has a terrific dataset that keeps track of forest fires by country. Can I use Streamlit to access this dataset and display a map off all the fires within a certain area (BC) for a particular time frame (2021)? And can I give the user the ability to choose a month? You bet! Let me step you through how! FREE tutorial (with code):"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "HS-transform, python package for hyperbolic S-transform in signal processing", "Author": "Ok_Employ_2414", "Content": "I made a python package for S-transform with Hyperbolic window (Hyperbolic S-transform or HSTransform package). This is my first time publishing a python package, so the project is still far from stable and still under beta release.\nWhat my project does: This transformation is applied to signal processing, analyzing transient changes of a signal during very short-time. Some special use case can be in power system signal, or Geophysical signal analysis, or MRI ..."},
{"Title": "IP subnet or IP calculator tool need feedback", "Author": "nicanorflavier", "Content": "Hey folks, I've been dabbling with a Python project recently that's all about making life easier for us I.T. people. It's a nifty little tool that calculates IP subnets and does IP calculations from the command or CLI. Here's the GitHub link and the code: https://github.com/nicanorflavier/ipnet I‚Äôm pretty stoked about it, but I know there‚Äôs always room for improvement. So, I thought, better to turn to than the wise minds of this python community? I‚Äôm all ears for any feedback, tips, tricks, or advice you guys might have. Thanks a ton in advance!"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a cheatsheet for pydash", "Author": "poopatroopa3", "Content": "https://brunodantas.github.io/pydash-cheatsheet/en/\nWhat my project does: pydash is a library with great potential to make you code more Functional and simple. I made this cheatsheet a while ago to highlight some of the most useful functions of the library, since there are so many. I hope it's useful.\nTarget audience: anyone who is interested in pydash, functional programming, not reinventing the wheel."},
{"Title": "Frame - a new language for programming state machines in Python", "Author": "framelanger", "Content": "Hey, I am (re)releasing a project called Frame that I've been working on to create a language and transpiler to easily create state machines/automata in Python. It also is able to generate UML documentation as well. This project is for people who are interested in programming state machines for a wide range of purposes such as game programming, workflows, MBSE modeling as well as school projects for comp sci theory. It is also useful simply for generating flow documentation. The Framepiler (Frame transpiler) is in beta at this time. It would be great to get feedback from the Python community on any gaps in key functionality or bugs."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "HS-transform, python package for hyperbolic S-transform in signal processing", "Author": "Ok_Employ_2414", "Content": "I made a python package for S-transform with Hyperbolic window (Hyperbolic S-transform or HSTransform package). This is my first time publishing a python package, so the project is still far from stable and still under beta release.\nWhat my project does: This transformation is applied to signal processing, analyzing transient changes of a signal during very short-time. Some special use case can be in power system signal, or Geophysical signal analysis, or MRI ..."},
{"Title": "New book! The Quick Python Book, Fourth Edition by Naomi Ceder", "Author": "ManningBooks", "Content": "Hello everybody, Thank you for having us here, and a huge \"Thank you\" to the moderators for letting us post. We have just released the latest edition of The Quick Python Book by the one-and-only Naomi Ceder, and I wanted to share that news with the community. Many of you are already familiar with Naomi's work and her massive contributions to the world of Python programming language. The Quick Python Book has aided over 100,000 developers in mastering Python. The Fourth Edition of the book has been revised to include the latest features, control structures, and libraries of Python, along with new coverage of working with AI-generated Python code. Naomi, the author, has beautifully balanced the details of the language with the insights and advice required to accomplish any task. Her personal touch has made learning Python an enjoyable experience for countless developers."},
{"Title": "SQLPage - a Python library to add string token based pagination easily", "Author": "kernelslayer", "Content": "What My Project Does - This is a Python package to easily add string token based pagination. Currently it supports SQLModel and SQLAlchemy ORMs. Recently I wanted to add pagination in one of my Python projects and in the API response, I had to return a string next page token. Now I could not find a straight-forward way of doing this in Python. All of the tutorials or blog posts I saw, there in the response the server always returned a page_number, page_size, and total_elements and then the onus was on the calling service to adjust this accordingly.  Comparison - The current packages and methods requires some changes in the app layer as well. I tried using a few but those did not satisfy the use case and were also a bit harder to implement. I could not find a easy to use option. The present ones returned integers instead of a string token"},
{"Title": "Pre-commit hook to keep coverage badge in README up to date", "Author": "60percentcocoa", "Content": "Wrote this as a tool to keep README coverage badges up to date without relying on 3rd party services or having to do anything extra, thought others might get some utility out of it: coverage-pre-commit. A .coverage file is expected at the root of the project, generated by running coverage run directly or using a plugin such as pytest-cov when running tests. Most convenient when used as a pre-push hook imo. Feel free to opine, be it positive or negative!"},
{"Title": "I made a cheatsheet for pydash", "Author": "poopatroopa3", "Content": "https://brunodantas.github.io/pydash-cheatsheet/en/\nWhat my project does: pydash is a library with great potential to make you code more Functional and simple. I made this cheatsheet a while ago to highlight some of the most useful functions of the library, since there are so many. I hope it's useful.\nTarget audience: anyone who is interested in pydash, functional programming, not reinventing the wheel."},
{"Title": "typedattr: Autocompletion and typechecking for CLI script arguments, using standard argparse syntax", "Author": "gings7", "Content": "Excited to share my pypi package typedparser I have been working on for around 1 year now. What My Project Does: It enables writing CLI scripts and create an \"args\" variable with autocompleted members and type checks, but still keeps the simple and universally understood syntax of the stdlib argarse module. Target Audience: For stability, I battletested it in my research projects and added automatic builds as well as 80%+ test coverage. So I believe it is pretty stable. Comparison: For typing functionality it uses the attrs package as backend. It also provides some additional features for object and dictionary manipulation. Of course there are many other CLI argument packages out there, but this one stands out in that it tries to keep the syntax of the argparse standard library as much as possible, making it easy for others to figure out what your script does. Check it out and let me know what you think."},
{"Title": "UXsim 1.3.0 released with vehicle tracking and improved vehicle routing", "Author": "Balance-", "Content": "Main Changes\nAdd GUI functions\nVehicle tracking: You can now track a specific vehicle to see their route\nDataframe viewer: Stats can be confirmed\nImprove vehicle routing functions\nAdd example of routing optimization"},
{"Title": "PyWolt: Wolt food delivery service API wrapper", "Author": "daivushe1", "Content": "I'm thrilled to share my first open-source project with you all: PyWolt! üéâ PyWolt is a Python library that makes it super easy to interact with the Wolt API.\nWhat My Project Does:\nDiscover Venues: Find nearby spots to grab a bite.\nExplore Menus: Dive into a venue's menu and pick your favorites.\nTarget Audience:"},
{"Title": "Dash vs Reflex vs Others", "Author": "Sea_Split_1182", "Content": "Where can I find a decent comparison (pros and cons) of these 5 solutions? They seem to be solving the same problem, which is, afaiu, separating the frontend ‚Äòannoyance‚Äô from Python scripting / math.\n‚Å†Reflex (used to be called Pynecone) https://reflex.dev\n‚Å†Streamlit https://streamlit.io\n‚Å†Gradio https://gradio.app\n‚Å†Dash https://dash.plotly.com"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Resume Screening Chatbot using RAG Fusion", "Author": "Babe_My_Name_Is_Hung", "Content": "Hi everyone! I recently finished a small side project for my graduating thesis, which is about experimenting with RAG-based frameworks in improving resume screening. What my project does: The project for the thesis is a GPT-4 Chatbot with RAG Fusion retrieval. Given a job description as input, the system retrieves the most relevant candidate profiles to perform follow-up tasks such as analysis, summarization, and decision-making, which can assist the screening process better. The revolving idea is that the similarity-based retrieval process can effectively narrow the initial large pool of applicants down to the most relevant resumes. However, this simple similarity ranking should not be used to evaluate a candidate's actual ability. Therefore, the top resumes are used to augment the GPT-4 Chatbot so it can be conditioned on these profiles and perform further downstream tasks."},
{"Title": "IconMatch - find icons and letters positions from images!", "Author": "TraditionalDistrict9", "Content": "Hey all, I am not the original creator, but found that 4yo project, and decided to revive it! What my project does: IconMatch is library allowing you to extract icons and letter positions from image or from display! There is also realtime demo on repo showcasing how it works! Target Audience: For all detecting objects from display! Comparison: I did not find other project like that - but it was my first find too! It is also not OCR! https://github.com/NativeSensors/IconMatch Have fun!"},
{"Title": "Giving New Life to JModelica: Bringing Powerful Modelica Simulations to Python", "Author": "foadsf", "Content": "Five years ago, I posted about JModelica, a fantastic open-source tool for simulating complex systems that combined the ease of Python with the strength of Modelica. Sadly, the project went quiet, but I'm thrilled to share that, thanks to the dedication of a few folks (myself included!), JModelica is back! You can find the revived project on GitHub: https://github.com/JModelica/JModelica. What JModelica Does: JModelica provides a way to write complex simulations using the Modelica language, which is known for its ability to handle differential equations and model physical systems beautifully. The magic of JModelica lies in its Python integration‚Äîyou can solve your Modelica models and access the results directly in Python for in-depth analysis, visualization, and even optimization using libraries you already love!"},
{"Title": "I made a React-like web framework for Python üëã", "Author": "Rawing7", "Content": "I'm Paul, one of the creators of Rio. Over the years I've tried many different established python GUI frameworks, but none of them really satisfied me. So I teamed up with a few like minded developers and spent the last few months to create our own framework. Rio is the result of this effort. What My Project Does Rio is a brand new GUI framework that lets you create modern web apps in just a few lines of Python. Our goal is to simplify web and app development, so you can focus on the things you care about, instead of wasting countless hours on frustrating user interface details. We do this by following the core principles of Python that we all know and love. Python is supposed to be simple and compact - and so is Rio. There is no need to learn any additional languages such as HTML, CSS or JavaScript, because all of the UI, Logic, Components and even layouting is done entirely in Python. There‚Äôs not even a distinction between front-end and back-end. Rio handles all of the communication transparently for you."},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It‚Äôs a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "Tutorial: Simple Pretty Maps That Will Improve Your Python Streamlit Skills", "Author": "jgloewen", "Content": "Interactive web applications for data visualization improve user engagement and understanding. These days, Streamlit is a very popular framework used to provide web applications for data science. It is a terrific programming tool to have in you Python knowledge toolbox. Here‚Äôs a fun and practical tutorial on how to create a simple interactive and dynamic Streamlit application. This application generates a beautiful and original map using the prettymaps library. Free article: HERE"},
{"Title": "IconMatch - find icons and letters positions from images!", "Author": "TraditionalDistrict9", "Content": "Hey all, I am not the original creator, but found that 4yo project, and decided to revive it! What my project does: IconMatch is library allowing you to extract icons and letter positions from image or from display! There is also realtime demo on repo showcasing how it works! Target Audience: For all detecting objects from display! Comparison: I did not find other project like that - but it was my first find too! It is also not OCR! https://github.com/NativeSensors/IconMatch Have fun!"},
{"Title": "The new REPL in Python 3.13.0 beta 1", "Author": "treyhunner", "Content": "Python 3.13.0 beta 1 was released today. The feature I'm most excited about is the new Python REPL. Here's a summary of my favorite features in the new REPL along with animated gifs. The TLDR:\nSupport for block-leveling history and block-level editing\nPasting code (even with blank lines within it) works as expected now\nTyping exit will exit (no more Use exit() or Ctrl-D (i.e. EOF) to exit message)"},
{"Title": "DeepFusion: a highly modular Deep Learning Framework.", "Author": "atharvaaalok1", "Content": "What My Project Does: Hello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning. And Voila... I've developed a deep learning library, DeepFusion! Details: It's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code. You can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion"},
{"Title": "CLI to embed code snippets in your README, from actual (testable) code", "Author": "realazthat", "Content": "What My Project Does What My Project Does: snipinator is a CLI to embed (testable) snippets from your codebase into your README, using Jinja2 and functions provided by snipinator to assist with embedding code, shell output, etc. Please provide any feedback in the comments or GH issues. Target Audience Target Audience: Developers of {GitHub,other} projects that have a README. It works for me, it might work for you. Comparison Features:\nSupports anything Jinja2 supports."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer What My Project Does: MyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience. mytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/"},
{"Title": "Tutorial: Simple Pretty Maps That Will Improve Your Python Streamlit Skills", "Author": "jgloewen", "Content": "Interactive web applications for data visualization improve user engagement and understanding. These days, Streamlit is a very popular framework used to provide web applications for data science. It is a terrific programming tool to have in you Python knowledge toolbox. Here‚Äôs a fun and practical tutorial on how to create a simple interactive and dynamic Streamlit application. This application generates a beautiful and original map using the prettymaps library. Free article: HERE"},
{"Title": "Calculating Virtual Cycling Power With Python", "Author": "TokenChingy", "Content": "I was doing some light reading and stumbled across Steve Gribbles Power vs Speed Calculator and thought I'd give it a go at rebuilding it based on his Physics model using Python. Then I wrote an article about. Thought I'd share it with you all: Calculating Virtual Cycling Power (jasonlei.com)"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient Code", "Author": "Slow_Scene_7972", "Content": "Optimize Your Python Workflow: Proven Techniques for Crafting Production-Ready Code Link"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Thank You PyConUS 2024 !!!", "Author": "ryanstephendavis", "Content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon... I've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture."},
{"Title": "map_plotter - abstracts complexity of creating intensity plots overlaid onto global map", "Author": "teamamentum", "Content": "What My Project Does\nOverlaying intensity plots onto a geographical map using cartopy/matplotlib can be complex. So we created this map_plotter package to abstract away that complexity for a common use case. Installation (opinionated use of conda to avoid cartopy dependency hell and install precompiled binaries) conda install cartopy\ngit clone git@github.com:amentumspace/map_plotter.git\ncd map_plotter\npip install ."},
{"Title": "Picodi - Simplifying Dependency Injection in Python", "Author": "yakimka", "Content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features"},
{"Title": "Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient Code", "Author": "Slow_Scene_7972", "Content": "Optimize Your Python Workflow: Proven Techniques for Crafting Production-Ready Code Link"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Homoiconic Python Code", "Author": "moonbunR", "Content": "Homoiconic, what does it mean? In simple terms, homoiconic code is when code is treated as data and can be manipulated as you would data. This means the code can be changed, new functions and variables added, the code can generate new code or even examine and modify its own structure and behavior all while it is running. That‚Äôs why homoiconic languages like Lisp are so powerful. But what if we can make a homoiconic python code, where the code and the data are one and the same and can be modified in the same way? This guide does a good job in trying to explain how you would create a python version of the ‚ÄúLisp in Lisp‚Äù code which would give you access to all those homoiconic features that Lisp brags of like the macro systems, the expressiveness and flexibility, the metaprogramming etc. while still using python. What do you guys think of this?"},
{"Title": "InterProcessPyObjects: Fast IPC for Sharing and Modifying Objects Across Processes", "Author": "FI_Mihej", "Content": "InterProcessPyObjects Python package\ngithub.com/FI-Mihej/InterProcessPyObjects If you like the project, consider giving it a star on GitHub to show your support and help further development. :) pypi.org/project/InterProcessPyObjects\nWhat My Project Does\nInterProcessPyObjects is a part of the Cengal library. If you have any questions or would like to participate in discussions, feel free to join the . Your support and involvement are greatly appreciated as Cengal evolves."},
{"Title": "Picodi - Simplifying Dependency Injection in Python", "Author": "yakimka", "Content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features"},
{"Title": "Speed improvements in Polars over Pandas", "Author": "zzoetrop_1999", "Content": "I'm giving a talk on polars in July. It's been pretty fast for us, but I'm curious to hear some examples of improvements other people have seen. I got one process down from over three minutes to around 10 seconds.\nAlso curious whether people have switched over to using polars instead of pandas or they reserve it for specific use cases."},
{"Title": "AzuracastPy: An Unofficial Python Wrapper for the Azuracast API.", "Author": "ARandomBoiIsMe", "Content": "Source code What My Project Does: It acts as a wrapper for the AzuraCast API, providing custom functions and classes for more straightforward use of the API in python projects. Target Audience: Python users who are interested in programmatically interacting with online radios hosted on AzuraCast. Comparison: The idea of API Wrappers is not new. However, I noticed that the only existing wrapper for this API is written in PHP, which I am not experienced with. I created this project so I, and other python programmers by extension, could have an easier time working with the API."},
{"Title": "The best Python CLI library, arguably.", "Author": "AND_MY_HAX", "Content": "What My Project Does https://github.com/treykeown/arguably arguably makes it super simple to define complex CLIs. It uses your function signatures and docstrings to set everything up. Here's how it works:\nAdding the @arguably.command decorator to a function makes it appear on the CLI.\nIf multiple functions are decorated, they'll all be set up as subcommands. You can even set up multiple levels of subcommands."},
{"Title": "Homoiconic Python Code", "Author": "moonbunR", "Content": "Homoiconic, what does it mean? In simple terms, homoiconic code is when code is treated as data and can be manipulated as you would data. This means the code can be changed, new functions and variables added, the code can generate new code or even examine and modify its own structure and behavior all while it is running. That‚Äôs why homoiconic languages like Lisp are so powerful. But what if we can make a homoiconic python code, where the code and the data are one and the same and can be modified in the same way? This guide does a good job in trying to explain how you would create a python version of the ‚ÄúLisp in Lisp‚Äù code which would give you access to all those homoiconic features that Lisp brags of like the macro systems, the expressiveness and flexibility, the metaprogramming etc. while still using python. What do you guys think of this?"},
{"Title": "Interfacing Custom USB endpoints using Python!", "Author": "shekhuu", "Content": "Hi everyone, I was building something that required me to communicate over USB to Raspberry Pi Pico using Pyusb Python. So I decided to make a blog post about it showing the concepts, process, and source code.\nCheck out the blog post here!\nCheck out the source code here!"},
{"Title": "diskcache: This key-value store library is faster than Redis and Memcached üòÆ (built by Grant Jenks)", "Author": "RevolutionaryPen4661", "Content": "PYPI (From the README, Released Last Year, Edited by Grammarly) Github pip install diskcache The cloud-based computing of 2024 puts a premium on memory. Gigabytes of space are left on disks as processes vie for memory. Memcached (and sometimes Redis) is used as a cache among these processes. Wouldn‚Äôt it be nice to leverage empty disk space for caching? Django is Python‚Äôs most popular web framework and has several caching backends. Unfortunately, the file-based cache in Django is essentially broken. The culling method is random and large caches repeatedly scan a cache directory which slows linearly with growth. Can you allow it to take sixty milliseconds to store a key in a cache with a thousand items?"},
{"Title": "LinkedIn-Learning-Downloader v1.1", "Author": "YounesWinter", "Content": "With Python i created a tool that enables users to download LinkedIn Learning courses, including the often overlooked but incredibly valuable exercise files. This feature sets our project apart, offering a complete learning experience by providing both the course videos and the materials needed for practical application.\nWhat great about it and beyond other tools in the same genre concerned LinkedIn Learning Downloaders, now you can download the whole courses from a path link. this is was never possible without Python."},
{"Title": "The best Python CLI library, arguably.", "Author": "AND_MY_HAX", "Content": "What My Project Does https://github.com/treykeown/arguably arguably makes it super simple to define complex CLIs. It uses your function signatures and docstrings to set everything up. Here's how it works:\nAdding the @arguably.command decorator to a function makes it appear on the CLI.\nIf multiple functions are decorated, they'll all be set up as subcommands. You can even set up multiple levels of subcommands."},
{"Title": "Mystique: Sparse data matching for Python tests", "Author": "jonocodes", "Content": "What My Project Does I made this library to help assert test responses inline while directing the comparison to be as rigid or lax as it needs to be. Motivation I write a lot of tests that assert values in complex nested dictionaries. But really I only need to check some parts in the response, not all of it. I often find myself transforming the response or maliciously extracting the important parts I need - in order to satisfy the assertions. This gets messy and can make tests hard to follow. Target Audience Anyone who writes tests. This is particularly useful if you generate fake data in your tests with something like Faker, Factory Boy, or Model Bakery."},
{"Title": "Who is using quart framework for microservices?", "Author": "Dry_Raspberry4514", "Content": "I am using quart framework (https://quart.palletsprojects.com) for a number of microservices in a SaaS application. However, I hardly hear anything about this framework on any social media platform which seems to be dominated by FastAPI. Also I'm unable to find which all projects/companies are using this framework. All this is leading to anxiety around the future of this project. Are there any well known projects / companies which are using this framework for microservices?"},
{"Title": "FastAPI Backend Template for SaaS products", "Author": "shekhuu", "Content": "Hello there, I just created a template for creating a backend for your SaaS products. What my project does: It is a FastAPI project/template for creating SaaS backends and admin dashboards. Comparison: \nOut of the box, it supports\nLicence key generation and validation.\nOAuth 2 authentication with scopes."},
{"Title": "LinkedIn-Learning-Downloader v1.1", "Author": "YounesWinter", "Content": "With Python i created a tool that enables users to download LinkedIn Learning courses, including the often overlooked but incredibly valuable exercise files. This feature sets our project apart, offering a complete learning experience by providing both the course videos and the materials needed for practical application.\nWhat great about it and beyond other tools in the same genre concerned LinkedIn Learning Downloaders, now you can download the whole courses from a path link. this is was never possible without Python."},
{"Title": "I made python audioplayer with FFmpeg and Qt6", "Author": "WyseTwist", "Content": "Midnight Player - a simple python audiplayer for playing audio What My Project Does: My project is just an audio player for playing music, it can play audio from folders, supports different audio formats like Flac, Mp3 and can show some information about the track. Player uses subprocess to access ffmpeg, then it decodes the audio file into pcm format, then plays this file using sounddevice library. the use of these libraries is to ensure that the audio file does not lose quality during processing. Target Audience: This project was made to increase experience in python programming and to understand how the audio playback process works, but the project is also useful for people who are interested in learning the structure of the audio player as it is open source."},
{"Title": "Why is Plotly so cumbersome to tweak?", "Author": "olive_oil_for_you", "Content": "I made this visualisation with this code. I have three questions:\nIs Plotly supposed to be this cumbersome to tweak? Would other libraries require the same amount of code to add the details I did?\nCan my code be reduced in size? Maybe it's me who is complicating things with Plotly and there are easier ways to do what I am doing.\nAny R enthusiast who can tell me how much shorter this code would look like with ggplot2? I asked ChatGPT but the result was garbage."},
{"Title": "this.s and this.d", "Author": "VladTbk", "Content": "Recently, I found out about the this \"Easter egg\" in python3. Adding import this into a py file will print \"The Zen of Python\" by Tim Peters. Also, this has two attributes: this.s and this.d, which I guess form the actual Easter egg. this.s returns an encrypted version of \"The Zen\" and this.d well, see for yourself, maybe you'll solve the puzzle."},
{"Title": "How to publish a Python package with GitHub Actions using Poetry", "Author": "johnfraney", "Content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/ If you've got any tips for publishing a Python package, I'd be happy to hear those, too"},
{"Title": "FastAPI Backend Template for SaaS products", "Author": "shekhuu", "Content": "Hello there, I just created a template for creating a backend for your SaaS products. What my project does: It is a FastAPI project/template for creating SaaS backends and admin dashboards. Comparison: \nOut of the box, it supports\nLicence key generation and validation.\nOAuth 2 authentication with scopes."},
{"Title": "I connected LLM to Python runtime and generated unit-tests (OpenSource)", "Author": "Financial_Muffin396", "Content": "Hi all, I initially started this adventure by trying to automate bug fixes with the help of LLMs. However, I received feedback saying the fixes aren't always correct, leading to the question: why bother reviewing PRs that might add more issues? (It's really hard for LLMs to say \"I don't know\"). So, I decided to focus on reliability perfecting unit tests. The source code is available at: https://github.com/CaptureFlow/captureflow-py What My Project Does: It incorporates a tracer client-side Python library and a backend that accumulates such traces and is capable of proposing code improvements and generating tests for your repository. It traverses the execution graph, extracts relevant parts, enriches them with implementation data from the GitHub API, and then generates tests with the help of GPT4."},
{"Title": "Seeking Your Input: Let's Co-Create FreeCodeCamp for python together", "Author": "globalwarming_isreal", "Content": "Hello all, This is probably my first post here. I usuallly lurk around here and Django subreddits. I've been brewing up an idea and I need your input before I take the plunge! Picture this: a website like FreeCodeCamp but for python and related technologies, a learning oasis where anyone can kickstart their journey from Python newbie to job-ready pro, and it's all free! But here's the thing, I want this to be our platform, crafted with your needs and dreams in mind. So, before I start, I need to know: would this be something that gets you excited? Imagine quizzes helping you find your starting point, interactive challenges that keep you in the zone, and a supportive community to cheer you on every step of the way. Plus, videos, written tutorials, and a progress tracker to keep you motivated!"},
{"Title": "I made a Mandelbrot Zoom using Python", "Author": "AbideByReason", "Content": "I made a YouTube video which previews the zoom and explains the code, which you can find here: https://youtu.be/HtNUFdh2sjg What my project does: it creates a Mandelbrot Zoom. Comparison: it uses Pillow and consists of just 2 main blocks of code: one is the main function that finds which points are in the Mandelbrot Set and the other is the main loop that applies appropriate colors to each image. It gives the option of being black and white OR in color. It works fairly well but can definitely be faster if parallelized. I'd love to hear any suggestions on how it can be improved. Target Audience: fun/toy project"},
{"Title": "this.s and this.d", "Author": "VladTbk", "Content": "Recently, I found out about the this \"Easter egg\" in python3. Adding import this into a py file will print \"The Zen of Python\" by Tim Peters. Also, this has two attributes: this.s and this.d, which I guess form the actual Easter egg. this.s returns an encrypted version of \"The Zen\" and this.d well, see for yourself, maybe you'll solve the puzzle."},
{"Title": "Reforger Whitelist Py", "Author": "PyjamaZombie", "Content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually. The target audience for this is the Arma Reforger community, for which, the application is made for. Currently, to my knowledge, there is no application like this available to the Arma Reforger community. I am very open to feedback, contributions and advice as want to expand this as much as possible!"},
{"Title": "sjvisualizer: a python package to animate time-series data", "Author": "PieChartPirate", "Content": "What the project does: data animation library for time-series data. Currently it supports the following chart types:\nBar races\nAnimated Pie Charts\nAnimated Line Charts\nAnimated Stacked Area Charts"},
{"Title": "Tutorial on Creating Useful Data Visuals with Python seaborn and matplotlib libraries", "Author": "jgloewen", "Content": "With the current global deluge of data and information, there has never been a more important to visualize your data in a clear and simple manner. Python is a terrific tool to help us do this. The key to this lies in choosing the the right data visualization techniques to tell the most interesting and relevant story. Three useful visuals are:\nsmall multiples\nheat maps"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Mandelbrot Zoom using Python", "Author": "AbideByReason", "Content": "I made a YouTube video which previews the zoom and explains the code, which you can find here: https://youtu.be/HtNUFdh2sjg What my project does: it creates a Mandelbrot Zoom. Comparison: it uses Pillow and consists of just 2 main blocks of code: one is the main function that finds which points are in the Mandelbrot Set and the other is the main loop that applies appropriate colors to each image. It gives the option of being black and white OR in color. It works fairly well but can definitely be faster if parallelized. I'd love to hear any suggestions on how it can be improved. Target Audience: fun/toy project"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Traversible Tree in Python", "Author": "frankstan33", "Content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure. What My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times. There are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth)."},
{"Title": "Rethinking String Encoding: a 37.5% space efficient string encoding than UTF-8 in Apache Fury", "Author": "Shawn-Yang25", "Content": "In rpc/serialization systems, we often need to send namespace/path/filename/fieldName/packageName/moduleName/className/enumValue string between processes.\nThose strings are mostly ascii strings. In order to transfer between processes, we encode such strings using utf-8 encodings. Such encoding will take one byte for every char, which is not space efficient actually.\nIf we take a deeper look, we will found that most chars are lowercase chars, ., $ and _, which can be expressed in a much smaller range 0~32. But one byte can represent range 0~255, the significant bits are wasted, and this cost is not ignorable. In a dynamic serialization framework, such meta will take considerable cost compared to actual data.\nSo we proposed a new string encoding which we called meta string encoding in Fury. It will encode most chars using 5 bits instead of 8 bits in utf-8 encoding, which can bring 37.5% space cost savings compared to utf-8 encoding.\nFor string can't be represented by 5 bits, we also proposed encoding using 6 bits which can bring 25% space cost savings"},
{"Title": "sjvisualizer: a python package to animate time-series data", "Author": "PieChartPirate", "Content": "What the project does: data animation library for time-series data. Currently it supports the following chart types:\nBar races\nAnimated Pie Charts\nAnimated Line Charts\nAnimated Stacked Area Charts"},
{"Title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python", "Author": "aoeu512", "Content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging. Programmable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Python script to convert Spotify Artists to Playlists", "Author": "RJW-20", "Content": "I've made my first bit of useful software and I wanted to share it here. I'd love some feedback (and it would be amazing to hear if someone has used it!) What My Project Does: Using the third party requests package, the script interacts with the Spotify web API to request all albums from the given Artist, then all the tracks from all of those albums. It then goes through the list to remove any duplicates and also tries to remove any unwanted versions (only done by examining the name of the track, since Spotify does not attribute a version type to its tracks). Once that's done a playlist is then created on your Spotify account with the name of the Artist and all the tracks are posted there in chronological (essentially per album) order."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "try... except... finally!", "Author": "young-and-ignorant", "Content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally. from your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()"},
{"Title": "Auto Data Analysis python packages to know", "Author": "mehul_gupta1997", "Content": "Check this video tutorial to explore different AutoEDA python packages like pandas-profiling, sweetviz, dataprep,etc which can enable automatic data analysis within minutes without any effort : https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "List of Sites that Packages Need to Connect to?", "Author": "BullCityPicker", "Content": "I'm doing most of my work behind a government firewall, and I'm having trouble connecting to certain sites. I can do the usual \"pip\" installs just fine, but I'm talking about packages that need to download data to do their job. An example is the NLTK (Natural Language Toolkit) package, which downloads dictionaries, lookup tables for sentiment analysis, and so on. I know what sites to open up for that particular problem (pastebin.com and nltk.org), but I wonder if anybody's made a list of such sites for different packages. I can ask for the two sites I know about to be opened up, but I'd like to have a more comprehensive list so I don't have to go through the red tape multiple times."},
{"Title": "Durable Python - Infrastructure failures should not stop the process", "Author": "autokitteh", "Content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience. It automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns. Consider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete. import requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)"},
{"Title": "Folks who know the internals: Where does operator precedence \"happen\"?", "Author": "BeerIsTheMindKiller", "Content": "Hey! Messing around with instaviz, cool library, highly recommend. You can visualize a function's bytecode as well as AST and some other stuff. i entered this: def f():\n  x = 1 + 2 - 10**2\n  return x I was expecting the AST nodes for 1 + 2 - 10**2 to be rearranged somehow, with 10**2 being moved to the left hand of the expression, because exponents get evaluated before addition/subtraction. but no! just looks like this:"},
{"Title": "Auto Data Analysis python packages to know", "Author": "mehul_gupta1997", "Content": "Check this video tutorial to explore different AutoEDA python packages like pandas-profiling, sweetviz, dataprep,etc which can enable automatic data analysis within minutes without any effort : https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Folks who know the internals: Where does operator precedence \"happen\"?", "Author": "BeerIsTheMindKiller", "Content": "Hey! Messing around with instaviz, cool library, highly recommend. You can visualize a function's bytecode as well as AST and some other stuff. i entered this: def f():\n  x = 1 + 2 - 10**2\n  return x I was expecting the AST nodes for 1 + 2 - 10**2 to be rearranged somehow, with 10**2 being moved to the left hand of the expression, because exponents get evaluated before addition/subtraction. but no! just looks like this:"},
{"Title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation", "Author": "AlSweigart", "Content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books Be sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!) For $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate"},
{"Title": "Pip 24.1 beta released, and it's a big one", "Author": "zurtex", "Content": "I'd like to call attention to pip 24.1 beta asit is unusual for the pip team to release betas:\nhttps://pip.pypa.io/en/latest/news/#b1-2024-05-06\nhttps://pypi.org/project/pip/24.1b1/\nYou can install with: python -m pip install pip==24.1b1 In particular they have upgraded their vendored version of packaging from 21.3 to 24.0, this was a and , included significant performance improvements, and will allow pip to support . However, it also means legacy versions and specifiers are with pip."},
{"Title": "pip time machine", "Author": "rejectedlesbian", "Content": "https://github.com/nevakrien/time_machine_pip this is a fairly simple project barely anything to it but I think its promising\nthe idea is to put pip in a time machine so it can not use package versions that were made after the project is made. I am doing this by proxiying pypi and cutting out the newer versions. initial tests show that pip respects the proxy and works like you would expect"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "How Python Asyncio Works: Recreating it from Scratch", "Author": "jpjacobpadilla", "Content": "Do you understand how asyncio works behind the scenes? Read this article and see how you can use Python generators to create your own version of asyncio, and then use the __await__ dunder method to use the async/await keywords to come full circle! https://jacobpadilla.com/articles/recreating-asyncio"},
{"Title": "pip time machine", "Author": "rejectedlesbian", "Content": "https://github.com/nevakrien/time_machine_pip this is a fairly simple project barely anything to it but I think its promising\nthe idea is to put pip in a time machine so it can not use package versions that were made after the project is made. I am doing this by proxiying pypi and cutting out the newer versions. initial tests show that pip respects the proxy and works like you would expect"},
{"Title": "Building an LLM chat application using RAG Agent", "Author": "iryna_kondr", "Content": "Motivation\nChatbots are among the most popular applications of large language models (LLMs). Often, an LLM's internal knowledge base is adequate for answering users questions. However, in those cases, the model may generate outdated, incorrect, or too generic responses when specificity is expected. These challenges can be partially addressed by supplementing the LLM with an external knowledge base and employing the retrieval-augmented generation (RAG) technique. However, if user queries are complex, it may be necessary to break the task into several sub-parts. In such cases, relying solely on the RAG technique may not be sufficient, and the use of agents may be required."},
{"Title": "A Beginner's Guide to Unit Testing with Pytest", "Author": "Stanulilic", "Content": "Hey r/python! I wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link."},
{"Title": "Apple Health data exploration with Atlas, Clickhouse, Vega-Altair, Quarto", "Author": "__tosh", "Content": "What My Project Does A few days ago I wrote a simple python script (\"Atlas\") that turns the Apple Health export.xml file (which is about 1 GB in my case, with about 10 years of data) into a very simple parquet file (a bit like a compressed CSV) that is also way smaller (40 MB). The parquet file has 5 columns:\ntype (e.g. \"CyclingDistance\")\nvalue (e.g. \"12.100\")"},
{"Title": "Build tool support for PySide / PyQt", "Author": "jmacey", "Content": "Just interested in how people approach this, typically I just use VSCode or QtCreator to build simple projects. However I now want to automate some of the build process such as running uic, and rcc. I've tried to use CMake but can't seem to get it to work without a lot of custom scripting (for example the AUTOUIC etc functions need c++ projects), can't see any info on running uic in QtCreator (which would be ideal but python support is really just an after thought). I could write some Makefiles but this is a little ad-hoc and also confuses the IDE's (and at the end of the day I want a simple process for my students to use and I already teach cmake for C++ dev)."},
{"Title": "What changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ?", "Author": "These_Shoe3594", "Content": "What are all the changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ? There are some CVE fixes available in the latest 3.x version of werkzueg. To take the fixes as part of my code, we want to upgrade the version. When I do so, I‚Äôve faced lot of breakages. I found some on documents and release notes. But it would be easier if someone already did some changes regarding this."},
{"Title": "Building an LLM chat application using RAG Agent", "Author": "iryna_kondr", "Content": "Motivation\nChatbots are among the most popular applications of large language models (LLMs). Often, an LLM's internal knowledge base is adequate for answering users questions. However, in those cases, the model may generate outdated, incorrect, or too generic responses when specificity is expected. These challenges can be partially addressed by supplementing the LLM with an external knowledge base and employing the retrieval-augmented generation (RAG) technique. However, if user queries are complex, it may be necessary to break the task into several sub-parts. In such cases, relying solely on the RAG technique may not be sufficient, and the use of agents may be required."},
{"Title": "Reactive programming for Python with live-cells-py", "Author": "alex-gutev", "Content": "live-cells-py (Live Cells Python) is a reactive programming library which I ported from Live Cells for Dart.\nWhat my project Does:\nYou can declare cells which are observable containers for data: import live_cells as lc\n\na = lc.mutable(0)"},
{"Title": "I made a python bot that plays minesweeper", "Author": "_dwightshrute", "Content": "Hello, I made this Minesweeper bot that I wanted to share with you all. What My Project Does - The bot takes a screenshot of the board and runs a classification algorithm to extract the contents of the board. It then analyzes the board, finds as many mines as it can, and sends clicks. If it cannot find any mines then it guesses the most probable position of a mine. Target Audience - It's a toy project for anyone interested in algorithms or problem-solving. Comparison - This is just my attempt at making a minesweeper bot. I'm sure there are many bots out there that are much more efficient than this."},
{"Title": "Langchain using llama3 to build recommendation system", "Author": "yngwieHero", "Content": "Hi, Recently I played a bit with LLMs, specifcally exploring ways of running the models locally and building prompts using LangChain. As a result ended up coding a small recommendation system, powered with Llama3-7b model, which suggests topics to read on HackerNews. Wanted to share my experiences, so I wrote a small article where I described all my findings.\nHope you'll like it: https://lukaszksiezak.github.io/ScrapyToLLM/ Github repo: https://github.com/lukaszksiezak/ScrapyToLLM What the project does: It's a Python application which uses scrapy to scrape HackerNews page. Scraped articles are pipelined to redis, which is then feeding Llama3 using langchain. Prompter is configured to serve a user articles which are matching his request."},
{"Title": "relax-py - Web framework for htmx with hot module replacement", "Author": "MindLopsided4430", "Content": "Excited to finally showcase this! It's still pretty rough around the edges, but I'm finally happy enough with the feature set and curious to see what the community thinks about a framework like this. Code: github.com/crpier/relax-py Documentation: crpier.github.io/relax-py What My Project Does relax-py is a Python framework for building full-stack applications with htmx It provides tools for writing HTML in a manner similar to simple_html (which also inspired the decision to use standard Python to write HTML, rather than use Jinja2 or to make something like templ work in Python) It has:"},
{"Title": "What changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ?", "Author": "These_Shoe3594", "Content": "What are all the changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ? There are some CVE fixes available in the latest 3.x version of werkzueg. To take the fixes as part of my code, we want to upgrade the version. When I do so, I‚Äôve faced lot of breakages. I found some on documents and release notes. But it would be easier if someone already did some changes regarding this."},
{"Title": "The possibility to build Android apps with python professionally is here and needs your support.", "Author": "klargstein", "Content": "You guys really need to check this. I believe new comers to python would love to tinker with the android ecosystem from the safety of python :-) Imgur: https://imgur.com/gallery/DtfwOVi https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course Edit: added imgur link."},
{"Title": "PyCon US 2024 is here!", "Author": "monorepo", "Content": "Official Event"},
{"Title": "Production grade AI Web apps, just using python ?", "Author": "prime_danger", "Content": "Hey guys, I have worked on building multiple ai/ml usecases and their specific backends. But now I want build interfaces for easy and quick integration. I saw a blog which used FastUI which looks quick decent but when I tried it just showed me a Json of elements on the page. Are there any other libraries I should use? ü§î"},
{"Title": "python-oracledb 2.2 and the VECTOR type in Oracle Database 23ai", "Author": "cjbj", "Content": "python-oracledb 2.2, the Oracle Database driver, has been released with support for Oracle Database 23ai features such as the VECTOR and BOOLEAN data types, Implicit Connection Pooling, and improved connection performance. See the release announcement."},
{"Title": "Langchain using llama3 to build recommendation system", "Author": "yngwieHero", "Content": "Hi, Recently I played a bit with LLMs, specifcally exploring ways of running the models locally and building prompts using LangChain. As a result ended up coding a small recommendation system, powered with Llama3-7b model, which suggests topics to read on HackerNews. Wanted to share my experiences, so I wrote a small article where I described all my findings.\nHope you'll like it: https://lukaszksiezak.github.io/ScrapyToLLM/ Github repo: https://github.com/lukaszksiezak/ScrapyToLLM What the project does: It's a Python application which uses scrapy to scrape HackerNews page. Scraped articles are pipelined to redis, which is then feeding Llama3 using langchain. Prompter is configured to serve a user articles which are matching his request."},
{"Title": "You should only use licensed version of python", "Author": "vikashgraja", "Content": "I‚Äôm an intern in a company and I automated some processes using python. My company‚Äôs IT wing said that as long as it is a licensed software you can use it in our company. In my mind I was like where the f I‚Äôm going to get a license for an open source software. Note : They mention that another team has been using licensed python. I thought either IT is so stupid or that team is so smart that they brought license for pycharm or anaconda (claim that it is a Python license) and fooled IT. If I am wrong then tell me where I can get that license. And I am also looking for job in data analyst."},
{"Title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"", "Author": "AlSweigart", "Content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs I'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10) Once printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become."},
{"Title": "Blat AI generates Python code to do web-scraping (code based on Scrapy framework)", "Author": "arnaupv", "Content": "Miguel Algorri and Arnau Pont V√≠lchez here, blat co-founders! Target Audience\nPeople who need to collect public data from the web (pricing, articles, reviews, leads etc). What does our Project Do?\nAt blat we aim to deliver production-ready web scraping code in minutes (written in Python, Scrapy framework).\nThis is feasible thanks to our Web Scraping AI Agent üß†. Here our CLI to interact with the Web Scraping AI Agent (github). Too good to be true?"},
{"Title": "Is PyGame still alive?", "Author": "pyeri", "Content": "So it was a long time ago in the good old Python 2.x days (circa 2010 probably) that I had learned PyGame with some tutorials at my former work place. But nowadays since I mostly freelance with business apps, I never felt the need for it. But since such a game development project is on the horizon after all these years, I was wondering if PyGame can still be up for the task with Python 3.x? Or is there a better Python library available these days? I don't need any advanced gaming features of modern day VFX or anything, all I need is some basic Mario/Luigi style graphics, that's all!"},
{"Title": "PyCon US 2024 is here!", "Author": "monorepo", "Content": "Official Event"},
{"Title": "Dash Pip Components", "Author": "Soolsily", "Content": "What My Project Does\nHey everyone, just released 8 new pip components for plotly and dash including:\nFull Calendar Component - A Full Calendar Component for Dash\nDash Summernote - A rich text WYSIWYG Editor for Dash\nDash Emoji Mart - A Slack-like Emoji Picker for Dash\nDash Charty - A Charting Library for Dash"},
{"Title": "I've started writing Python bindings for lexertl", "Author": "BenHanson", "Content": "See https://github.com/BenHanson/pylexertl I will see about registering as an official library when I am happy I have completed all the bindings. I added all the missing functions for the rules objects today, so things are in reasonable shape already. My python experience has been limited up until now, but it is big for my new role. I have a runtime parser generator https://github.com/BenHanson/parsertl17 which I also plan to add bindings for. I hope this is of interest to somebody! What My Project Does Allows you to build lexical analysers at runtime and use them to lex text (in this case utf-8)"},
{"Title": "Track the size of your PyInstaller packages in CI", "Author": "bencherdev", "Content": "If you have ever wanted to track the size of your PyInstaller packages in CI, Bencher now supports tracking your package size: https://bencher.dev/docs/how-to/track-file-size/"},
{"Title": "Reviewing Dataframe Changes? Looking for Your Preferred Methods!", "Author": "rageagainistjg", "Content": "After playing around with a dataframe‚Äîapplying filters or other transformations‚ÄîI'm curious about your methods for reviewing the changes. In VS Code, the variable explorer is quite handy for a quick look at the modified dataframe. Alternatively, when working in a Jupyter notebook within VS Code, exporting the data to an Excel file provides a detailed view and allows for an easy deep dive into the results. What are your preferred practices for ensuring your data adjustments are precisely what you intended?"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Blat AI generates Python code to do web-scraping (code based on Scrapy framework)", "Author": "arnaupv", "Content": "Miguel Algorri and Arnau Pont V√≠lchez here, blat co-founders! Target Audience\nPeople who need to collect public data from the web (pricing, articles, reviews, leads etc). What does our Project Do?\nAt blat we aim to deliver production-ready web scraping code in minutes (written in Python, Scrapy framework).\nThis is feasible thanks to our Web Scraping AI Agent üß†. Here our CLI to interact with the Web Scraping AI Agent (github). Too good to be true?"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I created a Python script that makes it easier to track how your baby's sleep is improving", "Author": "BX1959", "Content": "My wife and I use the Huckleberry app to track our baby's sleep periods. Although the free version of the app allows you to view a number of sleep-related metrics, I also wanted to see whether his longest nightly sleep stretches were getting longer over time. Therefore, I created a Python project to help me answer this and other questions I had about my baby's sleep.\nWhat My Project Does\nThis project reads in data from a Huckleberry .csv export (or a separate custom .csv file); analyzes its sleep information; and then produces ."},
{"Title": "HS-transform, python package for hyperbolic S-transform in signal processing", "Author": "Ok_Employ_2414", "Content": "I made a python package for S-transform with Hyperbolic window (Hyperbolic S-transform or HSTransform package). This is my first time publishing a python package, so the project is still far from stable and still under beta release.\nWhat my project does: This transformation is applied to signal processing, analyzing transient changes of a signal during very short-time. Some special use case can be in power system signal, or Geophysical signal analysis, or MRI ..."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a cheatsheet for pydash", "Author": "poopatroopa3", "Content": "https://brunodantas.github.io/pydash-cheatsheet/en/\nWhat my project does: pydash is a library with great potential to make you code more Functional and simple. I made this cheatsheet a while ago to highlight some of the most useful functions of the library, since there are so many. I hope it's useful.\nTarget audience: anyone who is interested in pydash, functional programming, not reinventing the wheel."},
{"Title": "Introducing PgQueuer: A Minimalist Python Job Queue Built on PostgreSQL", "Author": "GabelSnabel", "Content": "What My Project Does PgQueuer is a Python library designed to manage job queues using PostgreSQL features. It leverages PostgreSQL's native LISTEN/NOTIFY, along with advanced locking mechanisms, to handle job queues efficiently. This allows for real-time job processing, concurrency, and reliable task execution without the need for a separate queuing system. Target Audience PgQueuer is ideal for developers and teams who already use PostgreSQL in their projects and are looking for a simple, integrated way to handle background tasks and job queues. It's designed for production use, offering a dependable solution that scales seamlessly with existing PostgreSQL databases."},
{"Title": "Library for automatic Cython 3.0 code annotations generation.", "Author": "Cool-Nefariousness76", "Content": "Hi everybody, over the last year I've been developing a library that adds some Cython 3.0 annotations to existing python code. What My Project Does: For example if it sees a for i in range(): in a function it recognizes i as an integer and adds a i = cython.declare(cython.int)line at the beginning of the function. It actually uses the built-in ast module under the hood for parsing, I found it a super useful library! Target Audience: It is a side project I made mainly for fun. I don't know if it can be of interest to anybody, or if it could have some potential utility."},
{"Title": "ChatGPT can talk with all my Python notebooks", "Author": "pp314159", "Content": "I'm working on an open-source framework for converting Python notebooks into web applications, it is called Mercury. Recently, I have added an option to execute notebooks with REST API. You can pass paramters in POST request body to the notebook, execute all cells and return JSON as response. I'm also running a SaaS service, Mercury Cloud where you can deploy notebooks with one-click with unique website domain. What My Project Does It makes Python notebooks extermely easy to integrate with custom ChatGPT, so GPT can execute Python notebooks and get response. It is 3-steps process:"},
{"Title": "IconMatch - find icons and letters positions from images!", "Author": "TraditionalDistrict9", "Content": "Hey all, I am not the original creator, but found that 4yo project, and decided to revive it! What my project does: IconMatch is library allowing you to extract icons and letter positions from image or from display! There is also realtime demo on repo showcasing how it works! Target Audience: For all detecting objects from display! Comparison: I did not find other project like that - but it was my first find too! It is also not OCR! https://github.com/NativeSensors/IconMatch Have fun!"},
{"Title": "Framework to use for backend", "Author": "Clickyz", "Content": "Hello guys I recently decided to move from nodejs(expressjs) to python for general purposes but mostly for backend. I have couple of questions.\nWill i regret my migration to python? :)\nWhich framework you suggest for backend solo dev?\nAnd what tips are you suggesting me in general to get used to python."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "APScheduler vs Schedule package", "Author": "kostakos14", "Content": "Hey folks, looking to use one library to implement some background scheduling logic on my application. I find in Google search APScheduler to be frequently mentioned, but I can see the Schedule package has more GH stars. Was curious if anybody has used one of them, and which one would you recommend based on your own experience."},
{"Title": "Tutorial: Simple Pretty Maps That Will Improve Your Python Streamlit Skills", "Author": "jgloewen", "Content": "Interactive web applications for data visualization improve user engagement and understanding. These days, Streamlit is a very popular framework used to provide web applications for data science. It is a terrific programming tool to have in you Python knowledge toolbox. Here‚Äôs a fun and practical tutorial on how to create a simple interactive and dynamic Streamlit application. This application generates a beautiful and original map using the prettymaps library. Free article: HERE"},
{"Title": "New Python-only abstractions for extracting data from apis", "Author": "Thinker_Assignment", "Content": "Hey there, you are probably familiar with REST APIs.\nWe at dlt library added a new way to get data from apis (and dlt can already load it with best practice to db or parquet). We already did some internal hackathons but we would appreciate your feedback so we can improve it further\n- Our new REST API Source is a short, declarative configuration driven way of creating sources.\n- Our new REST API Client is a collection of Python helpers used by the above source, which you can also use as a standalone, config-free, imperative high-level abstraction for building pipelines.\nYou can read more about the source here or go to our docs for the REST APIClient info\n\nPS: see you at Pycon Pittsburgh!"},
{"Title": "Introducing Notolog: Python Markdown Editor built with PySide6", "Author": "devotaku", "Content": "Excited to share my personal open-source project: Notolog - Python Markdown Editor (MIT License). The main motivation for developing another markdown editor was my passion for learning new things and enhancing my development skills in Python. I developed it in my spare time over a few months, despite having no prior experience in creating full-scale Python applications. What My Project Does ‚àó Multiplatform ‚àó Markdown async syntax highlighting created by me ‚àó Several pre-installed color themes ‚àó Supports English and 17 other languages right out of the box ‚àó Integration with OpenAI API for AI-assisted features"},
{"Title": "Reboot Your Router with a Python Script", "Author": "SAV_NC", "Content": "Hello r/python, I've developed a Python script that allows you to reboot your router remotely via SSH! This script handles the countdown and checks when the router is back online after a reboot. What My Project Does: Key Features:\nAutomated Router Reboot: Remotely trigger a reboot of your router.\nMonitoring: After sending the reboot command, the script counts down from 350 seconds and starts checking the router's status by pinging it after the first 100 seconds have passed."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I've developed a library for send metrics to zabbix asynchronously", "Author": "Royal_Section4889", "Content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this. Tests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async What My Project Does Send zabbix sender messages using asyncio tasks. Target Audience SysAdmins who use Zabbix to monitor a large number of metrics. Comparison Instead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix"},
{"Title": "Opinions sought: Modernising the Apache NiFi Python client", "Author": "Samausi", "Content": "Hello folks, I am the author of NiPyAPI, the defacto Python client for the Apache NiFi project. For those unfamiliar, Apache NiFi is an open-source ETL tool designed around the flow-based programming paradigm. It excels at continuously moving and managing arbitrary data flows between disparate systems with low latency at large scale, and is often contrasted with Airflow. Amongst many features, NiFi allows for Command & Control via a native UI, enabling live edits to data routing and transformation. NiFi also enforces an API-first approach, and produces a swagger definition during code compilation, which allowed creation of a Python client to enable automated Data Flow testing and a Design & Deploy approach by running it through tool shaped by mustache templates. This produces a verbose low-level client, which I then leverage in higher-level operational functions and demo scripts in the library."},
{"Title": "Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient Code", "Author": "Slow_Scene_7972", "Content": "Optimize Your Python Workflow: Proven Techniques for Crafting Production-Ready Code Link"},
{"Title": "Interactive Data Visualization with Python: A Showcase of Plotly Dash", "Author": "AbhishekSuryavanshee", "Content": "What My Project Does:\nI'm excited to introduce my latest project built with Python ‚Äì an interactive data visualization application using Plotly Dash. This project aims to empower users to explore and analyze datasets dynamically through interactive visualizations. By leveraging Plotly Dash's capabilities, users can interact with data in real-time, customize visualizations on the fly, and gain deeper insights with just a few clicks. Target Audience:\nThis project caters to a wide range of users, from data enthusiasts and analysts to professionals seeking to communicate insights effectively. Whether you're a data scientist exploring patterns in large datasets or a business analyst presenting findings to stakeholders, this tool is designed to streamline your workflow and enhance your data storytelling capabilities. It's suitable for both production-grade applications and educational purposes, offering a versatile platform for data visualization tasks of varying complexity."},
{"Title": "I made a Python text to speech library - Pyt2s", "Author": "asksumanth", "Content": "What my project does: It supports services like IBM Watson, Acapela and Stream labs' demo websites to convert your text to speech. Target audience: It's a toy project and would not recommend you to use in Production. Comparison: It's wayyyyy easy to use. Just pip install and use in your project. No extra setup required like other libraries. Also supports various languages and voices and accents. Check docs for more. Here is the link to repository. Please go do check it out and star it if it's helpful to you guys. Thank you. I made this library taking inspiration from this php tts library by chrisjp."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Picodi - Simplifying Dependency Injection in Python", "Author": "yakimka", "Content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features"},
{"Title": "Declarative GUI Slint v1.6 released with Design Mode (WYSIWYG) Improvements", "Author": "madnirua", "Content": "https://slint.dev/blog/slint-1.6-released Slint is a declarative GUI toolkit to build native user interfaces for desktop and embedded applications. Find more information at https://slint.dev/ or check out the source code at https://github.com/slint-ui/slint. EDIT: The Python APIs are currently in alpha. More info -- https://github.com/slint-ui/slint/tree/master/api/python"},
{"Title": "Interactive plots in the terminal", "Author": "Spiffidimus", "Content": "I made a library to create interactive plots in the terminal (pip install itrm). It uses braille characters (by default) to display the data with sub-character resolution. There are several keybindings for moving a vertical cursor left and right, for zooming in or out on data, and for changing which curve to focus on. There are occasions (such as when working with a server) where MatPlotLib is not an option and the terminal is the only available tool. But, in my opinion, it is actually faster to use this tool (itrm) to zoom in on interesting parts of data and analyze patterns than using other tools like MatPlotLib. In fact, with large data sets (~1 million points), this tool actually renders faster than MatPlotLib. Please check it out and let know what you think."},
{"Title": "Python Test 220: Getting the most out of PyCon, including juggling - Rob Ludwick", "Author": "variedthoughts", "Content": "Listen at https://podcast.pythontest.com/episodes/220-juggling-pycon\nEven if you never get a chance to go to PyCon, I hope this interview helps you get a feel for the welcoming aspect of the Python community. The juggling at PyCon is one of the inspirations for PythonPeople.fm, one of PythonTests's sibling podcasts. Do you have any conference tips to add?"},
{"Title": "Homoiconic Python Code", "Author": "moonbunR", "Content": "Homoiconic, what does it mean? In simple terms, homoiconic code is when code is treated as data and can be manipulated as you would data. This means the code can be changed, new functions and variables added, the code can generate new code or even examine and modify its own structure and behavior all while it is running. That‚Äôs why homoiconic languages like Lisp are so powerful. But what if we can make a homoiconic python code, where the code and the data are one and the same and can be modified in the same way? This guide does a good job in trying to explain how you would create a python version of the ‚ÄúLisp in Lisp‚Äù code which would give you access to all those homoiconic features that Lisp brags of like the macro systems, the expressiveness and flexibility, the metaprogramming etc. while still using python. What do you guys think of this?"},
{"Title": "Implementing your own pypi clone", "Author": "chione99", "Content": "Hi, Just want to know how difficult is it to manage your own pypi clone and how do you recommend to create a seperation between dev and prod systems."},
{"Title": "Hi! I've published a Python client for IBKR REST and WebSocket APIs - IBind. Hope you like it üëã", "Author": "VoyZan", "Content": "Hi! I want to share a library I've built recently. IBind is a REST and WebSocket Python client for Interactive Brokers Client Portal Web API. It is directed at IBKR users. You can find IBind on GitHub: https://github.com/Voyz/ibind What My Project Does: It is a REST and WebSocket API for the Interactive Brokers' Web API. I'm particularly proud of a few things in this release:\nThe REST and WebSocket API clients are based on an abstract base class RestClient and WsClient accordingly. These could be implemented to use some other Web APIs in a relatively straightforward way. I have in fact used a version of that for a cryptocurrency WebSocket API, and it is nice to see it adapt to a different environment."},
{"Title": "Suggestions for python libraries to contribute to", "Author": "JimJimBerry", "Content": "Hey, python folks ! I have been coding in python for around 3 years, 2 years professionally. I have worked with asyncio, typing and other stuff that is needed to build a server. I was looking for a small but impactful enough open source core python library/application to work on. I tried cpython but it seems to be beyond my capability at the moment. As for my interests I was interested in lower level stuff as well as libraries like asyncio and celery. Any suggestions for libraries that could use a bit of help and teach me some stuff as well would be appreciated"},
{"Title": "The best Python CLI library, arguably.", "Author": "AND_MY_HAX", "Content": "What My Project Does https://github.com/treykeown/arguably arguably makes it super simple to define complex CLIs. It uses your function signatures and docstrings to set everything up. Here's how it works:\nAdding the @arguably.command decorator to a function makes it appear on the CLI.\nIf multiple functions are decorated, they'll all be set up as subcommands. You can even set up multiple levels of subcommands."},
{"Title": "LinkedIn-Learning-Downloader v1.1", "Author": "YounesWinter", "Content": "With Python i created a tool that enables users to download LinkedIn Learning courses, including the often overlooked but incredibly valuable exercise files. This feature sets our project apart, offering a complete learning experience by providing both the course videos and the materials needed for practical application.\nWhat great about it and beyond other tools in the same genre concerned LinkedIn Learning Downloaders, now you can download the whole courses from a path link. this is was never possible without Python."},
{"Title": "Manage Your Squid Proxy Server Efficiently with This Python Script", "Author": "SAV_NC", "Content": "ü¶ë Squid Proxy Manager Script Hello fellow Python enthusiasts! I've created a Python script that makes managing your Squid Proxy Server a breeze. If you're looking for an efficient and straightforward way to interact with your Squid server remotely, this script is for you. üéâ What My Project Does The Squid Proxy Manager script allows you to manage your Squid Proxy Server remotely using a simple command-line interface. Here are some of the key features:\nCheck Squid Service Status: Quickly check if your Squid service is running or not."},
{"Title": "Python Streamlit Spotlight Tutorial: an Interactive Dashboard using UNHCR Refugee Data", "Author": "jgloewen", "Content": "Python Streamlit is a terrific tool for creating interactive data visualizations. It packages all your visualizations up into a neat little application - including charts and maps - and displays them in your default browser. No muss, no fuss. Recently, I found a new dataset (to me) on the UN High Commission for Refugees (UNHCR) website. It contains country-to-country movements for refugees both from origin country and country of asylum Using this dataset, here's a step-by-step on how to code a Python Streamlit application that has:"},
{"Title": "Project: Simple Interactive Python Streamlit Maps With NASA GIS Data", "Author": "jgloewen", "Content": "Python Streamlit is terrific for putting together interactive dashboards. Combined with the geopandas library, streamlit can easily display GIS data points on a map for you. Forest fires in my home province of British Columbia, Canada have been really bad recently. NASA has a terrific dataset that keeps track of forest fires by country. Can I use Streamlit to access this dataset and display a map off all the fires within a certain area (BC) for a particular time frame (2021)? And can I give the user the ability to choose a month? You bet! Let me step you through how! FREE tutorial (with code):"},
{"Title": "FastAPI Backend Template for SaaS products", "Author": "shekhuu", "Content": "Hello there, I just created a template for creating a backend for your SaaS products. What my project does: It is a FastAPI project/template for creating SaaS backends and admin dashboards. Comparison: \nOut of the box, it supports\nLicence key generation and validation.\nOAuth 2 authentication with scopes."},
{"Title": "modern_colorthief - Modified Median Cut Quantization algorithm in rust + python", "Author": "BasePlate_Admin", "Content": "github\ndocumentation\nWhat my project does : It gets the dominant color/color palette from given image. Target Audience: Anyone Usage modern_colorthief exposes two functions get_color and get_palette Here is how to use get_color: from modern_colorthief import get_color\n\n# Path to any image\npath = ...\n\nprint(get_color(path)) # returns tuple[int,int,int]"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "IP subnet or IP calculator tool need feedback", "Author": "nicanorflavier", "Content": "Hey folks, I've been dabbling with a Python project recently that's all about making life easier for us I.T. people. It's a nifty little tool that calculates IP subnets and does IP calculations from the command or CLI. Here's the GitHub link and the code: https://github.com/nicanorflavier/ipnet I‚Äôm pretty stoked about it, but I know there‚Äôs always room for improvement. So, I thought, better to turn to than the wise minds of this python community? I‚Äôm all ears for any feedback, tips, tricks, or advice you guys might have. Thanks a ton in advance!"},
{"Title": "this.s and this.d", "Author": "VladTbk", "Content": "Recently, I found out about the this \"Easter egg\" in python3. Adding import this into a py file will print \"The Zen of Python\" by Tim Peters. Also, this has two attributes: this.s and this.d, which I guess form the actual Easter egg. this.s returns an encrypted version of \"The Zen\" and this.d well, see for yourself, maybe you'll solve the puzzle."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "New book! The Quick Python Book, Fourth Edition by Naomi Ceder", "Author": "ManningBooks", "Content": "Hello everybody, Thank you for having us here, and a huge \"Thank you\" to the moderators for letting us post. We have just released the latest edition of The Quick Python Book by the one-and-only Naomi Ceder, and I wanted to share that news with the community. Many of you are already familiar with Naomi's work and her massive contributions to the world of Python programming language. The Quick Python Book has aided over 100,000 developers in mastering Python. The Fourth Edition of the book has been revised to include the latest features, control structures, and libraries of Python, along with new coverage of working with AI-generated Python code. Naomi, the author, has beautifully balanced the details of the language with the insights and advice required to accomplish any task. Her personal touch has made learning Python an enjoyable experience for countless developers."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Mandelbrot Zoom using Python", "Author": "AbideByReason", "Content": "I made a YouTube video which previews the zoom and explains the code, which you can find here: https://youtu.be/HtNUFdh2sjg What my project does: it creates a Mandelbrot Zoom. Comparison: it uses Pillow and consists of just 2 main blocks of code: one is the main function that finds which points are in the Mandelbrot Set and the other is the main loop that applies appropriate colors to each image. It gives the option of being black and white OR in color. It works fairly well but can definitely be faster if parallelized. I'd love to hear any suggestions on how it can be improved. Target Audience: fun/toy project"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Frame - a new language for programming state machines in Python", "Author": "framelanger", "Content": "Hey, I am (re)releasing a project called Frame that I've been working on to create a language and transpiler to easily create state machines/automata in Python. It also is able to generate UML documentation as well. This project is for people who are interested in programming state machines for a wide range of purposes such as game programming, workflows, MBSE modeling as well as school projects for comp sci theory. It is also useful simply for generating flow documentation. The Framepiler (Frame transpiler) is in beta at this time. It would be great to get feedback from the Python community on any gaps in key functionality or bugs."},
{"Title": "Pre-commit hook to keep coverage badge in README up to date", "Author": "60percentcocoa", "Content": "Wrote this as a tool to keep README coverage badges up to date without relying on 3rd party services or having to do anything extra, thought others might get some utility out of it: coverage-pre-commit. A .coverage file is expected at the root of the project, generated by running coverage run directly or using a plugin such as pytest-cov when running tests. Most convenient when used as a pre-push hook imo. Feel free to opine, be it positive or negative!"},
{"Title": "typedattr: Autocompletion and typechecking for CLI script arguments, using standard argparse syntax", "Author": "gings7", "Content": "Excited to share my pypi package typedparser I have been working on for around 1 year now. What My Project Does: It enables writing CLI scripts and create an \"args\" variable with autocompleted members and type checks, but still keeps the simple and universally understood syntax of the stdlib argarse module. Target Audience: For stability, I battletested it in my research projects and added automatic builds as well as 80%+ test coverage. So I believe it is pretty stable. Comparison: For typing functionality it uses the attrs package as backend. It also provides some additional features for object and dictionary manipulation. Of course there are many other CLI argument packages out there, but this one stands out in that it tries to keep the syntax of the argparse standard library as much as possible, making it easy for others to figure out what your script does. Check it out and let me know what you think."},
{"Title": "sjvisualizer: a python package to animate time-series data", "Author": "PieChartPirate", "Content": "What the project does: data animation library for time-series data. Currently it supports the following chart types:\nBar races\nAnimated Pie Charts\nAnimated Line Charts\nAnimated Stacked Area Charts"},
{"Title": "Apple Health data exploration with Atlas, Clickhouse, Vega-Altair, Quarto", "Author": "__tosh", "Content": "What My Project Does A few days ago I wrote a simple python script (\"Atlas\") that turns the Apple Health export.xml file (which is about 1 GB in my case, with about 10 years of data) into a very simple parquet file (a bit like a compressed CSV) that is also way smaller (40 MB). The parquet file has 5 columns:\ntype (e.g. \"CyclingDistance\")\nvalue (e.g. \"12.100\")"},
{"Title": "SQLPage - a Python library to add string token based pagination easily", "Author": "kernelslayer", "Content": "What My Project Does - This is a Python package to easily add string token based pagination. Currently it supports SQLModel and SQLAlchemy ORMs. Recently I wanted to add pagination in one of my Python projects and in the API response, I had to return a string next page token. Now I could not find a straight-forward way of doing this in Python. All of the tutorials or blog posts I saw, there in the response the server always returned a page_number, page_size, and total_elements and then the onus was on the calling service to adjust this accordingly.  Comparison - The current packages and methods requires some changes in the app layer as well. I tried using a few but those did not satisfy the use case and were also a bit harder to implement. I could not find a easy to use option. The present ones returned integers instead of a string token"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyWolt: Wolt food delivery service API wrapper", "Author": "daivushe1", "Content": "I'm thrilled to share my first open-source project with you all: PyWolt! üéâ PyWolt is a Python library that makes it super easy to interact with the Wolt API.\nWhat My Project Does:\nDiscover Venues: Find nearby spots to grab a bite.\nExplore Menus: Dive into a venue's menu and pick your favorites.\nTarget Audience:"},
{"Title": "UXsim 1.3.0 released with vehicle tracking and improved vehicle routing", "Author": "Balance-", "Content": "Main Changes\nAdd GUI functions\nVehicle tracking: You can now track a specific vehicle to see their route\nDataframe viewer: Stats can be confirmed\nImprove vehicle routing functions\nAdd example of routing optimization"},
{"Title": "Dash vs Reflex vs Others", "Author": "Sea_Split_1182", "Content": "Where can I find a decent comparison (pros and cons) of these 5 solutions? They seem to be solving the same problem, which is, afaiu, separating the frontend ‚Äòannoyance‚Äô from Python scripting / math.\n‚Å†Reflex (used to be called Pynecone) https://reflex.dev\n‚Å†Streamlit https://streamlit.io\n‚Å†Gradio https://gradio.app\n‚Å†Dash https://dash.plotly.com"},
{"Title": "I made a python bot that plays minesweeper", "Author": "_dwightshrute", "Content": "Hello, I made this Minesweeper bot that I wanted to share with you all. What My Project Does - The bot takes a screenshot of the board and runs a classification algorithm to extract the contents of the board. It then analyzes the board, finds as many mines as it can, and sends clicks. If it cannot find any mines then it guesses the most probable position of a mine. Target Audience - It's a toy project for anyone interested in algorithms or problem-solving. Comparison - This is just my attempt at making a minesweeper bot. I'm sure there are many bots out there that are much more efficient than this."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Resume Screening Chatbot using RAG Fusion", "Author": "Babe_My_Name_Is_Hung", "Content": "Hi everyone! I recently finished a small side project for my graduating thesis, which is about experimenting with RAG-based frameworks in improving resume screening. What my project does: The project for the thesis is a GPT-4 Chatbot with RAG Fusion retrieval. Given a job description as input, the system retrieves the most relevant candidate profiles to perform follow-up tasks such as analysis, summarization, and decision-making, which can assist the screening process better. The revolving idea is that the similarity-based retrieval process can effectively narrow the initial large pool of applicants down to the most relevant resumes. However, this simple similarity ranking should not be used to evaluate a candidate's actual ability. Therefore, the top resumes are used to augment the GPT-4 Chatbot so it can be conditioned on these profiles and perform further downstream tasks."},
{"Title": "Production grade AI Web apps, just using python ?", "Author": "prime_danger", "Content": "Hey guys, I have worked on building multiple ai/ml usecases and their specific backends. But now I want build interfaces for easy and quick integration. I saw a blog which used FastUI which looks quick decent but when I tried it just showed me a Json of elements on the page. Are there any other libraries I should use? ü§î"},
{"Title": "Apple Health data exploration with Atlas, Clickhouse, Vega-Altair, Quarto", "Author": "__tosh", "Content": "What My Project Does A few days ago I wrote a simple python script (\"Atlas\") that turns the Apple Health export.xml file (which is about 1 GB in my case, with about 10 years of data) into a very simple parquet file (a bit like a compressed CSV) that is also way smaller (40 MB). The parquet file has 5 columns:\ntype (e.g. \"CyclingDistance\")\nvalue (e.g. \"12.100\")"},
{"Title": "Auto Data Analysis python packages to know", "Author": "mehul_gupta1997", "Content": "Check this video tutorial to explore different AutoEDA python packages like pandas-profiling, sweetviz, dataprep,etc which can enable automatic data analysis within minutes without any effort : https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry"},
{"Title": "I made a React-like web framework for Python üëã", "Author": "Rawing7", "Content": "I'm Paul, one of the creators of Rio. Over the years I've tried many different established python GUI frameworks, but none of them really satisfied me. So I teamed up with a few like minded developers and spent the last few months to create our own framework. Rio is the result of this effort. What My Project Does Rio is a brand new GUI framework that lets you create modern web apps in just a few lines of Python. Our goal is to simplify web and app development, so you can focus on the things you care about, instead of wasting countless hours on frustrating user interface details. We do this by following the core principles of Python that we all know and love. Python is supposed to be simple and compact - and so is Rio. There is no need to learn any additional languages such as HTML, CSS or JavaScript, because all of the UI, Logic, Components and even layouting is done entirely in Python. There‚Äôs not even a distinction between front-end and back-end. Rio handles all of the communication transparently for you."},
{"Title": "Giving New Life to JModelica: Bringing Powerful Modelica Simulations to Python", "Author": "foadsf", "Content": "Five years ago, I posted about JModelica, a fantastic open-source tool for simulating complex systems that combined the ease of Python with the strength of Modelica. Sadly, the project went quiet, but I'm thrilled to share that, thanks to the dedication of a few folks (myself included!), JModelica is back! You can find the revived project on GitHub: https://github.com/JModelica/JModelica. What JModelica Does: JModelica provides a way to write complex simulations using the Modelica language, which is known for its ability to handle differential equations and model physical systems beautifully. The magic of JModelica lies in its Python integration‚Äîyou can solve your Modelica models and access the results directly in Python for in-depth analysis, visualization, and even optimization using libraries you already love!"},
{"Title": "Is PyGame still alive?", "Author": "pyeri", "Content": "So it was a long time ago in the good old Python 2.x days (circa 2010 probably) that I had learned PyGame with some tutorials at my former work place. But nowadays since I mostly freelance with business apps, I never felt the need for it. But since such a game development project is on the horizon after all these years, I was wondering if PyGame can still be up for the task with Python 3.x? Or is there a better Python library available these days? I don't need any advanced gaming features of modern day VFX or anything, all I need is some basic Mario/Luigi style graphics, that's all!"},
{"Title": "Folks who know the internals: Where does operator precedence \"happen\"?", "Author": "BeerIsTheMindKiller", "Content": "Hey! Messing around with instaviz, cool library, highly recommend. You can visualize a function's bytecode as well as AST and some other stuff. i entered this: def f():\n  x = 1 + 2 - 10**2\n  return x I was expecting the AST nodes for 1 + 2 - 10**2 to be rearranged somehow, with 10**2 being moved to the left hand of the expression, because exponents get evaluated before addition/subtraction. but no! just looks like this:"},
{"Title": "I made a python bot that plays minesweeper", "Author": "_dwightshrute", "Content": "Hello, I made this Minesweeper bot that I wanted to share with you all. What My Project Does - The bot takes a screenshot of the board and runs a classification algorithm to extract the contents of the board. It then analyzes the board, finds as many mines as it can, and sends clicks. If it cannot find any mines then it guesses the most probable position of a mine. Target Audience - It's a toy project for anyone interested in algorithms or problem-solving. Comparison - This is just my attempt at making a minesweeper bot. I'm sure there are many bots out there that are much more efficient than this."},
{"Title": "The new REPL in Python 3.13.0 beta 1", "Author": "treyhunner", "Content": "Python 3.13.0 beta 1 was released today. The feature I'm most excited about is the new Python REPL. Here's a summary of my favorite features in the new REPL along with animated gifs. The TLDR:\nSupport for block-leveling history and block-level editing\nPasting code (even with blank lines within it) works as expected now\nTyping exit will exit (no more Use exit() or Ctrl-D (i.e. EOF) to exit message)"},
{"Title": "Track the size of your PyInstaller packages in CI", "Author": "bencherdev", "Content": "If you have ever wanted to track the size of your PyInstaller packages in CI, Bencher now supports tracking your package size: https://bencher.dev/docs/how-to/track-file-size/"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Production grade AI Web apps, just using python ?", "Author": "prime_danger", "Content": "Hey guys, I have worked on building multiple ai/ml usecases and their specific backends. But now I want build interfaces for easy and quick integration. I saw a blog which used FastUI which looks quick decent but when I tried it just showed me a Json of elements on the page. Are there any other libraries I should use? ü§î"},
{"Title": "Calculating Virtual Cycling Power With Python", "Author": "TokenChingy", "Content": "I was doing some light reading and stumbled across Steve Gribbles Power vs Speed Calculator and thought I'd give it a go at rebuilding it based on his Physics model using Python. Then I wrote an article about. Thought I'd share it with you all: Calculating Virtual Cycling Power (jasonlei.com)"},
{"Title": "I created a Python script that makes it easier to track how your baby's sleep is improving", "Author": "BX1959", "Content": "My wife and I use the Huckleberry app to track our baby's sleep periods. Although the free version of the app allows you to view a number of sleep-related metrics, I also wanted to see whether his longest nightly sleep stretches were getting longer over time. Therefore, I created a Python project to help me answer this and other questions I had about my baby's sleep.\nWhat My Project Does\nThis project reads in data from a Huckleberry .csv export (or a separate custom .csv file); analyzes its sleep information; and then produces ."},
{"Title": "pip time machine", "Author": "rejectedlesbian", "Content": "https://github.com/nevakrien/time_machine_pip this is a fairly simple project barely anything to it but I think its promising\nthe idea is to put pip in a time machine so it can not use package versions that were made after the project is made. I am doing this by proxiying pypi and cutting out the newer versions. initial tests show that pip respects the proxy and works like you would expect"},
{"Title": "CLI to embed code snippets in your README, from actual (testable) code", "Author": "realazthat", "Content": "What My Project Does What My Project Does: snipinator is a CLI to embed (testable) snippets from your codebase into your README, using Jinja2 and functions provided by snipinator to assist with embedding code, shell output, etc. Please provide any feedback in the comments or GH issues. Target Audience Target Audience: Developers of {GitHub,other} projects that have a README. It works for me, it might work for you. Comparison Features:\nSupports anything Jinja2 supports."},
{"Title": "Is PyGame still alive?", "Author": "pyeri", "Content": "So it was a long time ago in the good old Python 2.x days (circa 2010 probably) that I had learned PyGame with some tutorials at my former work place. But nowadays since I mostly freelance with business apps, I never felt the need for it. But since such a game development project is on the horizon after all these years, I was wondering if PyGame can still be up for the task with Python 3.x? Or is there a better Python library available these days? I don't need any advanced gaming features of modern day VFX or anything, all I need is some basic Mario/Luigi style graphics, that's all!"},
{"Title": "ChatGPT can talk with all my Python notebooks", "Author": "pp314159", "Content": "I'm working on an open-source framework for converting Python notebooks into web applications, it is called Mercury. Recently, I have added an option to execute notebooks with REST API. You can pass paramters in POST request body to the notebook, execute all cells and return JSON as response. I'm also running a SaaS service, Mercury Cloud where you can deploy notebooks with one-click with unique website domain. What My Project Does It makes Python notebooks extermely easy to integrate with custom ChatGPT, so GPT can execute Python notebooks and get response. It is 3-steps process:"},
{"Title": "Building an LLM chat application using RAG Agent", "Author": "iryna_kondr", "Content": "Motivation\nChatbots are among the most popular applications of large language models (LLMs). Often, an LLM's internal knowledge base is adequate for answering users questions. However, in those cases, the model may generate outdated, incorrect, or too generic responses when specificity is expected. These challenges can be partially addressed by supplementing the LLM with an external knowledge base and employing the retrieval-augmented generation (RAG) technique. However, if user queries are complex, it may be necessary to break the task into several sub-parts. In such cases, relying solely on the RAG technique may not be sufficient, and the use of agents may be required."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Track the size of your PyInstaller packages in CI", "Author": "bencherdev", "Content": "If you have ever wanted to track the size of your PyInstaller packages in CI, Bencher now supports tracking your package size: https://bencher.dev/docs/how-to/track-file-size/"},
{"Title": "Framework to use for backend", "Author": "Clickyz", "Content": "Hello guys I recently decided to move from nodejs(expressjs) to python for general purposes but mostly for backend. I have couple of questions.\nWill i regret my migration to python? :)\nWhich framework you suggest for backend solo dev?\nAnd what tips are you suggesting me in general to get used to python."},
{"Title": "InterProcessPyObjects: Fast IPC for Sharing and Modifying Objects Across Processes", "Author": "FI_Mihej", "Content": "InterProcessPyObjects Python package\ngithub.com/FI-Mihej/InterProcessPyObjects If you like the project, consider giving it a star on GitHub to show your support and help further development. :) pypi.org/project/InterProcessPyObjects\nWhat My Project Does\nInterProcessPyObjects is a part of the Cengal library. If you have any questions or would like to participate in discussions, feel free to join the . Your support and involvement are greatly appreciated as Cengal evolves."},
{"Title": "What changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ?", "Author": "These_Shoe3594", "Content": "What are all the changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ? There are some CVE fixes available in the latest 3.x version of werkzueg. To take the fixes as part of my code, we want to upgrade the version. When I do so, I‚Äôve faced lot of breakages. I found some on documents and release notes. But it would be easier if someone already did some changes regarding this."},
{"Title": "I created a Python script that makes it easier to track how your baby's sleep is improving", "Author": "BX1959", "Content": "My wife and I use the Huckleberry app to track our baby's sleep periods. Although the free version of the app allows you to view a number of sleep-related metrics, I also wanted to see whether his longest nightly sleep stretches were getting longer over time. Therefore, I created a Python project to help me answer this and other questions I had about my baby's sleep.\nWhat My Project Does\nThis project reads in data from a Huckleberry .csv export (or a separate custom .csv file); analyzes its sleep information; and then produces ."},
{"Title": "map_plotter - abstracts complexity of creating intensity plots overlaid onto global map", "Author": "teamamentum", "Content": "What My Project Does\nOverlaying intensity plots onto a geographical map using cartopy/matplotlib can be complex. So we created this map_plotter package to abstract away that complexity for a common use case. Installation (opinionated use of conda to avoid cartopy dependency hell and install precompiled binaries) conda install cartopy\ngit clone git@github.com:amentumspace/map_plotter.git\ncd map_plotter\npip install ."},
{"Title": "Langchain using llama3 to build recommendation system", "Author": "yngwieHero", "Content": "Hi, Recently I played a bit with LLMs, specifcally exploring ways of running the models locally and building prompts using LangChain. As a result ended up coding a small recommendation system, powered with Llama3-7b model, which suggests topics to read on HackerNews. Wanted to share my experiences, so I wrote a small article where I described all my findings.\nHope you'll like it: https://lukaszksiezak.github.io/ScrapyToLLM/ Github repo: https://github.com/lukaszksiezak/ScrapyToLLM What the project does: It's a Python application which uses scrapy to scrape HackerNews page. Scraped articles are pipelined to redis, which is then feeding Llama3 using langchain. Prompter is configured to serve a user articles which are matching his request."},
{"Title": "New Python-only abstractions for extracting data from apis", "Author": "Thinker_Assignment", "Content": "Hey there, you are probably familiar with REST APIs.\nWe at dlt library added a new way to get data from apis (and dlt can already load it with best practice to db or parquet). We already did some internal hackathons but we would appreciate your feedback so we can improve it further\n- Our new REST API Source is a short, declarative configuration driven way of creating sources.\n- Our new REST API Client is a collection of Python helpers used by the above source, which you can also use as a standalone, config-free, imperative high-level abstraction for building pipelines.\nYou can read more about the source here or go to our docs for the REST APIClient info\n\nPS: see you at Pycon Pittsburgh!"},
{"Title": "AzuracastPy: An Unofficial Python Wrapper for the Azuracast API.", "Author": "ARandomBoiIsMe", "Content": "Source code What My Project Does: It acts as a wrapper for the AzuraCast API, providing custom functions and classes for more straightforward use of the API in python projects. Target Audience: Python users who are interested in programmatically interacting with online radios hosted on AzuraCast. Comparison: The idea of API Wrappers is not new. However, I noticed that the only existing wrapper for this API is written in PHP, which I am not experienced with. I created this project so I, and other python programmers by extension, could have an easier time working with the API."},
{"Title": "ChatGPT can talk with all my Python notebooks", "Author": "pp314159", "Content": "I'm working on an open-source framework for converting Python notebooks into web applications, it is called Mercury. Recently, I have added an option to execute notebooks with REST API. You can pass paramters in POST request body to the notebook, execute all cells and return JSON as response. I'm also running a SaaS service, Mercury Cloud where you can deploy notebooks with one-click with unique website domain. What My Project Does It makes Python notebooks extermely easy to integrate with custom ChatGPT, so GPT can execute Python notebooks and get response. It is 3-steps process:"},
{"Title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"", "Author": "AlSweigart", "Content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs I'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10) Once printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become."},
{"Title": "PyCon US 2024 is here!", "Author": "monorepo", "Content": "Official Event"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "diskcache: This key-value store library is faster than Redis and Memcached üòÆ (built by Grant Jenks)", "Author": "RevolutionaryPen4661", "Content": "PYPI (From the README, Released Last Year, Edited by Grammarly) Github pip install diskcache The cloud-based computing of 2024 puts a premium on memory. Gigabytes of space are left on disks as processes vie for memory. Memcached (and sometimes Redis) is used as a cache among these processes. Wouldn‚Äôt it be nice to leverage empty disk space for caching? Django is Python‚Äôs most popular web framework and has several caching backends. Unfortunately, the file-based cache in Django is essentially broken. The culling method is random and large caches repeatedly scan a cache directory which slows linearly with growth. Can you allow it to take sixty milliseconds to store a key in a cache with a thousand items?"},
{"Title": "Reviewing Dataframe Changes? Looking for Your Preferred Methods!", "Author": "rageagainistjg", "Content": "After playing around with a dataframe‚Äîapplying filters or other transformations‚ÄîI'm curious about your methods for reviewing the changes. In VS Code, the variable explorer is quite handy for a quick look at the modified dataframe. Alternatively, when working in a Jupyter notebook within VS Code, exporting the data to an Excel file provides a detailed view and allows for an easy deep dive into the results. What are your preferred practices for ensuring your data adjustments are precisely what you intended?"},
{"Title": "Framework to use for backend", "Author": "Clickyz", "Content": "Hello guys I recently decided to move from nodejs(expressjs) to python for general purposes but mostly for backend. I have couple of questions.\nWill i regret my migration to python? :)\nWhich framework you suggest for backend solo dev?\nAnd what tips are you suggesting me in general to get used to python."},
{"Title": "Blat AI generates Python code to do web-scraping (code based on Scrapy framework)", "Author": "arnaupv", "Content": "Miguel Algorri and Arnau Pont V√≠lchez here, blat co-founders! Target Audience\nPeople who need to collect public data from the web (pricing, articles, reviews, leads etc). What does our Project Do?\nAt blat we aim to deliver production-ready web scraping code in minutes (written in Python, Scrapy framework).\nThis is feasible thanks to our Web Scraping AI Agent üß†. Here our CLI to interact with the Web Scraping AI Agent (github). Too good to be true?"},
{"Title": "Interactive Data Visualization with Python: A Showcase of Plotly Dash", "Author": "AbhishekSuryavanshee", "Content": "What My Project Does:\nI'm excited to introduce my latest project built with Python ‚Äì an interactive data visualization application using Plotly Dash. This project aims to empower users to explore and analyze datasets dynamically through interactive visualizations. By leveraging Plotly Dash's capabilities, users can interact with data in real-time, customize visualizations on the fly, and gain deeper insights with just a few clicks. Target Audience:\nThis project caters to a wide range of users, from data enthusiasts and analysts to professionals seeking to communicate insights effectively. Whether you're a data scientist exploring patterns in large datasets or a business analyst presenting findings to stakeholders, this tool is designed to streamline your workflow and enhance your data storytelling capabilities. It's suitable for both production-grade applications and educational purposes, offering a versatile platform for data visualization tasks of varying complexity."},
{"Title": "Who is using quart framework for microservices?", "Author": "Dry_Raspberry4514", "Content": "I am using quart framework (https://quart.palletsprojects.com) for a number of microservices in a SaaS application. However, I hardly hear anything about this framework on any social media platform which seems to be dominated by FastAPI. Also I'm unable to find which all projects/companies are using this framework. All this is leading to anxiety around the future of this project. Are there any well known projects / companies which are using this framework for microservices?"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "New Python-only abstractions for extracting data from apis", "Author": "Thinker_Assignment", "Content": "Hey there, you are probably familiar with REST APIs.\nWe at dlt library added a new way to get data from apis (and dlt can already load it with best practice to db or parquet). We already did some internal hackathons but we would appreciate your feedback so we can improve it further\n- Our new REST API Source is a short, declarative configuration driven way of creating sources.\n- Our new REST API Client is a collection of Python helpers used by the above source, which you can also use as a standalone, config-free, imperative high-level abstraction for building pipelines.\nYou can read more about the source here or go to our docs for the REST APIClient info\n\nPS: see you at Pycon Pittsburgh!"},
{"Title": "Declarative GUI Slint v1.6 released with Design Mode (WYSIWYG) Improvements", "Author": "madnirua", "Content": "https://slint.dev/blog/slint-1.6-released Slint is a declarative GUI toolkit to build native user interfaces for desktop and embedded applications. Find more information at https://slint.dev/ or check out the source code at https://github.com/slint-ui/slint. EDIT: The Python APIs are currently in alpha. More info -- https://github.com/slint-ui/slint/tree/master/api/python"},
{"Title": "Why is Plotly so cumbersome to tweak?", "Author": "olive_oil_for_you", "Content": "I made this visualisation with this code. I have three questions:\nIs Plotly supposed to be this cumbersome to tweak? Would other libraries require the same amount of code to add the details I did?\nCan my code be reduced in size? Maybe it's me who is complicating things with Plotly and there are easier ways to do what I am doing.\nAny R enthusiast who can tell me how much shorter this code would look like with ggplot2? I asked ChatGPT but the result was garbage."},
{"Title": "Library for automatic Cython 3.0 code annotations generation.", "Author": "Cool-Nefariousness76", "Content": "Hi everybody, over the last year I've been developing a library that adds some Cython 3.0 annotations to existing python code. What My Project Does: For example if it sees a for i in range(): in a function it recognizes i as an integer and adds a i = cython.declare(cython.int)line at the beginning of the function. It actually uses the built-in ast module under the hood for parsing, I found it a super useful library! Target Audience: It is a side project I made mainly for fun. I don't know if it can be of interest to anybody, or if it could have some potential utility."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Implementing your own pypi clone", "Author": "chione99", "Content": "Hi, Just want to know how difficult is it to manage your own pypi clone and how do you recommend to create a seperation between dev and prod systems."},
{"Title": "I connected LLM to Python runtime and generated unit-tests (OpenSource)", "Author": "Financial_Muffin396", "Content": "Hi all, I initially started this adventure by trying to automate bug fixes with the help of LLMs. However, I received feedback saying the fixes aren't always correct, leading to the question: why bother reviewing PRs that might add more issues? (It's really hard for LLMs to say \"I don't know\"). So, I decided to focus on reliability perfecting unit tests. The source code is available at: https://github.com/CaptureFlow/captureflow-py What My Project Does: It incorporates a tracer client-side Python library and a backend that accumulates such traces and is capable of proposing code improvements and generating tests for your repository. It traverses the execution graph, extracts relevant parts, enriches them with implementation data from the GitHub API, and then generates tests with the help of GPT4."},
{"Title": "APScheduler vs Schedule package", "Author": "kostakos14", "Content": "Hey folks, looking to use one library to implement some background scheduling logic on my application. I find in Google search APScheduler to be frequently mentioned, but I can see the Schedule package has more GH stars. Was curious if anybody has used one of them, and which one would you recommend based on your own experience."},
{"Title": "Interactive Data Visualization with Python: A Showcase of Plotly Dash", "Author": "AbhishekSuryavanshee", "Content": "What My Project Does:\nI'm excited to introduce my latest project built with Python ‚Äì an interactive data visualization application using Plotly Dash. This project aims to empower users to explore and analyze datasets dynamically through interactive visualizations. By leveraging Plotly Dash's capabilities, users can interact with data in real-time, customize visualizations on the fly, and gain deeper insights with just a few clicks. Target Audience:\nThis project caters to a wide range of users, from data enthusiasts and analysts to professionals seeking to communicate insights effectively. Whether you're a data scientist exploring patterns in large datasets or a business analyst presenting findings to stakeholders, this tool is designed to streamline your workflow and enhance your data storytelling capabilities. It's suitable for both production-grade applications and educational purposes, offering a versatile platform for data visualization tasks of varying complexity."},
{"Title": "Manage Your Squid Proxy Server Efficiently with This Python Script", "Author": "SAV_NC", "Content": "ü¶ë Squid Proxy Manager Script Hello fellow Python enthusiasts! I've created a Python script that makes managing your Squid Proxy Server a breeze. If you're looking for an efficient and straightforward way to interact with your Squid server remotely, this script is for you. üéâ What My Project Does The Squid Proxy Manager script allows you to manage your Squid Proxy Server remotely using a simple command-line interface. Here are some of the key features:\nCheck Squid Service Status: Quickly check if your Squid service is running or not."},
{"Title": "Declarative GUI Slint v1.6 released with Design Mode (WYSIWYG) Improvements", "Author": "madnirua", "Content": "https://slint.dev/blog/slint-1.6-released Slint is a declarative GUI toolkit to build native user interfaces for desktop and embedded applications. Find more information at https://slint.dev/ or check out the source code at https://github.com/slint-ui/slint. EDIT: The Python APIs are currently in alpha. More info -- https://github.com/slint-ui/slint/tree/master/api/python"},
{"Title": "Introducing Notolog: Python Markdown Editor built with PySide6", "Author": "devotaku", "Content": "Excited to share my personal open-source project: Notolog - Python Markdown Editor (MIT License). The main motivation for developing another markdown editor was my passion for learning new things and enhancing my development skills in Python. I developed it in my spare time over a few months, despite having no prior experience in creating full-scale Python applications. What My Project Does ‚àó Multiplatform ‚àó Markdown async syntax highlighting created by me ‚àó Several pre-installed color themes ‚àó Supports English and 17 other languages right out of the box ‚àó Integration with OpenAI API for AI-assisted features"},
{"Title": "I made a python package that can parse Excel Formula Strings into dictionary structures!", "Author": "MPGaming9000", "Content": "What my project does: It basically takes a formula string like you'd get from Openpyxl like \"=SUM(A1:B2)\" and breaks it all out into a dictionary structure for you to then navigate through, modify, and then reformat that modified structure back into an excel friendly formula string again! Target Audience: (People who modify Excel formula strings in automated spreadsheet modification scripts. Or people who need to analyze formulas in a spreadsheet to do some kind of logic based on that analysis). Disclaimer: For most people some simple regex pattern matching and str replaces would be fine to modify formulas but if you need a more structured approach to working with these strings, this package has you covered!"},
{"Title": "modern_colorthief - Modified Median Cut Quantization algorithm in rust + python", "Author": "BasePlate_Admin", "Content": "github\ndocumentation\nWhat my project does : It gets the dominant color/color palette from given image. Target Audience: Anyone Usage modern_colorthief exposes two functions get_color and get_palette Here is how to use get_color: from modern_colorthief import get_color\n\n# Path to any image\npath = ...\n\nprint(get_color(path)) # returns tuple[int,int,int]"},
{"Title": "I've developed a library for send metrics to zabbix asynchronously", "Author": "Royal_Section4889", "Content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this. Tests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async What My Project Does Send zabbix sender messages using asyncio tasks. Target Audience SysAdmins who use Zabbix to monitor a large number of metrics. Comparison Instead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix"},
{"Title": "Implementing your own pypi clone", "Author": "chione99", "Content": "Hi, Just want to know how difficult is it to manage your own pypi clone and how do you recommend to create a seperation between dev and prod systems."},
{"Title": "Hatch v1.10.0 - UV support, new test command and built-in script runner", "Author": "Ofekmeister", "Content": "Hello everyone! I'd like to announce version 1.10.0: https://hatch.pypa.io/latest/blog/2024/05/02/hatch-v1100/ Feel free to provide any feedback either here or as a discussion on the repo: https://github.com/pypa/hatch"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Python text to speech library - Pyt2s", "Author": "asksumanth", "Content": "What my project does: It supports services like IBM Watson, Acapela and Stream labs' demo websites to convert your text to speech. Target audience: It's a toy project and would not recommend you to use in Production. Comparison: It's wayyyyy easy to use. Just pip install and use in your project. No extra setup required like other libraries. Also supports various languages and voices and accents. Check docs for more. Here is the link to repository. Please go do check it out and star it if it's helpful to you guys. Thank you. I made this library taking inspiration from this php tts library by chrisjp."},
{"Title": "What does your python development setup look like?", "Author": "Working_Noise_6043", "Content": "I'd like to explore other people's setup and perhaps try need things or extra tools. What kind IDE, any extra tools to make it easier for you, etc. Looking forward to everyone's responses!"},
{"Title": "Manage Your Squid Proxy Server Efficiently with This Python Script", "Author": "SAV_NC", "Content": "ü¶ë Squid Proxy Manager Script Hello fellow Python enthusiasts! I've created a Python script that makes managing your Squid Proxy Server a breeze. If you're looking for an efficient and straightforward way to interact with your Squid server remotely, this script is for you. üéâ What My Project Does The Squid Proxy Manager script allows you to manage your Squid Proxy Server remotely using a simple command-line interface. Here are some of the key features:\nCheck Squid Service Status: Quickly check if your Squid service is running or not."},
{"Title": "Frame - a new language for programming state machines in Python", "Author": "framelanger", "Content": "Hey, I am (re)releasing a project called Frame that I've been working on to create a language and transpiler to easily create state machines/automata in Python. It also is able to generate UML documentation as well. This project is for people who are interested in programming state machines for a wide range of purposes such as game programming, workflows, MBSE modeling as well as school projects for comp sci theory. It is also useful simply for generating flow documentation. The Framepiler (Frame transpiler) is in beta at this time. It would be great to get feedback from the Python community on any gaps in key functionality or bugs."},
{"Title": "Interactive plots in the terminal", "Author": "Spiffidimus", "Content": "I made a library to create interactive plots in the terminal (pip install itrm). It uses braille characters (by default) to display the data with sub-character resolution. There are several keybindings for moving a vertical cursor left and right, for zooming in or out on data, and for changing which curve to focus on. There are occasions (such as when working with a server) where MatPlotLib is not an option and the terminal is the only available tool. But, in my opinion, it is actually faster to use this tool (itrm) to zoom in on interesting parts of data and analyze patterns than using other tools like MatPlotLib. In fact, with large data sets (~1 million points), this tool actually renders faster than MatPlotLib. Please check it out and let know what you think."},
{"Title": "Tutorial on Building a Server-to-Server Zoom App with Python", "Author": "SleekEagle", "Content": "I made a tutorial on how to build a server-to-server Zoom OAuth application using Python. This application can transcribe Zoom meeting recordings, print the transcripts to the terminal, and save the transcripts as text files.\nvideo tutorial\nrepo\nwritten tutorial"},
{"Title": "modern_colorthief - Modified Median Cut Quantization algorithm in rust + python", "Author": "BasePlate_Admin", "Content": "github\ndocumentation\nWhat my project does : It gets the dominant color/color palette from given image. Target Audience: Anyone Usage modern_colorthief exposes two functions get_color and get_palette Here is how to use get_color: from modern_colorthief import get_color\n\n# Path to any image\npath = ...\n\nprint(get_color(path)) # returns tuple[int,int,int]"},
{"Title": "SQLPage - a Python library to add string token based pagination easily", "Author": "kernelslayer", "Content": "What My Project Does - This is a Python package to easily add string token based pagination. Currently it supports SQLModel and SQLAlchemy ORMs. Recently I wanted to add pagination in one of my Python projects and in the API response, I had to return a string next page token. Now I could not find a straight-forward way of doing this in Python. All of the tutorials or blog posts I saw, there in the response the server always returned a page_number, page_size, and total_elements and then the onus was on the calling service to adjust this accordingly.  Comparison - The current packages and methods requires some changes in the app layer as well. I tried using a few but those did not satisfy the use case and were also a bit harder to implement. I could not find a easy to use option. The present ones returned integers instead of a string token"},
{"Title": "Hi! I've published a Python client for IBKR REST and WebSocket APIs - IBind. Hope you like it üëã", "Author": "VoyZan", "Content": "Hi! I want to share a library I've built recently. IBind is a REST and WebSocket Python client for Interactive Brokers Client Portal Web API. It is directed at IBKR users. You can find IBind on GitHub: https://github.com/Voyz/ibind What My Project Does: It is a REST and WebSocket API for the Interactive Brokers' Web API. I'm particularly proud of a few things in this release:\nThe REST and WebSocket API clients are based on an abstract base class RestClient and WsClient accordingly. These could be implemented to use some other Web APIs in a relatively straightforward way. I have in fact used a version of that for a cryptocurrency WebSocket API, and it is nice to see it adapt to a different environment."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Multipart File Uploads to S3 with Python", "Author": "tylersavery", "Content": "I created this tutorial after overcoming a difficult challenge myself: uploading 5GB+ files to AWS. This approach allows the browser to securely upload directly to an S3 bucket without the file having to travel through the backend server. The implementation is written in python (backend) and vanilla js (frontend)."},
{"Title": "UXsim 1.3.0 released with vehicle tracking and improved vehicle routing", "Author": "Balance-", "Content": "Main Changes\nAdd GUI functions\nVehicle tracking: You can now track a specific vehicle to see their route\nDataframe viewer: Stats can be confirmed\nImprove vehicle routing functions\nAdd example of routing optimization"},
{"Title": "Python Streamlit Spotlight Tutorial: an Interactive Dashboard using UNHCR Refugee Data", "Author": "jgloewen", "Content": "Python Streamlit is a terrific tool for creating interactive data visualizations. It packages all your visualizations up into a neat little application - including charts and maps - and displays them in your default browser. No muss, no fuss. Recently, I found a new dataset (to me) on the UN High Commission for Refugees (UNHCR) website. It contains country-to-country movements for refugees both from origin country and country of asylum Using this dataset, here's a step-by-step on how to code a Python Streamlit application that has:"},
{"Title": "Frame - a new language for programming state machines in Python", "Author": "framelanger", "Content": "Hey, I am (re)releasing a project called Frame that I've been working on to create a language and transpiler to easily create state machines/automata in Python. It also is able to generate UML documentation as well. This project is for people who are interested in programming state machines for a wide range of purposes such as game programming, workflows, MBSE modeling as well as school projects for comp sci theory. It is also useful simply for generating flow documentation. The Framepiler (Frame transpiler) is in beta at this time. It would be great to get feedback from the Python community on any gaps in key functionality or bugs."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Resume Screening Chatbot using RAG Fusion", "Author": "Babe_My_Name_Is_Hung", "Content": "Hi everyone! I recently finished a small side project for my graduating thesis, which is about experimenting with RAG-based frameworks in improving resume screening. What my project does: The project for the thesis is a GPT-4 Chatbot with RAG Fusion retrieval. Given a job description as input, the system retrieves the most relevant candidate profiles to perform follow-up tasks such as analysis, summarization, and decision-making, which can assist the screening process better. The revolving idea is that the similarity-based retrieval process can effectively narrow the initial large pool of applicants down to the most relevant resumes. However, this simple similarity ranking should not be used to evaluate a candidate's actual ability. Therefore, the top resumes are used to augment the GPT-4 Chatbot so it can be conditioned on these profiles and perform further downstream tasks."},
{"Title": "IP subnet or IP calculator tool need feedback", "Author": "nicanorflavier", "Content": "Hey folks, I've been dabbling with a Python project recently that's all about making life easier for us I.T. people. It's a nifty little tool that calculates IP subnets and does IP calculations from the command or CLI. Here's the GitHub link and the code: https://github.com/nicanorflavier/ipnet I‚Äôm pretty stoked about it, but I know there‚Äôs always room for improvement. So, I thought, better to turn to than the wise minds of this python community? I‚Äôm all ears for any feedback, tips, tricks, or advice you guys might have. Thanks a ton in advance!"},
{"Title": "Suggestions for a self-hosted authentication as a service?", "Author": "FlyingRaijinEX", "Content": "I have a simple backend REST API service that is serving a few ML models. I have made it \"secured\" by implementing an API key in order call those endpoints. I was wondering, how common it is for people to use services that can be self-hosted as their authentication/authorization. If it is common and reliable, what are the best options to go for? I've read that building your own authentication/authorization service with email verification, password reset, and social auth can be a pain. Also, did some googling and found this General - Fief. Has anyone ever tried using this? If so, how was the experience?"},
{"Title": "SQLPage - a Python library to add string token based pagination easily", "Author": "kernelslayer", "Content": "What My Project Does - This is a Python package to easily add string token based pagination. Currently it supports SQLModel and SQLAlchemy ORMs. Recently I wanted to add pagination in one of my Python projects and in the API response, I had to return a string next page token. Now I could not find a straight-forward way of doing this in Python. All of the tutorials or blog posts I saw, there in the response the server always returned a page_number, page_size, and total_elements and then the onus was on the calling service to adjust this accordingly.  Comparison - The current packages and methods requires some changes in the app layer as well. I tried using a few but those did not satisfy the use case and were also a bit harder to implement. I could not find a easy to use option. The present ones returned integers instead of a string token"},
{"Title": "Giving New Life to JModelica: Bringing Powerful Modelica Simulations to Python", "Author": "foadsf", "Content": "Five years ago, I posted about JModelica, a fantastic open-source tool for simulating complex systems that combined the ease of Python with the strength of Modelica. Sadly, the project went quiet, but I'm thrilled to share that, thanks to the dedication of a few folks (myself included!), JModelica is back! You can find the revived project on GitHub: https://github.com/JModelica/JModelica. What JModelica Does: JModelica provides a way to write complex simulations using the Modelica language, which is known for its ability to handle differential equations and model physical systems beautifully. The magic of JModelica lies in its Python integration‚Äîyou can solve your Modelica models and access the results directly in Python for in-depth analysis, visualization, and even optimization using libraries you already love!"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "One pytest marker to track the performance of your tests", "Author": "toodarktoshine", "Content": "Hello Pythonistas!\nI just wrote a blog post about measuring performance inside pytest test cases. We dive into why it‚Äôs important to test for performance and how to integrate the measurements in the CI.\nHere is the link to the blog: https://codspeed.io/blog/one-pytest-marker-to-track-the-performance-of-your-tests"},
{"Title": "UXsim 1.3.0 released with vehicle tracking and improved vehicle routing", "Author": "Balance-", "Content": "Main Changes\nAdd GUI functions\nVehicle tracking: You can now track a specific vehicle to see their route\nDataframe viewer: Stats can be confirmed\nImprove vehicle routing functions\nAdd example of routing optimization"},
{"Title": "Pre-commit hook to keep coverage badge in README up to date", "Author": "60percentcocoa", "Content": "Wrote this as a tool to keep README coverage badges up to date without relying on 3rd party services or having to do anything extra, thought others might get some utility out of it: coverage-pre-commit. A .coverage file is expected at the root of the project, generated by running coverage run directly or using a plugin such as pytest-cov when running tests. Most convenient when used as a pre-push hook imo. Feel free to opine, be it positive or negative!"},
{"Title": "Resume Screening Chatbot using RAG Fusion", "Author": "Babe_My_Name_Is_Hung", "Content": "Hi everyone! I recently finished a small side project for my graduating thesis, which is about experimenting with RAG-based frameworks in improving resume screening. What my project does: The project for the thesis is a GPT-4 Chatbot with RAG Fusion retrieval. Given a job description as input, the system retrieves the most relevant candidate profiles to perform follow-up tasks such as analysis, summarization, and decision-making, which can assist the screening process better. The revolving idea is that the similarity-based retrieval process can effectively narrow the initial large pool of applicants down to the most relevant resumes. However, this simple similarity ranking should not be used to evaluate a candidate's actual ability. Therefore, the top resumes are used to augment the GPT-4 Chatbot so it can be conditioned on these profiles and perform further downstream tasks."},
{"Title": "How to create architecture diagrams from code in Jupyter Notebook", "Author": "writer_on_rails", "Content": "Hello world,I wrote an article about creating diagrams from code on Jupyter Notebook inside VS Code. It will give you a brief on the setup and also an overview of concepts. Within 5 minutes, you should be able to start making cool architecture diagrams. [TO MODERATOR: This link does not contain any paywalled or paid content. All the contents are available for free] Article link: https://ashgaikwad.substack.com/p/how-to-create-architecture-diagrams"},
{"Title": "CLI to embed code snippets in your README, from actual (testable) code", "Author": "realazthat", "Content": "What My Project Does What My Project Does: snipinator is a CLI to embed (testable) snippets from your codebase into your README, using Jinja2 and functions provided by snipinator to assist with embedding code, shell output, etc. Please provide any feedback in the comments or GH issues. Target Audience Target Audience: Developers of {GitHub,other} projects that have a README. It works for me, it might work for you. Comparison Features:\nSupports anything Jinja2 supports."},
{"Title": "PyWolt: Wolt food delivery service API wrapper", "Author": "daivushe1", "Content": "I'm thrilled to share my first open-source project with you all: PyWolt! üéâ PyWolt is a Python library that makes it super easy to interact with the Wolt API.\nWhat My Project Does:\nDiscover Venues: Find nearby spots to grab a bite.\nExplore Menus: Dive into a venue's menu and pick your favorites.\nTarget Audience:"},
{"Title": "Giving New Life to JModelica: Bringing Powerful Modelica Simulations to Python", "Author": "foadsf", "Content": "Five years ago, I posted about JModelica, a fantastic open-source tool for simulating complex systems that combined the ease of Python with the strength of Modelica. Sadly, the project went quiet, but I'm thrilled to share that, thanks to the dedication of a few folks (myself included!), JModelica is back! You can find the revived project on GitHub: https://github.com/JModelica/JModelica. What JModelica Does: JModelica provides a way to write complex simulations using the Modelica language, which is known for its ability to handle differential equations and model physical systems beautifully. The magic of JModelica lies in its Python integration‚Äîyou can solve your Modelica models and access the results directly in Python for in-depth analysis, visualization, and even optimization using libraries you already love!"},
{"Title": "HS-transform, python package for hyperbolic S-transform in signal processing", "Author": "Ok_Employ_2414", "Content": "I made a python package for S-transform with Hyperbolic window (Hyperbolic S-transform or HSTransform package). This is my first time publishing a python package, so the project is still far from stable and still under beta release.\nWhat my project does: This transformation is applied to signal processing, analyzing transient changes of a signal during very short-time. Some special use case can be in power system signal, or Geophysical signal analysis, or MRI ..."},
{"Title": "Starter Code for a LLM-based AI Assistant", "Author": "2bytesgoat", "Content": "Hey everyone üëã TL;DR\nSince everyone is talking about the Humane AI Pin and the Rabbit R1, I decided to make a short 5 minute tutorial on how people can setup and customize their own little AI assistant on their machine. I've uploaded a video tutorial here: https://www.youtube.com/watch?v=2fD_SAouoOs&ab_channel=2BytesGoat And the Github code is here: https://github.com/2BYTESGOAT/AI-ASSISTANT Longer version"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a cheatsheet for pydash", "Author": "poopatroopa3", "Content": "https://brunodantas.github.io/pydash-cheatsheet/en/\nWhat my project does: pydash is a library with great potential to make you code more Functional and simple. I made this cheatsheet a while ago to highlight some of the most useful functions of the library, since there are so many. I hope it's useful.\nTarget audience: anyone who is interested in pydash, functional programming, not reinventing the wheel."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "map_plotter - abstracts complexity of creating intensity plots overlaid onto global map", "Author": "teamamentum", "Content": "What My Project Does\nOverlaying intensity plots onto a geographical map using cartopy/matplotlib can be complex. So we created this map_plotter package to abstract away that complexity for a common use case. Installation (opinionated use of conda to avoid cartopy dependency hell and install precompiled binaries) conda install cartopy\ngit clone git@github.com:amentumspace/map_plotter.git\ncd map_plotter\npip install ."},
{"Title": "IconMatch - find icons and letters positions from images!", "Author": "TraditionalDistrict9", "Content": "Hey all, I am not the original creator, but found that 4yo project, and decided to revive it! What my project does: IconMatch is library allowing you to extract icons and letter positions from image or from display! There is also realtime demo on repo showcasing how it works! Target Audience: For all detecting objects from display! Comparison: I did not find other project like that - but it was my first find too! It is also not OCR! https://github.com/NativeSensors/IconMatch Have fun!"},
{"Title": "I made a React-like web framework for Python üëã", "Author": "Rawing7", "Content": "I'm Paul, one of the creators of Rio. Over the years I've tried many different established python GUI frameworks, but none of them really satisfied me. So I teamed up with a few like minded developers and spent the last few months to create our own framework. Rio is the result of this effort. What My Project Does Rio is a brand new GUI framework that lets you create modern web apps in just a few lines of Python. Our goal is to simplify web and app development, so you can focus on the things you care about, instead of wasting countless hours on frustrating user interface details. We do this by following the core principles of Python that we all know and love. Python is supposed to be simple and compact - and so is Rio. There is no need to learn any additional languages such as HTML, CSS or JavaScript, because all of the UI, Logic, Components and even layouting is done entirely in Python. There‚Äôs not even a distinction between front-end and back-end. Rio handles all of the communication transparently for you."},
{"Title": "How to auto-instrument Python servers w/ OpenTelemetry for performance & error monitoring", "Author": "__boba__", "Content": "Hi everyone! We've recently written up a guide for anyone running a Python server (ex. Flask, Django, FastAPI) to instrument their app to debug slow downs and errors using the CNCF OpenTelemetry project and their Python instrumentation package. It's really straightforward to get started with just a few lines of added code and commands to any Python project, so hopefully helps some people out as they're looking to add better instrumentation to their servers. Here's the tutorial: https://www.hyperdx.io/blog/opentelemetry-python-server-auto-instrumentation"},
{"Title": "CLI to embed code snippets in your README, from actual (testable) code", "Author": "realazthat", "Content": "What My Project Does What My Project Does: snipinator is a CLI to embed (testable) snippets from your codebase into your README, using Jinja2 and functions provided by snipinator to assist with embedding code, shell output, etc. Please provide any feedback in the comments or GH issues. Target Audience Target Audience: Developers of {GitHub,other} projects that have a README. It works for me, it might work for you. Comparison Features:\nSupports anything Jinja2 supports."},
{"Title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"", "Author": "AlSweigart", "Content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs I'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10) Once printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become."},
{"Title": "Tutorial: Simple Pretty Maps That Will Improve Your Python Streamlit Skills", "Author": "jgloewen", "Content": "Interactive web applications for data visualization improve user engagement and understanding. These days, Streamlit is a very popular framework used to provide web applications for data science. It is a terrific programming tool to have in you Python knowledge toolbox. Here‚Äôs a fun and practical tutorial on how to create a simple interactive and dynamic Streamlit application. This application generates a beautiful and original map using the prettymaps library. Free article: HERE"},
{"Title": "The new REPL in Python 3.13.0 beta 1", "Author": "treyhunner", "Content": "Python 3.13.0 beta 1 was released today. The feature I'm most excited about is the new Python REPL. Here's a summary of my favorite features in the new REPL along with animated gifs. The TLDR:\nSupport for block-leveling history and block-level editing\nPasting code (even with blank lines within it) works as expected now\nTyping exit will exit (no more Use exit() or Ctrl-D (i.e. EOF) to exit message)"},
{"Title": "k8sAI - my open-source GPT CLI tool for Kubernetes!", "Author": "Wild_Plantain528", "Content": "What my project does: I wanted to share an open-source project I‚Äôve been working on called k8sAI. It‚Äôs a personal AI Kubernetes expert that can answer questions about your cluster, suggests commands, and even executes relevant kubectl commands to help diagnose and suggest fixes to your cluster, all in the CLI! Target Audience: As a relative newcomer to k8s, this tool has really streamlined my workflow. I can ask questions about my cluster, k8sAI will run kubectl commands to gather info, and then answer those question. It‚Äôs also found several issues in my cluster for me - all I‚Äôve had to do is point it in the right direction. I‚Äôve really enjoyed making and using this so I thought it could be useful for others. Added bonus is that you don‚Äôt need to copy and paste into ChatGPT anymore!"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Reviewing Dataframe Changes? Looking for Your Preferred Methods!", "Author": "rageagainistjg", "Content": "After playing around with a dataframe‚Äîapplying filters or other transformations‚ÄîI'm curious about your methods for reviewing the changes. In VS Code, the variable explorer is quite handy for a quick look at the modified dataframe. Alternatively, when working in a Jupyter notebook within VS Code, exporting the data to an Excel file provides a detailed view and allows for an easy deep dive into the results. What are your preferred practices for ensuring your data adjustments are precisely what you intended?"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Calculating Virtual Cycling Power With Python", "Author": "TokenChingy", "Content": "I was doing some light reading and stumbled across Steve Gribbles Power vs Speed Calculator and thought I'd give it a go at rebuilding it based on his Physics model using Python. Then I wrote an article about. Thought I'd share it with you all: Calculating Virtual Cycling Power (jasonlei.com)"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "map_plotter - abstracts complexity of creating intensity plots overlaid onto global map", "Author": "teamamentum", "Content": "What My Project Does\nOverlaying intensity plots onto a geographical map using cartopy/matplotlib can be complex. So we created this map_plotter package to abstract away that complexity for a common use case. Installation (opinionated use of conda to avoid cartopy dependency hell and install precompiled binaries) conda install cartopy\ngit clone git@github.com:amentumspace/map_plotter.git\ncd map_plotter\npip install ."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Seeking Your Input: Let's Co-Create FreeCodeCamp for python together", "Author": "globalwarming_isreal", "Content": "Hello all, This is probably my first post here. I usuallly lurk around here and Django subreddits. I've been brewing up an idea and I need your input before I take the plunge! Picture this: a website like FreeCodeCamp but for python and related technologies, a learning oasis where anyone can kickstart their journey from Python newbie to job-ready pro, and it's all free! But here's the thing, I want this to be our platform, crafted with your needs and dreams in mind. So, before I start, I need to know: would this be something that gets you excited? Imagine quizzes helping you find your starting point, interactive challenges that keep you in the zone, and a supportive community to cheer you on every step of the way. Plus, videos, written tutorials, and a progress tracker to keep you motivated!"},
{"Title": "Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient Code", "Author": "Slow_Scene_7972", "Content": "Optimize Your Python Workflow: Proven Techniques for Crafting Production-Ready Code Link"},
{"Title": "Library for automatic Cython 3.0 code annotations generation.", "Author": "Cool-Nefariousness76", "Content": "Hi everybody, over the last year I've been developing a library that adds some Cython 3.0 annotations to existing python code. What My Project Does: For example if it sees a for i in range(): in a function it recognizes i as an integer and adds a i = cython.declare(cython.int)line at the beginning of the function. It actually uses the built-in ast module under the hood for parsing, I found it a super useful library! Target Audience: It is a side project I made mainly for fun. I don't know if it can be of interest to anybody, or if it could have some potential utility."},
{"Title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"", "Author": "AlSweigart", "Content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs I'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10) Once printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become."},
{"Title": "Tutorial on Creating Useful Data Visuals with Python seaborn and matplotlib libraries", "Author": "jgloewen", "Content": "With the current global deluge of data and information, there has never been a more important to visualize your data in a clear and simple manner. Python is a terrific tool to help us do this. The key to this lies in choosing the the right data visualization techniques to tell the most interesting and relevant story. Three useful visuals are:\nsmall multiples\nheat maps"},
{"Title": "PkgInspect - Inspect Local/External Python Packages", "Author": "yousefabuz", "Content": "GitHub\nWhat My Project Does\nPkgInspect is a comprehensive tool designed to inspect and compare Python packages and Python versions effortlessly. It equips users with a comprehensive set of tools and utility classes to retrieve essential information from installed Python packages, compare versions seamlessly, and extract various details about Python installations with ease."},
{"Title": "Picodi - Simplifying Dependency Injection in Python", "Author": "yakimka", "Content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features"},
{"Title": "APScheduler vs Schedule package", "Author": "kostakos14", "Content": "Hey folks, looking to use one library to implement some background scheduling logic on my application. I find in Google search APScheduler to be frequently mentioned, but I can see the Schedule package has more GH stars. Was curious if anybody has used one of them, and which one would you recommend based on your own experience."},
{"Title": "Reviewing Dataframe Changes? Looking for Your Preferred Methods!", "Author": "rageagainistjg", "Content": "After playing around with a dataframe‚Äîapplying filters or other transformations‚ÄîI'm curious about your methods for reviewing the changes. In VS Code, the variable explorer is quite handy for a quick look at the modified dataframe. Alternatively, when working in a Jupyter notebook within VS Code, exporting the data to an Excel file provides a detailed view and allows for an easy deep dive into the results. What are your preferred practices for ensuring your data adjustments are precisely what you intended?"},
{"Title": "InterProcessPyObjects: Fast IPC for Sharing and Modifying Objects Across Processes", "Author": "FI_Mihej", "Content": "InterProcessPyObjects Python package\ngithub.com/FI-Mihej/InterProcessPyObjects If you like the project, consider giving it a star on GitHub to show your support and help further development. :) pypi.org/project/InterProcessPyObjects\nWhat My Project Does\nInterProcessPyObjects is a part of the Cengal library. If you have any questions or would like to participate in discussions, feel free to join the . Your support and involvement are greatly appreciated as Cengal evolves."},
{"Title": "Rethinking String Encoding: a 37.5% space efficient string encoding than UTF-8 in Apache Fury", "Author": "Shawn-Yang25", "Content": "In rpc/serialization systems, we often need to send namespace/path/filename/fieldName/packageName/moduleName/className/enumValue string between processes.\nThose strings are mostly ascii strings. In order to transfer between processes, we encode such strings using utf-8 encodings. Such encoding will take one byte for every char, which is not space efficient actually.\nIf we take a deeper look, we will found that most chars are lowercase chars, ., $ and _, which can be expressed in a much smaller range 0~32. But one byte can represent range 0~255, the significant bits are wasted, and this cost is not ignorable. In a dynamic serialization framework, such meta will take considerable cost compared to actual data.\nSo we proposed a new string encoding which we called meta string encoding in Fury. It will encode most chars using 5 bits instead of 8 bits in utf-8 encoding, which can bring 37.5% space cost savings compared to utf-8 encoding.\nFor string can't be represented by 5 bits, we also proposed encoding using 6 bits which can bring 25% space cost savings"},
{"Title": "Homoiconic Python Code", "Author": "moonbunR", "Content": "Homoiconic, what does it mean? In simple terms, homoiconic code is when code is treated as data and can be manipulated as you would data. This means the code can be changed, new functions and variables added, the code can generate new code or even examine and modify its own structure and behavior all while it is running. That‚Äôs why homoiconic languages like Lisp are so powerful. But what if we can make a homoiconic python code, where the code and the data are one and the same and can be modified in the same way? This guide does a good job in trying to explain how you would create a python version of the ‚ÄúLisp in Lisp‚Äù code which would give you access to all those homoiconic features that Lisp brags of like the macro systems, the expressiveness and flexibility, the metaprogramming etc. while still using python. What do you guys think of this?"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "2,000 free sign ups available for the \"Automate the Boring Stuff with Python\" online course. (May 20", "Author": "AlSweigart", "Content": "If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): *The sign ups are all used up, but you can still watch all the videos for free. Read below! https://udemy.com/course/automate/?couponCode=MAY2024FREE https://udemy.com/course/automate/?couponCode=MAY2024FREE2 If you are reading this after the sign ups are used up, you can always find the first 15 of the course's 50 videos are free on YouTube if you want to preview them. YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have \"preview\" turned on. Scroll down to find and click \"Expand All Sections\" and then click the preview link. You won't have access to the forums and other materials, but you can watch the videos."},
{"Title": "Introducing Notolog: Python Markdown Editor built with PySide6", "Author": "devotaku", "Content": "Excited to share my personal open-source project: Notolog - Python Markdown Editor (MIT License). The main motivation for developing another markdown editor was my passion for learning new things and enhancing my development skills in Python. I developed it in my spare time over a few months, despite having no prior experience in creating full-scale Python applications. What My Project Does ‚àó Multiplatform ‚àó Markdown async syntax highlighting created by me ‚àó Several pre-installed color themes ‚àó Supports English and 17 other languages right out of the box ‚àó Integration with OpenAI API for AI-assisted features"},
{"Title": "AzuracastPy: An Unofficial Python Wrapper for the Azuracast API.", "Author": "ARandomBoiIsMe", "Content": "Source code What My Project Does: It acts as a wrapper for the AzuraCast API, providing custom functions and classes for more straightforward use of the API in python projects. Target Audience: Python users who are interested in programmatically interacting with online radios hosted on AzuraCast. Comparison: The idea of API Wrappers is not new. However, I noticed that the only existing wrapper for this API is written in PHP, which I am not experienced with. I created this project so I, and other python programmers by extension, could have an easier time working with the API."},
{"Title": "Python script to convert Spotify Artists to Playlists", "Author": "RJW-20", "Content": "I've made my first bit of useful software and I wanted to share it here. I'd love some feedback (and it would be amazing to hear if someone has used it!) What My Project Does: Using the third party requests package, the script interacts with the Spotify web API to request all albums from the given Artist, then all the tracks from all of those albums. It then goes through the list to remove any duplicates and also tries to remove any unwanted versions (only done by examining the name of the track, since Spotify does not attribute a version type to its tracks). Once that's done a playlist is then created on your Spotify account with the name of the Artist and all the tracks are posted there in chronological (essentially per album) order."},
{"Title": "The best Python CLI library, arguably.", "Author": "AND_MY_HAX", "Content": "What My Project Does https://github.com/treykeown/arguably arguably makes it super simple to define complex CLIs. It uses your function signatures and docstrings to set everything up. Here's how it works:\nAdding the @arguably.command decorator to a function makes it appear on the CLI.\nIf multiple functions are decorated, they'll all be set up as subcommands. You can even set up multiple levels of subcommands."},
{"Title": "I've developed a library for send metrics to zabbix asynchronously", "Author": "Royal_Section4889", "Content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this. Tests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async What My Project Does Send zabbix sender messages using asyncio tasks. Target Audience SysAdmins who use Zabbix to monitor a large number of metrics. Comparison Instead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix"},
{"Title": "Best book for GUI development in Python", "Author": "Bekhyam", "Content": "Can you guys suggest some very good book for GUI development in Python? I'm currently working on a visualizer that needs many features to plot data on a 3D and 2D space. Using PyQt for this as it has threading support."},
{"Title": "Library for automatic Cython 3.0 code annotations generation.", "Author": "Cool-Nefariousness76", "Content": "Hi everybody, over the last year I've been developing a library that adds some Cython 3.0 annotations to existing python code. What My Project Does: For example if it sees a for i in range(): in a function it recognizes i as an integer and adds a i = cython.declare(cython.int)line at the beginning of the function. It actually uses the built-in ast module under the hood for parsing, I found it a super useful library! Target Audience: It is a side project I made mainly for fun. I don't know if it can be of interest to anybody, or if it could have some potential utility."},
{"Title": "diskcache: This key-value store library is faster than Redis and Memcached üòÆ (built by Grant Jenks)", "Author": "RevolutionaryPen4661", "Content": "PYPI (From the README, Released Last Year, Edited by Grammarly) Github pip install diskcache The cloud-based computing of 2024 puts a premium on memory. Gigabytes of space are left on disks as processes vie for memory. Memcached (and sometimes Redis) is used as a cache among these processes. Wouldn‚Äôt it be nice to leverage empty disk space for caching? Django is Python‚Äôs most popular web framework and has several caching backends. Unfortunately, the file-based cache in Django is essentially broken. The culling method is random and large caches repeatedly scan a cache directory which slows linearly with growth. Can you allow it to take sixty milliseconds to store a key in a cache with a thousand items?"},
{"Title": "List of Sites that Packages Need to Connect to?", "Author": "BullCityPicker", "Content": "I'm doing most of my work behind a government firewall, and I'm having trouble connecting to certain sites. I can do the usual \"pip\" installs just fine, but I'm talking about packages that need to download data to do their job. An example is the NLTK (Natural Language Toolkit) package, which downloads dictionaries, lookup tables for sentiment analysis, and so on. I know what sites to open up for that particular problem (pastebin.com and nltk.org), but I wonder if anybody's made a list of such sites for different packages. I can ask for the two sites I know about to be opened up, but I'd like to have a more comprehensive list so I don't have to go through the red tape multiple times."},
{"Title": "LinkedIn-Learning-Downloader v1.1", "Author": "YounesWinter", "Content": "With Python i created a tool that enables users to download LinkedIn Learning courses, including the often overlooked but incredibly valuable exercise files. This feature sets our project apart, offering a complete learning experience by providing both the course videos and the materials needed for practical application.\nWhat great about it and beyond other tools in the same genre concerned LinkedIn Learning Downloaders, now you can download the whole courses from a path link. this is was never possible without Python."},
{"Title": "I made a Python text to speech library - Pyt2s", "Author": "asksumanth", "Content": "What my project does: It supports services like IBM Watson, Acapela and Stream labs' demo websites to convert your text to speech. Target audience: It's a toy project and would not recommend you to use in Production. Comparison: It's wayyyyy easy to use. Just pip install and use in your project. No extra setup required like other libraries. Also supports various languages and voices and accents. Check docs for more. Here is the link to repository. Please go do check it out and star it if it's helpful to you guys. Thank you. I made this library taking inspiration from this php tts library by chrisjp."},
{"Title": "APScheduler vs Schedule package", "Author": "kostakos14", "Content": "Hey folks, looking to use one library to implement some background scheduling logic on my application. I find in Google search APScheduler to be frequently mentioned, but I can see the Schedule package has more GH stars. Was curious if anybody has used one of them, and which one would you recommend based on your own experience."},
{"Title": "ConfigClass - simple dataclass inspired configuration", "Author": "TheTerrasque", "Content": "What My Project Does I'm making a simple configclass for handling configuration in smaller projects and scripts. Goal is to be as simple to start with as creating a dataclass. The module itself works off dataclass and when you use it you just define a dataclass as normal, but decorate it with @configclass() instead. Example: from configclass import configclass\n\n@configclass()\nclass Settings:\n    foo: bool = False\n    url: str = \"\"\n    footoo: bool = True\n    my_model: str = \"model.pt\"\n\nsetting = Settings.load()\n\nprint(setting.foo, setting.footoo, setting.my_model)"},
{"Title": "Who is using quart framework for microservices?", "Author": "Dry_Raspberry4514", "Content": "I am using quart framework (https://quart.palletsprojects.com) for a number of microservices in a SaaS application. However, I hardly hear anything about this framework on any social media platform which seems to be dominated by FastAPI. Also I'm unable to find which all projects/companies are using this framework. All this is leading to anxiety around the future of this project. Are there any well known projects / companies which are using this framework for microservices?"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "FastAPI Backend Template for SaaS products", "Author": "shekhuu", "Content": "Hello there, I just created a template for creating a backend for your SaaS products. What my project does: It is a FastAPI project/template for creating SaaS backends and admin dashboards. Comparison: \nOut of the box, it supports\nLicence key generation and validation.\nOAuth 2 authentication with scopes."},
{"Title": "Introducing Notolog: Python Markdown Editor built with PySide6", "Author": "devotaku", "Content": "Excited to share my personal open-source project: Notolog - Python Markdown Editor (MIT License). The main motivation for developing another markdown editor was my passion for learning new things and enhancing my development skills in Python. I developed it in my spare time over a few months, despite having no prior experience in creating full-scale Python applications. What My Project Does ‚àó Multiplatform ‚àó Markdown async syntax highlighting created by me ‚àó Several pre-installed color themes ‚àó Supports English and 17 other languages right out of the box ‚àó Integration with OpenAI API for AI-assisted features"},
{"Title": "Interactive plots in the terminal", "Author": "Spiffidimus", "Content": "I made a library to create interactive plots in the terminal (pip install itrm). It uses braille characters (by default) to display the data with sub-character resolution. There are several keybindings for moving a vertical cursor left and right, for zooming in or out on data, and for changing which curve to focus on. There are occasions (such as when working with a server) where MatPlotLib is not an option and the terminal is the only available tool. But, in my opinion, it is actually faster to use this tool (itrm) to zoom in on interesting parts of data and analyze patterns than using other tools like MatPlotLib. In fact, with large data sets (~1 million points), this tool actually renders faster than MatPlotLib. Please check it out and let know what you think."},
{"Title": "Why is Plotly so cumbersome to tweak?", "Author": "olive_oil_for_you", "Content": "I made this visualisation with this code. I have three questions:\nIs Plotly supposed to be this cumbersome to tweak? Would other libraries require the same amount of code to add the details I did?\nCan my code be reduced in size? Maybe it's me who is complicating things with Plotly and there are easier ways to do what I am doing.\nAny R enthusiast who can tell me how much shorter this code would look like with ggplot2? I asked ChatGPT but the result was garbage."},
{"Title": "tach - a Python tool to enforce modular design", "Author": "the1024", "Content": "https://github.com/Never-Over/tach What My Project Does tach is a lightweight Python tool that enforces boundaries and dependencies in your Python project. Inspired by nx, tach helps you maintain a decoupled and modular Python codebase. An earlier version of this tool was called modguard, which we shared here. By default, Python allows you to import and use anything, anywhere. Over time, this results in modules that were intended to be separate getting tightly coupled together, and domain boundaries breaking down. We experienced this first-hand at a unicorn startup, where the eng team paused development for over a year in an attempt to split up packages into independent services. This attempt ultimately failed."},
{"Title": "this.s and this.d", "Author": "VladTbk", "Content": "Recently, I found out about the this \"Easter egg\" in python3. Adding import this into a py file will print \"The Zen of Python\" by Tim Peters. Also, this has two attributes: this.s and this.d, which I guess form the actual Easter egg. this.s returns an encrypted version of \"The Zen\" and this.d well, see for yourself, maybe you'll solve the puzzle."},
{"Title": "Pip 24.1 beta released, and it's a big one", "Author": "zurtex", "Content": "I'd like to call attention to pip 24.1 beta asit is unusual for the pip team to release betas:\nhttps://pip.pypa.io/en/latest/news/#b1-2024-05-06\nhttps://pypi.org/project/pip/24.1b1/\nYou can install with: python -m pip install pip==24.1b1 In particular they have upgraded their vendored version of packaging from 21.3 to 24.0, this was a and , included significant performance improvements, and will allow pip to support . However, it also means legacy versions and specifiers are with pip."},
{"Title": "I've developed a library for send metrics to zabbix asynchronously", "Author": "Royal_Section4889", "Content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this. Tests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async What My Project Does Send zabbix sender messages using asyncio tasks. Target Audience SysAdmins who use Zabbix to monitor a large number of metrics. Comparison Instead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix"},
{"Title": "Hi! I've published a Python client for IBKR REST and WebSocket APIs - IBind. Hope you like it üëã", "Author": "VoyZan", "Content": "Hi! I want to share a library I've built recently. IBind is a REST and WebSocket Python client for Interactive Brokers Client Portal Web API. It is directed at IBKR users. You can find IBind on GitHub: https://github.com/Voyz/ibind What My Project Does: It is a REST and WebSocket API for the Interactive Brokers' Web API. I'm particularly proud of a few things in this release:\nThe REST and WebSocket API clients are based on an abstract base class RestClient and WsClient accordingly. These could be implemented to use some other Web APIs in a relatively straightforward way. I have in fact used a version of that for a cryptocurrency WebSocket API, and it is nice to see it adapt to a different environment."},
{"Title": "I connected LLM to Python runtime and generated unit-tests (OpenSource)", "Author": "Financial_Muffin396", "Content": "Hi all, I initially started this adventure by trying to automate bug fixes with the help of LLMs. However, I received feedback saying the fixes aren't always correct, leading to the question: why bother reviewing PRs that might add more issues? (It's really hard for LLMs to say \"I don't know\"). So, I decided to focus on reliability perfecting unit tests. The source code is available at: https://github.com/CaptureFlow/captureflow-py What My Project Does: It incorporates a tracer client-side Python library and a backend that accumulates such traces and is capable of proposing code improvements and generating tests for your repository. It traverses the execution graph, extracts relevant parts, enriches them with implementation data from the GitHub API, and then generates tests with the help of GPT4."},
{"Title": "I made a Mandelbrot Zoom using Python", "Author": "AbideByReason", "Content": "I made a YouTube video which previews the zoom and explains the code, which you can find here: https://youtu.be/HtNUFdh2sjg What my project does: it creates a Mandelbrot Zoom. Comparison: it uses Pillow and consists of just 2 main blocks of code: one is the main function that finds which points are in the Mandelbrot Set and the other is the main loop that applies appropriate colors to each image. It gives the option of being black and white OR in color. It works fairly well but can definitely be faster if parallelized. I'd love to hear any suggestions on how it can be improved. Target Audience: fun/toy project"},
{"Title": "Just an Appreciation Post for the Python Standard Library", "Author": "SpeakerOk1974", "Content": "Approaching a year into my journey of learning Python (I come from a C background) I finally understand the beauty and ubiquity of the langauge. Initially, I was hesitant to learn a dynamically typed and interpreted language when job requirements required me to learn it (I help support a team of Power Systems Engineers, and our professional software uses python for scripting). My first attempts were extremely unpythonic and it felt like I was fighting the language (index based looping, declaring variables before use, C style procedural code on top of Pandas antipatterns) and the lack of brackets I found appalling. Then I had my first code review with a helpful Senior engineer. We refactored my code together and something beautiful came together. He then told me to read the Zen of Python. It was love at first \"import this\". I was hooked. Every waking moment for weeks I was learning all I could muster about python."},
{"Title": "How Python Asyncio Works: Recreating it from Scratch", "Author": "jpjacobpadilla", "Content": "Do you understand how asyncio works behind the scenes? Read this article and see how you can use Python generators to create your own version of asyncio, and then use the __await__ dunder method to use the async/await keywords to come full circle! https://jacobpadilla.com/articles/recreating-asyncio"},
{"Title": "I made a Python text to speech library - Pyt2s", "Author": "asksumanth", "Content": "What my project does: It supports services like IBM Watson, Acapela and Stream labs' demo websites to convert your text to speech. Target audience: It's a toy project and would not recommend you to use in Production. Comparison: It's wayyyyy easy to use. Just pip install and use in your project. No extra setup required like other libraries. Also supports various languages and voices and accents. Check docs for more. Here is the link to repository. Please go do check it out and star it if it's helpful to you guys. Thank you. I made this library taking inspiration from this php tts library by chrisjp."},
{"Title": "Python Streamlit Spotlight Tutorial: an Interactive Dashboard using UNHCR Refugee Data", "Author": "jgloewen", "Content": "Python Streamlit is a terrific tool for creating interactive data visualizations. It packages all your visualizations up into a neat little application - including charts and maps - and displays them in your default browser. No muss, no fuss. Recently, I found a new dataset (to me) on the UN High Commission for Refugees (UNHCR) website. It contains country-to-country movements for refugees both from origin country and country of asylum Using this dataset, here's a step-by-step on how to code a Python Streamlit application that has:"},
{"Title": "sjvisualizer: a python package to animate time-series data", "Author": "PieChartPirate", "Content": "What the project does: data animation library for time-series data. Currently it supports the following chart types:\nBar races\nAnimated Pie Charts\nAnimated Line Charts\nAnimated Stacked Area Charts"},
{"Title": "ext-message: Send files over Discord direct messages", "Author": "FeLoNy111", "Content": "Hey all! I recently made a library for sending text files over Discord DMs https://pypi.org/project/ext-message/ https://github.com/jwjeffr/ext-message/ What my project does This code is a command-line interface for sending text files to Discord DMs from a bot. Target audience My personal use-case is for my research, where I run long simulations (~72 hours) on a computing cluster. These simulations generate log files, so I can send myself the log file after the simulation, letting me: - Know that the simulation is done - Check that the simulation ran as intended without having to SSH into the cluster. As of now, those running similarly heavy code looking to be notified when it finishes is my target audience, but I would love to hear other creative use cases to expand that audience!"},
{"Title": "Build tool support for PySide / PyQt", "Author": "jmacey", "Content": "Just interested in how people approach this, typically I just use VSCode or QtCreator to build simple projects. However I now want to automate some of the build process such as running uic, and rcc. I've tried to use CMake but can't seem to get it to work without a lot of custom scripting (for example the AUTOUIC etc functions need c++ projects), can't see any info on running uic in QtCreator (which would be ideal but python support is really just an after thought). I could write some Makefiles but this is a little ad-hoc and also confuses the IDE's (and at the end of the day I want a simple process for my students to use and I already teach cmake for C++ dev)."},
{"Title": "Interactive plots in the terminal", "Author": "Spiffidimus", "Content": "I made a library to create interactive plots in the terminal (pip install itrm). It uses braille characters (by default) to display the data with sub-character resolution. There are several keybindings for moving a vertical cursor left and right, for zooming in or out on data, and for changing which curve to focus on. There are occasions (such as when working with a server) where MatPlotLib is not an option and the terminal is the only available tool. But, in my opinion, it is actually faster to use this tool (itrm) to zoom in on interesting parts of data and analyze patterns than using other tools like MatPlotLib. In fact, with large data sets (~1 million points), this tool actually renders faster than MatPlotLib. Please check it out and let know what you think."},
{"Title": "IP subnet or IP calculator tool need feedback", "Author": "nicanorflavier", "Content": "Hey folks, I've been dabbling with a Python project recently that's all about making life easier for us I.T. people. It's a nifty little tool that calculates IP subnets and does IP calculations from the command or CLI. Here's the GitHub link and the code: https://github.com/nicanorflavier/ipnet I‚Äôm pretty stoked about it, but I know there‚Äôs always room for improvement. So, I thought, better to turn to than the wise minds of this python community? I‚Äôm all ears for any feedback, tips, tricks, or advice you guys might have. Thanks a ton in advance!"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Hi! I've published a Python client for IBKR REST and WebSocket APIs - IBind. Hope you like it üëã", "Author": "VoyZan", "Content": "Hi! I want to share a library I've built recently. IBind is a REST and WebSocket Python client for Interactive Brokers Client Portal Web API. It is directed at IBKR users. You can find IBind on GitHub: https://github.com/Voyz/ibind What My Project Does: It is a REST and WebSocket API for the Interactive Brokers' Web API. I'm particularly proud of a few things in this release:\nThe REST and WebSocket API clients are based on an abstract base class RestClient and WsClient accordingly. These could be implemented to use some other Web APIs in a relatively straightforward way. I have in fact used a version of that for a cryptocurrency WebSocket API, and it is nice to see it adapt to a different environment."},
{"Title": "relax-py - Web framework for htmx with hot module replacement", "Author": "MindLopsided4430", "Content": "Excited to finally showcase this! It's still pretty rough around the edges, but I'm finally happy enough with the feature set and curious to see what the community thinks about a framework like this. Code: github.com/crpier/relax-py Documentation: crpier.github.io/relax-py What My Project Does relax-py is a Python framework for building full-stack applications with htmx It provides tools for writing HTML in a manner similar to simple_html (which also inspired the decision to use standard Python to write HTML, rather than use Jinja2 or to make something like templ work in Python) It has:"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "pytest-ndb - debugging pytest tests in a notebook", "Author": "rhshadrach", "Content": "What My Project Does: Allows users to run a pytest test from a notebook or other REPL and capture local variables for inspection / debugging. While I think users should very often prefer debugging tests with a debugger, in certain situations where one deals with a nontrivial amount of data or many complex objects, being able to inspect and manipulate objects in a notebook can be helpful. Target Audience: Primarily data scientists, but more generally anyone who tests with large/complex objects that can be difficult to understand in a debugger. Comparison: I'm not aware of any alternatives, other than copy-and-pasting your pytest tests in a notebook."},
{"Title": "Auto Data Analysis python packages to know", "Author": "mehul_gupta1997", "Content": "Check this video tutorial to explore different AutoEDA python packages like pandas-profiling, sweetviz, dataprep,etc which can enable automatic data analysis within minutes without any effort : https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry"},
{"Title": "Pre-commit hook to keep coverage badge in README up to date", "Author": "60percentcocoa", "Content": "Wrote this as a tool to keep README coverage badges up to date without relying on 3rd party services or having to do anything extra, thought others might get some utility out of it: coverage-pre-commit. A .coverage file is expected at the root of the project, generated by running coverage run directly or using a plugin such as pytest-cov when running tests. Most convenient when used as a pre-push hook imo. Feel free to opine, be it positive or negative!"},
{"Title": "python-oracledb 2.2 and the VECTOR type in Oracle Database 23ai", "Author": "cjbj", "Content": "python-oracledb 2.2, the Oracle Database driver, has been released with support for Oracle Database 23ai features such as the VECTOR and BOOLEAN data types, Implicit Connection Pooling, and improved connection performance. See the release announcement."},
{"Title": "Python Streamlit Spotlight Tutorial: an Interactive Dashboard using UNHCR Refugee Data", "Author": "jgloewen", "Content": "Python Streamlit is a terrific tool for creating interactive data visualizations. It packages all your visualizations up into a neat little application - including charts and maps - and displays them in your default browser. No muss, no fuss. Recently, I found a new dataset (to me) on the UN High Commission for Refugees (UNHCR) website. It contains country-to-country movements for refugees both from origin country and country of asylum Using this dataset, here's a step-by-step on how to code a Python Streamlit application that has:"},
{"Title": "Folks who know the internals: Where does operator precedence \"happen\"?", "Author": "BeerIsTheMindKiller", "Content": "Hey! Messing around with instaviz, cool library, highly recommend. You can visualize a function's bytecode as well as AST and some other stuff. i entered this: def f():\n  x = 1 + 2 - 10**2\n  return x I was expecting the AST nodes for 1 + 2 - 10**2 to be rearranged somehow, with 10**2 being moved to the left hand of the expression, because exponents get evaluated before addition/subtraction. but no! just looks like this:"},
{"Title": "Google laysoff Python maintainer team", "Author": "jmreagle", "Content": "https://www.hindustantimes.com/business/google-layoffs-sundar-pichai-led-company-fires-entire-python-team-for-cheaper-labour-101714379453603.html Are there any ramifications for the Python community outside of Google?"},
{"Title": "I've started writing Python bindings for lexertl", "Author": "BenHanson", "Content": "See https://github.com/BenHanson/pylexertl I will see about registering as an official library when I am happy I have completed all the bindings. I added all the missing functions for the rules objects today, so things are in reasonable shape already. My python experience has been limited up until now, but it is big for my new role. I have a runtime parser generator https://github.com/BenHanson/parsertl17 which I also plan to add bindings for. I hope this is of interest to somebody! What My Project Does Allows you to build lexical analysers at runtime and use them to lex text (in this case utf-8)"},
{"Title": "IP subnet or IP calculator tool need feedback", "Author": "nicanorflavier", "Content": "Hey folks, I've been dabbling with a Python project recently that's all about making life easier for us I.T. people. It's a nifty little tool that calculates IP subnets and does IP calculations from the command or CLI. Here's the GitHub link and the code: https://github.com/nicanorflavier/ipnet I‚Äôm pretty stoked about it, but I know there‚Äôs always room for improvement. So, I thought, better to turn to than the wise minds of this python community? I‚Äôm all ears for any feedback, tips, tricks, or advice you guys might have. Thanks a ton in advance!"},
{"Title": "PyWolt: Wolt food delivery service API wrapper", "Author": "daivushe1", "Content": "I'm thrilled to share my first open-source project with you all: PyWolt! üéâ PyWolt is a Python library that makes it super easy to interact with the Wolt API.\nWhat My Project Does:\nDiscover Venues: Find nearby spots to grab a bite.\nExplore Menus: Dive into a venue's menu and pick your favorites.\nTarget Audience:"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "pyrseus - concurrent.futures extensions for easier troubleshooting", "Author": "Mental-Elephant-6215", "Content": "https://github.com/dalleyg/pyrseus What My Project Does Pyrseus extends Python‚Äôs concurrent.futures asynchronous and concurrent programming package with:\na collection of non-concurrent executors for light workloads and troubleshooting,\nExecutorCtx, a factory for easily switching between different executors, and\na collection of ready-built ExecutorCtx plugins, supporting executors from concurrent.futures, ipyparallel, loky, mpi4py, and itself. Where relevant, optional cloudpickle-enhanced plugins are also provided."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "pip time machine", "Author": "rejectedlesbian", "Content": "https://github.com/nevakrien/time_machine_pip this is a fairly simple project barely anything to it but I think its promising\nthe idea is to put pip in a time machine so it can not use package versions that were made after the project is made. I am doing this by proxiying pypi and cutting out the newer versions. initial tests show that pip respects the proxy and works like you would expect"},
{"Title": "Pre-commit hook to keep coverage badge in README up to date", "Author": "60percentcocoa", "Content": "Wrote this as a tool to keep README coverage badges up to date without relying on 3rd party services or having to do anything extra, thought others might get some utility out of it: coverage-pre-commit. A .coverage file is expected at the root of the project, generated by running coverage run directly or using a plugin such as pytest-cov when running tests. Most convenient when used as a pre-push hook imo. Feel free to opine, be it positive or negative!"},
{"Title": "Introducing PgQueuer: A Minimalist Python Job Queue Built on PostgreSQL", "Author": "GabelSnabel", "Content": "What My Project Does PgQueuer is a Python library designed to manage job queues using PostgreSQL features. It leverages PostgreSQL's native LISTEN/NOTIFY, along with advanced locking mechanisms, to handle job queues efficiently. This allows for real-time job processing, concurrency, and reliable task execution without the need for a separate queuing system. Target Audience PgQueuer is ideal for developers and teams who already use PostgreSQL in their projects and are looking for a simple, integrated way to handle background tasks and job queues. It's designed for production use, offering a dependable solution that scales seamlessly with existing PostgreSQL databases."},
{"Title": "python irl in london england", "Author": "ProsodySpeaks", "Content": "are there any groups, meets, events etc i can get involved with locally in london uk? i've got moderate python chops as well as a wide range of other skills and tools, notably construction and event organisation/production/management, but also 3d design and print, some electronics and others. i work flexible hours and honestly am looking to develop a network and experiences to land my first job that at least involves some coding - i'm happy to commit significant time and resource to interesting projects to get eventually my foot or at least my nose in a door somewhere. (i dont mean i would stop contributing to the project once i land a job!)"},
{"Title": "I made a React-like web framework for Python üëã", "Author": "Rawing7", "Content": "I'm Paul, one of the creators of Rio. Over the years I've tried many different established python GUI frameworks, but none of them really satisfied me. So I teamed up with a few like minded developers and spent the last few months to create our own framework. Rio is the result of this effort. What My Project Does Rio is a brand new GUI framework that lets you create modern web apps in just a few lines of Python. Our goal is to simplify web and app development, so you can focus on the things you care about, instead of wasting countless hours on frustrating user interface details. We do this by following the core principles of Python that we all know and love. Python is supposed to be simple and compact - and so is Rio. There is no need to learn any additional languages such as HTML, CSS or JavaScript, because all of the UI, Logic, Components and even layouting is done entirely in Python. There‚Äôs not even a distinction between front-end and back-end. Rio handles all of the communication transparently for you."},
{"Title": "Building an LLM chat application using RAG Agent", "Author": "iryna_kondr", "Content": "Motivation\nChatbots are among the most popular applications of large language models (LLMs). Often, an LLM's internal knowledge base is adequate for answering users questions. However, in those cases, the model may generate outdated, incorrect, or too generic responses when specificity is expected. These challenges can be partially addressed by supplementing the LLM with an external knowledge base and employing the retrieval-augmented generation (RAG) technique. However, if user queries are complex, it may be necessary to break the task into several sub-parts. In such cases, relying solely on the RAG technique may not be sufficient, and the use of agents may be required."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyWolt: Wolt food delivery service API wrapper", "Author": "daivushe1", "Content": "I'm thrilled to share my first open-source project with you all: PyWolt! üéâ PyWolt is a Python library that makes it super easy to interact with the Wolt API.\nWhat My Project Does:\nDiscover Venues: Find nearby spots to grab a bite.\nExplore Menus: Dive into a venue's menu and pick your favorites.\nTarget Audience:"},
{"Title": "Analyzing Python Compression Libraries: zlib, LZ4, Brotli, and Zstandard", "Author": "dhilip-siva", "Content": "Source Code: https://github.com/dhilipsiva/py-compress-compare\nAnalyzing Python Compression Libraries: zlib, LZ4, Brotli, and Zstandard\nWhen dealing with large volumes of data, compression can be a critical factor in enhancing performance, reducing storage costs, and speeding up network transfers. In this blog post, we will dive into a comparison of four popular Python compression libraries‚Äîzlib, LZ4, Brotli, and Zstandard‚Äîusing a real-world dataset to evaluate their performance in terms of compression ratio and time efficiency."},
{"Title": "What changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ?", "Author": "These_Shoe3594", "Content": "What are all the changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ? There are some CVE fixes available in the latest 3.x version of werkzueg. To take the fixes as part of my code, we want to upgrade the version. When I do so, I‚Äôve faced lot of breakages. I found some on documents and release notes. But it would be easier if someone already did some changes regarding this."},
{"Title": "The new REPL in Python 3.13.0 beta 1", "Author": "treyhunner", "Content": "Python 3.13.0 beta 1 was released today. The feature I'm most excited about is the new Python REPL. Here's a summary of my favorite features in the new REPL along with animated gifs. The TLDR:\nSupport for block-leveling history and block-level editing\nPasting code (even with blank lines within it) works as expected now\nTyping exit will exit (no more Use exit() or Ctrl-D (i.e. EOF) to exit message)"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Reboot Your Router with a Python Script", "Author": "SAV_NC", "Content": "Hello r/python, I've developed a Python script that allows you to reboot your router remotely via SSH! This script handles the countdown and checks when the router is back online after a reboot. What My Project Does: Key Features:\nAutomated Router Reboot: Remotely trigger a reboot of your router.\nMonitoring: After sending the reboot command, the script counts down from 350 seconds and starts checking the router's status by pinging it after the first 100 seconds have passed."},
{"Title": "Langchain using llama3 to build recommendation system", "Author": "yngwieHero", "Content": "Hi, Recently I played a bit with LLMs, specifcally exploring ways of running the models locally and building prompts using LangChain. As a result ended up coding a small recommendation system, powered with Llama3-7b model, which suggests topics to read on HackerNews. Wanted to share my experiences, so I wrote a small article where I described all my findings.\nHope you'll like it: https://lukaszksiezak.github.io/ScrapyToLLM/ Github repo: https://github.com/lukaszksiezak/ScrapyToLLM What the project does: It's a Python application which uses scrapy to scrape HackerNews page. Scraped articles are pipelined to redis, which is then feeding Llama3 using langchain. Prompter is configured to serve a user articles which are matching his request."},
{"Title": "Calculating Virtual Cycling Power With Python", "Author": "TokenChingy", "Content": "I was doing some light reading and stumbled across Steve Gribbles Power vs Speed Calculator and thought I'd give it a go at rebuilding it based on his Physics model using Python. Then I wrote an article about. Thought I'd share it with you all: Calculating Virtual Cycling Power (jasonlei.com)"},
{"Title": "I wrote a book on Python Regular Expressions - and made it free!", "Author": "code_x_7777", "Content": "Hi! I've just sorted through some of my books on Leanpub and decided to make the book on Python Regular Expressions free to download for a couple of days. Why? Just for fun and learning and to get some valuable feedback.\nFree ebook link: https://leanpub.com/regexpython/\nRegex Video Tutorials: https://blog.finxter.com/python-regex/\nThis book helps you learn regular expressions chapter by chapter. Each chapter first teaches the concepts and then asks you to solve Python puzzles (\"Guess the code!\") to master the concepts. The main idea is to keep it lightweight and fun."},
{"Title": "I made a React-like web framework for Python üëã", "Author": "Rawing7", "Content": "I'm Paul, one of the creators of Rio. Over the years I've tried many different established python GUI frameworks, but none of them really satisfied me. So I teamed up with a few like minded developers and spent the last few months to create our own framework. Rio is the result of this effort. What My Project Does Rio is a brand new GUI framework that lets you create modern web apps in just a few lines of Python. Our goal is to simplify web and app development, so you can focus on the things you care about, instead of wasting countless hours on frustrating user interface details. We do this by following the core principles of Python that we all know and love. Python is supposed to be simple and compact - and so is Rio. There is no need to learn any additional languages such as HTML, CSS or JavaScript, because all of the UI, Logic, Components and even layouting is done entirely in Python. There‚Äôs not even a distinction between front-end and back-end. Rio handles all of the communication transparently for you."},
{"Title": "Opinions sought: Modernising the Apache NiFi Python client", "Author": "Samausi", "Content": "Hello folks, I am the author of NiPyAPI, the defacto Python client for the Apache NiFi project. For those unfamiliar, Apache NiFi is an open-source ETL tool designed around the flow-based programming paradigm. It excels at continuously moving and managing arbitrary data flows between disparate systems with low latency at large scale, and is often contrasted with Airflow. Amongst many features, NiFi allows for Command & Control via a native UI, enabling live edits to data routing and transformation. NiFi also enforces an API-first approach, and produces a swagger definition during code compilation, which allowed creation of a Python client to enable automated Data Flow testing and a Design & Deploy approach by running it through tool shaped by mustache templates. This produces a verbose low-level client, which I then leverage in higher-level operational functions and demo scripts in the library."},
{"Title": "PyCon US 2024 is here!", "Author": "monorepo", "Content": "Official Event"},
{"Title": "How Malicious Python Code Gains Execution", "Author": "louis11", "Content": "The primary vector for malicious code running in software developer environments (e.g., local system, CI/CD runners, production servers, etc.) is software dependencies. This is third-party code which often means open-source software, also known as running code from strangers on the internet. The prized goal for attackers is arbitrary code execution. It‚Äôs the stuff high CVE scores are made of and often the topic of how vulnerabilities can turn into exploits. It‚Äôs the foothold needed to run cryptominers, steal secrets, or encrypt data for ransom. It‚Äôs no wonder why threat actors want it, but how do they get it? Sutton‚Äôs Law makes it obvious why they go after open-source software: because executing arbitrary code is easy there."},
{"Title": "The new REPL in Python 3.13.0 beta 1", "Author": "treyhunner", "Content": "Python 3.13.0 beta 1 was released today. The feature I'm most excited about is the new Python REPL. Here's a summary of my favorite features in the new REPL along with animated gifs. The TLDR:\nSupport for block-leveling history and block-level editing\nPasting code (even with blank lines within it) works as expected now\nTyping exit will exit (no more Use exit() or Ctrl-D (i.e. EOF) to exit message)"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Blat AI generates Python code to do web-scraping (code based on Scrapy framework)", "Author": "arnaupv", "Content": "Miguel Algorri and Arnau Pont V√≠lchez here, blat co-founders! Target Audience\nPeople who need to collect public data from the web (pricing, articles, reviews, leads etc). What does our Project Do?\nAt blat we aim to deliver production-ready web scraping code in minutes (written in Python, Scrapy framework).\nThis is feasible thanks to our Web Scraping AI Agent üß†. Here our CLI to interact with the Web Scraping AI Agent (github). Too good to be true?"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "InterProcessPyObjects: Fast IPC for Sharing and Modifying Objects Across Processes", "Author": "FI_Mihej", "Content": "InterProcessPyObjects Python package\ngithub.com/FI-Mihej/InterProcessPyObjects If you like the project, consider giving it a star on GitHub to show your support and help further development. :) pypi.org/project/InterProcessPyObjects\nWhat My Project Does\nInterProcessPyObjects is a part of the Cengal library. If you have any questions or would like to participate in discussions, feel free to join the . Your support and involvement are greatly appreciated as Cengal evolves."},
{"Title": "Python Test 220: Getting the most out of PyCon, including juggling - Rob Ludwick", "Author": "variedthoughts", "Content": "Listen at https://podcast.pythontest.com/episodes/220-juggling-pycon\nEven if you never get a chance to go to PyCon, I hope this interview helps you get a feel for the welcoming aspect of the Python community. The juggling at PyCon is one of the inspirations for PythonPeople.fm, one of PythonTests's sibling podcasts. Do you have any conference tips to add?"},
{"Title": "Calculating Virtual Cycling Power With Python", "Author": "TokenChingy", "Content": "I was doing some light reading and stumbled across Steve Gribbles Power vs Speed Calculator and thought I'd give it a go at rebuilding it based on his Physics model using Python. Then I wrote an article about. Thought I'd share it with you all: Calculating Virtual Cycling Power (jasonlei.com)"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Medical imaging Python jobs", "Author": "Durysik", "Content": "Hi folks! I am currently looking for a US (west coast best) based job where I could grow as a python programmer, specifically analysing medical images. Looking online I found some labs where they work with images, but I thought I'd ask (not sure if it's the right sub tho) cause I'm sure this way I'll hear about many places that deal with Medical Imaging. Thanks :)"},
{"Title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"", "Author": "AlSweigart", "Content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs I'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10) Once printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become."},
{"Title": "Suggestions for python libraries to contribute to", "Author": "JimJimBerry", "Content": "Hey, python folks ! I have been coding in python for around 3 years, 2 years professionally. I have worked with asyncio, typing and other stuff that is needed to build a server. I was looking for a small but impactful enough open source core python library/application to work on. I tried cpython but it seems to be beyond my capability at the moment. As for my interests I was interested in lower level stuff as well as libraries like asyncio and celery. Any suggestions for libraries that could use a bit of help and teach me some stuff as well would be appreciated"},
{"Title": "AzuracastPy: An Unofficial Python Wrapper for the Azuracast API.", "Author": "ARandomBoiIsMe", "Content": "Source code What My Project Does: It acts as a wrapper for the AzuraCast API, providing custom functions and classes for more straightforward use of the API in python projects. Target Audience: Python users who are interested in programmatically interacting with online radios hosted on AzuraCast. Comparison: The idea of API Wrappers is not new. However, I noticed that the only existing wrapper for this API is written in PHP, which I am not experienced with. I created this project so I, and other python programmers by extension, could have an easier time working with the API."},
{"Title": "Apple Health data exploration with Atlas, Clickhouse, Vega-Altair, Quarto", "Author": "__tosh", "Content": "What My Project Does A few days ago I wrote a simple python script (\"Atlas\") that turns the Apple Health export.xml file (which is about 1 GB in my case, with about 10 years of data) into a very simple parquet file (a bit like a compressed CSV) that is also way smaller (40 MB). The parquet file has 5 columns:\ntype (e.g. \"CyclingDistance\")\nvalue (e.g. \"12.100\")"},
{"Title": "InterProcessPyObjects: Fast IPC for Sharing and Modifying Objects Across Processes", "Author": "FI_Mihej", "Content": "InterProcessPyObjects Python package\ngithub.com/FI-Mihej/InterProcessPyObjects If you like the project, consider giving it a star on GitHub to show your support and help further development. :) pypi.org/project/InterProcessPyObjects\nWhat My Project Does\nInterProcessPyObjects is a part of the Cengal library. If you have any questions or would like to participate in discussions, feel free to join the . Your support and involvement are greatly appreciated as Cengal evolves."},
{"Title": "tab-pal: a TUI for adding and editing custom colour palettes in Tableau", "Author": "Ok-Frosting7364", "Content": "Source code: https://github.com/ben-n93/tab-pal\nWhat my Project Does\nMakes it quicker, easier and prettier to create custom colour palettes in Tableau. Rather than having to find your Preferences.tps file every time and edit the XML you can just launch tab-pal from the command-line and make any changes you want (adding/deleting new palettes, adding/removing colours. You also get a preview of the colours you've added. Target Audience\nData/business analysts and data scientists and who work with Tableau.\n\nThere are some websites that let you dynamically create the Preferences.tps XML file however this still requires you to locate the file and copy and paste over it with any changes you make"},
{"Title": "Reviewing Dataframe Changes? Looking for Your Preferred Methods!", "Author": "rageagainistjg", "Content": "After playing around with a dataframe‚Äîapplying filters or other transformations‚ÄîI'm curious about your methods for reviewing the changes. In VS Code, the variable explorer is quite handy for a quick look at the modified dataframe. Alternatively, when working in a Jupyter notebook within VS Code, exporting the data to an Excel file provides a detailed view and allows for an easy deep dive into the results. What are your preferred practices for ensuring your data adjustments are precisely what you intended?"},
{"Title": "Project: Simple Interactive Python Streamlit Maps With NASA GIS Data", "Author": "jgloewen", "Content": "Python Streamlit is terrific for putting together interactive dashboards. Combined with the geopandas library, streamlit can easily display GIS data points on a map for you. Forest fires in my home province of British Columbia, Canada have been really bad recently. NASA has a terrific dataset that keeps track of forest fires by country. Can I use Streamlit to access this dataset and display a map off all the fires within a certain area (BC) for a particular time frame (2021)? And can I give the user the ability to choose a month? You bet! Let me step you through how! FREE tutorial (with code):"},
{"Title": "diskcache: This key-value store library is faster than Redis and Memcached üòÆ (built by Grant Jenks)", "Author": "RevolutionaryPen4661", "Content": "PYPI (From the README, Released Last Year, Edited by Grammarly) Github pip install diskcache The cloud-based computing of 2024 puts a premium on memory. Gigabytes of space are left on disks as processes vie for memory. Memcached (and sometimes Redis) is used as a cache among these processes. Wouldn‚Äôt it be nice to leverage empty disk space for caching? Django is Python‚Äôs most popular web framework and has several caching backends. Unfortunately, the file-based cache in Django is essentially broken. The culling method is random and large caches repeatedly scan a cache directory which slows linearly with growth. Can you allow it to take sixty milliseconds to store a key in a cache with a thousand items?"},
{"Title": "I made a python bot that plays minesweeper", "Author": "_dwightshrute", "Content": "Hello, I made this Minesweeper bot that I wanted to share with you all. What My Project Does - The bot takes a screenshot of the board and runs a classification algorithm to extract the contents of the board. It then analyzes the board, finds as many mines as it can, and sends clicks. If it cannot find any mines then it guesses the most probable position of a mine. Target Audience - It's a toy project for anyone interested in algorithms or problem-solving. Comparison - This is just my attempt at making a minesweeper bot. I'm sure there are many bots out there that are much more efficient than this."},
{"Title": "AzuracastPy: An Unofficial Python Wrapper for the Azuracast API.", "Author": "ARandomBoiIsMe", "Content": "Source code What My Project Does: It acts as a wrapper for the AzuraCast API, providing custom functions and classes for more straightforward use of the API in python projects. Target Audience: Python users who are interested in programmatically interacting with online radios hosted on AzuraCast. Comparison: The idea of API Wrappers is not new. However, I noticed that the only existing wrapper for this API is written in PHP, which I am not experienced with. I created this project so I, and other python programmers by extension, could have an easier time working with the API."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A Free GPT-Powered Financial Analysis Tool", "Author": "Starks-Technology", "Content": "Link to GitHub Page\nWhat My Project Does\nI created a simple financial analysis tool using the SimFin API and the GPT API. This tool summarizes financial information and makes it digestable for people who don't know a lot about finance.\nTarget Audience\nThis is more of a toy project for those interested in AI and Finance. It's meant for people without a ton of GPT experience to see a tangible use-case of generative AI within the field."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Who is using quart framework for microservices?", "Author": "Dry_Raspberry4514", "Content": "I am using quart framework (https://quart.palletsprojects.com) for a number of microservices in a SaaS application. However, I hardly hear anything about this framework on any social media platform which seems to be dominated by FastAPI. Also I'm unable to find which all projects/companies are using this framework. All this is leading to anxiety around the future of this project. Are there any well known projects / companies which are using this framework for microservices?"},
{"Title": "Production grade AI Web apps, just using python ?", "Author": "prime_danger", "Content": "Hey guys, I have worked on building multiple ai/ml usecases and their specific backends. But now I want build interfaces for easy and quick integration. I saw a blog which used FastUI which looks quick decent but when I tried it just showed me a Json of elements on the page. Are there any other libraries I should use? ü§î"},
{"Title": "diskcache: This key-value store library is faster than Redis and Memcached üòÆ (built by Grant Jenks)", "Author": "RevolutionaryPen4661", "Content": "PYPI (From the README, Released Last Year, Edited by Grammarly) Github pip install diskcache The cloud-based computing of 2024 puts a premium on memory. Gigabytes of space are left on disks as processes vie for memory. Memcached (and sometimes Redis) is used as a cache among these processes. Wouldn‚Äôt it be nice to leverage empty disk space for caching? Django is Python‚Äôs most popular web framework and has several caching backends. Unfortunately, the file-based cache in Django is essentially broken. The culling method is random and large caches repeatedly scan a cache directory which slows linearly with growth. Can you allow it to take sixty milliseconds to store a key in a cache with a thousand items?"},
{"Title": "Library for automatic Cython 3.0 code annotations generation.", "Author": "Cool-Nefariousness76", "Content": "Hi everybody, over the last year I've been developing a library that adds some Cython 3.0 annotations to existing python code. What My Project Does: For example if it sees a for i in range(): in a function it recognizes i as an integer and adds a i = cython.declare(cython.int)line at the beginning of the function. It actually uses the built-in ast module under the hood for parsing, I found it a super useful library! Target Audience: It is a side project I made mainly for fun. I don't know if it can be of interest to anybody, or if it could have some potential utility."},
{"Title": "New book! The Quick Python Book, Fourth Edition by Naomi Ceder", "Author": "ManningBooks", "Content": "Hello everybody, Thank you for having us here, and a huge \"Thank you\" to the moderators for letting us post. We have just released the latest edition of The Quick Python Book by the one-and-only Naomi Ceder, and I wanted to share that news with the community. Many of you are already familiar with Naomi's work and her massive contributions to the world of Python programming language. The Quick Python Book has aided over 100,000 developers in mastering Python. The Fourth Edition of the book has been revised to include the latest features, control structures, and libraries of Python, along with new coverage of working with AI-generated Python code. Naomi, the author, has beautifully balanced the details of the language with the insights and advice required to accomplish any task. Her personal touch has made learning Python an enjoyable experience for countless developers."},
{"Title": "I made a Tkinter \"DevTools\" to inspect and modify widgets in your running app in real-time", "Author": "254hypebeast", "Content": "source: https://github.com/ObaraEmmanuel/Formation pypi: https://pypi.org/project/formation-studio/ What My Project Does Allows you to inspect widgets in your running Tk app in real-time. You can view the widget hierarchy, modify widget attributes, adjust widget layout and run arbitrary code to interact with your widgets through the embedded Python REPL console. It works just like DevTools in a browser. This debugger is part of the Formation studio project which is a drag-n-drop graphical UI builder for Tkinter. Target Audience Any Tk developer seeking to have an easier time debugging their UI or seeking to experiment with the Tk framework with minimal effort."},
{"Title": "Is PyGame still alive?", "Author": "pyeri", "Content": "So it was a long time ago in the good old Python 2.x days (circa 2010 probably) that I had learned PyGame with some tutorials at my former work place. But nowadays since I mostly freelance with business apps, I never felt the need for it. But since such a game development project is on the horizon after all these years, I was wondering if PyGame can still be up for the task with Python 3.x? Or is there a better Python library available these days? I don't need any advanced gaming features of modern day VFX or anything, all I need is some basic Mario/Luigi style graphics, that's all!"},
{"Title": "Why is Plotly so cumbersome to tweak?", "Author": "olive_oil_for_you", "Content": "I made this visualisation with this code. I have three questions:\nIs Plotly supposed to be this cumbersome to tweak? Would other libraries require the same amount of code to add the details I did?\nCan my code be reduced in size? Maybe it's me who is complicating things with Plotly and there are easier ways to do what I am doing.\nAny R enthusiast who can tell me how much shorter this code would look like with ggplot2? I asked ChatGPT but the result was garbage."},
{"Title": "Who is using quart framework for microservices?", "Author": "Dry_Raspberry4514", "Content": "I am using quart framework (https://quart.palletsprojects.com) for a number of microservices in a SaaS application. However, I hardly hear anything about this framework on any social media platform which seems to be dominated by FastAPI. Also I'm unable to find which all projects/companies are using this framework. All this is leading to anxiety around the future of this project. Are there any well known projects / companies which are using this framework for microservices?"},
{"Title": "typedattr: Autocompletion and typechecking for CLI script arguments, using standard argparse syntax", "Author": "gings7", "Content": "Excited to share my pypi package typedparser I have been working on for around 1 year now. What My Project Does: It enables writing CLI scripts and create an \"args\" variable with autocompleted members and type checks, but still keeps the simple and universally understood syntax of the stdlib argarse module. Target Audience: For stability, I battletested it in my research projects and added automatic builds as well as 80%+ test coverage. So I believe it is pretty stable. Comparison: For typing functionality it uses the attrs package as backend. It also provides some additional features for object and dictionary manipulation. Of course there are many other CLI argument packages out there, but this one stands out in that it tries to keep the syntax of the argparse standard library as much as possible, making it easy for others to figure out what your script does. Check it out and let me know what you think."},
{"Title": "APScheduler vs Schedule package", "Author": "kostakos14", "Content": "Hey folks, looking to use one library to implement some background scheduling logic on my application. I find in Google search APScheduler to be frequently mentioned, but I can see the Schedule package has more GH stars. Was curious if anybody has used one of them, and which one would you recommend based on your own experience."},
{"Title": "Track the size of your PyInstaller packages in CI", "Author": "bencherdev", "Content": "If you have ever wanted to track the size of your PyInstaller packages in CI, Bencher now supports tracking your package size: https://bencher.dev/docs/how-to/track-file-size/"},
{"Title": "I connected LLM to Python runtime and generated unit-tests (OpenSource)", "Author": "Financial_Muffin396", "Content": "Hi all, I initially started this adventure by trying to automate bug fixes with the help of LLMs. However, I received feedback saying the fixes aren't always correct, leading to the question: why bother reviewing PRs that might add more issues? (It's really hard for LLMs to say \"I don't know\"). So, I decided to focus on reliability perfecting unit tests. The source code is available at: https://github.com/CaptureFlow/captureflow-py What My Project Does: It incorporates a tracer client-side Python library and a backend that accumulates such traces and is capable of proposing code improvements and generating tests for your repository. It traverses the execution graph, extracts relevant parts, enriches them with implementation data from the GitHub API, and then generates tests with the help of GPT4."},
{"Title": "I made a Python CLI Tools for Competitive Programming", "Author": "Old-Manufacturer6209", "Content": "Source Code: https://github.com/JeanExtreme002/FastSnake PyPI: https://pypi.org/project/FastSnake/ What My Project Does FastSnake is a command-line tool that allows you to easily create, expand, run, and test Python solutions for competitive programming problems. üêçüèÅ This project provides useful CLI tools for competitive programming, such as test case generators, algorithms and data structures, tools for platforms Codeforces and AtCoder, and other features that assist you during the development and testing of solutions, besides building a nice directory structure to develop your solutions. ü§ì"},
{"Title": "Why is Plotly so cumbersome to tweak?", "Author": "olive_oil_for_you", "Content": "I made this visualisation with this code. I have three questions:\nIs Plotly supposed to be this cumbersome to tweak? Would other libraries require the same amount of code to add the details I did?\nCan my code be reduced in size? Maybe it's me who is complicating things with Plotly and there are easier ways to do what I am doing.\nAny R enthusiast who can tell me how much shorter this code would look like with ggplot2? I asked ChatGPT but the result was garbage."},
{"Title": "Introducing Notolog: Python Markdown Editor built with PySide6", "Author": "devotaku", "Content": "Excited to share my personal open-source project: Notolog - Python Markdown Editor (MIT License). The main motivation for developing another markdown editor was my passion for learning new things and enhancing my development skills in Python. I developed it in my spare time over a few months, despite having no prior experience in creating full-scale Python applications. What My Project Does ‚àó Multiplatform ‚àó Markdown async syntax highlighting created by me ‚àó Several pre-installed color themes ‚àó Supports English and 17 other languages right out of the box ‚àó Integration with OpenAI API for AI-assisted features"},
{"Title": "I created a Python script that makes it easier to track how your baby's sleep is improving", "Author": "BX1959", "Content": "My wife and I use the Huckleberry app to track our baby's sleep periods. Although the free version of the app allows you to view a number of sleep-related metrics, I also wanted to see whether his longest nightly sleep stretches were getting longer over time. Therefore, I created a Python project to help me answer this and other questions I had about my baby's sleep.\nWhat My Project Does\nThis project reads in data from a Huckleberry .csv export (or a separate custom .csv file); analyzes its sleep information; and then produces ."},
{"Title": "Meteor Science using Python - Creating a \"weird\" coordinate system", "Author": "MrAstroThomas", "Content": "Hey everyone, I am creating \"Space Science with Python\" tutorials on YouTube with free and open accessible Python code on GitHub. It is not fancy or a \"super high animation quality YouTube production\". I am just an astrophysicists (what a difficult word to write), working in industry who continues with science as a hobby. Ha! And I have some crazy niche knowledge that is not covered by Gemini or chatGPT (yet). Anyway, I am creating now a tutorial on meteor science and wanted to show you how to create a coordinate system that co-rotates with the Earth while it is revolving around the Sun."},
{"Title": "I connected LLM to Python runtime and generated unit-tests (OpenSource)", "Author": "Financial_Muffin396", "Content": "Hi all, I initially started this adventure by trying to automate bug fixes with the help of LLMs. However, I received feedback saying the fixes aren't always correct, leading to the question: why bother reviewing PRs that might add more issues? (It's really hard for LLMs to say \"I don't know\"). So, I decided to focus on reliability perfecting unit tests. The source code is available at: https://github.com/CaptureFlow/captureflow-py What My Project Does: It incorporates a tracer client-side Python library and a backend that accumulates such traces and is capable of proposing code improvements and generating tests for your repository. It traverses the execution graph, extracts relevant parts, enriches them with implementation data from the GitHub API, and then generates tests with the help of GPT4."},
{"Title": "I've developed a library for send metrics to zabbix asynchronously", "Author": "Royal_Section4889", "Content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this. Tests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async What My Project Does Send zabbix sender messages using asyncio tasks. Target Audience SysAdmins who use Zabbix to monitor a large number of metrics. Comparison Instead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix"},
{"Title": "ChatGPT can talk with all my Python notebooks", "Author": "pp314159", "Content": "I'm working on an open-source framework for converting Python notebooks into web applications, it is called Mercury. Recently, I have added an option to execute notebooks with REST API. You can pass paramters in POST request body to the notebook, execute all cells and return JSON as response. I'm also running a SaaS service, Mercury Cloud where you can deploy notebooks with one-click with unique website domain. What My Project Does It makes Python notebooks extermely easy to integrate with custom ChatGPT, so GPT can execute Python notebooks and get response. It is 3-steps process:"},
{"Title": "SecretScraper: highly configurable web crawler/scraper for extracting sensitive data from websites", "Author": "PadishahIII", "Content": "Hi, I'm a cybersecurity enthusiastic. And I've made a web crawler/scraper tool to extract links and sensitive information against target websites. You can find it here: https://github.com/PadishahIII/SecretScraper. What My Project Does SecretScraper is a highly configurable web scraper tool that crawls links, extracts subdomains from target websites and finds sensitive data using regular expressions. The features included in the SecretScraper are:\nWeb crawler: extract links using both DOM hierarchy and regex"},
{"Title": "I made a Python text to speech library - Pyt2s", "Author": "asksumanth", "Content": "What my project does: It supports services like IBM Watson, Acapela and Stream labs' demo websites to convert your text to speech. Target audience: It's a toy project and would not recommend you to use in Production. Comparison: It's wayyyyy easy to use. Just pip install and use in your project. No extra setup required like other libraries. Also supports various languages and voices and accents. Check docs for more. Here is the link to repository. Please go do check it out and star it if it's helpful to you guys. Thank you. I made this library taking inspiration from this php tts library by chrisjp."},
{"Title": "Framework to use for backend", "Author": "Clickyz", "Content": "Hello guys I recently decided to move from nodejs(expressjs) to python for general purposes but mostly for backend. I have couple of questions.\nWill i regret my migration to python? :)\nWhich framework you suggest for backend solo dev?\nAnd what tips are you suggesting me in general to get used to python."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Interactive plots in the terminal", "Author": "Spiffidimus", "Content": "I made a library to create interactive plots in the terminal (pip install itrm). It uses braille characters (by default) to display the data with sub-character resolution. There are several keybindings for moving a vertical cursor left and right, for zooming in or out on data, and for changing which curve to focus on. There are occasions (such as when working with a server) where MatPlotLib is not an option and the terminal is the only available tool. But, in my opinion, it is actually faster to use this tool (itrm) to zoom in on interesting parts of data and analyze patterns than using other tools like MatPlotLib. In fact, with large data sets (~1 million points), this tool actually renders faster than MatPlotLib. Please check it out and let know what you think."},
{"Title": "New Python-only abstractions for extracting data from apis", "Author": "Thinker_Assignment", "Content": "Hey there, you are probably familiar with REST APIs.\nWe at dlt library added a new way to get data from apis (and dlt can already load it with best practice to db or parquet). We already did some internal hackathons but we would appreciate your feedback so we can improve it further\n- Our new REST API Source is a short, declarative configuration driven way of creating sources.\n- Our new REST API Client is a collection of Python helpers used by the above source, which you can also use as a standalone, config-free, imperative high-level abstraction for building pipelines.\nYou can read more about the source here or go to our docs for the REST APIClient info\n\nPS: see you at Pycon Pittsburgh!"},
{"Title": "TypeIs does what I thought TypeGuard would do in Python", "Author": "Ok_Analysis_4910", "Content": "While it's unfortunate to have two constructs‚ÄîTypeGuard and TypeIs‚Äîwith slightly different behaviors, I'm glad that the latter is less surprising. https://rednafi.com/python/typeguard_vs_typeis/"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Hi! I've published a Python client for IBKR REST and WebSocket APIs - IBind. Hope you like it üëã", "Author": "VoyZan", "Content": "Hi! I want to share a library I've built recently. IBind is a REST and WebSocket Python client for Interactive Brokers Client Portal Web API. It is directed at IBKR users. You can find IBind on GitHub: https://github.com/Voyz/ibind What My Project Does: It is a REST and WebSocket API for the Interactive Brokers' Web API. I'm particularly proud of a few things in this release:\nThe REST and WebSocket API clients are based on an abstract base class RestClient and WsClient accordingly. These could be implemented to use some other Web APIs in a relatively straightforward way. I have in fact used a version of that for a cryptocurrency WebSocket API, and it is nice to see it adapt to a different environment."},
{"Title": "Are PEP 744 goals very modest?", "Author": "MrMrsPotts", "Content": "Pypy has been able to speed up pure python code by a factor of 5 or more for a number of years. The only disadvantage it has is the difficulty in handling C extensions which are very commonly used in practice. https://peps.python.org/pep-0744 seems to be talking about speed ups of 5-10%. Why are the goals so much more modest than what pypy can already achieve?"},
{"Title": "Interactive Data Visualization with Python: A Showcase of Plotly Dash", "Author": "AbhishekSuryavanshee", "Content": "What My Project Does:\nI'm excited to introduce my latest project built with Python ‚Äì an interactive data visualization application using Plotly Dash. This project aims to empower users to explore and analyze datasets dynamically through interactive visualizations. By leveraging Plotly Dash's capabilities, users can interact with data in real-time, customize visualizations on the fly, and gain deeper insights with just a few clicks. Target Audience:\nThis project caters to a wide range of users, from data enthusiasts and analysts to professionals seeking to communicate insights effectively. Whether you're a data scientist exploring patterns in large datasets or a business analyst presenting findings to stakeholders, this tool is designed to streamline your workflow and enhance your data storytelling capabilities. It's suitable for both production-grade applications and educational purposes, offering a versatile platform for data visualization tasks of varying complexity."},
{"Title": "Python Streamlit Spotlight Tutorial: an Interactive Dashboard using UNHCR Refugee Data", "Author": "jgloewen", "Content": "Python Streamlit is a terrific tool for creating interactive data visualizations. It packages all your visualizations up into a neat little application - including charts and maps - and displays them in your default browser. No muss, no fuss. Recently, I found a new dataset (to me) on the UN High Commission for Refugees (UNHCR) website. It contains country-to-country movements for refugees both from origin country and country of asylum Using this dataset, here's a step-by-step on how to code a Python Streamlit application that has:"},
{"Title": "Pure Python Physics Engine", "Author": "More-Tower9993", "Content": "What My Project Does The Physics Engine Called PhysEng, provides an easy to use environment and visualization combo in which to try out different physics or even provide a template to design your own accelleration/velocity fields. Besides the visualization aspect and numpy the basic functions of the Engine are written completely in 100% python. The features included in the Engine are:\nParticles, Soft Bodies, Anchor points\nBuilt in Fields: Drag, Uniform Force Fields, Gravity Between Particles, Octree Gravity etc"},
{"Title": "Declarative GUI Slint v1.6 released with Design Mode (WYSIWYG) Improvements", "Author": "madnirua", "Content": "https://slint.dev/blog/slint-1.6-released Slint is a declarative GUI toolkit to build native user interfaces for desktop and embedded applications. Find more information at https://slint.dev/ or check out the source code at https://github.com/slint-ui/slint. EDIT: The Python APIs are currently in alpha. More info -- https://github.com/slint-ui/slint/tree/master/api/python"},
{"Title": "IP subnet or IP calculator tool need feedback", "Author": "nicanorflavier", "Content": "Hey folks, I've been dabbling with a Python project recently that's all about making life easier for us I.T. people. It's a nifty little tool that calculates IP subnets and does IP calculations from the command or CLI. Here's the GitHub link and the code: https://github.com/nicanorflavier/ipnet I‚Äôm pretty stoked about it, but I know there‚Äôs always room for improvement. So, I thought, better to turn to than the wise minds of this python community? I‚Äôm all ears for any feedback, tips, tricks, or advice you guys might have. Thanks a ton in advance!"},
{"Title": "Implementing your own pypi clone", "Author": "chione99", "Content": "Hi, Just want to know how difficult is it to manage your own pypi clone and how do you recommend to create a seperation between dev and prod systems."},
{"Title": "In what way do you try out small things when developing?", "Author": "HatWithAChat", "Content": "I've noticed at work that my coworkers and I try out small things in different ways. Small things like if you want to try that adding two datetimes together behaves in the way you expect. Some people use jupyter notebook for this and others run python interactively in a separate command prompt. I usually run debug in whatever IDE I'm using and then letting it stop at the code I'm currently developing and then using the debug console to test things out. Sometimes this means just leaving the debugger at a breakpoint for half an hour while I continue writing code. Is my way of doing it weird or does it have any disadvantages? How do you usually test out things on the go in a good way?"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Manage Your Squid Proxy Server Efficiently with This Python Script", "Author": "SAV_NC", "Content": "ü¶ë Squid Proxy Manager Script Hello fellow Python enthusiasts! I've created a Python script that makes managing your Squid Proxy Server a breeze. If you're looking for an efficient and straightforward way to interact with your Squid server remotely, this script is for you. üéâ What My Project Does The Squid Proxy Manager script allows you to manage your Squid Proxy Server remotely using a simple command-line interface. Here are some of the key features:\nCheck Squid Service Status: Quickly check if your Squid service is running or not."},
{"Title": "ArchiveFile: Unified interface for tar, zip, sevenzip, and rar files", "Author": "PredatorOwl", "Content": "What My Project Does archivefile is a wrapper around tarfile, zipfile, py7zr, and rarfile. The above libraries are excellent when you are dealing with a single archive format but things quickly get annoying when you have a bunch of mixed archives such as .zip, .7z, .cbr, .tar.gz, etc because each library has a slightly different syntax and quirks which you need to deal with. archivefile wraps the common methods from the above libraries to provide a unified interface that takes care of said differences under the hood. However, it's not as powerful as the libraries it wraps due to lack of support for features that are unique to a specific archive format and library."},
{"Title": "Pre-commit hook to keep coverage badge in README up to date", "Author": "60percentcocoa", "Content": "Wrote this as a tool to keep README coverage badges up to date without relying on 3rd party services or having to do anything extra, thought others might get some utility out of it: coverage-pre-commit. A .coverage file is expected at the root of the project, generated by running coverage run directly or using a plugin such as pytest-cov when running tests. Most convenient when used as a pre-push hook imo. Feel free to opine, be it positive or negative!"},
{"Title": "modern_colorthief - Modified Median Cut Quantization algorithm in rust + python", "Author": "BasePlate_Admin", "Content": "github\ndocumentation\nWhat my project does : It gets the dominant color/color palette from given image. Target Audience: Anyone Usage modern_colorthief exposes two functions get_color and get_palette Here is how to use get_color: from modern_colorthief import get_color\n\n# Path to any image\npath = ...\n\nprint(get_color(path)) # returns tuple[int,int,int]"},
{"Title": "I made an easy and secure data lake for Pandas", "Author": "realstoned", "Content": "What My Project Does Shoots is essentially a \"data lake\" where you can easily store pandas dataframes, and retrieve them later or from different locations or in different tools. Shoots has a client and a server. After choosing a place to run the server, you can easily use the client to \"put\" and \"get\" dataframes. Shoots supports SQL, allowing you to put very large dataframes, and then use a query to only get a subset. Shoots also allows you to resample on the server. # put a dataframe, uploads it to the server  \ndf = pd.read\\_csv('sensor\\_data.csv')  \nshoots.put(\"sensor\\_data\", dataframe=df, mode=PutMode.REPLACE)  \n\n\n# retrieve the whole data frame  \ndf0 = shoots.get(\"sensor\\_data\")  \nprint(df0)  \n\n# or use sql to retrieve just some of the data  \nsql = 'select \"Sensor\\_1\" from sensor\\_data where \"Sensor\\_2\" < .2'  \ndf1 = shoots.get(\"sensor\\_data\", sql=sql)"},
{"Title": "PyWolt: Wolt food delivery service API wrapper", "Author": "daivushe1", "Content": "I'm thrilled to share my first open-source project with you all: PyWolt! üéâ PyWolt is a Python library that makes it super easy to interact with the Wolt API.\nWhat My Project Does:\nDiscover Venues: Find nearby spots to grab a bite.\nExplore Menus: Dive into a venue's menu and pick your favorites.\nTarget Audience:"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"", "Author": "AlSweigart", "Content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs I'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10) Once printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become."},
{"Title": "Frame - a new language for programming state machines in Python", "Author": "framelanger", "Content": "Hey, I am (re)releasing a project called Frame that I've been working on to create a language and transpiler to easily create state machines/automata in Python. It also is able to generate UML documentation as well. This project is for people who are interested in programming state machines for a wide range of purposes such as game programming, workflows, MBSE modeling as well as school projects for comp sci theory. It is also useful simply for generating flow documentation. The Framepiler (Frame transpiler) is in beta at this time. It would be great to get feedback from the Python community on any gaps in key functionality or bugs."},
{"Title": "Share Proejct: NLLB-200 Distill 350M en-ko", "Author": "SaeChan5", "Content": "Hello , I'm excited to share a project that was initially intended to use in my graduating product(Capstone) What My Proeject Does I made NLLB-200 Distill 350M model to translating English to Korean Target Audience GPU servers are quite expensive, so I made it for university students who can't cost the server (like me.) Comparison It's even smaller and faster the other NLLB-200 model. so it can be run with CPU! more details are in my page If you know Korean, please give me a lot of feedback https://github.com/newfull5/NLLB-200-Distilled-350M-en-ko thank you!!"},
{"Title": "I made a React-like web framework for Python üëã", "Author": "Rawing7", "Content": "I'm Paul, one of the creators of Rio. Over the years I've tried many different established python GUI frameworks, but none of them really satisfied me. So I teamed up with a few like minded developers and spent the last few months to create our own framework. Rio is the result of this effort. What My Project Does Rio is a brand new GUI framework that lets you create modern web apps in just a few lines of Python. Our goal is to simplify web and app development, so you can focus on the things you care about, instead of wasting countless hours on frustrating user interface details. We do this by following the core principles of Python that we all know and love. Python is supposed to be simple and compact - and so is Rio. There is no need to learn any additional languages such as HTML, CSS or JavaScript, because all of the UI, Logic, Components and even layouting is done entirely in Python. There‚Äôs not even a distinction between front-end and back-end. Rio handles all of the communication transparently for you."},
{"Title": "Dash vs Reflex vs Others", "Author": "Sea_Split_1182", "Content": "Where can I find a decent comparison (pros and cons) of these 5 solutions? They seem to be solving the same problem, which is, afaiu, separating the frontend ‚Äòannoyance‚Äô from Python scripting / math.\n‚Å†Reflex (used to be called Pynecone) https://reflex.dev\n‚Å†Streamlit https://streamlit.io\n‚Å†Gradio https://gradio.app\n‚Å†Dash https://dash.plotly.com"},
{"Title": "Reviewing Dataframe Changes? Looking for Your Preferred Methods!", "Author": "rageagainistjg", "Content": "After playing around with a dataframe‚Äîapplying filters or other transformations‚ÄîI'm curious about your methods for reviewing the changes. In VS Code, the variable explorer is quite handy for a quick look at the modified dataframe. Alternatively, when working in a Jupyter notebook within VS Code, exporting the data to an Excel file provides a detailed view and allows for an easy deep dive into the results. What are your preferred practices for ensuring your data adjustments are precisely what you intended?"},
{"Title": "ASCII plot backend package for matplotlib", "Author": "jetpack_away", "Content": "Hi I've made a package called mpl_ascii which is a backend for matplotlib. You can find it here: https://github.com/chriscave/mpl_ascii I would love to share it with others and see what you guys think What it is It is a backend for matplotlib that converts your plots into ASCII characters. At the moment I have only made support for: bar charts, scatter plots and line plots but if there's demand for more then I would love to keep working on it. Target Audience: Anyone using matplotlib to create plots who might also want to track how their plots change with their codebase (i.e. version control)."},
{"Title": "SQLPage - a Python library to add string token based pagination easily", "Author": "kernelslayer", "Content": "What My Project Does - This is a Python package to easily add string token based pagination. Currently it supports SQLModel and SQLAlchemy ORMs. Recently I wanted to add pagination in one of my Python projects and in the API response, I had to return a string next page token. Now I could not find a straight-forward way of doing this in Python. All of the tutorials or blog posts I saw, there in the response the server always returned a page_number, page_size, and total_elements and then the onus was on the calling service to adjust this accordingly.  Comparison - The current packages and methods requires some changes in the app layer as well. I tried using a few but those did not satisfy the use case and were also a bit harder to implement. I could not find a easy to use option. The present ones returned integers instead of a string token"},
{"Title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"", "Author": "AlSweigart", "Content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs I'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10) Once printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become."},
{"Title": "The new REPL in Python 3.13.0 beta 1", "Author": "treyhunner", "Content": "Python 3.13.0 beta 1 was released today. The feature I'm most excited about is the new Python REPL. Here's a summary of my favorite features in the new REPL along with animated gifs. The TLDR:\nSupport for block-leveling history and block-level editing\nPasting code (even with blank lines within it) works as expected now\nTyping exit will exit (no more Use exit() or Ctrl-D (i.e. EOF) to exit message)"},
{"Title": "I made a python package that can parse Excel Formula Strings into dictionary structures!", "Author": "MPGaming9000", "Content": "What my project does: It basically takes a formula string like you'd get from Openpyxl like \"=SUM(A1:B2)\" and breaks it all out into a dictionary structure for you to then navigate through, modify, and then reformat that modified structure back into an excel friendly formula string again! Target Audience: (People who modify Excel formula strings in automated spreadsheet modification scripts. Or people who need to analyze formulas in a spreadsheet to do some kind of logic based on that analysis). Disclaimer: For most people some simple regex pattern matching and str replaces would be fine to modify formulas but if you need a more structured approach to working with these strings, this package has you covered!"},
{"Title": "Cross platform python3 shebang", "Author": "tedkotz", "Content": "There is no shebang line that actually works across platforms for python 3. I would like one that works on unmodified :\nDebian shell (Dropped python2, falls under PEP 394)\nOlder Linux shells that still have python pointing to python2 (PEP 394)\nWindows cmd.exe shell (this really just means one that will work with PEP 397)\nGitbash for Windows (sort of a weird half sibling that respects shebangs)"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "UXsim 1.3.0 released with vehicle tracking and improved vehicle routing", "Author": "Balance-", "Content": "Main Changes\nAdd GUI functions\nVehicle tracking: You can now track a specific vehicle to see their route\nDataframe viewer: Stats can be confirmed\nImprove vehicle routing functions\nAdd example of routing optimization"},
{"Title": "Reviewing Dataframe Changes? Looking for Your Preferred Methods!", "Author": "rageagainistjg", "Content": "After playing around with a dataframe‚Äîapplying filters or other transformations‚ÄîI'm curious about your methods for reviewing the changes. In VS Code, the variable explorer is quite handy for a quick look at the modified dataframe. Alternatively, when working in a Jupyter notebook within VS Code, exporting the data to an Excel file provides a detailed view and allows for an easy deep dive into the results. What are your preferred practices for ensuring your data adjustments are precisely what you intended?"},
{"Title": "Calculating Virtual Cycling Power With Python", "Author": "TokenChingy", "Content": "I was doing some light reading and stumbled across Steve Gribbles Power vs Speed Calculator and thought I'd give it a go at rebuilding it based on his Physics model using Python. Then I wrote an article about. Thought I'd share it with you all: Calculating Virtual Cycling Power (jasonlei.com)"},
{"Title": "Hatch v1.10.0 - UV support, new test command and built-in script runner", "Author": "Ofekmeister", "Content": "Hello everyone! I'd like to announce version 1.10.0: https://hatch.pypa.io/latest/blog/2024/05/02/hatch-v1100/ Feel free to provide any feedback either here or as a discussion on the repo: https://github.com/pypa/hatch"},
{"Title": "American Airlines scraper made in Python with only http requests", "Author": "JohnBalvin", "Content": "Hello wonderful community, Today I'll present to you pyaair, a scraper made pure on Python https://github.com/johnbalvin/pyaair Easy instalation ` ` `pip install pyaair ` ` ` Easy Usage ` ` ` airports=pyaair.airports(\"miami\",\"\") ` ` ` Always remember, only use selenium, puppeteer, playwright etc when it's strictly necesary Let me know what you think, thanks About me: I'm full stack developer specialized on web scraping and backend, with 6-7 years of experience"},
{"Title": "Resume Screening Chatbot using RAG Fusion", "Author": "Babe_My_Name_Is_Hung", "Content": "Hi everyone! I recently finished a small side project for my graduating thesis, which is about experimenting with RAG-based frameworks in improving resume screening. What my project does: The project for the thesis is a GPT-4 Chatbot with RAG Fusion retrieval. Given a job description as input, the system retrieves the most relevant candidate profiles to perform follow-up tasks such as analysis, summarization, and decision-making, which can assist the screening process better. The revolving idea is that the similarity-based retrieval process can effectively narrow the initial large pool of applicants down to the most relevant resumes. However, this simple similarity ranking should not be used to evaluate a candidate's actual ability. Therefore, the top resumes are used to augment the GPT-4 Chatbot so it can be conditioned on these profiles and perform further downstream tasks."},
{"Title": "Library for automatic Cython 3.0 code annotations generation.", "Author": "Cool-Nefariousness76", "Content": "Hi everybody, over the last year I've been developing a library that adds some Cython 3.0 annotations to existing python code. What My Project Does: For example if it sees a for i in range(): in a function it recognizes i as an integer and adds a i = cython.declare(cython.int)line at the beginning of the function. It actually uses the built-in ast module under the hood for parsing, I found it a super useful library! Target Audience: It is a side project I made mainly for fun. I don't know if it can be of interest to anybody, or if it could have some potential utility."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "What does your python development setup look like?", "Author": "Working_Noise_6043", "Content": "I'd like to explore other people's setup and perhaps try need things or extra tools. What kind IDE, any extra tools to make it easier for you, etc. Looking forward to everyone's responses!"},
{"Title": "I made a Python app that turns your Figma design into code", "Author": "axorax", "Content": "Link: https://github.com/Axorax/tkforge Hey, my name is Axorax. I have been programming for a few years now. I started making a lot more projects in Python recently and this is one of them. I decided to call the project TkForge. What My Project Does TkForge allows you to turn your Figma design into code. So, you can make the UI for an app in Figma and add input fields, buttons and much more and name them properly then you can run TkForge to convert your Figma design into code. The names need to be the element that you want. For example; if you want a button element then you can name it \"button\" or \"button Hello World!\". The \"Hello World!\" portion will just get ignored. All of the text after the first space is ignored. However, for some elements, they matter. Like, if you want a textbox element with the placeholder text of \"Hello\" then you need to name it \"textbox Hello\"."},
{"Title": "Giving New Life to JModelica: Bringing Powerful Modelica Simulations to Python", "Author": "foadsf", "Content": "Five years ago, I posted about JModelica, a fantastic open-source tool for simulating complex systems that combined the ease of Python with the strength of Modelica. Sadly, the project went quiet, but I'm thrilled to share that, thanks to the dedication of a few folks (myself included!), JModelica is back! You can find the revived project on GitHub: https://github.com/JModelica/JModelica. What JModelica Does: JModelica provides a way to write complex simulations using the Modelica language, which is known for its ability to handle differential equations and model physical systems beautifully. The magic of JModelica lies in its Python integration‚Äîyou can solve your Modelica models and access the results directly in Python for in-depth analysis, visualization, and even optimization using libraries you already love!"},
{"Title": "APScheduler vs Schedule package", "Author": "kostakos14", "Content": "Hey folks, looking to use one library to implement some background scheduling logic on my application. I find in Google search APScheduler to be frequently mentioned, but I can see the Schedule package has more GH stars. Was curious if anybody has used one of them, and which one would you recommend based on your own experience."},
{"Title": "Library for automatic Cython 3.0 code annotations generation.", "Author": "Cool-Nefariousness76", "Content": "Hi everybody, over the last year I've been developing a library that adds some Cython 3.0 annotations to existing python code. What My Project Does: For example if it sees a for i in range(): in a function it recognizes i as an integer and adds a i = cython.declare(cython.int)line at the beginning of the function. It actually uses the built-in ast module under the hood for parsing, I found it a super useful library! Target Audience: It is a side project I made mainly for fun. I don't know if it can be of interest to anybody, or if it could have some potential utility."},
{"Title": "Tutorial on Building a Server-to-Server Zoom App with Python", "Author": "SleekEagle", "Content": "I made a tutorial on how to build a server-to-server Zoom OAuth application using Python. This application can transcribe Zoom meeting recordings, print the transcripts to the terminal, and save the transcripts as text files.\nvideo tutorial\nrepo\nwritten tutorial"},
{"Title": "InterProcessPyObjects: Fast IPC for Sharing and Modifying Objects Across Processes", "Author": "FI_Mihej", "Content": "InterProcessPyObjects Python package\ngithub.com/FI-Mihej/InterProcessPyObjects If you like the project, consider giving it a star on GitHub to show your support and help further development. :) pypi.org/project/InterProcessPyObjects\nWhat My Project Does\nInterProcessPyObjects is a part of the Cengal library. If you have any questions or would like to participate in discussions, feel free to join the . Your support and involvement are greatly appreciated as Cengal evolves."},
{"Title": "Introducing Notolog: Python Markdown Editor built with PySide6", "Author": "devotaku", "Content": "Excited to share my personal open-source project: Notolog - Python Markdown Editor (MIT License). The main motivation for developing another markdown editor was my passion for learning new things and enhancing my development skills in Python. I developed it in my spare time over a few months, despite having no prior experience in creating full-scale Python applications. What My Project Does ‚àó Multiplatform ‚àó Markdown async syntax highlighting created by me ‚àó Several pre-installed color themes ‚àó Supports English and 17 other languages right out of the box ‚àó Integration with OpenAI API for AI-assisted features"},
{"Title": "APScheduler vs Schedule package", "Author": "kostakos14", "Content": "Hey folks, looking to use one library to implement some background scheduling logic on my application. I find in Google search APScheduler to be frequently mentioned, but I can see the Schedule package has more GH stars. Was curious if anybody has used one of them, and which one would you recommend based on your own experience."},
{"Title": "Multipart File Uploads to S3 with Python", "Author": "tylersavery", "Content": "I created this tutorial after overcoming a difficult challenge myself: uploading 5GB+ files to AWS. This approach allows the browser to securely upload directly to an S3 bucket without the file having to travel through the backend server. The implementation is written in python (backend) and vanilla js (frontend)."},
{"Title": "I've developed a library for send metrics to zabbix asynchronously", "Author": "Royal_Section4889", "Content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this. Tests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async What My Project Does Send zabbix sender messages using asyncio tasks. Target Audience SysAdmins who use Zabbix to monitor a large number of metrics. Comparison Instead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix"},
{"Title": "AzuracastPy: An Unofficial Python Wrapper for the Azuracast API.", "Author": "ARandomBoiIsMe", "Content": "Source code What My Project Does: It acts as a wrapper for the AzuraCast API, providing custom functions and classes for more straightforward use of the API in python projects. Target Audience: Python users who are interested in programmatically interacting with online radios hosted on AzuraCast. Comparison: The idea of API Wrappers is not new. However, I noticed that the only existing wrapper for this API is written in PHP, which I am not experienced with. I created this project so I, and other python programmers by extension, could have an easier time working with the API."},
{"Title": "Introducing Notolog: Python Markdown Editor built with PySide6", "Author": "devotaku", "Content": "Excited to share my personal open-source project: Notolog - Python Markdown Editor (MIT License). The main motivation for developing another markdown editor was my passion for learning new things and enhancing my development skills in Python. I developed it in my spare time over a few months, despite having no prior experience in creating full-scale Python applications. What My Project Does ‚àó Multiplatform ‚àó Markdown async syntax highlighting created by me ‚àó Several pre-installed color themes ‚àó Supports English and 17 other languages right out of the box ‚àó Integration with OpenAI API for AI-assisted features"},
{"Title": "CLI to embed code snippets in your README, from actual (testable) code", "Author": "realazthat", "Content": "What My Project Does What My Project Does: snipinator is a CLI to embed (testable) snippets from your codebase into your README, using Jinja2 and functions provided by snipinator to assist with embedding code, shell output, etc. Please provide any feedback in the comments or GH issues. Target Audience Target Audience: Developers of {GitHub,other} projects that have a README. It works for me, it might work for you. Comparison Features:\nSupports anything Jinja2 supports."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Python text to speech library - Pyt2s", "Author": "asksumanth", "Content": "What my project does: It supports services like IBM Watson, Acapela and Stream labs' demo websites to convert your text to speech. Target audience: It's a toy project and would not recommend you to use in Production. Comparison: It's wayyyyy easy to use. Just pip install and use in your project. No extra setup required like other libraries. Also supports various languages and voices and accents. Check docs for more. Here is the link to repository. Please go do check it out and star it if it's helpful to you guys. Thank you. I made this library taking inspiration from this php tts library by chrisjp."},
{"Title": "diskcache: This key-value store library is faster than Redis and Memcached üòÆ (built by Grant Jenks)", "Author": "RevolutionaryPen4661", "Content": "PYPI (From the README, Released Last Year, Edited by Grammarly) Github pip install diskcache The cloud-based computing of 2024 puts a premium on memory. Gigabytes of space are left on disks as processes vie for memory. Memcached (and sometimes Redis) is used as a cache among these processes. Wouldn‚Äôt it be nice to leverage empty disk space for caching? Django is Python‚Äôs most popular web framework and has several caching backends. Unfortunately, the file-based cache in Django is essentially broken. The culling method is random and large caches repeatedly scan a cache directory which slows linearly with growth. Can you allow it to take sixty milliseconds to store a key in a cache with a thousand items?"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I've developed a library for send metrics to zabbix asynchronously", "Author": "Royal_Section4889", "Content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this. Tests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async What My Project Does Send zabbix sender messages using asyncio tasks. Target Audience SysAdmins who use Zabbix to monitor a large number of metrics. Comparison Instead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix"},
{"Title": "Who is using quart framework for microservices?", "Author": "Dry_Raspberry4514", "Content": "I am using quart framework (https://quart.palletsprojects.com) for a number of microservices in a SaaS application. However, I hardly hear anything about this framework on any social media platform which seems to be dominated by FastAPI. Also I'm unable to find which all projects/companies are using this framework. All this is leading to anxiety around the future of this project. Are there any well known projects / companies which are using this framework for microservices?"},
{"Title": "Suggestions for a self-hosted authentication as a service?", "Author": "FlyingRaijinEX", "Content": "I have a simple backend REST API service that is serving a few ML models. I have made it \"secured\" by implementing an API key in order call those endpoints. I was wondering, how common it is for people to use services that can be self-hosted as their authentication/authorization. If it is common and reliable, what are the best options to go for? I've read that building your own authentication/authorization service with email verification, password reset, and social auth can be a pain. Also, did some googling and found this General - Fief. Has anyone ever tried using this? If so, how was the experience?"},
{"Title": "Interactive plots in the terminal", "Author": "Spiffidimus", "Content": "I made a library to create interactive plots in the terminal (pip install itrm). It uses braille characters (by default) to display the data with sub-character resolution. There are several keybindings for moving a vertical cursor left and right, for zooming in or out on data, and for changing which curve to focus on. There are occasions (such as when working with a server) where MatPlotLib is not an option and the terminal is the only available tool. But, in my opinion, it is actually faster to use this tool (itrm) to zoom in on interesting parts of data and analyze patterns than using other tools like MatPlotLib. In fact, with large data sets (~1 million points), this tool actually renders faster than MatPlotLib. Please check it out and let know what you think."},
{"Title": "I made a Python text to speech library - Pyt2s", "Author": "asksumanth", "Content": "What my project does: It supports services like IBM Watson, Acapela and Stream labs' demo websites to convert your text to speech. Target audience: It's a toy project and would not recommend you to use in Production. Comparison: It's wayyyyy easy to use. Just pip install and use in your project. No extra setup required like other libraries. Also supports various languages and voices and accents. Check docs for more. Here is the link to repository. Please go do check it out and star it if it's helpful to you guys. Thank you. I made this library taking inspiration from this php tts library by chrisjp."},
{"Title": "map_plotter - abstracts complexity of creating intensity plots overlaid onto global map", "Author": "teamamentum", "Content": "What My Project Does\nOverlaying intensity plots onto a geographical map using cartopy/matplotlib can be complex. So we created this map_plotter package to abstract away that complexity for a common use case. Installation (opinionated use of conda to avoid cartopy dependency hell and install precompiled binaries) conda install cartopy\ngit clone git@github.com:amentumspace/map_plotter.git\ncd map_plotter\npip install ."},
{"Title": "Why is Plotly so cumbersome to tweak?", "Author": "olive_oil_for_you", "Content": "I made this visualisation with this code. I have three questions:\nIs Plotly supposed to be this cumbersome to tweak? Would other libraries require the same amount of code to add the details I did?\nCan my code be reduced in size? Maybe it's me who is complicating things with Plotly and there are easier ways to do what I am doing.\nAny R enthusiast who can tell me how much shorter this code would look like with ggplot2? I asked ChatGPT but the result was garbage."},
{"Title": "One pytest marker to track the performance of your tests", "Author": "toodarktoshine", "Content": "Hello Pythonistas!\nI just wrote a blog post about measuring performance inside pytest test cases. We dive into why it‚Äôs important to test for performance and how to integrate the measurements in the CI.\nHere is the link to the blog: https://codspeed.io/blog/one-pytest-marker-to-track-the-performance-of-your-tests"},
{"Title": "Interactive plots in the terminal", "Author": "Spiffidimus", "Content": "I made a library to create interactive plots in the terminal (pip install itrm). It uses braille characters (by default) to display the data with sub-character resolution. There are several keybindings for moving a vertical cursor left and right, for zooming in or out on data, and for changing which curve to focus on. There are occasions (such as when working with a server) where MatPlotLib is not an option and the terminal is the only available tool. But, in my opinion, it is actually faster to use this tool (itrm) to zoom in on interesting parts of data and analyze patterns than using other tools like MatPlotLib. In fact, with large data sets (~1 million points), this tool actually renders faster than MatPlotLib. Please check it out and let know what you think."},
{"Title": "Hi! I've published a Python client for IBKR REST and WebSocket APIs - IBind. Hope you like it üëã", "Author": "VoyZan", "Content": "Hi! I want to share a library I've built recently. IBind is a REST and WebSocket Python client for Interactive Brokers Client Portal Web API. It is directed at IBKR users. You can find IBind on GitHub: https://github.com/Voyz/ibind What My Project Does: It is a REST and WebSocket API for the Interactive Brokers' Web API. I'm particularly proud of a few things in this release:\nThe REST and WebSocket API clients are based on an abstract base class RestClient and WsClient accordingly. These could be implemented to use some other Web APIs in a relatively straightforward way. I have in fact used a version of that for a cryptocurrency WebSocket API, and it is nice to see it adapt to a different environment."},
{"Title": "How to create architecture diagrams from code in Jupyter Notebook", "Author": "writer_on_rails", "Content": "Hello world,I wrote an article about creating diagrams from code on Jupyter Notebook inside VS Code. It will give you a brief on the setup and also an overview of concepts. Within 5 minutes, you should be able to start making cool architecture diagrams. [TO MODERATOR: This link does not contain any paywalled or paid content. All the contents are available for free] Article link: https://ashgaikwad.substack.com/p/how-to-create-architecture-diagrams"},
{"Title": "I connected LLM to Python runtime and generated unit-tests (OpenSource)", "Author": "Financial_Muffin396", "Content": "Hi all, I initially started this adventure by trying to automate bug fixes with the help of LLMs. However, I received feedback saying the fixes aren't always correct, leading to the question: why bother reviewing PRs that might add more issues? (It's really hard for LLMs to say \"I don't know\"). So, I decided to focus on reliability perfecting unit tests. The source code is available at: https://github.com/CaptureFlow/captureflow-py What My Project Does: It incorporates a tracer client-side Python library and a backend that accumulates such traces and is capable of proposing code improvements and generating tests for your repository. It traverses the execution graph, extracts relevant parts, enriches them with implementation data from the GitHub API, and then generates tests with the help of GPT4."},
{"Title": "Python Streamlit Spotlight Tutorial: an Interactive Dashboard using UNHCR Refugee Data", "Author": "jgloewen", "Content": "Python Streamlit is a terrific tool for creating interactive data visualizations. It packages all your visualizations up into a neat little application - including charts and maps - and displays them in your default browser. No muss, no fuss. Recently, I found a new dataset (to me) on the UN High Commission for Refugees (UNHCR) website. It contains country-to-country movements for refugees both from origin country and country of asylum Using this dataset, here's a step-by-step on how to code a Python Streamlit application that has:"},
{"Title": "Hi! I've published a Python client for IBKR REST and WebSocket APIs - IBind. Hope you like it üëã", "Author": "VoyZan", "Content": "Hi! I want to share a library I've built recently. IBind is a REST and WebSocket Python client for Interactive Brokers Client Portal Web API. It is directed at IBKR users. You can find IBind on GitHub: https://github.com/Voyz/ibind What My Project Does: It is a REST and WebSocket API for the Interactive Brokers' Web API. I'm particularly proud of a few things in this release:\nThe REST and WebSocket API clients are based on an abstract base class RestClient and WsClient accordingly. These could be implemented to use some other Web APIs in a relatively straightforward way. I have in fact used a version of that for a cryptocurrency WebSocket API, and it is nice to see it adapt to a different environment."},
{"Title": "Starter Code for a LLM-based AI Assistant", "Author": "2bytesgoat", "Content": "Hey everyone üëã TL;DR\nSince everyone is talking about the Humane AI Pin and the Rabbit R1, I decided to make a short 5 minute tutorial on how people can setup and customize their own little AI assistant on their machine. I've uploaded a video tutorial here: https://www.youtube.com/watch?v=2fD_SAouoOs&ab_channel=2BytesGoat And the Github code is here: https://github.com/2BYTESGOAT/AI-ASSISTANT Longer version"},
{"Title": "Python Streamlit Spotlight Tutorial: an Interactive Dashboard using UNHCR Refugee Data", "Author": "jgloewen", "Content": "Python Streamlit is a terrific tool for creating interactive data visualizations. It packages all your visualizations up into a neat little application - including charts and maps - and displays them in your default browser. No muss, no fuss. Recently, I found a new dataset (to me) on the UN High Commission for Refugees (UNHCR) website. It contains country-to-country movements for refugees both from origin country and country of asylum Using this dataset, here's a step-by-step on how to code a Python Streamlit application that has:"},
{"Title": "IP subnet or IP calculator tool need feedback", "Author": "nicanorflavier", "Content": "Hey folks, I've been dabbling with a Python project recently that's all about making life easier for us I.T. people. It's a nifty little tool that calculates IP subnets and does IP calculations from the command or CLI. Here's the GitHub link and the code: https://github.com/nicanorflavier/ipnet I‚Äôm pretty stoked about it, but I know there‚Äôs always room for improvement. So, I thought, better to turn to than the wise minds of this python community? I‚Äôm all ears for any feedback, tips, tricks, or advice you guys might have. Thanks a ton in advance!"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "IP subnet or IP calculator tool need feedback", "Author": "nicanorflavier", "Content": "Hey folks, I've been dabbling with a Python project recently that's all about making life easier for us I.T. people. It's a nifty little tool that calculates IP subnets and does IP calculations from the command or CLI. Here's the GitHub link and the code: https://github.com/nicanorflavier/ipnet I‚Äôm pretty stoked about it, but I know there‚Äôs always room for improvement. So, I thought, better to turn to than the wise minds of this python community? I‚Äôm all ears for any feedback, tips, tricks, or advice you guys might have. Thanks a ton in advance!"},
{"Title": "How to auto-instrument Python servers w/ OpenTelemetry for performance & error monitoring", "Author": "__boba__", "Content": "Hi everyone! We've recently written up a guide for anyone running a Python server (ex. Flask, Django, FastAPI) to instrument their app to debug slow downs and errors using the CNCF OpenTelemetry project and their Python instrumentation package. It's really straightforward to get started with just a few lines of added code and commands to any Python project, so hopefully helps some people out as they're looking to add better instrumentation to their servers. Here's the tutorial: https://www.hyperdx.io/blog/opentelemetry-python-server-auto-instrumentation"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Pre-commit hook to keep coverage badge in README up to date", "Author": "60percentcocoa", "Content": "Wrote this as a tool to keep README coverage badges up to date without relying on 3rd party services or having to do anything extra, thought others might get some utility out of it: coverage-pre-commit. A .coverage file is expected at the root of the project, generated by running coverage run directly or using a plugin such as pytest-cov when running tests. Most convenient when used as a pre-push hook imo. Feel free to opine, be it positive or negative!"},
{"Title": "k8sAI - my open-source GPT CLI tool for Kubernetes!", "Author": "Wild_Plantain528", "Content": "What my project does: I wanted to share an open-source project I‚Äôve been working on called k8sAI. It‚Äôs a personal AI Kubernetes expert that can answer questions about your cluster, suggests commands, and even executes relevant kubectl commands to help diagnose and suggest fixes to your cluster, all in the CLI! Target Audience: As a relative newcomer to k8s, this tool has really streamlined my workflow. I can ask questions about my cluster, k8sAI will run kubectl commands to gather info, and then answer those question. It‚Äôs also found several issues in my cluster for me - all I‚Äôve had to do is point it in the right direction. I‚Äôve really enjoyed making and using this so I thought it could be useful for others. Added bonus is that you don‚Äôt need to copy and paste into ChatGPT anymore!"},
{"Title": "Pre-commit hook to keep coverage badge in README up to date", "Author": "60percentcocoa", "Content": "Wrote this as a tool to keep README coverage badges up to date without relying on 3rd party services or having to do anything extra, thought others might get some utility out of it: coverage-pre-commit. A .coverage file is expected at the root of the project, generated by running coverage run directly or using a plugin such as pytest-cov when running tests. Most convenient when used as a pre-push hook imo. Feel free to opine, be it positive or negative!"},
{"Title": "PyWolt: Wolt food delivery service API wrapper", "Author": "daivushe1", "Content": "I'm thrilled to share my first open-source project with you all: PyWolt! üéâ PyWolt is a Python library that makes it super easy to interact with the Wolt API.\nWhat My Project Does:\nDiscover Venues: Find nearby spots to grab a bite.\nExplore Menus: Dive into a venue's menu and pick your favorites.\nTarget Audience:"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyWolt: Wolt food delivery service API wrapper", "Author": "daivushe1", "Content": "I'm thrilled to share my first open-source project with you all: PyWolt! üéâ PyWolt is a Python library that makes it super easy to interact with the Wolt API.\nWhat My Project Does:\nDiscover Venues: Find nearby spots to grab a bite.\nExplore Menus: Dive into a venue's menu and pick your favorites.\nTarget Audience:"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PkgInspect - Inspect Local/External Python Packages", "Author": "yousefabuz", "Content": "GitHub\nWhat My Project Does\nPkgInspect is a comprehensive tool designed to inspect and compare Python packages and Python versions effortlessly. It equips users with a comprehensive set of tools and utility classes to retrieve essential information from installed Python packages, compare versions seamlessly, and extract various details about Python installations with ease."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a React-like web framework for Python üëã", "Author": "Rawing7", "Content": "I'm Paul, one of the creators of Rio. Over the years I've tried many different established python GUI frameworks, but none of them really satisfied me. So I teamed up with a few like minded developers and spent the last few months to create our own framework. Rio is the result of this effort. What My Project Does Rio is a brand new GUI framework that lets you create modern web apps in just a few lines of Python. Our goal is to simplify web and app development, so you can focus on the things you care about, instead of wasting countless hours on frustrating user interface details. We do this by following the core principles of Python that we all know and love. Python is supposed to be simple and compact - and so is Rio. There is no need to learn any additional languages such as HTML, CSS or JavaScript, because all of the UI, Logic, Components and even layouting is done entirely in Python. There‚Äôs not even a distinction between front-end and back-end. Rio handles all of the communication transparently for you."},
{"Title": "2,000 free sign ups available for the \"Automate the Boring Stuff with Python\" online course. (May 20", "Author": "AlSweigart", "Content": "If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): *The sign ups are all used up, but you can still watch all the videos for free. Read below! https://udemy.com/course/automate/?couponCode=MAY2024FREE https://udemy.com/course/automate/?couponCode=MAY2024FREE2 If you are reading this after the sign ups are used up, you can always find the first 15 of the course's 50 videos are free on YouTube if you want to preview them. YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have \"preview\" turned on. Scroll down to find and click \"Expand All Sections\" and then click the preview link. You won't have access to the forums and other materials, but you can watch the videos."},
{"Title": "I made a React-like web framework for Python üëã", "Author": "Rawing7", "Content": "I'm Paul, one of the creators of Rio. Over the years I've tried many different established python GUI frameworks, but none of them really satisfied me. So I teamed up with a few like minded developers and spent the last few months to create our own framework. Rio is the result of this effort. What My Project Does Rio is a brand new GUI framework that lets you create modern web apps in just a few lines of Python. Our goal is to simplify web and app development, so you can focus on the things you care about, instead of wasting countless hours on frustrating user interface details. We do this by following the core principles of Python that we all know and love. Python is supposed to be simple and compact - and so is Rio. There is no need to learn any additional languages such as HTML, CSS or JavaScript, because all of the UI, Logic, Components and even layouting is done entirely in Python. There‚Äôs not even a distinction between front-end and back-end. Rio handles all of the communication transparently for you."},
{"Title": "The new REPL in Python 3.13.0 beta 1", "Author": "treyhunner", "Content": "Python 3.13.0 beta 1 was released today. The feature I'm most excited about is the new Python REPL. Here's a summary of my favorite features in the new REPL along with animated gifs. The TLDR:\nSupport for block-leveling history and block-level editing\nPasting code (even with blank lines within it) works as expected now\nTyping exit will exit (no more Use exit() or Ctrl-D (i.e. EOF) to exit message)"},
{"Title": "Best book for GUI development in Python", "Author": "Bekhyam", "Content": "Can you guys suggest some very good book for GUI development in Python? I'm currently working on a visualizer that needs many features to plot data on a 3D and 2D space. Using PyQt for this as it has threading support."},
{"Title": "The new REPL in Python 3.13.0 beta 1", "Author": "treyhunner", "Content": "Python 3.13.0 beta 1 was released today. The feature I'm most excited about is the new Python REPL. Here's a summary of my favorite features in the new REPL along with animated gifs. The TLDR:\nSupport for block-leveling history and block-level editing\nPasting code (even with blank lines within it) works as expected now\nTyping exit will exit (no more Use exit() or Ctrl-D (i.e. EOF) to exit message)"},
{"Title": "Calculating Virtual Cycling Power With Python", "Author": "TokenChingy", "Content": "I was doing some light reading and stumbled across Steve Gribbles Power vs Speed Calculator and thought I'd give it a go at rebuilding it based on his Physics model using Python. Then I wrote an article about. Thought I'd share it with you all: Calculating Virtual Cycling Power (jasonlei.com)"},
{"Title": "python irl in london england", "Author": "ProsodySpeaks", "Content": "are there any groups, meets, events etc i can get involved with locally in london uk? i've got moderate python chops as well as a wide range of other skills and tools, notably construction and event organisation/production/management, but also 3d design and print, some electronics and others. i work flexible hours and honestly am looking to develop a network and experiences to land my first job that at least involves some coding - i'm happy to commit significant time and resource to interesting projects to get eventually my foot or at least my nose in a door somewhere. (i dont mean i would stop contributing to the project once i land a job!)"},
{"Title": "ConfigClass - simple dataclass inspired configuration", "Author": "TheTerrasque", "Content": "What My Project Does I'm making a simple configclass for handling configuration in smaller projects and scripts. Goal is to be as simple to start with as creating a dataclass. The module itself works off dataclass and when you use it you just define a dataclass as normal, but decorate it with @configclass() instead. Example: from configclass import configclass\n\n@configclass()\nclass Settings:\n    foo: bool = False\n    url: str = \"\"\n    footoo: bool = True\n    my_model: str = \"model.pt\"\n\nsetting = Settings.load()\n\nprint(setting.foo, setting.footoo, setting.my_model)"},
{"Title": "Calculating Virtual Cycling Power With Python", "Author": "TokenChingy", "Content": "I was doing some light reading and stumbled across Steve Gribbles Power vs Speed Calculator and thought I'd give it a go at rebuilding it based on his Physics model using Python. Then I wrote an article about. Thought I'd share it with you all: Calculating Virtual Cycling Power (jasonlei.com)"},
{"Title": "Analyzing Python Compression Libraries: zlib, LZ4, Brotli, and Zstandard", "Author": "dhilip-siva", "Content": "Source Code: https://github.com/dhilipsiva/py-compress-compare\nAnalyzing Python Compression Libraries: zlib, LZ4, Brotli, and Zstandard\nWhen dealing with large volumes of data, compression can be a critical factor in enhancing performance, reducing storage costs, and speeding up network transfers. In this blog post, we will dive into a comparison of four popular Python compression libraries‚Äîzlib, LZ4, Brotli, and Zstandard‚Äîusing a real-world dataset to evaluate their performance in terms of compression ratio and time efficiency."},
{"Title": "tach - a Python tool to enforce modular design", "Author": "the1024", "Content": "https://github.com/Never-Over/tach What My Project Does tach is a lightweight Python tool that enforces boundaries and dependencies in your Python project. Inspired by nx, tach helps you maintain a decoupled and modular Python codebase. An earlier version of this tool was called modguard, which we shared here. By default, Python allows you to import and use anything, anywhere. Over time, this results in modules that were intended to be separate getting tightly coupled together, and domain boundaries breaking down. We experienced this first-hand at a unicorn startup, where the eng team paused development for over a year in an attempt to split up packages into independent services. This attempt ultimately failed."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "InterProcessPyObjects: Fast IPC for Sharing and Modifying Objects Across Processes", "Author": "FI_Mihej", "Content": "InterProcessPyObjects Python package\ngithub.com/FI-Mihej/InterProcessPyObjects If you like the project, consider giving it a star on GitHub to show your support and help further development. :) pypi.org/project/InterProcessPyObjects\nWhat My Project Does\nInterProcessPyObjects is a part of the Cengal library. If you have any questions or would like to participate in discussions, feel free to join the . Your support and involvement are greatly appreciated as Cengal evolves."},
{"Title": "InterProcessPyObjects: Fast IPC for Sharing and Modifying Objects Across Processes", "Author": "FI_Mihej", "Content": "InterProcessPyObjects Python package\ngithub.com/FI-Mihej/InterProcessPyObjects If you like the project, consider giving it a star on GitHub to show your support and help further development. :) pypi.org/project/InterProcessPyObjects\nWhat My Project Does\nInterProcessPyObjects is a part of the Cengal library. If you have any questions or would like to participate in discussions, feel free to join the . Your support and involvement are greatly appreciated as Cengal evolves."},
{"Title": "I wrote a book on Python Regular Expressions - and made it free!", "Author": "code_x_7777", "Content": "Hi! I've just sorted through some of my books on Leanpub and decided to make the book on Python Regular Expressions free to download for a couple of days. Why? Just for fun and learning and to get some valuable feedback.\nFree ebook link: https://leanpub.com/regexpython/\nRegex Video Tutorials: https://blog.finxter.com/python-regex/\nThis book helps you learn regular expressions chapter by chapter. Each chapter first teaches the concepts and then asks you to solve Python puzzles (\"Guess the code!\") to master the concepts. The main idea is to keep it lightweight and fun."},
{"Title": "Just an Appreciation Post for the Python Standard Library", "Author": "SpeakerOk1974", "Content": "Approaching a year into my journey of learning Python (I come from a C background) I finally understand the beauty and ubiquity of the langauge. Initially, I was hesitant to learn a dynamically typed and interpreted language when job requirements required me to learn it (I help support a team of Power Systems Engineers, and our professional software uses python for scripting). My first attempts were extremely unpythonic and it felt like I was fighting the language (index based looping, declaring variables before use, C style procedural code on top of Pandas antipatterns) and the lack of brackets I found appalling. Then I had my first code review with a helpful Senior engineer. We refactored my code together and something beautiful came together. He then told me to read the Zen of Python. It was love at first \"import this\". I was hooked. Every waking moment for weeks I was learning all I could muster about python."},
{"Title": "AzuracastPy: An Unofficial Python Wrapper for the Azuracast API.", "Author": "ARandomBoiIsMe", "Content": "Source code What My Project Does: It acts as a wrapper for the AzuraCast API, providing custom functions and classes for more straightforward use of the API in python projects. Target Audience: Python users who are interested in programmatically interacting with online radios hosted on AzuraCast. Comparison: The idea of API Wrappers is not new. However, I noticed that the only existing wrapper for this API is written in PHP, which I am not experienced with. I created this project so I, and other python programmers by extension, could have an easier time working with the API."},
{"Title": "Apple Health data exploration with Atlas, Clickhouse, Vega-Altair, Quarto", "Author": "__tosh", "Content": "What My Project Does A few days ago I wrote a simple python script (\"Atlas\") that turns the Apple Health export.xml file (which is about 1 GB in my case, with about 10 years of data) into a very simple parquet file (a bit like a compressed CSV) that is also way smaller (40 MB). The parquet file has 5 columns:\ntype (e.g. \"CyclingDistance\")\nvalue (e.g. \"12.100\")"},
{"Title": "AzuracastPy: An Unofficial Python Wrapper for the Azuracast API.", "Author": "ARandomBoiIsMe", "Content": "Source code What My Project Does: It acts as a wrapper for the AzuraCast API, providing custom functions and classes for more straightforward use of the API in python projects. Target Audience: Python users who are interested in programmatically interacting with online radios hosted on AzuraCast. Comparison: The idea of API Wrappers is not new. However, I noticed that the only existing wrapper for this API is written in PHP, which I am not experienced with. I created this project so I, and other python programmers by extension, could have an easier time working with the API."},
{"Title": "How Malicious Python Code Gains Execution", "Author": "louis11", "Content": "The primary vector for malicious code running in software developer environments (e.g., local system, CI/CD runners, production servers, etc.) is software dependencies. This is third-party code which often means open-source software, also known as running code from strangers on the internet. The prized goal for attackers is arbitrary code execution. It‚Äôs the stuff high CVE scores are made of and often the topic of how vulnerabilities can turn into exploits. It‚Äôs the foothold needed to run cryptominers, steal secrets, or encrypt data for ransom. It‚Äôs no wonder why threat actors want it, but how do they get it? Sutton‚Äôs Law makes it obvious why they go after open-source software: because executing arbitrary code is easy there."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ext-message: Send files over Discord direct messages", "Author": "FeLoNy111", "Content": "Hey all! I recently made a library for sending text files over Discord DMs https://pypi.org/project/ext-message/ https://github.com/jwjeffr/ext-message/ What my project does This code is a command-line interface for sending text files to Discord DMs from a bot. Target audience My personal use-case is for my research, where I run long simulations (~72 hours) on a computing cluster. These simulations generate log files, so I can send myself the log file after the simulation, letting me: - Know that the simulation is done - Check that the simulation ran as intended without having to SSH into the cluster. As of now, those running similarly heavy code looking to be notified when it finishes is my target audience, but I would love to hear other creative use cases to expand that audience!"},
{"Title": "I made a python bot that plays minesweeper", "Author": "_dwightshrute", "Content": "Hello, I made this Minesweeper bot that I wanted to share with you all. What My Project Does - The bot takes a screenshot of the board and runs a classification algorithm to extract the contents of the board. It then analyzes the board, finds as many mines as it can, and sends clicks. If it cannot find any mines then it guesses the most probable position of a mine. Target Audience - It's a toy project for anyone interested in algorithms or problem-solving. Comparison - This is just my attempt at making a minesweeper bot. I'm sure there are many bots out there that are much more efficient than this."},
{"Title": "diskcache: This key-value store library is faster than Redis and Memcached üòÆ (built by Grant Jenks)", "Author": "RevolutionaryPen4661", "Content": "PYPI (From the README, Released Last Year, Edited by Grammarly) Github pip install diskcache The cloud-based computing of 2024 puts a premium on memory. Gigabytes of space are left on disks as processes vie for memory. Memcached (and sometimes Redis) is used as a cache among these processes. Wouldn‚Äôt it be nice to leverage empty disk space for caching? Django is Python‚Äôs most popular web framework and has several caching backends. Unfortunately, the file-based cache in Django is essentially broken. The culling method is random and large caches repeatedly scan a cache directory which slows linearly with growth. Can you allow it to take sixty milliseconds to store a key in a cache with a thousand items?"},
{"Title": "diskcache: This key-value store library is faster than Redis and Memcached üòÆ (built by Grant Jenks)", "Author": "RevolutionaryPen4661", "Content": "PYPI (From the README, Released Last Year, Edited by Grammarly) Github pip install diskcache The cloud-based computing of 2024 puts a premium on memory. Gigabytes of space are left on disks as processes vie for memory. Memcached (and sometimes Redis) is used as a cache among these processes. Wouldn‚Äôt it be nice to leverage empty disk space for caching? Django is Python‚Äôs most popular web framework and has several caching backends. Unfortunately, the file-based cache in Django is essentially broken. The culling method is random and large caches repeatedly scan a cache directory which slows linearly with growth. Can you allow it to take sixty milliseconds to store a key in a cache with a thousand items?"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Seeking Your Input: Let's Co-Create FreeCodeCamp for python together", "Author": "globalwarming_isreal", "Content": "Hello all, This is probably my first post here. I usuallly lurk around here and Django subreddits. I've been brewing up an idea and I need your input before I take the plunge! Picture this: a website like FreeCodeCamp but for python and related technologies, a learning oasis where anyone can kickstart their journey from Python newbie to job-ready pro, and it's all free! But here's the thing, I want this to be our platform, crafted with your needs and dreams in mind. So, before I start, I need to know: would this be something that gets you excited? Imagine quizzes helping you find your starting point, interactive challenges that keep you in the zone, and a supportive community to cheer you on every step of the way. Plus, videos, written tutorials, and a progress tracker to keep you motivated!"},
{"Title": "Production grade AI Web apps, just using python ?", "Author": "prime_danger", "Content": "Hey guys, I have worked on building multiple ai/ml usecases and their specific backends. But now I want build interfaces for easy and quick integration. I saw a blog which used FastUI which looks quick decent but when I tried it just showed me a Json of elements on the page. Are there any other libraries I should use? ü§î"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Medical imaging Python jobs", "Author": "Durysik", "Content": "Hi folks! I am currently looking for a US (west coast best) based job where I could grow as a python programmer, specifically analysing medical images. Looking online I found some labs where they work with images, but I thought I'd ask (not sure if it's the right sub tho) cause I'm sure this way I'll hear about many places that deal with Medical Imaging. Thanks :)"},
{"Title": "Who is using quart framework for microservices?", "Author": "Dry_Raspberry4514", "Content": "I am using quart framework (https://quart.palletsprojects.com) for a number of microservices in a SaaS application. However, I hardly hear anything about this framework on any social media platform which seems to be dominated by FastAPI. Also I'm unable to find which all projects/companies are using this framework. All this is leading to anxiety around the future of this project. Are there any well known projects / companies which are using this framework for microservices?"},
{"Title": "Who is using quart framework for microservices?", "Author": "Dry_Raspberry4514", "Content": "I am using quart framework (https://quart.palletsprojects.com) for a number of microservices in a SaaS application. However, I hardly hear anything about this framework on any social media platform which seems to be dominated by FastAPI. Also I'm unable to find which all projects/companies are using this framework. All this is leading to anxiety around the future of this project. Are there any well known projects / companies which are using this framework for microservices?"},
{"Title": "Is PyGame still alive?", "Author": "pyeri", "Content": "So it was a long time ago in the good old Python 2.x days (circa 2010 probably) that I had learned PyGame with some tutorials at my former work place. But nowadays since I mostly freelance with business apps, I never felt the need for it. But since such a game development project is on the horizon after all these years, I was wondering if PyGame can still be up for the task with Python 3.x? Or is there a better Python library available these days? I don't need any advanced gaming features of modern day VFX or anything, all I need is some basic Mario/Luigi style graphics, that's all!"},
{"Title": "Tutorial on Creating Useful Data Visuals with Python seaborn and matplotlib libraries", "Author": "jgloewen", "Content": "With the current global deluge of data and information, there has never been a more important to visualize your data in a clear and simple manner. Python is a terrific tool to help us do this. The key to this lies in choosing the the right data visualization techniques to tell the most interesting and relevant story. Three useful visuals are:\nsmall multiples\nheat maps"},
{"Title": "tab-pal: a TUI for adding and editing custom colour palettes in Tableau", "Author": "Ok-Frosting7364", "Content": "Source code: https://github.com/ben-n93/tab-pal\nWhat my Project Does\nMakes it quicker, easier and prettier to create custom colour palettes in Tableau. Rather than having to find your Preferences.tps file every time and edit the XML you can just launch tab-pal from the command-line and make any changes you want (adding/deleting new palettes, adding/removing colours. You also get a preview of the colours you've added. Target Audience\nData/business analysts and data scientists and who work with Tableau.\n\nThere are some websites that let you dynamically create the Preferences.tps XML file however this still requires you to locate the file and copy and paste over it with any changes you make"},
{"Title": "Why is Plotly so cumbersome to tweak?", "Author": "olive_oil_for_you", "Content": "I made this visualisation with this code. I have three questions:\nIs Plotly supposed to be this cumbersome to tweak? Would other libraries require the same amount of code to add the details I did?\nCan my code be reduced in size? Maybe it's me who is complicating things with Plotly and there are easier ways to do what I am doing.\nAny R enthusiast who can tell me how much shorter this code would look like with ggplot2? I asked ChatGPT but the result was garbage."},
{"Title": "pytest-ndb - debugging pytest tests in a notebook", "Author": "rhshadrach", "Content": "What My Project Does: Allows users to run a pytest test from a notebook or other REPL and capture local variables for inspection / debugging. While I think users should very often prefer debugging tests with a debugger, in certain situations where one deals with a nontrivial amount of data or many complex objects, being able to inspect and manipulate objects in a notebook can be helpful. Target Audience: Primarily data scientists, but more generally anyone who tests with large/complex objects that can be difficult to understand in a debugger. Comparison: I'm not aware of any alternatives, other than copy-and-pasting your pytest tests in a notebook."},
{"Title": "Why is Plotly so cumbersome to tweak?", "Author": "olive_oil_for_you", "Content": "I made this visualisation with this code. I have three questions:\nIs Plotly supposed to be this cumbersome to tweak? Would other libraries require the same amount of code to add the details I did?\nCan my code be reduced in size? Maybe it's me who is complicating things with Plotly and there are easier ways to do what I am doing.\nAny R enthusiast who can tell me how much shorter this code would look like with ggplot2? I asked ChatGPT but the result was garbage."},
{"Title": "Track the size of your PyInstaller packages in CI", "Author": "bencherdev", "Content": "If you have ever wanted to track the size of your PyInstaller packages in CI, Bencher now supports tracking your package size: https://bencher.dev/docs/how-to/track-file-size/"},
{"Title": "Rethinking String Encoding: a 37.5% space efficient string encoding than UTF-8 in Apache Fury", "Author": "Shawn-Yang25", "Content": "In rpc/serialization systems, we often need to send namespace/path/filename/fieldName/packageName/moduleName/className/enumValue string between processes.\nThose strings are mostly ascii strings. In order to transfer between processes, we encode such strings using utf-8 encodings. Such encoding will take one byte for every char, which is not space efficient actually.\nIf we take a deeper look, we will found that most chars are lowercase chars, ., $ and _, which can be expressed in a much smaller range 0~32. But one byte can represent range 0~255, the significant bits are wasted, and this cost is not ignorable. In a dynamic serialization framework, such meta will take considerable cost compared to actual data.\nSo we proposed a new string encoding which we called meta string encoding in Fury. It will encode most chars using 5 bits instead of 8 bits in utf-8 encoding, which can bring 37.5% space cost savings compared to utf-8 encoding.\nFor string can't be represented by 5 bits, we also proposed encoding using 6 bits which can bring 25% space cost savings"},
{"Title": "I created a Python script that makes it easier to track how your baby's sleep is improving", "Author": "BX1959", "Content": "My wife and I use the Huckleberry app to track our baby's sleep periods. Although the free version of the app allows you to view a number of sleep-related metrics, I also wanted to see whether his longest nightly sleep stretches were getting longer over time. Therefore, I created a Python project to help me answer this and other questions I had about my baby's sleep.\nWhat My Project Does\nThis project reads in data from a Huckleberry .csv export (or a separate custom .csv file); analyzes its sleep information; and then produces ."},
{"Title": "A Free GPT-Powered Financial Analysis Tool", "Author": "Starks-Technology", "Content": "Link to GitHub Page\nWhat My Project Does\nI created a simple financial analysis tool using the SimFin API and the GPT API. This tool summarizes financial information and makes it digestable for people who don't know a lot about finance.\nTarget Audience\nThis is more of a toy project for those interested in AI and Finance. It's meant for people without a ton of GPT experience to see a tangible use-case of generative AI within the field."},
{"Title": "I connected LLM to Python runtime and generated unit-tests (OpenSource)", "Author": "Financial_Muffin396", "Content": "Hi all, I initially started this adventure by trying to automate bug fixes with the help of LLMs. However, I received feedback saying the fixes aren't always correct, leading to the question: why bother reviewing PRs that might add more issues? (It's really hard for LLMs to say \"I don't know\"). So, I decided to focus on reliability perfecting unit tests. The source code is available at: https://github.com/CaptureFlow/captureflow-py What My Project Does: It incorporates a tracer client-side Python library and a backend that accumulates such traces and is capable of proposing code improvements and generating tests for your repository. It traverses the execution graph, extracts relevant parts, enriches them with implementation data from the GitHub API, and then generates tests with the help of GPT4."},
{"Title": "I connected LLM to Python runtime and generated unit-tests (OpenSource)", "Author": "Financial_Muffin396", "Content": "Hi all, I initially started this adventure by trying to automate bug fixes with the help of LLMs. However, I received feedback saying the fixes aren't always correct, leading to the question: why bother reviewing PRs that might add more issues? (It's really hard for LLMs to say \"I don't know\"). So, I decided to focus on reliability perfecting unit tests. The source code is available at: https://github.com/CaptureFlow/captureflow-py What My Project Does: It incorporates a tracer client-side Python library and a backend that accumulates such traces and is capable of proposing code improvements and generating tests for your repository. It traverses the execution graph, extracts relevant parts, enriches them with implementation data from the GitHub API, and then generates tests with the help of GPT4."},
{"Title": "Google laysoff Python maintainer team", "Author": "jmreagle", "Content": "https://www.hindustantimes.com/business/google-layoffs-sundar-pichai-led-company-fires-entire-python-team-for-cheaper-labour-101714379453603.html Are there any ramifications for the Python community outside of Google?"},
{"Title": "Python script to convert Spotify Artists to Playlists", "Author": "RJW-20", "Content": "I've made my first bit of useful software and I wanted to share it here. I'd love some feedback (and it would be amazing to hear if someone has used it!) What My Project Does: Using the third party requests package, the script interacts with the Spotify web API to request all albums from the given Artist, then all the tracks from all of those albums. It then goes through the list to remove any duplicates and also tries to remove any unwanted versions (only done by examining the name of the track, since Spotify does not attribute a version type to its tracks). Once that's done a playlist is then created on your Spotify account with the name of the Artist and all the tracks are posted there in chronological (essentially per album) order."},
{"Title": "I made a Tkinter \"DevTools\" to inspect and modify widgets in your running app in real-time", "Author": "254hypebeast", "Content": "source: https://github.com/ObaraEmmanuel/Formation pypi: https://pypi.org/project/formation-studio/ What My Project Does Allows you to inspect widgets in your running Tk app in real-time. You can view the widget hierarchy, modify widget attributes, adjust widget layout and run arbitrary code to interact with your widgets through the embedded Python REPL console. It works just like DevTools in a browser. This debugger is part of the Formation studio project which is a drag-n-drop graphical UI builder for Tkinter. Target Audience Any Tk developer seeking to have an easier time debugging their UI or seeking to experiment with the Tk framework with minimal effort."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ChatGPT can talk with all my Python notebooks", "Author": "pp314159", "Content": "I'm working on an open-source framework for converting Python notebooks into web applications, it is called Mercury. Recently, I have added an option to execute notebooks with REST API. You can pass paramters in POST request body to the notebook, execute all cells and return JSON as response. I'm also running a SaaS service, Mercury Cloud where you can deploy notebooks with one-click with unique website domain. What My Project Does It makes Python notebooks extermely easy to integrate with custom ChatGPT, so GPT can execute Python notebooks and get response. It is 3-steps process:"},
{"Title": "List of Sites that Packages Need to Connect to?", "Author": "BullCityPicker", "Content": "I'm doing most of my work behind a government firewall, and I'm having trouble connecting to certain sites. I can do the usual \"pip\" installs just fine, but I'm talking about packages that need to download data to do their job. An example is the NLTK (Natural Language Toolkit) package, which downloads dictionaries, lookup tables for sentiment analysis, and so on. I know what sites to open up for that particular problem (pastebin.com and nltk.org), but I wonder if anybody's made a list of such sites for different packages. I can ask for the two sites I know about to be opened up, but I'd like to have a more comprehensive list so I don't have to go through the red tape multiple times."},
{"Title": "Seeking Your Input: Let's Co-Create FreeCodeCamp for python together", "Author": "globalwarming_isreal", "Content": "Hello all, This is probably my first post here. I usuallly lurk around here and Django subreddits. I've been brewing up an idea and I need your input before I take the plunge! Picture this: a website like FreeCodeCamp but for python and related technologies, a learning oasis where anyone can kickstart their journey from Python newbie to job-ready pro, and it's all free! But here's the thing, I want this to be our platform, crafted with your needs and dreams in mind. So, before I start, I need to know: would this be something that gets you excited? Imagine quizzes helping you find your starting point, interactive challenges that keep you in the zone, and a supportive community to cheer you on every step of the way. Plus, videos, written tutorials, and a progress tracker to keep you motivated!"},
{"Title": "I made a Python CLI Tools for Competitive Programming", "Author": "Old-Manufacturer6209", "Content": "Source Code: https://github.com/JeanExtreme002/FastSnake PyPI: https://pypi.org/project/FastSnake/ What My Project Does FastSnake is a command-line tool that allows you to easily create, expand, run, and test Python solutions for competitive programming problems. üêçüèÅ This project provides useful CLI tools for competitive programming, such as test case generators, algorithms and data structures, tools for platforms Codeforces and AtCoder, and other features that assist you during the development and testing of solutions, besides building a nice directory structure to develop your solutions. ü§ì"},
{"Title": "Framework to use for backend", "Author": "Clickyz", "Content": "Hello guys I recently decided to move from nodejs(expressjs) to python for general purposes but mostly for backend. I have couple of questions.\nWill i regret my migration to python? :)\nWhich framework you suggest for backend solo dev?\nAnd what tips are you suggesting me in general to get used to python."},
{"Title": "Seeking Your Input: Let's Co-Create FreeCodeCamp for python together", "Author": "globalwarming_isreal", "Content": "Hello all, This is probably my first post here. I usuallly lurk around here and Django subreddits. I've been brewing up an idea and I need your input before I take the plunge! Picture this: a website like FreeCodeCamp but for python and related technologies, a learning oasis where anyone can kickstart their journey from Python newbie to job-ready pro, and it's all free! But here's the thing, I want this to be our platform, crafted with your needs and dreams in mind. So, before I start, I need to know: would this be something that gets you excited? Imagine quizzes helping you find your starting point, interactive challenges that keep you in the zone, and a supportive community to cheer you on every step of the way. Plus, videos, written tutorials, and a progress tracker to keep you motivated!"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tutorial on Creating Useful Data Visuals with Python seaborn and matplotlib libraries", "Author": "jgloewen", "Content": "With the current global deluge of data and information, there has never been a more important to visualize your data in a clear and simple manner. Python is a terrific tool to help us do this. The key to this lies in choosing the the right data visualization techniques to tell the most interesting and relevant story. Three useful visuals are:\nsmall multiples\nheat maps"},
{"Title": "New Python-only abstractions for extracting data from apis", "Author": "Thinker_Assignment", "Content": "Hey there, you are probably familiar with REST APIs.\nWe at dlt library added a new way to get data from apis (and dlt can already load it with best practice to db or parquet). We already did some internal hackathons but we would appreciate your feedback so we can improve it further\n- Our new REST API Source is a short, declarative configuration driven way of creating sources.\n- Our new REST API Client is a collection of Python helpers used by the above source, which you can also use as a standalone, config-free, imperative high-level abstraction for building pipelines.\nYou can read more about the source here or go to our docs for the REST APIClient info\n\nPS: see you at Pycon Pittsburgh!"},
{"Title": "Meteor Science using Python - Creating a \"weird\" coordinate system", "Author": "MrAstroThomas", "Content": "Hey everyone, I am creating \"Space Science with Python\" tutorials on YouTube with free and open accessible Python code on GitHub. It is not fancy or a \"super high animation quality YouTube production\". I am just an astrophysicists (what a difficult word to write), working in industry who continues with science as a hobby. Ha! And I have some crazy niche knowledge that is not covered by Gemini or chatGPT (yet). Anyway, I am creating now a tutorial on meteor science and wanted to show you how to create a coordinate system that co-rotates with the Earth while it is revolving around the Sun."},
{"Title": "Tutorial on Creating Useful Data Visuals with Python seaborn and matplotlib libraries", "Author": "jgloewen", "Content": "With the current global deluge of data and information, there has never been a more important to visualize your data in a clear and simple manner. Python is a terrific tool to help us do this. The key to this lies in choosing the the right data visualization techniques to tell the most interesting and relevant story. Three useful visuals are:\nsmall multiples\nheat maps"},
{"Title": "Pip 24.1 beta released, and it's a big one", "Author": "zurtex", "Content": "I'd like to call attention to pip 24.1 beta asit is unusual for the pip team to release betas:\nhttps://pip.pypa.io/en/latest/news/#b1-2024-05-06\nhttps://pypi.org/project/pip/24.1b1/\nYou can install with: python -m pip install pip==24.1b1 In particular they have upgraded their vendored version of packaging from 21.3 to 24.0, this was a and , included significant performance improvements, and will allow pip to support . However, it also means legacy versions and specifiers are with pip."},
{"Title": "Rethinking String Encoding: a 37.5% space efficient string encoding than UTF-8 in Apache Fury", "Author": "Shawn-Yang25", "Content": "In rpc/serialization systems, we often need to send namespace/path/filename/fieldName/packageName/moduleName/className/enumValue string between processes.\nThose strings are mostly ascii strings. In order to transfer between processes, we encode such strings using utf-8 encodings. Such encoding will take one byte for every char, which is not space efficient actually.\nIf we take a deeper look, we will found that most chars are lowercase chars, ., $ and _, which can be expressed in a much smaller range 0~32. But one byte can represent range 0~255, the significant bits are wasted, and this cost is not ignorable. In a dynamic serialization framework, such meta will take considerable cost compared to actual data.\nSo we proposed a new string encoding which we called meta string encoding in Fury. It will encode most chars using 5 bits instead of 8 bits in utf-8 encoding, which can bring 37.5% space cost savings compared to utf-8 encoding.\nFor string can't be represented by 5 bits, we also proposed encoding using 6 bits which can bring 25% space cost savings"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Rethinking String Encoding: a 37.5% space efficient string encoding than UTF-8 in Apache Fury", "Author": "Shawn-Yang25", "Content": "In rpc/serialization systems, we often need to send namespace/path/filename/fieldName/packageName/moduleName/className/enumValue string between processes.\nThose strings are mostly ascii strings. In order to transfer between processes, we encode such strings using utf-8 encodings. Such encoding will take one byte for every char, which is not space efficient actually.\nIf we take a deeper look, we will found that most chars are lowercase chars, ., $ and _, which can be expressed in a much smaller range 0~32. But one byte can represent range 0~255, the significant bits are wasted, and this cost is not ignorable. In a dynamic serialization framework, such meta will take considerable cost compared to actual data.\nSo we proposed a new string encoding which we called meta string encoding in Fury. It will encode most chars using 5 bits instead of 8 bits in utf-8 encoding, which can bring 37.5% space cost savings compared to utf-8 encoding.\nFor string can't be represented by 5 bits, we also proposed encoding using 6 bits which can bring 25% space cost savings"},
{"Title": "SecretScraper: highly configurable web crawler/scraper for extracting sensitive data from websites", "Author": "PadishahIII", "Content": "Hi, I'm a cybersecurity enthusiastic. And I've made a web crawler/scraper tool to extract links and sensitive information against target websites. You can find it here: https://github.com/PadishahIII/SecretScraper. What My Project Does SecretScraper is a highly configurable web scraper tool that crawls links, extracts subdomains from target websites and finds sensitive data using regular expressions. The features included in the SecretScraper are:\nWeb crawler: extract links using both DOM hierarchy and regex"},
{"Title": "How Python Asyncio Works: Recreating it from Scratch", "Author": "jpjacobpadilla", "Content": "Do you understand how asyncio works behind the scenes? Read this article and see how you can use Python generators to create your own version of asyncio, and then use the __await__ dunder method to use the async/await keywords to come full circle! https://jacobpadilla.com/articles/recreating-asyncio"},
{"Title": "Python script to convert Spotify Artists to Playlists", "Author": "RJW-20", "Content": "I've made my first bit of useful software and I wanted to share it here. I'd love some feedback (and it would be amazing to hear if someone has used it!) What My Project Does: Using the third party requests package, the script interacts with the Spotify web API to request all albums from the given Artist, then all the tracks from all of those albums. It then goes through the list to remove any duplicates and also tries to remove any unwanted versions (only done by examining the name of the track, since Spotify does not attribute a version type to its tracks). Once that's done a playlist is then created on your Spotify account with the name of the Artist and all the tracks are posted there in chronological (essentially per album) order."},
{"Title": "Interactive Data Visualization with Python: A Showcase of Plotly Dash", "Author": "AbhishekSuryavanshee", "Content": "What My Project Does:\nI'm excited to introduce my latest project built with Python ‚Äì an interactive data visualization application using Plotly Dash. This project aims to empower users to explore and analyze datasets dynamically through interactive visualizations. By leveraging Plotly Dash's capabilities, users can interact with data in real-time, customize visualizations on the fly, and gain deeper insights with just a few clicks. Target Audience:\nThis project caters to a wide range of users, from data enthusiasts and analysts to professionals seeking to communicate insights effectively. Whether you're a data scientist exploring patterns in large datasets or a business analyst presenting findings to stakeholders, this tool is designed to streamline your workflow and enhance your data storytelling capabilities. It's suitable for both production-grade applications and educational purposes, offering a versatile platform for data visualization tasks of varying complexity."},
{"Title": "Python script to convert Spotify Artists to Playlists", "Author": "RJW-20", "Content": "I've made my first bit of useful software and I wanted to share it here. I'd love some feedback (and it would be amazing to hear if someone has used it!) What My Project Does: Using the third party requests package, the script interacts with the Spotify web API to request all albums from the given Artist, then all the tracks from all of those albums. It then goes through the list to remove any duplicates and also tries to remove any unwanted versions (only done by examining the name of the track, since Spotify does not attribute a version type to its tracks). Once that's done a playlist is then created on your Spotify account with the name of the Artist and all the tracks are posted there in chronological (essentially per album) order."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Build tool support for PySide / PyQt", "Author": "jmacey", "Content": "Just interested in how people approach this, typically I just use VSCode or QtCreator to build simple projects. However I now want to automate some of the build process such as running uic, and rcc. I've tried to use CMake but can't seem to get it to work without a lot of custom scripting (for example the AUTOUIC etc functions need c++ projects), can't see any info on running uic in QtCreator (which would be ideal but python support is really just an after thought). I could write some Makefiles but this is a little ad-hoc and also confuses the IDE's (and at the end of the day I want a simple process for my students to use and I already teach cmake for C++ dev)."},
{"Title": "List of Sites that Packages Need to Connect to?", "Author": "BullCityPicker", "Content": "I'm doing most of my work behind a government firewall, and I'm having trouble connecting to certain sites. I can do the usual \"pip\" installs just fine, but I'm talking about packages that need to download data to do their job. An example is the NLTK (Natural Language Toolkit) package, which downloads dictionaries, lookup tables for sentiment analysis, and so on. I know what sites to open up for that particular problem (pastebin.com and nltk.org), but I wonder if anybody's made a list of such sites for different packages. I can ask for the two sites I know about to be opened up, but I'd like to have a more comprehensive list so I don't have to go through the red tape multiple times."},
{"Title": "List of Sites that Packages Need to Connect to?", "Author": "BullCityPicker", "Content": "I'm doing most of my work behind a government firewall, and I'm having trouble connecting to certain sites. I can do the usual \"pip\" installs just fine, but I'm talking about packages that need to download data to do their job. An example is the NLTK (Natural Language Toolkit) package, which downloads dictionaries, lookup tables for sentiment analysis, and so on. I know what sites to open up for that particular problem (pastebin.com and nltk.org), but I wonder if anybody's made a list of such sites for different packages. I can ask for the two sites I know about to be opened up, but I'd like to have a more comprehensive list so I don't have to go through the red tape multiple times."},
{"Title": "Declarative GUI Slint v1.6 released with Design Mode (WYSIWYG) Improvements", "Author": "madnirua", "Content": "https://slint.dev/blog/slint-1.6-released Slint is a declarative GUI toolkit to build native user interfaces for desktop and embedded applications. Find more information at https://slint.dev/ or check out the source code at https://github.com/slint-ui/slint. EDIT: The Python APIs are currently in alpha. More info -- https://github.com/slint-ui/slint/tree/master/api/python"},
{"Title": "TypeIs does what I thought TypeGuard would do in Python", "Author": "Ok_Analysis_4910", "Content": "While it's unfortunate to have two constructs‚ÄîTypeGuard and TypeIs‚Äîwith slightly different behaviors, I'm glad that the latter is less surprising. https://rednafi.com/python/typeguard_vs_typeis/"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Implementing your own pypi clone", "Author": "chione99", "Content": "Hi, Just want to know how difficult is it to manage your own pypi clone and how do you recommend to create a seperation between dev and prod systems."},
{"Title": "relax-py - Web framework for htmx with hot module replacement", "Author": "MindLopsided4430", "Content": "Excited to finally showcase this! It's still pretty rough around the edges, but I'm finally happy enough with the feature set and curious to see what the community thinks about a framework like this. Code: github.com/crpier/relax-py Documentation: crpier.github.io/relax-py What My Project Does relax-py is a Python framework for building full-stack applications with htmx It provides tools for writing HTML in a manner similar to simple_html (which also inspired the decision to use standard Python to write HTML, rather than use Jinja2 or to make something like templ work in Python) It has:"},
{"Title": "Are PEP 744 goals very modest?", "Author": "MrMrsPotts", "Content": "Pypy has been able to speed up pure python code by a factor of 5 or more for a number of years. The only disadvantage it has is the difficulty in handling C extensions which are very commonly used in practice. https://peps.python.org/pep-0744 seems to be talking about speed ups of 5-10%. Why are the goals so much more modest than what pypy can already achieve?"},
{"Title": "Pip 24.1 beta released, and it's a big one", "Author": "zurtex", "Content": "I'd like to call attention to pip 24.1 beta asit is unusual for the pip team to release betas:\nhttps://pip.pypa.io/en/latest/news/#b1-2024-05-06\nhttps://pypi.org/project/pip/24.1b1/\nYou can install with: python -m pip install pip==24.1b1 In particular they have upgraded their vendored version of packaging from 21.3 to 24.0, this was a and , included significant performance improvements, and will allow pip to support . However, it also means legacy versions and specifiers are with pip."},
{"Title": "Manage Your Squid Proxy Server Efficiently with This Python Script", "Author": "SAV_NC", "Content": "ü¶ë Squid Proxy Manager Script Hello fellow Python enthusiasts! I've created a Python script that makes managing your Squid Proxy Server a breeze. If you're looking for an efficient and straightforward way to interact with your Squid server remotely, this script is for you. üéâ What My Project Does The Squid Proxy Manager script allows you to manage your Squid Proxy Server remotely using a simple command-line interface. Here are some of the key features:\nCheck Squid Service Status: Quickly check if your Squid service is running or not."},
{"Title": "Pip 24.1 beta released, and it's a big one", "Author": "zurtex", "Content": "I'd like to call attention to pip 24.1 beta asit is unusual for the pip team to release betas:\nhttps://pip.pypa.io/en/latest/news/#b1-2024-05-06\nhttps://pypi.org/project/pip/24.1b1/\nYou can install with: python -m pip install pip==24.1b1 In particular they have upgraded their vendored version of packaging from 21.3 to 24.0, this was a and , included significant performance improvements, and will allow pip to support . However, it also means legacy versions and specifiers are with pip."},
{"Title": "python-oracledb 2.2 and the VECTOR type in Oracle Database 23ai", "Author": "cjbj", "Content": "python-oracledb 2.2, the Oracle Database driver, has been released with support for Oracle Database 23ai features such as the VECTOR and BOOLEAN data types, Implicit Connection Pooling, and improved connection performance. See the release announcement."},
{"Title": "How Python Asyncio Works: Recreating it from Scratch", "Author": "jpjacobpadilla", "Content": "Do you understand how asyncio works behind the scenes? Read this article and see how you can use Python generators to create your own version of asyncio, and then use the __await__ dunder method to use the async/await keywords to come full circle! https://jacobpadilla.com/articles/recreating-asyncio"},
{"Title": "modern_colorthief - Modified Median Cut Quantization algorithm in rust + python", "Author": "BasePlate_Admin", "Content": "github\ndocumentation\nWhat my project does : It gets the dominant color/color palette from given image. Target Audience: Anyone Usage modern_colorthief exposes two functions get_color and get_palette Here is how to use get_color: from modern_colorthief import get_color\n\n# Path to any image\npath = ...\n\nprint(get_color(path)) # returns tuple[int,int,int]"},
{"Title": "Pure Python Physics Engine", "Author": "More-Tower9993", "Content": "What My Project Does The Physics Engine Called PhysEng, provides an easy to use environment and visualization combo in which to try out different physics or even provide a template to design your own accelleration/velocity fields. Besides the visualization aspect and numpy the basic functions of the Engine are written completely in 100% python. The features included in the Engine are:\nParticles, Soft Bodies, Anchor points\nBuilt in Fields: Drag, Uniform Force Fields, Gravity Between Particles, Octree Gravity etc"},
{"Title": "How Python Asyncio Works: Recreating it from Scratch", "Author": "jpjacobpadilla", "Content": "Do you understand how asyncio works behind the scenes? Read this article and see how you can use Python generators to create your own version of asyncio, and then use the __await__ dunder method to use the async/await keywords to come full circle! https://jacobpadilla.com/articles/recreating-asyncio"},
{"Title": "I've started writing Python bindings for lexertl", "Author": "BenHanson", "Content": "See https://github.com/BenHanson/pylexertl I will see about registering as an official library when I am happy I have completed all the bindings. I added all the missing functions for the rules objects today, so things are in reasonable shape already. My python experience has been limited up until now, but it is big for my new role. I have a runtime parser generator https://github.com/BenHanson/parsertl17 which I also plan to add bindings for. I hope this is of interest to somebody! What My Project Does Allows you to build lexical analysers at runtime and use them to lex text (in this case utf-8)"},
{"Title": "pyrseus - concurrent.futures extensions for easier troubleshooting", "Author": "Mental-Elephant-6215", "Content": "https://github.com/dalleyg/pyrseus What My Project Does Pyrseus extends Python‚Äôs concurrent.futures asynchronous and concurrent programming package with:\na collection of non-concurrent executors for light workloads and troubleshooting,\nExecutorCtx, a factory for easily switching between different executors, and\na collection of ready-built ExecutorCtx plugins, supporting executors from concurrent.futures, ipyparallel, loky, mpi4py, and itself. Where relevant, optional cloudpickle-enhanced plugins are also provided."},
{"Title": "Build tool support for PySide / PyQt", "Author": "jmacey", "Content": "Just interested in how people approach this, typically I just use VSCode or QtCreator to build simple projects. However I now want to automate some of the build process such as running uic, and rcc. I've tried to use CMake but can't seem to get it to work without a lot of custom scripting (for example the AUTOUIC etc functions need c++ projects), can't see any info on running uic in QtCreator (which would be ideal but python support is really just an after thought). I could write some Makefiles but this is a little ad-hoc and also confuses the IDE's (and at the end of the day I want a simple process for my students to use and I already teach cmake for C++ dev)."},
{"Title": "Build tool support for PySide / PyQt", "Author": "jmacey", "Content": "Just interested in how people approach this, typically I just use VSCode or QtCreator to build simple projects. However I now want to automate some of the build process such as running uic, and rcc. I've tried to use CMake but can't seem to get it to work without a lot of custom scripting (for example the AUTOUIC etc functions need c++ projects), can't see any info on running uic in QtCreator (which would be ideal but python support is really just an after thought). I could write some Makefiles but this is a little ad-hoc and also confuses the IDE's (and at the end of the day I want a simple process for my students to use and I already teach cmake for C++ dev)."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "In what way do you try out small things when developing?", "Author": "HatWithAChat", "Content": "I've noticed at work that my coworkers and I try out small things in different ways. Small things like if you want to try that adding two datetimes together behaves in the way you expect. Some people use jupyter notebook for this and others run python interactively in a separate command prompt. I usually run debug in whatever IDE I'm using and then letting it stop at the code I'm currently developing and then using the debug console to test things out. Sometimes this means just leaving the debugger at a breakpoint for half an hour while I continue writing code. Is my way of doing it weird or does it have any disadvantages? How do you usually test out things on the go in a good way?"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "python irl in london england", "Author": "ProsodySpeaks", "Content": "are there any groups, meets, events etc i can get involved with locally in london uk? i've got moderate python chops as well as a wide range of other skills and tools, notably construction and event organisation/production/management, but also 3d design and print, some electronics and others. i work flexible hours and honestly am looking to develop a network and experiences to land my first job that at least involves some coding - i'm happy to commit significant time and resource to interesting projects to get eventually my foot or at least my nose in a door somewhere. (i dont mean i would stop contributing to the project once i land a job!)"},
{"Title": "relax-py - Web framework for htmx with hot module replacement", "Author": "MindLopsided4430", "Content": "Excited to finally showcase this! It's still pretty rough around the edges, but I'm finally happy enough with the feature set and curious to see what the community thinks about a framework like this. Code: github.com/crpier/relax-py Documentation: crpier.github.io/relax-py What My Project Does relax-py is a Python framework for building full-stack applications with htmx It provides tools for writing HTML in a manner similar to simple_html (which also inspired the decision to use standard Python to write HTML, rather than use Jinja2 or to make something like templ work in Python) It has:"},
{"Title": "Frame - a new language for programming state machines in Python", "Author": "framelanger", "Content": "Hey, I am (re)releasing a project called Frame that I've been working on to create a language and transpiler to easily create state machines/automata in Python. It also is able to generate UML documentation as well. This project is for people who are interested in programming state machines for a wide range of purposes such as game programming, workflows, MBSE modeling as well as school projects for comp sci theory. It is also useful simply for generating flow documentation. The Framepiler (Frame transpiler) is in beta at this time. It would be great to get feedback from the Python community on any gaps in key functionality or bugs."},
{"Title": "Introducing PgQueuer: A Minimalist Python Job Queue Built on PostgreSQL", "Author": "GabelSnabel", "Content": "What My Project Does PgQueuer is a Python library designed to manage job queues using PostgreSQL features. It leverages PostgreSQL's native LISTEN/NOTIFY, along with advanced locking mechanisms, to handle job queues efficiently. This allows for real-time job processing, concurrency, and reliable task execution without the need for a separate queuing system. Target Audience PgQueuer is ideal for developers and teams who already use PostgreSQL in their projects and are looking for a simple, integrated way to handle background tasks and job queues. It's designed for production use, offering a dependable solution that scales seamlessly with existing PostgreSQL databases."},
{"Title": "relax-py - Web framework for htmx with hot module replacement", "Author": "MindLopsided4430", "Content": "Excited to finally showcase this! It's still pretty rough around the edges, but I'm finally happy enough with the feature set and curious to see what the community thinks about a framework like this. Code: github.com/crpier/relax-py Documentation: crpier.github.io/relax-py What My Project Does relax-py is a Python framework for building full-stack applications with htmx It provides tools for writing HTML in a manner similar to simple_html (which also inspired the decision to use standard Python to write HTML, rather than use Jinja2 or to make something like templ work in Python) It has:"},
{"Title": "ArchiveFile: Unified interface for tar, zip, sevenzip, and rar files", "Author": "PredatorOwl", "Content": "What My Project Does archivefile is a wrapper around tarfile, zipfile, py7zr, and rarfile. The above libraries are excellent when you are dealing with a single archive format but things quickly get annoying when you have a bunch of mixed archives such as .zip, .7z, .cbr, .tar.gz, etc because each library has a slightly different syntax and quirks which you need to deal with. archivefile wraps the common methods from the above libraries to provide a unified interface that takes care of said differences under the hood. However, it's not as powerful as the libraries it wraps due to lack of support for features that are unique to a specific archive format and library."},
{"Title": "python-oracledb 2.2 and the VECTOR type in Oracle Database 23ai", "Author": "cjbj", "Content": "python-oracledb 2.2, the Oracle Database driver, has been released with support for Oracle Database 23ai features such as the VECTOR and BOOLEAN data types, Implicit Connection Pooling, and improved connection performance. See the release announcement."},
{"Title": "Analyzing Python Compression Libraries: zlib, LZ4, Brotli, and Zstandard", "Author": "dhilip-siva", "Content": "Source Code: https://github.com/dhilipsiva/py-compress-compare\nAnalyzing Python Compression Libraries: zlib, LZ4, Brotli, and Zstandard\nWhen dealing with large volumes of data, compression can be a critical factor in enhancing performance, reducing storage costs, and speeding up network transfers. In this blog post, we will dive into a comparison of four popular Python compression libraries‚Äîzlib, LZ4, Brotli, and Zstandard‚Äîusing a real-world dataset to evaluate their performance in terms of compression ratio and time efficiency."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "python-oracledb 2.2 and the VECTOR type in Oracle Database 23ai", "Author": "cjbj", "Content": "python-oracledb 2.2, the Oracle Database driver, has been released with support for Oracle Database 23ai features such as the VECTOR and BOOLEAN data types, Implicit Connection Pooling, and improved connection performance. See the release announcement."},
{"Title": "SQLPage - a Python library to add string token based pagination easily", "Author": "kernelslayer", "Content": "What My Project Does - This is a Python package to easily add string token based pagination. Currently it supports SQLModel and SQLAlchemy ORMs. Recently I wanted to add pagination in one of my Python projects and in the API response, I had to return a string next page token. Now I could not find a straight-forward way of doing this in Python. All of the tutorials or blog posts I saw, there in the response the server always returned a page_number, page_size, and total_elements and then the onus was on the calling service to adjust this accordingly.  Comparison - The current packages and methods requires some changes in the app layer as well. I tried using a few but those did not satisfy the use case and were also a bit harder to implement. I could not find a easy to use option. The present ones returned integers instead of a string token"},
{"Title": "I made an easy and secure data lake for Pandas", "Author": "realstoned", "Content": "What My Project Does Shoots is essentially a \"data lake\" where you can easily store pandas dataframes, and retrieve them later or from different locations or in different tools. Shoots has a client and a server. After choosing a place to run the server, you can easily use the client to \"put\" and \"get\" dataframes. Shoots supports SQL, allowing you to put very large dataframes, and then use a query to only get a subset. Shoots also allows you to resample on the server. # put a dataframe, uploads it to the server  \ndf = pd.read\\_csv('sensor\\_data.csv')  \nshoots.put(\"sensor\\_data\", dataframe=df, mode=PutMode.REPLACE)  \n\n\n# retrieve the whole data frame  \ndf0 = shoots.get(\"sensor\\_data\")  \nprint(df0)  \n\n# or use sql to retrieve just some of the data  \nsql = 'select \"Sensor\\_1\" from sensor\\_data where \"Sensor\\_2\" < .2'  \ndf1 = shoots.get(\"sensor\\_data\", sql=sql)"},
{"Title": "Reboot Your Router with a Python Script", "Author": "SAV_NC", "Content": "Hello r/python, I've developed a Python script that allows you to reboot your router remotely via SSH! This script handles the countdown and checks when the router is back online after a reboot. What My Project Does: Key Features:\nAutomated Router Reboot: Remotely trigger a reboot of your router.\nMonitoring: After sending the reboot command, the script counts down from 350 seconds and starts checking the router's status by pinging it after the first 100 seconds have passed."},
{"Title": "I've started writing Python bindings for lexertl", "Author": "BenHanson", "Content": "See https://github.com/BenHanson/pylexertl I will see about registering as an official library when I am happy I have completed all the bindings. I added all the missing functions for the rules objects today, so things are in reasonable shape already. My python experience has been limited up until now, but it is big for my new role. I have a runtime parser generator https://github.com/BenHanson/parsertl17 which I also plan to add bindings for. I hope this is of interest to somebody! What My Project Does Allows you to build lexical analysers at runtime and use them to lex text (in this case utf-8)"},
{"Title": "UXsim 1.3.0 released with vehicle tracking and improved vehicle routing", "Author": "Balance-", "Content": "Main Changes\nAdd GUI functions\nVehicle tracking: You can now track a specific vehicle to see their route\nDataframe viewer: Stats can be confirmed\nImprove vehicle routing functions\nAdd example of routing optimization"},
{"Title": "I wrote a book on Python Regular Expressions - and made it free!", "Author": "code_x_7777", "Content": "Hi! I've just sorted through some of my books on Leanpub and decided to make the book on Python Regular Expressions free to download for a couple of days. Why? Just for fun and learning and to get some valuable feedback.\nFree ebook link: https://leanpub.com/regexpython/\nRegex Video Tutorials: https://blog.finxter.com/python-regex/\nThis book helps you learn regular expressions chapter by chapter. Each chapter first teaches the concepts and then asks you to solve Python puzzles (\"Guess the code!\") to master the concepts. The main idea is to keep it lightweight and fun."},
{"Title": "I've started writing Python bindings for lexertl", "Author": "BenHanson", "Content": "See https://github.com/BenHanson/pylexertl I will see about registering as an official library when I am happy I have completed all the bindings. I added all the missing functions for the rules objects today, so things are in reasonable shape already. My python experience has been limited up until now, but it is big for my new role. I have a runtime parser generator https://github.com/BenHanson/parsertl17 which I also plan to add bindings for. I hope this is of interest to somebody! What My Project Does Allows you to build lexical analysers at runtime and use them to lex text (in this case utf-8)"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Opinions sought: Modernising the Apache NiFi Python client", "Author": "Samausi", "Content": "Hello folks, I am the author of NiPyAPI, the defacto Python client for the Apache NiFi project. For those unfamiliar, Apache NiFi is an open-source ETL tool designed around the flow-based programming paradigm. It excels at continuously moving and managing arbitrary data flows between disparate systems with low latency at large scale, and is often contrasted with Airflow. Amongst many features, NiFi allows for Command & Control via a native UI, enabling live edits to data routing and transformation. NiFi also enforces an API-first approach, and produces a swagger definition during code compilation, which allowed creation of a Python client to enable automated Data Flow testing and a Design & Deploy approach by running it through tool shaped by mustache templates. This produces a verbose low-level client, which I then leverage in higher-level operational functions and demo scripts in the library."},
{"Title": "Resume Screening Chatbot using RAG Fusion", "Author": "Babe_My_Name_Is_Hung", "Content": "Hi everyone! I recently finished a small side project for my graduating thesis, which is about experimenting with RAG-based frameworks in improving resume screening. What my project does: The project for the thesis is a GPT-4 Chatbot with RAG Fusion retrieval. Given a job description as input, the system retrieves the most relevant candidate profiles to perform follow-up tasks such as analysis, summarization, and decision-making, which can assist the screening process better. The revolving idea is that the similarity-based retrieval process can effectively narrow the initial large pool of applicants down to the most relevant resumes. However, this simple similarity ranking should not be used to evaluate a candidate's actual ability. Therefore, the top resumes are used to augment the GPT-4 Chatbot so it can be conditioned on these profiles and perform further downstream tasks."},
{"Title": "How Malicious Python Code Gains Execution", "Author": "louis11", "Content": "The primary vector for malicious code running in software developer environments (e.g., local system, CI/CD runners, production servers, etc.) is software dependencies. This is third-party code which often means open-source software, also known as running code from strangers on the internet. The prized goal for attackers is arbitrary code execution. It‚Äôs the stuff high CVE scores are made of and often the topic of how vulnerabilities can turn into exploits. It‚Äôs the foothold needed to run cryptominers, steal secrets, or encrypt data for ransom. It‚Äôs no wonder why threat actors want it, but how do they get it? Sutton‚Äôs Law makes it obvious why they go after open-source software: because executing arbitrary code is easy there."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Share Proejct: NLLB-200 Distill 350M en-ko", "Author": "SaeChan5", "Content": "Hello , I'm excited to share a project that was initially intended to use in my graduating product(Capstone) What My Proeject Does I made NLLB-200 Distill 350M model to translating English to Korean Target Audience GPU servers are quite expensive, so I made it for university students who can't cost the server (like me.) Comparison It's even smaller and faster the other NLLB-200 model. so it can be run with CPU! more details are in my page If you know Korean, please give me a lot of feedback https://github.com/newfull5/NLLB-200-Distilled-350M-en-ko thank you!!"},
{"Title": "Introducing PgQueuer: A Minimalist Python Job Queue Built on PostgreSQL", "Author": "GabelSnabel", "Content": "What My Project Does PgQueuer is a Python library designed to manage job queues using PostgreSQL features. It leverages PostgreSQL's native LISTEN/NOTIFY, along with advanced locking mechanisms, to handle job queues efficiently. This allows for real-time job processing, concurrency, and reliable task execution without the need for a separate queuing system. Target Audience PgQueuer is ideal for developers and teams who already use PostgreSQL in their projects and are looking for a simple, integrated way to handle background tasks and job queues. It's designed for production use, offering a dependable solution that scales seamlessly with existing PostgreSQL databases."},
{"Title": "Giving New Life to JModelica: Bringing Powerful Modelica Simulations to Python", "Author": "foadsf", "Content": "Five years ago, I posted about JModelica, a fantastic open-source tool for simulating complex systems that combined the ease of Python with the strength of Modelica. Sadly, the project went quiet, but I'm thrilled to share that, thanks to the dedication of a few folks (myself included!), JModelica is back! You can find the revived project on GitHub: https://github.com/JModelica/JModelica. What JModelica Does: JModelica provides a way to write complex simulations using the Modelica language, which is known for its ability to handle differential equations and model physical systems beautifully. The magic of JModelica lies in its Python integration‚Äîyou can solve your Modelica models and access the results directly in Python for in-depth analysis, visualization, and even optimization using libraries you already love!"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Introducing PgQueuer: A Minimalist Python Job Queue Built on PostgreSQL", "Author": "GabelSnabel", "Content": "What My Project Does PgQueuer is a Python library designed to manage job queues using PostgreSQL features. It leverages PostgreSQL's native LISTEN/NOTIFY, along with advanced locking mechanisms, to handle job queues efficiently. This allows for real-time job processing, concurrency, and reliable task execution without the need for a separate queuing system. Target Audience PgQueuer is ideal for developers and teams who already use PostgreSQL in their projects and are looking for a simple, integrated way to handle background tasks and job queues. It's designed for production use, offering a dependable solution that scales seamlessly with existing PostgreSQL databases."},
{"Title": "Python Test 220: Getting the most out of PyCon, including juggling - Rob Ludwick", "Author": "variedthoughts", "Content": "Listen at https://podcast.pythontest.com/episodes/220-juggling-pycon\nEven if you never get a chance to go to PyCon, I hope this interview helps you get a feel for the welcoming aspect of the Python community. The juggling at PyCon is one of the inspirations for PythonPeople.fm, one of PythonTests's sibling podcasts. Do you have any conference tips to add?"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ASCII plot backend package for matplotlib", "Author": "jetpack_away", "Content": "Hi I've made a package called mpl_ascii which is a backend for matplotlib. You can find it here: https://github.com/chriscave/mpl_ascii I would love to share it with others and see what you guys think What it is It is a backend for matplotlib that converts your plots into ASCII characters. At the moment I have only made support for: bar charts, scatter plots and line plots but if there's demand for more then I would love to keep working on it. Target Audience: Anyone using matplotlib to create plots who might also want to track how their plots change with their codebase (i.e. version control)."},
{"Title": "Medical imaging Python jobs", "Author": "Durysik", "Content": "Hi folks! I am currently looking for a US (west coast best) based job where I could grow as a python programmer, specifically analysing medical images. Looking online I found some labs where they work with images, but I thought I'd ask (not sure if it's the right sub tho) cause I'm sure this way I'll hear about many places that deal with Medical Imaging. Thanks :)"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Suggestions for python libraries to contribute to", "Author": "JimJimBerry", "Content": "Hey, python folks ! I have been coding in python for around 3 years, 2 years professionally. I have worked with asyncio, typing and other stuff that is needed to build a server. I was looking for a small but impactful enough open source core python library/application to work on. I tried cpython but it seems to be beyond my capability at the moment. As for my interests I was interested in lower level stuff as well as libraries like asyncio and celery. Any suggestions for libraries that could use a bit of help and teach me some stuff as well would be appreciated"},
{"Title": "Reboot Your Router with a Python Script", "Author": "SAV_NC", "Content": "Hello r/python, I've developed a Python script that allows you to reboot your router remotely via SSH! This script handles the countdown and checks when the router is back online after a reboot. What My Project Does: Key Features:\nAutomated Router Reboot: Remotely trigger a reboot of your router.\nMonitoring: After sending the reboot command, the script counts down from 350 seconds and starts checking the router's status by pinging it after the first 100 seconds have passed."},
{"Title": "CLI to embed code snippets in your README, from actual (testable) code", "Author": "realazthat", "Content": "What My Project Does What My Project Does: snipinator is a CLI to embed (testable) snippets from your codebase into your README, using Jinja2 and functions provided by snipinator to assist with embedding code, shell output, etc. Please provide any feedback in the comments or GH issues. Target Audience Target Audience: Developers of {GitHub,other} projects that have a README. It works for me, it might work for you. Comparison Features:\nSupports anything Jinja2 supports."},
{"Title": "Cross platform python3 shebang", "Author": "tedkotz", "Content": "There is no shebang line that actually works across platforms for python 3. I would like one that works on unmodified :\nDebian shell (Dropped python2, falls under PEP 394)\nOlder Linux shells that still have python pointing to python2 (PEP 394)\nWindows cmd.exe shell (this really just means one that will work with PEP 397)\nGitbash for Windows (sort of a weird half sibling that respects shebangs)"},
{"Title": "tab-pal: a TUI for adding and editing custom colour palettes in Tableau", "Author": "Ok-Frosting7364", "Content": "Source code: https://github.com/ben-n93/tab-pal\nWhat my Project Does\nMakes it quicker, easier and prettier to create custom colour palettes in Tableau. Rather than having to find your Preferences.tps file every time and edit the XML you can just launch tab-pal from the command-line and make any changes you want (adding/deleting new palettes, adding/removing colours. You also get a preview of the colours you've added. Target Audience\nData/business analysts and data scientists and who work with Tableau.\n\nThere are some websites that let you dynamically create the Preferences.tps XML file however this still requires you to locate the file and copy and paste over it with any changes you make"},
{"Title": "Reboot Your Router with a Python Script", "Author": "SAV_NC", "Content": "Hello r/python, I've developed a Python script that allows you to reboot your router remotely via SSH! This script handles the countdown and checks when the router is back online after a reboot. What My Project Does: Key Features:\nAutomated Router Reboot: Remotely trigger a reboot of your router.\nMonitoring: After sending the reboot command, the script counts down from 350 seconds and starts checking the router's status by pinging it after the first 100 seconds have passed."},
{"Title": "Project: Simple Interactive Python Streamlit Maps With NASA GIS Data", "Author": "jgloewen", "Content": "Python Streamlit is terrific for putting together interactive dashboards. Combined with the geopandas library, streamlit can easily display GIS data points on a map for you. Forest fires in my home province of British Columbia, Canada have been really bad recently. NASA has a terrific dataset that keeps track of forest fires by country. Can I use Streamlit to access this dataset and display a map off all the fires within a certain area (BC) for a particular time frame (2021)? And can I give the user the ability to choose a month? You bet! Let me step you through how! FREE tutorial (with code):"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Opinions sought: Modernising the Apache NiFi Python client", "Author": "Samausi", "Content": "Hello folks, I am the author of NiPyAPI, the defacto Python client for the Apache NiFi project. For those unfamiliar, Apache NiFi is an open-source ETL tool designed around the flow-based programming paradigm. It excels at continuously moving and managing arbitrary data flows between disparate systems with low latency at large scale, and is often contrasted with Airflow. Amongst many features, NiFi allows for Command & Control via a native UI, enabling live edits to data routing and transformation. NiFi also enforces an API-first approach, and produces a swagger definition during code compilation, which allowed creation of a Python client to enable automated Data Flow testing and a Design & Deploy approach by running it through tool shaped by mustache templates. This produces a verbose low-level client, which I then leverage in higher-level operational functions and demo scripts in the library."},
{"Title": "American Airlines scraper made in Python with only http requests", "Author": "JohnBalvin", "Content": "Hello wonderful community, Today I'll present to you pyaair, a scraper made pure on Python https://github.com/johnbalvin/pyaair Easy instalation ` ` `pip install pyaair ` ` ` Easy Usage ` ` ` airports=pyaair.airports(\"miami\",\"\") ` ` ` Always remember, only use selenium, puppeteer, playwright etc when it's strictly necesary Let me know what you think, thanks About me: I'm full stack developer specialized on web scraping and backend, with 6-7 years of experience"},
{"Title": "A Free GPT-Powered Financial Analysis Tool", "Author": "Starks-Technology", "Content": "Link to GitHub Page\nWhat My Project Does\nI created a simple financial analysis tool using the SimFin API and the GPT API. This tool summarizes financial information and makes it digestable for people who don't know a lot about finance.\nTarget Audience\nThis is more of a toy project for those interested in AI and Finance. It's meant for people without a ton of GPT experience to see a tangible use-case of generative AI within the field."},
{"Title": "Opinions sought: Modernising the Apache NiFi Python client", "Author": "Samausi", "Content": "Hello folks, I am the author of NiPyAPI, the defacto Python client for the Apache NiFi project. For those unfamiliar, Apache NiFi is an open-source ETL tool designed around the flow-based programming paradigm. It excels at continuously moving and managing arbitrary data flows between disparate systems with low latency at large scale, and is often contrasted with Airflow. Amongst many features, NiFi allows for Command & Control via a native UI, enabling live edits to data routing and transformation. NiFi also enforces an API-first approach, and produces a swagger definition during code compilation, which allowed creation of a Python client to enable automated Data Flow testing and a Design & Deploy approach by running it through tool shaped by mustache templates. This produces a verbose low-level client, which I then leverage in higher-level operational functions and demo scripts in the library."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Python app that turns your Figma design into code", "Author": "axorax", "Content": "Link: https://github.com/Axorax/tkforge Hey, my name is Axorax. I have been programming for a few years now. I started making a lot more projects in Python recently and this is one of them. I decided to call the project TkForge. What My Project Does TkForge allows you to turn your Figma design into code. So, you can make the UI for an app in Figma and add input fields, buttons and much more and name them properly then you can run TkForge to convert your Figma design into code. The names need to be the element that you want. For example; if you want a button element then you can name it \"button\" or \"button Hello World!\". The \"Hello World!\" portion will just get ignored. All of the text after the first space is ignored. However, for some elements, they matter. Like, if you want a textbox element with the placeholder text of \"Hello\" then you need to name it \"textbox Hello\"."},
{"Title": "I made a Tkinter \"DevTools\" to inspect and modify widgets in your running app in real-time", "Author": "254hypebeast", "Content": "source: https://github.com/ObaraEmmanuel/Formation pypi: https://pypi.org/project/formation-studio/ What My Project Does Allows you to inspect widgets in your running Tk app in real-time. You can view the widget hierarchy, modify widget attributes, adjust widget layout and run arbitrary code to interact with your widgets through the embedded Python REPL console. It works just like DevTools in a browser. This debugger is part of the Formation studio project which is a drag-n-drop graphical UI builder for Tkinter. Target Audience Any Tk developer seeking to have an easier time debugging their UI or seeking to experiment with the Tk framework with minimal effort."},
{"Title": "map_plotter - abstracts complexity of creating intensity plots overlaid onto global map", "Author": "teamamentum", "Content": "What My Project Does\nOverlaying intensity plots onto a geographical map using cartopy/matplotlib can be complex. So we created this map_plotter package to abstract away that complexity for a common use case. Installation (opinionated use of conda to avoid cartopy dependency hell and install precompiled binaries) conda install cartopy\ngit clone git@github.com:amentumspace/map_plotter.git\ncd map_plotter\npip install ."},
{"Title": "New book! The Quick Python Book, Fourth Edition by Naomi Ceder", "Author": "ManningBooks", "Content": "Hello everybody, Thank you for having us here, and a huge \"Thank you\" to the moderators for letting us post. We have just released the latest edition of The Quick Python Book by the one-and-only Naomi Ceder, and I wanted to share that news with the community. Many of you are already familiar with Naomi's work and her massive contributions to the world of Python programming language. The Quick Python Book has aided over 100,000 developers in mastering Python. The Fourth Edition of the book has been revised to include the latest features, control structures, and libraries of Python, along with new coverage of working with AI-generated Python code. Naomi, the author, has beautifully balanced the details of the language with the insights and advice required to accomplish any task. Her personal touch has made learning Python an enjoyable experience for countless developers."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Python CLI Tools for Competitive Programming", "Author": "Old-Manufacturer6209", "Content": "Source Code: https://github.com/JeanExtreme002/FastSnake PyPI: https://pypi.org/project/FastSnake/ What My Project Does FastSnake is a command-line tool that allows you to easily create, expand, run, and test Python solutions for competitive programming problems. üêçüèÅ This project provides useful CLI tools for competitive programming, such as test case generators, algorithms and data structures, tools for platforms Codeforces and AtCoder, and other features that assist you during the development and testing of solutions, besides building a nice directory structure to develop your solutions. ü§ì"},
{"Title": "milkcow - First package/library", "Author": "Samuel_G_Reynoso", "Content": "Excited to share milkcow, my first python package. I'd love any feedback, and to continue to build out the parts of this package that show potential. https://pypi.org/project/milkcow/ https://github.com/SamReynoso/milkcow What MilkCow Does Milkcow automates database creation and offers in-memory key-value mapping for data handling. Whether you're building middleware, local storage, or multiprocessing scripts. Target Audience MilkCow is designed for developers looking to streamline the development process. It caters to those who want to simplify data."},
{"Title": "Python Test 220: Getting the most out of PyCon, including juggling - Rob Ludwick", "Author": "variedthoughts", "Content": "Listen at https://podcast.pythontest.com/episodes/220-juggling-pycon\nEven if you never get a chance to go to PyCon, I hope this interview helps you get a feel for the welcoming aspect of the Python community. The juggling at PyCon is one of the inspirations for PythonPeople.fm, one of PythonTests's sibling podcasts. Do you have any conference tips to add?"},
{"Title": "typedattr: Autocompletion and typechecking for CLI script arguments, using standard argparse syntax", "Author": "gings7", "Content": "Excited to share my pypi package typedparser I have been working on for around 1 year now. What My Project Does: It enables writing CLI scripts and create an \"args\" variable with autocompleted members and type checks, but still keeps the simple and universally understood syntax of the stdlib argarse module. Target Audience: For stability, I battletested it in my research projects and added automatic builds as well as 80%+ test coverage. So I believe it is pretty stable. Comparison: For typing functionality it uses the attrs package as backend. It also provides some additional features for object and dictionary manipulation. Of course there are many other CLI argument packages out there, but this one stands out in that it tries to keep the syntax of the argparse standard library as much as possible, making it easy for others to figure out what your script does. Check it out and let me know what you think."},
{"Title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"", "Author": "AlSweigart", "Content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs I'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10) Once printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become."},
{"Title": "Python Test 220: Getting the most out of PyCon, including juggling - Rob Ludwick", "Author": "variedthoughts", "Content": "Listen at https://podcast.pythontest.com/episodes/220-juggling-pycon\nEven if you never get a chance to go to PyCon, I hope this interview helps you get a feel for the welcoming aspect of the Python community. The juggling at PyCon is one of the inspirations for PythonPeople.fm, one of PythonTests's sibling podcasts. Do you have any conference tips to add?"},
{"Title": "Suggestions for python libraries to contribute to", "Author": "JimJimBerry", "Content": "Hey, python folks ! I have been coding in python for around 3 years, 2 years professionally. I have worked with asyncio, typing and other stuff that is needed to build a server. I was looking for a small but impactful enough open source core python library/application to work on. I tried cpython but it seems to be beyond my capability at the moment. As for my interests I was interested in lower level stuff as well as libraries like asyncio and celery. Any suggestions for libraries that could use a bit of help and teach me some stuff as well would be appreciated"},
{"Title": "Meteor Science using Python - Creating a \"weird\" coordinate system", "Author": "MrAstroThomas", "Content": "Hey everyone, I am creating \"Space Science with Python\" tutorials on YouTube with free and open accessible Python code on GitHub. It is not fancy or a \"super high animation quality YouTube production\". I am just an astrophysicists (what a difficult word to write), working in industry who continues with science as a hobby. Ha! And I have some crazy niche knowledge that is not covered by Gemini or chatGPT (yet). Anyway, I am creating now a tutorial on meteor science and wanted to show you how to create a coordinate system that co-rotates with the Earth while it is revolving around the Sun."},
{"Title": "Python Quality Standards", "Author": "nicomarcan", "Content": "Hey, happy Friday (don't push to prod). Me and some friends are building a no-code platform to run code improvement agents (really in BETA) . We want to have a quality agent for each language, and I would really appreciate your feedback on python best practices and standards. The agents are created by defining the steps that you want to apply in natural language. Right now our Python agent has the following steps:\nUse descriptive naming for functions and variables."},
{"Title": "Reviewing Dataframe Changes? Looking for Your Preferred Methods!", "Author": "rageagainistjg", "Content": "After playing around with a dataframe‚Äîapplying filters or other transformations‚ÄîI'm curious about your methods for reviewing the changes. In VS Code, the variable explorer is quite handy for a quick look at the modified dataframe. Alternatively, when working in a Jupyter notebook within VS Code, exporting the data to an Excel file provides a detailed view and allows for an easy deep dive into the results. What are your preferred practices for ensuring your data adjustments are precisely what you intended?"},
{"Title": "Dash vs Reflex vs Others", "Author": "Sea_Split_1182", "Content": "Where can I find a decent comparison (pros and cons) of these 5 solutions? They seem to be solving the same problem, which is, afaiu, separating the frontend ‚Äòannoyance‚Äô from Python scripting / math.\n‚Å†Reflex (used to be called Pynecone) https://reflex.dev\n‚Å†Streamlit https://streamlit.io\n‚Å†Gradio https://gradio.app\n‚Å†Dash https://dash.plotly.com"},
{"Title": "Suggestions for python libraries to contribute to", "Author": "JimJimBerry", "Content": "Hey, python folks ! I have been coding in python for around 3 years, 2 years professionally. I have worked with asyncio, typing and other stuff that is needed to build a server. I was looking for a small but impactful enough open source core python library/application to work on. I tried cpython but it seems to be beyond my capability at the moment. As for my interests I was interested in lower level stuff as well as libraries like asyncio and celery. Any suggestions for libraries that could use a bit of help and teach me some stuff as well would be appreciated"},
{"Title": "SecretScraper: highly configurable web crawler/scraper for extracting sensitive data from websites", "Author": "PadishahIII", "Content": "Hi, I'm a cybersecurity enthusiastic. And I've made a web crawler/scraper tool to extract links and sensitive information against target websites. You can find it here: https://github.com/PadishahIII/SecretScraper. What My Project Does SecretScraper is a highly configurable web scraper tool that crawls links, extracts subdomains from target websites and finds sensitive data using regular expressions. The features included in the SecretScraper are:\nWeb crawler: extract links using both DOM hierarchy and regex"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Project: Simple Interactive Python Streamlit Maps With NASA GIS Data", "Author": "jgloewen", "Content": "Python Streamlit is terrific for putting together interactive dashboards. Combined with the geopandas library, streamlit can easily display GIS data points on a map for you. Forest fires in my home province of British Columbia, Canada have been really bad recently. NASA has a terrific dataset that keeps track of forest fires by country. Can I use Streamlit to access this dataset and display a map off all the fires within a certain area (BC) for a particular time frame (2021)? And can I give the user the ability to choose a month? You bet! Let me step you through how! FREE tutorial (with code):"},
{"Title": "I made a python package that can parse Excel Formula Strings into dictionary structures!", "Author": "MPGaming9000", "Content": "What my project does: It basically takes a formula string like you'd get from Openpyxl like \"=SUM(A1:B2)\" and breaks it all out into a dictionary structure for you to then navigate through, modify, and then reformat that modified structure back into an excel friendly formula string again! Target Audience: (People who modify Excel formula strings in automated spreadsheet modification scripts. Or people who need to analyze formulas in a spreadsheet to do some kind of logic based on that analysis). Disclaimer: For most people some simple regex pattern matching and str replaces would be fine to modify formulas but if you need a more structured approach to working with these strings, this package has you covered!"},
{"Title": "Project: Simple Interactive Python Streamlit Maps With NASA GIS Data", "Author": "jgloewen", "Content": "Python Streamlit is terrific for putting together interactive dashboards. Combined with the geopandas library, streamlit can easily display GIS data points on a map for you. Forest fires in my home province of British Columbia, Canada have been really bad recently. NASA has a terrific dataset that keeps track of forest fires by country. Can I use Streamlit to access this dataset and display a map off all the fires within a certain area (BC) for a particular time frame (2021)? And can I give the user the ability to choose a month? You bet! Let me step you through how! FREE tutorial (with code):"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Library for automatic Cython 3.0 code annotations generation.", "Author": "Cool-Nefariousness76", "Content": "Hi everybody, over the last year I've been developing a library that adds some Cython 3.0 annotations to existing python code. What My Project Does: For example if it sees a for i in range(): in a function it recognizes i as an integer and adds a i = cython.declare(cython.int)line at the beginning of the function. It actually uses the built-in ast module under the hood for parsing, I found it a super useful library! Target Audience: It is a side project I made mainly for fun. I don't know if it can be of interest to anybody, or if it could have some potential utility."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Hatch v1.10.0 - UV support, new test command and built-in script runner", "Author": "Ofekmeister", "Content": "Hello everyone! I'd like to announce version 1.10.0: https://hatch.pypa.io/latest/blog/2024/05/02/hatch-v1100/ Feel free to provide any feedback either here or as a discussion on the repo: https://github.com/pypa/hatch"},
{"Title": "How To Build a Social Media Sentiment Analysis Pipeline With FastAPI And Generative AI", "Author": "arthurdelerue25", "Content": "Social media like Reddit, Hacker News, Twitter, etc. contain tons of genuine discussions that you might want to analyze automatically with sentiment analysis. For example you might want to monitor what people say about you, your product, your competitors, etc. I made a technical article that shows how to implement such a sentiment analysis pipeline using the following steps:\nImplement social media listening\nIntegrate the data in your system with an API webhook processed in Python/FastAPI"},
{"Title": "New book! The Quick Python Book, Fourth Edition by Naomi Ceder", "Author": "ManningBooks", "Content": "Hello everybody, Thank you for having us here, and a huge \"Thank you\" to the moderators for letting us post. We have just released the latest edition of The Quick Python Book by the one-and-only Naomi Ceder, and I wanted to share that news with the community. Many of you are already familiar with Naomi's work and her massive contributions to the world of Python programming language. The Quick Python Book has aided over 100,000 developers in mastering Python. The Fourth Edition of the book has been revised to include the latest features, control structures, and libraries of Python, along with new coverage of working with AI-generated Python code. Naomi, the author, has beautifully balanced the details of the language with the insights and advice required to accomplish any task. Her personal touch has made learning Python an enjoyable experience for countless developers."},
{"Title": "New book! The Quick Python Book, Fourth Edition by Naomi Ceder", "Author": "ManningBooks", "Content": "Hello everybody, Thank you for having us here, and a huge \"Thank you\" to the moderators for letting us post. We have just released the latest edition of The Quick Python Book by the one-and-only Naomi Ceder, and I wanted to share that news with the community. Many of you are already familiar with Naomi's work and her massive contributions to the world of Python programming language. The Quick Python Book has aided over 100,000 developers in mastering Python. The Fourth Edition of the book has been revised to include the latest features, control structures, and libraries of Python, along with new coverage of working with AI-generated Python code. Naomi, the author, has beautifully balanced the details of the language with the insights and advice required to accomplish any task. Her personal touch has made learning Python an enjoyable experience for countless developers."},
{"Title": "APScheduler vs Schedule package", "Author": "kostakos14", "Content": "Hey folks, looking to use one library to implement some background scheduling logic on my application. I find in Google search APScheduler to be frequently mentioned, but I can see the Schedule package has more GH stars. Was curious if anybody has used one of them, and which one would you recommend based on your own experience."},
{"Title": "What does your python development setup look like?", "Author": "Working_Noise_6043", "Content": "I'd like to explore other people's setup and perhaps try need things or extra tools. What kind IDE, any extra tools to make it easier for you, etc. Looking forward to everyone's responses!"},
{"Title": "TypeIs does what I thought TypeGuard would do in Python", "Author": "Ok_Analysis_4910", "Content": "While it's unfortunate to have two constructs‚ÄîTypeGuard and TypeIs‚Äîwith slightly different behaviors, I'm glad that the latter is less surprising. https://rednafi.com/python/typeguard_vs_typeis/"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "typedattr: Autocompletion and typechecking for CLI script arguments, using standard argparse syntax", "Author": "gings7", "Content": "Excited to share my pypi package typedparser I have been working on for around 1 year now. What My Project Does: It enables writing CLI scripts and create an \"args\" variable with autocompleted members and type checks, but still keeps the simple and universally understood syntax of the stdlib argarse module. Target Audience: For stability, I battletested it in my research projects and added automatic builds as well as 80%+ test coverage. So I believe it is pretty stable. Comparison: For typing functionality it uses the attrs package as backend. It also provides some additional features for object and dictionary manipulation. Of course there are many other CLI argument packages out there, but this one stands out in that it tries to keep the syntax of the argparse standard library as much as possible, making it easy for others to figure out what your script does. Check it out and let me know what you think."},
{"Title": "typedattr: Autocompletion and typechecking for CLI script arguments, using standard argparse syntax", "Author": "gings7", "Content": "Excited to share my pypi package typedparser I have been working on for around 1 year now. What My Project Does: It enables writing CLI scripts and create an \"args\" variable with autocompleted members and type checks, but still keeps the simple and universally understood syntax of the stdlib argarse module. Target Audience: For stability, I battletested it in my research projects and added automatic builds as well as 80%+ test coverage. So I believe it is pretty stable. Comparison: For typing functionality it uses the attrs package as backend. It also provides some additional features for object and dictionary manipulation. Of course there are many other CLI argument packages out there, but this one stands out in that it tries to keep the syntax of the argparse standard library as much as possible, making it easy for others to figure out what your script does. Check it out and let me know what you think."},
{"Title": "Introducing Notolog: Python Markdown Editor built with PySide6", "Author": "devotaku", "Content": "Excited to share my personal open-source project: Notolog - Python Markdown Editor (MIT License). The main motivation for developing another markdown editor was my passion for learning new things and enhancing my development skills in Python. I developed it in my spare time over a few months, despite having no prior experience in creating full-scale Python applications. What My Project Does ‚àó Multiplatform ‚àó Markdown async syntax highlighting created by me ‚àó Several pre-installed color themes ‚àó Supports English and 17 other languages right out of the box ‚àó Integration with OpenAI API for AI-assisted features"},
{"Title": "Are PEP 744 goals very modest?", "Author": "MrMrsPotts", "Content": "Pypy has been able to speed up pure python code by a factor of 5 or more for a number of years. The only disadvantage it has is the difficulty in handling C extensions which are very commonly used in practice. https://peps.python.org/pep-0744 seems to be talking about speed ups of 5-10%. Why are the goals so much more modest than what pypy can already achieve?"},
{"Title": "Python Interview Cheat Sheet Website!", "Author": "ixatrap", "Content": "Hey everyone, I‚Äôve recently launched a new website aimed at helping fellow programmers ace their Python interviews. It‚Äôs not just limited to Python though; it also covers essential topics like big-O notation, object-oriented programming, design patterns, and more! I‚Äôd love to hear your thoughts and feedback on the content, layout, and anything else you think could be improved. Check it out here https://hlop3z.github.io/interviews-python/ and let me know what you think. Your input is invaluable in making this resource the best it can be. Thanks in advance for your time and insights! üöÄüêç"},
{"Title": "Tutorial on Building a Server-to-Server Zoom App with Python", "Author": "SleekEagle", "Content": "I made a tutorial on how to build a server-to-server Zoom OAuth application using Python. This application can transcribe Zoom meeting recordings, print the transcripts to the terminal, and save the transcripts as text files.\nvideo tutorial\nrepo\nwritten tutorial"},
{"Title": "I've developed a library for send metrics to zabbix asynchronously", "Author": "Royal_Section4889", "Content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this. Tests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async What My Project Does Send zabbix sender messages using asyncio tasks. Target Audience SysAdmins who use Zabbix to monitor a large number of metrics. Comparison Instead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix"},
{"Title": "Multipart File Uploads to S3 with Python", "Author": "tylersavery", "Content": "I created this tutorial after overcoming a difficult challenge myself: uploading 5GB+ files to AWS. This approach allows the browser to securely upload directly to an S3 bucket without the file having to travel through the backend server. The implementation is written in python (backend) and vanilla js (frontend)."},
{"Title": "Python Test 219: Building Django Apps & SaaS Pegasus - Cory Zue", "Author": "variedthoughts", "Content": "Listen at podcast.pythontest.com/219 When starting a SaaS project using Django, there are tons of decisions. I've asked Cory Zue, creator of SaaS Pegasus, to help me sift through some common SaaS/Django decisions."},
{"Title": "Pure Python Physics Engine", "Author": "More-Tower9993", "Content": "What My Project Does The Physics Engine Called PhysEng, provides an easy to use environment and visualization combo in which to try out different physics or even provide a template to design your own accelleration/velocity fields. Besides the visualization aspect and numpy the basic functions of the Engine are written completely in 100% python. The features included in the Engine are:\nParticles, Soft Bodies, Anchor points\nBuilt in Fields: Drag, Uniform Force Fields, Gravity Between Particles, Octree Gravity etc"},
{"Title": "I made a Python text to speech library - Pyt2s", "Author": "asksumanth", "Content": "What my project does: It supports services like IBM Watson, Acapela and Stream labs' demo websites to convert your text to speech. Target audience: It's a toy project and would not recommend you to use in Production. Comparison: It's wayyyyy easy to use. Just pip install and use in your project. No extra setup required like other libraries. Also supports various languages and voices and accents. Check docs for more. Here is the link to repository. Please go do check it out and star it if it's helpful to you guys. Thank you. I made this library taking inspiration from this php tts library by chrisjp."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "In what way do you try out small things when developing?", "Author": "HatWithAChat", "Content": "I've noticed at work that my coworkers and I try out small things in different ways. Small things like if you want to try that adding two datetimes together behaves in the way you expect. Some people use jupyter notebook for this and others run python interactively in a separate command prompt. I usually run debug in whatever IDE I'm using and then letting it stop at the code I'm currently developing and then using the debug console to test things out. Sometimes this means just leaving the debugger at a breakpoint for half an hour while I continue writing code. Is my way of doing it weird or does it have any disadvantages? How do you usually test out things on the go in a good way?"},
{"Title": "üî≠ OpenTelemetry Architecture: Python SDK Overview", "Author": "roma-glushko", "Content": "Hey folks,\nI have just posted an article for those who want to go a little bit beyond the basic usage of OTEL and understand how it works under the hood. The post quickly touches on:\n- üî≠ History and the idea of OpenTelemetry\n- üßµ Distributed traces & spans. How span collection happens on the service side\n- üíº Baggage & trace ctx propagation\n- üìà Metrics collection. Views & aggregations. Metrics readers\n- üìë OTEL Logging integration\n- ü§ù Semantic conventions and why that is important\nBlog Post:\nLet me know what do you think and hope this is helpful for someone üôå"},
{"Title": "Interactive plots in the terminal", "Author": "Spiffidimus", "Content": "I made a library to create interactive plots in the terminal (pip install itrm). It uses braille characters (by default) to display the data with sub-character resolution. There are several keybindings for moving a vertical cursor left and right, for zooming in or out on data, and for changing which curve to focus on. There are occasions (such as when working with a server) where MatPlotLib is not an option and the terminal is the only available tool. But, in my opinion, it is actually faster to use this tool (itrm) to zoom in on interesting parts of data and analyze patterns than using other tools like MatPlotLib. In fact, with large data sets (~1 million points), this tool actually renders faster than MatPlotLib. Please check it out and let know what you think."},
{"Title": "Suggestions for a self-hosted authentication as a service?", "Author": "FlyingRaijinEX", "Content": "I have a simple backend REST API service that is serving a few ML models. I have made it \"secured\" by implementing an API key in order call those endpoints. I was wondering, how common it is for people to use services that can be self-hosted as their authentication/authorization. If it is common and reliable, what are the best options to go for? I've read that building your own authentication/authorization service with email verification, password reset, and social auth can be a pain. Also, did some googling and found this General - Fief. Has anyone ever tried using this? If so, how was the experience?"},
{"Title": "How to create a Discord Bot to launch a Minecraft server automatically", "Author": "chadicus-gigo", "Content": "Hi y'all, This might be off topic a bit from the normal stuff that gets posted here, but a while back I was messing around on a Minecraft server that I was hosting on Aternos (a free online Minecraft server host). Now since the server wasn't running on my computer (and since Aternos has a timeout policy to save server resources) it became annoying for my buddies to hop on the server if I was busy. They'd have to ask me to manually start the server from the webpage. So I had a free Saturday a couple of months ago and decided to remedy this problem. My source code is hosted on a GIGO Dev environment if y'all wanna check it out:"},
{"Title": "ArchiveFile: Unified interface for tar, zip, sevenzip, and rar files", "Author": "PredatorOwl", "Content": "What My Project Does archivefile is a wrapper around tarfile, zipfile, py7zr, and rarfile. The above libraries are excellent when you are dealing with a single archive format but things quickly get annoying when you have a bunch of mixed archives such as .zip, .7z, .cbr, .tar.gz, etc because each library has a slightly different syntax and quirks which you need to deal with. archivefile wraps the common methods from the above libraries to provide a unified interface that takes care of said differences under the hood. However, it's not as powerful as the libraries it wraps due to lack of support for features that are unique to a specific archive format and library."},
{"Title": "One pytest marker to track the performance of your tests", "Author": "toodarktoshine", "Content": "Hello Pythonistas!\nI just wrote a blog post about measuring performance inside pytest test cases. We dive into why it‚Äôs important to test for performance and how to integrate the measurements in the CI.\nHere is the link to the blog: https://codspeed.io/blog/one-pytest-marker-to-track-the-performance-of-your-tests"},
{"Title": "Hi! I've published a Python client for IBKR REST and WebSocket APIs - IBind. Hope you like it üëã", "Author": "VoyZan", "Content": "Hi! I want to share a library I've built recently. IBind is a REST and WebSocket Python client for Interactive Brokers Client Portal Web API. It is directed at IBKR users. You can find IBind on GitHub: https://github.com/Voyz/ibind What My Project Does: It is a REST and WebSocket API for the Interactive Brokers' Web API. I'm particularly proud of a few things in this release:\nThe REST and WebSocket API clients are based on an abstract base class RestClient and WsClient accordingly. These could be implemented to use some other Web APIs in a relatively straightforward way. I have in fact used a version of that for a cryptocurrency WebSocket API, and it is nice to see it adapt to a different environment."},
{"Title": "I made an easy and secure data lake for Pandas", "Author": "realstoned", "Content": "What My Project Does Shoots is essentially a \"data lake\" where you can easily store pandas dataframes, and retrieve them later or from different locations or in different tools. Shoots has a client and a server. After choosing a place to run the server, you can easily use the client to \"put\" and \"get\" dataframes. Shoots supports SQL, allowing you to put very large dataframes, and then use a query to only get a subset. Shoots also allows you to resample on the server. # put a dataframe, uploads it to the server  \ndf = pd.read\\_csv('sensor\\_data.csv')  \nshoots.put(\"sensor\\_data\", dataframe=df, mode=PutMode.REPLACE)  \n\n\n# retrieve the whole data frame  \ndf0 = shoots.get(\"sensor\\_data\")  \nprint(df0)  \n\n# or use sql to retrieve just some of the data  \nsql = 'select \"Sensor\\_1\" from sensor\\_data where \"Sensor\\_2\" < .2'  \ndf1 = shoots.get(\"sensor\\_data\", sql=sql)"},
{"Title": "What are your favourite pre-commit hooks and why?", "Author": "LatterConcentrate6", "Content": "Just getting started with pre-commit and I think it's awesome. Looking to find out what other code automation tools people are using. Let me know what works for you and why. Thanks!"},
{"Title": "How to create architecture diagrams from code in Jupyter Notebook", "Author": "writer_on_rails", "Content": "Hello world,I wrote an article about creating diagrams from code on Jupyter Notebook inside VS Code. It will give you a brief on the setup and also an overview of concepts. Within 5 minutes, you should be able to start making cool architecture diagrams. [TO MODERATOR: This link does not contain any paywalled or paid content. All the contents are available for free] Article link: https://ashgaikwad.substack.com/p/how-to-create-architecture-diagrams"},
{"Title": "Python Streamlit Spotlight Tutorial: an Interactive Dashboard using UNHCR Refugee Data", "Author": "jgloewen", "Content": "Python Streamlit is a terrific tool for creating interactive data visualizations. It packages all your visualizations up into a neat little application - including charts and maps - and displays them in your default browser. No muss, no fuss. Recently, I found a new dataset (to me) on the UN High Commission for Refugees (UNHCR) website. It contains country-to-country movements for refugees both from origin country and country of asylum Using this dataset, here's a step-by-step on how to code a Python Streamlit application that has:"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sensor-App: A Sensor Data Displaying/Streaming Android App written in Python", "Author": "StoneSteel_1", "Content": "Sensor-App is an Android App that's main focus is to help create a real-time mobile sensor data stream for computer applications, data collection, AR, VR, etc. Github: SensorApp\nFeatures of Sensor-App\nReal-Time Sensor Data display\nFaster Real-Time Sensor Data Streaming via TCP Sockets\nSimple and Easy setup of Data Streaming Server"},
{"Title": "Starter Code for a LLM-based AI Assistant", "Author": "2bytesgoat", "Content": "Hey everyone üëã TL;DR\nSince everyone is talking about the Humane AI Pin and the Rabbit R1, I decided to make a short 5 minute tutorial on how people can setup and customize their own little AI assistant on their machine. I've uploaded a video tutorial here: https://www.youtube.com/watch?v=2fD_SAouoOs&ab_channel=2BytesGoat And the Github code is here: https://github.com/2BYTESGOAT/AI-ASSISTANT Longer version"},
{"Title": "IP subnet or IP calculator tool need feedback", "Author": "nicanorflavier", "Content": "Hey folks, I've been dabbling with a Python project recently that's all about making life easier for us I.T. people. It's a nifty little tool that calculates IP subnets and does IP calculations from the command or CLI. Here's the GitHub link and the code: https://github.com/nicanorflavier/ipnet I‚Äôm pretty stoked about it, but I know there‚Äôs always room for improvement. So, I thought, better to turn to than the wise minds of this python community? I‚Äôm all ears for any feedback, tips, tricks, or advice you guys might have. Thanks a ton in advance!"},
{"Title": "UXsim 1.2.0 released with support for (self-driving) taxis and shared mobility", "Author": "Balance-", "Content": "Version 1.2.0 of UXsim is released, which allows simulating taxis, shared mobility and self-driving taxis! Main Changes in 1.2.0\nAdd taxi (aka. shared mobility) functions\nA standard vehicle in UXsim just travel from A to B and disappear. This is like a private owned vehicle.\nFrom this update, a Vehicle with mode=\"taxi\" behave like a taxi. Specifically, they travel through a network by passing through specific nodes that are dynamically updated, simulating passenger pickup and drop-off."},
{"Title": "Share Proejct: NLLB-200 Distill 350M en-ko", "Author": "SaeChan5", "Content": "Hello , I'm excited to share a project that was initially intended to use in my graduating product(Capstone) What My Proeject Does I made NLLB-200 Distill 350M model to translating English to Korean Target Audience GPU servers are quite expensive, so I made it for university students who can't cost the server (like me.) Comparison It's even smaller and faster the other NLLB-200 model. so it can be run with CPU! more details are in my page If you know Korean, please give me a lot of feedback https://github.com/newfull5/NLLB-200-Distilled-350M-en-ko thank you!!"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Best way to grade Jupyter-Notebooks?", "Author": "flying_Wahale", "Content": "I recently took a job with a professor, that includes helping with the grading of biweekly assignments. So I basically have now 30 Notebooks that I have to grade. Top of my head I can think of these approaches:\nConvert to PDF and write into the PDF\nDuplicate the Notebook and write the comments in extra blocks\nCreate a .txt file with all my note"},
{"Title": "How to auto-instrument Python servers w/ OpenTelemetry for performance & error monitoring", "Author": "__boba__", "Content": "Hi everyone! We've recently written up a guide for anyone running a Python server (ex. Flask, Django, FastAPI) to instrument their app to debug slow downs and errors using the CNCF OpenTelemetry project and their Python instrumentation package. It's really straightforward to get started with just a few lines of added code and commands to any Python project, so hopefully helps some people out as they're looking to add better instrumentation to their servers. Here's the tutorial: https://www.hyperdx.io/blog/opentelemetry-python-server-auto-instrumentation"},
{"Title": "ASCII plot backend package for matplotlib", "Author": "jetpack_away", "Content": "Hi I've made a package called mpl_ascii which is a backend for matplotlib. You can find it here: https://github.com/chriscave/mpl_ascii I would love to share it with others and see what you guys think What it is It is a backend for matplotlib that converts your plots into ASCII characters. At the moment I have only made support for: bar charts, scatter plots and line plots but if there's demand for more then I would love to keep working on it. Target Audience: Anyone using matplotlib to create plots who might also want to track how their plots change with their codebase (i.e. version control)."},
{"Title": "Seeking Your Input: Let's Co-Create FreeCodeCamp for python together", "Author": "globalwarming_isreal", "Content": "Hello all, This is probably my first post here. I usuallly lurk around here and Django subreddits. I've been brewing up an idea and I need your input before I take the plunge! Picture this: a website like FreeCodeCamp but for python and related technologies, a learning oasis where anyone can kickstart their journey from Python newbie to job-ready pro, and it's all free! But here's the thing, I want this to be our platform, crafted with your needs and dreams in mind. So, before I start, I need to know: would this be something that gets you excited? Imagine quizzes helping you find your starting point, interactive challenges that keep you in the zone, and a supportive community to cheer you on every step of the way. Plus, videos, written tutorials, and a progress tracker to keep you motivated!"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Pre-commit hook to keep coverage badge in README up to date", "Author": "60percentcocoa", "Content": "Wrote this as a tool to keep README coverage badges up to date without relying on 3rd party services or having to do anything extra, thought others might get some utility out of it: coverage-pre-commit. A .coverage file is expected at the root of the project, generated by running coverage run directly or using a plugin such as pytest-cov when running tests. Most convenient when used as a pre-push hook imo. Feel free to opine, be it positive or negative!"},
{"Title": "What is your best Tkinter project that you put a lot of effort into creating?", "Author": "_-Dan_-", "Content": "I want to hear your description of the project you are most proud of. I was just trying to find something on the Internet, but I didn't find much of interest. The only difficult project was CustomTkinter, which, as far as I know, was done entirely in Tkinter. Since it is possible to create something this complex, I'm sure you have something cool too.\nNote: I am expecting to hear projects more complex than a calculator :)"},
{"Title": "k8sAI - my open-source GPT CLI tool for Kubernetes!", "Author": "Wild_Plantain528", "Content": "What my project does: I wanted to share an open-source project I‚Äôve been working on called k8sAI. It‚Äôs a personal AI Kubernetes expert that can answer questions about your cluster, suggests commands, and even executes relevant kubectl commands to help diagnose and suggest fixes to your cluster, all in the CLI! Target Audience: As a relative newcomer to k8s, this tool has really streamlined my workflow. I can ask questions about my cluster, k8sAI will run kubectl commands to gather info, and then answer those question. It‚Äôs also found several issues in my cluster for me - all I‚Äôve had to do is point it in the right direction. I‚Äôve really enjoyed making and using this so I thought it could be useful for others. Added bonus is that you don‚Äôt need to copy and paste into ChatGPT anymore!"},
{"Title": "Cross platform python3 shebang", "Author": "tedkotz", "Content": "There is no shebang line that actually works across platforms for python 3. I would like one that works on unmodified :\nDebian shell (Dropped python2, falls under PEP 394)\nOlder Linux shells that still have python pointing to python2 (PEP 394)\nWindows cmd.exe shell (this really just means one that will work with PEP 397)\nGitbash for Windows (sort of a weird half sibling that respects shebangs)"}
]