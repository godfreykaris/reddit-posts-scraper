[
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Content": "Daily Thread"},
{"Title": "Should all Python projects have type hinting?", "Content": "I recently released a \nvery simple API wrapper\n and in my efforts to become a better programmer I asked in a Python Discord for feedback.\n  \n\n    One bloke was very adamant I should use type hints. I understand the need/desire for type hints but this commentator basically was implying that all Python code should be written with type hints.\n  \n\n    For a simple project I didn't think it was necessary but I'm curious as to what this community thinks.\n  \n\n    How do you make the decision as to when to use type hints? Do you do it for all projects, regardless of size? What are your general thoughts?"},
{"Title": "Anyone have experience using Vercel to host Python projects?", "Content": "Vercel is really convenient for NextJS and tbh it would be really nice to host and manage everything from one place.\n  \n\n    Unfortunately the documentation is pretty sparse and there doesn't seem to be many resources on the topic."},
{"Title": "Textual Serve - Serve TUIs in the browser", "Content": "Textual Serve (\nhttps://github.com/Textualize/textual-serve\n) is a project which serves TUIs (built with Textual) in the browser.\n  \n\n    This is self-hosted, so you don't need to rely on any external service."},
{"Title": "I made a simple python script which can evaluate a mathematical expression from a string", "Content": "I made this simple Python file a year ago. I thought you might be interested.\n  \n\n    It is only 100 lines long and uses no external libraries. It can do math on a string like this:\n  \n\n    \"What's fifty three+7*6/2?\" -> 74\n  \n\n    It can convert written-out numbers to actual numbers, it knows constants like PI, and it can do the actual math to get a single output.\n  \n\n\nhttps://github.com/SubatomicPlanets/SimpleStringMath"},
{"Title": "Python on ARM laptops", "Content": "Hi there !\n  \n\n    I'm thinking about buying an ARM windows laptop with the new Qualcomm chips. They will replace the x86 so I was wondering : Will There be a massive risk of non-compatibility of Python packages ? I guess they are made for x86 but I don't know if it's possible to work with them with an ARM based CPU."},
{"Title": "Python Project Management Primer", "Content": "This article\n explores how to manage Python project environments and dependencies, as well as how to structure projects effectively."},
{"Title": "karpet 0.5 released", "Content": "What's karpet library:\n\n\n\n    Library for fetching coin/token historical data, trends and more (official and unofficial APIs).\n  \n\n\nSource code:\n\n\n\n\nhttps://gitlab.com/imn1/karpet\n\n\n\n\nReleases including changelog:\n\n\n\n\nhttps://gitlab.com/imn1/karpet/-/releases"},
{"Title": "Time Series Forecasting and Simulations: Python Signature Transformation Method", "Content": "Signature of Time Series! Very interesting topic!\n  \n\n\nhttps://opendatascience.com/time-series-forecasting-and-simulations-python-signature-transformation-method/"},
{"Title": "a new mime detect library", "Content": "Hi, all:\n  \n\n    I created a library to detect mime. it's easy to customize. it's apache tika compatible, but it's implemented in pure python.\n  \n\n\nhttps://github.com/chenkovsky/fast-mime\n\n\n\n    Please give me a star, if you find it helps."},
{"Title": "Apps to code on ipad", "Content": "I just started learning python and I was wondering if there are any reliable python apps I can use to run the system on ipad."},
{"Title": "Video Quality Ranker", "Content": "What my project does\n\n    Ranks videos based on overall quality. Takes into account multiple metrics to determine what quality is the best.\n  \nTarget audience\n\n    Home users / Video enthusiasts\n  \nComparison\n\n    This project uses the following metrics to rank videos:\n  \n\n\n\n\n\n\nResolution\n: Higher resolution videos are preferred.\n  \n\n\n\n\n\n\nFrame Rate\n: Videos with higher frame rates are ranked higher.\n  \n\n\n\n\n\n\nBitrate\n: Higher bitrate often indicates better quality.\n  \n\n\n\n\n\n\nCodec\n: Some codecs provide better quality than others at the same bitrate.\n  \n\n\n\n\n\n    The script extracts these metrics using \nffprobe\n from the FFmpeg suite and sorts the videos accordingly. Here's how the metrics are used:\n  \n\n\n\n\n\n\nResolution\n: The script first compares the resolution (width x height) of the videos. Higher resolutions are ranked higher.\n  \n\n\n\n\n\n\nFrame Rate\n: If two videos have the same resolution, the one with the higher frame rate is ranked higher.\n  \n\n\n\n\n\n\nBitrate\n: For videos with the same resolution and frame rate, the bitrate is used to determine the quality.\n  \n\n\n\n\n\n\nCodec\n: In case of a tie in all other metrics, the codec is considered to break the tie.\n  \n\n\n\n\nAccess the Script\n\n    You can access the script on GitHub \nhere"},
{"Title": "I need advice on using google pay API.", "Content": "So, as mentioned in the title I am making a smart expense tracker web app using python and flask, is obtaining transaction history from Google Pay safe using API, if Yes How should i proceed with that and if No what is a better way to obtain the transaction history so that the user's privacy and safety in not compromised."},
{"Title": "CherrySaaS [WIP üöß]: An open-source SaaS template for Reflex. üå∏", "Content": "What My Project Does\n\n\n\n\nCherrySaaS\n is a 100% \nopen-source\n \nPythonic SaaS template\n that lets you build crazy beautiful SaaS using \nChakra and Radix UIs powered by Reflex\n. It is currently a work in progress and requires community contribution because I don't have the energy to write the entire template. If I were to do an entire template, I would never open-source it as it would become hard to maintain alone. So, I need collaborators and community effort to remain it to be open-sourced. Here's the \nplanning\n in the notion (Comments are allowed on the notion site).\n  \n\n\nTarget Audience\n\n\n\n    It is meant for production but requires community contributions to complete. It is currently in work progress but if people make useful contributions, it can be accomplished faster.\n  \n\n\nComparison\n\n\n\n    The reason is that it is a rare project as no free SaaS template has ever been made in Pure-Python. There are proprietary 2 SaaS templates made using Reflex. So I decided to make a free one for the community too. I have looked at a SaaS template called \nshipfast.com\n (which is getting popular nowadays). Ah, yes this also became an inspiration but I wanted to make one free.\n  \n\n\nSelling Shovels During The Gold Rush ‚ùå\nGiving away shovels for free during the Gold Rush ‚úî\n\n\n\n    If you want to be a collaborator, reach to me out on Discord (adarshgourabmahalik) or post your GitHub email in this \ndiscussion\n. Here's a discord link to preview the landing page of the template. \nhttps://discord.com/channels/1029853095527727165/1063735841333198938/1252953503106732053"},
{"Title": "Conway's game of life. can you find an optimization?", "Content": "little challenge for you, how fast can this be pushed in python?\n  \n\n    This function takes a numpy.ndarray / 2d numpy array, and returns the updated array. iv updated this function several times, this i the fastiest so far.\n  \n\n    numba jit dosn't like the double roll, and its faster than for loops in jit.\n  \ndef conways_game_of_life(board:numpy.ndarray):\n  n_neighbour = sum(numpy.roll(numpy.roll(board, i, 0), j, 1) for i in (-1, 0, 1) for j in (-1, 0, 1) if (i != 0 or j != 0))\n  board[(n_neighbour<2) | (n_neighbour>3)] = 0\n  board[(n_neighbour==3)] = 1\n  return board"},
{"Title": "A JIT compiler for CPython", "Content": "Brandt Bucher talks on JIT compiler for Python at CPython Core Developer Sprint. Brandt is  a member of the \nFaster CPython project\n, which is working on making the reference implementation of the language faster via a variety of techniques.\n  \n\n\nhttps://www.youtube.com/watch?v=HxSHIpEQRjs"},
{"Title": "Experimental Python Wheels for Windows on ARM64", "Content": "For anyone on a (new) Windows on Arm system, I found this great repo with Arm64 Windows wheels:\n  \n\n\n\n\n\n\nhttps://github.com/cgohlke/win_arm64-wheels\n\n\n\n\n\n\n\n\nHighlights\n\n\n\n\n\n\n\n    256 packages for Python 3.12\n  \n\n\n\n\n\n    Built with numpy 2 if possible\n  \n\n\n\n\n\n    Scipy stack: numpy with OpenBLAS, scipy, matplotlib, Pandas, scikit-learn, scikit-image, numba, etc.\n  \n\n\n\n\n\n    GIS stack: GDAL, netCDF4, pyproj, Shapely, rasterio, basemap, Fiona, etc.\n  \n\n\n\n\n\n    Image IO: Imagecodecs, Pillow, OpenImageIO, OpenEXR, pylibCZIrw, etc.\n  \n\n\n\n\n\n    Noteworthy: Pytorch, Kivy, opencv_python_headless, pymol-open-source, pywin32"},
{"Title": "json3pdf : Batch OCR for high quality document archiving.", "Content": "What my project does\n\n    Performs OCR on scanned Books using Microsoft Azure Document Intelligence read\n  \nTarget audience\n\n    People who are unsatisfied with traditional OCR People who want to add clear text to the original PDF and not just extract the text. People who want to archive documents at best quality.\n  \nComparasion\n\n    In my use case traditional OCR was near to useless. Tesseract was meh, Google API didn't process large files. Document Intelligence takes up to 500MB (although in practice a little less), and is possible to OCR 400-600 pages over books in batch by dividing and merging the source and results locally by only a few chunks. It doesn't provide the text in PDF form so that was my reason to start this project.\n  \n\n    Still in alpha and in separate modules and a lot of rigid coding, but it is working fine for my original task so thought maybe I'd showcase it.\n  \n\n\nhttps://github.com/DesertDoggy/json3pdf"},
{"Title": "Give me an idea for my project (telegram bot) in python.", "Content": "Give me an idea for my project (telegram bot) in python, I'm using aiogram3 for it. And i will mention your nickname/name in the project. Thanks."},
{"Title": "Parsing Python ASTs 20x faster with Rust", "Content": "https://www.gauge.sh/blog/parsing-python-asts-20x-faster-with-rust"},
{"Title": "Trying to find this package", "Content": "I should have saved the post but maybe 4-6 months ago I was reading a post (I am pretty sure it was in \nr/Python\n) where someone created a package that creates a visual for data contained within a list. For example, let‚Äôs say I have a data frame where one of the columns is named ‚Äúcolors‚Äù and each record contains a list of colors. One record might be [black,blue,yellow] another record might have [blue,yellow,black]. The visual had two parts where the top was a column chart to show the frequency of the list combinations and below the column chart was more of a table that showed each ‚Äúcolor‚Äù as one column and then across the row for each color and under the columns from the chart above was an indicator of sorts that would be greyed out of the color for that row was not in the corresponding columns list and highlighted another color of it was. Anyways this is probably a long shot but either the package or the name of this visual would be super helpful. Thanks python community!"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Content": "Daily Thread"},
{"Title": "I am Nominating Myself for PSF Board of Directors", "Content": "I am nominating myself for the PSF Board of Directors! üåü Check out my latest blog post to learn more about my journey, my commitment to the Python community, and my application for an OFAC license to expand educational activities in restricted areas.\n  \n\n    Read more at \nmy blog"},
{"Title": "Scrapegraph AI Tutorial; Scrape Websites Easily With LLaMA AI", "Content": "I'm going to show you how to get Scrapegraph AI up and running, how to set up a language model, how to process JSON, scrape websites, use different AI models, and even turning your data into audio. Sounds like a lot, but it's easier than you think, and I'll walk you through it step by step.\n  \n\n\nhttps://www.scrapingbee.com/blog/scrapegraph-ai-tutorial-scrape-websites-easily-with-llama-ai/"},
{"Title": "Looking for a good WYZIWIG/visual editor to go with with Jinja + Weasyprint", "Content": "End goal is to produce PDF using external data and a template. Needs to support Jinja tags, conditionals and loops.\n  \n\n    Using \nhttps://github.com/Kozea/WeasyPrint\n and \nhttps://github.com/pallets/jinja\n as base stack (Open to other suggestions)\n  \n\n    I was thinking of building some base HTML templates but would be awesome if I could find a visual HTML editor that could produce code 100% compatible with Weasyprint so that end users can build templates by themselves or modify existing ones.\n  \n\n    Could be Wysiwyg based using \nhttps://editorjs.io\n or \nhttps://github.com/slab/quill\nor more advanced web builders like \nhttps://github.com/GrapesJS/grapesjs\n\n\n\n    Anybody built something similar?"},
{"Title": "What are the hardware requirements in a laptop to run Python + Future AI based projects?", "Content": "I will buy a laptop for coding purposes but just started learning and practising Python using Pyecharm. What are the software requirements that lead to hardware specs a general Python coder must look into?\n  \n\n    Please suggest the hardware setup within a pocket friendly budget."},
{"Title": "rug 0.10.4 released", "Content": "What's rug library:\n\n\n\n    Library for fetching various stock data from the internet (official and unofficial APIs).\n  \n\n\nSource code:\n\n\n\n\nhttps://gitlab.com/imn1/rug\n\n\n\n\nReleases including changelog:\n\n\n\n\nhttps://gitlab.com/imn1/rug/-/releases"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Content": "Daily Thread"},
{"Title": "Should all Python projects have type hinting?", "Content": "I recently released a \nvery simple API wrapper\n and in my efforts to become a better programmer I asked in a Python Discord for feedback.\n  \n\n    One bloke was very adamant I should use type hints. I understand the need/desire for type hints but this commentator basically was implying that all Python code should be written with type hints.\n  \n\n    For a simple project I didn't think it was necessary but I'm curious as to what this community thinks.\n  \n\n    How do you make the decision as to when to use type hints? Do you do it for all projects, regardless of size? What are your general thoughts?"},
{"Title": "Anyone have experience using Vercel to host Python projects?", "Content": "Vercel is really convenient for NextJS and tbh it would be really nice to host and manage everything from one place.\n  \n\n    Unfortunately the documentation is pretty sparse and there doesn't seem to be many resources on the topic."},
{"Title": "Textual Serve - Serve TUIs in the browser", "Content": "Textual Serve (\nhttps://github.com/Textualize/textual-serve\n) is a project which serves TUIs (built with Textual) in the browser.\n  \n\n    This is self-hosted, so you don't need to rely on any external service."},
{"Title": "I made a simple python script which can evaluate a mathematical expression from a string", "Content": "I made this simple Python file a year ago. I thought you might be interested.\n  \n\n    It is only 100 lines long and uses no external libraries. It can do math on a string like this:\n  \n\n    \"What's fifty three+7*6/2?\" -> 74\n  \n\n    It can convert written-out numbers to actual numbers, it knows constants like PI, and it can do the actual math to get a single output.\n  \n\n\nhttps://github.com/SubatomicPlanets/SimpleStringMath"},
{"Title": "Python on ARM laptops", "Content": "Hi there !\n  \n\n    I'm thinking about buying an ARM windows laptop with the new Qualcomm chips. They will replace the x86 so I was wondering : Will There be a massive risk of non-compatibility of Python packages ? I guess they are made for x86 but I don't know if it's possible to work with them with an ARM based CPU."},
{"Title": "Python Project Management Primer", "Content": "This article\n explores how to manage Python project environments and dependencies, as well as how to structure projects effectively."},
{"Title": "karpet 0.5 released", "Content": "What's karpet library:\n\n\n\n    Library for fetching coin/token historical data, trends and more (official and unofficial APIs).\n  \n\n\nSource code:\n\n\n\n\nhttps://gitlab.com/imn1/karpet\n\n\n\n\nReleases including changelog:\n\n\n\n\nhttps://gitlab.com/imn1/karpet/-/releases"},
{"Title": "Time Series Forecasting and Simulations: Python Signature Transformation Method", "Content": "Signature of Time Series! Very interesting topic!\n  \n\n\nhttps://opendatascience.com/time-series-forecasting-and-simulations-python-signature-transformation-method/"},
{"Title": "a new mime detect library", "Content": "Hi, all:\n  \n\n    I created a library to detect mime. it's easy to customize. it's apache tika compatible, but it's implemented in pure python.\n  \n\n\nhttps://github.com/chenkovsky/fast-mime\n\n\n\n    Please give me a star, if you find it helps."},
{"Title": "Apps to code on ipad", "Content": "I just started learning python and I was wondering if there are any reliable python apps I can use to run the system on ipad."},
{"Title": "Video Quality Ranker", "Content": "What my project does\n\n    Ranks videos based on overall quality. Takes into account multiple metrics to determine what quality is the best.\n  \nTarget audience\n\n    Home users / Video enthusiasts\n  \nComparison\n\n    This project uses the following metrics to rank videos:\n  \n\n\n\n\n\n\nResolution\n: Higher resolution videos are preferred.\n  \n\n\n\n\n\n\nFrame Rate\n: Videos with higher frame rates are ranked higher.\n  \n\n\n\n\n\n\nBitrate\n: Higher bitrate often indicates better quality.\n  \n\n\n\n\n\n\nCodec\n: Some codecs provide better quality than others at the same bitrate.\n  \n\n\n\n\n\n    The script extracts these metrics using \nffprobe\n from the FFmpeg suite and sorts the videos accordingly. Here's how the metrics are used:\n  \n\n\n\n\n\n\nResolution\n: The script first compares the resolution (width x height) of the videos. Higher resolutions are ranked higher.\n  \n\n\n\n\n\n\nFrame Rate\n: If two videos have the same resolution, the one with the higher frame rate is ranked higher.\n  \n\n\n\n\n\n\nBitrate\n: For videos with the same resolution and frame rate, the bitrate is used to determine the quality.\n  \n\n\n\n\n\n\nCodec\n: In case of a tie in all other metrics, the codec is considered to break the tie.\n  \n\n\n\n\nAccess the Script\n\n    You can access the script on GitHub \nhere"},
{"Title": "I need advice on using google pay API.", "Content": "So, as mentioned in the title I am making a smart expense tracker web app using python and flask, is obtaining transaction history from Google Pay safe using API, if Yes How should i proceed with that and if No what is a better way to obtain the transaction history so that the user's privacy and safety in not compromised."},
{"Title": "CherrySaaS [WIP üöß]: An open-source SaaS template for Reflex. üå∏", "Content": "What My Project Does\n\n\n\n\nCherrySaaS\n is a 100% \nopen-source\n \nPythonic SaaS template\n that lets you build crazy beautiful SaaS using \nChakra and Radix UIs powered by Reflex\n. It is currently a work in progress and requires community contribution because I don't have the energy to write the entire template. If I were to do an entire template, I would never open-source it as it would become hard to maintain alone. So, I need collaborators and community effort to remain it to be open-sourced. Here's the \nplanning\n in the notion (Comments are allowed on the notion site).\n  \n\n\nTarget Audience\n\n\n\n    It is meant for production but requires community contributions to complete. It is currently in work progress but if people make useful contributions, it can be accomplished faster.\n  \n\n\nComparison\n\n\n\n    The reason is that it is a rare project as no free SaaS template has ever been made in Pure-Python. There are proprietary 2 SaaS templates made using Reflex. So I decided to make a free one for the community too. I have looked at a SaaS template called \nshipfast.com\n (which is getting popular nowadays). Ah, yes this also became an inspiration but I wanted to make one free.\n  \n\n\nSelling Shovels During The Gold Rush ‚ùå\nGiving away shovels for free during the Gold Rush ‚úî\n\n\n\n    If you want to be a collaborator, reach to me out on Discord (adarshgourabmahalik) or post your GitHub email in this \ndiscussion\n. Here's a discord link to preview the landing page of the template. \nhttps://discord.com/channels/1029853095527727165/1063735841333198938/1252953503106732053"},
{"Title": "Conway's game of life. can you find an optimization?", "Content": "little challenge for you, how fast can this be pushed in python?\n  \n\n    This function takes a numpy.ndarray / 2d numpy array, and returns the updated array. iv updated this function several times, this i the fastiest so far.\n  \n\n    numba jit dosn't like the double roll, and its faster than for loops in jit.\n  \ndef conways_game_of_life(board:numpy.ndarray):\n  n_neighbour = sum(numpy.roll(numpy.roll(board, i, 0), j, 1) for i in (-1, 0, 1) for j in (-1, 0, 1) if (i != 0 or j != 0))\n  board[(n_neighbour<2) | (n_neighbour>3)] = 0\n  board[(n_neighbour==3)] = 1\n  return board"},
{"Title": "A JIT compiler for CPython", "Content": "Brandt Bucher talks on JIT compiler for Python at CPython Core Developer Sprint. Brandt is  a member of the \nFaster CPython project\n, which is working on making the reference implementation of the language faster via a variety of techniques.\n  \n\n\nhttps://www.youtube.com/watch?v=HxSHIpEQRjs"},
{"Title": "Experimental Python Wheels for Windows on ARM64", "Content": "For anyone on a (new) Windows on Arm system, I found this great repo with Arm64 Windows wheels:\n  \n\n\n\n\n\n\nhttps://github.com/cgohlke/win_arm64-wheels\n\n\n\n\n\n\n\n\nHighlights\n\n\n\n\n\n\n\n    256 packages for Python 3.12\n  \n\n\n\n\n\n    Built with numpy 2 if possible\n  \n\n\n\n\n\n    Scipy stack: numpy with OpenBLAS, scipy, matplotlib, Pandas, scikit-learn, scikit-image, numba, etc.\n  \n\n\n\n\n\n    GIS stack: GDAL, netCDF4, pyproj, Shapely, rasterio, basemap, Fiona, etc.\n  \n\n\n\n\n\n    Image IO: Imagecodecs, Pillow, OpenImageIO, OpenEXR, pylibCZIrw, etc.\n  \n\n\n\n\n\n    Noteworthy: Pytorch, Kivy, opencv_python_headless, pymol-open-source, pywin32"},
{"Title": "json3pdf : Batch OCR for high quality document archiving.", "Content": "What my project does\n\n    Performs OCR on scanned Books using Microsoft Azure Document Intelligence read\n  \nTarget audience\n\n    People who are unsatisfied with traditional OCR People who want to add clear text to the original PDF and not just extract the text. People who want to archive documents at best quality.\n  \nComparasion\n\n    In my use case traditional OCR was near to useless. Tesseract was meh, Google API didn't process large files. Document Intelligence takes up to 500MB (although in practice a little less), and is possible to OCR 400-600 pages over books in batch by dividing and merging the source and results locally by only a few chunks. It doesn't provide the text in PDF form so that was my reason to start this project.\n  \n\n    Still in alpha and in separate modules and a lot of rigid coding, but it is working fine for my original task so thought maybe I'd showcase it.\n  \n\n\nhttps://github.com/DesertDoggy/json3pdf"},
{"Title": "Give me an idea for my project (telegram bot) in python.", "Content": "Give me an idea for my project (telegram bot) in python, I'm using aiogram3 for it. And i will mention your nickname/name in the project. Thanks."},
{"Title": "Parsing Python ASTs 20x faster with Rust", "Content": "https://www.gauge.sh/blog/parsing-python-asts-20x-faster-with-rust"},
{"Title": "Trying to find this package", "Content": "I should have saved the post but maybe 4-6 months ago I was reading a post (I am pretty sure it was in \nr/Python\n) where someone created a package that creates a visual for data contained within a list. For example, let‚Äôs say I have a data frame where one of the columns is named ‚Äúcolors‚Äù and each record contains a list of colors. One record might be [black,blue,yellow] another record might have [blue,yellow,black]. The visual had two parts where the top was a column chart to show the frequency of the list combinations and below the column chart was more of a table that showed each ‚Äúcolor‚Äù as one column and then across the row for each color and under the columns from the chart above was an indicator of sorts that would be greyed out of the color for that row was not in the corresponding columns list and highlighted another color of it was. Anyways this is probably a long shot but either the package or the name of this visual would be super helpful. Thanks python community!"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Content": "Daily Thread"},
{"Title": "I am Nominating Myself for PSF Board of Directors", "Content": "I am nominating myself for the PSF Board of Directors! üåü Check out my latest blog post to learn more about my journey, my commitment to the Python community, and my application for an OFAC license to expand educational activities in restricted areas.\n  \n\n    Read more at \nmy blog"},
{"Title": "Scrapegraph AI Tutorial; Scrape Websites Easily With LLaMA AI", "Content": "I'm going to show you how to get Scrapegraph AI up and running, how to set up a language model, how to process JSON, scrape websites, use different AI models, and even turning your data into audio. Sounds like a lot, but it's easier than you think, and I'll walk you through it step by step.\n  \n\n\nhttps://www.scrapingbee.com/blog/scrapegraph-ai-tutorial-scrape-websites-easily-with-llama-ai/"},
{"Title": "Looking for a good WYZIWIG/visual editor to go with with Jinja + Weasyprint", "Content": "End goal is to produce PDF using external data and a template. Needs to support Jinja tags, conditionals and loops.\n  \n\n    Using \nhttps://github.com/Kozea/WeasyPrint\n and \nhttps://github.com/pallets/jinja\n as base stack (Open to other suggestions)\n  \n\n    I was thinking of building some base HTML templates but would be awesome if I could find a visual HTML editor that could produce code 100% compatible with Weasyprint so that end users can build templates by themselves or modify existing ones.\n  \n\n    Could be Wysiwyg based using \nhttps://editorjs.io\n or \nhttps://github.com/slab/quill\nor more advanced web builders like \nhttps://github.com/GrapesJS/grapesjs\n\n\n\n    Anybody built something similar?"},
{"Title": "What are the hardware requirements in a laptop to run Python + Future AI based projects?", "Content": "I will buy a laptop for coding purposes but just started learning and practising Python using Pyecharm. What are the software requirements that lead to hardware specs a general Python coder must look into?\n  \n\n    Please suggest the hardware setup within a pocket friendly budget."},
{"Title": "rug 0.10.4 released", "Content": "What's rug library:\n\n\n\n    Library for fetching various stock data from the internet (official and unofficial APIs).\n  \n\n\nSource code:\n\n\n\n\nhttps://gitlab.com/imn1/rug\n\n\n\n\nReleases including changelog:\n\n\n\n\nhttps://gitlab.com/imn1/rug/-/releases"},
{"Title": "NumPy 2.0.0 is the first major release since 2006.", "Content": "NumPy 2.0.0 is the first major release since 2006.\n  \n\n\n\n\n\n\nhttps://github.com/numpy/numpy/releases/tag/v2.0.0\n\n\n\n\n\n\n\n\nhttps://numpy.org/devdocs/release/2.0.0-notes.html\n\n\n\n\n\n\n\n\nhttps://numpy.org/devdocs/numpy_2_0_migration_guide.html"},
{"Title": "Load Tests Python Task Queues", "Content": "What My Project Does\n\n\n\n    While looking for task queues, I found that there are many options available in the Python ecosystem, making it really hard to choose the right one. To get a sense of how each library performs and to help make an informed decision, I conducted a load test on some of the most popular ones: Python-RQ, ARQ, Celery, Huey, and Dramatiq.\n  \n\n\nTarget Audience\n\n\n\n    I hope my findings can help those who are also looking for a task queue solution in Python.\n  \n\n\nComparison\n\n\n\n    Most articles out there seem to focus on comparing the features of these libraries but rarely discuss performance. While there could be a lot of improvements on my tests, I think it still provide some different insights into how each library handles heavy loads and concurrency.\n  \n\n\nLinks:\n\n\n\n    You can read  my findings¬†\non my blog\n\n\n\n    Check out the source code:¬†\non Github\n\n\n\n    Thanks"},
{"Title": "Aurora: An extensible Python static site generator", "Content": "What My Project Does\n\n\n\n\nAurora\n is a fast, extensible Python static site generator. With Aurora, I can generate my personal website (~1,700 files, with multiple layers of jinja2 templates for each page) in < 4 seconds. Aurora generated 292,884 pages from a Hacker News post dataset in 2m:20s.\n  \n\n    Aurora supports incremental static regeneration, where pages can be regenerated in under 400ms, with hot reloading. I documented how this works \non my blog\n.\n  \n\n\nTarget Audience\n\n\n\n    I'm building Aurora to help me run my website, but it is built to be general so you can use it for your own projects. I would love feedback!\n  \n\n    I want this to be a tool for running static sites in production, at scale.\n  \n\n\nComparison\n\n\n\n    Aurora is inspired by the folder structure of Jekyll, but is written in Python. It has a hooks API that lets you define custom Python functions that manipulate the state of a page. This allows you to implement custom behaviours in isolation of the engine itself. I use this to open link previews from a cache that I plan to use on my website, among other things."},
{"Title": "Looking to learn Tkinter", "Content": "Does anyone know of a full course to learn the Python Tkinter library? I want courses that\n  \n\n\n\n\n\n    Are in video format\n  \n\n\n\n\n\n    Are not FreeCodeCamp\n  \n\n\n\n\n\n    Do not exceed 8 hours\n  \n\n\n\n\n\n    Optionally in these full courses, I also want to see\n  \n\n\n\n\n\n    Examples with explanations\n  \n\n\n\n\n\n    Mini projects\n  \n\n\n\n\n\n    How to package and publish apps made with Tkinter"},
{"Title": "Suggestion: make ray.io a part of Python's std lib", "Content": "Imagine having the option to write code once and run on multiple cores or on the cluster as part of the std lib. I know there's a company (currently) behind it - Anyscale, also not sure what the license is but other than that, what's holding the Py community back?"},
{"Title": "Advise on choosing UI technology with Python", "Content": "I am new to python and currently working on simple 3 layer web application -\n  \n\n\n\n\n\n    frontend - ?\n  \n\n\n\n\n\n    backend API to fetch data from DB - python\n  \n\n\n\n\n\n    DB - cloud\n  \n\n\n\n\n\n    This application has main intention to fetch data from DB, display graphs , table format data etc.  also perform some combination analysis of data and show on UI.\n  \n\n    Which less complex and stable technology I should prefer for frontend ? python flask, Bulma, Mesop by google or any other ? Thank you."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Content": "Daily Thread"},
{"Title": "Ruff: A Modern Python Linter for Error-Free and Maintainable Code", "Content": "Linting is essential to writing clean and readable code to share with others. A linter, like Ruff, is a tool that analyzes your code and looks for errors, stylistic issues, and suspicious constructs. Linting allows you to address issues and improve your code quality before you commit your code and share it with others.\n  \n\n    Ruff is a modern linter that‚Äôs extremely fast and has a simple interface, making it straightforward to use. It also aims to be a drop-in replacement for many other linting and formatting tools, such as Flake8, isort, and Black. It‚Äôs quickly becoming one of the most popular Python linters.\n  \nInstalling Ruff\n\n    Now that you know why linting your code is important and how Ruff is a powerful tool for the job, it‚Äôs time to install it. Thankfully, Ruff works out of the box, so no complicated installation instructions or configurations are needed to start using it.\n  \n\n    Assuming your project is already set up with a virtual environment, you can install Ruff in the following ways:\n  \n```bash\n$ python -m pip install ruff\n```\n\nYou can check that Ruff installed correctly by using the ruff version command:\n\n```bash\n$ ruff version\nruff 0.4.7\n```\nLinting Your Python Code\n\n    While linting helps keep your code consistent and error-free, it doesn‚Äôt guarantee that your code will be bug-free. Finding the bugs in your code is best handled with a debugger and adequate testing, which won‚Äôt be covered in this tutorial. Coming up in the next sections, you‚Äôll learn how to use Ruff to check for errors and speed up your workflow.\n  \nChecking for Errors\n```bash\n$ ruff check\none_ring.py:1:8: F401 [*] `os` imported but unused\none_ring.py:10:12: F821 Undefined name `name`\nFound 2 errors.\n[*] 1 fixable with the `--fix` option.\n```\n\n    Success! Ruff found two errors. Not only does it show the file and line numbers of the errors, but it also gives you error codes and messages. In addition, it lets you know that one of the two errors is fixable. Great!\n  \n\n    You can tell Ruff to fix errors by applying the --fix flag. Here‚Äôs what happens when you follow its suggestion:\n  \n```bash\n$ ruff check --fix\none_ring.py:9:12: F821 Undefined name `name`\nFound 2 errors (1 fixed, 1 remaining).\n```\n\n    You can find the rest of this Free tutorial \nhere"},
{"Title": "Advice for creating 3D modelling program", "Content": "I am creating a Python program which models 3D shapes so that they can be saved and or interacted with (i.e. rotated). The process currently takes a while to render shapes consisting of multiple materials. The libraries being implemented are currently matplotlib and numpy. What would you advise for improving the rendering process (library choice etc)?"},
{"Title": "Efficient Resource Management in Python: A Guide to Using Context Managers", "Content": "Managing resources efficiently in Python is crucial to prevent memory leaks and ensure optimal performance. One of the best ways to handle resource allocation and deallocation is through the use of context managers. In my latest blog post, I dive deep into the concept of context managers, their significance, and how to implement them using both the built-in `with` statement and the `contextlib` module.\n  \n\n    Here's a brief overview of what you'll find in the article:\n  \n\n\nUnderstanding Context Managers:\n\n\n\n    What They Are: Context managers help manage resources such as file handling and database connections by setting up a temporary runtime context and cleaning up after the operations are completed.\n  \n\n    The `with` Statement: The primary way to use context managers in Python, ensuring that resources are properly handled even if an exception occurs.\n  \n\n    The `contextlib` Module: Provides utilities for creating and working with context managers, offering more control over resource management.\n  \n\n\nUsing Context Managers:\n\n\n\n    Built-in Context Managers: How to use the `with` statement with built-in context managers like file handling.\n  \n\n\nfile_path = \"Context.txt\"\n\n\n\n\nwith open(file_path, 'r') as file:\n\n\n\n\nfile_content = file.read()\n\n\n\n\nprint(\"The Content of file is:\")\n\n\n\n\nprint(file_content)\n\n\n\n\nCustom Context Managers:\n Implementing custom context managers using the `__enter__()` and `__exit__()` methods.\n  \n\n\nclass File:\n\n\n\n\ndef __init__(self, filename, mode):\n\n\n\n\nself.filename = filename\n\n\n\n\nself.mode = mode\n\n\n\n\ndef __enter__(self):\n\n\n\n\nprint(f\"Opening {self.filename} .......\")\n\n\n\n\nself.file = open(self.filename, self.mode)\n\n\n\n\nreturn self.file\n\n\n\n\ndef __exit__(self, exc_type, exc_value, traceback):\n\n\n\n\nprint(f\"Closing {self.filename} ......\")\n\n\n\n\nself.file.close()\n\n\n\n\nwith File('Context.txt', 'r') as file:\n\n\n\n\ncontent = file.read()\n\n\n\n\nprint(content)\n\n\n\n\nAdvanced Techniques:\n\n\n\n    The `contextlib` Decorator: Creating context managers using the `contextmanager` decorator.\n  \n\n\nfrom contextlib import contextmanager\n\n\n\n\ncontextmanager\n\n\n\n\ndef file(filename, mode):\n\n\n\n\nprint(\"This is the implicit ENTER block\")\n\n\n\n\nmy_file = open(filename, mode)\n\n\n\n\nyield my_file\n\n\n\n\nprint(\"This is the implicit EXIT block\")\n\n\n\n\nmy_file.close()\n\n\n\n\nwith file(\"Context.txt\", 'r') as file_content:\n\n\n\n\ncontent = file_content.read()\n\n\n\n\nprint(content)\n\n\n\n\nHandling Exceptions:\n Ensuring proper resource management and cleanup even in the presence of exceptions.\n  \n\n    I hope this guide helps you understand the importance of context managers and how to use them effectively in your Python projects. You can read the full article \nhere\n for more detailed examples and explanations. Happy coding!"},
{"Title": "pieshell: python for shell scripting and as an interactive shell", "Content": "Pieshell is a Python shell environment that combines the expressiveness of shell pipelines with the power of python iterators.\n  \n\n    It can be used in two major ways:\n  \n\n\n\n\n\n    As an interactive shell replacing e.g. bash\n  \n\n\n\n\n\n    As an ordinary python module replacing e.g. subprocess.Popen\n  \n\n\n\n\n\n    Obligatory example:\n  \n140:/home/oven/pieshell >>> for x in ls(-a) | tr(\"s\", \"S\"):\n...   if x.endswith('.py'):\n...      print x\n... \nSetup.py\n\n    Source code: \nhttps://github.com/redhog/pieshell\n\n\nWhat the project does\n\n    It's a replacement for the subprocess module, and for bash as an interactive shell, and makes interacting with shell pipelines easier.\n  \nTarget Audience\n\n    System administrators, system software developers, data scientists\n  \nComparison\n\n    While os.system is very limited but easy to use, subprocess.Popen offers a lot of flexibility, but the interface is very low level. Any actual pipelining of multiple programs is pretty much required to be done by e.g. a bash process, constructing the pipeline as a shell script string. Further, interacting with standard in and standard out requires careful IO handling.\n  \n\n    Pieshell on the other hand lets you construct pipelines as python objects. Standard io from a pipeline can be handled using iterators or async iterators. Pieshell has full asyncio integration."},
{"Title": "How does Python earn money? What would have been their business model?", "Content": "I was wondering recently about any startup and any coding language that how does they make money. So I was curious to know about Python which is widely used"},
{"Title": "I created a script to automatically patch revanced", "Content": "What My Project Does\n\n\n\n    AutoReVanced is a Python script that automates downloading and patching APKs using ReVanced patches from ApkPure. It's perfect for anyone wanting to patch their revanced app.\n  \n\n\nTarget Audience\n\n\n\n    Suitable for a fun side project or hobbyists, AutoReVanced is designed for anyone wanting to customize Android apps with ReVanced patches.\n  \n\n\nComparison\n\n\n\n    Unlike alternatives, AutoReVanced is automatic.\n  \n\n    GitHub: \nautorevanced"},
{"Title": "Monday Daily Thread: Project ideas!", "Content": "Daily Thread"},
{"Title": "abstract-factories - a simple framework for content creation pipelines", "Content": "Hey all, my project \nabstract_factories\n is up to gauge interest and primarily feedback.\n  \n\n    The design goal is to make it easier to iterate on typical Content Creation pipeline tools (tool dev, rigging, validation, asset management etc) with a flexible framework to provide convenience, open and simple design and no dependencies (currently). It's an approach I've used a lot over the years and found it pretty versatile in production across numerous projects.\n  \nKey features\n\n\n\n\n\n    Auto-registration of matching items (types or instances) from any given path or python module.\n  \n\n\n\n\n\n    Simple or conditional item identifiers.\n  \n\n\n\n\n\n    Versioning.\n  \n\n\n\n\n\n    Recursive path searching (recursive module search in review).\n  \n\n\n\n\n\n    Dynamic resolving and importing modules in packaged (supports relative importing).\n  \n\n\n\n\nUsage Examples\n\n    There are a couple of \nsimple examples\n given along with tests to cover all of the current features.\n  \nWhat the project does\n\n    It's a convenience package for creating scalable tools and frameworks using \nAbstract Factory\n design pattern.\n  \nTarget Audience\n\n    Due to the solutions it's built for, it's aimed primarily at Technical Artists, Technical Animators, Pipeline and Tool Developers, but I'm interested in hearing about other possible applications.\n  \nComparison\n\n    Compared to other Factory and Abstract Factory convenience packages, mine is based on the work from \nthis GDC talk\n. The direct \nabstract-factories\n currently comes with a few more conveniences I've found useful during production. The idea stems from boiling down \nPyblish\n to something that became a little more reusable when writing frameworks as opposed to being the framework.\n  \n\n    Suggestions, questions, comments etc welcome."},
{"Title": "Showcase: pdf-to-podcast.com -- Convert PDF's to podcast episodes. Free and open-source :)", "Content": "What My Project Does\n\n    Upload any PDF and have it converted into a podcast episode with two or more speakers discussing its contents.\n  \n\n\nhttps://github.com/knowsuchagency/pdf-to-podcast\n\n\nTarget Audience\n\n    Anyone, but other developers in-particular. The code is open-source on GitHub and there's a link to the source on \nhttps://pdf-to-podcast.com\n. I want the project to serve as an illustrative example of how to build useful things on top of LLMs with relatively little code.\n  \nComparison\n\n    I just made this for fun. It's possible there are other similar projects"},
{"Title": "Have anyone tried google/mesop", "Content": "Google Open sourced Mesop. Mesop is a Python-based UI framework that allows you to rapidly build web apps. Used at Google for rapid internal app development similar to Streamlit.\n  \n\n    find more \nhere"},
{"Title": "Privacy-first natural language to SQL + charting + editing app", "Content": "What my project does\n\n\nDataLine \nis an AI-driven open source and privacy-first platform for data exploration. Your data is accessed using your device and stored on your device.\n  \n\n    In simple terms, it's an interface that allows you to \"chat\" with your database/dataset. You can ask it explorative questions, e.g. \"what potential insights can I find in this data\", or specific questions \"who are my top five customers in the past 3 months\", and it will gladly oblige. The backend is written using FastAPI, and the frontend uses Reactjs.\n  \n\n    For me, it acts as a tool that gives me a 10x speed boost. The fact that it can now generate charts out of the data, live, blows my mind still.\n  \nTarget Audience\n\n    Anyone who has data, regardless of whether they're technical or non-technical people. Devs, data scientists, marketing, sales, farmers, people working alone, in a startup, or in big enterprises.\n  \nComparison\n\n\n\n\n\n    No data leaves your machine. In other words, no data is sent to 3rd parties. Not even to us.\n  \n\n\n\n\n\n    DataLine is free and open source - all other alternatives are paid and closed source. Anyone is free to check out \nthe repo\n and contribute!\n  \n\n\n\n\n\n    Specializes in data exploration, generates charts and SQL, and allows editing and rerunning queries for flexibility."},
{"Title": "I created Yu-Gi-Oh! Power of Chaos save handler", "Content": "Quick backstory:\n  \n\n    Upper floor of my house is sort of a man-cave until we decorate it, so during this time I have two PCs which I use to play games with a friend when we have extra time to waste. The other day I remembered the game mentioned in the title and we had lots of fun playing it (there's 3 different games in this series). I decided I'd transfer the save file to my main PC so I can play when he's not visiting and I quickly learned it's an extremely annoying process to transfer save files across different PCs. Long story short, you need to find a proper registry key (which isn't always located at same spot for some reason) and you need to locate a system.dat file also located in a folder that isn't always in the same place. This process gets tedious pretty quick, so I decided to use the power of Python to make my life easier.\n  \n\n    What the project does:\n  \n\n    It's essentially a CLI save handler for the game mentioned in the title. It has 5 slots where you can backup your current save or load the backup to the computer. It can also fix minor registry issues if needed.\n  \n\n    Target audience:\n  \n\n    Given that I'm about 20 years too late... I'd say mostly people with very slow PCs or people who like to inhale nostalgia.\n  \n\n    I learned a lot about using winreg and msvcrt and getch, so while I will likely get bored of the game in the coming weeks, I'm happy I learned something new in the meantime, plus maybe someone finds it useful!\n  \n\n    Source code: \nmarkomavrinac/yugioh_poc_save_handler: Yu-Gi-Oh! Power of Chaos save handler - A script to manage your save games across multiple computers (github.com)"},
{"Title": "Tutorial: A Timely Python Multi-page Streamlit Application on Olympic Medal Winning Countries", "Content": "Streamlit\n¬†is an open-source app framework that allows data scientists and analysts to create interactive web applications with ease.\n  \n\n    Using just a few lines of Python, you can turn data scripts into shareable web apps.\n  \n\n    And combined with a data visualization library like¬†\nPlotly,\n¬†you can create beautiful charts and maps with only a few lines of code.\n  \n\n    In this article, let me step you through how to use¬†\nStreamlit\n¬†to create a multi-page interactive application that visualizes Olympic medal data.\n  \n\n    The application will have three pages:\n  \n\n\n\n\n\n    an overview of medal counts,\n  \n\n\n\n\n\n    a country-specific analysis, and\n  \n\n\n\n\n\n    a choropleth map displaying global medal distributions.\n  \n\n\n\n\n\n    Let‚Äôs get to it!\n  \n\n    Link to free article \nHERE\n\n\n\n    Github repo \nHERE"},
{"Title": "Learning Python coming from a JVM background", "Content": "I have 4 years worth JVM languages (Java, Kotlin) and have a need to learn some Python.  What's a good resource to get up to speed quickly with idiomatic Python?"},
{"Title": "I made a cool calendar app with PyQt6", "Content": "Tempus is a calendar with horoscopes, reminders, etc made with PyQt6\n  \nWhat my Project does?\n\n    Tempus is a desktop-based calendar management application built with PyQt6, allowing users to manage their todos, reminders, and special dates efficiently. It offers features like adding, editing, and deleting tasks and reminders, as well as marking dates as special. Tempus ensures users stay organized and never miss important events. Plus, it shows you how many days are remaining until a special day in the dashboard.\n  \nTarget Audience\n\n    Well, anyone who uses a desktop calendar app I guess?\n  \nComparison\n\n    I did some research and couldn't find good calendar apps made with PyQt6.  If you guys knows any, please mention it below and I'm sorry in advance.\n  \nGitHub\n\n\nhttps://github.com/rohankishore/Tempus"},
{"Title": "Better-OrderedMultiDict - a fast pure-pyton implementation of an ordered multi-valued dictionary.", "Content": "What my project does\n\n    It provides a fast pure-python implementation of an ordered, multi-valued dictionary.\n  \nTarget audience\n\n    Python developers that need this kind of specialized functionality.\n  \n\n    This can be used in production. It has no dependencies. The code is unit-tested (almost fully, I'm working on it) It requires Python 3.12+\n  \nComparison\nComparison to dict and OrderedDict\n\n\ndict\n and \nOederedDict\n are already ordered, but they only allow one value per key. You could use a defaultdict of lists, but then you have these disadvantages:\n  \n\n\n\n\n\n    you can end up with empty lists within the dict if you aren't careful\n  \n\n\n\n\n\n    you lose the order of individual items within the dict:\n  \n\n\n\n\n\n\nitems = [(1, '1'), (2, '2'), (2, '22'), (1, '11')]\nnormal_dict = defaultdict(list)\nfor key, value in items:\n    normal_dict [key].append(value)\nom_dict = OrderedMultiDict(items)\nprint(list(normal_dict .items)) # prints [(1, ['1', '11']), (2, ['2', '22'])] \nprint(list(om\\_dict.items))     # prints [(1, '1'), (2, '2'), (2, '22'), (1, '11')]\n\n\n\n\n\n    iterating over all key/value pairs can be cumbersome as you need nested loops\n  \n\n\n\n\nComparison to \nomdict\n.\n\n\nOederedDict\n provides a (in my opinion) nicer interface with less surprising behavior or pitfalls. My implementation is also faster. e.g iterating over all items is ~5x faster.\n  \nMore info\n\n    This started as a toy project, that later became useful to me, so I decided to cleanup the code, add tests, and publish it.\n  \nfrom better_orderedmultidict import OrderedMultiDict\nomd: OrderedMultiDict[int, int] = OrderedMultiDict([(1,1), (2,2), (1,11), (2,22)])\n\nfor key in reversed(omd.unique_keys()):\n    print(f\"{key}: {omd.getall(key)}\")\n# prints:\n# 2: [2, 22]\n# 1: [1, 11]\n\nprint(omd.popfirstitem())  # prints: (1, 1)\nprint(omd.poplast(2))  # prints: 22\n\nfor key in reversed(omd.unique_keys()):\n    print(f\"{key}: {omd.getall(key)}\")\n# prints:\n# 2: [2]\n# 1: [11]\nInstallation\n\n    You can install Better-OrderedMultiDict using pip:\n  \npip install better-orderedmultidict\nContributing\n\n    If you have any suggestions or improvements for Better-OrderedMultiDict, feel free to submit a pull request or open an issue on the \nGitHub repository\n. I appreciate any feedback or contributions!\n  \nLinks\n\n    Here's the link to the GitHub repository: \nhttps://github.com/JoachimCoenen/Better-OrderedMultiDict\n\n\n\n    Here's the link to PyPi: \nhttps://pypi.org/project/better-orderedmultidict"},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Built a RAG ( Retrieval-Augmented Generation ) model using Gemini Api.", "Content": "what my project does\n\n    This project is built to solve the issue of LLM unable to produce relevant answers for information in a particular context. uses the information  to train the model and stored it in a database and uses  this database to get relevant answers from the Model.\n  \nTarget audiance\n\n    This project is for people who want to train a LLM on a particular piece of information.\n  \ncomparison\n\n    This model only gives answers for information regarding the data you provided in the file. It will not answer any other questions including formal greetings.\n  \n\n    GitHub link :\nhttps://github.com/dharmateja2810/RAG-Retrieval-Augmented-Generation-Model"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Content": "Daily Thread"},
{"Title": "Should all Python projects have type hinting?", "Content": "I recently released a \nvery simple API wrapper\n and in my efforts to become a better programmer I asked in a Python Discord for feedback.\n  \n\n    One bloke was very adamant I should use type hints. I understand the need/desire for type hints but this commentator basically was implying that all Python code should be written with type hints.\n  \n\n    For a simple project I didn't think it was necessary but I'm curious as to what this community thinks.\n  \n\n    How do you make the decision as to when to use type hints? Do you do it for all projects, regardless of size? What are your general thoughts?"},
{"Title": "Anyone have experience using Vercel to host Python projects?", "Content": "Vercel is really convenient for NextJS and tbh it would be really nice to host and manage everything from one place.\n  \n\n    Unfortunately the documentation is pretty sparse and there doesn't seem to be many resources on the topic."},
{"Title": "Textual Serve - Serve TUIs in the browser", "Content": "Textual Serve (\nhttps://github.com/Textualize/textual-serve\n) is a project which serves TUIs (built with Textual) in the browser.\n  \n\n    This is self-hosted, so you don't need to rely on any external service."},
{"Title": "I made a simple python script which can evaluate a mathematical expression from a string", "Content": "I made this simple Python file a year ago. I thought you might be interested.\n  \n\n    It is only 100 lines long and uses no external libraries. It can do math on a string like this:\n  \n\n    \"What's fifty three+7*6/2?\" -> 74\n  \n\n    It can convert written-out numbers to actual numbers, it knows constants like PI, and it can do the actual math to get a single output.\n  \n\n\nhttps://github.com/SubatomicPlanets/SimpleStringMath"},
{"Title": "Python on ARM laptops", "Content": "Hi there !\n  \n\n    I'm thinking about buying an ARM windows laptop with the new Qualcomm chips. They will replace the x86 so I was wondering : Will There be a massive risk of non-compatibility of Python packages ? I guess they are made for x86 but I don't know if it's possible to work with them with an ARM based CPU."},
{"Title": "Python Project Management Primer", "Content": "This article\n explores how to manage Python project environments and dependencies, as well as how to structure projects effectively."},
{"Title": "karpet 0.5 released", "Content": "What's karpet library:\n\n\n\n    Library for fetching coin/token historical data, trends and more (official and unofficial APIs).\n  \n\n\nSource code:\n\n\n\n\nhttps://gitlab.com/imn1/karpet\n\n\n\n\nReleases including changelog:\n\n\n\n\nhttps://gitlab.com/imn1/karpet/-/releases"},
{"Title": "Time Series Forecasting and Simulations: Python Signature Transformation Method", "Content": "Signature of Time Series! Very interesting topic!\n  \n\n\nhttps://opendatascience.com/time-series-forecasting-and-simulations-python-signature-transformation-method/"},
{"Title": "a new mime detect library", "Content": "Hi, all:\n  \n\n    I created a library to detect mime. it's easy to customize. it's apache tika compatible, but it's implemented in pure python.\n  \n\n\nhttps://github.com/chenkovsky/fast-mime\n\n\n\n    Please give me a star, if you find it helps."},
{"Title": "Apps to code on ipad", "Content": "I just started learning python and I was wondering if there are any reliable python apps I can use to run the system on ipad."},
{"Title": "Video Quality Ranker", "Content": "What my project does\n\n    Ranks videos based on overall quality. Takes into account multiple metrics to determine what quality is the best.\n  \nTarget audience\n\n    Home users / Video enthusiasts\n  \nComparison\n\n    This project uses the following metrics to rank videos:\n  \n\n\n\n\n\n\nResolution\n: Higher resolution videos are preferred.\n  \n\n\n\n\n\n\nFrame Rate\n: Videos with higher frame rates are ranked higher.\n  \n\n\n\n\n\n\nBitrate\n: Higher bitrate often indicates better quality.\n  \n\n\n\n\n\n\nCodec\n: Some codecs provide better quality than others at the same bitrate.\n  \n\n\n\n\n\n    The script extracts these metrics using \nffprobe\n from the FFmpeg suite and sorts the videos accordingly. Here's how the metrics are used:\n  \n\n\n\n\n\n\nResolution\n: The script first compares the resolution (width x height) of the videos. Higher resolutions are ranked higher.\n  \n\n\n\n\n\n\nFrame Rate\n: If two videos have the same resolution, the one with the higher frame rate is ranked higher.\n  \n\n\n\n\n\n\nBitrate\n: For videos with the same resolution and frame rate, the bitrate is used to determine the quality.\n  \n\n\n\n\n\n\nCodec\n: In case of a tie in all other metrics, the codec is considered to break the tie.\n  \n\n\n\n\nAccess the Script\n\n    You can access the script on GitHub \nhere"},
{"Title": "I need advice on using google pay API.", "Content": "So, as mentioned in the title I am making a smart expense tracker web app using python and flask, is obtaining transaction history from Google Pay safe using API, if Yes How should i proceed with that and if No what is a better way to obtain the transaction history so that the user's privacy and safety in not compromised."},
{"Title": "CherrySaaS [WIP üöß]: An open-source SaaS template for Reflex. üå∏", "Content": "What My Project Does\n\n\n\n\nCherrySaaS\n is a 100% \nopen-source\n \nPythonic SaaS template\n that lets you build crazy beautiful SaaS using \nChakra and Radix UIs powered by Reflex\n. It is currently a work in progress and requires community contribution because I don't have the energy to write the entire template. If I were to do an entire template, I would never open-source it as it would become hard to maintain alone. So, I need collaborators and community effort to remain it to be open-sourced. Here's the \nplanning\n in the notion (Comments are allowed on the notion site).\n  \n\n\nTarget Audience\n\n\n\n    It is meant for production but requires community contributions to complete. It is currently in work progress but if people make useful contributions, it can be accomplished faster.\n  \n\n\nComparison\n\n\n\n    The reason is that it is a rare project as no free SaaS template has ever been made in Pure-Python. There are proprietary 2 SaaS templates made using Reflex. So I decided to make a free one for the community too. I have looked at a SaaS template called \nshipfast.com\n (which is getting popular nowadays). Ah, yes this also became an inspiration but I wanted to make one free.\n  \n\n\nSelling Shovels During The Gold Rush ‚ùå\nGiving away shovels for free during the Gold Rush ‚úî\n\n\n\n    If you want to be a collaborator, reach to me out on Discord (adarshgourabmahalik) or post your GitHub email in this \ndiscussion\n. Here's a discord link to preview the landing page of the template. \nhttps://discord.com/channels/1029853095527727165/1063735841333198938/1252953503106732053"},
{"Title": "Conway's game of life. can you find an optimization?", "Content": "little challenge for you, how fast can this be pushed in python?\n  \n\n    This function takes a numpy.ndarray / 2d numpy array, and returns the updated array. iv updated this function several times, this i the fastiest so far.\n  \n\n    numba jit dosn't like the double roll, and its faster than for loops in jit.\n  \ndef conways_game_of_life(board:numpy.ndarray):\n  n_neighbour = sum(numpy.roll(numpy.roll(board, i, 0), j, 1) for i in (-1, 0, 1) for j in (-1, 0, 1) if (i != 0 or j != 0))\n  board[(n_neighbour<2) | (n_neighbour>3)] = 0\n  board[(n_neighbour==3)] = 1\n  return board"},
{"Title": "A JIT compiler for CPython", "Content": "Brandt Bucher talks on JIT compiler for Python at CPython Core Developer Sprint. Brandt is  a member of the \nFaster CPython project\n, which is working on making the reference implementation of the language faster via a variety of techniques.\n  \n\n\nhttps://www.youtube.com/watch?v=HxSHIpEQRjs"},
{"Title": "Experimental Python Wheels for Windows on ARM64", "Content": "For anyone on a (new) Windows on Arm system, I found this great repo with Arm64 Windows wheels:\n  \n\n\n\n\n\n\nhttps://github.com/cgohlke/win_arm64-wheels\n\n\n\n\n\n\n\n\nHighlights\n\n\n\n\n\n\n\n    256 packages for Python 3.12\n  \n\n\n\n\n\n    Built with numpy 2 if possible\n  \n\n\n\n\n\n    Scipy stack: numpy with OpenBLAS, scipy, matplotlib, Pandas, scikit-learn, scikit-image, numba, etc.\n  \n\n\n\n\n\n    GIS stack: GDAL, netCDF4, pyproj, Shapely, rasterio, basemap, Fiona, etc.\n  \n\n\n\n\n\n    Image IO: Imagecodecs, Pillow, OpenImageIO, OpenEXR, pylibCZIrw, etc.\n  \n\n\n\n\n\n    Noteworthy: Pytorch, Kivy, opencv_python_headless, pymol-open-source, pywin32"},
{"Title": "json3pdf : Batch OCR for high quality document archiving.", "Content": "What my project does\n\n    Performs OCR on scanned Books using Microsoft Azure Document Intelligence read\n  \nTarget audience\n\n    People who are unsatisfied with traditional OCR People who want to add clear text to the original PDF and not just extract the text. People who want to archive documents at best quality.\n  \nComparasion\n\n    In my use case traditional OCR was near to useless. Tesseract was meh, Google API didn't process large files. Document Intelligence takes up to 500MB (although in practice a little less), and is possible to OCR 400-600 pages over books in batch by dividing and merging the source and results locally by only a few chunks. It doesn't provide the text in PDF form so that was my reason to start this project.\n  \n\n    Still in alpha and in separate modules and a lot of rigid coding, but it is working fine for my original task so thought maybe I'd showcase it.\n  \n\n\nhttps://github.com/DesertDoggy/json3pdf"},
{"Title": "Give me an idea for my project (telegram bot) in python.", "Content": "Give me an idea for my project (telegram bot) in python, I'm using aiogram3 for it. And i will mention your nickname/name in the project. Thanks."},
{"Title": "Parsing Python ASTs 20x faster with Rust", "Content": "https://www.gauge.sh/blog/parsing-python-asts-20x-faster-with-rust"},
{"Title": "Trying to find this package", "Content": "I should have saved the post but maybe 4-6 months ago I was reading a post (I am pretty sure it was in \nr/Python\n) where someone created a package that creates a visual for data contained within a list. For example, let‚Äôs say I have a data frame where one of the columns is named ‚Äúcolors‚Äù and each record contains a list of colors. One record might be [black,blue,yellow] another record might have [blue,yellow,black]. The visual had two parts where the top was a column chart to show the frequency of the list combinations and below the column chart was more of a table that showed each ‚Äúcolor‚Äù as one column and then across the row for each color and under the columns from the chart above was an indicator of sorts that would be greyed out of the color for that row was not in the corresponding columns list and highlighted another color of it was. Anyways this is probably a long shot but either the package or the name of this visual would be super helpful. Thanks python community!"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Content": "Daily Thread"},
{"Title": "I am Nominating Myself for PSF Board of Directors", "Content": "I am nominating myself for the PSF Board of Directors! üåü Check out my latest blog post to learn more about my journey, my commitment to the Python community, and my application for an OFAC license to expand educational activities in restricted areas.\n  \n\n    Read more at \nmy blog"},
{"Title": "Scrapegraph AI Tutorial; Scrape Websites Easily With LLaMA AI", "Content": "I'm going to show you how to get Scrapegraph AI up and running, how to set up a language model, how to process JSON, scrape websites, use different AI models, and even turning your data into audio. Sounds like a lot, but it's easier than you think, and I'll walk you through it step by step.\n  \n\n\nhttps://www.scrapingbee.com/blog/scrapegraph-ai-tutorial-scrape-websites-easily-with-llama-ai/"},
{"Title": "Looking for a good WYZIWIG/visual editor to go with with Jinja + Weasyprint", "Content": "End goal is to produce PDF using external data and a template. Needs to support Jinja tags, conditionals and loops.\n  \n\n    Using \nhttps://github.com/Kozea/WeasyPrint\n and \nhttps://github.com/pallets/jinja\n as base stack (Open to other suggestions)\n  \n\n    I was thinking of building some base HTML templates but would be awesome if I could find a visual HTML editor that could produce code 100% compatible with Weasyprint so that end users can build templates by themselves or modify existing ones.\n  \n\n    Could be Wysiwyg based using \nhttps://editorjs.io\n or \nhttps://github.com/slab/quill\nor more advanced web builders like \nhttps://github.com/GrapesJS/grapesjs\n\n\n\n    Anybody built something similar?"},
{"Title": "What are the hardware requirements in a laptop to run Python + Future AI based projects?", "Content": "I will buy a laptop for coding purposes but just started learning and practising Python using Pyecharm. What are the software requirements that lead to hardware specs a general Python coder must look into?\n  \n\n    Please suggest the hardware setup within a pocket friendly budget."},
{"Title": "rug 0.10.4 released", "Content": "What's rug library:\n\n\n\n    Library for fetching various stock data from the internet (official and unofficial APIs).\n  \n\n\nSource code:\n\n\n\n\nhttps://gitlab.com/imn1/rug\n\n\n\n\nReleases including changelog:\n\n\n\n\nhttps://gitlab.com/imn1/rug/-/releases"},
{"Title": "NumPy 2.0.0 is the first major release since 2006.", "Content": "NumPy 2.0.0 is the first major release since 2006.\n  \n\n\n\n\n\n\nhttps://github.com/numpy/numpy/releases/tag/v2.0.0\n\n\n\n\n\n\n\n\nhttps://numpy.org/devdocs/release/2.0.0-notes.html\n\n\n\n\n\n\n\n\nhttps://numpy.org/devdocs/numpy_2_0_migration_guide.html"},
{"Title": "Load Tests Python Task Queues", "Content": "What My Project Does\n\n\n\n    While looking for task queues, I found that there are many options available in the Python ecosystem, making it really hard to choose the right one. To get a sense of how each library performs and to help make an informed decision, I conducted a load test on some of the most popular ones: Python-RQ, ARQ, Celery, Huey, and Dramatiq.\n  \n\n\nTarget Audience\n\n\n\n    I hope my findings can help those who are also looking for a task queue solution in Python.\n  \n\n\nComparison\n\n\n\n    Most articles out there seem to focus on comparing the features of these libraries but rarely discuss performance. While there could be a lot of improvements on my tests, I think it still provide some different insights into how each library handles heavy loads and concurrency.\n  \n\n\nLinks:\n\n\n\n    You can read  my findings¬†\non my blog\n\n\n\n    Check out the source code:¬†\non Github\n\n\n\n    Thanks"},
{"Title": "Aurora: An extensible Python static site generator", "Content": "What My Project Does\n\n\n\n\nAurora\n is a fast, extensible Python static site generator. With Aurora, I can generate my personal website (~1,700 files, with multiple layers of jinja2 templates for each page) in < 4 seconds. Aurora generated 292,884 pages from a Hacker News post dataset in 2m:20s.\n  \n\n    Aurora supports incremental static regeneration, where pages can be regenerated in under 400ms, with hot reloading. I documented how this works \non my blog\n.\n  \n\n\nTarget Audience\n\n\n\n    I'm building Aurora to help me run my website, but it is built to be general so you can use it for your own projects. I would love feedback!\n  \n\n    I want this to be a tool for running static sites in production, at scale.\n  \n\n\nComparison\n\n\n\n    Aurora is inspired by the folder structure of Jekyll, but is written in Python. It has a hooks API that lets you define custom Python functions that manipulate the state of a page. This allows you to implement custom behaviours in isolation of the engine itself. I use this to open link previews from a cache that I plan to use on my website, among other things."},
{"Title": "Looking to learn Tkinter", "Content": "Does anyone know of a full course to learn the Python Tkinter library? I want courses that\n  \n\n\n\n\n\n    Are in video format\n  \n\n\n\n\n\n    Are not FreeCodeCamp\n  \n\n\n\n\n\n    Do not exceed 8 hours\n  \n\n\n\n\n\n    Optionally in these full courses, I also want to see\n  \n\n\n\n\n\n    Examples with explanations\n  \n\n\n\n\n\n    Mini projects\n  \n\n\n\n\n\n    How to package and publish apps made with Tkinter"},
{"Title": "Suggestion: make ray.io a part of Python's std lib", "Content": "Imagine having the option to write code once and run on multiple cores or on the cluster as part of the std lib. I know there's a company (currently) behind it - Anyscale, also not sure what the license is but other than that, what's holding the Py community back?"},
{"Title": "Advise on choosing UI technology with Python", "Content": "I am new to python and currently working on simple 3 layer web application -\n  \n\n\n\n\n\n    frontend - ?\n  \n\n\n\n\n\n    backend API to fetch data from DB - python\n  \n\n\n\n\n\n    DB - cloud\n  \n\n\n\n\n\n    This application has main intention to fetch data from DB, display graphs , table format data etc.  also perform some combination analysis of data and show on UI.\n  \n\n    Which less complex and stable technology I should prefer for frontend ? python flask, Bulma, Mesop by google or any other ? Thank you."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Content": "Daily Thread"},
{"Title": "Ruff: A Modern Python Linter for Error-Free and Maintainable Code", "Content": "Linting is essential to writing clean and readable code to share with others. A linter, like Ruff, is a tool that analyzes your code and looks for errors, stylistic issues, and suspicious constructs. Linting allows you to address issues and improve your code quality before you commit your code and share it with others.\n  \n\n    Ruff is a modern linter that‚Äôs extremely fast and has a simple interface, making it straightforward to use. It also aims to be a drop-in replacement for many other linting and formatting tools, such as Flake8, isort, and Black. It‚Äôs quickly becoming one of the most popular Python linters.\n  \nInstalling Ruff\n\n    Now that you know why linting your code is important and how Ruff is a powerful tool for the job, it‚Äôs time to install it. Thankfully, Ruff works out of the box, so no complicated installation instructions or configurations are needed to start using it.\n  \n\n    Assuming your project is already set up with a virtual environment, you can install Ruff in the following ways:\n  \n```bash\n$ python -m pip install ruff\n```\n\nYou can check that Ruff installed correctly by using the ruff version command:\n\n```bash\n$ ruff version\nruff 0.4.7\n```\nLinting Your Python Code\n\n    While linting helps keep your code consistent and error-free, it doesn‚Äôt guarantee that your code will be bug-free. Finding the bugs in your code is best handled with a debugger and adequate testing, which won‚Äôt be covered in this tutorial. Coming up in the next sections, you‚Äôll learn how to use Ruff to check for errors and speed up your workflow.\n  \nChecking for Errors\n```bash\n$ ruff check\none_ring.py:1:8: F401 [*] `os` imported but unused\none_ring.py:10:12: F821 Undefined name `name`\nFound 2 errors.\n[*] 1 fixable with the `--fix` option.\n```\n\n    Success! Ruff found two errors. Not only does it show the file and line numbers of the errors, but it also gives you error codes and messages. In addition, it lets you know that one of the two errors is fixable. Great!\n  \n\n    You can tell Ruff to fix errors by applying the --fix flag. Here‚Äôs what happens when you follow its suggestion:\n  \n```bash\n$ ruff check --fix\none_ring.py:9:12: F821 Undefined name `name`\nFound 2 errors (1 fixed, 1 remaining).\n```\n\n    You can find the rest of this Free tutorial \nhere"},
{"Title": "Advice for creating 3D modelling program", "Content": "I am creating a Python program which models 3D shapes so that they can be saved and or interacted with (i.e. rotated). The process currently takes a while to render shapes consisting of multiple materials. The libraries being implemented are currently matplotlib and numpy. What would you advise for improving the rendering process (library choice etc)?"},
{"Title": "Efficient Resource Management in Python: A Guide to Using Context Managers", "Content": "Managing resources efficiently in Python is crucial to prevent memory leaks and ensure optimal performance. One of the best ways to handle resource allocation and deallocation is through the use of context managers. In my latest blog post, I dive deep into the concept of context managers, their significance, and how to implement them using both the built-in `with` statement and the `contextlib` module.\n  \n\n    Here's a brief overview of what you'll find in the article:\n  \n\n\nUnderstanding Context Managers:\n\n\n\n    What They Are: Context managers help manage resources such as file handling and database connections by setting up a temporary runtime context and cleaning up after the operations are completed.\n  \n\n    The `with` Statement: The primary way to use context managers in Python, ensuring that resources are properly handled even if an exception occurs.\n  \n\n    The `contextlib` Module: Provides utilities for creating and working with context managers, offering more control over resource management.\n  \n\n\nUsing Context Managers:\n\n\n\n    Built-in Context Managers: How to use the `with` statement with built-in context managers like file handling.\n  \n\n\nfile_path = \"Context.txt\"\n\n\n\n\nwith open(file_path, 'r') as file:\n\n\n\n\nfile_content = file.read()\n\n\n\n\nprint(\"The Content of file is:\")\n\n\n\n\nprint(file_content)\n\n\n\n\nCustom Context Managers:\n Implementing custom context managers using the `__enter__()` and `__exit__()` methods.\n  \n\n\nclass File:\n\n\n\n\ndef __init__(self, filename, mode):\n\n\n\n\nself.filename = filename\n\n\n\n\nself.mode = mode\n\n\n\n\ndef __enter__(self):\n\n\n\n\nprint(f\"Opening {self.filename} .......\")\n\n\n\n\nself.file = open(self.filename, self.mode)\n\n\n\n\nreturn self.file\n\n\n\n\ndef __exit__(self, exc_type, exc_value, traceback):\n\n\n\n\nprint(f\"Closing {self.filename} ......\")\n\n\n\n\nself.file.close()\n\n\n\n\nwith File('Context.txt', 'r') as file:\n\n\n\n\ncontent = file.read()\n\n\n\n\nprint(content)\n\n\n\n\nAdvanced Techniques:\n\n\n\n    The `contextlib` Decorator: Creating context managers using the `contextmanager` decorator.\n  \n\n\nfrom contextlib import contextmanager\n\n\n\n\ncontextmanager\n\n\n\n\ndef file(filename, mode):\n\n\n\n\nprint(\"This is the implicit ENTER block\")\n\n\n\n\nmy_file = open(filename, mode)\n\n\n\n\nyield my_file\n\n\n\n\nprint(\"This is the implicit EXIT block\")\n\n\n\n\nmy_file.close()\n\n\n\n\nwith file(\"Context.txt\", 'r') as file_content:\n\n\n\n\ncontent = file_content.read()\n\n\n\n\nprint(content)\n\n\n\n\nHandling Exceptions:\n Ensuring proper resource management and cleanup even in the presence of exceptions.\n  \n\n    I hope this guide helps you understand the importance of context managers and how to use them effectively in your Python projects. You can read the full article \nhere\n for more detailed examples and explanations. Happy coding!"},
{"Title": "pieshell: python for shell scripting and as an interactive shell", "Content": "Pieshell is a Python shell environment that combines the expressiveness of shell pipelines with the power of python iterators.\n  \n\n    It can be used in two major ways:\n  \n\n\n\n\n\n    As an interactive shell replacing e.g. bash\n  \n\n\n\n\n\n    As an ordinary python module replacing e.g. subprocess.Popen\n  \n\n\n\n\n\n    Obligatory example:\n  \n140:/home/oven/pieshell >>> for x in ls(-a) | tr(\"s\", \"S\"):\n...   if x.endswith('.py'):\n...      print x\n... \nSetup.py\n\n    Source code: \nhttps://github.com/redhog/pieshell\n\n\nWhat the project does\n\n    It's a replacement for the subprocess module, and for bash as an interactive shell, and makes interacting with shell pipelines easier.\n  \nTarget Audience\n\n    System administrators, system software developers, data scientists\n  \nComparison\n\n    While os.system is very limited but easy to use, subprocess.Popen offers a lot of flexibility, but the interface is very low level. Any actual pipelining of multiple programs is pretty much required to be done by e.g. a bash process, constructing the pipeline as a shell script string. Further, interacting with standard in and standard out requires careful IO handling.\n  \n\n    Pieshell on the other hand lets you construct pipelines as python objects. Standard io from a pipeline can be handled using iterators or async iterators. Pieshell has full asyncio integration."},
{"Title": "How does Python earn money? What would have been their business model?", "Content": "I was wondering recently about any startup and any coding language that how does they make money. So I was curious to know about Python which is widely used"},
{"Title": "I created a script to automatically patch revanced", "Content": "What My Project Does\n\n\n\n    AutoReVanced is a Python script that automates downloading and patching APKs using ReVanced patches from ApkPure. It's perfect for anyone wanting to patch their revanced app.\n  \n\n\nTarget Audience\n\n\n\n    Suitable for a fun side project or hobbyists, AutoReVanced is designed for anyone wanting to customize Android apps with ReVanced patches.\n  \n\n\nComparison\n\n\n\n    Unlike alternatives, AutoReVanced is automatic.\n  \n\n    GitHub: \nautorevanced"},
{"Title": "Monday Daily Thread: Project ideas!", "Content": "Daily Thread"},
{"Title": "abstract-factories - a simple framework for content creation pipelines", "Content": "Hey all, my project \nabstract_factories\n is up to gauge interest and primarily feedback.\n  \n\n    The design goal is to make it easier to iterate on typical Content Creation pipeline tools (tool dev, rigging, validation, asset management etc) with a flexible framework to provide convenience, open and simple design and no dependencies (currently). It's an approach I've used a lot over the years and found it pretty versatile in production across numerous projects.\n  \nKey features\n\n\n\n\n\n    Auto-registration of matching items (types or instances) from any given path or python module.\n  \n\n\n\n\n\n    Simple or conditional item identifiers.\n  \n\n\n\n\n\n    Versioning.\n  \n\n\n\n\n\n    Recursive path searching (recursive module search in review).\n  \n\n\n\n\n\n    Dynamic resolving and importing modules in packaged (supports relative importing).\n  \n\n\n\n\nUsage Examples\n\n    There are a couple of \nsimple examples\n given along with tests to cover all of the current features.\n  \nWhat the project does\n\n    It's a convenience package for creating scalable tools and frameworks using \nAbstract Factory\n design pattern.\n  \nTarget Audience\n\n    Due to the solutions it's built for, it's aimed primarily at Technical Artists, Technical Animators, Pipeline and Tool Developers, but I'm interested in hearing about other possible applications.\n  \nComparison\n\n    Compared to other Factory and Abstract Factory convenience packages, mine is based on the work from \nthis GDC talk\n. The direct \nabstract-factories\n currently comes with a few more conveniences I've found useful during production. The idea stems from boiling down \nPyblish\n to something that became a little more reusable when writing frameworks as opposed to being the framework.\n  \n\n    Suggestions, questions, comments etc welcome."},
{"Title": "Showcase: pdf-to-podcast.com -- Convert PDF's to podcast episodes. Free and open-source :)", "Content": "What My Project Does\n\n    Upload any PDF and have it converted into a podcast episode with two or more speakers discussing its contents.\n  \n\n\nhttps://github.com/knowsuchagency/pdf-to-podcast\n\n\nTarget Audience\n\n    Anyone, but other developers in-particular. The code is open-source on GitHub and there's a link to the source on \nhttps://pdf-to-podcast.com\n. I want the project to serve as an illustrative example of how to build useful things on top of LLMs with relatively little code.\n  \nComparison\n\n    I just made this for fun. It's possible there are other similar projects"},
{"Title": "Have anyone tried google/mesop", "Content": "Google Open sourced Mesop. Mesop is a Python-based UI framework that allows you to rapidly build web apps. Used at Google for rapid internal app development similar to Streamlit.\n  \n\n    find more \nhere"},
{"Title": "Privacy-first natural language to SQL + charting + editing app", "Content": "What my project does\n\n\nDataLine \nis an AI-driven open source and privacy-first platform for data exploration. Your data is accessed using your device and stored on your device.\n  \n\n    In simple terms, it's an interface that allows you to \"chat\" with your database/dataset. You can ask it explorative questions, e.g. \"what potential insights can I find in this data\", or specific questions \"who are my top five customers in the past 3 months\", and it will gladly oblige. The backend is written using FastAPI, and the frontend uses Reactjs.\n  \n\n    For me, it acts as a tool that gives me a 10x speed boost. The fact that it can now generate charts out of the data, live, blows my mind still.\n  \nTarget Audience\n\n    Anyone who has data, regardless of whether they're technical or non-technical people. Devs, data scientists, marketing, sales, farmers, people working alone, in a startup, or in big enterprises.\n  \nComparison\n\n\n\n\n\n    No data leaves your machine. In other words, no data is sent to 3rd parties. Not even to us.\n  \n\n\n\n\n\n    DataLine is free and open source - all other alternatives are paid and closed source. Anyone is free to check out \nthe repo\n and contribute!\n  \n\n\n\n\n\n    Specializes in data exploration, generates charts and SQL, and allows editing and rerunning queries for flexibility."},
{"Title": "I created Yu-Gi-Oh! Power of Chaos save handler", "Content": "Quick backstory:\n  \n\n    Upper floor of my house is sort of a man-cave until we decorate it, so during this time I have two PCs which I use to play games with a friend when we have extra time to waste. The other day I remembered the game mentioned in the title and we had lots of fun playing it (there's 3 different games in this series). I decided I'd transfer the save file to my main PC so I can play when he's not visiting and I quickly learned it's an extremely annoying process to transfer save files across different PCs. Long story short, you need to find a proper registry key (which isn't always located at same spot for some reason) and you need to locate a system.dat file also located in a folder that isn't always in the same place. This process gets tedious pretty quick, so I decided to use the power of Python to make my life easier.\n  \n\n    What the project does:\n  \n\n    It's essentially a CLI save handler for the game mentioned in the title. It has 5 slots where you can backup your current save or load the backup to the computer. It can also fix minor registry issues if needed.\n  \n\n    Target audience:\n  \n\n    Given that I'm about 20 years too late... I'd say mostly people with very slow PCs or people who like to inhale nostalgia.\n  \n\n    I learned a lot about using winreg and msvcrt and getch, so while I will likely get bored of the game in the coming weeks, I'm happy I learned something new in the meantime, plus maybe someone finds it useful!\n  \n\n    Source code: \nmarkomavrinac/yugioh_poc_save_handler: Yu-Gi-Oh! Power of Chaos save handler - A script to manage your save games across multiple computers (github.com)"},
{"Title": "Tutorial: A Timely Python Multi-page Streamlit Application on Olympic Medal Winning Countries", "Content": "Streamlit\n¬†is an open-source app framework that allows data scientists and analysts to create interactive web applications with ease.\n  \n\n    Using just a few lines of Python, you can turn data scripts into shareable web apps.\n  \n\n    And combined with a data visualization library like¬†\nPlotly,\n¬†you can create beautiful charts and maps with only a few lines of code.\n  \n\n    In this article, let me step you through how to use¬†\nStreamlit\n¬†to create a multi-page interactive application that visualizes Olympic medal data.\n  \n\n    The application will have three pages:\n  \n\n\n\n\n\n    an overview of medal counts,\n  \n\n\n\n\n\n    a country-specific analysis, and\n  \n\n\n\n\n\n    a choropleth map displaying global medal distributions.\n  \n\n\n\n\n\n    Let‚Äôs get to it!\n  \n\n    Link to free article \nHERE\n\n\n\n    Github repo \nHERE"},
{"Title": "Learning Python coming from a JVM background", "Content": "I have 4 years worth JVM languages (Java, Kotlin) and have a need to learn some Python.  What's a good resource to get up to speed quickly with idiomatic Python?"},
{"Title": "I made a cool calendar app with PyQt6", "Content": "Tempus is a calendar with horoscopes, reminders, etc made with PyQt6\n  \nWhat my Project does?\n\n    Tempus is a desktop-based calendar management application built with PyQt6, allowing users to manage their todos, reminders, and special dates efficiently. It offers features like adding, editing, and deleting tasks and reminders, as well as marking dates as special. Tempus ensures users stay organized and never miss important events. Plus, it shows you how many days are remaining until a special day in the dashboard.\n  \nTarget Audience\n\n    Well, anyone who uses a desktop calendar app I guess?\n  \nComparison\n\n    I did some research and couldn't find good calendar apps made with PyQt6.  If you guys knows any, please mention it below and I'm sorry in advance.\n  \nGitHub\n\n\nhttps://github.com/rohankishore/Tempus"},
{"Title": "Better-OrderedMultiDict - a fast pure-pyton implementation of an ordered multi-valued dictionary.", "Content": "What my project does\n\n    It provides a fast pure-python implementation of an ordered, multi-valued dictionary.\n  \nTarget audience\n\n    Python developers that need this kind of specialized functionality.\n  \n\n    This can be used in production. It has no dependencies. The code is unit-tested (almost fully, I'm working on it) It requires Python 3.12+\n  \nComparison\nComparison to dict and OrderedDict\n\n\ndict\n and \nOederedDict\n are already ordered, but they only allow one value per key. You could use a defaultdict of lists, but then you have these disadvantages:\n  \n\n\n\n\n\n    you can end up with empty lists within the dict if you aren't careful\n  \n\n\n\n\n\n    you lose the order of individual items within the dict:\n  \n\n\n\n\n\n\nitems = [(1, '1'), (2, '2'), (2, '22'), (1, '11')]\nnormal_dict = defaultdict(list)\nfor key, value in items:\n    normal_dict [key].append(value)\nom_dict = OrderedMultiDict(items)\nprint(list(normal_dict .items)) # prints [(1, ['1', '11']), (2, ['2', '22'])] \nprint(list(om\\_dict.items))     # prints [(1, '1'), (2, '2'), (2, '22'), (1, '11')]\n\n\n\n\n\n    iterating over all key/value pairs can be cumbersome as you need nested loops\n  \n\n\n\n\nComparison to \nomdict\n.\n\n\nOederedDict\n provides a (in my opinion) nicer interface with less surprising behavior or pitfalls. My implementation is also faster. e.g iterating over all items is ~5x faster.\n  \nMore info\n\n    This started as a toy project, that later became useful to me, so I decided to cleanup the code, add tests, and publish it.\n  \nfrom better_orderedmultidict import OrderedMultiDict\nomd: OrderedMultiDict[int, int] = OrderedMultiDict([(1,1), (2,2), (1,11), (2,22)])\n\nfor key in reversed(omd.unique_keys()):\n    print(f\"{key}: {omd.getall(key)}\")\n# prints:\n# 2: [2, 22]\n# 1: [1, 11]\n\nprint(omd.popfirstitem())  # prints: (1, 1)\nprint(omd.poplast(2))  # prints: 22\n\nfor key in reversed(omd.unique_keys()):\n    print(f\"{key}: {omd.getall(key)}\")\n# prints:\n# 2: [2]\n# 1: [11]\nInstallation\n\n    You can install Better-OrderedMultiDict using pip:\n  \npip install better-orderedmultidict\nContributing\n\n    If you have any suggestions or improvements for Better-OrderedMultiDict, feel free to submit a pull request or open an issue on the \nGitHub repository\n. I appreciate any feedback or contributions!\n  \nLinks\n\n    Here's the link to the GitHub repository: \nhttps://github.com/JoachimCoenen/Better-OrderedMultiDict\n\n\n\n    Here's the link to PyPi: \nhttps://pypi.org/project/better-orderedmultidict"},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Built a RAG ( Retrieval-Augmented Generation ) model using Gemini Api.", "Content": "what my project does\n\n    This project is built to solve the issue of LLM unable to produce relevant answers for information in a particular context. uses the information  to train the model and stored it in a database and uses  this database to get relevant answers from the Model.\n  \nTarget audiance\n\n    This project is for people who want to train a LLM on a particular piece of information.\n  \ncomparison\n\n    This model only gives answers for information regarding the data you provided in the file. It will not answer any other questions including formal greetings.\n  \n\n    GitHub link :\nhttps://github.com/dharmateja2810/RAG-Retrieval-Augmented-Generation-Model"},
{"Title": "Python automation ideas", "Content": "Hi I‚Äôm looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "Lua-style code blocks for Python", "Content": "Python is a great programming language, but sometimes the indentation can be terrible for some people (especially people with visual impairments).\n  \n\n    So i created \nLython\n.\n  \n\n    What the project does:\n  \n\n    Lython replacing the Python indentation to \nlua-style\n code blocks.\n  \n\n    this is example lython code\n  \ndef test(num)\n    for i in range(num) do\n        if i == 0 then\n            print(\"zero\")\n        elif i % 2 == 1 then\n            print(\"odd\")\n        else\n            print(\"even\")\n        end # if else\n    end # for\nend # def\n\ntest(10)\n\n    for more info, please visit lython repo.\n  \n\n    Target audience:\n  \n\n    Peoples with visual impairments (especially) and Programmers who want to write python code with new experience (generally)\n  \n\n    Repo & Source code:\n  \n\n\nguangrei/lython"},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Content": "well, kind of.\n  \n\n    I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\n  \nWhat my project does\n\n    The bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\n  \nTarget audience\n\n    It's a toy project that i made out of boredom, also it sounded cool\n  \nComparison\n\n    I never heard of anything like this except for some really old browser games. Maybe i'm just not informed.\n  \nMore info\n\n    How is it infinite? The secret is \nAI\n. Every quest and event in the game is generated by AI depending on the demand of the players, so in theory you can go on an infinite amount of quests.\n  \n\n    Why did i call it an MMO? Because you can kind of play with your friends by creating & joining guilds and by sending gifts to eachother. There even is a guild leaderboard to see who gets the most points :)\n  \n\n    The interface is exclusively text based, but the command interpreter i wrote is pretty easy to integrate in other places, even in GUIs if anyone wants to try.\n  \n\n    I tried out a lot of new things for this project, like using ORMs, writing unit tests (don't look at those, i kinda got bored after a short while), using AI & writing generic enough code that it can be swapped with any other implementation. I think most of the code i wrote is pretty ok, but you can tell me what to change & what to improve if you want.\n  \nLinks\n\n    here's the link to the code: \nhttps://github.com/SudoOmbro/pilgram\n\n\n\n    if you wanna try out the version i'm running on my server start a conversation with \npilgram_bot\n on Telegram, don't expect a balanced experience at first since that was kind of the last of my problems lol"},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Content": "Hey guys!\n  \n\n    I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\n  \nWhat my project does\n\n    Adjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month.\n  \nInstallation\n\n    You can install Temporal Adjuster using pip:\n  \npip install temporal-adjuster\nUsage\n\n    This package provides a set of predefined temporal adjusters that can be used to adjust a temporal object in various ways. For example:\n  \n>>> from datetime import date, datetime\n\n>>> from temporal_adjuster import TemporalAdjuster\n>>> from temporal_adjuster.common.enums import Weekday\n\n>>> TemporalAdjuster.first_day_of_next_week(date(2021, 1, 1))\ndatetime.date(2021, 1, 4)\n\n>>> TemporalAdjuster.last_day_of_last_month(datetime(2021, 1, 1))\ndatetime.datetime(2020, 12, 31)\n\n>>> TemporalAdjuster.first_of_year(Weekday.SATURDAY, date(2021, 1, 1))\ndatetime.date(2021, 1, 2)\n\n>>> TemporalAdjuster.nth_of_month(Weekday.SUNDAY, datetime(2021, 5, 1), 2)\ndatetime.datetime(2021, 5, 9)\n\n>>> TemporalAdjuster.next(Weekday.MONDAY, datetime(2021, 2, 11), 2)\ndatetime.datetime(2021, 2, 15)\nContributing\n\n    If you have any suggestions or improvements for pynimbar, feel free to submit a pull request or open an issue on the \nGitHub repository\n as per the CONTRIBUTING document. We appreciate any feedback or contributions!\n  \nTarget audience\n\n    This can be used in production. It has only one depedency, dateutils, which if you're manipulating temporal objects you probably already have. All the code is 100% unit-tested, as well as build tested for all supported Python versions.\n  \nComparison\n\n    This is based on Java's native TemporalAdjuster interfaces, but I found no similar library/functionality for Python."},
{"Title": "Created an Api for APKpure", "Content": "Like the title said. I created an API fro \napkpure.com\n . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: \nhttps://github.com/anishomsy/apkpure\n\n\n\n\nWhat My Project Does\n\n\n\n    It allows you to download apk from \napkpure\n. Users can easily fetch specific versions of Android apps programmatically.\n  \n\n\nTarget Audience\n\n\n\n    it is a hobby project, anyone can use it\n  \n\n\nComparison\n\n\n\n    I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious.\n  \n\n    Please lmk how i can improve.\n  \n\n    Thank you"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Content": "Daily Thread"},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Content": "What My Project Does\n\n    Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations).\n  \nTarget audience\n\n    For those who need a simple wrapper for Cloudflare D1 API for their projects.\n  \nComparison\n\n    Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task.\n  \nSource\n\n    Repository: \nhttps://github.com/Suleman-Elahi/D1py\n\n\n\n    Feel free to drop any suggestions. Thanks."},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Content": "https://github.com/perpetual-ml/perpetual\n\n\nWhat My Project Does\n\n    PerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a \nbudget\n parameter which ranges between \n(0, 1)\n. Increasing the \nbudget\n parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing \nbudget\n, it means that you are already extracting the most predictive power out of your data.\n  \nTarget Audience\n\n    The project is meant for production. You can replace hyperparameter packages plus other gradient boosting algorithms with PerpetualBooster.\n  \nComparison\n\n    Other gradient boosting algorithms (XGBoost, LightGBM, Catboost) and most of the machine learning algorithms need hyperparameter optimization for the best performance on unseen data. But PerpetualBooster doesn't have hyperparameters so it doesn't need hyperparameter tuning. It has a built-in generalization algorithm and provides the best performance.\n  \n\n    The following table summarizes the results for the \nCalifornia Housing\n dataset:\n  \n\n\n\n\n\n\n\n            Perpetual budget\n          \n\n            LightGBM n_estimators\n          \n\n            Perpetual mse\n          \n\n            LightGBM mse\n          \n\n            Perpetual cpu time\n          \n\n            LightGBM cpu time\n          \n\n            Speed-up\n          \n\n\n\n\n\n\n\n\n\n\n\n\n\n              0.33\n            \n\n              100\n            \n\n              0.192\n            \n\n              0.192\n            \n\n              10.1\n            \n\n              990\n            \n\n              98x\n            \n\n\n\n\n\n              0.35\n            \n\n              200\n            \n\n              0.190\n            \n\n              0.191\n            \n\n              11.0\n            \n\n              2030\n            \n\n              186x\n            \n\n\n\n\n\n              0.45\n            \n\n              300\n            \n\n              0.187\n            \n\n              0.188\n            \n\n              18.7\n            \n\n              3272\n            \n\n              179x"},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects.\n  \n\n    Code: \nhttps://github.com/NRWLDev/fastapi-problem\n\n\n\n    Docs: \nhttps://nrwldev.github.io/fastapi-problem/\n\n\n\n    Pypi: \nhttps://pypi.org/project/fastapi-problem/\n\n\nWhat My Project Does\n\n    Provides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses.\n  \nTarget Audience\n\n    Web developers\n  \nComparison\n\n    There was a previous project that supported RFC7807 but that is no longer maintained, and is also made obsolete by RFC9457.\n  \nRFC9457\n\n    For anyone who does not make use of FastAPI, the underlying exception library has also been released, and can be used to implement handlers for any web framework you might be into.\n  \n\n\nhttps://github.com/NRWLDev/rfc9457\n\n\n\n\nhttps://pypi.org/project/rfc9457/"},
{"Title": "I tried to explain python imports", "Content": "When I was a beginner (or maybe still I am) I struggled a lot with pythons import function.\n  \n\n    Over the years I went over different approaches, how to handle imports and ended up using mostly exclusive poetry.\n  \n\n    I've met a lot of people struggling the same way, bit always could just explain very shortly my experience.\n  \n\n    I've now decided to write it down as a scenario, where I can show and explain my pitfalls:\n  \n\n\nhttps://github.com/MaKaNu/pyimport-explained"},
{"Title": "a new version of ultimateultimateguitar", "Content": "What My Project Does\n\n    It is a CLI to get songs from ultimateguitar.\n  \n\n    How it looks like: \nhttps://youtu.be/Spm1IIaYo8Q\n\n\n\n    I've only tried it on linux.\n  \n\n    Available in debian and pypi.\n  \nTarget audience\n\n    For musicians who also use the terminal and who don't especially like the ultimateguitar website.\n  \nComparison\n\n    I'm not aware of other projects doing the same thing.\n  \n\n    Compared to the website, it can transpose and it is much faster.\n  \nSource\n\n    Project website: \nhttps://codeberg.org/ltworf/ultimateultimateguitar\n\n\n\n    Out of date website (just here to avoid the post to be auto-removed): \nhttps://github.com/ltworf/ultimateultimateguitar"},
{"Title": "how about one-line try-except statement ?", "Content": "is there a proposal for a shorter exception handling syntax for those very frequent cases where a library function doesn't return \"error value\" like \nstr.index\n ?\n  \n\n    something like instead of :\n  \ntry:\n    i = my_str.index(\"sub\", st, en)\nexcept ValueError: # if \"sub\" has not been found\n    pass\nelse:\n    # do stuff with i (note that i usually want independent error handling here)\n\n    something like this :\n  \ni = my_str.index(\"sub\", st, en) except ValueError -1 # or maybe even return here\nif i == -1: # also can return right away if i want to avoid an indent next\n    # do stuff with i ...\n\n    i suspect there might be something \"un-pythonic\" here in what i am imagining , but please forgive me if that's the case . i am a fan of Python for many years , but haven't really invested any time in learning the philosophy\n  \n\n    so i am interested in what the community thinks about this , how ok would such syntax be from the point of the \"Python way\" , and if there is such a proposal i would like to know if i can consider maybe voting on it somehow"},
{"Title": "uv added experimental commands for `uv add/remove`", "Content": "uv is the \"pip but blazingly fast‚Ñ¢Ô∏è because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager!\n  \n\n    I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`.\n  \n\n    I'm genuinely excited about this, Python packaging is going to become such a smooth experience üòé\n  \n\n    Commands are in preview so expect missing stuff.\n  \n\n    (I bear no affiliation with astral)\n  \n\n\nhttps://github.com/astral-sh/uv"},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Content": "Hi Python data folks,\n  \n\n    I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines.\n  \n\n\nhttps://github.com/pathwaycom/pathway\n\n\n\n\nWhat My Project Does\n\n\n\n    We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for.\n  \n\n    Then we added more connectors for streaming ETL (Kafka, Postgres CDC‚Ä¶), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data.\n  \n\n    Pathway ships with a Python API and a Rust runtime based on Differential Dataflow to perform incremental computation. All the pipeline is kept in memory and can be easily deployed with Docker and Kubernetes (pipelines-as-code).\n  \n\n    We built Pathway to support enterprises like F1 teams and processors of highly sensitive information to build mission-critical data pipelines. We do this by putting security and performance first. For example, you can build and deploy self-hosted RAG pipelines with local LLM models and Pathway‚Äôs in-memory vector index, so no data ever leaves your infrastructure. Pathway connectors and transformations work with live data by default, so you can avoid expensive reprocessing and rely on fresh data.\n  \n\n    You can install Pathway with pip and Docker, and get started with templates and notebooks:\n  \n\n\nhttps://pathway.com/developers/showcases\n\n\n\n    We also host demo RAG pipelines implemented 100% in Pathway, feel free to interact with their API endpoints:\n  \n\n\nhttps://pathway.com/solutions/rag-pipelines#try-it-out\n\n\n\n    We'd love to hear what you think of Pathway!"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Content": "Daily Thread"},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Content": "In a few weeks, Polars 1.0 will be out. How exciting!\n  \n\n    You can already try out the pre-release by running:\n  \n\n    ```\n  \n\n    pip install -U --pre polars\n```\n  \n\n    If you encounter any bugs, you can report them to \nhttps://github.com/pola-rs/polars/issues\n, so they can be fixed before 1.0 comes out.\n  \n\n    Release notes: \nhttps://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone.\n  \n\n\nhttps://jb.gg/2atgzm\n\n\n\n    I hope this kind of post is allowed."},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>\n\n\nflpc\n is the name of the library. I named it (spelt as flacpuc). The strange thing is that why the compile time is high of flpc (rust) than of re module (implemented in Pure-Python) (it does the same thing what re.compile does in Python). The benchmark is done on:\n  \nPATTERN = r'(\\w+)\\s+(\\d+)'\nTEXT = ''.join(choices(ascii_letters + digits, k=1000))\n# choices function from random module\nITERATIONS = 100\n\n    The problem is that, the python should be slow in the parameter (Regex Compile). However, the rest of parameters looks great! VERY FAST!"},
{"Title": "Vedo or PyVista?", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions.\n  \n\n    This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part.\n  \n\n    It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff.\n  \n\n    I thought, this is it. My career is dead. I didn't speak Polish properly, limiting my options. And finding another fully remote job working for the UK sounded overly optimistic at the time. Being in my mid 30s and with a family to support, I didn't want to start over again.\n  \n\n    I knew Python and data analytics quite well, and also had frontend skills I had gained throughout the years. So I thought... I need to show what I can do. I didn't have a portfolio at all; my GitHub was empty. After trying Streamlit, I thought the concept was great, but the execution wasn't. So I wrote an article on Medium, discussing how a better, faster alternative was possible. I also created a POC and shared it on GitHub.\n  \n\n    Thankfully, due to contacts at my previous job, I was able to find another remote job, working for the UK w. With even better pay. So naturally, I forgot about my portfolio-building efforts. But after a few months, an investor (VC) from Germany reached out to me. He had seen the Medium article and asked me whether I'd like to do this full time.\n  \n\n    I hesitated, but eventually decided to explore this further. I didn't need any investment though; my idea was quite simple. And to be honest, not too different from other frameworks, just faster. I had to think bigger. One day, at London Stansted Airport, while waiting to board a plane home, I decided to go for it and came up with the idea of no-code in the front, Python in the back. In other words, building the frontend using a visual editor, while allowing for full freedom in the backend using Python, and abstracting all the connectivity between.\n  \n\n    The VC liked the idea, but wasn't fully convinced about my ability to execute. He decided not to invest. But since I liked the idea and thought it could go somewhere, I decided to try building it myself, at night, after work. For 9 months, that was my reality. Nights, weekends. If my baby son would wake up, early mornings too.\n  \n\n    In May 2023, I managed to get the framework to a state I was happy with, and launched it. The response was very good. I eventually got to 1000 stars on GitHub, a milestone for any open source project. To a great extent, thanks to the support of communities such as \nr/python\n and \nr/opensource\n. Also, thanks to sites like Medium and Product Hunt.\n  \n\n    A few months later, in November 2023, the CTO of a multibillion AI company reached out to me. They wanted to acquire my framework, hire me, and build a team for me to continue developing it. I was ecstatic. He told me he'd go on a Thanksgiving break for a few days and that he'd reach out to me after. He never got back to me. Accepting that this wasn't going to happen was tough.\n  \n\n    Two weeks later, the CTO of another AI company called me, together with the CEO. They also wanted to acquire me and make me a part of their team. A smaller company, much more interesting and already quite established, with clients such as Accenture and Salesforce. But with grit and determination to win in the space of enterprise generative AI. This time, it did work out and my framework was finally acquired. Now I work for them and I lead a team focused on maintaining this open source project.¬†\n  \n\n    Happy to answer any questions. And THANK YOU for your support \nr/python\n!!!\n  \n\n    For those curious:\n  \n\n\nhttps://github.com/writer/writer-framework"},
{"Title": "Building AI Text-to-Video Model From Scratch", "Content": "What My Project Does\n\n    This project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\n  \nTarget audience\n\n    This project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos.\n  \nComparison\n\n    Currently available text-to-video models require high computational power, and their complex code makes it difficult for Rookie developers to understand the practical implementation, beyond just the theory. To address this, I have created a small-scale GAN architecture, similar to text-to-video models, which can be trained on a CPU or a single T4 GPU.\n  \nGitHub\n\n    Code, documentation, and example can all be found on GitHub:\n  \n\n\nhttps://github.com/FareedKhan-dev/AI-text-to-video-model-from-scratch"},
{"Title": "My Thoughts on Python in Excel", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: \nhttps://www.xlwings.org/blog/my-thoughts-on-python-in-excel\n\n\n\n    Here‚Äôs the TL;DR:\n  \n\n\n\n\n\n    We wanted an alternative to VBA, but got an alternative to the Excel formula language\n  \n\n\n\n\n\n    Integrating the Jupyter notebook cells inside the Excel grid was a mistake\n  \n\n\n\n\n\n    Python in Excel isn‚Äôt suitable for Python beginners nor for interactive data analysis\n  \n\n\n\n\n\n    Right now, there are too many restrictions (can‚Äôt use your own packages and can‚Äôt connect to web APIs)\n  \n\n\n\n\n\n    Here are the current use cases I see for Python in Excel:\n  \n\n\n\n\n\n    Computationally intensive things like Monte Carlo simulations\n  \n\n\n\n\n\n    AI stuff via the included packages (scikit-learn, nltk, statsmodels, imbalanced-learn, gensim)\n  \n\n\n\n\n\n    Advanced visualizations via Matplotlib/Seaborn\n  \n\n\n\n\n\n    Time-series analysis (this is one of Excel‚Äôs blind spots)\n  \n\n\n\n\n\n    Not sure about data cleaning/data analysis: since you almost certainly need Power Query, it may actually be simpler and faster to just stick to Power Query (instead of using Power Query and Python in Excel together)"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Content": "Daily Thread"},
{"Title": "Kwargs appreciation thread", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually \nkeyword-only arguments\n. **kwargs is lovely as well, though!\n  \n\n    I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go.\n  \n\n    Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean:\n  \nsome_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)\n\n    Often times, the usage of kwargs is sufficiently explanatory of what the function does. Whether it's someone else's code or code that you've written a while back, not only does it save you having to peek at the function's signature/code, it also helps piece together what a block of code intends to do at first glance.\n  \n\n    At this point, for codebases that I maintain, I almost exclusively define my functions to force the usage of kwargs:\n  \nkwargs_are_mandatory(*, parameter1: int, parameter2: str) -> None:\n    return\n\n    When I read code in a language that doesn't support some form of kwargs, I find it more difficult and time consuming to wrap my head around what's happening.\n  \n\n    What are your thoughts on kwargs?"},
{"Title": "Open-source AI shorts generator in python", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc.\n  \n\n    Link to code :-¬†\nhttps://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "Python automation ideas", "Content": "Hi I‚Äôm looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "Lua-style code blocks for Python", "Content": "Python is a great programming language, but sometimes the indentation can be terrible for some people (especially people with visual impairments).\n  \n\n    So i created \nLython\n.\n  \n\n    What the project does:\n  \n\n    Lython replacing the Python indentation to \nlua-style\n code blocks.\n  \n\n    this is example lython code\n  \ndef test(num)\n    for i in range(num) do\n        if i == 0 then\n            print(\"zero\")\n        elif i % 2 == 1 then\n            print(\"odd\")\n        else\n            print(\"even\")\n        end # if else\n    end # for\nend # def\n\ntest(10)\n\n    for more info, please visit lython repo.\n  \n\n    Target audience:\n  \n\n    Peoples with visual impairments (especially) and Programmers who want to write python code with new experience (generally)\n  \n\n    Repo & Source code:\n  \n\n\nguangrei/lython"},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Content": "well, kind of.\n  \n\n    I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\n  \nWhat my project does\n\n    The bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\n  \nTarget audience\n\n    It's a toy project that i made out of boredom, also it sounded cool\n  \nComparison\n\n    I never heard of anything like this except for some really old browser games. Maybe i'm just not informed.\n  \nMore info\n\n    How is it infinite? The secret is \nAI\n. Every quest and event in the game is generated by AI depending on the demand of the players, so in theory you can go on an infinite amount of quests.\n  \n\n    Why did i call it an MMO? Because you can kind of play with your friends by creating & joining guilds and by sending gifts to eachother. There even is a guild leaderboard to see who gets the most points :)\n  \n\n    The interface is exclusively text based, but the command interpreter i wrote is pretty easy to integrate in other places, even in GUIs if anyone wants to try.\n  \n\n    I tried out a lot of new things for this project, like using ORMs, writing unit tests (don't look at those, i kinda got bored after a short while), using AI & writing generic enough code that it can be swapped with any other implementation. I think most of the code i wrote is pretty ok, but you can tell me what to change & what to improve if you want.\n  \nLinks\n\n    here's the link to the code: \nhttps://github.com/SudoOmbro/pilgram\n\n\n\n    if you wanna try out the version i'm running on my server start a conversation with \npilgram_bot\n on Telegram, don't expect a balanced experience at first since that was kind of the last of my problems lol"},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Content": "Hey guys!\n  \n\n    I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\n  \nWhat my project does\n\n    Adjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month.\n  \nInstallation\n\n    You can install Temporal Adjuster using pip:\n  \npip install temporal-adjuster\nUsage\n\n    This package provides a set of predefined temporal adjusters that can be used to adjust a temporal object in various ways. For example:\n  \n>>> from datetime import date, datetime\n\n>>> from temporal_adjuster import TemporalAdjuster\n>>> from temporal_adjuster.common.enums import Weekday\n\n>>> TemporalAdjuster.first_day_of_next_week(date(2021, 1, 1))\ndatetime.date(2021, 1, 4)\n\n>>> TemporalAdjuster.last_day_of_last_month(datetime(2021, 1, 1))\ndatetime.datetime(2020, 12, 31)\n\n>>> TemporalAdjuster.first_of_year(Weekday.SATURDAY, date(2021, 1, 1))\ndatetime.date(2021, 1, 2)\n\n>>> TemporalAdjuster.nth_of_month(Weekday.SUNDAY, datetime(2021, 5, 1), 2)\ndatetime.datetime(2021, 5, 9)\n\n>>> TemporalAdjuster.next(Weekday.MONDAY, datetime(2021, 2, 11), 2)\ndatetime.datetime(2021, 2, 15)\nContributing\n\n    If you have any suggestions or improvements for pynimbar, feel free to submit a pull request or open an issue on the \nGitHub repository\n as per the CONTRIBUTING document. We appreciate any feedback or contributions!\n  \nTarget audience\n\n    This can be used in production. It has only one depedency, dateutils, which if you're manipulating temporal objects you probably already have. All the code is 100% unit-tested, as well as build tested for all supported Python versions.\n  \nComparison\n\n    This is based on Java's native TemporalAdjuster interfaces, but I found no similar library/functionality for Python."},
{"Title": "Created an Api for APKpure", "Content": "Like the title said. I created an API fro \napkpure.com\n . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: \nhttps://github.com/anishomsy/apkpure\n\n\n\n\nWhat My Project Does\n\n\n\n    It allows you to download apk from \napkpure\n. Users can easily fetch specific versions of Android apps programmatically.\n  \n\n\nTarget Audience\n\n\n\n    it is a hobby project, anyone can use it\n  \n\n\nComparison\n\n\n\n    I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious.\n  \n\n    Please lmk how i can improve.\n  \n\n    Thank you"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Content": "Daily Thread"},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Content": "What My Project Does\n\n    Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations).\n  \nTarget audience\n\n    For those who need a simple wrapper for Cloudflare D1 API for their projects.\n  \nComparison\n\n    Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task.\n  \nSource\n\n    Repository: \nhttps://github.com/Suleman-Elahi/D1py\n\n\n\n    Feel free to drop any suggestions. Thanks."},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Content": "https://github.com/perpetual-ml/perpetual\n\n\nWhat My Project Does\n\n    PerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a \nbudget\n parameter which ranges between \n(0, 1)\n. Increasing the \nbudget\n parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing \nbudget\n, it means that you are already extracting the most predictive power out of your data.\n  \nTarget Audience\n\n    The project is meant for production. You can replace hyperparameter packages plus other gradient boosting algorithms with PerpetualBooster.\n  \nComparison\n\n    Other gradient boosting algorithms (XGBoost, LightGBM, Catboost) and most of the machine learning algorithms need hyperparameter optimization for the best performance on unseen data. But PerpetualBooster doesn't have hyperparameters so it doesn't need hyperparameter tuning. It has a built-in generalization algorithm and provides the best performance.\n  \n\n    The following table summarizes the results for the \nCalifornia Housing\n dataset:\n  \n\n\n\n\n\n\n\n            Perpetual budget\n          \n\n            LightGBM n_estimators\n          \n\n            Perpetual mse\n          \n\n            LightGBM mse\n          \n\n            Perpetual cpu time\n          \n\n            LightGBM cpu time\n          \n\n            Speed-up\n          \n\n\n\n\n\n\n\n\n\n\n\n\n\n              0.33\n            \n\n              100\n            \n\n              0.192\n            \n\n              0.192\n            \n\n              10.1\n            \n\n              990\n            \n\n              98x\n            \n\n\n\n\n\n              0.35\n            \n\n              200\n            \n\n              0.190\n            \n\n              0.191\n            \n\n              11.0\n            \n\n              2030\n            \n\n              186x\n            \n\n\n\n\n\n              0.45\n            \n\n              300\n            \n\n              0.187\n            \n\n              0.188\n            \n\n              18.7\n            \n\n              3272\n            \n\n              179x"},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects.\n  \n\n    Code: \nhttps://github.com/NRWLDev/fastapi-problem\n\n\n\n    Docs: \nhttps://nrwldev.github.io/fastapi-problem/\n\n\n\n    Pypi: \nhttps://pypi.org/project/fastapi-problem/\n\n\nWhat My Project Does\n\n    Provides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses.\n  \nTarget Audience\n\n    Web developers\n  \nComparison\n\n    There was a previous project that supported RFC7807 but that is no longer maintained, and is also made obsolete by RFC9457.\n  \nRFC9457\n\n    For anyone who does not make use of FastAPI, the underlying exception library has also been released, and can be used to implement handlers for any web framework you might be into.\n  \n\n\nhttps://github.com/NRWLDev/rfc9457\n\n\n\n\nhttps://pypi.org/project/rfc9457/"},
{"Title": "I tried to explain python imports", "Content": "When I was a beginner (or maybe still I am) I struggled a lot with pythons import function.\n  \n\n    Over the years I went over different approaches, how to handle imports and ended up using mostly exclusive poetry.\n  \n\n    I've met a lot of people struggling the same way, bit always could just explain very shortly my experience.\n  \n\n    I've now decided to write it down as a scenario, where I can show and explain my pitfalls:\n  \n\n\nhttps://github.com/MaKaNu/pyimport-explained"},
{"Title": "a new version of ultimateultimateguitar", "Content": "What My Project Does\n\n    It is a CLI to get songs from ultimateguitar.\n  \n\n    How it looks like: \nhttps://youtu.be/Spm1IIaYo8Q\n\n\n\n    I've only tried it on linux.\n  \n\n    Available in debian and pypi.\n  \nTarget audience\n\n    For musicians who also use the terminal and who don't especially like the ultimateguitar website.\n  \nComparison\n\n    I'm not aware of other projects doing the same thing.\n  \n\n    Compared to the website, it can transpose and it is much faster.\n  \nSource\n\n    Project website: \nhttps://codeberg.org/ltworf/ultimateultimateguitar\n\n\n\n    Out of date website (just here to avoid the post to be auto-removed): \nhttps://github.com/ltworf/ultimateultimateguitar"},
{"Title": "how about one-line try-except statement ?", "Content": "is there a proposal for a shorter exception handling syntax for those very frequent cases where a library function doesn't return \"error value\" like \nstr.index\n ?\n  \n\n    something like instead of :\n  \ntry:\n    i = my_str.index(\"sub\", st, en)\nexcept ValueError: # if \"sub\" has not been found\n    pass\nelse:\n    # do stuff with i (note that i usually want independent error handling here)\n\n    something like this :\n  \ni = my_str.index(\"sub\", st, en) except ValueError -1 # or maybe even return here\nif i == -1: # also can return right away if i want to avoid an indent next\n    # do stuff with i ...\n\n    i suspect there might be something \"un-pythonic\" here in what i am imagining , but please forgive me if that's the case . i am a fan of Python for many years , but haven't really invested any time in learning the philosophy\n  \n\n    so i am interested in what the community thinks about this , how ok would such syntax be from the point of the \"Python way\" , and if there is such a proposal i would like to know if i can consider maybe voting on it somehow"},
{"Title": "uv added experimental commands for `uv add/remove`", "Content": "uv is the \"pip but blazingly fast‚Ñ¢Ô∏è because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager!\n  \n\n    I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`.\n  \n\n    I'm genuinely excited about this, Python packaging is going to become such a smooth experience üòé\n  \n\n    Commands are in preview so expect missing stuff.\n  \n\n    (I bear no affiliation with astral)\n  \n\n\nhttps://github.com/astral-sh/uv"},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Content": "Hi Python data folks,\n  \n\n    I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines.\n  \n\n\nhttps://github.com/pathwaycom/pathway\n\n\n\n\nWhat My Project Does\n\n\n\n    We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for.\n  \n\n    Then we added more connectors for streaming ETL (Kafka, Postgres CDC‚Ä¶), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data.\n  \n\n    Pathway ships with a Python API and a Rust runtime based on Differential Dataflow to perform incremental computation. All the pipeline is kept in memory and can be easily deployed with Docker and Kubernetes (pipelines-as-code).\n  \n\n    We built Pathway to support enterprises like F1 teams and processors of highly sensitive information to build mission-critical data pipelines. We do this by putting security and performance first. For example, you can build and deploy self-hosted RAG pipelines with local LLM models and Pathway‚Äôs in-memory vector index, so no data ever leaves your infrastructure. Pathway connectors and transformations work with live data by default, so you can avoid expensive reprocessing and rely on fresh data.\n  \n\n    You can install Pathway with pip and Docker, and get started with templates and notebooks:\n  \n\n\nhttps://pathway.com/developers/showcases\n\n\n\n    We also host demo RAG pipelines implemented 100% in Pathway, feel free to interact with their API endpoints:\n  \n\n\nhttps://pathway.com/solutions/rag-pipelines#try-it-out\n\n\n\n    We'd love to hear what you think of Pathway!"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Content": "Daily Thread"},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Content": "In a few weeks, Polars 1.0 will be out. How exciting!\n  \n\n    You can already try out the pre-release by running:\n  \n\n    ```\n  \n\n    pip install -U --pre polars\n```\n  \n\n    If you encounter any bugs, you can report them to \nhttps://github.com/pola-rs/polars/issues\n, so they can be fixed before 1.0 comes out.\n  \n\n    Release notes: \nhttps://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone.\n  \n\n\nhttps://jb.gg/2atgzm\n\n\n\n    I hope this kind of post is allowed."},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>\n\n\nflpc\n is the name of the library. I named it (spelt as flacpuc). The strange thing is that why the compile time is high of flpc (rust) than of re module (implemented in Pure-Python) (it does the same thing what re.compile does in Python). The benchmark is done on:\n  \nPATTERN = r'(\\w+)\\s+(\\d+)'\nTEXT = ''.join(choices(ascii_letters + digits, k=1000))\n# choices function from random module\nITERATIONS = 100\n\n    The problem is that, the python should be slow in the parameter (Regex Compile). However, the rest of parameters looks great! VERY FAST!"},
{"Title": "Vedo or PyVista?", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions.\n  \n\n    This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part.\n  \n\n    It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff.\n  \n\n    I thought, this is it. My career is dead. I didn't speak Polish properly, limiting my options. And finding another fully remote job working for the UK sounded overly optimistic at the time. Being in my mid 30s and with a family to support, I didn't want to start over again.\n  \n\n    I knew Python and data analytics quite well, and also had frontend skills I had gained throughout the years. So I thought... I need to show what I can do. I didn't have a portfolio at all; my GitHub was empty. After trying Streamlit, I thought the concept was great, but the execution wasn't. So I wrote an article on Medium, discussing how a better, faster alternative was possible. I also created a POC and shared it on GitHub.\n  \n\n    Thankfully, due to contacts at my previous job, I was able to find another remote job, working for the UK w. With even better pay. So naturally, I forgot about my portfolio-building efforts. But after a few months, an investor (VC) from Germany reached out to me. He had seen the Medium article and asked me whether I'd like to do this full time.\n  \n\n    I hesitated, but eventually decided to explore this further. I didn't need any investment though; my idea was quite simple. And to be honest, not too different from other frameworks, just faster. I had to think bigger. One day, at London Stansted Airport, while waiting to board a plane home, I decided to go for it and came up with the idea of no-code in the front, Python in the back. In other words, building the frontend using a visual editor, while allowing for full freedom in the backend using Python, and abstracting all the connectivity between.\n  \n\n    The VC liked the idea, but wasn't fully convinced about my ability to execute. He decided not to invest. But since I liked the idea and thought it could go somewhere, I decided to try building it myself, at night, after work. For 9 months, that was my reality. Nights, weekends. If my baby son would wake up, early mornings too.\n  \n\n    In May 2023, I managed to get the framework to a state I was happy with, and launched it. The response was very good. I eventually got to 1000 stars on GitHub, a milestone for any open source project. To a great extent, thanks to the support of communities such as \nr/python\n and \nr/opensource\n. Also, thanks to sites like Medium and Product Hunt.\n  \n\n    A few months later, in November 2023, the CTO of a multibillion AI company reached out to me. They wanted to acquire my framework, hire me, and build a team for me to continue developing it. I was ecstatic. He told me he'd go on a Thanksgiving break for a few days and that he'd reach out to me after. He never got back to me. Accepting that this wasn't going to happen was tough.\n  \n\n    Two weeks later, the CTO of another AI company called me, together with the CEO. They also wanted to acquire me and make me a part of their team. A smaller company, much more interesting and already quite established, with clients such as Accenture and Salesforce. But with grit and determination to win in the space of enterprise generative AI. This time, it did work out and my framework was finally acquired. Now I work for them and I lead a team focused on maintaining this open source project.¬†\n  \n\n    Happy to answer any questions. And THANK YOU for your support \nr/python\n!!!\n  \n\n    For those curious:\n  \n\n\nhttps://github.com/writer/writer-framework"},
{"Title": "Building AI Text-to-Video Model From Scratch", "Content": "What My Project Does\n\n    This project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\n  \nTarget audience\n\n    This project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos.\n  \nComparison\n\n    Currently available text-to-video models require high computational power, and their complex code makes it difficult for Rookie developers to understand the practical implementation, beyond just the theory. To address this, I have created a small-scale GAN architecture, similar to text-to-video models, which can be trained on a CPU or a single T4 GPU.\n  \nGitHub\n\n    Code, documentation, and example can all be found on GitHub:\n  \n\n\nhttps://github.com/FareedKhan-dev/AI-text-to-video-model-from-scratch"},
{"Title": "My Thoughts on Python in Excel", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: \nhttps://www.xlwings.org/blog/my-thoughts-on-python-in-excel\n\n\n\n    Here‚Äôs the TL;DR:\n  \n\n\n\n\n\n    We wanted an alternative to VBA, but got an alternative to the Excel formula language\n  \n\n\n\n\n\n    Integrating the Jupyter notebook cells inside the Excel grid was a mistake\n  \n\n\n\n\n\n    Python in Excel isn‚Äôt suitable for Python beginners nor for interactive data analysis\n  \n\n\n\n\n\n    Right now, there are too many restrictions (can‚Äôt use your own packages and can‚Äôt connect to web APIs)\n  \n\n\n\n\n\n    Here are the current use cases I see for Python in Excel:\n  \n\n\n\n\n\n    Computationally intensive things like Monte Carlo simulations\n  \n\n\n\n\n\n    AI stuff via the included packages (scikit-learn, nltk, statsmodels, imbalanced-learn, gensim)\n  \n\n\n\n\n\n    Advanced visualizations via Matplotlib/Seaborn\n  \n\n\n\n\n\n    Time-series analysis (this is one of Excel‚Äôs blind spots)\n  \n\n\n\n\n\n    Not sure about data cleaning/data analysis: since you almost certainly need Power Query, it may actually be simpler and faster to just stick to Power Query (instead of using Power Query and Python in Excel together)"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Content": "Daily Thread"},
{"Title": "Kwargs appreciation thread", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually \nkeyword-only arguments\n. **kwargs is lovely as well, though!\n  \n\n    I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go.\n  \n\n    Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean:\n  \nsome_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)\n\n    Often times, the usage of kwargs is sufficiently explanatory of what the function does. Whether it's someone else's code or code that you've written a while back, not only does it save you having to peek at the function's signature/code, it also helps piece together what a block of code intends to do at first glance.\n  \n\n    At this point, for codebases that I maintain, I almost exclusively define my functions to force the usage of kwargs:\n  \nkwargs_are_mandatory(*, parameter1: int, parameter2: str) -> None:\n    return\n\n    When I read code in a language that doesn't support some form of kwargs, I find it more difficult and time consuming to wrap my head around what's happening.\n  \n\n    What are your thoughts on kwargs?"},
{"Title": "Open-source AI shorts generator in python", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc.\n  \n\n    Link to code :-¬†\nhttps://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "Made a Minimalistic Router for Uvicorn", "Content": "Hey everyone,\n  \n\n    I've been working on a simple router for Uvicorn called \nASGIRouter\n. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\n  \nWhat My Project Does\n\n    ASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn.\n  \n\n    This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs.\n  \n\n    Compared to existing ASGI routers, ASGIRouter stands out for its simplicity and ease of use. While other routers might offer more features or complexity, ASGIRouter focuses on providing a minimalistic, Flask-like experience for those who want to keep things straightforward.\n  \n\n    Check it out and let me know what you think."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Content": "Daily Thread"},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Content": "Hey Python community!\n  \n\n    I‚Äôd like to introduce you to my indie product¬†\nApitally\n, a simple API monitoring & analytics tool for Python projects.\n  \nWhat My Project Does\n\n    Apitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down.\n  \n\n    Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally‚Äôs servers in regular intervals.\n  \n\n    The client library is open-source with the¬†\nsource code available on GitHub\n.\n  \n\n    Below is a code example, demonstrating how easy it is to set up Apitally for a FastAPI app (see complete setup guide \nhere\n):\n  \nfrom fastapi import FastAPI\nfrom apitally.fastapi import ApitallyMiddleware\n\napp = FastAPI()\napp.add_middleware(\n    ApitallyMiddleware,\n    client_id=\"your-client-id\",\n    env=\"dev\",  # or \"prod\" etc.\n)\nTarget Audience\n\n    Engineering teams, individual developers and product owners who build, ship and maintain REST APIs in Python.\n  \nComparison\n\n    The big monitoring platforms (Datadog etc.) can be a bit overwhelming & expensive, particularly for simpler use cases. So Apitally‚Äôs key differentiators are simplicity & affordability, with the goal to make it as easy as possible for users to understand usage of their APIs.\n  \n\n    I hope people here find this useful. Please let me know what you think!"},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found \nhttps://github.com/SeleniumHQ/selenium/pull/13173\n .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find.\n  \n\n    I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "Textchat: TUI Single Server IRC Client", "Content": "Hello all! I have made an irc client with textual`. Source is available here: \nhttps://github.com/rmblau/textchat/\n\n\n\n    I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!\n  \nWhat My Project Does\n\n    Only confirmed working on Linux right now.. Right now it does not support SASL, SSL, or znc. It's in alpha and can be installed from pypi. Once installed it can be ran from the cmd line with `textchat`\n  \nTarget Audience\n\n    This is aimed at people who love irc as much as I do.\n  \nComparison\n\n    There didn't seem to be any application like this so I decided to make it."},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera.\n  \n\n    The Python code and documentation on my GitHub:¬†\nhttps://github.com/FrunzaDan/Tool-Chip_Contact_Length\n\n\n\n    The video:¬†\nhttps://youtu.be/bndai6SlF6E\n\n\n\n    Enjoy!\n  \nWhat My Project Does\n\n    The Python algo uses Hough lines to locate the edges of the tool and the chip and calculate the distance between them.\n  \nTarget Audience\n\n    Python OpenCV enthusiasts and people in metalworking research.\n  \nComparison\n\n    I haven't seen any application like this in metalworking machining."},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil.\n  \n\n    I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a \npytest-edit\n plugin that adds an \n--edit\n option to Pytest.\n  \n\n    There isn't. So I created just that. Enjoy.¬†\nhttps://github.com/MrMino/pytest-edit\n\n\n\n    Now, my issue is that I don't know if it works on Windows/Mac with VS Code / PyCharm, etc. - so if anyone would like to spend some time on betatesting a small pytest plugin - issue reports & PRs very much welcome.\n  \nWhat My Project Does\n\n    It adds an \n--edit\n option to Pytest, that opens failing test code in the user's editor of choice.\n  \nTarget Audience\n\n    Pytest users.\n  \nComparison\n\n    AFAIK nothing like this on the market, but I hope I'm wrong.\nThink \n%edit\n magic from IPython but for failed pytest executions."},
{"Title": "Why would anyone use pyqt if pyside exists", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "Building an HTTP Server in Python", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python.\n  \n\n\nLink to blog post"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Content": "Daily Thread"},
{"Title": "open source CLI tool for finding out how programs work", "Content": "What my project does\n\n    Allow users to find out what frameworks, tools, engines a program / game was made in.\n  \n\n    Looks through a directory and searches for common folder structures, and file names.\n  \n\n    You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries.\n  \n\n\nImage Example\n\n\nTarget Audience\n\n    Anyone! Developers looking to learn how other programs were made, people who are just interested.\n  \nComparison\n\n    Not sure if there are any alternatives, but another way of finding out how a program runs is looking through the names of files & folders.\n  \n\n    GitHub: \nhttps://github.com/PossiblePanda/hdiw\n\n\n\n    Contributors are appreciated :), adding new frameworks, or improving the core of hdiw."},
{"Title": "Kivy School - Crowdfunding Update", "Content": "We're excited to share that our \nKivy School crowdfunding project\n on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal!\n  \n\n    We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at \nkivyschool.com\n and our course on Udemy.\n  \n\n    Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!\n  \n\n    So if you are still interested on helping Kivy School or on having free access to our Udemy course, you can risk free pledge on the crowdfunding link above before it expires.\n  \n\n    Keep an eye at Kivy School, soon we will publishing about:\n  \n\n\n\n\n\n    Hot Reload on Android\n  \n\n\n\n\n\n    Supabase integration\n  \n\n\n\n\n\n    Sentry integration\n  \n\n\n\n\n\n    Using SQLAlchemy / SQLModel / Pydantic with Kivy\n  \n\n\n\n\n\n    GPS, Bluetooth, Wi-Fi, Android Services & much more!\n  \n\n\n\n\n\n    It is Python. It is open source. And it is free.\n  \n\n    Join us at Kivy School, and let's code together!"},
{"Title": "Async Python Clarifications", "Content": "Ok, so just so I have this straight:\n  \n\n\n\n\n\n    Asyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\n  \n\n\n\n\n\n    The threading library creates threads and uses preemptive multitasking to context switch between threads\n  \n\n\n\n\n\n    Asyncio is more efficient than threading for the reasons above\n  \n\n\n\n\n\n    Both share the same CPU core/resources\n  \n\n\n\n\n\n    Multiprocessing is using additional cores to speed up CPU bound tasks\n  \n\n\n\n\n\n    So to summarize: a process can create threads and threads can create tasks\n  \n\n    Is it just me or do people confuse processes as threads or also confuses tasks as threads? This makes getting it all straight pretty confusing and so any help here to confirm what I‚Äôve learned above would be appreciated üôè"},
{"Title": "The Problems with Celery", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: \nhttps://docs.hatchet.run/blog/problems-with-celery\n\n\n\n    Our issues with the Celery project were part of the reason why we started \nHatchet\n.\n  \n\n    Would love to hear comments or feedback!"},
{"Title": "Monday Daily Thread: Project ideas!", "Content": "Daily Thread"},
{"Title": "EFT - A file extension for implementing user created themes", "Content": "What my project does\n\n    Allow developers to implement custom themes into their programs, while having a file format that is human readable\n  \n\n    Example:\nmy_theme.eft\n\n\n- My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool\nTarget Audience\n\n    Developers & users who make themes\n  \nComparison\n\n    CSS Themes - May be difficult to implement, difficult to understand for people who aren't programmers\n  \n\n    JSON Themes - Viable option, may not be readable in some cases\n  \n\n    GitHub: \nhttps://github.com/PossiblePanda/EFT-py\n\n\n\n    Contributors are greatly appreciated :)\n  \n\n    If you have questions feel free to ask"},
{"Title": "Flappy Berd in PyQt", "Content": "Hello there\n  \n\n\nWhat my project does:\n\n\n\n    I‚Äôm excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! üòÉ As Richard Watterson once said: \"10/10 game, would play again.\"\n  \n\n\nTarget Audience\n\n\n\n    This game is for anyone who‚Äôs bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience.\n  \n\n\nComparison\n\n\n\n    Think of it as a faithful recreation of Flappy Bird with a PyQt twist.\n  \n\n\nUpdate\n\n\n\n    I had some time, so I made an update. The pipes now start from the middle.\n  \n\n\nCode\n\n\n\n    You can check out the code \nhere\n. Please note that the code is definitely not the best, but hey it works!"},
{"Title": "I have made an open source library for logging errors / messages :)", "Content": "What my project does\n\n    Allow developers to easily log errors, messages, and warnings to the console, and an optional log file.\n  \n\n    Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\n  \nTarget Audience\n\n    Developers\n  \nComparison\n\n    using pandalog has many benefits over just using \nprint\n, such as storing logs in a log file, colored output in console, extremely configurable\n  \n\n    You can download it on pypi by running \npip install pandalog\n\n\n\n    GitHub: \nhttps://github.com/PossiblePanda/pandalog\n\n\n\n    Contributors are appreciated :)"},
{"Title": "Just released my first Python package: Melodica Notes üé∂", "Content": "Hey everyone!\n  \n\n    I‚Äôm excited to share my first Python package: \nMelodica Notes\n. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics.\n  \n\n\nWhat My Project Does:\n Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players.\n  \n\n\nTarget Audience:\n This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it‚Äôs fully functional, I consider it an evolving tool and welcome contributions to enhance its features.\n  \n\n\nComparison:\n There are other musical tools out there, but Melodica Notes is specifically tailored for melodica players. Unlike general-purpose music theory tools, this CLI focuses on the needs and nuances of melodica playing, making it a unique addition to the musician's toolkit.\n  \n\n    I‚Äôd love to hear your thoughts and suggestions! Whether it's feedback, feature ideas, or pull requests, I welcome all contributions. Your insights can help make this tool even better.\n  \n\n    Check it out on \nPyPI\n and feel free to dive into the code on \nGitHub\n.\n  \n\n    Thanks for your support, and happy coding and playing üéµ"},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Content": "What my project does:\n\n\n\n    It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc.\n  \n\n\nTarget Audience\n\n\n\n    Developers mostly, I guess\n  \n\n\nComparison\n\n\n\n    I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line.\n  \n\n\nCode:\n\n\n\n\nHere's the GitHub repo\n \nhttps://github.com/jcoelho93/steer"},
{"Title": "Async Python adoption?", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python?\n  \n\n    I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "Understanding Python Decorators", "Content": "Without using decorators I think mostly we can‚Äôt build a decent application. They are everywhere.\n\n    I wrote an article to get an understanding of Decorators.\n  \n\n\nhttps://newsletter.piptrends.com/p/understanding-python-decorators\n\n\n\n    I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Content": "Link: \nhttps://github.com/prateekvellala/Archand\n\n\nWhat My Project Does\n\n    Archand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc.\n  \n\n    Archand has the following features, each controlled by a unique hand gesture:\n  \n\n\n\n\n\n    Move pointer\n  \n\n\n\n\n\n    Single left click\n  \n\n\n\n\n\n    Single right click\n  \n\n\n\n\n\n    Double left click\n  \n\n\n\n\n\n    Hold left click and move pointer (for dragging, etc)\n  \n\n\n\n\n\n    Scroll up\n  \n\n\n\n\n\n    Scroll down\n  \n\n\n\n\n\n    Enable your microphone, and then whatever you say will be converted to text and typed where your cursor is blinking (automating keyboard functionality)\n  \n\n\n\n\nTarget Audience\n\n    Everyone\n  \nComparison\n\n    There is no comparison with any other projects, as I have not seen any that incorporate all the features I have implemented, which work accurately with both low-resolution integrated laptop webcams and high-end webcams. All the projects I've encountered with a similar concept mainly fall into three categories:\n  \n\n\n\n\n\n    They¬†don't work at¬†all, failing¬†even to¬†move¬†the¬†cursor¬†smoothly.\n  \n\n\n\n\n\n    The cursor moves pretty well and smoothly, but they do not fully automate the mouse, as they always lack some other feature like double-clicking, right-clicking, or scrolling, etc.\n  \n\n\n\n\n\n    They have many features that work well, but require high-end webcams, such as the Logitech Brio."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Content": "Daily Thread"},
{"Title": "CopySave - And easy to use clipboard manager", "Content": "What my project does\n\n    CopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\n  \nTarget Audience\n\n    Everyone who works at a pc, with data. Programmers, especially.\n  \nComparison\n\n    I couldn't find any similar applications. Of course there are some better ones out there.\n  \n\n\nhttps://github.com/mpiele/CopySave"},
{"Title": "Made a Minimalistic Router for Uvicorn", "Content": "Hey everyone,\n  \n\n    I've been working on a simple router for Uvicorn called \nASGIRouter\n. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\n  \nWhat My Project Does\n\n    ASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn.\n  \n\n    This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs.\n  \n\n    Compared to existing ASGI routers, ASGIRouter stands out for its simplicity and ease of use. While other routers might offer more features or complexity, ASGIRouter focuses on providing a minimalistic, Flask-like experience for those who want to keep things straightforward.\n  \n\n    Check it out and let me know what you think."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Content": "Daily Thread"},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Content": "Hey Python community!\n  \n\n    I‚Äôd like to introduce you to my indie product¬†\nApitally\n, a simple API monitoring & analytics tool for Python projects.\n  \nWhat My Project Does\n\n    Apitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down.\n  \n\n    Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally‚Äôs servers in regular intervals.\n  \n\n    The client library is open-source with the¬†\nsource code available on GitHub\n.\n  \n\n    Below is a code example, demonstrating how easy it is to set up Apitally for a FastAPI app (see complete setup guide \nhere\n):\n  \nfrom fastapi import FastAPI\nfrom apitally.fastapi import ApitallyMiddleware\n\napp = FastAPI()\napp.add_middleware(\n    ApitallyMiddleware,\n    client_id=\"your-client-id\",\n    env=\"dev\",  # or \"prod\" etc.\n)\nTarget Audience\n\n    Engineering teams, individual developers and product owners who build, ship and maintain REST APIs in Python.\n  \nComparison\n\n    The big monitoring platforms (Datadog etc.) can be a bit overwhelming & expensive, particularly for simpler use cases. So Apitally‚Äôs key differentiators are simplicity & affordability, with the goal to make it as easy as possible for users to understand usage of their APIs.\n  \n\n    I hope people here find this useful. Please let me know what you think!"},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found \nhttps://github.com/SeleniumHQ/selenium/pull/13173\n .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find.\n  \n\n    I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "Textchat: TUI Single Server IRC Client", "Content": "Hello all! I have made an irc client with textual`. Source is available here: \nhttps://github.com/rmblau/textchat/\n\n\n\n    I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!\n  \nWhat My Project Does\n\n    Only confirmed working on Linux right now.. Right now it does not support SASL, SSL, or znc. It's in alpha and can be installed from pypi. Once installed it can be ran from the cmd line with `textchat`\n  \nTarget Audience\n\n    This is aimed at people who love irc as much as I do.\n  \nComparison\n\n    There didn't seem to be any application like this so I decided to make it."},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera.\n  \n\n    The Python code and documentation on my GitHub:¬†\nhttps://github.com/FrunzaDan/Tool-Chip_Contact_Length\n\n\n\n    The video:¬†\nhttps://youtu.be/bndai6SlF6E\n\n\n\n    Enjoy!\n  \nWhat My Project Does\n\n    The Python algo uses Hough lines to locate the edges of the tool and the chip and calculate the distance between them.\n  \nTarget Audience\n\n    Python OpenCV enthusiasts and people in metalworking research.\n  \nComparison\n\n    I haven't seen any application like this in metalworking machining."},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil.\n  \n\n    I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a \npytest-edit\n plugin that adds an \n--edit\n option to Pytest.\n  \n\n    There isn't. So I created just that. Enjoy.¬†\nhttps://github.com/MrMino/pytest-edit\n\n\n\n    Now, my issue is that I don't know if it works on Windows/Mac with VS Code / PyCharm, etc. - so if anyone would like to spend some time on betatesting a small pytest plugin - issue reports & PRs very much welcome.\n  \nWhat My Project Does\n\n    It adds an \n--edit\n option to Pytest, that opens failing test code in the user's editor of choice.\n  \nTarget Audience\n\n    Pytest users.\n  \nComparison\n\n    AFAIK nothing like this on the market, but I hope I'm wrong.\nThink \n%edit\n magic from IPython but for failed pytest executions."},
{"Title": "Why would anyone use pyqt if pyside exists", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "Building an HTTP Server in Python", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python.\n  \n\n\nLink to blog post"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Content": "Daily Thread"},
{"Title": "open source CLI tool for finding out how programs work", "Content": "What my project does\n\n    Allow users to find out what frameworks, tools, engines a program / game was made in.\n  \n\n    Looks through a directory and searches for common folder structures, and file names.\n  \n\n    You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries.\n  \n\n\nImage Example\n\n\nTarget Audience\n\n    Anyone! Developers looking to learn how other programs were made, people who are just interested.\n  \nComparison\n\n    Not sure if there are any alternatives, but another way of finding out how a program runs is looking through the names of files & folders.\n  \n\n    GitHub: \nhttps://github.com/PossiblePanda/hdiw\n\n\n\n    Contributors are appreciated :), adding new frameworks, or improving the core of hdiw."},
{"Title": "Kivy School - Crowdfunding Update", "Content": "We're excited to share that our \nKivy School crowdfunding project\n on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal!\n  \n\n    We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at \nkivyschool.com\n and our course on Udemy.\n  \n\n    Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!\n  \n\n    So if you are still interested on helping Kivy School or on having free access to our Udemy course, you can risk free pledge on the crowdfunding link above before it expires.\n  \n\n    Keep an eye at Kivy School, soon we will publishing about:\n  \n\n\n\n\n\n    Hot Reload on Android\n  \n\n\n\n\n\n    Supabase integration\n  \n\n\n\n\n\n    Sentry integration\n  \n\n\n\n\n\n    Using SQLAlchemy / SQLModel / Pydantic with Kivy\n  \n\n\n\n\n\n    GPS, Bluetooth, Wi-Fi, Android Services & much more!\n  \n\n\n\n\n\n    It is Python. It is open source. And it is free.\n  \n\n    Join us at Kivy School, and let's code together!"},
{"Title": "Async Python Clarifications", "Content": "Ok, so just so I have this straight:\n  \n\n\n\n\n\n    Asyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\n  \n\n\n\n\n\n    The threading library creates threads and uses preemptive multitasking to context switch between threads\n  \n\n\n\n\n\n    Asyncio is more efficient than threading for the reasons above\n  \n\n\n\n\n\n    Both share the same CPU core/resources\n  \n\n\n\n\n\n    Multiprocessing is using additional cores to speed up CPU bound tasks\n  \n\n\n\n\n\n    So to summarize: a process can create threads and threads can create tasks\n  \n\n    Is it just me or do people confuse processes as threads or also confuses tasks as threads? This makes getting it all straight pretty confusing and so any help here to confirm what I‚Äôve learned above would be appreciated üôè"},
{"Title": "The Problems with Celery", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: \nhttps://docs.hatchet.run/blog/problems-with-celery\n\n\n\n    Our issues with the Celery project were part of the reason why we started \nHatchet\n.\n  \n\n    Would love to hear comments or feedback!"},
{"Title": "Monday Daily Thread: Project ideas!", "Content": "Daily Thread"},
{"Title": "EFT - A file extension for implementing user created themes", "Content": "What my project does\n\n    Allow developers to implement custom themes into their programs, while having a file format that is human readable\n  \n\n    Example:\nmy_theme.eft\n\n\n- My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool\nTarget Audience\n\n    Developers & users who make themes\n  \nComparison\n\n    CSS Themes - May be difficult to implement, difficult to understand for people who aren't programmers\n  \n\n    JSON Themes - Viable option, may not be readable in some cases\n  \n\n    GitHub: \nhttps://github.com/PossiblePanda/EFT-py\n\n\n\n    Contributors are greatly appreciated :)\n  \n\n    If you have questions feel free to ask"},
{"Title": "Flappy Berd in PyQt", "Content": "Hello there\n  \n\n\nWhat my project does:\n\n\n\n    I‚Äôm excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! üòÉ As Richard Watterson once said: \"10/10 game, would play again.\"\n  \n\n\nTarget Audience\n\n\n\n    This game is for anyone who‚Äôs bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience.\n  \n\n\nComparison\n\n\n\n    Think of it as a faithful recreation of Flappy Bird with a PyQt twist.\n  \n\n\nUpdate\n\n\n\n    I had some time, so I made an update. The pipes now start from the middle.\n  \n\n\nCode\n\n\n\n    You can check out the code \nhere\n. Please note that the code is definitely not the best, but hey it works!"},
{"Title": "I have made an open source library for logging errors / messages :)", "Content": "What my project does\n\n    Allow developers to easily log errors, messages, and warnings to the console, and an optional log file.\n  \n\n    Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\n  \nTarget Audience\n\n    Developers\n  \nComparison\n\n    using pandalog has many benefits over just using \nprint\n, such as storing logs in a log file, colored output in console, extremely configurable\n  \n\n    You can download it on pypi by running \npip install pandalog\n\n\n\n    GitHub: \nhttps://github.com/PossiblePanda/pandalog\n\n\n\n    Contributors are appreciated :)"},
{"Title": "Just released my first Python package: Melodica Notes üé∂", "Content": "Hey everyone!\n  \n\n    I‚Äôm excited to share my first Python package: \nMelodica Notes\n. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics.\n  \n\n\nWhat My Project Does:\n Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players.\n  \n\n\nTarget Audience:\n This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it‚Äôs fully functional, I consider it an evolving tool and welcome contributions to enhance its features.\n  \n\n\nComparison:\n There are other musical tools out there, but Melodica Notes is specifically tailored for melodica players. Unlike general-purpose music theory tools, this CLI focuses on the needs and nuances of melodica playing, making it a unique addition to the musician's toolkit.\n  \n\n    I‚Äôd love to hear your thoughts and suggestions! Whether it's feedback, feature ideas, or pull requests, I welcome all contributions. Your insights can help make this tool even better.\n  \n\n    Check it out on \nPyPI\n and feel free to dive into the code on \nGitHub\n.\n  \n\n    Thanks for your support, and happy coding and playing üéµ"},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Content": "What my project does:\n\n\n\n    It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc.\n  \n\n\nTarget Audience\n\n\n\n    Developers mostly, I guess\n  \n\n\nComparison\n\n\n\n    I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line.\n  \n\n\nCode:\n\n\n\n\nHere's the GitHub repo\n \nhttps://github.com/jcoelho93/steer"},
{"Title": "Async Python adoption?", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python?\n  \n\n    I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "Understanding Python Decorators", "Content": "Without using decorators I think mostly we can‚Äôt build a decent application. They are everywhere.\n\n    I wrote an article to get an understanding of Decorators.\n  \n\n\nhttps://newsletter.piptrends.com/p/understanding-python-decorators\n\n\n\n    I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Content": "Link: \nhttps://github.com/prateekvellala/Archand\n\n\nWhat My Project Does\n\n    Archand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc.\n  \n\n    Archand has the following features, each controlled by a unique hand gesture:\n  \n\n\n\n\n\n    Move pointer\n  \n\n\n\n\n\n    Single left click\n  \n\n\n\n\n\n    Single right click\n  \n\n\n\n\n\n    Double left click\n  \n\n\n\n\n\n    Hold left click and move pointer (for dragging, etc)\n  \n\n\n\n\n\n    Scroll up\n  \n\n\n\n\n\n    Scroll down\n  \n\n\n\n\n\n    Enable your microphone, and then whatever you say will be converted to text and typed where your cursor is blinking (automating keyboard functionality)\n  \n\n\n\n\nTarget Audience\n\n    Everyone\n  \nComparison\n\n    There is no comparison with any other projects, as I have not seen any that incorporate all the features I have implemented, which work accurately with both low-resolution integrated laptop webcams and high-end webcams. All the projects I've encountered with a similar concept mainly fall into three categories:\n  \n\n\n\n\n\n    They¬†don't work at¬†all, failing¬†even to¬†move¬†the¬†cursor¬†smoothly.\n  \n\n\n\n\n\n    The cursor moves pretty well and smoothly, but they do not fully automate the mouse, as they always lack some other feature like double-clicking, right-clicking, or scrolling, etc.\n  \n\n\n\n\n\n    They have many features that work well, but require high-end webcams, such as the Logitech Brio."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Content": "Daily Thread"},
{"Title": "CopySave - And easy to use clipboard manager", "Content": "What my project does\n\n    CopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\n  \nTarget Audience\n\n    Everyone who works at a pc, with data. Programmers, especially.\n  \nComparison\n\n    I couldn't find any similar applications. Of course there are some better ones out there.\n  \n\n\nhttps://github.com/mpiele/CopySave"},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Content": "Hey Everyone¬†üëã\n  \n\n    The author of \nRobyn\n here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn?\n  \n\n    You can find Robyn's documentation \nhere\n. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority.\n  \n\n    Please avoid generic responses like \"ASGI is a standard and should be supported.\"\n  \n\n    Instead, share detailed insights and evidence-based arguments to help me understand the tangible benefits ASGI could bring to Robyn or the lack of a specific ASGI feature that will hinder you from using Robyn.\n  \n\n    Looking forward to your feedback!\n  \n\n    Thanks again.\n  \n\n    Repo - \nhttps://github.com/sparckles/Robyn/\nDocs - \nhttps://robyn.tech/documentation"},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Content": "tldr; \nhttps://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj\n\n\n\n    long: Hello \nr/python\n! As a part of \nTech Talks Weekly newsletter\n, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like \nPyCon\n (all locations), \nPyData\n (all locations), \nEuroPython, Conf42\n, and many more to give you a complete overview of the landscape.\n  \n\n\nI've built the playlist as a part of my newsletter called\n \nTech Talks Weekly\n \nwhere once a week I send out all the recently uploaded tech conference talks across engineering conferences (\nsee a recent issue\n \nand\n \nsubscribe\n \nif this sounds useful).\n\n\n\n    Let me know what do you think!"},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Content": "What My Project Does\n\n\n\n    Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax.\n  \n\n\nkey features\n\n\n\n\n\n\n\n    Exceptional Developer Experience:¬†Intuitive and efficient development workflow.\n  \n\n\n\n\n\n    Smooth Learning Curve:¬†Easy to learn and get started.\n  \n\n\n\n\n\n    Modular Code Structure:¬†Write clean, readable, and maintainable code.\n  \n\n\n\n\n\n    Component-Based Architecture:¬†Build reusable and scalable components.\n  \n\n\n\n\n\n    Page Management:¬†Simplify page creation and navigation.\n  \n\n\n\n\n\n    Built-in Router:¬†Seamless client-side routing.\n  \n\n\n\n\n\n    State and Props Management:¬†Efficiently handle component states and properties.\n  \n\n\n\n\n\n    Dependency Injection:¬†Manage dependencies effortlessly.\n  \n\n\n\n\n\n    Global States and Components:¬†Share states and components across the application.\n  \n\n\n\n\n\n    Optimized Virtual DOM:¬†Enhance application performance with a highly efficient virtual DOM.\n  \n\n\n\n\n\n    Component Lifecycle Methods:¬†Control component behavior at different stages.\n  \n\n\n\n\n\n    Form Support:¬†Easily manage form inputs and validation.\n  \n\n\n\n\n\n    API Integration:¬†Integrate external APIs using the requests module.\n  \n\n\n\n\n\n\ntarget Audience\n\n\n\n    Python developers who want to build stateful, component based SPA using pure python.\n  \n\n\nComparison with existing SPA building libraries, frameworks:\n\n\n\n\n\n\n\n    Python Integration:\n  \n\n\n\n\n\n\n\n\n\n    Leverages PyScript and Pyodide: Zenaura allows your Python code to be compiled and transpiled into WebAssembly (WASM), enabling the execution of Python in the browser. This is a significant departure from traditional JavaScript-based frameworks like React, Angular, and Vue, which rely solely on JavaScript for client-side development.\n  \n\n\n\n\n\n\n\n\n\n    Developer Ecosystem:\n  \n\n\n\n\n\n\n\n\n\n    Pythonic Development: Zenaura enables Python developers to build modern web applications without needing to switch to JavaScript, providing a seamless experience for those who are more comfortable with Python.\n  \n\n\n\n\n\n    Unified Language: By using Python for both front-end and back-end development, Zenaura reduces the context-switching overhead and allows for a more cohesive development experience.\n  \n\n\n\n\n\n\n\n\n\n    Performance and Efficiency:\n  \n\n\n\n\n\n\n\n\n\n    Virtual DOM Implementation: Similar to React and Vue, Zenaura utilizes a virtual DOM to optimize rendering performance. However, Zenaura's implementation play more well with the virtual DOM as it update the real DOM in non-blocking asyn way. Also thanks to pydide the python interpreter is ported to WASM, which means less JS footprint , very light library sizes on every library developed around zenaura.\n  \n\n\n\n\n\n\n\n\n\n    Component-Based Architecture:\n  \n\n\n\n\n\n\n\n\n\n    Stateful Components: Zenaura's component-based architecture allows for building reusable, stateful components, akin to React and Vue. This promotes code reusability and modularity.\n  \n\n\n\n\n\n\n\n\n\n    Ease of Learning and Use:\n  \n\n\n\n\n\n\n\n\n\n    Smooth Learning Curve: Zenaura offers an intuitive and straightforward learning path, especially for developers already familiar with Python. This makes it accessible and easy to adopt compared to the steeper learning curves of frameworks like Angular.\n  \n\n\n\n\n\n\n\n\n\n    Ecosystem and Community:\n  \n\n\n\n\n\n\n\n\n\n    Growing Python Ecosystem: By integrating with the Python ecosystem, Zenaura can leverage existing Python libraries and tools, providing a rich set of functionalities and a vibrant community for support and collaboration.\n  \n\n\n\n\nResources:\n\n\n\n\n\n    GitHub Repository:¬†\nhttps://github.com/ARAldhafeeri/Zenaura\n\n\n\n\n\n\n\n    Landing Page:¬†\nhttps://araldhafeeri.github.io/zenaura-landing-page/\n\n\n\n\n\n\n\n    Documentation:¬†\nhttps://araldhafeeri.github.io/Zenaura/"},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Content": "Hey folks! I wanted to share¬†\nBurr\n, an open-source project we've been working on that I'm really excited about.\n  \nTarget Audience\n\n    Developers looking to integrate AI into their web services, or who are curious about state machines.\n  \nThe problem\n\n    Most AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See¬†\nthis comment\n for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions.\n  \nWhat My Project Does\n\n    Our solution is to represent applications explicitly as state machines, which offers several advantages:\n  \n\n\n\n\n\n    Mentally model your system as a flowchart and directly translate it to code\n  \n\n\n\n\n\n    Execute custom hooks before/after step execution\n  \n\n\n\n\n\n    Decouple state persistence from application logic\n  \n\n\n\n\n\n    Rewind back in time/test counterfactuals (load up, fork, and debug)\n  \n\n\n\n\n\n    Query the exact (reproducible) application state at any point in time\n  \n\n\n\n\n\n    This is why we built Burr -- to make these capabilities easy and accessible. The design starts simple: define your actions as functions (or classes) and wire them together in an application. Each action reads from and writes to state, and the application orchestrates, deciding which action to delegate to next. An OS tracking UI lets you inspect the current state/get at *why* your application made a certain decision.\n  \n\n    While most people use it for LLM-based applications (where state is often complex and critical), we see potential for broader applications such as running time-series simulations, ML training, managing parallel jobs, and more. Burr is entirely dependency-free (using only the standard library), though it offers plugins that you can opt into.\n  \n\n    We've gotten some great initial traction, and would love more users and feedback.¬†\nThe repository\n¬†has code examples + links to get started. Feel free to DM if you have any questions!"},
{"Title": "Request to journalists: no snakes", "Content": "Could you please stop using photos of snakes on your articles about Python?\n  \n\n    Not only is it unimaginative, stale, and clich√©, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles.\n  \n\n    P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "Instant Python pipeline from OpenAPI spec", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets.\n  \n\n    We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based.\n  \nWhat My Project Does\n\n\ndlt-init-openapi, and the REST API toolkit\nare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines).\n  \nTarget Audience\n\n\ndlt-init-openapi\n is designed for data engineers, and other developers who frequently work with API data and require an efficient method to ingest and manage this data within their applications or services. It is particularly useful for those working in environments that support Python and is compatible with various operating systems, making it a versatile tool for both development and production environments.\n  \n\n    dlt's loader features automatic typing and schema evolution and processes data in microbatches to handle memory, reducing maintenance to almost nothing.\n  \nComparison\n\n    Both the generation and the python declarative REST API source are new to our industry so it's hard to compare. dlt is open source and you will own your pipelines to run as you please in your existing orchestrators, as dlt is just a lightweight library that can run anywhere Python runs, including lightweight things like serverless functions.\n  \n\n    dlt is like requests + df.to_sql() on steroids, while the generator is similar to generators that create python clients for apis - which is what we basically do with extra info relevant to data engineering work (like incremental loading etc)\n  \n\n    Someone from community created a blog post comparing it to Airbyte's low code connector: \nhttps://untitleddata.company/blog/How-to-create-a-dlt-source-with-a-custom-authentication-method-rest-api-vs-airbyte-low-code\n\n\n\n    More Info\n  \n\n    For more detailed information on how \ndlt-init-openapi\n works and how you can integrate it into your projects, check out the links below:\n  \n\n\n\n\n\n\nGitHub Repository for the tool\n\n\n\n\n\n\n\n\nOpenAPI specs repository you can use\n\n\n\n\n\n\n\n\nVideo Walkthrough\n\n\n\n\n\n\n\n\nColab Demo\n\n\n\n\n\n\n\n\nDocumentation and Quick Start Guide\n\n\n\n\n\n\n\n\nblog: REST API toolkit which helps understand how to edit the generated pipeline"},
{"Title": "What are the best Python projects you've worked on?", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Content": "Daily Thread"},
{"Title": "Python script to automate Bing searches for reward generation", "Content": "What My Project Does\n\n\n(Link)\n¬†Check this out :¬†\naditya-shrivastavv/ranwcopy\n\n\n\n    Python program which generates random words and sentences and copy them to clipboardüóíÔ∏è.\n  \n\n    I created a script to automate Bing searches for reward generation\n  \n\n\n\n\n\n    üëç Excellent command line experience.\n  \n\n\n\n\n\n    üôÇ User friendly.\n  \n\n\n\n\n\n    üîä Produces sound so you don't have to start at it.\n  \n\n\n\n\n\n    üîÅ Auto copy to clipboardüóíÔ∏è\n  \n\n\n\n\n\n    üí° Intuitive help menu\n  \n\n\n\n\nTarget Audience\n\n    Anyone who wants to quickly get points from bing searches under there daily limit\n  \nComparison\n\n    This is no comparison, this is a very unique approch to the problem. You will find many browser extensions which claim to do the same thing, but they don't work like the search engine expects\n  \nCommands\n\n    Help menu\n  \nranwcopy -h\n#OR\nranwcopy --help\n\n    Start generating words (10 default with 8 seconds gap)\n  \nranwcopy\n\n    Generate 20 words with 9 seconds gap\n  \nranwcopy -i 20 -g 9\n# or\nranwcopy --iterations 20 --timegap 9\n\n    This is a semi automatic script"},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues.\n  \n\n    Here is a link to the video\n  \n\n\nhttps://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Content": "py4cli (Scalable Argument Parser)\n\n\nTarget Audience\n\n    * Developers who want to develop scalable cli utility tools in python using declarative programming\n  \nComparison¬†\n\n    * Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments.\n  \n\n    * The Library have two variants minimal and moderate argument parsers, minimal can be used for creating simple cli tool, while moderate is vertically scaled version of minimal argument parser & helps in controlling execution flow of the tool in addition to routing the arguments to the respective methods.\n  \nWhat My Project Does\n\n    * The library \nworks fine with windows & Linux supporting basic data types like int, float, str, list, dict, bool\n. Further developments for making the solution even more scalable is in progress.\n  \n\n    Kindly check out the project and documentation below,\n  \n\n    GitHub Link :  \nhttps://github.com/Palani-SN/py4cli\n ,\n  \n\n    * Kindly rate the project in GitHub with stars if you like\n  \n\n    PYPI Link : \nhttps://pypi.org/project/py4cli/\n\n\n\n    * Feel free to try this out with installation and usage.\n  \n\n    I am still actively developing it, so any feedback/comments would be appreciated!\n  \n\n    EDIT :\n  \n\n\nHow is it different than already existing tools\n :\n  \n\n\nargparse\n - argparse is good in supporting different data types, but might not be able to control the flow of the code, or the arguments passed in can not be hierarchical always, which is what I term as scalability. In py4cli, the motive is to have better scalability in terms of hierarchical argument parsing.\n  \n\n\nclick, typer & cyclopts\n - Even though they support hierarchical cli arguments parsing, I feel, they rely much on decorators and its arguments more than necessary, In py4cli, the motive is to have, no extra decorators, or annotations as code, all that needs to be done is define a derived class from one of the base class provided in the lib, as per need and you can directly pass arguments to different methods of the class like how you will pass args and kwargs to a function natively.\n  \n\n\nPy4Cli\n will be fulfilling the very basic aspects of cli interface to parse arguments, while ignoring on cli sophistication to concentrate on the scalability of the arguments passed, and in future to pass nested configuration files as inputs, with an emphasis on loosely coupled architecture.\n  \n\n\nAdditional Resources\n :\n  \n\n    docs : \nhttps://github.com/Palani-SN/py4cli/blob/main/README.md\n\n\n\n    examples : \nhttps://github.com/Palani-SN/py4cli/tree/main/EXAMPLES"},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Content": "I'm happy to introduce \nfastc\n, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you‚Äôre working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good.\n  \n\n    Key Features\n  \n\n\n\n\n\n    Focused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation.\n  \n\n\n\n\n\n    Cosine Similarity Classification: Instead of fine-tuning, classify texts using cosine similarity between class embedding centroids and text embeddings.\n  \n\n\n\n\n\n    Efficient Multi-Classifier Execution: Run multiple classifiers without extra overhead when using the same model for embeddings.\n  \n\n\n\n\n\n    Easy Export and Loading with HuggingFace: Models can be easily exported to and loaded from HuggingFace. Unlike with fine-tuning, only one model for embeddings needs to be loaded in memory to serve any number of classifiers.\n  \n\n\n\n\n\n\nhttps://github.com/EveripediaNetwork/fastc"},
{"Title": "Password protect Pdf using python", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1\n This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "RESTful API Hosting", "Content": "Good morrow all,\n  \n\n    I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options?\n  \n\n    This is something for work, not a personal project."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\n\n    With the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more.\n  \n\n    The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe.\n  \n\n    11,023 subscribers - the largest Python on hardware newsletter out there.\n  \n\n    Catch all the weekly news on Python for Microcontrollers with adafruitdaily.com.\n  \n\n    This ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!\n  \n\n    Ensure you catch the weekly Python on Hardware roundup‚Äì you can cancel anytime ‚Äì try our spam-free newsletter today!\n  \n\n\nhttps://www.adafruitdaily.com/"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Content": "Daily Thread"},
{"Title": "Fields and class properties should be sorted alphabetically?", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model:\n  \nclass Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str\n\n    One of developers suggests that fields should be sorted alphabetically:\n  \nclass Example(BaseModel):\n    age: int\n    id: int\n    name: str\n    operation: str\n    surname: str\n\n    I think there shouldn't be any specific order but only developer' subjective look at importance and connection between fields, like \"name\" and \"surname\" should be next to each other because they are in some way connected. What is your opinion? Maybe there are some PEP8 rules about that?"},
{"Title": "Tuples Are Underrated! List vs Tuple üêç", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist.\n  \n\n\nIn this video\n we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples!\n  \n\n    Any feedback on the content would be highly appreciated ‚ò∫Ô∏è\n  \n\n\nhttps://youtu.be/-sO4FG6W4ho"},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, ‚Ä¶)", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are¬†\nvery popular frameworks\n, so many CMake modules have been written, and most projects end up including a¬†\ncopy of these modules\n¬†or using some¬†\nhardcoded paths\n.\n  \n\n    I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\n  \n\n\n\n\n\n\nhttps://github.com/python-cmake/pytest-cmake\n\n\n\n\n\n\n\n\nhttps://github.com/python-cmake/sphinx-cmake\n\n\n\n\n\n\n\n    It uses the¬†\npip\n¬†package management, providing a module for each package and automatically generating a configuration based on the package version found.\n  \n> pip install pytest-cmake\n> pip install sphinx-cmake\n\n    I hope this method can standardize module integration for common Python tools.\n  \n\n    Let me know what you think!"},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\n  \n\n\n\n\n\n\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "Code review for my simple project", "Content": "I've made this simple little package to stretch out audios \nhttps://github.com/Mews/simpleaudiostretch\n\n\n\n    However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices.\n  \n\n    Thank you in advance if anyone is willing to help"},
{"Title": "Wave Equation Solver in Python", "Content": "Hello \nr/Python\n,\n  \nWhat My Project Does\n\n    I wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations.\n  \nTarget Audience\n\n    I mainly created this tool while working on my research project. It is not yet complete since it deadens heavily on some parts I still didn't finish. It is about numeric computations of the wave equation on arbitrary boundaries. So I still need to apply some mask on these results and extend the Neumann conditions beyond the current implementation.\n  \nComparison\n\n    This tool is way more customizable (at least imho) than other Python tools I found online. The code is more structured allowing for future extensibility. I also tried to make it as user-friendly as possible. I hope you find it useful and I would appreciate any feedback you might have. I still didn't implement tests, so if you find any bugs please let me know. Also, the documentation is lacking, but I'm working on it.\n  \n\n    You can find the code on GitHub: \nhttps://github.com/salastro/wavepde"},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Content": "The¬†\nPython Shiny\n¬†library is a framework for building interactive web applications in Python.\n  \n\n    Developed by RStudio, the same team behind the¬†\nShiny\n¬†library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills.\n  \n\n    All that is needed is knowledge of the Shiny user interface Application Programming Interface (API).\n  \n\n    Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone.\n  \n\n\nHow easy is it to use?\n¬†Let‚Äôs use a simple data set and a basic interactive data visualization to take it for a test drive.\n  \n\n    Free article \nHERE\n."},
{"Title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies", "Content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are \nyanked\n.\n  \n\n    The important effect this has had is anyone who may have defined their requirements as something like \nPySimpleGUI<5\n or \nPySimpleGUI==4.x.x\n for a now-deleted version, your installations will fail with a message like:\n  \nERROR: No matching distribution found for pysimplegui<5\n\n    If you have no specific version requested for \nPySimpleGUI\n you will end up installing the version with a proprietary license and nagware.\n  \n\n    There are three options to deal with this without compeltely changing your code:\n  \n\n\n\n\n\n    Specify the latest yanked, but now unsupported version of PySimpleGUI \nPySimpleGUI==4.60.5\n and hope they don't delete that some time in the future\n  \n\n\n\n\n\n    Use the supported LGPL fork, \nFreeSimpleGUI\n (full disclosure, I maintain this fork)\n  \n\n\n\n\n\n    Pay up for a PySimpleGUI 5 license."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Content": "Daily Thread"},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Content": "Hey Everyone¬†üëã\n  \n\n    The author of \nRobyn\n here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn?\n  \n\n    You can find Robyn's documentation \nhere\n. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority.\n  \n\n    Please avoid generic responses like \"ASGI is a standard and should be supported.\"\n  \n\n    Instead, share detailed insights and evidence-based arguments to help me understand the tangible benefits ASGI could bring to Robyn or the lack of a specific ASGI feature that will hinder you from using Robyn.\n  \n\n    Looking forward to your feedback!\n  \n\n    Thanks again.\n  \n\n    Repo - \nhttps://github.com/sparckles/Robyn/\nDocs - \nhttps://robyn.tech/documentation"},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Content": "tldr; \nhttps://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj\n\n\n\n    long: Hello \nr/python\n! As a part of \nTech Talks Weekly newsletter\n, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like \nPyCon\n (all locations), \nPyData\n (all locations), \nEuroPython, Conf42\n, and many more to give you a complete overview of the landscape.\n  \n\n\nI've built the playlist as a part of my newsletter called\n \nTech Talks Weekly\n \nwhere once a week I send out all the recently uploaded tech conference talks across engineering conferences (\nsee a recent issue\n \nand\n \nsubscribe\n \nif this sounds useful).\n\n\n\n    Let me know what do you think!"},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Content": "What My Project Does\n\n\n\n    Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax.\n  \n\n\nkey features\n\n\n\n\n\n\n\n    Exceptional Developer Experience:¬†Intuitive and efficient development workflow.\n  \n\n\n\n\n\n    Smooth Learning Curve:¬†Easy to learn and get started.\n  \n\n\n\n\n\n    Modular Code Structure:¬†Write clean, readable, and maintainable code.\n  \n\n\n\n\n\n    Component-Based Architecture:¬†Build reusable and scalable components.\n  \n\n\n\n\n\n    Page Management:¬†Simplify page creation and navigation.\n  \n\n\n\n\n\n    Built-in Router:¬†Seamless client-side routing.\n  \n\n\n\n\n\n    State and Props Management:¬†Efficiently handle component states and properties.\n  \n\n\n\n\n\n    Dependency Injection:¬†Manage dependencies effortlessly.\n  \n\n\n\n\n\n    Global States and Components:¬†Share states and components across the application.\n  \n\n\n\n\n\n    Optimized Virtual DOM:¬†Enhance application performance with a highly efficient virtual DOM.\n  \n\n\n\n\n\n    Component Lifecycle Methods:¬†Control component behavior at different stages.\n  \n\n\n\n\n\n    Form Support:¬†Easily manage form inputs and validation.\n  \n\n\n\n\n\n    API Integration:¬†Integrate external APIs using the requests module.\n  \n\n\n\n\n\n\ntarget Audience\n\n\n\n    Python developers who want to build stateful, component based SPA using pure python.\n  \n\n\nComparison with existing SPA building libraries, frameworks:\n\n\n\n\n\n\n\n    Python Integration:\n  \n\n\n\n\n\n\n\n\n\n    Leverages PyScript and Pyodide: Zenaura allows your Python code to be compiled and transpiled into WebAssembly (WASM), enabling the execution of Python in the browser. This is a significant departure from traditional JavaScript-based frameworks like React, Angular, and Vue, which rely solely on JavaScript for client-side development.\n  \n\n\n\n\n\n\n\n\n\n    Developer Ecosystem:\n  \n\n\n\n\n\n\n\n\n\n    Pythonic Development: Zenaura enables Python developers to build modern web applications without needing to switch to JavaScript, providing a seamless experience for those who are more comfortable with Python.\n  \n\n\n\n\n\n    Unified Language: By using Python for both front-end and back-end development, Zenaura reduces the context-switching overhead and allows for a more cohesive development experience.\n  \n\n\n\n\n\n\n\n\n\n    Performance and Efficiency:\n  \n\n\n\n\n\n\n\n\n\n    Virtual DOM Implementation: Similar to React and Vue, Zenaura utilizes a virtual DOM to optimize rendering performance. However, Zenaura's implementation play more well with the virtual DOM as it update the real DOM in non-blocking asyn way. Also thanks to pydide the python interpreter is ported to WASM, which means less JS footprint , very light library sizes on every library developed around zenaura.\n  \n\n\n\n\n\n\n\n\n\n    Component-Based Architecture:\n  \n\n\n\n\n\n\n\n\n\n    Stateful Components: Zenaura's component-based architecture allows for building reusable, stateful components, akin to React and Vue. This promotes code reusability and modularity.\n  \n\n\n\n\n\n\n\n\n\n    Ease of Learning and Use:\n  \n\n\n\n\n\n\n\n\n\n    Smooth Learning Curve: Zenaura offers an intuitive and straightforward learning path, especially for developers already familiar with Python. This makes it accessible and easy to adopt compared to the steeper learning curves of frameworks like Angular.\n  \n\n\n\n\n\n\n\n\n\n    Ecosystem and Community:\n  \n\n\n\n\n\n\n\n\n\n    Growing Python Ecosystem: By integrating with the Python ecosystem, Zenaura can leverage existing Python libraries and tools, providing a rich set of functionalities and a vibrant community for support and collaboration.\n  \n\n\n\n\nResources:\n\n\n\n\n\n    GitHub Repository:¬†\nhttps://github.com/ARAldhafeeri/Zenaura\n\n\n\n\n\n\n\n    Landing Page:¬†\nhttps://araldhafeeri.github.io/zenaura-landing-page/\n\n\n\n\n\n\n\n    Documentation:¬†\nhttps://araldhafeeri.github.io/Zenaura/"},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Content": "Hey folks! I wanted to share¬†\nBurr\n, an open-source project we've been working on that I'm really excited about.\n  \nTarget Audience\n\n    Developers looking to integrate AI into their web services, or who are curious about state machines.\n  \nThe problem\n\n    Most AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See¬†\nthis comment\n for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions.\n  \nWhat My Project Does\n\n    Our solution is to represent applications explicitly as state machines, which offers several advantages:\n  \n\n\n\n\n\n    Mentally model your system as a flowchart and directly translate it to code\n  \n\n\n\n\n\n    Execute custom hooks before/after step execution\n  \n\n\n\n\n\n    Decouple state persistence from application logic\n  \n\n\n\n\n\n    Rewind back in time/test counterfactuals (load up, fork, and debug)\n  \n\n\n\n\n\n    Query the exact (reproducible) application state at any point in time\n  \n\n\n\n\n\n    This is why we built Burr -- to make these capabilities easy and accessible. The design starts simple: define your actions as functions (or classes) and wire them together in an application. Each action reads from and writes to state, and the application orchestrates, deciding which action to delegate to next. An OS tracking UI lets you inspect the current state/get at *why* your application made a certain decision.\n  \n\n    While most people use it for LLM-based applications (where state is often complex and critical), we see potential for broader applications such as running time-series simulations, ML training, managing parallel jobs, and more. Burr is entirely dependency-free (using only the standard library), though it offers plugins that you can opt into.\n  \n\n    We've gotten some great initial traction, and would love more users and feedback.¬†\nThe repository\n¬†has code examples + links to get started. Feel free to DM if you have any questions!"},
{"Title": "Request to journalists: no snakes", "Content": "Could you please stop using photos of snakes on your articles about Python?\n  \n\n    Not only is it unimaginative, stale, and clich√©, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles.\n  \n\n    P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "Instant Python pipeline from OpenAPI spec", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets.\n  \n\n    We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based.\n  \nWhat My Project Does\n\n\ndlt-init-openapi, and the REST API toolkit\nare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines).\n  \nTarget Audience\n\n\ndlt-init-openapi\n is designed for data engineers, and other developers who frequently work with API data and require an efficient method to ingest and manage this data within their applications or services. It is particularly useful for those working in environments that support Python and is compatible with various operating systems, making it a versatile tool for both development and production environments.\n  \n\n    dlt's loader features automatic typing and schema evolution and processes data in microbatches to handle memory, reducing maintenance to almost nothing.\n  \nComparison\n\n    Both the generation and the python declarative REST API source are new to our industry so it's hard to compare. dlt is open source and you will own your pipelines to run as you please in your existing orchestrators, as dlt is just a lightweight library that can run anywhere Python runs, including lightweight things like serverless functions.\n  \n\n    dlt is like requests + df.to_sql() on steroids, while the generator is similar to generators that create python clients for apis - which is what we basically do with extra info relevant to data engineering work (like incremental loading etc)\n  \n\n    Someone from community created a blog post comparing it to Airbyte's low code connector: \nhttps://untitleddata.company/blog/How-to-create-a-dlt-source-with-a-custom-authentication-method-rest-api-vs-airbyte-low-code\n\n\n\n    More Info\n  \n\n    For more detailed information on how \ndlt-init-openapi\n works and how you can integrate it into your projects, check out the links below:\n  \n\n\n\n\n\n\nGitHub Repository for the tool\n\n\n\n\n\n\n\n\nOpenAPI specs repository you can use\n\n\n\n\n\n\n\n\nVideo Walkthrough\n\n\n\n\n\n\n\n\nColab Demo\n\n\n\n\n\n\n\n\nDocumentation and Quick Start Guide\n\n\n\n\n\n\n\n\nblog: REST API toolkit which helps understand how to edit the generated pipeline"},
{"Title": "What are the best Python projects you've worked on?", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Content": "Daily Thread"},
{"Title": "Python script to automate Bing searches for reward generation", "Content": "What My Project Does\n\n\n(Link)\n¬†Check this out :¬†\naditya-shrivastavv/ranwcopy\n\n\n\n    Python program which generates random words and sentences and copy them to clipboardüóíÔ∏è.\n  \n\n    I created a script to automate Bing searches for reward generation\n  \n\n\n\n\n\n    üëç Excellent command line experience.\n  \n\n\n\n\n\n    üôÇ User friendly.\n  \n\n\n\n\n\n    üîä Produces sound so you don't have to start at it.\n  \n\n\n\n\n\n    üîÅ Auto copy to clipboardüóíÔ∏è\n  \n\n\n\n\n\n    üí° Intuitive help menu\n  \n\n\n\n\nTarget Audience\n\n    Anyone who wants to quickly get points from bing searches under there daily limit\n  \nComparison\n\n    This is no comparison, this is a very unique approch to the problem. You will find many browser extensions which claim to do the same thing, but they don't work like the search engine expects\n  \nCommands\n\n    Help menu\n  \nranwcopy -h\n#OR\nranwcopy --help\n\n    Start generating words (10 default with 8 seconds gap)\n  \nranwcopy\n\n    Generate 20 words with 9 seconds gap\n  \nranwcopy -i 20 -g 9\n# or\nranwcopy --iterations 20 --timegap 9\n\n    This is a semi automatic script"},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues.\n  \n\n    Here is a link to the video\n  \n\n\nhttps://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Content": "py4cli (Scalable Argument Parser)\n\n\nTarget Audience\n\n    * Developers who want to develop scalable cli utility tools in python using declarative programming\n  \nComparison¬†\n\n    * Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments.\n  \n\n    * The Library have two variants minimal and moderate argument parsers, minimal can be used for creating simple cli tool, while moderate is vertically scaled version of minimal argument parser & helps in controlling execution flow of the tool in addition to routing the arguments to the respective methods.\n  \nWhat My Project Does\n\n    * The library \nworks fine with windows & Linux supporting basic data types like int, float, str, list, dict, bool\n. Further developments for making the solution even more scalable is in progress.\n  \n\n    Kindly check out the project and documentation below,\n  \n\n    GitHub Link :  \nhttps://github.com/Palani-SN/py4cli\n ,\n  \n\n    * Kindly rate the project in GitHub with stars if you like\n  \n\n    PYPI Link : \nhttps://pypi.org/project/py4cli/\n\n\n\n    * Feel free to try this out with installation and usage.\n  \n\n    I am still actively developing it, so any feedback/comments would be appreciated!\n  \n\n    EDIT :\n  \n\n\nHow is it different than already existing tools\n :\n  \n\n\nargparse\n - argparse is good in supporting different data types, but might not be able to control the flow of the code, or the arguments passed in can not be hierarchical always, which is what I term as scalability. In py4cli, the motive is to have better scalability in terms of hierarchical argument parsing.\n  \n\n\nclick, typer & cyclopts\n - Even though they support hierarchical cli arguments parsing, I feel, they rely much on decorators and its arguments more than necessary, In py4cli, the motive is to have, no extra decorators, or annotations as code, all that needs to be done is define a derived class from one of the base class provided in the lib, as per need and you can directly pass arguments to different methods of the class like how you will pass args and kwargs to a function natively.\n  \n\n\nPy4Cli\n will be fulfilling the very basic aspects of cli interface to parse arguments, while ignoring on cli sophistication to concentrate on the scalability of the arguments passed, and in future to pass nested configuration files as inputs, with an emphasis on loosely coupled architecture.\n  \n\n\nAdditional Resources\n :\n  \n\n    docs : \nhttps://github.com/Palani-SN/py4cli/blob/main/README.md\n\n\n\n    examples : \nhttps://github.com/Palani-SN/py4cli/tree/main/EXAMPLES"},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Content": "I'm happy to introduce \nfastc\n, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you‚Äôre working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good.\n  \n\n    Key Features\n  \n\n\n\n\n\n    Focused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation.\n  \n\n\n\n\n\n    Cosine Similarity Classification: Instead of fine-tuning, classify texts using cosine similarity between class embedding centroids and text embeddings.\n  \n\n\n\n\n\n    Efficient Multi-Classifier Execution: Run multiple classifiers without extra overhead when using the same model for embeddings.\n  \n\n\n\n\n\n    Easy Export and Loading with HuggingFace: Models can be easily exported to and loaded from HuggingFace. Unlike with fine-tuning, only one model for embeddings needs to be loaded in memory to serve any number of classifiers.\n  \n\n\n\n\n\n\nhttps://github.com/EveripediaNetwork/fastc"},
{"Title": "Password protect Pdf using python", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1\n This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "RESTful API Hosting", "Content": "Good morrow all,\n  \n\n    I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options?\n  \n\n    This is something for work, not a personal project."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\n\n    With the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more.\n  \n\n    The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe.\n  \n\n    11,023 subscribers - the largest Python on hardware newsletter out there.\n  \n\n    Catch all the weekly news on Python for Microcontrollers with adafruitdaily.com.\n  \n\n    This ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!\n  \n\n    Ensure you catch the weekly Python on Hardware roundup‚Äì you can cancel anytime ‚Äì try our spam-free newsletter today!\n  \n\n\nhttps://www.adafruitdaily.com/"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Content": "Daily Thread"},
{"Title": "Fields and class properties should be sorted alphabetically?", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model:\n  \nclass Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str\n\n    One of developers suggests that fields should be sorted alphabetically:\n  \nclass Example(BaseModel):\n    age: int\n    id: int\n    name: str\n    operation: str\n    surname: str\n\n    I think there shouldn't be any specific order but only developer' subjective look at importance and connection between fields, like \"name\" and \"surname\" should be next to each other because they are in some way connected. What is your opinion? Maybe there are some PEP8 rules about that?"},
{"Title": "Tuples Are Underrated! List vs Tuple üêç", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist.\n  \n\n\nIn this video\n we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples!\n  \n\n    Any feedback on the content would be highly appreciated ‚ò∫Ô∏è\n  \n\n\nhttps://youtu.be/-sO4FG6W4ho"},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, ‚Ä¶)", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are¬†\nvery popular frameworks\n, so many CMake modules have been written, and most projects end up including a¬†\ncopy of these modules\n¬†or using some¬†\nhardcoded paths\n.\n  \n\n    I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\n  \n\n\n\n\n\n\nhttps://github.com/python-cmake/pytest-cmake\n\n\n\n\n\n\n\n\nhttps://github.com/python-cmake/sphinx-cmake\n\n\n\n\n\n\n\n    It uses the¬†\npip\n¬†package management, providing a module for each package and automatically generating a configuration based on the package version found.\n  \n> pip install pytest-cmake\n> pip install sphinx-cmake\n\n    I hope this method can standardize module integration for common Python tools.\n  \n\n    Let me know what you think!"},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\n  \n\n\n\n\n\n\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "Code review for my simple project", "Content": "I've made this simple little package to stretch out audios \nhttps://github.com/Mews/simpleaudiostretch\n\n\n\n    However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices.\n  \n\n    Thank you in advance if anyone is willing to help"},
{"Title": "Wave Equation Solver in Python", "Content": "Hello \nr/Python\n,\n  \nWhat My Project Does\n\n    I wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations.\n  \nTarget Audience\n\n    I mainly created this tool while working on my research project. It is not yet complete since it deadens heavily on some parts I still didn't finish. It is about numeric computations of the wave equation on arbitrary boundaries. So I still need to apply some mask on these results and extend the Neumann conditions beyond the current implementation.\n  \nComparison\n\n    This tool is way more customizable (at least imho) than other Python tools I found online. The code is more structured allowing for future extensibility. I also tried to make it as user-friendly as possible. I hope you find it useful and I would appreciate any feedback you might have. I still didn't implement tests, so if you find any bugs please let me know. Also, the documentation is lacking, but I'm working on it.\n  \n\n    You can find the code on GitHub: \nhttps://github.com/salastro/wavepde"},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Content": "The¬†\nPython Shiny\n¬†library is a framework for building interactive web applications in Python.\n  \n\n    Developed by RStudio, the same team behind the¬†\nShiny\n¬†library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills.\n  \n\n    All that is needed is knowledge of the Shiny user interface Application Programming Interface (API).\n  \n\n    Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone.\n  \n\n\nHow easy is it to use?\n¬†Let‚Äôs use a simple data set and a basic interactive data visualization to take it for a test drive.\n  \n\n    Free article \nHERE\n."},
{"Title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies", "Content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are \nyanked\n.\n  \n\n    The important effect this has had is anyone who may have defined their requirements as something like \nPySimpleGUI<5\n or \nPySimpleGUI==4.x.x\n for a now-deleted version, your installations will fail with a message like:\n  \nERROR: No matching distribution found for pysimplegui<5\n\n    If you have no specific version requested for \nPySimpleGUI\n you will end up installing the version with a proprietary license and nagware.\n  \n\n    There are three options to deal with this without compeltely changing your code:\n  \n\n\n\n\n\n    Specify the latest yanked, but now unsupported version of PySimpleGUI \nPySimpleGUI==4.60.5\n and hope they don't delete that some time in the future\n  \n\n\n\n\n\n    Use the supported LGPL fork, \nFreeSimpleGUI\n (full disclosure, I maintain this fork)\n  \n\n\n\n\n\n    Pay up for a PySimpleGUI 5 license."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Content": "Daily Thread"},
{"Title": "Tach - enforce module boundaries + deps, now in Rust ü¶Ä", "Content": "https://github.com/gauge-sh/tach\n\n\n\n    Hey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\n  \n\n\n\n\n\n    Re-wrote the core in Rust, leading to a ~19x speed up on large repos\n  \n\n\n\n\n\n    Re-worked the interface, and added a TUI to let you interactively declare modules\n  \n\n\n\n\n\n    We built Tach to solve the ‚Äúball of mud‚Äù problem that we‚Äôve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!\n  \n\n    Tach is the best way to grow a modular monolith without creating a ball of mud. If anyone has any questions or feedback, I‚Äôd love chat!\n  \n\n\nhttps://github.com/gauge-sh/tach\n\n\n\n\nWhat My Project Does\n\n\n\n    Tach enables you to interactively declare module boundaries, dependencies between modules, and strict interfaces for those modules. You can then enforce those declarations through a static code check.\n  \n\n\nTarget Audience\n¬†\n  \n\n    Teams maintaining python monorepos.\n  \n\n\nComparison\n¬†\n  \n\n    Import linter is probably the most similar tool - for a github discussion on the differences, check out this link - \nhttps://github.com/gauge-sh/tach/discussions/72"},
{"Title": "New Lands RPG (Play testers welcome)", "Content": "Good \"time of day\" my fellow peeps\n  \n\n\nWhat my project does:\n\n\n\n    I wanted to share my Python game I've been \nslowly\n working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you...\n  \n\n\nTarget Audience:\n\n\n\n    I'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax...\n  \n\n\nComparison:\n\n\n\n    I'd say Colossal cave adventure but that is a much \nbigger... better...\n game I would call it, but this is just a simple \"learning python\" project I started a while ago and just recently got back into it so I said what the heck why not finish the game. but now I'm stuck as to what to do next, so I thought I'd ask for play testers to come and tell me how bad my coding and game was so I could try and make it more playable... because lord knows I made it so \nI\n know how to play it but what about other people.\n  \n\n    you can find the code on GitHub: \nhttps://github.com/littlebudddy321/New-Lands-RPG"},
{"Title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite", "Content": "What My Project Does:\n  \n\n    Moonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\n  \n\n\n\n\n\n    ecstatic: price too low so they are extra happy\n  \n\n\n\n\n\n    content: price is what they were expecting,\n  \n\n\n\n\n\n    sad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period\n  \n\n\n\n\n\n    angry: price is too high so they don't buy\n  \n\n\n\n\n\n    I built a simplified version where a sad reaction doesn't lower the prices customers will accept for that item using Python and SQLite.\n  \n\n    The Bayesian bandits algorithm is an algorithm to optimize rewards when choosing among different options. The probability of different rewards (e.g. revenue) is kept track of and updated as rewards for options are collected. When a new option is to be selected a competition occurs where the rewards are sampled from these probability distributions and the option with the highest reward is chosen.\n  \n\n    For this simulation, the reward distributions are the probability that a price is the ideal price for that item. This scenario is so simple that the probability of any particular ideal price is flat or the same for all prices between an upper and lower bound and zero outside. This makes item/price selection simply randomly selecting a price from the lower to upper bounds for every item and selecting the item with the highest price.\n  \n\n    Customer reaction moods update the item upper/lower price bounds in these ways:\n  \n\n\n\n\n\n    ecstatic or content: lower bound is set to price plus 1 gold\n  \n\n\n\n\n\n    sad: lower bound is set to price if upper and lower bounds don't match\n  \n\n\n\n\n\n    angry: upper bound set to price minus 1 gold if the upper and lower bounds don't match\n  \n\n\n\n\n\n    The SQLite database keeps track of items in your inventory, items on shelves, customer reactions, item price bounds, and Thompson competitions (i.e. prices randomly chosen between price bounds for each item).\n  \n\n    The algorithm ended up identifying groups of items with the same ideal prices and selling them off from highest to lowest.\n  \n\n    For the full write up and a lot of pretty graphs check out the article in the link below. I've also included the Github link for those that want to see the full implementation and/or a Jupyter notebook where I generate the plots.\n  \n\n    Full write-up: \nhttps://cmshymansky.com/MoonlighterBayesianBanditsPricing/?source=rPython\n\n\n\n    Github: \nhttps://github.com/JaggedParadigm/moonlighter_bayesian_bandit_pricing\n\n\n\n    Target Audience:\n  \n\n    This a toy, though the Thompson sampling code could be hacked into something useful.\n  \n\n    Comparison:\n  \n\n    To my knowledge, I am the first to apply the Bayesian bandits algorithm to a Moonlighter shop simulation. However, pricing via Bayesian bandits is a classic application and there are many blogs and scientific papers on the topic."},
{"Title": "Mesop, open-source Python UI framework used at Google to quickly build delightful web apps", "Content": "What my project does:\n I‚Äôm excited to share about \nMesop\n - a new, open-source Python UI framework that enables Python developers to quickly build delightful web apps in a scalable way.\n  \n\n    A small team of us at Google have been developing Mesop as an unofficial 20% project for the past few months. A wide range of research and product teams at Google have been using it to rapidly build internal apps and we‚Äôve gotten a lot of positive feedback internally so now we‚Äôre looking to get feedback from the open-source community.\n  \n\n\nTarget audience:\n Python developers looking to build AI demos & internal apps.\n  \n\n\nComparison:\n We think that Mesop provides a unique approach to building web UIs in Python compared to existing alternatives like Streamlit and Gradio - making it both easy to get started and also flexible enough to build customized UIs for a wide range of use cases. You can learn more about \nwhy we built Mesop here\n.\n  \n\n    To look at some example Mesop apps, check out our \ndemo gallery\n. Also, the demo gallery itself is \nbuilt with Mesop\n which demonstrates the type of flexibility you have in building apps with Mesop.\n  \n\n\nGitHub repo:\n \nhttps://github.com/google/mesop"},
{"Title": "Dask DataFrame is Fast Now!", "Content": "My colleagues and I have been working on making Dask fast. It‚Äôs been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload).\n  \n\n    I wrote a blog post on what we did: \nhttps://docs.coiled.io/blog/dask-dataframe-is-fast.html\n\n\n\n    Really, this came down not to doing one thing really well, but doing lots of small things ‚Äúpretty good‚Äù. Some of the most prominent changes include:\n  \n\n\n\n\n\n    Apache Arrow support in pandas\n  \n\n\n\n\n\n    Better shuffling algorithm for faster joins\n  \n\n\n\n\n\n    Automatic query optimization\n  \n\n\n\n\n\n    There are a bunch of other improvements too like copy-on-write for pandas 2.0 which ensures copies are only triggered when necessary, GIL fixes in pandas, better serialization, a new parquet reader, etc. We were able to get a 20x speedup on traditional DataFrame benchmarks.\n  \n\n    I‚Äôd love it if people tried things out or suggested improvements we might have overlooked.\n  \n\n    Blog post: \nhttps://docs.coiled.io/blog/dask-dataframe-is-fast.html"},
{"Title": "Automate your WordPress new-page creation with Python", "Content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin).\n  \n\n    It's a simple app, but has great expansion potential and it's really easy to use.\n  \n\n    To start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page.\n  \n\n    Run the program, add sections, choose your desired structure, and select the right widgets for your content.\n  \n\n    Once you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)\n  \n\n    You can download and see the project at: \nhttps://github.com/MauBorre/WordPress-new-page-auto\n\n\n\n    Hope you find it useful! üòÅ"},
{"Title": "Granian 1.4 is out", "Content": "Granian ‚Äì the Rust HTTP server for Python applications ‚Äì 1.4 was released!\n  \n\n    Blog post: \nhttps://polar.sh/emmett-framework/posts/granian-1-4\n\n\n\n    Release details: \nhttps://github.com/emmett-framework/granian/releases/tag/v1.4.0\n\n\n\n    Repo: \nhttps://github.com/emmett-framework/granian"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Content": "Daily Thread"},
{"Title": "My little ChatGPT-Multimodal Server Starter", "Content": "Please check out my¬†\nDesktoppy Server\n.\n  \n\n\nWhat My Project Does\n\n\n\n    It allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's.\n  \n\n    It uses ollama internally so you can use all the open-source Models but by default it's using:\n  \n\n\n\n\n\n    LLama3 for text-generation\n  \n\n\n\n\n\n    LLava for image recognition\n  \n\n\n\n\n\n    Stable Diffusion 2 for image generation\n  \n\n\n\n\n\n\nTarget Audience\n\n\n\n    Perfect for new-comers... I wish I had this when I started tackling AI dev.\n  \n\n    I think it can be a good base to create your awesome AI-powered products!\nPlease let me know what you think about it!\n  \n\n\nComparison\n¬†\n  \n\n    It differentiates from the other zillion starters by being very basic, allowing for full customization, and joining the 3 models together into 1 for a multi-modal feeling.\n  \n\n    Easiest possible setup, even for those who don't know the tools yet, all you need is Python3 installed on your PC. Basically a tutorial-starter-multimodal.\n  \n\n    Much love\n  \n\n    Link:¬†\nhttps://github.com/TwistedMinda/desktoppy-server\nThe very basic Web UI that goes along with it:¬†\nhttps://github.com/TwistedMinda/desktoppy-web"},
{"Title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation", "Content": "Hi everyone,\n  \n\n    I'd like to share couple of news regarding my personal project:\n  \n\n\n\n\n\n    New documentation written in Ludic showcasing it's capabilities: \nhttps://getludic.dev/docs/\n\n\n\n\n\n\n\n    New section regrading Layouts inspired from the Every Layout Book: \nhttps://getludic.dev/catalog/layouts\n\n\n\n\n\n\n\n    Cookiecutter template to get quickly started: \nhttps://github.com/paveldedik/ludic-template\n\n\n\n\n\n\n\n    I have a lot of plans with this project and I'd appreciate any feedback.\n  \n\n\nAbout The Project\n\n\n\n    Ludic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components.\n  \n\n\nTarget Audience\n\n\n\n\n\n\n\n    Web developers\n  \n\n\n\n\n\n    People who want to build HTML pages in Python with typing\n  \n\n\n\n\n\n    People without knowledge of JavaScript who want to build interactive UIs\n  \n\n\n\n\n\n    People who want to use HTMX in their projects\n  \n\n\n\n\n\n\nComparison With Similar Tools\n\n\n\n\n\n\n\n\n\n            Feature\n          \n\n            Ludic\n          \n\n            FastUI\n          \n\n            Reflex\n          \n\n\n\n\n\n\n\n\n\n\n\n\n\n              HTML rendering\n            \n\n              Server Side\n            \n\n              Client Side\n            \n\n              Client Side\n            \n\n\n\n\n\n              Uses Template Engine\n            \n\n              No\n            \n\n              No\n            \n\n              No\n            \n\n\n\n\n\n              UI interactivity\n            \n\n\n</> htmx\n\n\n\n\nReact\n\n\n\n\nReact\n\n\n\n\n\n\n\n              Backend framework\n            \n\n\nStarlette\n\n\n\n\nFastAPI\n\n\n\n\nFastAPI\n\n\n\n\n\n\n\n              Client-Server Communication\n            \n\n\nHTML + REST\n\n\n\n\nJSON + REST\n\n\n\n\nWebSockets\n\n\n\n\n\n\n\n\n\n    Any feedback is highly appreciated."},
{"Title": "Python's many command-line utilities", "Content": "Python 3.12 comes bundled with 50 command-line tools.\n  \n\n    For example, \npython -m webbrowser http://example.com\n opens a web browser, \npython -m sqlite3\n launches a sqlite prompt, and \npython -m ast my_file.py\n shows the abstract syntax tree for a given Python file.\n  \n\n    I've dug into each of them and categorized them based on their purpose and how useful they are.\n  \n\n\nPython's many command-line tools"},
{"Title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa", "Content": "What My Project Does\n\n\n\n    Hello everyone! I've just released a new Python package, notion2pandas, which allows you to import a¬†\nNotion database\n¬†into a¬†\npandas dataframe\n¬†with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code.\n  \n\n\nTarget Audience\n\n\n\n    Whether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding!\n  \n\n    üîó GitLab repo:¬†\nhttps://gitlab.com/Jaeger87/notion2pandas\n\n\n\n\nKey Features\n\n\n\n\n\n\n\n\nEasy to use\n. import in a single line of code, export with another single line of code\n  \n\n\n\n\n\n\nNo more boring parsing\n. You can import any Notion Database in a pandas framework\n  \n\n\n\n\n\n\nFlexibility\n. If you don't like the default parsing mode of a data provided by notion2pandas, you can use your own parse function for a specific kind of data.\n  \n\n\n\n\n\n\nMaintainability\n. If Notion broke something with an update, the possibility to provide a different parsing function allows you to use Notion2Pandas even if it's not updated with latest notion update.\n  \n\n\n\n\n\n\nQuick Start\n\n\n\n    In the ReadMe you can find everything you need to start.\n  \n\n\nComparison\n\n\n\n    When I started this project, I couldn't find anything capable of transforming a Notion database into a pandas DataFrame without specifying how to parse the data.\n  \n\n    If you got any kind of feedback I'm really curious to read it!"},
{"Title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it ü§û", "Content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts:\n  \n\n    tl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in \nthis Gist\n.\n  \nProblem\n\n    Request rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of \ncounter\n. Multiprocessing is not great at having a single shared variable.\n  \n\n    I have a use case for a multiprocessing system in which each process can make a number of requests to a REST API server. That server imposes a 1000 requests per minute limit. Hence I needed a way to implement a rate limiter that would work across processes and threads.\n  \n\n    I've spent the past 2 days digging through a ton of SO posts and articles suggesting how to do it, and I came at a few bad solutions. I finally came up with one that I think works quite well. It uses a \nmultiprocessing.Manager\n, and its \nValue\n, \nLock\n and \nCondition\n proxies.\n  \nSolution\n\n    I've created a \nCrossProcessThrottle\n class which stores that \ncounter\n. The way that the information about the \ncounter\n is shared with all the processes and threads is through a \nThrottleBarrier\n class instance. Its \nwait\n method will do the following:\n  \ndef wait(self):\n    with self._condition:\n        self._condition.wait()\n\n    with self._lock:\n        self._counter.value += 1\n\n\n\n\n\n    Wait for the shared \nCondition\n - this will stop all the processes and their threads and keep them dormant.\n  \n\n\n\n\n\n    If the \nCrossProcessThrottle\n calculates that we have available requests (ie. the \ncounter\n is below \nmax_requests\n, so we don't need to limit the requests), it uses \nCondition.notify(n)\n  (\ndocs\n) in order to let \nn\n amount of threads through and carry out the request.\n  \n\n\n\n\n\n    Once approved, each process/thread will bump the shared \nValue\n, indicating that a new request was made.\n  \n\n\n\n\n\n    That \nValue\n is then used by the \nCrossProcessThrottle\n to figure out how many requests have been made since the last check, and adjust its \ncounter\n. If \ncounter\n is equal or greater than \nmax_requests\n, the \nCondition\n will be used to stop all processes and threads, until enough time passes.\n  \n\n    The following is the example code using this system. You can find it in \nthis Gist\n if you prefer.\n  \nimport datetime\nfrom concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor\n\nfrom ratelimiter import ThrottleBarrier, CrossProcessesThrottle\n\n\ndef log(*args, **kwargs):\n    print(datetime.datetime.now().strftime('[%H:%M:%S]'), *args, **kwargs)\n\n\ndef task(i, j, throttle_barrier: ThrottleBarrier):\n    # This will block until there is a free slot to make a request\n    throttle_barrier.wait() \n    log(f'request: {i:2d}, {j:2d}  (process, thread)')\n    # make the request here...\n\n\ndef worker(i, throttle_barrier: ThrottleBarrier):\n    # example process worker, starting a bunch of threads\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        for j in range(5):\n            executor.submit(task, i, j, throttle_barrier)\n\n\nif __name__ == '__main__':\n    cross_process_throttle = CrossProcessesThrottle(max_requests=3, per_seconds=10)\n    throttle_barrier = cross_process_throttle.get_barrier()\n\n    log('start')\n    futures = []\n    # schedule 9 jobs, which should exceed our limit of 3 requests per 10 seconds\n    with ProcessPoolExecutor(max_workers=10) as executor:\n    \n        for i in range(3):\n            futures.append(executor.submit(worker, i, throttle_barrier))\n\n        while len(futures):\n            # calling this method carries out the rate limit calculation\n            cross_process_throttle.cycle()\n\n            for future in futures:\n                if future.done():\n                    futures.remove(future)\n\n    log('finish')\n\n    I've uploaded the source code for \nCrossProcessThrottle\n and \nThrottleBarrier\n as a \nGist too\n. Calculating the \ncounter\n is a bit more code, so I refrain from sharing it here, but in a nutshell:\n  \n\n\n\n\n\n    Store the last amount of requests made as \nlast_counter\n, initialised as 0\n  \n\n\n\n\n\n    Every time the \ncycle()\n is called, compare the difference between the current \ncounter\n and the \nlast_counter\n\n\n\n\n\n\n\n    The difference is how many requests have been made since the last check, hence we increment the \ncounter\n by that many.\n  \n\n\n\n\n\n    We calculate how many calls remaining are allowed: \nremaining_calls = max_requests - counter\n\n\n\n\n\n\n\n    And notify that many threads to go ahead and proceed: \ncondition.notify(remaining_calls)\n\n\n\n\n\n\n\n    The actual process is a little more involved, as at the step 3 we need to store not only the amount of calls made, but also the times they've been made at - so that we can be checking against these later and decrease the \ncounter\n. You can see it in detail in the \nGist\n.\n  \n\n    If you've read through the code - what are your thoughts? Am I missing something here? In my tests it works out pretty nicely, producing:\n  \n[14:57:26] start\n[14:57:26] Calls in the last 10 seconds: current=0 :: remaining=3 :: total=0 :: next slot in=0s\n[14:57:27] request:  0,  1  (process, thread)\n[14:57:27] request:  0,  0  (process, thread)\n[14:57:27] request:  0,  2  (process, thread)\n[14:57:31] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=3 :: next slot in=7s\n[14:57:36] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=3 :: next slot in=2s\n[14:57:38] request:  0,  4  (process, thread)\n[14:57:38] request:  0,  3  (process, thread)\n[14:57:38] request:  1,  0  (process, thread)\n[14:57:41] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=6 :: next slot in=7s\n[14:57:46] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=6 :: next slot in=2s\n[14:57:48] request:  2,  0  (process, thread)\n[14:57:48] request:  1,  1  (process, thread)\n[14:57:48] request:  1,  2  (process, thread)\n[14:57:51] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=9 :: next slot in=8s\n[14:57:56] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=9 :: next slot in=3s\n[14:57:59] request:  2,  4  (process, thread)\n[14:57:59] request:  2,  2  (process, thread)\n[14:57:59] request:  2,  1  (process, thread)\n[14:58:01] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=12 :: next slot in=8s\n[14:58:06] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=12 :: next slot in=3s\n[14:58:09] request:  1,  3  (process, thread)\n[14:58:09] request:  1,  4  (process, thread)\n[14:58:09] request:  2,  3  (process, thread)\n[14:58:10] finish\n\n    I've also tested it with 1000s scheduled jobs to 60 processes, each spawning several threads, each of which simulates a request. The requests are limited as expected, up to N per T seconds.\n  \n\n    I really like that I can construct a single \nThrottleBarrier\n instance that can be passed to all processes and simply call the \nwait\n method to get permission for a request. It feels like an elegant solution.\n  \nResearch\n\n    There are a bunch of libraries for rate limiting, some claiming to support multiprocess, however I couldn't get them to do so:\n  \n\n\n\n\n\n\nhttps://pypi.org/project/ratelimit/\n\n\n\n\n\n\n\n\nhttps://pypi.org/project/ratelimiter/\n\n\n\n\n\n\n\n\nhttps://pypi.org/project/ratemate/\n\n\n\n\n\n\n\n\nhttps://github.com/JWCook/requests-ratelimiter\n\n\n\n\n\n\n\n    There's a few SO threads and posts discussing the process too, however they either don't consider multiprocessing, or when they do they don't allow using \nProcessPoolExecutor\n:\n  \n\n\n\n\n\n\nhttps://stackoverflow.com/questions/69306420/rate-limit-api-multi-process\n\n\n\n\n\n\n\n\nhttps://stackoverflow.com/questions/40748687/python-api-rate-limiting-how-to-limit-api-calls-globally\n\n\n\n\n\n\n\n\nhttps://gist.github.com/justinvanwinkle/d9f04950083c4554835c1a35f9d22dad\n\n\n\n\n\n\n\n\nhttps://stackoverflow.com/questions/6920858/interprocess-communication-in-python\n\n\n\n\n\n\n\n    The issue with \nProcessPoolExecutor\n comes up when you try to use shared resources as it raises an error along the lines of:\n  \nSynchronized objects should only be shared between processes through inheritance\n\n    And to be fair the Googling didn't really help me figuring out how to get around it, just finding more people struggling with the issue:\n  \n\n\n\n\n\n\nhttps://stackoverflow.com/questions/69907453/lock-objects-should-only-be-shared-between-processes-through-inheritance\n\n\n\n\n\n\n\n\nhttps://github.com/python/cpython/issues/79967#issuecomment-1455216546\n\n\n\n\n\n\n\n    The solution would be to not use the \nProcessPoolExecutor\n but that was a bummer. This comment helped me to find the way I've ended up using:\n  \n\n\n\n\n\n\nhttps://stackoverflow.com/a/65377770/3508719\n\n\n\n\n\n\n\n    I'm glad that using the \nSyncManager\n and its proxies I managed to come up with a solution that allows me to use the executor.\n  \nNote\n\n\n\n\n\n    I use multiprocessing instead of multithreading as there is some post-processing done to the data returned from the REST API.\n  \n\n\n\n\n\n    I imagine that for better efficiency I could split the system into a single process that does a lot of multithreading for REST API interaction, and then pass the returned data to several processes for post-processing. I didn't have time to do it at the moment, but I'm aware of this as a potential alternative.\n  \n\n\n\n\n\n    I've built an earlier version of the rate limiter using \nmultiprocessing Listener and Client\n - and carried out the communication through sockets/pipes. While this is useful to know about for inter-process communication, it turned out to be too slow and not support 100s of concurrent requests.\n  \n\n\n\n\n\n    If one of the existing libraries (eg. one of the ones I've listed) supports cross-process rate limiting with \nProcessPoolExecutor\n, I'd love to see how to do it, please share an example!\n  \n\n\n\n\n\n    Multiprocessing can be a pain üò≠\n  \n\n\n\n\n\n    Any feedback on my implementation welcome!"},
{"Title": "Using python for static typing benefits", "Content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced.\n  \n\n    I'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things.\n  \n\n    Thanks!"},
{"Title": "PyODMongo an ODM for MongoDB", "Content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\n  \n\n\n\n\n\n    Built on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents.\n  \n\n\n\n\n\n    Target Audience: Backend developers who want a simple and efficient way to work with MongoDB\n  \n\n\n\n\n\n    Comparison: ODMantic ODM\n  \n\n\n\n\n\n\nGitHub repository\n \nPyPi"},
{"Title": "Tutorial on Surprisingly Simple Python Streamlit Dashboards", "Content": "Streamlit¬†is becoming an increasingly a popular framework for data visualization prototyping with Python. The¬†Streamlit¬†framework saves time, effort, and reduces the complexity traditionally associated with crafting maps and charts.Particularly if we approach application development with a modular approach.\n  \n\n    Starting simple, let‚Äôs put together 4 specific examples that leverage¬†Streamlit¬†for interactive data visualization:\n  \n\n\n\n\n\n    A global choropleth map for a dataset for a specific year.\n  \n\n\n\n\n\n    An animated global choropleth map for a dataset across a number of years\n  \n\n\n\n\n\n    An animated choropleth map for a specific region\n  \n\n\n\n\n\n    A line chart to provide an alternative representation of the data\n  \n\n\n\n\n\n    Link to tutorial \nHERE"},
{"Title": "Self updating spreadsheet with popular questions from Ask Reddit and summarized answers using OpenAI", "Content": "What My Project Does\nThis is a small Python script that runs inside a Google Sheet by way of¬†\nthe Python add-on\n. It uses the¬†\nreddit api\n¬†to fetch posts from¬†\nAsk Reddit\n¬†twice daily. For posts with enough upvotes, it uses the¬†\nOpenAI API\n¬†to summarize an answer to the question based on the comments. I then inserts any new questions and their answers into the spreadsheet and uses the¬†\nTwitter API\nto also post the answer to Twitter I mean X. Should be interesting to anybody looking to connect (a subset) of those APIs.\n  \n\n\nTarget Audience\nAnybody who is looking to mash-up different APIs (Python is great at this and I feel like it is getting a little harder to do this every year).\n  \n\n\nComparison\nI'm not aware of any Python code that does this. Even finding a good example of the V2 twitter API is harder than it seems. To accomplish some of this, you could try to ask ChatGPT directly to summarize the answers for a url but when I tried it said it couldn't access Reddit.\n  \n\n\nResource\n\n\n\n\n\n\n\n    The¬†\nspreadsheet where this happens\n\n\n\n\n\n\n\n    The¬†\ntwitter bot\n¬†in action\n  \n\n\n\n\n\n    The¬†\nsource code\n¬†(or make a copy of the spreadsheet to see)"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Content": "Daily Thread"},
{"Title": "1BRC solution using CPython", "Content": "What My Project Does:\n\n\n\n    I finally got some time to attempt the 1 Billion Row Challenge (1BRC) (\nhttps://www.morling.dev/blog/one-billion-row-challenge/\n) where we are supposed to process a file with 1 billion records of temperature values for cities and print a sorted list with min, max and mean temperature per city.\n  \n\n    I am a sucker for optimization. So when I heard about 1BRC I got intrigued and in the last few days started experimenting with python implementations. I achieved my goal and implemented the fastest implementation running on CPython, without any external libraries. My motivation for CPython was so that I can apply any of the learning's in my day to day work, as I don't see us moving to PyPy any time sooner.\n  \n\n    You can check out the performance numbers and implementation at : \nhttps://github.com/pappuks/1brc\n\n\n\n    Few learning's:\n  \n\n\n\n\n\n    Python Multiprocessing is very powerful in enabling multi core processing and overcoming GIL bottleneck for multi-threading. Using `Pool.starmap` is the easiest way to spawn child processes and collect response.\n  \n\n\n\n\n\n    AI code generation can help you jump start your implementation, but it will most likely be sub-optimal and you need to spend time in optimizing the code by understanding the core logic.\n  \n\n\n\n\n\n    PyPy gives good boost over CPython but compatibility of PyPy with external libraries is a limiting factor.\n  \n\n\n\n\n\n    Mypyc compilation was not any faster than default CPython implementation. Always measure after making the change.\n  \n\n\n\n\n\n    Optimizing for PyPy does not make the implementation any faster in CPython, but optimizing for CPython does make the implementation faster in PyPy.\n  \n\n\n\n\n\n\nTarget Audience:\n\n\n\n    This is a hobby project, but most of the findings and learning can be applied to production projects as well. And given that all optimizations are done on CPython its applicability to production is easy.\n  \n\n\nComparison:\n\n\n\n    This is the fastest CPython implementation for solving the 1BRC problem. The detailed comparison is provided in the above github repository.\n  \n\n\n\n\n\n\n\n            Interpreter\n          \n\n            File\n          \n\n            Time (sec)\n          \n\n\n\n\n\n\n\n\n\n\n\n\n\n              Python3\n            \n\n              py_1brc_final.py\n            \n\n              24.882\n            \n\n\n\n\n\n              Python3\n            \n\n              py_1brc_mypyc.py (process_chunk.py precompiled using mypyc)\n            \n\n              24.441\n            \n\n\n\n\n\n              Python3\n            \n\n\ncalculateAverage.py\n (from \nhttps://github.com/ifnesi/1brc\n)\n            \n\n              36.303\n            \n\n\n\n\n\n              Python3\n            \n\n\ncalculateAveragePyPy.py\n (from \nhttps://github.com/ifnesi/1brc\n)\n            \n\n              60.60\n            \n\n\n\n\n\n              Python3\n            \n\n              doug_booty4.py (from \nhttps://github.com/dougmercer-yt/1brc\n)\n            \n\n              62.91"},
{"Title": "Community Insights on PgQueuer", "Content": "Hey \nr/Python\n!\n  \n\n\nA while ago\n, I introduced you to \nPgQueuer\n, a Python library designed for handling job queues using Postgres native functionalities. If you've started using PgQueuer, I‚Äôm keen to initiate a discussion on your experiences with it.\n  \n\n\n\n\n\n    How and where have you integrated PgQueuer into your projects?\n  \n\n\n\n\n\n    Any difficulties or shortcomings you‚Äôve experienced while using PgQueuer?\n  \n\n\n\n\n\n    Thoughts on the library‚Äôs efficiency and features?"},
{"Title": "Keep system awake (prevent sleep) using python: wakepy", "Content": "Hi all,\n  \n\n    I had previously a problem that I wanted to run some long running python scripts without being interrupted by the automatic suspend. I did not find a package that would solve the problem, so I decided to create my own. In the design, I have selected non-disruptive methods which do not rely on mouse movement or pressing a button like F15 or alter system settings. Instead, I've chosen methods that use the APIs and executables meant specifically for the purpose.\n  \n\n    I've just released wakepy 0.9.0 which supports Windows, macOS, Gnome, KDE and freedesktop.org compliant DEs.\n  \n\n    GitHub: \nhttps://github.com/fohrloop/wakepy\n\n\n\n    Comparison to other alternatives: typical other solutions rely on moving the mouse using some library or pressing F15. These might cause problems as your mouse will not be as accurate if it moves randomly, and pressing F15 or other key might have side effects on some systems. Other solutions might also prevent screen lock (e.g. wiggling mouse or pressing a button), but wakepy has a mode for just preventing the automatic sleep, which is better for security and advisable if the display is not required.\n  \n\n    Hope you like it, and I would be happy to hear your thoughts and answer to any questions!"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Content": "Daily Thread"},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Content": "Problem Statement\n\n\n\n    I recently explored SonarQube for static code analysis. While it‚Äôs a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself.\n  \n\n\nTarget Audience\n\n\n\n    This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback!\n  \n\n\nComparison with Similar Tools\n\n\n\n    There was only one similar tool in the Sonar Marketplace, but it‚Äôs no longer maintained.\n  \n\n\nProject Details\n\n\n\n    I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub.\n  \n\n\nLinks:\n\n\n\n\n\n\n\n\nPyPi:\n \nRedCoffee\n\n\n\n\n\n\n\n\nGitHub:\n \nRedCoffee Repository\n\n\n\n\n\n\n\n    Feel free to check it out and let me know your thoughts!"},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Content": "Hello everyone!\n  \nWhat My Project Does\n\n    I'm excited to share \nReqFlow\n - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!\n  \nTarget Audience\n\n    It would be suitable for beginners due to its reduced entry barrier and also supports advanced use cases with a RestAssured-like approach.\n  \nComparison\n\n    While standard approaches for API testing with Python (e.g., \nrequests\n) definitely makes sense, ReqFlow provides a more fluent and expressive syntax, making it easier to write and understand tests.\n  \n\n    Check it out on \nGitHub\n and the \ndocs at reqflow.org\n.\n  \n\n    All feedback and contributions are welcome! üôÇ"},
{"Title": "Tach - enforce module boundaries + deps, now in Rust ü¶Ä", "Content": "https://github.com/gauge-sh/tach\n\n\n\n    Hey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\n  \n\n\n\n\n\n    Re-wrote the core in Rust, leading to a ~19x speed up on large repos\n  \n\n\n\n\n\n    Re-worked the interface, and added a TUI to let you interactively declare modules\n  \n\n\n\n\n\n    We built Tach to solve the ‚Äúball of mud‚Äù problem that we‚Äôve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!\n  \n\n    Tach is the best way to grow a modular monolith without creating a ball of mud. If anyone has any questions or feedback, I‚Äôd love chat!\n  \n\n\nhttps://github.com/gauge-sh/tach\n\n\n\n\nWhat My Project Does\n\n\n\n    Tach enables you to interactively declare module boundaries, dependencies between modules, and strict interfaces for those modules. You can then enforce those declarations through a static code check.\n  \n\n\nTarget Audience\n¬†\n  \n\n    Teams maintaining python monorepos.\n  \n\n\nComparison\n¬†\n  \n\n    Import linter is probably the most similar tool - for a github discussion on the differences, check out this link - \nhttps://github.com/gauge-sh/tach/discussions/72"},
{"Title": "New Lands RPG (Play testers welcome)", "Content": "Good \"time of day\" my fellow peeps\n  \n\n\nWhat my project does:\n\n\n\n    I wanted to share my Python game I've been \nslowly\n working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you...\n  \n\n\nTarget Audience:\n\n\n\n    I'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax...\n  \n\n\nComparison:\n\n\n\n    I'd say Colossal cave adventure but that is a much \nbigger... better...\n game I would call it, but this is just a simple \"learning python\" project I started a while ago and just recently got back into it so I said what the heck why not finish the game. but now I'm stuck as to what to do next, so I thought I'd ask for play testers to come and tell me how bad my coding and game was so I could try and make it more playable... because lord knows I made it so \nI\n know how to play it but what about other people.\n  \n\n    you can find the code on GitHub: \nhttps://github.com/littlebudddy321/New-Lands-RPG"},
{"Title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite", "Content": "What My Project Does:\n  \n\n    Moonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\n  \n\n\n\n\n\n    ecstatic: price too low so they are extra happy\n  \n\n\n\n\n\n    content: price is what they were expecting,\n  \n\n\n\n\n\n    sad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period\n  \n\n\n\n\n\n    angry: price is too high so they don't buy\n  \n\n\n\n\n\n    I built a simplified version where a sad reaction doesn't lower the prices customers will accept for that item using Python and SQLite.\n  \n\n    The Bayesian bandits algorithm is an algorithm to optimize rewards when choosing among different options. The probability of different rewards (e.g. revenue) is kept track of and updated as rewards for options are collected. When a new option is to be selected a competition occurs where the rewards are sampled from these probability distributions and the option with the highest reward is chosen.\n  \n\n    For this simulation, the reward distributions are the probability that a price is the ideal price for that item. This scenario is so simple that the probability of any particular ideal price is flat or the same for all prices between an upper and lower bound and zero outside. This makes item/price selection simply randomly selecting a price from the lower to upper bounds for every item and selecting the item with the highest price.\n  \n\n    Customer reaction moods update the item upper/lower price bounds in these ways:\n  \n\n\n\n\n\n    ecstatic or content: lower bound is set to price plus 1 gold\n  \n\n\n\n\n\n    sad: lower bound is set to price if upper and lower bounds don't match\n  \n\n\n\n\n\n    angry: upper bound set to price minus 1 gold if the upper and lower bounds don't match\n  \n\n\n\n\n\n    The SQLite database keeps track of items in your inventory, items on shelves, customer reactions, item price bounds, and Thompson competitions (i.e. prices randomly chosen between price bounds for each item).\n  \n\n    The algorithm ended up identifying groups of items with the same ideal prices and selling them off from highest to lowest.\n  \n\n    For the full write up and a lot of pretty graphs check out the article in the link below. I've also included the Github link for those that want to see the full implementation and/or a Jupyter notebook where I generate the plots.\n  \n\n    Full write-up: \nhttps://cmshymansky.com/MoonlighterBayesianBanditsPricing/?source=rPython\n\n\n\n    Github: \nhttps://github.com/JaggedParadigm/moonlighter_bayesian_bandit_pricing\n\n\n\n    Target Audience:\n  \n\n    This a toy, though the Thompson sampling code could be hacked into something useful.\n  \n\n    Comparison:\n  \n\n    To my knowledge, I am the first to apply the Bayesian bandits algorithm to a Moonlighter shop simulation. However, pricing via Bayesian bandits is a classic application and there are many blogs and scientific papers on the topic."},
{"Title": "Mesop, open-source Python UI framework used at Google to quickly build delightful web apps", "Content": "What my project does:\n I‚Äôm excited to share about \nMesop\n - a new, open-source Python UI framework that enables Python developers to quickly build delightful web apps in a scalable way.\n  \n\n    A small team of us at Google have been developing Mesop as an unofficial 20% project for the past few months. A wide range of research and product teams at Google have been using it to rapidly build internal apps and we‚Äôve gotten a lot of positive feedback internally so now we‚Äôre looking to get feedback from the open-source community.\n  \n\n\nTarget audience:\n Python developers looking to build AI demos & internal apps.\n  \n\n\nComparison:\n We think that Mesop provides a unique approach to building web UIs in Python compared to existing alternatives like Streamlit and Gradio - making it both easy to get started and also flexible enough to build customized UIs for a wide range of use cases. You can learn more about \nwhy we built Mesop here\n.\n  \n\n    To look at some example Mesop apps, check out our \ndemo gallery\n. Also, the demo gallery itself is \nbuilt with Mesop\n which demonstrates the type of flexibility you have in building apps with Mesop.\n  \n\n\nGitHub repo:\n \nhttps://github.com/google/mesop"},
{"Title": "Dask DataFrame is Fast Now!", "Content": "My colleagues and I have been working on making Dask fast. It‚Äôs been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload).\n  \n\n    I wrote a blog post on what we did: \nhttps://docs.coiled.io/blog/dask-dataframe-is-fast.html\n\n\n\n    Really, this came down not to doing one thing really well, but doing lots of small things ‚Äúpretty good‚Äù. Some of the most prominent changes include:\n  \n\n\n\n\n\n    Apache Arrow support in pandas\n  \n\n\n\n\n\n    Better shuffling algorithm for faster joins\n  \n\n\n\n\n\n    Automatic query optimization\n  \n\n\n\n\n\n    There are a bunch of other improvements too like copy-on-write for pandas 2.0 which ensures copies are only triggered when necessary, GIL fixes in pandas, better serialization, a new parquet reader, etc. We were able to get a 20x speedup on traditional DataFrame benchmarks.\n  \n\n    I‚Äôd love it if people tried things out or suggested improvements we might have overlooked.\n  \n\n    Blog post: \nhttps://docs.coiled.io/blog/dask-dataframe-is-fast.html"},
{"Title": "Automate your WordPress new-page creation with Python", "Content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin).\n  \n\n    It's a simple app, but has great expansion potential and it's really easy to use.\n  \n\n    To start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page.\n  \n\n    Run the program, add sections, choose your desired structure, and select the right widgets for your content.\n  \n\n    Once you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)\n  \n\n    You can download and see the project at: \nhttps://github.com/MauBorre/WordPress-new-page-auto\n\n\n\n    Hope you find it useful! üòÅ"},
{"Title": "Granian 1.4 is out", "Content": "Granian ‚Äì the Rust HTTP server for Python applications ‚Äì 1.4 was released!\n  \n\n    Blog post: \nhttps://polar.sh/emmett-framework/posts/granian-1-4\n\n\n\n    Release details: \nhttps://github.com/emmett-framework/granian/releases/tag/v1.4.0\n\n\n\n    Repo: \nhttps://github.com/emmett-framework/granian"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Content": "Daily Thread"},
{"Title": "My little ChatGPT-Multimodal Server Starter", "Content": "Please check out my¬†\nDesktoppy Server\n.\n  \n\n\nWhat My Project Does\n\n\n\n    It allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's.\n  \n\n    It uses ollama internally so you can use all the open-source Models but by default it's using:\n  \n\n\n\n\n\n    LLama3 for text-generation\n  \n\n\n\n\n\n    LLava for image recognition\n  \n\n\n\n\n\n    Stable Diffusion 2 for image generation\n  \n\n\n\n\n\n\nTarget Audience\n\n\n\n    Perfect for new-comers... I wish I had this when I started tackling AI dev.\n  \n\n    I think it can be a good base to create your awesome AI-powered products!\nPlease let me know what you think about it!\n  \n\n\nComparison\n¬†\n  \n\n    It differentiates from the other zillion starters by being very basic, allowing for full customization, and joining the 3 models together into 1 for a multi-modal feeling.\n  \n\n    Easiest possible setup, even for those who don't know the tools yet, all you need is Python3 installed on your PC. Basically a tutorial-starter-multimodal.\n  \n\n    Much love\n  \n\n    Link:¬†\nhttps://github.com/TwistedMinda/desktoppy-server\nThe very basic Web UI that goes along with it:¬†\nhttps://github.com/TwistedMinda/desktoppy-web"},
{"Title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation", "Content": "Hi everyone,\n  \n\n    I'd like to share couple of news regarding my personal project:\n  \n\n\n\n\n\n    New documentation written in Ludic showcasing it's capabilities: \nhttps://getludic.dev/docs/\n\n\n\n\n\n\n\n    New section regrading Layouts inspired from the Every Layout Book: \nhttps://getludic.dev/catalog/layouts\n\n\n\n\n\n\n\n    Cookiecutter template to get quickly started: \nhttps://github.com/paveldedik/ludic-template\n\n\n\n\n\n\n\n    I have a lot of plans with this project and I'd appreciate any feedback.\n  \n\n\nAbout The Project\n\n\n\n    Ludic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components.\n  \n\n\nTarget Audience\n\n\n\n\n\n\n\n    Web developers\n  \n\n\n\n\n\n    People who want to build HTML pages in Python with typing\n  \n\n\n\n\n\n    People without knowledge of JavaScript who want to build interactive UIs\n  \n\n\n\n\n\n    People who want to use HTMX in their projects\n  \n\n\n\n\n\n\nComparison With Similar Tools\n\n\n\n\n\n\n\n\n\n            Feature\n          \n\n            Ludic\n          \n\n            FastUI\n          \n\n            Reflex\n          \n\n\n\n\n\n\n\n\n\n\n\n\n\n              HTML rendering\n            \n\n              Server Side\n            \n\n              Client Side\n            \n\n              Client Side\n            \n\n\n\n\n\n              Uses Template Engine\n            \n\n              No\n            \n\n              No\n            \n\n              No\n            \n\n\n\n\n\n              UI interactivity\n            \n\n\n</> htmx\n\n\n\n\nReact\n\n\n\n\nReact\n\n\n\n\n\n\n\n              Backend framework\n            \n\n\nStarlette\n\n\n\n\nFastAPI\n\n\n\n\nFastAPI\n\n\n\n\n\n\n\n              Client-Server Communication\n            \n\n\nHTML + REST\n\n\n\n\nJSON + REST\n\n\n\n\nWebSockets\n\n\n\n\n\n\n\n\n\n    Any feedback is highly appreciated."},
{"Title": "Python's many command-line utilities", "Content": "Python 3.12 comes bundled with 50 command-line tools.\n  \n\n    For example, \npython -m webbrowser http://example.com\n opens a web browser, \npython -m sqlite3\n launches a sqlite prompt, and \npython -m ast my_file.py\n shows the abstract syntax tree for a given Python file.\n  \n\n    I've dug into each of them and categorized them based on their purpose and how useful they are.\n  \n\n\nPython's many command-line tools"},
{"Title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa", "Content": "What My Project Does\n\n\n\n    Hello everyone! I've just released a new Python package, notion2pandas, which allows you to import a¬†\nNotion database\n¬†into a¬†\npandas dataframe\n¬†with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code.\n  \n\n\nTarget Audience\n\n\n\n    Whether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding!\n  \n\n    üîó GitLab repo:¬†\nhttps://gitlab.com/Jaeger87/notion2pandas\n\n\n\n\nKey Features\n\n\n\n\n\n\n\n\nEasy to use\n. import in a single line of code, export with another single line of code\n  \n\n\n\n\n\n\nNo more boring parsing\n. You can import any Notion Database in a pandas framework\n  \n\n\n\n\n\n\nFlexibility\n. If you don't like the default parsing mode of a data provided by notion2pandas, you can use your own parse function for a specific kind of data.\n  \n\n\n\n\n\n\nMaintainability\n. If Notion broke something with an update, the possibility to provide a different parsing function allows you to use Notion2Pandas even if it's not updated with latest notion update.\n  \n\n\n\n\n\n\nQuick Start\n\n\n\n    In the ReadMe you can find everything you need to start.\n  \n\n\nComparison\n\n\n\n    When I started this project, I couldn't find anything capable of transforming a Notion database into a pandas DataFrame without specifying how to parse the data.\n  \n\n    If you got any kind of feedback I'm really curious to read it!"},
{"Title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it ü§û", "Content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts:\n  \n\n    tl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in \nthis Gist\n.\n  \nProblem\n\n    Request rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of \ncounter\n. Multiprocessing is not great at having a single shared variable.\n  \n\n    I have a use case for a multiprocessing system in which each process can make a number of requests to a REST API server. That server imposes a 1000 requests per minute limit. Hence I needed a way to implement a rate limiter that would work across processes and threads.\n  \n\n    I've spent the past 2 days digging through a ton of SO posts and articles suggesting how to do it, and I came at a few bad solutions. I finally came up with one that I think works quite well. It uses a \nmultiprocessing.Manager\n, and its \nValue\n, \nLock\n and \nCondition\n proxies.\n  \nSolution\n\n    I've created a \nCrossProcessThrottle\n class which stores that \ncounter\n. The way that the information about the \ncounter\n is shared with all the processes and threads is through a \nThrottleBarrier\n class instance. Its \nwait\n method will do the following:\n  \ndef wait(self):\n    with self._condition:\n        self._condition.wait()\n\n    with self._lock:\n        self._counter.value += 1\n\n\n\n\n\n    Wait for the shared \nCondition\n - this will stop all the processes and their threads and keep them dormant.\n  \n\n\n\n\n\n    If the \nCrossProcessThrottle\n calculates that we have available requests (ie. the \ncounter\n is below \nmax_requests\n, so we don't need to limit the requests), it uses \nCondition.notify(n)\n  (\ndocs\n) in order to let \nn\n amount of threads through and carry out the request.\n  \n\n\n\n\n\n    Once approved, each process/thread will bump the shared \nValue\n, indicating that a new request was made.\n  \n\n\n\n\n\n    That \nValue\n is then used by the \nCrossProcessThrottle\n to figure out how many requests have been made since the last check, and adjust its \ncounter\n. If \ncounter\n is equal or greater than \nmax_requests\n, the \nCondition\n will be used to stop all processes and threads, until enough time passes.\n  \n\n    The following is the example code using this system. You can find it in \nthis Gist\n if you prefer.\n  \nimport datetime\nfrom concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor\n\nfrom ratelimiter import ThrottleBarrier, CrossProcessesThrottle\n\n\ndef log(*args, **kwargs):\n    print(datetime.datetime.now().strftime('[%H:%M:%S]'), *args, **kwargs)\n\n\ndef task(i, j, throttle_barrier: ThrottleBarrier):\n    # This will block until there is a free slot to make a request\n    throttle_barrier.wait() \n    log(f'request: {i:2d}, {j:2d}  (process, thread)')\n    # make the request here...\n\n\ndef worker(i, throttle_barrier: ThrottleBarrier):\n    # example process worker, starting a bunch of threads\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        for j in range(5):\n            executor.submit(task, i, j, throttle_barrier)\n\n\nif __name__ == '__main__':\n    cross_process_throttle = CrossProcessesThrottle(max_requests=3, per_seconds=10)\n    throttle_barrier = cross_process_throttle.get_barrier()\n\n    log('start')\n    futures = []\n    # schedule 9 jobs, which should exceed our limit of 3 requests per 10 seconds\n    with ProcessPoolExecutor(max_workers=10) as executor:\n    \n        for i in range(3):\n            futures.append(executor.submit(worker, i, throttle_barrier))\n\n        while len(futures):\n            # calling this method carries out the rate limit calculation\n            cross_process_throttle.cycle()\n\n            for future in futures:\n                if future.done():\n                    futures.remove(future)\n\n    log('finish')\n\n    I've uploaded the source code for \nCrossProcessThrottle\n and \nThrottleBarrier\n as a \nGist too\n. Calculating the \ncounter\n is a bit more code, so I refrain from sharing it here, but in a nutshell:\n  \n\n\n\n\n\n    Store the last amount of requests made as \nlast_counter\n, initialised as 0\n  \n\n\n\n\n\n    Every time the \ncycle()\n is called, compare the difference between the current \ncounter\n and the \nlast_counter\n\n\n\n\n\n\n\n    The difference is how many requests have been made since the last check, hence we increment the \ncounter\n by that many.\n  \n\n\n\n\n\n    We calculate how many calls remaining are allowed: \nremaining_calls = max_requests - counter\n\n\n\n\n\n\n\n    And notify that many threads to go ahead and proceed: \ncondition.notify(remaining_calls)\n\n\n\n\n\n\n\n    The actual process is a little more involved, as at the step 3 we need to store not only the amount of calls made, but also the times they've been made at - so that we can be checking against these later and decrease the \ncounter\n. You can see it in detail in the \nGist\n.\n  \n\n    If you've read through the code - what are your thoughts? Am I missing something here? In my tests it works out pretty nicely, producing:\n  \n[14:57:26] start\n[14:57:26] Calls in the last 10 seconds: current=0 :: remaining=3 :: total=0 :: next slot in=0s\n[14:57:27] request:  0,  1  (process, thread)\n[14:57:27] request:  0,  0  (process, thread)\n[14:57:27] request:  0,  2  (process, thread)\n[14:57:31] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=3 :: next slot in=7s\n[14:57:36] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=3 :: next slot in=2s\n[14:57:38] request:  0,  4  (process, thread)\n[14:57:38] request:  0,  3  (process, thread)\n[14:57:38] request:  1,  0  (process, thread)\n[14:57:41] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=6 :: next slot in=7s\n[14:57:46] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=6 :: next slot in=2s\n[14:57:48] request:  2,  0  (process, thread)\n[14:57:48] request:  1,  1  (process, thread)\n[14:57:48] request:  1,  2  (process, thread)\n[14:57:51] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=9 :: next slot in=8s\n[14:57:56] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=9 :: next slot in=3s\n[14:57:59] request:  2,  4  (process, thread)\n[14:57:59] request:  2,  2  (process, thread)\n[14:57:59] request:  2,  1  (process, thread)\n[14:58:01] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=12 :: next slot in=8s\n[14:58:06] Calls in the last 10 seconds: current=3 :: remaining=0 :: total=12 :: next slot in=3s\n[14:58:09] request:  1,  3  (process, thread)\n[14:58:09] request:  1,  4  (process, thread)\n[14:58:09] request:  2,  3  (process, thread)\n[14:58:10] finish\n\n    I've also tested it with 1000s scheduled jobs to 60 processes, each spawning several threads, each of which simulates a request. The requests are limited as expected, up to N per T seconds.\n  \n\n    I really like that I can construct a single \nThrottleBarrier\n instance that can be passed to all processes and simply call the \nwait\n method to get permission for a request. It feels like an elegant solution.\n  \nResearch\n\n    There are a bunch of libraries for rate limiting, some claiming to support multiprocess, however I couldn't get them to do so:\n  \n\n\n\n\n\n\nhttps://pypi.org/project/ratelimit/\n\n\n\n\n\n\n\n\nhttps://pypi.org/project/ratelimiter/\n\n\n\n\n\n\n\n\nhttps://pypi.org/project/ratemate/\n\n\n\n\n\n\n\n\nhttps://github.com/JWCook/requests-ratelimiter\n\n\n\n\n\n\n\n    There's a few SO threads and posts discussing the process too, however they either don't consider multiprocessing, or when they do they don't allow using \nProcessPoolExecutor\n:\n  \n\n\n\n\n\n\nhttps://stackoverflow.com/questions/69306420/rate-limit-api-multi-process\n\n\n\n\n\n\n\n\nhttps://stackoverflow.com/questions/40748687/python-api-rate-limiting-how-to-limit-api-calls-globally\n\n\n\n\n\n\n\n\nhttps://gist.github.com/justinvanwinkle/d9f04950083c4554835c1a35f9d22dad\n\n\n\n\n\n\n\n\nhttps://stackoverflow.com/questions/6920858/interprocess-communication-in-python\n\n\n\n\n\n\n\n    The issue with \nProcessPoolExecutor\n comes up when you try to use shared resources as it raises an error along the lines of:\n  \nSynchronized objects should only be shared between processes through inheritance\n\n    And to be fair the Googling didn't really help me figuring out how to get around it, just finding more people struggling with the issue:\n  \n\n\n\n\n\n\nhttps://stackoverflow.com/questions/69907453/lock-objects-should-only-be-shared-between-processes-through-inheritance\n\n\n\n\n\n\n\n\nhttps://github.com/python/cpython/issues/79967#issuecomment-1455216546\n\n\n\n\n\n\n\n    The solution would be to not use the \nProcessPoolExecutor\n but that was a bummer. This comment helped me to find the way I've ended up using:\n  \n\n\n\n\n\n\nhttps://stackoverflow.com/a/65377770/3508719\n\n\n\n\n\n\n\n    I'm glad that using the \nSyncManager\n and its proxies I managed to come up with a solution that allows me to use the executor.\n  \nNote\n\n\n\n\n\n    I use multiprocessing instead of multithreading as there is some post-processing done to the data returned from the REST API.\n  \n\n\n\n\n\n    I imagine that for better efficiency I could split the system into a single process that does a lot of multithreading for REST API interaction, and then pass the returned data to several processes for post-processing. I didn't have time to do it at the moment, but I'm aware of this as a potential alternative.\n  \n\n\n\n\n\n    I've built an earlier version of the rate limiter using \nmultiprocessing Listener and Client\n - and carried out the communication through sockets/pipes. While this is useful to know about for inter-process communication, it turned out to be too slow and not support 100s of concurrent requests.\n  \n\n\n\n\n\n    If one of the existing libraries (eg. one of the ones I've listed) supports cross-process rate limiting with \nProcessPoolExecutor\n, I'd love to see how to do it, please share an example!\n  \n\n\n\n\n\n    Multiprocessing can be a pain üò≠\n  \n\n\n\n\n\n    Any feedback on my implementation welcome!"},
{"Title": "Using python for static typing benefits", "Content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced.\n  \n\n    I'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things.\n  \n\n    Thanks!"},
{"Title": "PyODMongo an ODM for MongoDB", "Content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\n  \n\n\n\n\n\n    Built on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents.\n  \n\n\n\n\n\n    Target Audience: Backend developers who want a simple and efficient way to work with MongoDB\n  \n\n\n\n\n\n    Comparison: ODMantic ODM\n  \n\n\n\n\n\n\nGitHub repository\n \nPyPi"},
{"Title": "Tutorial on Surprisingly Simple Python Streamlit Dashboards", "Content": "Streamlit¬†is becoming an increasingly a popular framework for data visualization prototyping with Python. The¬†Streamlit¬†framework saves time, effort, and reduces the complexity traditionally associated with crafting maps and charts.Particularly if we approach application development with a modular approach.\n  \n\n    Starting simple, let‚Äôs put together 4 specific examples that leverage¬†Streamlit¬†for interactive data visualization:\n  \n\n\n\n\n\n    A global choropleth map for a dataset for a specific year.\n  \n\n\n\n\n\n    An animated global choropleth map for a dataset across a number of years\n  \n\n\n\n\n\n    An animated choropleth map for a specific region\n  \n\n\n\n\n\n    A line chart to provide an alternative representation of the data\n  \n\n\n\n\n\n    Link to tutorial \nHERE"},
{"Title": "Self updating spreadsheet with popular questions from Ask Reddit and summarized answers using OpenAI", "Content": "What My Project Does\nThis is a small Python script that runs inside a Google Sheet by way of¬†\nthe Python add-on\n. It uses the¬†\nreddit api\n¬†to fetch posts from¬†\nAsk Reddit\n¬†twice daily. For posts with enough upvotes, it uses the¬†\nOpenAI API\n¬†to summarize an answer to the question based on the comments. I then inserts any new questions and their answers into the spreadsheet and uses the¬†\nTwitter API\nto also post the answer to Twitter I mean X. Should be interesting to anybody looking to connect (a subset) of those APIs.\n  \n\n\nTarget Audience\nAnybody who is looking to mash-up different APIs (Python is great at this and I feel like it is getting a little harder to do this every year).\n  \n\n\nComparison\nI'm not aware of any Python code that does this. Even finding a good example of the V2 twitter API is harder than it seems. To accomplish some of this, you could try to ask ChatGPT directly to summarize the answers for a url but when I tried it said it couldn't access Reddit.\n  \n\n\nResource\n\n\n\n\n\n\n\n    The¬†\nspreadsheet where this happens\n\n\n\n\n\n\n\n    The¬†\ntwitter bot\n¬†in action\n  \n\n\n\n\n\n    The¬†\nsource code\n¬†(or make a copy of the spreadsheet to see)"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Content": "Daily Thread"},
{"Title": "1BRC solution using CPython", "Content": "What My Project Does:\n\n\n\n    I finally got some time to attempt the 1 Billion Row Challenge (1BRC) (\nhttps://www.morling.dev/blog/one-billion-row-challenge/\n) where we are supposed to process a file with 1 billion records of temperature values for cities and print a sorted list with min, max and mean temperature per city.\n  \n\n    I am a sucker for optimization. So when I heard about 1BRC I got intrigued and in the last few days started experimenting with python implementations. I achieved my goal and implemented the fastest implementation running on CPython, without any external libraries. My motivation for CPython was so that I can apply any of the learning's in my day to day work, as I don't see us moving to PyPy any time sooner.\n  \n\n    You can check out the performance numbers and implementation at : \nhttps://github.com/pappuks/1brc\n\n\n\n    Few learning's:\n  \n\n\n\n\n\n    Python Multiprocessing is very powerful in enabling multi core processing and overcoming GIL bottleneck for multi-threading. Using `Pool.starmap` is the easiest way to spawn child processes and collect response.\n  \n\n\n\n\n\n    AI code generation can help you jump start your implementation, but it will most likely be sub-optimal and you need to spend time in optimizing the code by understanding the core logic.\n  \n\n\n\n\n\n    PyPy gives good boost over CPython but compatibility of PyPy with external libraries is a limiting factor.\n  \n\n\n\n\n\n    Mypyc compilation was not any faster than default CPython implementation. Always measure after making the change.\n  \n\n\n\n\n\n    Optimizing for PyPy does not make the implementation any faster in CPython, but optimizing for CPython does make the implementation faster in PyPy.\n  \n\n\n\n\n\n\nTarget Audience:\n\n\n\n    This is a hobby project, but most of the findings and learning can be applied to production projects as well. And given that all optimizations are done on CPython its applicability to production is easy.\n  \n\n\nComparison:\n\n\n\n    This is the fastest CPython implementation for solving the 1BRC problem. The detailed comparison is provided in the above github repository.\n  \n\n\n\n\n\n\n\n            Interpreter\n          \n\n            File\n          \n\n            Time (sec)\n          \n\n\n\n\n\n\n\n\n\n\n\n\n\n              Python3\n            \n\n              py_1brc_final.py\n            \n\n              24.882\n            \n\n\n\n\n\n              Python3\n            \n\n              py_1brc_mypyc.py (process_chunk.py precompiled using mypyc)\n            \n\n              24.441\n            \n\n\n\n\n\n              Python3\n            \n\n\ncalculateAverage.py\n (from \nhttps://github.com/ifnesi/1brc\n)\n            \n\n              36.303\n            \n\n\n\n\n\n              Python3\n            \n\n\ncalculateAveragePyPy.py\n (from \nhttps://github.com/ifnesi/1brc\n)\n            \n\n              60.60\n            \n\n\n\n\n\n              Python3\n            \n\n              doug_booty4.py (from \nhttps://github.com/dougmercer-yt/1brc\n)\n            \n\n              62.91"},
{"Title": "Community Insights on PgQueuer", "Content": "Hey \nr/Python\n!\n  \n\n\nA while ago\n, I introduced you to \nPgQueuer\n, a Python library designed for handling job queues using Postgres native functionalities. If you've started using PgQueuer, I‚Äôm keen to initiate a discussion on your experiences with it.\n  \n\n\n\n\n\n    How and where have you integrated PgQueuer into your projects?\n  \n\n\n\n\n\n    Any difficulties or shortcomings you‚Äôve experienced while using PgQueuer?\n  \n\n\n\n\n\n    Thoughts on the library‚Äôs efficiency and features?"},
{"Title": "Keep system awake (prevent sleep) using python: wakepy", "Content": "Hi all,\n  \n\n    I had previously a problem that I wanted to run some long running python scripts without being interrupted by the automatic suspend. I did not find a package that would solve the problem, so I decided to create my own. In the design, I have selected non-disruptive methods which do not rely on mouse movement or pressing a button like F15 or alter system settings. Instead, I've chosen methods that use the APIs and executables meant specifically for the purpose.\n  \n\n    I've just released wakepy 0.9.0 which supports Windows, macOS, Gnome, KDE and freedesktop.org compliant DEs.\n  \n\n    GitHub: \nhttps://github.com/fohrloop/wakepy\n\n\n\n    Comparison to other alternatives: typical other solutions rely on moving the mouse using some library or pressing F15. These might cause problems as your mouse will not be as accurate if it moves randomly, and pressing F15 or other key might have side effects on some systems. Other solutions might also prevent screen lock (e.g. wiggling mouse or pressing a button), but wakepy has a mode for just preventing the automatic sleep, which is better for security and advisable if the display is not required.\n  \n\n    Hope you like it, and I would be happy to hear your thoughts and answer to any questions!"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Content": "Daily Thread"},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Content": "Problem Statement\n\n\n\n    I recently explored SonarQube for static code analysis. While it‚Äôs a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself.\n  \n\n\nTarget Audience\n\n\n\n    This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback!\n  \n\n\nComparison with Similar Tools\n\n\n\n    There was only one similar tool in the Sonar Marketplace, but it‚Äôs no longer maintained.\n  \n\n\nProject Details\n\n\n\n    I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub.\n  \n\n\nLinks:\n\n\n\n\n\n\n\n\nPyPi:\n \nRedCoffee\n\n\n\n\n\n\n\n\nGitHub:\n \nRedCoffee Repository\n\n\n\n\n\n\n\n    Feel free to check it out and let me know your thoughts!"},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Content": "Hello everyone!\n  \nWhat My Project Does\n\n    I'm excited to share \nReqFlow\n - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!\n  \nTarget Audience\n\n    It would be suitable for beginners due to its reduced entry barrier and also supports advanced use cases with a RestAssured-like approach.\n  \nComparison\n\n    While standard approaches for API testing with Python (e.g., \nrequests\n) definitely makes sense, ReqFlow provides a more fluent and expressive syntax, making it easier to write and understand tests.\n  \n\n    Check it out on \nGitHub\n and the \ndocs at reqflow.org\n.\n  \n\n    All feedback and contributions are welcome! üôÇ"},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities.\n  \n\n\nWhat My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI.\n  \n\n\nGitHub Repository:\n \nNiimPrintX\n\n\n\n\nTarget Audience:\nThis project is aimed at hobbyists who use NiimBot label printers. It's a proof of concept project for me to learn GUI app development in Python.\n  \n\n\nComparison:\nCurrently, there is no desktop app support for NiimBot thermal label printers. Only the official Android/iOS app is available, and it has limited functionality without a paid subscription. NiimPrintX aims to fill this gap by providing a free, more versatile desktop solution.\n  \n\n\nSupported Printer Models:\n\n\n\n\n\n\n\n    D11/B21/B1\n  \n\n\n\n\n\n    D110\n  \n\n\n\n\n\n    B18\n  \n\n\n\n\n\n\nCool Features:\n\n\n\n\n\n\n\n\nBluetooth Auto Discovery:\n Automatically finds your printer using its model name.\n  \n\n\n\n\n\n\nEasy Label Design:\n Create labels with a simple and intuitive GUI.\n  \n\n\n\n\n\n\nPredefined Icons:\n Spice up your labels with built-in icons.\n  \n\n\n\n\n\n\nCross-Platform:\n Works on Mac, Windows, and Linux.\n  \n\n\n\n\n\n\nAdvanced Print Options:\n Includes calibration features for perfect prints.\n  \n\n\n\n\n\n\nComing Soon:\n\n\n\n\n\n\n\n\nBarcode Creation:\n Make your own barcodes right in the app.\n  \n\n\n\n\n\n\nQR Code Printing:\n Generate and print QR codes.\n  \n\n\n\n\n\n\nBetter Object Alignment:\n More shapes and borders for your designs.\n  \n\n\n\n\n\n    I'm constantly working on adding new features, so keep an eye out for updates!\n  \n\n    Check out the GitHub repo for more info and installation instructions: \nNiimPrintX\n\n\n\n    I'd love to hear what you think! Drop a comment or open an issue on GitHub with any feedback or suggestions."},
{"Title": "zeroize: Securely clear secrets from memory", "Content": "https://github.com/radumarias/zeroize-python\n\n\n\n\n\n\n\n\nWhat My Project Does:\n Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\n  \n\n\n\n\n\n\nTarget Audience\n¬†it can be used in production, it's just a simple wrapper over zeroize crate from Rust\n  \n\n\n\n\n\n\nComparison\n¬†Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Content": "https://github.com/radumarias/rencrypt-python\n\n\n\n\n\n\n\n\nWhat My Project Does:\n¬†A Python encryption library implemented in Rust. It supports¬†\nAEAD\n¬†with¬†\nAES-GCM\n¬†and¬†\nChaCha20Poly1305\n. It uses¬†\nring\n¬†to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\n  \n\n\n\n\n\n\nTarget Audience\n¬†This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet.\n  \n\n\n\n\n\n\nComparison\n¬†If offers slightly higher speed compared to other Python libs, especially for small chunks of data. I compared it to \nPyFLocker\n,¬† \ncryptography\n,\n¬†\nNaCl\n¬†\n(\nl\nibsodium\n)\n,¬†\nPyCryptodome\n. The API also tries to be easy to use but it's more optimized for speed than usability."},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Content": "What My Project Does\n\n\n\n    Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models.\n  \n\n\nVideo running Phi-2 model on a MacBook Air with 8GB RAM, all CPU\n\n\n\n\nTarget Audience\n\n\n\n    Devs looking to experiment with integrating on-device AI into their software.\n  \n\n\nComparison\n\n\n\n\n\n\n\n\nJARVIS\n - an all API-based solution using DeepGram, OpenAI and ElevenLabs\n  \n\n\n\n\n\n\nLocal Talking LLM\n - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word.\n  \n\n\n\n\n\n    Source code:¬†\nhttps://github.com/Picovoice/pico-cookbook/tree/main/recipes/llm-voice-assistant/python"},
{"Title": "Calculator without eval()", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python.\n  \n\n    TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions.\n  \n\n    COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators!\n  \n\n    See the below link for github: \nhttps://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Content": "REncrypt\n\n\n\n\n\n\n\n\nWhat My Project Does\n A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try.\n  \n\n\n\n\n\n\nTarget Audience\n This is just a toy project as a learning experience\n  \n\n\n\n\n\n\nComparison\n This is slightly faster than PyFLocker which from my benchmarks is the faster among other Python libs like cryptography, NaCl (libsodium), PyCryptodome"},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Content": "What My Project Does\n\n\n\n    An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs.\n  \n\n\nTarget Audience\n\n\n\n    RAG applications developers.\n  \n\n\nComparison\n\n\n\n\n\n\n\n    It offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies.\n  \n\n\n\n\n\n    Enables human intervention in chunking, making the data cleansing process no longer a black box.\n  \n\n\n\n\n\n    It not only presents answers but also offers quick views of references and links to the citations when answering to queries.\n  \n\n\n\n\n\n\nLink:\n \nhttps://github.com/infiniflow/ragflow"},
{"Title": "Circler imports in Observer design pattern in Python", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve.\n  \n\n    At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each  had to know about the other, I got a circler import error.\n  \n\n    I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this.\n  \n\n    The base classes are:\n  \nclass Subject(ABC):\n    \n    @abstractmethod\n    def attach(self, observer: Observer) -> None:\n        # The Observer is in the method parameters, so we need to import it\n        pass\n    \nclass Observer(ABC):\n    \n    @abstractmethod\n    def update(self, subject: Subject) -> None:\n        # The Subjectis in the method parameters, so we need to import it\n        pass"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Content": "Daily Thread"},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Content": "[\nhttps://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python)\n\n\n\n    * **What My Project Does**\n  \n\n    A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability.\n  \n\n    So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try.\n  \n\n    * **Target Audience**\n  \n\n    This is just a toy project as a learning experience\n  \n\n    * **Comparison**\n  \n\n    This is slightly faster than PyFLocker which from my benchmarks is the faster among other Python libs like cryptography, NaCl (libsodium), PyCryptodome"},
{"Title": "AndroidWorld ‚Äî Build and test AI agents on Android", "Content": "What it does:\n\n\n\n    It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging.\n  \n\n    It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them.\n  \n\n\nTarget Audience:\n\n\n\n    Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you‚Äôd like and test out the default agent, M3A, on it. Just give it a task like ‚ÄúShow my most recent purchases on Amazon.‚Äù You can also build your own agent.\n  \n\n\nComparison\n\n\n\n\n\n\n\n    For desktop OSes, there is \nOSWorld\n, although it requires costly commercial software (VMWare) to run. AndroidWorld only requires free Android emulator.\n  \n\n\n\n\n\n    While this is OSS and for research, the closest commercial product would be the \nRabbit R1\n. They should test their agent on AndroidWorld to improve accuracy before shipping again :P\n  \n\n\n\n\n\n    Link to repo: \nhttps://github.com/google-research/android_world"},
{"Title": "Rio: WebApps in pure Python ‚Äì Thanks and Feedback wanted!", "Content": "Hey everyone,\n  \n\n    I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for!\n  \n\n    As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned!\n  \n\n    We are looking forward to your feedback, so let us hear from you! :)\n  \n\n\nGitHub"},
{"Title": "2024 StackOverflow Survey", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish.\n  \n\n    Link to the survey: \nhttps://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "cachebox: The fastest caching library written in Rust", "Content": "What my library does\n\n\n\n    You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs.\n  \n\n    One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary.\n  \n\n    Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code.\n  \n\n\nTarget Audience\n\n\n\n    For anyone who needs caching and values speed\n  \n\n\nComparison\n\n\n\n    When compared to other caching libraries:\n  \n\n\n\n\n\n    It's very faster than others (about 5-20x)\n  \n\n\n\n\n\n    It's very simple and easy to use\n  \n\n\n\n\n\n    It's completely thread-safe (uses RwLock)\n  \n\n\n\n\n\n    It uses lower memory than others\n  \n\n\n\n\n\n    You can see benchmark here: \nhttps://github.com/awolverp/cachebox-benchmark\n\n\n\n\nMore Info\n\n\n\n    My project github: \nhttps://github.com/awolverp/cachebox"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Content": "Daily Thread"},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Content": "Hey all, we will close the Call for Proposals portal this¬†\nSunday, June 2\n, for our¬†\nPyData Amsterdam 2024 Conference\n¬†which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > \nhttps://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Content": "What My Project Does\n\n\n\n    Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps.\n  \n\n    Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead.\n  \n\n\nTarget Audience\n\n\n\n    Enterprises: Benefits from the open core concept. No vendor lock-ins. Rapid development with out-of-the-box enterprise readiness.\n  \n\n    Startups: Get productive from day-1. Leverage packages to reach MVP really fast and not be constrained by limit on customizability (as with low-code/no-code solutions). Lowest cost of hosting if you have multiple apps or building microservices.\n  \n\n    Consulting/ Development companies: Increase development efficiency and optimize on hosting cost.\n  \n\n    You: If you are looking to develop any bespoke app, give it a try :)\n  \n\n\nComparison\n\n\n\n\n\n\n\n    Web dev frameworks(e.g. Django): Not opinionated for enterprise readiness/ business apps. Zango enables faster development, lower opex and and built-in compliance and enterprise readiness\n  \n\n\n\n\n\n    Proprietary platforms (e.g. Salesforce): No vendor lock-in. Faster development\n  \n\n\n\n\n\n    Low-Code / No-Code: Limited customizability.\n  \n\n\n\n\n\n\nMore Info\n\n\n\n    Know more at the project's Github repo: ¬†\nhttps://github.com/Healthlane-Technologies/Zango"},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Content": "What the Project Does\n\n\n\n    The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected): \nhttps://github.com/Zahlii/pyDSLR/blob/main/examples/lightning_trigger.py\n\n\n\n\n\n\n\n    Lightning trigger (showcased)\n  \n\n\n\n\n\n    Bulb capture (showcased)\n  \n\n\n\n\n\n    High Speed capture (e.g. using computer vision to detect animals and use the camera as part of a wildlife trap, partly showcased)\n  \n\n\n\n\n\n    Photo booths\n  \n\n\n\n\n\n    Timelapses (also for cameras that don't naturally support them)\n  \n\n\n\n\n\n    Focus bracketing (also for cameras that don't natively support them)\n  \n\n\n\n\n\n    Astro stacking (Taking hundreds of long exposures with fixed settings after another)\n  \n\n\n\n\n\n    With a computer-controllable astro mount we could also track the camera based on preview images\n  \n\n\n\n\n\n\nTarget Audience\n\n\n\n    For now, mainly Python hobby photographers, but in the future hopefully also less tech savy hobbysts.\n  \n\n    Right now it is obviously still a work in progress (with only types available for my Canon R6II), and I am inviting people to reach out to me if they are interested in participating or have cameras to add to our types :)\n  \n\n\nComparison with Other Libraries\n\n\n\n    When compared to other library around it:\n  \n\n\n\n\n\n    We wrap python-gphoto2's low level API\n  \n\n\n\n\n\n    gphoto2-cffi is an alternative, but not maintained in 7 years, lacks typing support and doesn't provide much benefits over existing low-level APIs"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Content": "Daily Thread"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\n\n    With the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more.\n  \n\n    The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe.\n  \n\n    11,019 subscribers - the largest Python on hardware newsletter out there.\n  \n\n    Catch all the weekly news on Python for Microcontrollers with¬†\nadafruitdaily.com\n.\n  \n\n    This ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!\n  \n\n    Ensure you catch the weekly Python on Hardware roundup ‚Äì you can cancel anytime . Try our spam-free newsletter today!\n  \n\n\nhttps://www.adafruitdaily.com/"},
{"Title": "From poetry to docker - easy way", "Content": "Poetry plugin to generate Dockerfile and images automatically\n  \n\n    This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup\n  \n\n    It is meant for production images.\n  \n\n\nhttps://github.com/nicoloboschi/poetry-dockerize-plugin\n\n\n\n\nhttps://pypi.org/project/poetry-dockerize-plugin/\n\n\n\n    Get started with\n  \npoetry self add poetry-dockerize-plugin@latest\n\n    This command generates a production-ready, optimized python image:\n  \npoetry dockerize\n\n    or to generate a Dockerfile\n  \npoetry dockerize --generate"},
{"Title": "A \"new\" Object & Vector Database for Python", "Content": "ObjectBox\n (\nGitHub\n) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Content": "Daily Thread"},
{"Title": "musicnotes: Python module for playing musical instruments!", "Content": "https://github.com/must108/musicnotes\n\n\nWhat My Project Does\n\n\nmusicnotes\n is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers.\n  \nTarget Audience\n\n    Developers looking to add sounds to small games, or just have fun while learning Python in general. This library could also be used to teach Python and coding in a fun way.\n  \n\n    This project was also made to allow new Python developers to easily contribute to open-source! Feel free to star the repository, and download with \npip install musicnotes\n! You can also create a pull request with any changes you find useful, and visit the GitHub repository if you find any setbacks while using this module. There are a few things that can be worked on listed in the README of the repository if you're looking for a place to get started.\n  \nComparison\n\n    This project is very simple and easy to use, and is easy to contribute to as well, which is one of the primary goals of the project."},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Content": "I saw the words 'visual effects', just give me GIFs\n\n\n\n    Understandable, visit the \nEffects Showroom\n first. Then come back if you like what you see.\n  \n\n\nWhat My Project Does\n\n\n\n    TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features.\n  \n\n    Use cases:\n  \n\n\n\n\n\n    Invoke at terminal launch to produce an animation (ex: fetch).\n  \n\n\n\n\n\n    Alias system commands to animate output.\n  \n\n\n\n\n\n    Invoke on SSH session to blow people's minds when they log in.\n  \n\n\n\n\n\n    Use in your project to produce animated prompts, logos, etc.\n  \n\n\n\n\n\n\nTarget Audience\n\n\n\n    TTE is a terminal toy (and now a Python library) that anybody can use to add visual flair to their terminal or projects. It works best in Linux but is functional in the new Windows Terminal.\n  \n\n    Every effect allows for significant customization including color gradient stops and directions as well as many effect-specific options. Customization is exposed via command-line arguments and through the Config class interface. The effect examples shown in the documentation represent a single configuration. Your experience can be very different with a little tweaking to match your system theme and preferences.\n  \n\n\nComparison\n\n\n\n    I don't know of any other projects like TTE. It's a completely useless and over-engineered side-project that's turned into a whole thing. Have fun.\n  \n\n\nMore Info\n\n\n\n    The \nGitHub\n README has some effect examples, installation instructions and some basic quick-start info."},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities.\n  \n\n\nWhat My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI.\n  \n\n\nGitHub Repository:\n \nNiimPrintX\n\n\n\n\nTarget Audience:\nThis project is aimed at hobbyists who use NiimBot label printers. It's a proof of concept project for me to learn GUI app development in Python.\n  \n\n\nComparison:\nCurrently, there is no desktop app support for NiimBot thermal label printers. Only the official Android/iOS app is available, and it has limited functionality without a paid subscription. NiimPrintX aims to fill this gap by providing a free, more versatile desktop solution.\n  \n\n\nSupported Printer Models:\n\n\n\n\n\n\n\n    D11/B21/B1\n  \n\n\n\n\n\n    D110\n  \n\n\n\n\n\n    B18\n  \n\n\n\n\n\n\nCool Features:\n\n\n\n\n\n\n\n\nBluetooth Auto Discovery:\n Automatically finds your printer using its model name.\n  \n\n\n\n\n\n\nEasy Label Design:\n Create labels with a simple and intuitive GUI.\n  \n\n\n\n\n\n\nPredefined Icons:\n Spice up your labels with built-in icons.\n  \n\n\n\n\n\n\nCross-Platform:\n Works on Mac, Windows, and Linux.\n  \n\n\n\n\n\n\nAdvanced Print Options:\n Includes calibration features for perfect prints.\n  \n\n\n\n\n\n\nComing Soon:\n\n\n\n\n\n\n\n\nBarcode Creation:\n Make your own barcodes right in the app.\n  \n\n\n\n\n\n\nQR Code Printing:\n Generate and print QR codes.\n  \n\n\n\n\n\n\nBetter Object Alignment:\n More shapes and borders for your designs.\n  \n\n\n\n\n\n    I'm constantly working on adding new features, so keep an eye out for updates!\n  \n\n    Check out the GitHub repo for more info and installation instructions: \nNiimPrintX\n\n\n\n    I'd love to hear what you think! Drop a comment or open an issue on GitHub with any feedback or suggestions."},
{"Title": "zeroize: Securely clear secrets from memory", "Content": "https://github.com/radumarias/zeroize-python\n\n\n\n\n\n\n\n\nWhat My Project Does:\n Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\n  \n\n\n\n\n\n\nTarget Audience\n¬†it can be used in production, it's just a simple wrapper over zeroize crate from Rust\n  \n\n\n\n\n\n\nComparison\n¬†Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Content": "https://github.com/radumarias/rencrypt-python\n\n\n\n\n\n\n\n\nWhat My Project Does:\n¬†A Python encryption library implemented in Rust. It supports¬†\nAEAD\n¬†with¬†\nAES-GCM\n¬†and¬†\nChaCha20Poly1305\n. It uses¬†\nring\n¬†to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\n  \n\n\n\n\n\n\nTarget Audience\n¬†This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet.\n  \n\n\n\n\n\n\nComparison\n¬†If offers slightly higher speed compared to other Python libs, especially for small chunks of data. I compared it to \nPyFLocker\n,¬† \ncryptography\n,\n¬†\nNaCl\n¬†\n(\nl\nibsodium\n)\n,¬†\nPyCryptodome\n. The API also tries to be easy to use but it's more optimized for speed than usability."},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Content": "What My Project Does\n\n\n\n    Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models.\n  \n\n\nVideo running Phi-2 model on a MacBook Air with 8GB RAM, all CPU\n\n\n\n\nTarget Audience\n\n\n\n    Devs looking to experiment with integrating on-device AI into their software.\n  \n\n\nComparison\n\n\n\n\n\n\n\n\nJARVIS\n - an all API-based solution using DeepGram, OpenAI and ElevenLabs\n  \n\n\n\n\n\n\nLocal Talking LLM\n - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word.\n  \n\n\n\n\n\n    Source code:¬†\nhttps://github.com/Picovoice/pico-cookbook/tree/main/recipes/llm-voice-assistant/python"},
{"Title": "Calculator without eval()", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python.\n  \n\n    TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions.\n  \n\n    COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators!\n  \n\n    See the below link for github: \nhttps://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Content": "REncrypt\n\n\n\n\n\n\n\n\nWhat My Project Does\n A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try.\n  \n\n\n\n\n\n\nTarget Audience\n This is just a toy project as a learning experience\n  \n\n\n\n\n\n\nComparison\n This is slightly faster than PyFLocker which from my benchmarks is the faster among other Python libs like cryptography, NaCl (libsodium), PyCryptodome"},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Content": "What My Project Does\n\n\n\n    An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs.\n  \n\n\nTarget Audience\n\n\n\n    RAG applications developers.\n  \n\n\nComparison\n\n\n\n\n\n\n\n    It offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies.\n  \n\n\n\n\n\n    Enables human intervention in chunking, making the data cleansing process no longer a black box.\n  \n\n\n\n\n\n    It not only presents answers but also offers quick views of references and links to the citations when answering to queries.\n  \n\n\n\n\n\n\nLink:\n \nhttps://github.com/infiniflow/ragflow"},
{"Title": "Circler imports in Observer design pattern in Python", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve.\n  \n\n    At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each  had to know about the other, I got a circler import error.\n  \n\n    I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this.\n  \n\n    The base classes are:\n  \nclass Subject(ABC):\n    \n    @abstractmethod\n    def attach(self, observer: Observer) -> None:\n        # The Observer is in the method parameters, so we need to import it\n        pass\n    \nclass Observer(ABC):\n    \n    @abstractmethod\n    def update(self, subject: Subject) -> None:\n        # The Subjectis in the method parameters, so we need to import it\n        pass"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Content": "Daily Thread"},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Content": "[\nhttps://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python)\n\n\n\n    * **What My Project Does**\n  \n\n    A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability.\n  \n\n    So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try.\n  \n\n    * **Target Audience**\n  \n\n    This is just a toy project as a learning experience\n  \n\n    * **Comparison**\n  \n\n    This is slightly faster than PyFLocker which from my benchmarks is the faster among other Python libs like cryptography, NaCl (libsodium), PyCryptodome"},
{"Title": "AndroidWorld ‚Äî Build and test AI agents on Android", "Content": "What it does:\n\n\n\n    It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging.\n  \n\n    It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them.\n  \n\n\nTarget Audience:\n\n\n\n    Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you‚Äôd like and test out the default agent, M3A, on it. Just give it a task like ‚ÄúShow my most recent purchases on Amazon.‚Äù You can also build your own agent.\n  \n\n\nComparison\n\n\n\n\n\n\n\n    For desktop OSes, there is \nOSWorld\n, although it requires costly commercial software (VMWare) to run. AndroidWorld only requires free Android emulator.\n  \n\n\n\n\n\n    While this is OSS and for research, the closest commercial product would be the \nRabbit R1\n. They should test their agent on AndroidWorld to improve accuracy before shipping again :P\n  \n\n\n\n\n\n    Link to repo: \nhttps://github.com/google-research/android_world"},
{"Title": "Rio: WebApps in pure Python ‚Äì Thanks and Feedback wanted!", "Content": "Hey everyone,\n  \n\n    I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for!\n  \n\n    As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned!\n  \n\n    We are looking forward to your feedback, so let us hear from you! :)\n  \n\n\nGitHub"},
{"Title": "2024 StackOverflow Survey", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish.\n  \n\n    Link to the survey: \nhttps://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "cachebox: The fastest caching library written in Rust", "Content": "What my library does\n\n\n\n    You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs.\n  \n\n    One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary.\n  \n\n    Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code.\n  \n\n\nTarget Audience\n\n\n\n    For anyone who needs caching and values speed\n  \n\n\nComparison\n\n\n\n    When compared to other caching libraries:\n  \n\n\n\n\n\n    It's very faster than others (about 5-20x)\n  \n\n\n\n\n\n    It's very simple and easy to use\n  \n\n\n\n\n\n    It's completely thread-safe (uses RwLock)\n  \n\n\n\n\n\n    It uses lower memory than others\n  \n\n\n\n\n\n    You can see benchmark here: \nhttps://github.com/awolverp/cachebox-benchmark\n\n\n\n\nMore Info\n\n\n\n    My project github: \nhttps://github.com/awolverp/cachebox"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Content": "Daily Thread"},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Content": "Hey all, we will close the Call for Proposals portal this¬†\nSunday, June 2\n, for our¬†\nPyData Amsterdam 2024 Conference\n¬†which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > \nhttps://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Content": "What My Project Does\n\n\n\n    Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps.\n  \n\n    Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead.\n  \n\n\nTarget Audience\n\n\n\n    Enterprises: Benefits from the open core concept. No vendor lock-ins. Rapid development with out-of-the-box enterprise readiness.\n  \n\n    Startups: Get productive from day-1. Leverage packages to reach MVP really fast and not be constrained by limit on customizability (as with low-code/no-code solutions). Lowest cost of hosting if you have multiple apps or building microservices.\n  \n\n    Consulting/ Development companies: Increase development efficiency and optimize on hosting cost.\n  \n\n    You: If you are looking to develop any bespoke app, give it a try :)\n  \n\n\nComparison\n\n\n\n\n\n\n\n    Web dev frameworks(e.g. Django): Not opinionated for enterprise readiness/ business apps. Zango enables faster development, lower opex and and built-in compliance and enterprise readiness\n  \n\n\n\n\n\n    Proprietary platforms (e.g. Salesforce): No vendor lock-in. Faster development\n  \n\n\n\n\n\n    Low-Code / No-Code: Limited customizability.\n  \n\n\n\n\n\n\nMore Info\n\n\n\n    Know more at the project's Github repo: ¬†\nhttps://github.com/Healthlane-Technologies/Zango"},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Content": "What the Project Does\n\n\n\n    The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected): \nhttps://github.com/Zahlii/pyDSLR/blob/main/examples/lightning_trigger.py\n\n\n\n\n\n\n\n    Lightning trigger (showcased)\n  \n\n\n\n\n\n    Bulb capture (showcased)\n  \n\n\n\n\n\n    High Speed capture (e.g. using computer vision to detect animals and use the camera as part of a wildlife trap, partly showcased)\n  \n\n\n\n\n\n    Photo booths\n  \n\n\n\n\n\n    Timelapses (also for cameras that don't naturally support them)\n  \n\n\n\n\n\n    Focus bracketing (also for cameras that don't natively support them)\n  \n\n\n\n\n\n    Astro stacking (Taking hundreds of long exposures with fixed settings after another)\n  \n\n\n\n\n\n    With a computer-controllable astro mount we could also track the camera based on preview images\n  \n\n\n\n\n\n\nTarget Audience\n\n\n\n    For now, mainly Python hobby photographers, but in the future hopefully also less tech savy hobbysts.\n  \n\n    Right now it is obviously still a work in progress (with only types available for my Canon R6II), and I am inviting people to reach out to me if they are interested in participating or have cameras to add to our types :)\n  \n\n\nComparison with Other Libraries\n\n\n\n    When compared to other library around it:\n  \n\n\n\n\n\n    We wrap python-gphoto2's low level API\n  \n\n\n\n\n\n    gphoto2-cffi is an alternative, but not maintained in 7 years, lacks typing support and doesn't provide much benefits over existing low-level APIs"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Content": "Daily Thread"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\n\n    With the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more.\n  \n\n    The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week‚Äôs happenings. No advertising, no spam, easy to unsubscribe.\n  \n\n    11,019 subscribers - the largest Python on hardware newsletter out there.\n  \n\n    Catch all the weekly news on Python for Microcontrollers with¬†\nadafruitdaily.com\n.\n  \n\n    This ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!\n  \n\n    Ensure you catch the weekly Python on Hardware roundup ‚Äì you can cancel anytime . Try our spam-free newsletter today!\n  \n\n\nhttps://www.adafruitdaily.com/"},
{"Title": "From poetry to docker - easy way", "Content": "Poetry plugin to generate Dockerfile and images automatically\n  \n\n    This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup\n  \n\n    It is meant for production images.\n  \n\n\nhttps://github.com/nicoloboschi/poetry-dockerize-plugin\n\n\n\n\nhttps://pypi.org/project/poetry-dockerize-plugin/\n\n\n\n    Get started with\n  \npoetry self add poetry-dockerize-plugin@latest\n\n    This command generates a production-ready, optimized python image:\n  \npoetry dockerize\n\n    or to generate a Dockerfile\n  \npoetry dockerize --generate"},
{"Title": "A \"new\" Object & Vector Database for Python", "Content": "ObjectBox\n (\nGitHub\n) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Content": "Daily Thread"},
{"Title": "musicnotes: Python module for playing musical instruments!", "Content": "https://github.com/must108/musicnotes\n\n\nWhat My Project Does\n\n\nmusicnotes\n is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers.\n  \nTarget Audience\n\n    Developers looking to add sounds to small games, or just have fun while learning Python in general. This library could also be used to teach Python and coding in a fun way.\n  \n\n    This project was also made to allow new Python developers to easily contribute to open-source! Feel free to star the repository, and download with \npip install musicnotes\n! You can also create a pull request with any changes you find useful, and visit the GitHub repository if you find any setbacks while using this module. There are a few things that can be worked on listed in the README of the repository if you're looking for a place to get started.\n  \nComparison\n\n    This project is very simple and easy to use, and is easy to contribute to as well, which is one of the primary goals of the project."},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Content": "I saw the words 'visual effects', just give me GIFs\n\n\n\n    Understandable, visit the \nEffects Showroom\n first. Then come back if you like what you see.\n  \n\n\nWhat My Project Does\n\n\n\n    TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features.\n  \n\n    Use cases:\n  \n\n\n\n\n\n    Invoke at terminal launch to produce an animation (ex: fetch).\n  \n\n\n\n\n\n    Alias system commands to animate output.\n  \n\n\n\n\n\n    Invoke on SSH session to blow people's minds when they log in.\n  \n\n\n\n\n\n    Use in your project to produce animated prompts, logos, etc.\n  \n\n\n\n\n\n\nTarget Audience\n\n\n\n    TTE is a terminal toy (and now a Python library) that anybody can use to add visual flair to their terminal or projects. It works best in Linux but is functional in the new Windows Terminal.\n  \n\n    Every effect allows for significant customization including color gradient stops and directions as well as many effect-specific options. Customization is exposed via command-line arguments and through the Config class interface. The effect examples shown in the documentation represent a single configuration. Your experience can be very different with a little tweaking to match your system theme and preferences.\n  \n\n\nComparison\n\n\n\n    I don't know of any other projects like TTE. It's a completely useless and over-engineered side-project that's turned into a whole thing. Have fun.\n  \n\n\nMore Info\n\n\n\n    The \nGitHub\n README has some effect examples, installation instructions and some basic quick-start info."}
]