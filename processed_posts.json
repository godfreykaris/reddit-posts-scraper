[
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "NumPy 2.0.0 is the first major release since 2006.", "Author": "commandlineluser", "Content": "NumPy 2.0.0 is the first major release since 2006.\nhttps://github.com/numpy/numpy/releases/tag/v2.0.0\nhttps://numpy.org/devdocs/release/2.0.0-notes.html\nhttps://numpy.org/devdocs/numpy_2_0_migration_guide.html"},
{"Title": "Advise on choosing UI technology with Python", "Author": "green9cactus", "Content": "I am new to python and currently working on simple 3 layer web application -\nfrontend - ?\nbackend API to fetch data from DB - python\nDB - cloud\nThis application has main intention to fetch data from DB, display graphs , table format data etc. also perform some combination analysis of data and show on UI. Which less complex and stable technology I should prefer for frontend ? python flask, Bulma, Mesop by google or any other ? Thank you."},
{"Title": "Efficient Resource Management in Python: A Guide to Using Context Managers", "Author": "ImmediateDecision320", "Content": "Managing resources efficiently in Python is crucial to prevent memory leaks and ensure optimal performance. One of the best ways to handle resource allocation and deallocation is through the use of context managers. In my latest blog post, I dive deep into the concept of context managers, their significance, and how to implement them using both the built-in `with` statement and the `contextlib` module. Here's a brief overview of what you'll find in the article: Understanding Context Managers: What They Are: Context managers help manage resources such as file handling and database connections by setting up a temporary runtime context and cleaning up after the operations are completed."},
{"Title": "Advice for creating 3D modelling program", "Author": "Latter-History-8053", "Content": "I am creating a Python program which models 3D shapes so that they can be saved and or interacted with (i.e. rotated). The process currently takes a while to render shapes consisting of multiple materials. The libraries being implemented are currently matplotlib and numpy. What would you advise for improving the rendering process (library choice etc)?"},
{"Title": "Privacy-first natural language to SQL + charting + editing app", "Author": "anthony2261", "Content": "What my project does\nDataLine is an AI-driven open source and privacy-first platform for data exploration. Your data is accessed using your device and stored on your device. In simple terms, it's an interface that allows you to \"chat\" with your database/dataset. You can ask it explorative questions, e.g. \"what potential insights can I find in this data\", or specific questions \"who are my top five customers in the past 3 months\", and it will gladly oblige. The backend is written using FastAPI, and the frontend uses Reactjs."},
{"Title": "pieshell: python for shell scripting and as an interactive shell", "Author": "Severe_Inflation5326", "Content": "Pieshell is a Python shell environment that combines the expressiveness of shell pipelines with the power of python iterators. It can be used in two major ways:\nAs an interactive shell replacing e.g. bash\nAs an ordinary python module replacing e.g. subprocess.Popen\nObligatory example: 140:/home/oven/pieshell >>> for x in ls(-a) | tr(\"s\", \"S\"):\n...   if x.endswith('.py'):\n...      print x\n... \nSetup.py"},
{"Title": "Converting tkinter (ttkbootstrap) Python script to a Windows executable using Pyinstaller", "Author": "xanthium_in", "Content": "In this tutorial, we will explore the process of converting a Python script written with tkinter and ttkbootstrap into a standalone Windows executable (.exe) using PyInstaller Link to the full tutorial on how to convert Python tkinter script to Windows executable"},
{"Title": "I created a script to automatically patch revanced", "Author": "ltlbwu", "Content": "What My Project Does AutoReVanced is a Python script that automates downloading and patching APKs using ReVanced patches from ApkPure. It's perfect for anyone wanting to patch their revanced app. Target Audience Suitable for a fun side project or hobbyists, AutoReVanced is designed for anyone wanting to customize Android apps with ReVanced patches. Comparison Unlike alternatives, AutoReVanced is automatic. GitHub: autorevanced"},
{"Title": "What to learn on phone?", "Author": "zJqson", "Content": "My workplace gives me a lot of phone time, I can be on my phone while working so what should I learn? Im 19, I already have a basic understanding of python and the fundamentals, etc. All the popular modules like math, random, datetime, I already learned. I was using python editor on phone and learning panda was pretty ez because I just make dataframe with manually made dictionary instead of excel and use print instead of outputting to csv, so there was little work on PC. But modules like tkinter cant really learn on phone cuz I need to see GUI and use file paths and stuff unless I have a surface pro."},
{"Title": "abstract-factories - a simple framework for content creation pipelines", "Author": "HistoricalCrow", "Content": "Hey all, my project abstract_factories is up to gauge interest and primarily feedback. The design goal is to make it easier to iterate on typical Content Creation pipeline tools (tool dev, rigging, validation, asset management etc) with a flexible framework to provide convenience, open and simple design and no dependencies (currently). It's an approach I've used a lot over the years and found it pretty versatile in production across numerous projects. Key features\nAuto-registration of matching items (types or instances) from any given path or python module."},
{"Title": "Get Started With Google Colab", "Author": "elliesleight", "Content": "Transitioning into the world of machine learning, I've found Google Colab to be awesome and I wanted to share that with other Python users! What is Google Colab?\nGoogle Colab is a product from Google Research that allows anyone to write and execute Python code through the browser! It's especially well-suited for machine learning, data analysis, and educational purposes. To get started with Google Colab:\nhttps://www.marqo.ai/blog/getting-started-with-google-colab-a-beginners-guide Happy coding!"},
{"Title": "Malicious VSCode Extensions Uncovered: Beware my fellow programmers", "Author": "nicanorflavier", "Content": "Malicious VSCode Extensions Uncovered: Millions of Installs at Risk! Beware my fellow programmers, make sure you review your VSCode extensions https://www.bleepingcomputer.com/news/security/malicious-vscode-extensions-with-millions-of-installs-discovered/"},
{"Title": "Have anyone tried google/mesop", "Author": "codes_astro", "Content": "Google Open sourced Mesop. Mesop is a Python-based UI framework that allows you to rapidly build web apps. Used at Google for rapid internal app development similar to Streamlit. find more here"},
{"Title": "Api for odds and results on prop bets? ", "Author": "bimpsmacket", "Content": "Does anyone know of a reilabel API(preferably free) that offers prp bets for major sports-(NFL, NBA, MLB), i need the odds and results too."},
{"Title": "Showcase: pdf-to-podcast.com -- Convert PDF's to podcast episodes. Free and open-source :)", "Author": "knowsuchagency", "Content": "What My Project Does Upload any PDF and have it converted into a podcast episode with two or more speakers discussing its contents. https://github.com/knowsuchagency/pdf-to-podcast Target Audience Anyone, but other developers in-particular. The code is open-source on GitHub and there's a link to the source on https://pdf-to-podcast.com. I want the project to serve as an illustrative example of how to build useful things on top of LLMs with relatively little code. Comparison I just made this for fun. It's possible there are other similar projects"},
{"Title": "I created Yu-Gi-Oh! Power of Chaos save handler", "Author": "wildpantz", "Content": "Quick backstory: Upper floor of my house is sort of a man-cave until we decorate it, so during this time I have two PCs which I use to play games with a friend when we have extra time to waste. The other day I remembered the game mentioned in the title and we had lots of fun playing it (there's 3 different games in this series). I decided I'd transfer the save file to my main PC so I can play when he's not visiting and I quickly learned it's an extremely annoying process to transfer save files across different PCs. Long story short, you need to find a proper registry key (which isn't always located at same spot for some reason) and you need to locate a system.dat file also located in a folder that isn't always in the same place. This process gets tedious pretty quick, so I decided to use the power of Python to make my life easier."},
{"Title": "Tutorial: A Timely Python Multi-page Streamlit Application on Olympic Medal Winning Countries", "Author": "jgloewen", "Content": "Streamlit is an open-source app framework that allows data scientists and analysts to create interactive web applications with ease. Using just a few lines of Python, you can turn data scripts into shareable web apps. And combined with a data visualization library like Plotly, you can create beautiful charts and maps with only a few lines of code. In this article, let me step you through how to use Streamlit to create a multi-page interactive application that visualizes Olympic medal data. The application will have three pages:"},
{"Title": "Learning Python coming from a JVM background", "Author": "Human_Dependent6814", "Content": "I have 4 years worth JVM languages (Java, Kotlin) and have a need to learn some Python. What's a good resource to get up to speed quickly with idiomatic Python?"},
{"Title": "I made a cool calendar app with PyQt6", "Author": "Specialist-Arachnid6", "Content": "Tempus is a calendar with horoscopes, reminders, etc made with PyQt6\nWhat my Project does?\nTempus is a desktop-based calendar management application built with PyQt6, allowing users to manage their todos, reminders, and special dates efficiently. It offers features like adding, editing, and deleting tasks and reminders, as well as marking dates as special. Tempus ensures users stay organized and never miss important events. Plus, it shows you how many days are remaining until a special day in the dashboard."},
{"Title": "Video / Image acquisition from microscope", "Author": "IllTicket9067", "Content": "Dear Fellow Redittors, I am working on a medical / healthcare AI solution focused on cell structure analysis, and other related studies or blood composition for cancer treatment related research. I use python, anaconda, spyder etc and I am from AI background, a techie from various fields such as defence, IoT, healthcare etc. I am aware of my python libraries and modules for microscopes, camera view over the top eye pieces etc. But I am trying to find out suitable microscopes with camera, hdmi output, driver / device servers etc which can connect to the python environment and pull the live video feed for real time diagnostics and related activities based on the model injection directly into the code."},
{"Title": "Better-OrderedMultiDict - a fast pure-pyton implementation of an ordered multi-valued dictionary.", "Author": "JoachimCoenen", "Content": "What my project does\nIt provides a fast pure-python implementation of an ordered, multi-valued dictionary.\nTarget audience\nPython developers that need this kind of specialized functionality. This can be used in production. It has no dependencies. The code is unit-tested (almost fully, I'm working on it) It requires Python 3.12+"},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Have you tried the LogiTyme package on PyPI?", "Author": "lmas3009", "Content": "A Python package that tracks the time spent on each function, custom function, and the entire Python code. It also provides an analysis report and suggestions for running the code in the cloud. Python Package link: https://pypi.org/project/LogiTyme/ Share your feedback below"},
{"Title": "Sending SMS through GoIP GSM gateway using HTTP API", "Author": "riklaunim", "Content": "GoIP-1 is a simple network device that can be used in VoIP-GSM applications or as a local SMS gateway. For SMS there are services like Twilio but they can get expensive for regions far away from main telecom infrastructure (like islands) and this device can help. You can find the device on Aliexpress and similar sites. The base model GoIP-1 has one SIM slot, while there are bigger ones for near industrial amount of SIM slots (and it gets very expensive). The device has a web panel and simple HTTP GET endpoints for sending SMS so it can be scripted with Python or other programming language."},
{"Title": "Built a RAG ( Retrieval-Augmented Generation ) model using Gemini Api.", "Author": "inobody_somebody", "Content": "what my project does\nThis project is built to solve the issue of LLM unable to produce relevant answers for information in a particular context. uses the information to train the model and stored it in a database and uses this database to get relevant answers from the Model.\nTarget audiance\nThis project is for people who want to train a LLM on a particular piece of information."},
{"Title": "Tutoring school backend FastApi -Google Calendar Review", "Author": "Itsaliensbro453", "Content": "Hello everyone ,i Made a tutoring School backend using fastapi and Google calendar. Im completly selftaught, learning after work so i dont have anybody to ask for directions🥲 Let me know what you think ,much appreciated ! 😁 https://github.com/Ablasko32/Tutoring_school_system-FastApi-GoogleCalendarApi"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "NumPy 2.0.0 is the first major release since 2006.", "Author": "commandlineluser", "Content": "NumPy 2.0.0 is the first major release since 2006.\nhttps://github.com/numpy/numpy/releases/tag/v2.0.0\nhttps://numpy.org/devdocs/release/2.0.0-notes.html\nhttps://numpy.org/devdocs/numpy_2_0_migration_guide.html"},
{"Title": "Advise on choosing UI technology with Python", "Author": "green9cactus", "Content": "I am new to python and currently working on simple 3 layer web application -\nfrontend - ?\nbackend API to fetch data from DB - python\nDB - cloud\nThis application has main intention to fetch data from DB, display graphs , table format data etc. also perform some combination analysis of data and show on UI. Which less complex and stable technology I should prefer for frontend ? python flask, Bulma, Mesop by google or any other ? Thank you."},
{"Title": "Efficient Resource Management in Python: A Guide to Using Context Managers", "Author": "ImmediateDecision320", "Content": "Managing resources efficiently in Python is crucial to prevent memory leaks and ensure optimal performance. One of the best ways to handle resource allocation and deallocation is through the use of context managers. In my latest blog post, I dive deep into the concept of context managers, their significance, and how to implement them using both the built-in `with` statement and the `contextlib` module. Here's a brief overview of what you'll find in the article: Understanding Context Managers: What They Are: Context managers help manage resources such as file handling and database connections by setting up a temporary runtime context and cleaning up after the operations are completed."},
{"Title": "Advice for creating 3D modelling program", "Author": "Latter-History-8053", "Content": "I am creating a Python program which models 3D shapes so that they can be saved and or interacted with (i.e. rotated). The process currently takes a while to render shapes consisting of multiple materials. The libraries being implemented are currently matplotlib and numpy. What would you advise for improving the rendering process (library choice etc)?"},
{"Title": "Privacy-first natural language to SQL + charting + editing app", "Author": "anthony2261", "Content": "What my project does\nDataLine is an AI-driven open source and privacy-first platform for data exploration. Your data is accessed using your device and stored on your device. In simple terms, it's an interface that allows you to \"chat\" with your database/dataset. You can ask it explorative questions, e.g. \"what potential insights can I find in this data\", or specific questions \"who are my top five customers in the past 3 months\", and it will gladly oblige. The backend is written using FastAPI, and the frontend uses Reactjs."},
{"Title": "pieshell: python for shell scripting and as an interactive shell", "Author": "Severe_Inflation5326", "Content": "Pieshell is a Python shell environment that combines the expressiveness of shell pipelines with the power of python iterators. It can be used in two major ways:\nAs an interactive shell replacing e.g. bash\nAs an ordinary python module replacing e.g. subprocess.Popen\nObligatory example: 140:/home/oven/pieshell >>> for x in ls(-a) | tr(\"s\", \"S\"):\n...   if x.endswith('.py'):\n...      print x\n... \nSetup.py"},
{"Title": "Converting tkinter (ttkbootstrap) Python script to a Windows executable using Pyinstaller", "Author": "xanthium_in", "Content": "In this tutorial, we will explore the process of converting a Python script written with tkinter and ttkbootstrap into a standalone Windows executable (.exe) using PyInstaller Link to the full tutorial on how to convert Python tkinter script to Windows executable"},
{"Title": "I created a script to automatically patch revanced", "Author": "ltlbwu", "Content": "What My Project Does AutoReVanced is a Python script that automates downloading and patching APKs using ReVanced patches from ApkPure. It's perfect for anyone wanting to patch their revanced app. Target Audience Suitable for a fun side project or hobbyists, AutoReVanced is designed for anyone wanting to customize Android apps with ReVanced patches. Comparison Unlike alternatives, AutoReVanced is automatic. GitHub: autorevanced"},
{"Title": "What to learn on phone?", "Author": "zJqson", "Content": "My workplace gives me a lot of phone time, I can be on my phone while working so what should I learn? Im 19, I already have a basic understanding of python and the fundamentals, etc. All the popular modules like math, random, datetime, I already learned. I was using python editor on phone and learning panda was pretty ez because I just make dataframe with manually made dictionary instead of excel and use print instead of outputting to csv, so there was little work on PC. But modules like tkinter cant really learn on phone cuz I need to see GUI and use file paths and stuff unless I have a surface pro."},
{"Title": "abstract-factories - a simple framework for content creation pipelines", "Author": "HistoricalCrow", "Content": "Hey all, my project abstract_factories is up to gauge interest and primarily feedback. The design goal is to make it easier to iterate on typical Content Creation pipeline tools (tool dev, rigging, validation, asset management etc) with a flexible framework to provide convenience, open and simple design and no dependencies (currently). It's an approach I've used a lot over the years and found it pretty versatile in production across numerous projects. Key features\nAuto-registration of matching items (types or instances) from any given path or python module."},
{"Title": "Get Started With Google Colab", "Author": "elliesleight", "Content": "Transitioning into the world of machine learning, I've found Google Colab to be awesome and I wanted to share that with other Python users! What is Google Colab?\nGoogle Colab is a product from Google Research that allows anyone to write and execute Python code through the browser! It's especially well-suited for machine learning, data analysis, and educational purposes. To get started with Google Colab:\nhttps://www.marqo.ai/blog/getting-started-with-google-colab-a-beginners-guide Happy coding!"},
{"Title": "Malicious VSCode Extensions Uncovered: Beware my fellow programmers", "Author": "nicanorflavier", "Content": "Malicious VSCode Extensions Uncovered: Millions of Installs at Risk! Beware my fellow programmers, make sure you review your VSCode extensions https://www.bleepingcomputer.com/news/security/malicious-vscode-extensions-with-millions-of-installs-discovered/"},
{"Title": "Have anyone tried google/mesop", "Author": "codes_astro", "Content": "Google Open sourced Mesop. Mesop is a Python-based UI framework that allows you to rapidly build web apps. Used at Google for rapid internal app development similar to Streamlit. find more here"},
{"Title": "Api for odds and results on prop bets? ", "Author": "bimpsmacket", "Content": "Does anyone know of a reilabel API(preferably free) that offers prp bets for major sports-(NFL, NBA, MLB), i need the odds and results too."},
{"Title": "Showcase: pdf-to-podcast.com -- Convert PDF's to podcast episodes. Free and open-source :)", "Author": "knowsuchagency", "Content": "What My Project Does Upload any PDF and have it converted into a podcast episode with two or more speakers discussing its contents. https://github.com/knowsuchagency/pdf-to-podcast Target Audience Anyone, but other developers in-particular. The code is open-source on GitHub and there's a link to the source on https://pdf-to-podcast.com. I want the project to serve as an illustrative example of how to build useful things on top of LLMs with relatively little code. Comparison I just made this for fun. It's possible there are other similar projects"},
{"Title": "I created Yu-Gi-Oh! Power of Chaos save handler", "Author": "wildpantz", "Content": "Quick backstory: Upper floor of my house is sort of a man-cave until we decorate it, so during this time I have two PCs which I use to play games with a friend when we have extra time to waste. The other day I remembered the game mentioned in the title and we had lots of fun playing it (there's 3 different games in this series). I decided I'd transfer the save file to my main PC so I can play when he's not visiting and I quickly learned it's an extremely annoying process to transfer save files across different PCs. Long story short, you need to find a proper registry key (which isn't always located at same spot for some reason) and you need to locate a system.dat file also located in a folder that isn't always in the same place. This process gets tedious pretty quick, so I decided to use the power of Python to make my life easier."},
{"Title": "Tutorial: A Timely Python Multi-page Streamlit Application on Olympic Medal Winning Countries", "Author": "jgloewen", "Content": "Streamlit is an open-source app framework that allows data scientists and analysts to create interactive web applications with ease. Using just a few lines of Python, you can turn data scripts into shareable web apps. And combined with a data visualization library like Plotly, you can create beautiful charts and maps with only a few lines of code. In this article, let me step you through how to use Streamlit to create a multi-page interactive application that visualizes Olympic medal data. The application will have three pages:"},
{"Title": "Learning Python coming from a JVM background", "Author": "Human_Dependent6814", "Content": "I have 4 years worth JVM languages (Java, Kotlin) and have a need to learn some Python. What's a good resource to get up to speed quickly with idiomatic Python?"},
{"Title": "I made a cool calendar app with PyQt6", "Author": "Specialist-Arachnid6", "Content": "Tempus is a calendar with horoscopes, reminders, etc made with PyQt6\nWhat my Project does?\nTempus is a desktop-based calendar management application built with PyQt6, allowing users to manage their todos, reminders, and special dates efficiently. It offers features like adding, editing, and deleting tasks and reminders, as well as marking dates as special. Tempus ensures users stay organized and never miss important events. Plus, it shows you how many days are remaining until a special day in the dashboard."},
{"Title": "Video / Image acquisition from microscope", "Author": "IllTicket9067", "Content": "Dear Fellow Redittors, I am working on a medical / healthcare AI solution focused on cell structure analysis, and other related studies or blood composition for cancer treatment related research. I use python, anaconda, spyder etc and I am from AI background, a techie from various fields such as defence, IoT, healthcare etc. I am aware of my python libraries and modules for microscopes, camera view over the top eye pieces etc. But I am trying to find out suitable microscopes with camera, hdmi output, driver / device servers etc which can connect to the python environment and pull the live video feed for real time diagnostics and related activities based on the model injection directly into the code."},
{"Title": "Better-OrderedMultiDict - a fast pure-pyton implementation of an ordered multi-valued dictionary.", "Author": "JoachimCoenen", "Content": "What my project does\nIt provides a fast pure-python implementation of an ordered, multi-valued dictionary.\nTarget audience\nPython developers that need this kind of specialized functionality. This can be used in production. It has no dependencies. The code is unit-tested (almost fully, I'm working on it) It requires Python 3.12+"},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Have you tried the LogiTyme package on PyPI?", "Author": "lmas3009", "Content": "A Python package that tracks the time spent on each function, custom function, and the entire Python code. It also provides an analysis report and suggestions for running the code in the cloud. Python Package link: https://pypi.org/project/LogiTyme/ Share your feedback below"},
{"Title": "Sending SMS through GoIP GSM gateway using HTTP API", "Author": "riklaunim", "Content": "GoIP-1 is a simple network device that can be used in VoIP-GSM applications or as a local SMS gateway. For SMS there are services like Twilio but they can get expensive for regions far away from main telecom infrastructure (like islands) and this device can help. You can find the device on Aliexpress and similar sites. The base model GoIP-1 has one SIM slot, while there are bigger ones for near industrial amount of SIM slots (and it gets very expensive). The device has a web panel and simple HTTP GET endpoints for sending SMS so it can be scripted with Python or other programming language."},
{"Title": "Built a RAG ( Retrieval-Augmented Generation ) model using Gemini Api.", "Author": "inobody_somebody", "Content": "what my project does\nThis project is built to solve the issue of LLM unable to produce relevant answers for information in a particular context. uses the information to train the model and stored it in a database and uses this database to get relevant answers from the Model.\nTarget audiance\nThis project is for people who want to train a LLM on a particular piece of information."},
{"Title": "Tutoring school backend FastApi -Google Calendar Review", "Author": "Itsaliensbro453", "Content": "Hello everyone ,i Made a tutoring School backend using fastapi and Google calendar. Im completly selftaught, learning after work so i dont have anybody to ask for directions🥲 Let me know what you think ,much appreciated ! 😁 https://github.com/Ablasko32/Tutoring_school_system-FastApi-GoogleCalendarApi"},
{"Title": "LLM Observability and RAG in just 10 lines of Code", "Author": "trj_flash75", "Content": "Build LLM Observability and RAG in 10 lines of Code using BeyondLLM and Phoenix. Observability helps us monitor key metrics such as latency, the number of tokens, prompts, and the cost per request. Save your OpenAI API cost by monitoring and tracking your GPT request made for each RAG query: https://www.youtube.com/watch?v=VCQ0Cw-GF2U"},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I’m looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "Lua-style code blocks for Python", "Author": "guangrei", "Content": "Python is a great programming language, but sometimes the indentation can be terrible for some people (especially people with visual impairments). So i created Lython. What the project does: Lython replacing the Python indentation to lua-style code blocks. this is example lython code def test(num)\n    for i in range(num) do\n        if i == 0 then\n            print(\"zero\")\n        elif i % 2 == 1 then\n            print(\"odd\")\n        else\n            print(\"even\")\n        end # if else\n    end # for\nend # def\n\ntest(10)"},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "Why do you do your work??", "Author": "MathematicianTop9745", "Content": "What do you think are the factors that motivate a developer? Do you think that creativity is a factor that can influence motivation or productivity? Share your experiences! For this purpose I am also conducting a survey on motivation in IT developers. I have produced a questionnaire aimed exclusively at those who already work in this sector and which takes only two minutes to fill out: https://forms.gle/pkqfMRMjFrN6TmZN6 You would be a great help in collecting data if you could fill it out. Thank you all so much in advance 🫶🏼"},
{"Title": "Global Silent Disco Live Broadcasting app", "Author": "HapHeirohFlow", "Content": "Import necessary libraries\nfrom flask import Flask, render_template, request, redirect, url_for, session from flask_socketio import SocketIO, emit, join_room, leave_room from flask_sqlalchemy import SQLAlchemy from werkzeug.security import generate_password_hash, check_password_hash from datetime import datetime import os\nInitialize the app and related components"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "An ugly spot of the Python language?", "Author": "LunarCantaloupe", "Content": "I'm not sure exactly what the related language feature would be, but I believe Python lacks the ability to nicely leverage the case when a variable name matches a keyword argument name it is used for, in a way that TypeScript does really well. For example: one_thing = X \n\n... \n\nother_thing = X \n\n... \n\nsome_function(one_thing=one_thing, other_thing=other_thing)"},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "I tried to explain python imports", "Author": "MaKaNuReddit", "Content": "When I was a beginner (or maybe still I am) I struggled a lot with pythons import function. Over the years I went over different approaches, how to handle imports and ended up using mostly exclusive poetry. I've met a lot of people struggling the same way, bit always could just explain very shortly my experience. I've now decided to write it down as a scenario, where I can show and explain my pitfalls: https://github.com/MaKaNu/pyimport-explained"},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "how about one-line try-except statement ?", "Author": "17thCurlyBrace", "Content": "is there a proposal for a shorter exception handling syntax for those very frequent cases where a library function doesn't return \"error value\" like str.index ? something like instead of : try:\n    i = my_str.index(\"sub\", st, en)\nexcept ValueError: # if \"sub\" has not been found\n    pass\nelse:\n    # do stuff with i (note that i usually want independent error handling here)"},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast™️ because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience 😎 Commands are in preview so expect missing stuff."},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC…), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "Building AI Text-to-Video Model From Scratch", "Author": "FareedKhan557", "Content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos."},
{"Title": "My Thoughts on Python in Excel", "Author": "fzumstein", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel Here’s the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn’t suitable for Python beginners nor for interactive data analysis"},
{"Title": "GUI Recommendations", "Author": "Mrkrabsstalker", "Content": "I built a Matlab app for my grandfather's business with my student version. I need to make it accessible on his employees computers. Matlab comiler seems not worth it, so I was wondering if I translated it into a python GUI which one would make it easy to distribute for preferably a low to zero cost."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Kwargs appreciation thread", "Author": "TheRealFrostMana", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though! I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go. Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean: some_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)"},
{"Title": "Suck at Automate the Boring Stuff - Need Assurance", "Author": "COOKIEMONSTER-315", "Content": "I’ve been working hard at learning Python this past year and I’ve been doing ok at it. I’ve used a lot of the commonly recommended books and YouTube channels and like them all except for some reason, I still struggle like crazy with the practice problems in Automate the Boring Stuff. Is this a sign that I still suck a Python, or are the practice problems at the end of the chapters known to be difficult? Looking for a sanity check in my progress basically. Automate The Boring Stuff"},
{"Title": "Open-source AI shorts generator in python", "Author": "ANil1729", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc. Link to code :- https://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "Tiny Python for x64 Server 2022?", "Author": "amckern", "Content": "I am using a 5-line script on Windows Server (production container is set up with 1GB memory) - is there a tiny Python that I can use that is optimised for small memory machines? I am not familiar with self-compiling the source (I have grown up with Visual Studio) so am after a pre-compiled release. Happy to use anything in the 3.12.x branch."},
{"Title": "Made a Minimalistic Router for Uvicorn", "Author": "achaayb", "Content": "Hey everyone, I've been working on a simple router for Uvicorn called ASGIRouter. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\nWhat My Project Does\nASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn. This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Author": "itssimon86", "Content": "Hey Python community! I’d like to introduce you to my indie product Apitally, a simple API monitoring & analytics tool for Python projects.\nWhat My Project Does\nApitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down. Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally’s servers in regular intervals."},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Author": "aman6944", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found https://github.com/SeleniumHQ/selenium/pull/13173 .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find. I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "Textchat: TUI Single Server IRC Client", "Author": "rmpython", "Content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/ I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!"},
{"Title": "Virtual Python workshops", "Author": "szabgab", "Content": "I have been been teaching programming at hi-tech companies for 24 years. For many years I taught Perl 🐪 - I know, you all love it 😊 and then for even more years I taught Python 🐍. These days I also teach Rust. Recently I started to offer free online workshops via Zoom for all 3 languages. They include a presentation and then hands-on assignments to practice the things I explained. I hope these workshops will be interesting to some of the r/python members and that it is acceptable to occasionally mention the Python workshops here. (and I hope this time I put the proper flair on it)"},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Author": "0akman", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera. The Python code and documentation on my GitHub: https://github.com/FrunzaDan/Tool-Chip_Contact_Length The video: https://youtu.be/bndai6SlF6E Enjoy!\nWhat My Project Does"},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Author": "Character-Maybe-4400", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil. I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a pytest-edit plugin that adds an --edit option to Pytest. There isn't. So I created just that. Enjoy."},
{"Title": "Why would anyone use pyqt if pyside exists", "Author": "AccordingBeyond2985", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "Building an HTTP Server in Python", "Author": "mraza007", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python. Link to blog post"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "open source CLI tool for finding out how programs work", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow users to find out what frameworks, tools, engines a program / game was made in. Looks through a directory and searches for common folder structures, and file names. You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries. Image Example\nTarget Audience\nAnyone! Developers looking to learn how other programs were made, people who are just interested."},
{"Title": "Kivy School - Crowdfunding Update", "Author": "filipemarch", "Content": "We're excited to share that our Kivy School crowdfunding project on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal! We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at kivyschool.com and our course on Udemy. Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!"},
{"Title": "Async Python Clarifications", "Author": "Cool-Focus6556", "Content": "Ok, so just so I have this straight:\nAsyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\nThe threading library creates threads and uses preemptive multitasking to context switch between threads\nAsyncio is more efficient than threading for the reasons above"},
{"Title": "The Problems with Celery", "Author": "hatchet-dev", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: https://docs.hatchet.run/blog/problems-with-celery Our issues with the Celery project were part of the reason why we started Hatchet. Would love to hear comments or feedback!"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "EFT - A file extension for implementing user created themes", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable Example:\nmy_theme.eft - My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool"},
{"Title": "Flappy Berd in PyQt", "Author": "GhnQuix", "Content": "Hello there What my project does: I’m excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! 😃 As Richard Watterson once said: \"10/10 game, would play again.\" Target Audience This game is for anyone who’s bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience. Comparison Think of it as a faithful recreation of Flappy Bird with a PyQt twist."},
{"Title": "I have made an open source library for logging errors / messages :)", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file. Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience"},
{"Title": "Just released my first Python package: Melodica Notes 🎶", "Author": "bettercallsenna", "Content": "Hey everyone! I’m excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics. What My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players. Target Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it’s fully functional, I consider it an evolving tool and welcome contributions to enhance its features."},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Author": "jcoelho93", "Content": "What my project does: It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc. Target Audience Developers mostly, I guess Comparison I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line. Code: Here's the GitHub repo https://github.com/jcoelho93/steer"},
{"Title": "Async Python adoption?", "Author": "mcharytoniuk", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python? I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can’t build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone 👋 The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and cliché, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "NumPy 2.0.0 is the first major release since 2006.", "Author": "commandlineluser", "Content": "NumPy 2.0.0 is the first major release since 2006.\nhttps://github.com/numpy/numpy/releases/tag/v2.0.0\nhttps://numpy.org/devdocs/release/2.0.0-notes.html\nhttps://numpy.org/devdocs/numpy_2_0_migration_guide.html"},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboard🗒️. I created a script to automate Bing searches for reward generation\n👍 Excellent command line experience.\n🙂 User friendly."},
{"Title": "Advise on choosing UI technology with Python", "Author": "green9cactus", "Content": "I am new to python and currently working on simple 3 layer web application -\nfrontend - ?\nbackend API to fetch data from DB - python\nDB - cloud\nThis application has main intention to fetch data from DB, display graphs , table format data etc. also perform some combination analysis of data and show on UI. Which less complex and stable technology I should prefer for frontend ? python flask, Bulma, Mesop by google or any other ? Thank you."},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "Efficient Resource Management in Python: A Guide to Using Context Managers", "Author": "ImmediateDecision320", "Content": "Managing resources efficiently in Python is crucial to prevent memory leaks and ensure optimal performance. One of the best ways to handle resource allocation and deallocation is through the use of context managers. In my latest blog post, I dive deep into the concept of context managers, their significance, and how to implement them using both the built-in `with` statement and the `contextlib` module. Here's a brief overview of what you'll find in the article: Understanding Context Managers: What They Are: Context managers help manage resources such as file handling and database connections by setting up a temporary runtime context and cleaning up after the operations are completed."},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "Advice for creating 3D modelling program", "Author": "Latter-History-8053", "Content": "I am creating a Python program which models 3D shapes so that they can be saved and or interacted with (i.e. rotated). The process currently takes a while to render shapes consisting of multiple materials. The libraries being implemented are currently matplotlib and numpy. What would you advise for improving the rendering process (library choice etc)?"},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you’re working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "Privacy-first natural language to SQL + charting + editing app", "Author": "anthony2261", "Content": "What my project does\nDataLine is an AI-driven open source and privacy-first platform for data exploration. Your data is accessed using your device and stored on your device. In simple terms, it's an interface that allows you to \"chat\" with your database/dataset. You can ask it explorative questions, e.g. \"what potential insights can I find in this data\", or specific questions \"who are my top five customers in the past 3 months\", and it will gladly oblige. The backend is written using FastAPI, and the frontend uses Reactjs."},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "pieshell: python for shell scripting and as an interactive shell", "Author": "Severe_Inflation5326", "Content": "Pieshell is a Python shell environment that combines the expressiveness of shell pipelines with the power of python iterators. It can be used in two major ways:\nAs an interactive shell replacing e.g. bash\nAs an ordinary python module replacing e.g. subprocess.Popen\nObligatory example: 140:/home/oven/pieshell >>> for x in ls(-a) | tr(\"s\", \"S\"):\n...   if x.endswith('.py'):\n...      print x\n... \nSetup.py"},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "Converting tkinter (ttkbootstrap) Python script to a Windows executable using Pyinstaller", "Author": "xanthium_in", "Content": "In this tutorial, we will explore the process of converting a Python script written with tkinter and ttkbootstrap into a standalone Windows executable (.exe) using PyInstaller Link to the full tutorial on how to convert Python tkinter script to Windows executable"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "I created a script to automatically patch revanced", "Author": "ltlbwu", "Content": "What My Project Does AutoReVanced is a Python script that automates downloading and patching APKs using ReVanced patches from ApkPure. It's perfect for anyone wanting to patch their revanced app. Target Audience Suitable for a fun side project or hobbyists, AutoReVanced is designed for anyone wanting to customize Android apps with ReVanced patches. Comparison Unlike alternatives, AutoReVanced is automatic. GitHub: autorevanced"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "What to learn on phone?", "Author": "zJqson", "Content": "My workplace gives me a lot of phone time, I can be on my phone while working so what should I learn? Im 19, I already have a basic understanding of python and the fundamentals, etc. All the popular modules like math, random, datetime, I already learned. I was using python editor on phone and learning panda was pretty ez because I just make dataframe with manually made dictionary instead of excel and use print instead of outputting to csv, so there was little work on PC. But modules like tkinter cant really learn on phone cuz I need to see GUI and use file paths and stuff unless I have a surface pro."},
{"Title": "abstract-factories - a simple framework for content creation pipelines", "Author": "HistoricalCrow", "Content": "Hey all, my project abstract_factories is up to gauge interest and primarily feedback. The design goal is to make it easier to iterate on typical Content Creation pipeline tools (tool dev, rigging, validation, asset management etc) with a flexible framework to provide convenience, open and simple design and no dependencies (currently). It's an approach I've used a lot over the years and found it pretty versatile in production across numerous projects. Key features\nAuto-registration of matching items (types or instances) from any given path or python module."},
{"Title": "Get Started With Google Colab", "Author": "elliesleight", "Content": "Transitioning into the world of machine learning, I've found Google Colab to be awesome and I wanted to share that with other Python users! What is Google Colab?\nGoogle Colab is a product from Google Research that allows anyone to write and execute Python code through the browser! It's especially well-suited for machine learning, data analysis, and educational purposes. To get started with Google Colab:\nhttps://www.marqo.ai/blog/getting-started-with-google-colab-a-beginners-guide Happy coding!"},
{"Title": "Malicious VSCode Extensions Uncovered: Beware my fellow programmers", "Author": "nicanorflavier", "Content": "Malicious VSCode Extensions Uncovered: Millions of Installs at Risk! Beware my fellow programmers, make sure you review your VSCode extensions https://www.bleepingcomputer.com/news/security/malicious-vscode-extensions-with-millions-of-installs-discovered/"},
{"Title": "Have anyone tried google/mesop", "Author": "codes_astro", "Content": "Google Open sourced Mesop. Mesop is a Python-based UI framework that allows you to rapidly build web apps. Used at Google for rapid internal app development similar to Streamlit. find more here"},
{"Title": "Api for odds and results on prop bets? ", "Author": "bimpsmacket", "Content": "Does anyone know of a reilabel API(preferably free) that offers prp bets for major sports-(NFL, NBA, MLB), i need the odds and results too."},
{"Title": "Showcase: pdf-to-podcast.com -- Convert PDF's to podcast episodes. Free and open-source :)", "Author": "knowsuchagency", "Content": "What My Project Does Upload any PDF and have it converted into a podcast episode with two or more speakers discussing its contents. https://github.com/knowsuchagency/pdf-to-podcast Target Audience Anyone, but other developers in-particular. The code is open-source on GitHub and there's a link to the source on https://pdf-to-podcast.com. I want the project to serve as an illustrative example of how to build useful things on top of LLMs with relatively little code. Comparison I just made this for fun. It's possible there are other similar projects"},
{"Title": "I created Yu-Gi-Oh! Power of Chaos save handler", "Author": "wildpantz", "Content": "Quick backstory: Upper floor of my house is sort of a man-cave until we decorate it, so during this time I have two PCs which I use to play games with a friend when we have extra time to waste. The other day I remembered the game mentioned in the title and we had lots of fun playing it (there's 3 different games in this series). I decided I'd transfer the save file to my main PC so I can play when he's not visiting and I quickly learned it's an extremely annoying process to transfer save files across different PCs. Long story short, you need to find a proper registry key (which isn't always located at same spot for some reason) and you need to locate a system.dat file also located in a folder that isn't always in the same place. This process gets tedious pretty quick, so I decided to use the power of Python to make my life easier."},
{"Title": "Tutorial: A Timely Python Multi-page Streamlit Application on Olympic Medal Winning Countries", "Author": "jgloewen", "Content": "Streamlit is an open-source app framework that allows data scientists and analysts to create interactive web applications with ease. Using just a few lines of Python, you can turn data scripts into shareable web apps. And combined with a data visualization library like Plotly, you can create beautiful charts and maps with only a few lines of code. In this article, let me step you through how to use Streamlit to create a multi-page interactive application that visualizes Olympic medal data. The application will have three pages:"},
{"Title": "Learning Python coming from a JVM background", "Author": "Human_Dependent6814", "Content": "I have 4 years worth JVM languages (Java, Kotlin) and have a need to learn some Python. What's a good resource to get up to speed quickly with idiomatic Python?"},
{"Title": "I made a cool calendar app with PyQt6", "Author": "Specialist-Arachnid6", "Content": "Tempus is a calendar with horoscopes, reminders, etc made with PyQt6\nWhat my Project does?\nTempus is a desktop-based calendar management application built with PyQt6, allowing users to manage their todos, reminders, and special dates efficiently. It offers features like adding, editing, and deleting tasks and reminders, as well as marking dates as special. Tempus ensures users stay organized and never miss important events. Plus, it shows you how many days are remaining until a special day in the dashboard."},
{"Title": "Video / Image acquisition from microscope", "Author": "IllTicket9067", "Content": "Dear Fellow Redittors, I am working on a medical / healthcare AI solution focused on cell structure analysis, and other related studies or blood composition for cancer treatment related research. I use python, anaconda, spyder etc and I am from AI background, a techie from various fields such as defence, IoT, healthcare etc. I am aware of my python libraries and modules for microscopes, camera view over the top eye pieces etc. But I am trying to find out suitable microscopes with camera, hdmi output, driver / device servers etc which can connect to the python environment and pull the live video feed for real time diagnostics and related activities based on the model injection directly into the code."},
{"Title": "Better-OrderedMultiDict - a fast pure-pyton implementation of an ordered multi-valued dictionary.", "Author": "JoachimCoenen", "Content": "What my project does\nIt provides a fast pure-python implementation of an ordered, multi-valued dictionary.\nTarget audience\nPython developers that need this kind of specialized functionality. This can be used in production. It has no dependencies. The code is unit-tested (almost fully, I'm working on it) It requires Python 3.12+"},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Have you tried the LogiTyme package on PyPI?", "Author": "lmas3009", "Content": "A Python package that tracks the time spent on each function, custom function, and the entire Python code. It also provides an analysis report and suggestions for running the code in the cloud. Python Package link: https://pypi.org/project/LogiTyme/ Share your feedback below"},
{"Title": "Sending SMS through GoIP GSM gateway using HTTP API", "Author": "riklaunim", "Content": "GoIP-1 is a simple network device that can be used in VoIP-GSM applications or as a local SMS gateway. For SMS there are services like Twilio but they can get expensive for regions far away from main telecom infrastructure (like islands) and this device can help. You can find the device on Aliexpress and similar sites. The base model GoIP-1 has one SIM slot, while there are bigger ones for near industrial amount of SIM slots (and it gets very expensive). The device has a web panel and simple HTTP GET endpoints for sending SMS so it can be scripted with Python or other programming language."},
{"Title": "Built a RAG ( Retrieval-Augmented Generation ) model using Gemini Api.", "Author": "inobody_somebody", "Content": "what my project does\nThis project is built to solve the issue of LLM unable to produce relevant answers for information in a particular context. uses the information to train the model and stored it in a database and uses this database to get relevant answers from the Model.\nTarget audiance\nThis project is for people who want to train a LLM on a particular piece of information."},
{"Title": "Tutoring school backend FastApi -Google Calendar Review", "Author": "Itsaliensbro453", "Content": "Hello everyone ,i Made a tutoring School backend using fastapi and Google calendar. Im completly selftaught, learning after work so i dont have anybody to ask for directions🥲 Let me know what you think ,much appreciated ! 😁 https://github.com/Ablasko32/Tutoring_school_system-FastApi-GoogleCalendarApi"},
{"Title": "LLM Observability and RAG in just 10 lines of Code", "Author": "trj_flash75", "Content": "Build LLM Observability and RAG in 10 lines of Code using BeyondLLM and Phoenix. Observability helps us monitor key metrics such as latency, the number of tokens, prompts, and the cost per request. Save your OpenAI API cost by monitoring and tracking your GPT request made for each RAG query: https://www.youtube.com/watch?v=VCQ0Cw-GF2U"},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I’m looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "Lua-style code blocks for Python", "Author": "guangrei", "Content": "Python is a great programming language, but sometimes the indentation can be terrible for some people (especially people with visual impairments). So i created Lython. What the project does: Lython replacing the Python indentation to lua-style code blocks. this is example lython code def test(num)\n    for i in range(num) do\n        if i == 0 then\n            print(\"zero\")\n        elif i % 2 == 1 then\n            print(\"odd\")\n        else\n            print(\"even\")\n        end # if else\n    end # for\nend # def\n\ntest(10)"},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "Why do you do your work??", "Author": "MathematicianTop9745", "Content": "What do you think are the factors that motivate a developer? Do you think that creativity is a factor that can influence motivation or productivity? Share your experiences! For this purpose I am also conducting a survey on motivation in IT developers. I have produced a questionnaire aimed exclusively at those who already work in this sector and which takes only two minutes to fill out: https://forms.gle/pkqfMRMjFrN6TmZN6 You would be a great help in collecting data if you could fill it out. Thank you all so much in advance 🫶🏼"},
{"Title": "Global Silent Disco Live Broadcasting app", "Author": "HapHeirohFlow", "Content": "Import necessary libraries\nfrom flask import Flask, render_template, request, redirect, url_for, session from flask_socketio import SocketIO, emit, join_room, leave_room from flask_sqlalchemy import SQLAlchemy from werkzeug.security import generate_password_hash, check_password_hash from datetime import datetime import os\nInitialize the app and related components"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "An ugly spot of the Python language?", "Author": "LunarCantaloupe", "Content": "I'm not sure exactly what the related language feature would be, but I believe Python lacks the ability to nicely leverage the case when a variable name matches a keyword argument name it is used for, in a way that TypeScript does really well. For example: one_thing = X \n\n... \n\nother_thing = X \n\n... \n\nsome_function(one_thing=one_thing, other_thing=other_thing)"},
{"Title": "Flappy Berd in PyQt", "Author": "GhnQuix", "Content": "Hello there What my project does: I’m excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! 😃 As Richard Watterson once said: \"10/10 game, would play again.\" Target Audience This game is for anyone who’s bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience. Comparison Think of it as a faithful recreation of Flappy Bird with a PyQt twist."},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "I have made an open source library for logging errors / messages :)", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file. Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience"},
{"Title": "Just released my first Python package: Melodica Notes 🎶", "Author": "bettercallsenna", "Content": "Hey everyone! I’m excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics. What My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players. Target Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it’s fully functional, I consider it an evolving tool and welcome contributions to enhance its features."},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Author": "jcoelho93", "Content": "What my project does: It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc. Target Audience Developers mostly, I guess Comparison I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line. Code: Here's the GitHub repo https://github.com/jcoelho93/steer"},
{"Title": "Async Python adoption?", "Author": "mcharytoniuk", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python? I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "I tried to explain python imports", "Author": "MaKaNuReddit", "Content": "When I was a beginner (or maybe still I am) I struggled a lot with pythons import function. Over the years I went over different approaches, how to handle imports and ended up using mostly exclusive poetry. I've met a lot of people struggling the same way, bit always could just explain very shortly my experience. I've now decided to write it down as a scenario, where I can show and explain my pitfalls: https://github.com/MaKaNu/pyimport-explained"},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can’t build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "how about one-line try-except statement ?", "Author": "17thCurlyBrace", "Content": "is there a proposal for a shorter exception handling syntax for those very frequent cases where a library function doesn't return \"error value\" like str.index ? something like instead of : try:\n    i = my_str.index(\"sub\", st, en)\nexcept ValueError: # if \"sub\" has not been found\n    pass\nelse:\n    # do stuff with i (note that i usually want independent error handling here)"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast™️ because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience 😎 Commands are in preview so expect missing stuff."},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC…), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone 👋 The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and cliché, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboard🗒️. I created a script to automate Bing searches for reward generation\n👍 Excellent command line experience.\n🙂 User friendly."},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you’re working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "Tuples Are Underrated! List vs Tuple 🐍", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ☺️ https://youtu.be/-sO4FG6W4ho"},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, …)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Author": "jgloewen", "Content": "The Python Shiny library is a framework for building interactive web applications in Python. Developed by RStudio, the same team behind the Shiny library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills. All that is needed is knowledge of the Shiny user interface Application Programming Interface (API). Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone."},
{"Title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies", "Author": "ManyInterests", "Content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are yanked. The important effect this has had is anyone who may have defined their requirements as something like PySimpleGUI<5 or PySimpleGUI==4.x.x for a now-deleted version, your installations will fail with a message like:"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tach - enforce module boundaries + deps, now in Rust 🦀", "Author": "the1024", "Content": "https://github.com/gauge-sh/tach Hey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\nRe-wrote the core in Rust, leading to a ~19x speed up on large repos\nRe-worked the interface, and added a TUI to let you interactively declare modules\nWe built Tach to solve the “ball of mud” problem that we’ve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!"},
{"Title": "New Lands RPG (Play testers welcome)", "Author": "Littlebudddy_321", "Content": "Good \"time of day\" my fellow peeps What my project does: I wanted to share my Python game I've been slowly working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you... Target Audience: I'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax..."},
{"Title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite", "Author": "JaggedParadigm", "Content": "What My Project Does: Moonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\necstatic: price too low so they are extra happy\ncontent: price is what they were expecting,\nsad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period"},
{"Title": "Mesop, open-source Python UI framework used at Google to quickly build delightful web apps", "Author": "wwwillchen", "Content": "What my project does: I’m excited to share about Mesop - a new, open-source Python UI framework that enables Python developers to quickly build delightful web apps in a scalable way. A small team of us at Google have been developing Mesop as an unofficial 20% project for the past few months. A wide range of research and product teams at Google have been using it to rapidly build internal apps and we’ve gotten a lot of positive feedback internally so now we’re looking to get feedback from the open-source community. Target audience: Python developers looking to build AI demos & internal apps."},
{"Title": "Dask DataFrame is Fast Now!", "Author": "phofl93", "Content": "My colleagues and I have been working on making Dask fast. It’s been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload). I wrote a blog post on what we did: https://docs.coiled.io/blog/dask-dataframe-is-fast.html Really, this came down not to doing one thing really well, but doing lots of small things “pretty good”. Some of the most prominent changes include:\nApache Arrow support in pandas"},
{"Title": "Automate your WordPress new-page creation with Python", "Author": "EngineeringFit5761", "Content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin). It's a simple app, but has great expansion potential and it's really easy to use. To start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page. Run the program, add sections, choose your desired structure, and select the right widgets for your content. Once you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)"},
{"Title": "Granian 1.4 is out", "Author": "gi0baro", "Content": "Granian – the Rust HTTP server for Python applications – 1.4 was released! Blog post: https://polar.sh/emmett-framework/posts/granian-1-4 Release details: https://github.com/emmett-framework/granian/releases/tag/v1.4.0 Repo: https://github.com/emmett-framework/granian"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "My little ChatGPT-Multimodal Server Starter", "Author": "TwistedMinda", "Content": "Please check out my Desktoppy Server. What My Project Does It allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's. It uses ollama internally so you can use all the open-source Models but by default it's using:\nLLama3 for text-generation\nLLava for image recognition\nStable Diffusion 2 for image generation"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation", "Author": "pdcz", "Content": "Hi everyone, I'd like to share couple of news regarding my personal project:\nNew documentation written in Ludic showcasing it's capabilities: https://getludic.dev/docs/\nNew section regrading Layouts inspired from the Every Layout Book: https://getludic.dev/catalog/layouts\nCookiecutter template to get quickly started: https://github.com/paveldedik/ludic-template\nI have a lot of plans with this project and I'd appreciate any feedback. About The Project Ludic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components."},
{"Title": "NumPy 2.0.0 is the first major release since 2006.", "Author": "commandlineluser", "Content": "NumPy 2.0.0 is the first major release since 2006.\nhttps://github.com/numpy/numpy/releases/tag/v2.0.0\nhttps://numpy.org/devdocs/release/2.0.0-notes.html\nhttps://numpy.org/devdocs/numpy_2_0_migration_guide.html"},
{"Title": "Python's many command-line utilities", "Author": "treyhunner", "Content": "Python 3.12 comes bundled with 50 command-line tools. For example, python -m webbrowser http://example.com opens a web browser, python -m sqlite3 launches a sqlite prompt, and python -m ast my_file.py shows the abstract syntax tree for a given Python file. I've dug into each of them and categorized them based on their purpose and how useful they are. Python's many command-line tools"},
{"Title": "Advise on choosing UI technology with Python", "Author": "green9cactus", "Content": "I am new to python and currently working on simple 3 layer web application -\nfrontend - ?\nbackend API to fetch data from DB - python\nDB - cloud\nThis application has main intention to fetch data from DB, display graphs , table format data etc. also perform some combination analysis of data and show on UI. Which less complex and stable technology I should prefer for frontend ? python flask, Bulma, Mesop by google or any other ? Thank you."},
{"Title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa", "Author": "Jaeger1987", "Content": "What My Project Does Hello everyone! I've just released a new Python package, notion2pandas, which allows you to import a Notion database into a pandas dataframe with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code. Target Audience Whether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding! 🔗 GitLab repo: https://gitlab.com/Jaeger87/notion2pandas Key Features"},
{"Title": "Efficient Resource Management in Python: A Guide to Using Context Managers", "Author": "ImmediateDecision320", "Content": "Managing resources efficiently in Python is crucial to prevent memory leaks and ensure optimal performance. One of the best ways to handle resource allocation and deallocation is through the use of context managers. In my latest blog post, I dive deep into the concept of context managers, their significance, and how to implement them using both the built-in `with` statement and the `contextlib` module. Here's a brief overview of what you'll find in the article: Understanding Context Managers: What They Are: Context managers help manage resources such as file handling and database connections by setting up a temporary runtime context and cleaning up after the operations are completed."},
{"Title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it 🤞", "Author": "VoyZan", "Content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts: tl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in this Gist.\nProblem\nRequest rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of counter. Multiprocessing is not great at having a single shared variable."},
{"Title": "Advice for creating 3D modelling program", "Author": "Latter-History-8053", "Content": "I am creating a Python program which models 3D shapes so that they can be saved and or interacted with (i.e. rotated). The process currently takes a while to render shapes consisting of multiple materials. The libraries being implemented are currently matplotlib and numpy. What would you advise for improving the rendering process (library choice etc)?"},
{"Title": "Using python for static typing benefits", "Author": "britishbanana", "Content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced. I'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things."},
{"Title": "Privacy-first natural language to SQL + charting + editing app", "Author": "anthony2261", "Content": "What my project does\nDataLine is an AI-driven open source and privacy-first platform for data exploration. Your data is accessed using your device and stored on your device. In simple terms, it's an interface that allows you to \"chat\" with your database/dataset. You can ask it explorative questions, e.g. \"what potential insights can I find in this data\", or specific questions \"who are my top five customers in the past 3 months\", and it will gladly oblige. The backend is written using FastAPI, and the frontend uses Reactjs."},
{"Title": "PyODMongo an ODM for MongoDB", "Author": "maurinhoandre", "Content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\nBuilt on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents."},
{"Title": "pieshell: python for shell scripting and as an interactive shell", "Author": "Severe_Inflation5326", "Content": "Pieshell is a Python shell environment that combines the expressiveness of shell pipelines with the power of python iterators. It can be used in two major ways:\nAs an interactive shell replacing e.g. bash\nAs an ordinary python module replacing e.g. subprocess.Popen\nObligatory example: 140:/home/oven/pieshell >>> for x in ls(-a) | tr(\"s\", \"S\"):\n...   if x.endswith('.py'):\n...      print x\n... \nSetup.py"},
{"Title": "Tutorial on Surprisingly Simple Python Streamlit Dashboards", "Author": "jgloewen", "Content": "Streamlit is becoming an increasingly a popular framework for data visualization prototyping with Python. The Streamlit framework saves time, effort, and reduces the complexity traditionally associated with crafting maps and charts.Particularly if we approach application development with a modular approach. Starting simple, let’s put together 4 specific examples that leverage Streamlit for interactive data visualization:\nA global choropleth map for a dataset for a specific year."},
{"Title": "Converting tkinter (ttkbootstrap) Python script to a Windows executable using Pyinstaller", "Author": "xanthium_in", "Content": "In this tutorial, we will explore the process of converting a Python script written with tkinter and ttkbootstrap into a standalone Windows executable (.exe) using PyInstaller Link to the full tutorial on how to convert Python tkinter script to Windows executable"},
{"Title": "I created a script to automatically patch revanced", "Author": "ltlbwu", "Content": "What My Project Does AutoReVanced is a Python script that automates downloading and patching APKs using ReVanced patches from ApkPure. It's perfect for anyone wanting to patch their revanced app. Target Audience Suitable for a fun side project or hobbyists, AutoReVanced is designed for anyone wanting to customize Android apps with ReVanced patches. Comparison Unlike alternatives, AutoReVanced is automatic. GitHub: autorevanced"},
{"Title": "What to learn on phone?", "Author": "zJqson", "Content": "My workplace gives me a lot of phone time, I can be on my phone while working so what should I learn? Im 19, I already have a basic understanding of python and the fundamentals, etc. All the popular modules like math, random, datetime, I already learned. I was using python editor on phone and learning panda was pretty ez because I just make dataframe with manually made dictionary instead of excel and use print instead of outputting to csv, so there was little work on PC. But modules like tkinter cant really learn on phone cuz I need to see GUI and use file paths and stuff unless I have a surface pro."},
{"Title": "abstract-factories - a simple framework for content creation pipelines", "Author": "HistoricalCrow", "Content": "Hey all, my project abstract_factories is up to gauge interest and primarily feedback. The design goal is to make it easier to iterate on typical Content Creation pipeline tools (tool dev, rigging, validation, asset management etc) with a flexible framework to provide convenience, open and simple design and no dependencies (currently). It's an approach I've used a lot over the years and found it pretty versatile in production across numerous projects. Key features\nAuto-registration of matching items (types or instances) from any given path or python module."},
{"Title": "Get Started With Google Colab", "Author": "elliesleight", "Content": "Transitioning into the world of machine learning, I've found Google Colab to be awesome and I wanted to share that with other Python users! What is Google Colab?\nGoogle Colab is a product from Google Research that allows anyone to write and execute Python code through the browser! It's especially well-suited for machine learning, data analysis, and educational purposes. To get started with Google Colab:\nhttps://www.marqo.ai/blog/getting-started-with-google-colab-a-beginners-guide Happy coding!"},
{"Title": "Malicious VSCode Extensions Uncovered: Beware my fellow programmers", "Author": "nicanorflavier", "Content": "Malicious VSCode Extensions Uncovered: Millions of Installs at Risk! Beware my fellow programmers, make sure you review your VSCode extensions https://www.bleepingcomputer.com/news/security/malicious-vscode-extensions-with-millions-of-installs-discovered/"},
{"Title": "Have anyone tried google/mesop", "Author": "codes_astro", "Content": "Google Open sourced Mesop. Mesop is a Python-based UI framework that allows you to rapidly build web apps. Used at Google for rapid internal app development similar to Streamlit. find more here"},
{"Title": "Api for odds and results on prop bets? ", "Author": "bimpsmacket", "Content": "Does anyone know of a reilabel API(preferably free) that offers prp bets for major sports-(NFL, NBA, MLB), i need the odds and results too."},
{"Title": "Showcase: pdf-to-podcast.com -- Convert PDF's to podcast episodes. Free and open-source :)", "Author": "knowsuchagency", "Content": "What My Project Does Upload any PDF and have it converted into a podcast episode with two or more speakers discussing its contents. https://github.com/knowsuchagency/pdf-to-podcast Target Audience Anyone, but other developers in-particular. The code is open-source on GitHub and there's a link to the source on https://pdf-to-podcast.com. I want the project to serve as an illustrative example of how to build useful things on top of LLMs with relatively little code. Comparison I just made this for fun. It's possible there are other similar projects"},
{"Title": "I created Yu-Gi-Oh! Power of Chaos save handler", "Author": "wildpantz", "Content": "Quick backstory: Upper floor of my house is sort of a man-cave until we decorate it, so during this time I have two PCs which I use to play games with a friend when we have extra time to waste. The other day I remembered the game mentioned in the title and we had lots of fun playing it (there's 3 different games in this series). I decided I'd transfer the save file to my main PC so I can play when he's not visiting and I quickly learned it's an extremely annoying process to transfer save files across different PCs. Long story short, you need to find a proper registry key (which isn't always located at same spot for some reason) and you need to locate a system.dat file also located in a folder that isn't always in the same place. This process gets tedious pretty quick, so I decided to use the power of Python to make my life easier."},
{"Title": "Tutorial: A Timely Python Multi-page Streamlit Application on Olympic Medal Winning Countries", "Author": "jgloewen", "Content": "Streamlit is an open-source app framework that allows data scientists and analysts to create interactive web applications with ease. Using just a few lines of Python, you can turn data scripts into shareable web apps. And combined with a data visualization library like Plotly, you can create beautiful charts and maps with only a few lines of code. In this article, let me step you through how to use Streamlit to create a multi-page interactive application that visualizes Olympic medal data. The application will have three pages:"},
{"Title": "Learning Python coming from a JVM background", "Author": "Human_Dependent6814", "Content": "I have 4 years worth JVM languages (Java, Kotlin) and have a need to learn some Python. What's a good resource to get up to speed quickly with idiomatic Python?"},
{"Title": "I made a cool calendar app with PyQt6", "Author": "Specialist-Arachnid6", "Content": "Tempus is a calendar with horoscopes, reminders, etc made with PyQt6\nWhat my Project does?\nTempus is a desktop-based calendar management application built with PyQt6, allowing users to manage their todos, reminders, and special dates efficiently. It offers features like adding, editing, and deleting tasks and reminders, as well as marking dates as special. Tempus ensures users stay organized and never miss important events. Plus, it shows you how many days are remaining until a special day in the dashboard."},
{"Title": "Video / Image acquisition from microscope", "Author": "IllTicket9067", "Content": "Dear Fellow Redittors, I am working on a medical / healthcare AI solution focused on cell structure analysis, and other related studies or blood composition for cancer treatment related research. I use python, anaconda, spyder etc and I am from AI background, a techie from various fields such as defence, IoT, healthcare etc. I am aware of my python libraries and modules for microscopes, camera view over the top eye pieces etc. But I am trying to find out suitable microscopes with camera, hdmi output, driver / device servers etc which can connect to the python environment and pull the live video feed for real time diagnostics and related activities based on the model injection directly into the code."},
{"Title": "Better-OrderedMultiDict - a fast pure-pyton implementation of an ordered multi-valued dictionary.", "Author": "JoachimCoenen", "Content": "What my project does\nIt provides a fast pure-python implementation of an ordered, multi-valued dictionary.\nTarget audience\nPython developers that need this kind of specialized functionality. This can be used in production. It has no dependencies. The code is unit-tested (almost fully, I'm working on it) It requires Python 3.12+"},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Have you tried the LogiTyme package on PyPI?", "Author": "lmas3009", "Content": "A Python package that tracks the time spent on each function, custom function, and the entire Python code. It also provides an analysis report and suggestions for running the code in the cloud. Python Package link: https://pypi.org/project/LogiTyme/ Share your feedback below"},
{"Title": "Sending SMS through GoIP GSM gateway using HTTP API", "Author": "riklaunim", "Content": "GoIP-1 is a simple network device that can be used in VoIP-GSM applications or as a local SMS gateway. For SMS there are services like Twilio but they can get expensive for regions far away from main telecom infrastructure (like islands) and this device can help. You can find the device on Aliexpress and similar sites. The base model GoIP-1 has one SIM slot, while there are bigger ones for near industrial amount of SIM slots (and it gets very expensive). The device has a web panel and simple HTTP GET endpoints for sending SMS so it can be scripted with Python or other programming language."},
{"Title": "Built a RAG ( Retrieval-Augmented Generation ) model using Gemini Api.", "Author": "inobody_somebody", "Content": "what my project does\nThis project is built to solve the issue of LLM unable to produce relevant answers for information in a particular context. uses the information to train the model and stored it in a database and uses this database to get relevant answers from the Model.\nTarget audiance\nThis project is for people who want to train a LLM on a particular piece of information."},
{"Title": "Tutoring school backend FastApi -Google Calendar Review", "Author": "Itsaliensbro453", "Content": "Hello everyone ,i Made a tutoring School backend using fastapi and Google calendar. Im completly selftaught, learning after work so i dont have anybody to ask for directions🥲 Let me know what you think ,much appreciated ! 😁 https://github.com/Ablasko32/Tutoring_school_system-FastApi-GoogleCalendarApi"},
{"Title": "LLM Observability and RAG in just 10 lines of Code", "Author": "trj_flash75", "Content": "Build LLM Observability and RAG in 10 lines of Code using BeyondLLM and Phoenix. Observability helps us monitor key metrics such as latency, the number of tokens, prompts, and the cost per request. Save your OpenAI API cost by monitoring and tracking your GPT request made for each RAG query: https://www.youtube.com/watch?v=VCQ0Cw-GF2U"},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I’m looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "Tuples Are Underrated! List vs Tuple 🐍", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ☺️ https://youtu.be/-sO4FG6W4ho"},
{"Title": "Lua-style code blocks for Python", "Author": "guangrei", "Content": "Python is a great programming language, but sometimes the indentation can be terrible for some people (especially people with visual impairments). So i created Lython. What the project does: Lython replacing the Python indentation to lua-style code blocks. this is example lython code def test(num)\n    for i in range(num) do\n        if i == 0 then\n            print(\"zero\")\n        elif i % 2 == 1 then\n            print(\"odd\")\n        else\n            print(\"even\")\n        end # if else\n    end # for\nend # def\n\ntest(10)"},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, …)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "Why do you do your work??", "Author": "MathematicianTop9745", "Content": "What do you think are the factors that motivate a developer? Do you think that creativity is a factor that can influence motivation or productivity? Share your experiences! For this purpose I am also conducting a survey on motivation in IT developers. I have produced a questionnaire aimed exclusively at those who already work in this sector and which takes only two minutes to fill out: https://forms.gle/pkqfMRMjFrN6TmZN6 You would be a great help in collecting data if you could fill it out. Thank you all so much in advance 🫶🏼"},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "Global Silent Disco Live Broadcasting app", "Author": "HapHeirohFlow", "Content": "Import necessary libraries\nfrom flask import Flask, render_template, request, redirect, url_for, session from flask_socketio import SocketIO, emit, join_room, leave_room from flask_sqlalchemy import SQLAlchemy from werkzeug.security import generate_password_hash, check_password_hash from datetime import datetime import os\nInitialize the app and related components"},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Author": "jgloewen", "Content": "The Python Shiny library is a framework for building interactive web applications in Python. Developed by RStudio, the same team behind the Shiny library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills. All that is needed is knowledge of the Shiny user interface Application Programming Interface (API). Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies", "Author": "ManyInterests", "Content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are yanked. The important effect this has had is anyone who may have defined their requirements as something like PySimpleGUI<5 or PySimpleGUI==4.x.x for a now-deleted version, your installations will fail with a message like:"},
{"Title": "An ugly spot of the Python language?", "Author": "LunarCantaloupe", "Content": "I'm not sure exactly what the related language feature would be, but I believe Python lacks the ability to nicely leverage the case when a variable name matches a keyword argument name it is used for, in a way that TypeScript does really well. For example: one_thing = X \n\n... \n\nother_thing = X \n\n... \n\nsome_function(one_thing=one_thing, other_thing=other_thing)"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "Tach - enforce module boundaries + deps, now in Rust 🦀", "Author": "the1024", "Content": "https://github.com/gauge-sh/tach Hey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\nRe-wrote the core in Rust, leading to a ~19x speed up on large repos\nRe-worked the interface, and added a TUI to let you interactively declare modules\nWe built Tach to solve the “ball of mud” problem that we’ve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "New Lands RPG (Play testers welcome)", "Author": "Littlebudddy_321", "Content": "Good \"time of day\" my fellow peeps What my project does: I wanted to share my Python game I've been slowly working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you... Target Audience: I'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax..."},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite", "Author": "JaggedParadigm", "Content": "What My Project Does: Moonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\necstatic: price too low so they are extra happy\ncontent: price is what they were expecting,\nsad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "NumPy 2.0.0 is the first major release since 2006.", "Author": "commandlineluser", "Content": "NumPy 2.0.0 is the first major release since 2006.\nhttps://github.com/numpy/numpy/releases/tag/v2.0.0\nhttps://numpy.org/devdocs/release/2.0.0-notes.html\nhttps://numpy.org/devdocs/numpy_2_0_migration_guide.html"},
{"Title": "Mesop, open-source Python UI framework used at Google to quickly build delightful web apps", "Author": "wwwillchen", "Content": "What my project does: I’m excited to share about Mesop - a new, open-source Python UI framework that enables Python developers to quickly build delightful web apps in a scalable way. A small team of us at Google have been developing Mesop as an unofficial 20% project for the past few months. A wide range of research and product teams at Google have been using it to rapidly build internal apps and we’ve gotten a lot of positive feedback internally so now we’re looking to get feedback from the open-source community. Target audience: Python developers looking to build AI demos & internal apps."},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "Advise on choosing UI technology with Python", "Author": "green9cactus", "Content": "I am new to python and currently working on simple 3 layer web application -\nfrontend - ?\nbackend API to fetch data from DB - python\nDB - cloud\nThis application has main intention to fetch data from DB, display graphs , table format data etc. also perform some combination analysis of data and show on UI. Which less complex and stable technology I should prefer for frontend ? python flask, Bulma, Mesop by google or any other ? Thank you."},
{"Title": "Dask DataFrame is Fast Now!", "Author": "phofl93", "Content": "My colleagues and I have been working on making Dask fast. It’s been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload). I wrote a blog post on what we did: https://docs.coiled.io/blog/dask-dataframe-is-fast.html Really, this came down not to doing one thing really well, but doing lots of small things “pretty good”. Some of the most prominent changes include:\nApache Arrow support in pandas"},
{"Title": "I tried to explain python imports", "Author": "MaKaNuReddit", "Content": "When I was a beginner (or maybe still I am) I struggled a lot with pythons import function. Over the years I went over different approaches, how to handle imports and ended up using mostly exclusive poetry. I've met a lot of people struggling the same way, bit always could just explain very shortly my experience. I've now decided to write it down as a scenario, where I can show and explain my pitfalls: https://github.com/MaKaNu/pyimport-explained"},
{"Title": "Automate your WordPress new-page creation with Python", "Author": "EngineeringFit5761", "Content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin). It's a simple app, but has great expansion potential and it's really easy to use. To start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page. Run the program, add sections, choose your desired structure, and select the right widgets for your content. Once you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)"},
{"Title": "Efficient Resource Management in Python: A Guide to Using Context Managers", "Author": "ImmediateDecision320", "Content": "Managing resources efficiently in Python is crucial to prevent memory leaks and ensure optimal performance. One of the best ways to handle resource allocation and deallocation is through the use of context managers. In my latest blog post, I dive deep into the concept of context managers, their significance, and how to implement them using both the built-in `with` statement and the `contextlib` module. Here's a brief overview of what you'll find in the article: Understanding Context Managers: What They Are: Context managers help manage resources such as file handling and database connections by setting up a temporary runtime context and cleaning up after the operations are completed."},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "Advice for creating 3D modelling program", "Author": "Latter-History-8053", "Content": "I am creating a Python program which models 3D shapes so that they can be saved and or interacted with (i.e. rotated). The process currently takes a while to render shapes consisting of multiple materials. The libraries being implemented are currently matplotlib and numpy. What would you advise for improving the rendering process (library choice etc)?"},
{"Title": "Granian 1.4 is out", "Author": "gi0baro", "Content": "Granian – the Rust HTTP server for Python applications – 1.4 was released! Blog post: https://polar.sh/emmett-framework/posts/granian-1-4 Release details: https://github.com/emmett-framework/granian/releases/tag/v1.4.0 Repo: https://github.com/emmett-framework/granian"},
{"Title": "how about one-line try-except statement ?", "Author": "17thCurlyBrace", "Content": "is there a proposal for a shorter exception handling syntax for those very frequent cases where a library function doesn't return \"error value\" like str.index ? something like instead of : try:\n    i = my_str.index(\"sub\", st, en)\nexcept ValueError: # if \"sub\" has not been found\n    pass\nelse:\n    # do stuff with i (note that i usually want independent error handling here)"},
{"Title": "Privacy-first natural language to SQL + charting + editing app", "Author": "anthony2261", "Content": "What my project does\nDataLine is an AI-driven open source and privacy-first platform for data exploration. Your data is accessed using your device and stored on your device. In simple terms, it's an interface that allows you to \"chat\" with your database/dataset. You can ask it explorative questions, e.g. \"what potential insights can I find in this data\", or specific questions \"who are my top five customers in the past 3 months\", and it will gladly oblige. The backend is written using FastAPI, and the frontend uses Reactjs."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast™️ because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience 😎 Commands are in preview so expect missing stuff."},
{"Title": "pieshell: python for shell scripting and as an interactive shell", "Author": "Severe_Inflation5326", "Content": "Pieshell is a Python shell environment that combines the expressiveness of shell pipelines with the power of python iterators. It can be used in two major ways:\nAs an interactive shell replacing e.g. bash\nAs an ordinary python module replacing e.g. subprocess.Popen\nObligatory example: 140:/home/oven/pieshell >>> for x in ls(-a) | tr(\"s\", \"S\"):\n...   if x.endswith('.py'):\n...      print x\n... \nSetup.py"},
{"Title": "My little ChatGPT-Multimodal Server Starter", "Author": "TwistedMinda", "Content": "Please check out my Desktoppy Server. What My Project Does It allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's. It uses ollama internally so you can use all the open-source Models but by default it's using:\nLLama3 for text-generation\nLLava for image recognition\nStable Diffusion 2 for image generation"},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC…), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "Converting tkinter (ttkbootstrap) Python script to a Windows executable using Pyinstaller", "Author": "xanthium_in", "Content": "In this tutorial, we will explore the process of converting a Python script written with tkinter and ttkbootstrap into a standalone Windows executable (.exe) using PyInstaller Link to the full tutorial on how to convert Python tkinter script to Windows executable"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation", "Author": "pdcz", "Content": "Hi everyone, I'd like to share couple of news regarding my personal project:\nNew documentation written in Ludic showcasing it's capabilities: https://getludic.dev/docs/\nNew section regrading Layouts inspired from the Every Layout Book: https://getludic.dev/catalog/layouts\nCookiecutter template to get quickly started: https://github.com/paveldedik/ludic-template\nI have a lot of plans with this project and I'd appreciate any feedback. About The Project Ludic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components."},
{"Title": "I created a script to automatically patch revanced", "Author": "ltlbwu", "Content": "What My Project Does AutoReVanced is a Python script that automates downloading and patching APKs using ReVanced patches from ApkPure. It's perfect for anyone wanting to patch their revanced app. Target Audience Suitable for a fun side project or hobbyists, AutoReVanced is designed for anyone wanting to customize Android apps with ReVanced patches. Comparison Unlike alternatives, AutoReVanced is automatic. GitHub: autorevanced"},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "Python's many command-line utilities", "Author": "treyhunner", "Content": "Python 3.12 comes bundled with 50 command-line tools. For example, python -m webbrowser http://example.com opens a web browser, python -m sqlite3 launches a sqlite prompt, and python -m ast my_file.py shows the abstract syntax tree for a given Python file. I've dug into each of them and categorized them based on their purpose and how useful they are. Python's many command-line tools"},
{"Title": "What to learn on phone?", "Author": "zJqson", "Content": "My workplace gives me a lot of phone time, I can be on my phone while working so what should I learn? Im 19, I already have a basic understanding of python and the fundamentals, etc. All the popular modules like math, random, datetime, I already learned. I was using python editor on phone and learning panda was pretty ez because I just make dataframe with manually made dictionary instead of excel and use print instead of outputting to csv, so there was little work on PC. But modules like tkinter cant really learn on phone cuz I need to see GUI and use file paths and stuff unless I have a surface pro."},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "abstract-factories - a simple framework for content creation pipelines", "Author": "HistoricalCrow", "Content": "Hey all, my project abstract_factories is up to gauge interest and primarily feedback. The design goal is to make it easier to iterate on typical Content Creation pipeline tools (tool dev, rigging, validation, asset management etc) with a flexible framework to provide convenience, open and simple design and no dependencies (currently). It's an approach I've used a lot over the years and found it pretty versatile in production across numerous projects. Key features\nAuto-registration of matching items (types or instances) from any given path or python module."},
{"Title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa", "Author": "Jaeger1987", "Content": "What My Project Does Hello everyone! I've just released a new Python package, notion2pandas, which allows you to import a Notion database into a pandas dataframe with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code. Target Audience Whether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding! 🔗 GitLab repo: https://gitlab.com/Jaeger87/notion2pandas Key Features"},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "Get Started With Google Colab", "Author": "elliesleight", "Content": "Transitioning into the world of machine learning, I've found Google Colab to be awesome and I wanted to share that with other Python users! What is Google Colab?\nGoogle Colab is a product from Google Research that allows anyone to write and execute Python code through the browser! It's especially well-suited for machine learning, data analysis, and educational purposes. To get started with Google Colab:\nhttps://www.marqo.ai/blog/getting-started-with-google-colab-a-beginners-guide Happy coding!"},
{"Title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it 🤞", "Author": "VoyZan", "Content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts: tl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in this Gist.\nProblem\nRequest rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of counter. Multiprocessing is not great at having a single shared variable."},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "Malicious VSCode Extensions Uncovered: Beware my fellow programmers", "Author": "nicanorflavier", "Content": "Malicious VSCode Extensions Uncovered: Millions of Installs at Risk! Beware my fellow programmers, make sure you review your VSCode extensions https://www.bleepingcomputer.com/news/security/malicious-vscode-extensions-with-millions-of-installs-discovered/"},
{"Title": "Using python for static typing benefits", "Author": "britishbanana", "Content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced. I'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things."},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "Have anyone tried google/mesop", "Author": "codes_astro", "Content": "Google Open sourced Mesop. Mesop is a Python-based UI framework that allows you to rapidly build web apps. Used at Google for rapid internal app development similar to Streamlit. find more here"},
{"Title": "PyODMongo an ODM for MongoDB", "Author": "maurinhoandre", "Content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\nBuilt on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents."},
{"Title": "Building AI Text-to-Video Model From Scratch", "Author": "FareedKhan557", "Content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos."},
{"Title": "Api for odds and results on prop bets? ", "Author": "bimpsmacket", "Content": "Does anyone know of a reilabel API(preferably free) that offers prp bets for major sports-(NFL, NBA, MLB), i need the odds and results too."},
{"Title": "Tutorial on Surprisingly Simple Python Streamlit Dashboards", "Author": "jgloewen", "Content": "Streamlit is becoming an increasingly a popular framework for data visualization prototyping with Python. The Streamlit framework saves time, effort, and reduces the complexity traditionally associated with crafting maps and charts.Particularly if we approach application development with a modular approach. Starting simple, let’s put together 4 specific examples that leverage Streamlit for interactive data visualization:\nA global choropleth map for a dataset for a specific year."},
{"Title": "My Thoughts on Python in Excel", "Author": "fzumstein", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel Here’s the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn’t suitable for Python beginners nor for interactive data analysis"},
{"Title": "Showcase: pdf-to-podcast.com -- Convert PDF's to podcast episodes. Free and open-source :)", "Author": "knowsuchagency", "Content": "What My Project Does Upload any PDF and have it converted into a podcast episode with two or more speakers discussing its contents. https://github.com/knowsuchagency/pdf-to-podcast Target Audience Anyone, but other developers in-particular. The code is open-source on GitHub and there's a link to the source on https://pdf-to-podcast.com. I want the project to serve as an illustrative example of how to build useful things on top of LLMs with relatively little code. Comparison I just made this for fun. It's possible there are other similar projects"},
{"Title": "Self updating spreadsheet with popular questions from Ask Reddit and summarized answers using OpenAI", "Author": "DouweOsinga", "Content": "What My Project Does\nThis is a small Python script that runs inside a Google Sheet by way of the Python add-on. It uses the reddit api to fetch posts from Ask Reddit twice daily. For posts with enough upvotes, it uses the OpenAI API to summarize an answer to the question based on the comments. I then inserts any new questions and their answers into the spreadsheet and uses the Twitter APIto also post the answer to Twitter I mean X. Should be interesting to anybody looking to connect (a subset) of those APIs."},
{"Title": "GUI Recommendations", "Author": "Mrkrabsstalker", "Content": "I built a Matlab app for my grandfather's business with my student version. I need to make it accessible on his employees computers. Matlab comiler seems not worth it, so I was wondering if I translated it into a python GUI which one would make it easy to distribute for preferably a low to zero cost."},
{"Title": "I created Yu-Gi-Oh! Power of Chaos save handler", "Author": "wildpantz", "Content": "Quick backstory: Upper floor of my house is sort of a man-cave until we decorate it, so during this time I have two PCs which I use to play games with a friend when we have extra time to waste. The other day I remembered the game mentioned in the title and we had lots of fun playing it (there's 3 different games in this series). I decided I'd transfer the save file to my main PC so I can play when he's not visiting and I quickly learned it's an extremely annoying process to transfer save files across different PCs. Long story short, you need to find a proper registry key (which isn't always located at same spot for some reason) and you need to locate a system.dat file also located in a folder that isn't always in the same place. This process gets tedious pretty quick, so I decided to use the power of Python to make my life easier."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tutorial: A Timely Python Multi-page Streamlit Application on Olympic Medal Winning Countries", "Author": "jgloewen", "Content": "Streamlit is an open-source app framework that allows data scientists and analysts to create interactive web applications with ease. Using just a few lines of Python, you can turn data scripts into shareable web apps. And combined with a data visualization library like Plotly, you can create beautiful charts and maps with only a few lines of code. In this article, let me step you through how to use Streamlit to create a multi-page interactive application that visualizes Olympic medal data. The application will have three pages:"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Kwargs appreciation thread", "Author": "TheRealFrostMana", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though! I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go. Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean: some_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)"},
{"Title": "Learning Python coming from a JVM background", "Author": "Human_Dependent6814", "Content": "I have 4 years worth JVM languages (Java, Kotlin) and have a need to learn some Python. What's a good resource to get up to speed quickly with idiomatic Python?"},
{"Title": "Suck at Automate the Boring Stuff - Need Assurance", "Author": "COOKIEMONSTER-315", "Content": "I’ve been working hard at learning Python this past year and I’ve been doing ok at it. I’ve used a lot of the commonly recommended books and YouTube channels and like them all except for some reason, I still struggle like crazy with the practice problems in Automate the Boring Stuff. Is this a sign that I still suck a Python, or are the practice problems at the end of the chapters known to be difficult? Looking for a sanity check in my progress basically. Automate The Boring Stuff"},
{"Title": "1BRC solution using CPython", "Author": "pappuks", "Content": "What My Project Does: I finally got some time to attempt the 1 Billion Row Challenge (1BRC) (https://www.morling.dev/blog/one-billion-row-challenge/) where we are supposed to process a file with 1 billion records of temperature values for cities and print a sorted list with min, max and mean temperature per city. I am a sucker for optimization. So when I heard about 1BRC I got intrigued and in the last few days started experimenting with python implementations. I achieved my goal and implemented the fastest implementation running on CPython, without any external libraries. My motivation for CPython was so that I can apply any of the learning's in my day to day work, as I don't see us moving to PyPy any time sooner."},
{"Title": "I made a cool calendar app with PyQt6", "Author": "Specialist-Arachnid6", "Content": "Tempus is a calendar with horoscopes, reminders, etc made with PyQt6\nWhat my Project does?\nTempus is a desktop-based calendar management application built with PyQt6, allowing users to manage their todos, reminders, and special dates efficiently. It offers features like adding, editing, and deleting tasks and reminders, as well as marking dates as special. Tempus ensures users stay organized and never miss important events. Plus, it shows you how many days are remaining until a special day in the dashboard."},
{"Title": "Open-source AI shorts generator in python", "Author": "ANil1729", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc. Link to code :- https://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "Video / Image acquisition from microscope", "Author": "IllTicket9067", "Content": "Dear Fellow Redittors, I am working on a medical / healthcare AI solution focused on cell structure analysis, and other related studies or blood composition for cancer treatment related research. I use python, anaconda, spyder etc and I am from AI background, a techie from various fields such as defence, IoT, healthcare etc. I am aware of my python libraries and modules for microscopes, camera view over the top eye pieces etc. But I am trying to find out suitable microscopes with camera, hdmi output, driver / device servers etc which can connect to the python environment and pull the live video feed for real time diagnostics and related activities based on the model injection directly into the code."},
{"Title": "Community Insights on PgQueuer", "Author": "GabelSnabel", "Content": "Hey r/Python! A while ago, I introduced you to PgQueuer, a Python library designed for handling job queues using Postgres native functionalities. If you've started using PgQueuer, I’m keen to initiate a discussion on your experiences with it.\nHow and where have you integrated PgQueuer into your projects?\nAny difficulties or shortcomings you’ve experienced while using PgQueuer?\nThoughts on the library’s efficiency and features?"},
{"Title": "Tiny Python for x64 Server 2022?", "Author": "amckern", "Content": "I am using a 5-line script on Windows Server (production container is set up with 1GB memory) - is there a tiny Python that I can use that is optimised for small memory machines? I am not familiar with self-compiling the source (I have grown up with Visual Studio) so am after a pre-compiled release. Happy to use anything in the 3.12.x branch."},
{"Title": "Keep system awake (prevent sleep) using python: wakepy", "Author": "fohrloop", "Content": "Hi all, I had previously a problem that I wanted to run some long running python scripts without being interrupted by the automatic suspend. I did not find a package that would solve the problem, so I decided to create my own. In the design, I have selected non-disruptive methods which do not rely on mouse movement or pressing a button like F15 or alter system settings. Instead, I've chosen methods that use the APIs and executables meant specifically for the purpose. I've just released wakepy 0.9.0 which supports Windows, macOS, Gnome, KDE and freedesktop.org compliant DEs."},
{"Title": "Better-OrderedMultiDict - a fast pure-pyton implementation of an ordered multi-valued dictionary.", "Author": "JoachimCoenen", "Content": "What my project does\nIt provides a fast pure-python implementation of an ordered, multi-valued dictionary.\nTarget audience\nPython developers that need this kind of specialized functionality. This can be used in production. It has no dependencies. The code is unit-tested (almost fully, I'm working on it) It requires Python 3.12+"},
{"Title": "Made a Minimalistic Router for Uvicorn", "Author": "achaayb", "Content": "Hey everyone, I've been working on a simple router for Uvicorn called ASGIRouter. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\nWhat My Project Does\nASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn. This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs."},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Have you tried the LogiTyme package on PyPI?", "Author": "lmas3009", "Content": "A Python package that tracks the time spent on each function, custom function, and the entire Python code. It also provides an analysis report and suggestions for running the code in the cloud. Python Package link: https://pypi.org/project/LogiTyme/ Share your feedback below"},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Author": "Content_Ad_4153", "Content": "Problem Statement I recently explored SonarQube for static code analysis. While it’s a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself. Target Audience This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback! Comparison with Similar Tools There was only one similar tool in the Sonar Marketplace, but it’s no longer maintained. Project Details I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub."},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Author": "itssimon86", "Content": "Hey Python community! I’d like to introduce you to my indie product Apitally, a simple API monitoring & analytics tool for Python projects.\nWhat My Project Does\nApitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down. Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally’s servers in regular intervals."},
{"Title": "Sending SMS through GoIP GSM gateway using HTTP API", "Author": "riklaunim", "Content": "GoIP-1 is a simple network device that can be used in VoIP-GSM applications or as a local SMS gateway. For SMS there are services like Twilio but they can get expensive for regions far away from main telecom infrastructure (like islands) and this device can help. You can find the device on Aliexpress and similar sites. The base model GoIP-1 has one SIM slot, while there are bigger ones for near industrial amount of SIM slots (and it gets very expensive). The device has a web panel and simple HTTP GET endpoints for sending SMS so it can be scripted with Python or other programming language."},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Author": "Eastern_Reporter_834", "Content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!"},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Author": "aman6944", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found https://github.com/SeleniumHQ/selenium/pull/13173 .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find. I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "Built a RAG ( Retrieval-Augmented Generation ) model using Gemini Api.", "Author": "inobody_somebody", "Content": "what my project does\nThis project is built to solve the issue of LLM unable to produce relevant answers for information in a particular context. uses the information to train the model and stored it in a database and uses this database to get relevant answers from the Model.\nTarget audiance\nThis project is for people who want to train a LLM on a particular piece of information."},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Author": "good-guy-coder", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities. What My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI. GitHub Repository: NiimPrintX"},
{"Title": "Textchat: TUI Single Server IRC Client", "Author": "rmpython", "Content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/ I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!"},
{"Title": "Tutoring school backend FastApi -Google Calendar Review", "Author": "Itsaliensbro453", "Content": "Hello everyone ,i Made a tutoring School backend using fastapi and Google calendar. Im completly selftaught, learning after work so i dont have anybody to ask for directions🥲 Let me know what you think ,much appreciated ! 😁 https://github.com/Ablasko32/Tutoring_school_system-FastApi-GoogleCalendarApi"},
{"Title": "zeroize: Securely clear secrets from memory", "Author": "radumarias", "Content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "LLM Observability and RAG in just 10 lines of Code", "Author": "trj_flash75", "Content": "Build LLM Observability and RAG in 10 lines of Code using BeyondLLM and Phoenix. Observability helps us monitor key metrics such as latency, the number of tokens, prompts, and the cost per request. Save your OpenAI API cost by monitoring and tracking your GPT request made for each RAG query: https://www.youtube.com/watch?v=VCQ0Cw-GF2U"},
{"Title": "Virtual Python workshops", "Author": "szabgab", "Content": "I have been been teaching programming at hi-tech companies for 24 years. For many years I taught Perl 🐪 - I know, you all love it 😊 and then for even more years I taught Python 🐍. These days I also teach Rust. Recently I started to offer free online workshops via Zoom for all 3 languages. They include a presentation and then hands-on assignments to practice the things I explained. I hope these workshops will be interesting to some of the r/python members and that it is acceptable to occasionally mention the Python workshops here. (and I hope this time I put the proper flair on it)"},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I’m looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Author": "radumarias", "Content": "https://github.com/radumarias/rencrypt-python\nWhat My Project Does: A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\nTarget Audience This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet."},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Author": "0akman", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera. The Python code and documentation on my GitHub: https://github.com/FrunzaDan/Tool-Chip_Contact_Length The video: https://youtu.be/bndai6SlF6E Enjoy!\nWhat My Project Does"},
{"Title": "Lua-style code blocks for Python", "Author": "guangrei", "Content": "Python is a great programming language, but sometimes the indentation can be terrible for some people (especially people with visual impairments). So i created Lython. What the project does: Lython replacing the Python indentation to lua-style code blocks. this is example lython code def test(num)\n    for i in range(num) do\n        if i == 0 then\n            print(\"zero\")\n        elif i % 2 == 1 then\n            print(\"odd\")\n        else\n            print(\"even\")\n        end # if else\n    end # for\nend # def\n\ntest(10)"},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Author": "eonlav", "Content": "What My Project Does Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models. Video running Phi-2 model on a MacBook Air with 8GB RAM, all CPU Target Audience Devs looking to experiment with integrating on-device AI into their software. Comparison\nJARVIS - an all API-based solution using DeepGram, OpenAI and ElevenLabs\nLocal Talking LLM - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word."},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Author": "Character-Maybe-4400", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil. I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a pytest-edit plugin that adds an --edit option to Pytest. There isn't. So I created just that. Enjoy."},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "Why would anyone use pyqt if pyside exists", "Author": "AccordingBeyond2985", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "Calculator without eval()", "Author": "Zorgon-589", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python. TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions. COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators! See the below link for github: https://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "Building an HTTP Server in Python", "Author": "mraza007", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python. Link to blog post"},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try."},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Author": "neozhaoliang", "Content": "What My Project Does An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs. Target Audience RAG applications developers. Comparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies."},
{"Title": "Why do you do your work??", "Author": "MathematicianTop9745", "Content": "What do you think are the factors that motivate a developer? Do you think that creativity is a factor that can influence motivation or productivity? Share your experiences! For this purpose I am also conducting a survey on motivation in IT developers. I have produced a questionnaire aimed exclusively at those who already work in this sector and which takes only two minutes to fill out: https://forms.gle/pkqfMRMjFrN6TmZN6 You would be a great help in collecting data if you could fill it out. Thank you all so much in advance 🫶🏼"},
{"Title": "open source CLI tool for finding out how programs work", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow users to find out what frameworks, tools, engines a program / game was made in. Looks through a directory and searches for common folder structures, and file names. You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries. Image Example\nTarget Audience\nAnyone! Developers looking to learn how other programs were made, people who are just interested."},
{"Title": "Circler imports in Observer design pattern in Python", "Author": "ALior1", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve. At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error. I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this."},
{"Title": "Global Silent Disco Live Broadcasting app", "Author": "HapHeirohFlow", "Content": "Import necessary libraries\nfrom flask import Flask, render_template, request, redirect, url_for, session from flask_socketio import SocketIO, emit, join_room, leave_room from flask_sqlalchemy import SQLAlchemy from werkzeug.security import generate_password_hash, check_password_hash from datetime import datetime import os\nInitialize the app and related components"},
{"Title": "Kivy School - Crowdfunding Update", "Author": "filipemarch", "Content": "We're excited to share that our Kivy School crowdfunding project on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal! We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at kivyschool.com and our course on Udemy. Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Async Python Clarifications", "Author": "Cool-Focus6556", "Content": "Ok, so just so I have this straight:\nAsyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\nThe threading library creates threads and uses preemptive multitasking to context switch between threads\nAsyncio is more efficient than threading for the reasons above"},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python) * **What My Project Does** A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try. * **Target Audience** This is just a toy project as a learning experience"},
{"Title": "An ugly spot of the Python language?", "Author": "LunarCantaloupe", "Content": "I'm not sure exactly what the related language feature would be, but I believe Python lacks the ability to nicely leverage the case when a variable name matches a keyword argument name it is used for, in a way that TypeScript does really well. For example: one_thing = X \n\n... \n\nother_thing = X \n\n... \n\nsome_function(one_thing=one_thing, other_thing=other_thing)"},
{"Title": "The Problems with Celery", "Author": "hatchet-dev", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: https://docs.hatchet.run/blog/problems-with-celery Our issues with the Celery project were part of the reason why we started Hatchet. Would love to hear comments or feedback!"},
{"Title": "AndroidWorld — Build and test AI agents on Android", "Author": "crawles89", "Content": "What it does: It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging. It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them. Target Audience: Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you’d like and test out the default agent, M3A, on it. Just give it a task like “Show my most recent purchases on Amazon.” You can also build your own agent."},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Rio: WebApps in pure Python – Thanks and Feedback wanted!", "Author": "Sn3llius", "Content": "Hey everyone, I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for! As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned! We are looking forward to your feedback, so let us hear from you! :) GitHub"},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "EFT - A file extension for implementing user created themes", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable Example:\nmy_theme.eft - My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool"},
{"Title": "2024 StackOverflow Survey", "Author": "monorepo", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish. Link to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "cachebox: The fastest caching library written in Rust", "Author": "SpareRevolution1487", "Content": "What my library does You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs. One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary. Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code."},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I tried to explain python imports", "Author": "MaKaNuReddit", "Content": "When I was a beginner (or maybe still I am) I struggled a lot with pythons import function. Over the years I went over different approaches, how to handle imports and ended up using mostly exclusive poetry. I've met a lot of people struggling the same way, bit always could just explain very shortly my experience. I've now decided to write it down as a scenario, where I can show and explain my pitfalls: https://github.com/MaKaNu/pyimport-explained"},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Author": "PyDataAmsterdam", "Content": "Hey all, we will close the Call for Proposals portal this Sunday, June 2, for our PyData Amsterdam 2024 Conference which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > https://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "how about one-line try-except statement ?", "Author": "17thCurlyBrace", "Content": "is there a proposal for a shorter exception handling syntax for those very frequent cases where a library function doesn't return \"error value\" like str.index ? something like instead of : try:\n    i = my_str.index(\"sub\", st, en)\nexcept ValueError: # if \"sub\" has not been found\n    pass\nelse:\n    # do stuff with i (note that i usually want independent error handling here)"},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast™️ because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience 😎 Commands are in preview so expect missing stuff."},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC…), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "Building AI Text-to-Video Model From Scratch", "Author": "FareedKhan557", "Content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos."},
{"Title": "My Thoughts on Python in Excel", "Author": "fzumstein", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel Here’s the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn’t suitable for Python beginners nor for interactive data analysis"},
{"Title": "GUI Recommendations", "Author": "Mrkrabsstalker", "Content": "I built a Matlab app for my grandfather's business with my student version. I need to make it accessible on his employees computers. Matlab comiler seems not worth it, so I was wondering if I translated it into a python GUI which one would make it easy to distribute for preferably a low to zero cost."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Kwargs appreciation thread", "Author": "TheRealFrostMana", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though! I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go. Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean: some_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)"},
{"Title": "Suck at Automate the Boring Stuff - Need Assurance", "Author": "COOKIEMONSTER-315", "Content": "I’ve been working hard at learning Python this past year and I’ve been doing ok at it. I’ve used a lot of the commonly recommended books and YouTube channels and like them all except for some reason, I still struggle like crazy with the practice problems in Automate the Boring Stuff. Is this a sign that I still suck a Python, or are the practice problems at the end of the chapters known to be difficult? Looking for a sanity check in my progress basically. Automate The Boring Stuff"},
{"Title": "Open-source AI shorts generator in python", "Author": "ANil1729", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc. Link to code :- https://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "Tiny Python for x64 Server 2022?", "Author": "amckern", "Content": "I am using a 5-line script on Windows Server (production container is set up with 1GB memory) - is there a tiny Python that I can use that is optimised for small memory machines? I am not familiar with self-compiling the source (I have grown up with Visual Studio) so am after a pre-compiled release. Happy to use anything in the 3.12.x branch."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Self updating spreadsheet with popular questions from Ask Reddit and summarized answers using OpenAI", "Author": "DouweOsinga", "Content": "What My Project Does\nThis is a small Python script that runs inside a Google Sheet by way of the Python add-on. It uses the reddit api to fetch posts from Ask Reddit twice daily. For posts with enough upvotes, it uses the OpenAI API to summarize an answer to the question based on the comments. I then inserts any new questions and their answers into the spreadsheet and uses the Twitter APIto also post the answer to Twitter I mean X. Should be interesting to anybody looking to connect (a subset) of those APIs."},
{"Title": "Made a Minimalistic Router for Uvicorn", "Author": "achaayb", "Content": "Hey everyone, I've been working on a simple router for Uvicorn called ASGIRouter. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\nWhat My Project Does\nASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn. This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "NumPy 2.0.0 is the first major release since 2006.", "Author": "commandlineluser", "Content": "NumPy 2.0.0 is the first major release since 2006.\nhttps://github.com/numpy/numpy/releases/tag/v2.0.0\nhttps://numpy.org/devdocs/release/2.0.0-notes.html\nhttps://numpy.org/devdocs/numpy_2_0_migration_guide.html"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Author": "itssimon86", "Content": "Hey Python community! I’d like to introduce you to my indie product Apitally, a simple API monitoring & analytics tool for Python projects.\nWhat My Project Does\nApitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down. Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally’s servers in regular intervals."},
{"Title": "Advise on choosing UI technology with Python", "Author": "green9cactus", "Content": "I am new to python and currently working on simple 3 layer web application -\nfrontend - ?\nbackend API to fetch data from DB - python\nDB - cloud\nThis application has main intention to fetch data from DB, display graphs , table format data etc. also perform some combination analysis of data and show on UI. Which less complex and stable technology I should prefer for frontend ? python flask, Bulma, Mesop by google or any other ? Thank you."},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Author": "aman6944", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found https://github.com/SeleniumHQ/selenium/pull/13173 .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find. I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "1BRC solution using CPython", "Author": "pappuks", "Content": "What My Project Does: I finally got some time to attempt the 1 Billion Row Challenge (1BRC) (https://www.morling.dev/blog/one-billion-row-challenge/) where we are supposed to process a file with 1 billion records of temperature values for cities and print a sorted list with min, max and mean temperature per city. I am a sucker for optimization. So when I heard about 1BRC I got intrigued and in the last few days started experimenting with python implementations. I achieved my goal and implemented the fastest implementation running on CPython, without any external libraries. My motivation for CPython was so that I can apply any of the learning's in my day to day work, as I don't see us moving to PyPy any time sooner."},
{"Title": "Efficient Resource Management in Python: A Guide to Using Context Managers", "Author": "ImmediateDecision320", "Content": "Managing resources efficiently in Python is crucial to prevent memory leaks and ensure optimal performance. One of the best ways to handle resource allocation and deallocation is through the use of context managers. In my latest blog post, I dive deep into the concept of context managers, their significance, and how to implement them using both the built-in `with` statement and the `contextlib` module. Here's a brief overview of what you'll find in the article: Understanding Context Managers: What They Are: Context managers help manage resources such as file handling and database connections by setting up a temporary runtime context and cleaning up after the operations are completed."},
{"Title": "Textchat: TUI Single Server IRC Client", "Author": "rmpython", "Content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/ I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!"},
{"Title": "Community Insights on PgQueuer", "Author": "GabelSnabel", "Content": "Hey r/Python! A while ago, I introduced you to PgQueuer, a Python library designed for handling job queues using Postgres native functionalities. If you've started using PgQueuer, I’m keen to initiate a discussion on your experiences with it.\nHow and where have you integrated PgQueuer into your projects?\nAny difficulties or shortcomings you’ve experienced while using PgQueuer?\nThoughts on the library’s efficiency and features?"},
{"Title": "Virtual Python workshops", "Author": "szabgab", "Content": "I have been been teaching programming at hi-tech companies for 24 years. For many years I taught Perl 🐪 - I know, you all love it 😊 and then for even more years I taught Python 🐍. These days I also teach Rust. Recently I started to offer free online workshops via Zoom for all 3 languages. They include a presentation and then hands-on assignments to practice the things I explained. I hope these workshops will be interesting to some of the r/python members and that it is acceptable to occasionally mention the Python workshops here. (and I hope this time I put the proper flair on it)"},
{"Title": "Keep system awake (prevent sleep) using python: wakepy", "Author": "fohrloop", "Content": "Hi all, I had previously a problem that I wanted to run some long running python scripts without being interrupted by the automatic suspend. I did not find a package that would solve the problem, so I decided to create my own. In the design, I have selected non-disruptive methods which do not rely on mouse movement or pressing a button like F15 or alter system settings. Instead, I've chosen methods that use the APIs and executables meant specifically for the purpose. I've just released wakepy 0.9.0 which supports Windows, macOS, Gnome, KDE and freedesktop.org compliant DEs."},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Author": "0akman", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera. The Python code and documentation on my GitHub: https://github.com/FrunzaDan/Tool-Chip_Contact_Length The video: https://youtu.be/bndai6SlF6E Enjoy!\nWhat My Project Does"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Author": "Character-Maybe-4400", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil. I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a pytest-edit plugin that adds an --edit option to Pytest. There isn't. So I created just that. Enjoy."},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Author": "Content_Ad_4153", "Content": "Problem Statement I recently explored SonarQube for static code analysis. While it’s a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself. Target Audience This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback! Comparison with Similar Tools There was only one similar tool in the Sonar Marketplace, but it’s no longer maintained. Project Details I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub."},
{"Title": "Why would anyone use pyqt if pyside exists", "Author": "AccordingBeyond2985", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Author": "Eastern_Reporter_834", "Content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!"},
{"Title": "Building an HTTP Server in Python", "Author": "mraza007", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python. Link to blog post"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Author": "good-guy-coder", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities. What My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI. GitHub Repository: NiimPrintX"},
{"Title": "open source CLI tool for finding out how programs work", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow users to find out what frameworks, tools, engines a program / game was made in. Looks through a directory and searches for common folder structures, and file names. You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries. Image Example\nTarget Audience\nAnyone! Developers looking to learn how other programs were made, people who are just interested."},
{"Title": "zeroize: Securely clear secrets from memory", "Author": "radumarias", "Content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "Kivy School - Crowdfunding Update", "Author": "filipemarch", "Content": "We're excited to share that our Kivy School crowdfunding project on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal! We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at kivyschool.com and our course on Udemy. Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!"},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Author": "radumarias", "Content": "https://github.com/radumarias/rencrypt-python\nWhat My Project Does: A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\nTarget Audience This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet."},
{"Title": "Async Python Clarifications", "Author": "Cool-Focus6556", "Content": "Ok, so just so I have this straight:\nAsyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\nThe threading library creates threads and uses preemptive multitasking to context switch between threads\nAsyncio is more efficient than threading for the reasons above"},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Author": "eonlav", "Content": "What My Project Does Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models. Video running Phi-2 model on a MacBook Air with 8GB RAM, all CPU Target Audience Devs looking to experiment with integrating on-device AI into their software. Comparison\nJARVIS - an all API-based solution using DeepGram, OpenAI and ElevenLabs\nLocal Talking LLM - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word."},
{"Title": "The Problems with Celery", "Author": "hatchet-dev", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: https://docs.hatchet.run/blog/problems-with-celery Our issues with the Celery project were part of the reason why we started Hatchet. Would love to hear comments or feedback!"},
{"Title": "Calculator without eval()", "Author": "Zorgon-589", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python. TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions. COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators! See the below link for github: https://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Advice for creating 3D modelling program", "Author": "Latter-History-8053", "Content": "I am creating a Python program which models 3D shapes so that they can be saved and or interacted with (i.e. rotated). The process currently takes a while to render shapes consisting of multiple materials. The libraries being implemented are currently matplotlib and numpy. What would you advise for improving the rendering process (library choice etc)?"},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try."},
{"Title": "EFT - A file extension for implementing user created themes", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable Example:\nmy_theme.eft - My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool"},
{"Title": "Privacy-first natural language to SQL + charting + editing app", "Author": "anthony2261", "Content": "What my project does\nDataLine is an AI-driven open source and privacy-first platform for data exploration. Your data is accessed using your device and stored on your device. In simple terms, it's an interface that allows you to \"chat\" with your database/dataset. You can ask it explorative questions, e.g. \"what potential insights can I find in this data\", or specific questions \"who are my top five customers in the past 3 months\", and it will gladly oblige. The backend is written using FastAPI, and the frontend uses Reactjs."},
{"Title": "Flappy Berd in PyQt", "Author": "GhnQuix", "Content": "Hello there What my project does: I’m excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! 😃 As Richard Watterson once said: \"10/10 game, would play again.\" Target Audience This game is for anyone who’s bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience. Comparison Think of it as a faithful recreation of Flappy Bird with a PyQt twist."},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Author": "neozhaoliang", "Content": "What My Project Does An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs. Target Audience RAG applications developers. Comparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies."},
{"Title": "pieshell: python for shell scripting and as an interactive shell", "Author": "Severe_Inflation5326", "Content": "Pieshell is a Python shell environment that combines the expressiveness of shell pipelines with the power of python iterators. It can be used in two major ways:\nAs an interactive shell replacing e.g. bash\nAs an ordinary python module replacing e.g. subprocess.Popen\nObligatory example: 140:/home/oven/pieshell >>> for x in ls(-a) | tr(\"s\", \"S\"):\n...   if x.endswith('.py'):\n...      print x\n... \nSetup.py"},
{"Title": "I have made an open source library for logging errors / messages :)", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file. Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience"},
{"Title": "Circler imports in Observer design pattern in Python", "Author": "ALior1", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve. At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error. I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this."},
{"Title": "Converting tkinter (ttkbootstrap) Python script to a Windows executable using Pyinstaller", "Author": "xanthium_in", "Content": "In this tutorial, we will explore the process of converting a Python script written with tkinter and ttkbootstrap into a standalone Windows executable (.exe) using PyInstaller Link to the full tutorial on how to convert Python tkinter script to Windows executable"},
{"Title": "Just released my first Python package: Melodica Notes 🎶", "Author": "bettercallsenna", "Content": "Hey everyone! I’m excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics. What My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players. Target Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it’s fully functional, I consider it an evolving tool and welcome contributions to enhance its features."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I created a script to automatically patch revanced", "Author": "ltlbwu", "Content": "What My Project Does AutoReVanced is a Python script that automates downloading and patching APKs using ReVanced patches from ApkPure. It's perfect for anyone wanting to patch their revanced app. Target Audience Suitable for a fun side project or hobbyists, AutoReVanced is designed for anyone wanting to customize Android apps with ReVanced patches. Comparison Unlike alternatives, AutoReVanced is automatic. GitHub: autorevanced"},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python) * **What My Project Does** A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try. * **Target Audience** This is just a toy project as a learning experience"},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Author": "jcoelho93", "Content": "What my project does: It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc. Target Audience Developers mostly, I guess Comparison I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line. Code: Here's the GitHub repo https://github.com/jcoelho93/steer"},
{"Title": "What to learn on phone?", "Author": "zJqson", "Content": "My workplace gives me a lot of phone time, I can be on my phone while working so what should I learn? Im 19, I already have a basic understanding of python and the fundamentals, etc. All the popular modules like math, random, datetime, I already learned. I was using python editor on phone and learning panda was pretty ez because I just make dataframe with manually made dictionary instead of excel and use print instead of outputting to csv, so there was little work on PC. But modules like tkinter cant really learn on phone cuz I need to see GUI and use file paths and stuff unless I have a surface pro."},
{"Title": "Async Python adoption?", "Author": "mcharytoniuk", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python? I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "AndroidWorld — Build and test AI agents on Android", "Author": "crawles89", "Content": "What it does: It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging. It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them. Target Audience: Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you’d like and test out the default agent, M3A, on it. Just give it a task like “Show my most recent purchases on Amazon.” You can also build your own agent."},
{"Title": "abstract-factories - a simple framework for content creation pipelines", "Author": "HistoricalCrow", "Content": "Hey all, my project abstract_factories is up to gauge interest and primarily feedback. The design goal is to make it easier to iterate on typical Content Creation pipeline tools (tool dev, rigging, validation, asset management etc) with a flexible framework to provide convenience, open and simple design and no dependencies (currently). It's an approach I've used a lot over the years and found it pretty versatile in production across numerous projects. Key features\nAuto-registration of matching items (types or instances) from any given path or python module."},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can’t build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "Rio: WebApps in pure Python – Thanks and Feedback wanted!", "Author": "Sn3llius", "Content": "Hey everyone, I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for! As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned! We are looking forward to your feedback, so let us hear from you! :) GitHub"},
{"Title": "Get Started With Google Colab", "Author": "elliesleight", "Content": "Transitioning into the world of machine learning, I've found Google Colab to be awesome and I wanted to share that with other Python users! What is Google Colab?\nGoogle Colab is a product from Google Research that allows anyone to write and execute Python code through the browser! It's especially well-suited for machine learning, data analysis, and educational purposes. To get started with Google Colab:\nhttps://www.marqo.ai/blog/getting-started-with-google-colab-a-beginners-guide Happy coding!"},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "2024 StackOverflow Survey", "Author": "monorepo", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish. Link to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "Malicious VSCode Extensions Uncovered: Beware my fellow programmers", "Author": "nicanorflavier", "Content": "Malicious VSCode Extensions Uncovered: Millions of Installs at Risk! Beware my fellow programmers, make sure you review your VSCode extensions https://www.bleepingcomputer.com/news/security/malicious-vscode-extensions-with-millions-of-installs-discovered/"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "cachebox: The fastest caching library written in Rust", "Author": "SpareRevolution1487", "Content": "What my library does You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs. One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary. Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code."},
{"Title": "Have anyone tried google/mesop", "Author": "codes_astro", "Content": "Google Open sourced Mesop. Mesop is a Python-based UI framework that allows you to rapidly build web apps. Used at Google for rapid internal app development similar to Streamlit. find more here"},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Api for odds and results on prop bets? ", "Author": "bimpsmacket", "Content": "Does anyone know of a reilabel API(preferably free) that offers prp bets for major sports-(NFL, NBA, MLB), i need the odds and results too."},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone 👋 The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Author": "PyDataAmsterdam", "Content": "Hey all, we will close the Call for Proposals portal this Sunday, June 2, for our PyData Amsterdam 2024 Conference which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > https://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "Showcase: pdf-to-podcast.com -- Convert PDF's to podcast episodes. Free and open-source :)", "Author": "knowsuchagency", "Content": "What My Project Does Upload any PDF and have it converted into a podcast episode with two or more speakers discussing its contents. https://github.com/knowsuchagency/pdf-to-podcast Target Audience Anyone, but other developers in-particular. The code is open-source on GitHub and there's a link to the source on https://pdf-to-podcast.com. I want the project to serve as an illustrative example of how to build useful things on top of LLMs with relatively little code. Comparison I just made this for fun. It's possible there are other similar projects"},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "I created Yu-Gi-Oh! Power of Chaos save handler", "Author": "wildpantz", "Content": "Quick backstory: Upper floor of my house is sort of a man-cave until we decorate it, so during this time I have two PCs which I use to play games with a friend when we have extra time to waste. The other day I remembered the game mentioned in the title and we had lots of fun playing it (there's 3 different games in this series). I decided I'd transfer the save file to my main PC so I can play when he's not visiting and I quickly learned it's an extremely annoying process to transfer save files across different PCs. Long story short, you need to find a proper registry key (which isn't always located at same spot for some reason) and you need to locate a system.dat file also located in a folder that isn't always in the same place. This process gets tedious pretty quick, so I decided to use the power of Python to make my life easier."},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "Tutorial: A Timely Python Multi-page Streamlit Application on Olympic Medal Winning Countries", "Author": "jgloewen", "Content": "Streamlit is an open-source app framework that allows data scientists and analysts to create interactive web applications with ease. Using just a few lines of Python, you can turn data scripts into shareable web apps. And combined with a data visualization library like Plotly, you can create beautiful charts and maps with only a few lines of code. In this article, let me step you through how to use Streamlit to create a multi-page interactive application that visualizes Olympic medal data. The application will have three pages:"},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Learning Python coming from a JVM background", "Author": "Human_Dependent6814", "Content": "I have 4 years worth JVM languages (Java, Kotlin) and have a need to learn some Python. What's a good resource to get up to speed quickly with idiomatic Python?"},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and cliché, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "I made a cool calendar app with PyQt6", "Author": "Specialist-Arachnid6", "Content": "Tempus is a calendar with horoscopes, reminders, etc made with PyQt6\nWhat my Project does?\nTempus is a desktop-based calendar management application built with PyQt6, allowing users to manage their todos, reminders, and special dates efficiently. It offers features like adding, editing, and deleting tasks and reminders, as well as marking dates as special. Tempus ensures users stay organized and never miss important events. Plus, it shows you how many days are remaining until a special day in the dashboard."},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "Video / Image acquisition from microscope", "Author": "IllTicket9067", "Content": "Dear Fellow Redittors, I am working on a medical / healthcare AI solution focused on cell structure analysis, and other related studies or blood composition for cancer treatment related research. I use python, anaconda, spyder etc and I am from AI background, a techie from various fields such as defence, IoT, healthcare etc. I am aware of my python libraries and modules for microscopes, camera view over the top eye pieces etc. But I am trying to find out suitable microscopes with camera, hdmi output, driver / device servers etc which can connect to the python environment and pull the live video feed for real time diagnostics and related activities based on the model injection directly into the code."},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "Better-OrderedMultiDict - a fast pure-pyton implementation of an ordered multi-valued dictionary.", "Author": "JoachimCoenen", "Content": "What my project does\nIt provides a fast pure-python implementation of an ordered, multi-valued dictionary.\nTarget audience\nPython developers that need this kind of specialized functionality. This can be used in production. It has no dependencies. The code is unit-tested (almost fully, I'm working on it) It requires Python 3.12+"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Cant decide between flask, django ninja or fastAPI for sideproject", "Author": "Eggesalt", "Content": "As the title says, I cant decide what to use for rest api for mye summer project. I am uni student, so this project will only be very small scale project. I have made simpel rest apis in sll of them, but still cant decide which one to actuslly use for my project. Do anyone have any tips for which might be right one? A thing to consider for me answel is how easy it is to host."},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboard🗒️. I created a script to automate Bing searches for reward generation\n👍 Excellent command line experience.\n🙂 User friendly."},
{"Title": "musicnotes: Python module for playing musical instruments!", "Author": "must1088", "Content": "https://github.com/must108/musicnotes\nWhat My Project Does\nmusicnotes is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers."},
{"Title": "Have you tried the LogiTyme package on PyPI?", "Author": "lmas3009", "Content": "A Python package that tracks the time spent on each function, custom function, and the entire Python code. It also provides an analysis report and suggestions for running the code in the cloud. Python Package link: https://pypi.org/project/LogiTyme/ Share your feedback below"},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Author": "XUtYwYzz", "Content": "I saw the words 'visual effects', just give me GIFs Understandable, visit the Effects Showroom first. Then come back if you like what you see. What My Project Does TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features. Use cases:\nInvoke at terminal launch to produce an animation (ex: fetch)."},
{"Title": "Sending SMS through GoIP GSM gateway using HTTP API", "Author": "riklaunim", "Content": "GoIP-1 is a simple network device that can be used in VoIP-GSM applications or as a local SMS gateway. For SMS there are services like Twilio but they can get expensive for regions far away from main telecom infrastructure (like islands) and this device can help. You can find the device on Aliexpress and similar sites. The base model GoIP-1 has one SIM slot, while there are bigger ones for near industrial amount of SIM slots (and it gets very expensive). The device has a web panel and simple HTTP GET endpoints for sending SMS so it can be scripted with Python or other programming language."},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "Preferred method to run python in VS Code", "Author": "SuperMB13", "Content": "Been working on a python tool for VS Code. Curious to get peoples' opinion on how they run python files (not notebooks) within VS Code. Do you typically run files python by:\nTyping the python command into the integrated terminal\nClicking the run button at the top of the file\nPressing F5 for debugging\nPressing Ctrl+F5 for run but not debug"},
{"Title": "Built a RAG ( Retrieval-Augmented Generation ) model using Gemini Api.", "Author": "inobody_somebody", "Content": "what my project does\nThis project is built to solve the issue of LLM unable to produce relevant answers for information in a particular context. uses the information to train the model and stored it in a database and uses this database to get relevant answers from the Model.\nTarget audiance\nThis project is for people who want to train a LLM on a particular piece of information."},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you’re working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "Choosing between dash and react", "Author": "Berlibur", "Content": "At work I'm getting the question to build a platform that will be used to navigate all kinds of business metrics to different levels of granularity. Ideally there is also insights on their relationships, and advice on actions to take. I have experience with both Dash and React, and my feeling says to go with React (and a python backend). Mostly because I foresee this application to grow over time, and managing big Dash applications (as a dev) can get clunky. However, in my team there's no extra JavaScript (let alone React) knowledge. While there is a solid base for Python. There might be opportunities to source outside the team/company, which I'd have to make a strong case for."},
{"Title": "Tutoring school backend FastApi -Google Calendar Review", "Author": "Itsaliensbro453", "Content": "Hello everyone ,i Made a tutoring School backend using fastapi and Google calendar. Im completly selftaught, learning after work so i dont have anybody to ask for directions🥲 Let me know what you think ,much appreciated ! 😁 https://github.com/Ablasko32/Tutoring_school_system-FastApi-GoogleCalendarApi"},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "LLM Observability and RAG in just 10 lines of Code", "Author": "trj_flash75", "Content": "Build LLM Observability and RAG in 10 lines of Code using BeyondLLM and Phoenix. Observability helps us monitor key metrics such as latency, the number of tokens, prompts, and the cost per request. Save your OpenAI API cost by monitoring and tracking your GPT request made for each RAG query: https://www.youtube.com/watch?v=VCQ0Cw-GF2U"},
{"Title": "Gloe: A lightweight lib to create readable and type-safe pipelines", "Author": "justme_sam", "Content": "Have you ever faced a moment when your code is a mess of nested classes and functions, and you have to dig through dozens of levels to understand a simple function? Gloe (pronounced like “glow”) is a library designed to assist you organize your code into a type-safe flow, making it flat and linear. What My Project Does Here’s what it can do for you:\nWrite type-safe pipelines with pure Python.\nExpress your code as a set of atomic and extensible units of responsibility called transformers."},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "Python automation ideas", "Author": "LeastPrice8673", "Content": "Hi I’m looking for inspiration for some stupid python automation projects. If you have done something funny or stupid using python automation I would love to hear it."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Book Management Restful-API", "Author": "ThePawners", "Content": "What My Project Does: This project aims to provide a simple and efficient way to manage a collection of books through various API endpoints. This API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn."},
{"Title": "Lua-style code blocks for Python", "Author": "guangrei", "Content": "Python is a great programming language, but sometimes the indentation can be terrible for some people (especially people with visual impairments). So i created Lython. What the project does: Lython replacing the Python indentation to lua-style code blocks. this is example lython code def test(num)\n    for i in range(num) do\n        if i == 0 then\n            print(\"zero\")\n        elif i % 2 == 1 then\n            print(\"odd\")\n        else\n            print(\"even\")\n        end # if else\n    end # for\nend # def\n\ntest(10)"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made an MMORPG with Python & Telegram in 4 weeks", "Author": "LordOmbro", "Content": "well, kind of. I made Pilgram, an infinite idle RPG where your character goes on adventures and notifies you when stuff happens.\nWhat my project does\nThe bot provides a text interface with wich you can \"play\" an MMO RPG, it's basically an online idle adventure game\nTarget audience"},
{"Title": "SH1106 OLED Screen App Framework for Raspberry Pi - Now on PyPI", "Author": "danyourmaster", "Content": "What it does:\nToday, I released the first working version of my SH1106 app framework for Raspberry Pi on PyPI! The SH1106 is an affordable OLED screen, costing under $3, and it's perfect for projects of all sizes. This package enables the creation of apps for it with graphics support, state management, image conversion utilities, and custom fonts. Check it out here: SH1106 Framework on PyPI. Target audience:\nThe package is mainly aimed at hobbyists who want to create small projects using the SH1106 OLED without having to manually write a lot of the graphics code typically needed on top of standard packages. I am also developing a hardware synthesizer keyboard from scratch that utilizes this framework extensively. So far, the framework handles the massive scaling required for this project excellently in terms of both code organization and performance."},
{"Title": "Introducing Temporal Adjusters: Simplify Time Series Adjustments in Python!", "Author": "MDTv_Teka", "Content": "Hey guys! I'm excited to introduce Temporal Adjusters, a new Python package designed to make time series adjustments easier and more efficient. If you work with time series data, you'll find this tool incredibly useful for various temporal adjustments.\nWhat my project does\nAdjusters are a key tool for modifying temporal objects. They exist to externalize the process of adjustment, permitting different approaches, as per the strategy design pattern. Temporal Adjuster provides tools that help pinpoint very specific moments in time, without having to manually count days, weeks, or months. In essence, a Temporal Adjuster is a function that encapsulates a specific date/time manipulation rule. It operates on a temporal object (representing a date, time, or datetime) to produce a new temporal object adjusted according to the rule. Examples might be an adjuster that sets the date avoiding weekends, or one that sets the date to the last day of the month."},
{"Title": "Crowbar - Package Management without Venv", "Author": "coryalanfitz", "Content": "https://github.com/coryfitz/crowbar What it does: I'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don’t have to think about them. First: pip install crowbar-package-manager Basically you just install and run things with the crowbar command rather than pip: crowbar install package_name And then you also run things with the crowbar command rather than using \"python\" - crowbar then runs the program based on the packages in the local environment rather than having to activate your virtual environment. It's inspired by npm if you've used that with js."},
{"Title": "Created an Api for APKpure", "Author": "ltlbwu", "Content": "Like the title said. I created an API fro apkpure.com . I was creating a script to automate YouTube Revanced, but i couldn't find anyway to download the apk. You can try out the app here: https://github.com/anishomsy/apkpure What My Project Does It allows you to download apk from apkpure. Users can easily fetch specific versions of Android apps programmatically. Target Audience it is a hobby project, anyone can use it Comparison I did not find any existing alternatives. So I created my own. The only other way was to download it manually which is very tedious. Please lmk how i can improve."},
{"Title": "An IDE with the same step by step functionality as in Matlab", "Author": "Cerricola", "Content": "When working with Matlab I love how I can run the code step by step to debug it. Even being able to \"step in\" functions and loops. Then, I was looking to an IDE with a similar functionality for Python. Nowadays I'm using Spyder."},
{"Title": "Why do you do your work??", "Author": "MathematicianTop9745", "Content": "What do you think are the factors that motivate a developer? Do you think that creativity is a factor that can influence motivation or productivity? Share your experiences! For this purpose I am also conducting a survey on motivation in IT developers. I have produced a questionnaire aimed exclusively at those who already work in this sector and which takes only two minutes to fill out: https://forms.gle/pkqfMRMjFrN6TmZN6 You would be a great help in collecting data if you could fill it out. Thank you all so much in advance 🫶🏼"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Global Silent Disco Live Broadcasting app", "Author": "HapHeirohFlow", "Content": "Import necessary libraries\nfrom flask import Flask, render_template, request, redirect, url_for, session from flask_socketio import SocketIO, emit, join_room, leave_room from flask_sqlalchemy import SQLAlchemy from werkzeug.security import generate_password_hash, check_password_hash from datetime import datetime import os\nInitialize the app and related components"},
{"Title": "Spotify Lyrics visualizer", "Author": "Mews75", "Content": "What My Project Does Because spotify made their lyrics menu a premium only feature, I thought I'd make my own replacement for it.\nThe app connects to your spotify account, fetches the lyrics from various websites, and then syncs them automatically to what is currently playing. Basically does the exact same as the lyrics menu used to do. Target Audience Anyone who wants to see the lyrics to songs really. Comparison Most other apps that I've found are either browser only, or don't actually sync the lyrics to the song, they just show the entire lyrics at once.\nIn comparison, my app shows the lyrics line by line, synced with the song, and also has (in my opinion lol) a fairly nice looking ui.\nIt's also very easy to use for non programmers too, since you can just download an executable to use the app."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I created an unofficial module for the ShipEngine API", "Author": "Status_Bid_1604", "Content": "What My Project Does Simplifies the interaction with the ShipEngine API with most response and requests built as objects, which in my opinion makes interaction much easier. This is my first released package so all criticism and feedback is very welcome. Target Audience Anyone who deals with the current ShipEngine API using Python. Comparison There is an official ShipEngine API module that is created by the company but I have found it somewhat lack luster with no way to create batches or bulk shipments (and other missing functionality), this is much more suited to accomplishing that task."},
{"Title": "An ugly spot of the Python language?", "Author": "LunarCantaloupe", "Content": "I'm not sure exactly what the related language feature would be, but I believe Python lacks the ability to nicely leverage the case when a variable name matches a keyword argument name it is used for, in a way that TypeScript does really well. For example: one_thing = X \n\n... \n\nother_thing = X \n\n... \n\nsome_function(one_thing=one_thing, other_thing=other_thing)"},
{"Title": "Xenharmlib - An advanced music theory library that supports microtonality", "Author": "realretooth", "Content": "Introducing Xenharmlib (Source code here) What My Project Does (taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music. Target Audience Composers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general."},
{"Title": "My first Python package, D1py: A very simple library to interact with Cloudflare D1 Database API", "Author": "ogMasterPloKoon", "Content": "What My Project Does Cloudflare offers a free SQLite based database D1. I needed it for some personal project so I thought of creating a very simple wrapper for it. D1py let's you connect to D1 database in your cloudflare account and run SQL queries(CRUD operations). Target audience For those who need a simple wrapper for Cloudflare D1 API for their projects. Comparison Right now there are no Python wrappers or libraries for D1 yet.... that's why I thought of creating one. It's not perfect but it is my first attempt at writing a small library/package for doing a task. Source"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Perpetual - a self-generalizing, hyperparameter-free gradient boosting machine", "Author": "mutlu_simsek", "Content": "https://github.com/perpetual-ml/perpetual\nWhat My Project Does\nPerpetualBooster is a gradient boosting machine (GBM) algorithm which doesn't have hyperparameters to be tuned so that you can use it without needing hyperparameter optimization packages unlike other GBM algorithms. Similar to AutoML libraries, it has a budget parameter which ranges between (0, 1). Increasing the budget parameter increases predictive power of the algorithm and gives better results on unseen data. Start with a small budget and increase it once you are confident with your features. If you don't see any improvement with further increasing , it means that you are already extracting the most predictive power out of your data."},
{"Title": "AI planner: AI tool for efficient event scheduling in Google Calendar.", "Author": "nginx26", "Content": "Good evening! I have created a new projectfor adding events to google calendar based on the text a user inputs. What My Project Does The project is a tool that uses large language models to understand the user's input and add events to the user's Google Calendar based on the user's input. It uses Ollama for natural language understanding and Google Calendar API for adding events to the user's calendar. How My Project Works Ollama uses Llama 3 with pre-instructions to act as a calendar event planner. The tool uses the model to generate responses to extract the event's details from the user's input inserted in the Web Interface. tool then asks the user to confirm the details extracted from the user's input and adds the event to the user's Google Calendar (example shown )"},
{"Title": "Regarding re.match() and match keyword.", "Author": "RevolutionaryPen4661", "Content": "I've learned that match is a reserved keyword in Python but the standard regex library for Python reuses the 'match' term for both re.match() functions which is also a reserved keyword and cannot be used for other purposes. How did this happen? This isn't a good practice, right?"},
{"Title": "PyPods: A lightweight solution to execute Python dependencies in an isolated fashion.", "Author": "Brilliant_Emphasis63", "Content": "Introducing PyPods What My Project Does A Python library designed to manage monolithic project architectures by isolating dependencies. Traditionally, monolithic architectures cluster all dependencies into one project, creating complexities and potential conflicts. PyPods offers a solution by isolating these dependencies and enabling the main project to communicate with them via remote procedure calls. This approach eliminates the need to install dependencies directly in the main project. Feel free to take a look and I am happy to receive some feedback! Target Audience"},
{"Title": "Problem details for FastAPI applications (RFC9457)", "Author": "BluesFiend", "Content": "Just released v0.8.0 of fastapi_problem to provide problem details for FastAPI applications. Hoping it can provide value to some other peoples projects. Code: https://github.com/NRWLDev/fastapi-problem Docs: https://nrwldev.github.io/fastapi-problem/ Pypi: https://pypi.org/project/fastapi-problem/\nWhat My Project Does\nProvides a simple exception handler and an underlying exception class heirarchy to remove the need to think about error management in your FastAPI project, just raise errors as appropriate and let the handler deal with responses."},
{"Title": "I made a desktop chat app :)", "Author": "Reasonable-Zone-7909", "Content": "What My Project Does Hi! This is my first time doing a python project more than a few hours in size. I made a chat app which features E2E encryption using a passcode and has a multiclient architecture. All comments are welcome! Target Audience It is just a toy project for my portfolio. Comparison Compared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner. But I think that IRC already has this, so it doesn't differ much XD. Git link: https://github.com/xxzoltanxx/Balvan-Chat"},
{"Title": "I tried to explain python imports", "Author": "MaKaNuReddit", "Content": "When I was a beginner (or maybe still I am) I struggled a lot with pythons import function. Over the years I went over different approaches, how to handle imports and ended up using mostly exclusive poetry. I've met a lot of people struggling the same way, bit always could just explain very shortly my experience. I've now decided to write it down as a scenario, where I can show and explain my pitfalls: https://github.com/MaKaNu/pyimport-explained"},
{"Title": "a new version of ultimateultimateguitar", "Author": "sonobanana33", "Content": "What My Project Does\nIt is a CLI to get songs from ultimateguitar. How it looks like: https://youtu.be/Spm1IIaYo8Q I've only tried it on linux. Available in debian and pypi.\nTarget audience\nFor musicians who also use the terminal and who don't especially like the ultimateguitar website.\nComparison"},
{"Title": "how about one-line try-except statement ?", "Author": "17thCurlyBrace", "Content": "is there a proposal for a shorter exception handling syntax for those very frequent cases where a library function doesn't return \"error value\" like str.index ? something like instead of : try:\n    i = my_str.index(\"sub\", st, en)\nexcept ValueError: # if \"sub\" has not been found\n    pass\nelse:\n    # do stuff with i (note that i usually want independent error handling here)"},
{"Title": "uv added experimental commands for `uv add/remove`", "Author": "BaggiPonte", "Content": "uv is the \"pip but blazingly fast™️ because it's written in rust\" and is developed by the same folks that did ruff. In 0.2.11 they released an experimental/preview command of `uv add/remove` that adds a library to pyproject.toml. It's the first step to become a fully-fledged package manager! I noticed you can also manage python installations with uv using `uv toolchain` command (i.e. be like pyenv) and run tools (like a smaller version of pipx) with `uv run`. I'm genuinely excited about this, Python packaging is going to become such a smooth experience 😎 Commands are in preview so expect missing stuff."},
{"Title": "Pathway - Build Mission Critical ETL and RAG in Python (used by NATO, F1)", "Author": "dxtros", "Content": "Hi Python data folks, I am excited to share Pathway, a Python data processing framework we built for ETL and RAG pipelines. https://github.com/pathwaycom/pathway What My Project Does We started Pathway to solve event processing for IoT and geospatial indexing. Think freight train operations in unmapped depots bringing key merchandise from China to Europe. This was not something we could use Flink or Elastic for. Then we added more connectors for streaming ETL (Kafka, Postgres CDC…), data indexing (yay vectors!), and LLM wrappers for RAG. Today Pathway provides a data indexing layer for live data updates, stateless and stateful data transformations over streams, and retrieval of structured and unstructured data."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Polars 1.0 will be out in a few weeks, but you can already install the pre-release!", "Author": "marcogorelli", "Content": "In a few weeks, Polars 1.0 will be out. How exciting! You can already try out the pre-release by running: ``` pip install -U --pre polars\n``` If you encounter any bugs, you can report them to https://github.com/pola-rs/polars/issues, so they can be fixed before 1.0 comes out. Release notes: https://github.com/pola-rs/polars/releases/tag/py-1.0.0-alpha.1"},
{"Title": "Try PyCharm (30% off!) and they donate 100% to the Django Software Foundation", "Author": "Affectionate_Sky9709", "Content": "There's a promotion right now to try PyCharm, get a 30% discount, and 100% of what you pay goes directly to the Django Software Foundation, which maintains Django and keeps it free for everyone. https://jb.gg/2atgzm I hope this kind of post is allowed."},
{"Title": "I ported Rust's Regex Library To Python, but the time taken by the compile parameter was high.", "Author": "RevolutionaryPen4661", "Content": "(.venv) PS D:\\flpc> python .\\seed\\test.py\nOperation  | flpc (ms)  | re (ms)   \n----------------------------------\nCompile    | 1496.18077 | 0.00000\nSearch     | 19.67597   | 1721.07339\nFind Match | 15.62524   | 16.72506\nFull Match | 15.62500   | 0.00000\nSplit      | 0.00000    | 1722.88108\nFind All   | 3.02815    | 1660.32910\nFind Iter  | 5.96547    | 1672.50776\nSub        | 0.00000    | 1548.61116\nSubn       | 6.70719    | 1676.84698\nEscape     | 4.87757    | 0.00000\n(.venv) PS D:\\flpc>"},
{"Title": "Vedo or PyVista?", "Author": "AlexTheRandomizer", "Content": "Hi guys! What are your experiences with Vedo or PyVista? Which one do you prefer? Did you have any specific issues which either of these libraries? I'm mostly interested in meshes and point clouds rendering."},
{"Title": "Sold my Python open source project to a San Francisco AI company. Now I work for them. AMA.", "Author": "romerio86", "Content": "About a year ago, I posted on this sub. I was terrified. I was launching a new framework. Another framework? Yes, I was crazy enough to think we needed yet another framework. Thankfully, the response was great. Many were excited to try it. Others were understandably skeptical, and respectfully asking good questions. This time, I'm posting for completely different reasons. I want to share a story. A story of which this sub, and hundreds of you, are part. It all started 2 years ago, when I was laid off from my analytics consulting job. I had a well-paying, comfortable job in the UK. Then I moved from the UK to Poland, where I live now, and continued working remotely. I was living the dream; earning a London salary while living in a place with a lower cost of living. Until it ended with a layoff."},
{"Title": "Flappy Berd in PyQt", "Author": "GhnQuix", "Content": "Hello there What my project does: I’m excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! 😃 As Richard Watterson once said: \"10/10 game, would play again.\" Target Audience This game is for anyone who’s bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience. Comparison Think of it as a faithful recreation of Flappy Bird with a PyQt twist."},
{"Title": "I have made an open source library for logging errors / messages :)", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file. Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience"},
{"Title": "Just released my first Python package: Melodica Notes 🎶", "Author": "bettercallsenna", "Content": "Hey everyone! I’m excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics. What My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players. Target Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it’s fully functional, I consider it an evolving tool and welcome contributions to enhance its features."},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Author": "jcoelho93", "Content": "What my project does: It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc. Target Audience Developers mostly, I guess Comparison I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line. Code: Here's the GitHub repo https://github.com/jcoelho93/steer"},
{"Title": "Async Python adoption?", "Author": "mcharytoniuk", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python? I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can’t build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone 👋 The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and cliché, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "Building AI Text-to-Video Model From Scratch", "Author": "FareedKhan557", "Content": "What My Project Does\nThis project aims to create a small-scale text-to-video model that can generate videos based on text prompts.\nTarget audience\nThis project is designed for individuals who want to learn how to create their own text-to-video model from scratch but don't know where to start. It will provide a basic guide from beginning to end, covering everything from generating the training data to training a model and using that trained model to generate AI videos."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboard🗒️. I created a script to automate Bing searches for reward generation\n👍 Excellent command line experience.\n🙂 User friendly."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "musicnotes: Python module for playing musical instruments!", "Author": "must1088", "Content": "https://github.com/must108/musicnotes\nWhat My Project Does\nmusicnotes is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers."},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Author": "XUtYwYzz", "Content": "I saw the words 'visual effects', just give me GIFs Understandable, visit the Effects Showroom first. Then come back if you like what you see. What My Project Does TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features. Use cases:\nInvoke at terminal launch to produce an animation (ex: fetch)."},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you’re working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "Preferred method to run python in VS Code", "Author": "SuperMB13", "Content": "Been working on a python tool for VS Code. Curious to get peoples' opinion on how they run python files (not notebooks) within VS Code. Do you typically run files python by:\nTyping the python command into the integrated terminal\nClicking the run button at the top of the file\nPressing F5 for debugging\nPressing Ctrl+F5 for run but not debug"},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "Choosing between dash and react", "Author": "Berlibur", "Content": "At work I'm getting the question to build a platform that will be used to navigate all kinds of business metrics to different levels of granularity. Ideally there is also insights on their relationships, and advice on actions to take. I have experience with both Dash and React, and my feeling says to go with React (and a python backend). Mostly because I foresee this application to grow over time, and managing big Dash applications (as a dev) can get clunky. However, in my team there's no extra JavaScript (let alone React) knowledge. While there is a solid base for Python. There might be opportunities to source outside the team/company, which I'd have to make a strong case for."},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "Gloe: A lightweight lib to create readable and type-safe pipelines", "Author": "justme_sam", "Content": "Have you ever faced a moment when your code is a mess of nested classes and functions, and you have to dig through dozens of levels to understand a simple function? Gloe (pronounced like “glow”) is a library designed to assist you organize your code into a type-safe flow, making it flat and linear. What My Project Does Here’s what it can do for you:\nWrite type-safe pipelines with pure Python.\nExpress your code as a set of atomic and extensible units of responsibility called transformers."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "My Thoughts on Python in Excel", "Author": "fzumstein", "Content": "Hi all, it's been almost 1 year since the preview of Python in Excel has been revealed. So I wrote up a blog post pointing out what works well and what should be improved: https://www.xlwings.org/blog/my-thoughts-on-python-in-excel Here’s the TL;DR:\nWe wanted an alternative to VBA, but got an alternative to the Excel formula language\nIntegrating the Jupyter notebook cells inside the Excel grid was a mistake\nPython in Excel isn’t suitable for Python beginners nor for interactive data analysis"},
{"Title": "Book Management Restful-API", "Author": "ThePawners", "Content": "What My Project Does: This project aims to provide a simple and efficient way to manage a collection of books through various API endpoints. This API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn."},
{"Title": "GUI Recommendations", "Author": "Mrkrabsstalker", "Content": "I built a Matlab app for my grandfather's business with my student version. I need to make it accessible on his employees computers. Matlab comiler seems not worth it, so I was wondering if I translated it into a python GUI which one would make it easy to distribute for preferably a low to zero cost."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tuples Are Underrated! List vs Tuple 🐍", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ☺️ https://youtu.be/-sO4FG6W4ho"},
{"Title": "Kwargs appreciation thread", "Author": "TheRealFrostMana", "Content": "Edit: Thanks a lot to those who pointed it out: The name of the concept in question is actually keyword-only arguments. **kwargs is lovely as well, though! I learned Python as my first language and it's the one I'm most proficient in. However, I've since written JavaScript, TypeScript, C#, and a little bit of Go. Even though each language has its own way of doing things, I find that I often miss being able to use kwargs for the sake of readability. This is what I mean: some_function(semantic_parameter_name=value1, explanatory_parameter_name=value2)"},
{"Title": "SH1106 OLED Screen App Framework for Raspberry Pi - Now on PyPI", "Author": "danyourmaster", "Content": "What it does:\nToday, I released the first working version of my SH1106 app framework for Raspberry Pi on PyPI! The SH1106 is an affordable OLED screen, costing under $3, and it's perfect for projects of all sizes. This package enables the creation of apps for it with graphics support, state management, image conversion utilities, and custom fonts. Check it out here: SH1106 Framework on PyPI. Target audience:\nThe package is mainly aimed at hobbyists who want to create small projects using the SH1106 OLED without having to manually write a lot of the graphics code typically needed on top of standard packages. I am also developing a hardware synthesizer keyboard from scratch that utilizes this framework extensively. So far, the framework handles the massive scaling required for this project excellently in terms of both code organization and performance."},
{"Title": "Suck at Automate the Boring Stuff - Need Assurance", "Author": "COOKIEMONSTER-315", "Content": "I’ve been working hard at learning Python this past year and I’ve been doing ok at it. I’ve used a lot of the commonly recommended books and YouTube channels and like them all except for some reason, I still struggle like crazy with the practice problems in Automate the Boring Stuff. Is this a sign that I still suck a Python, or are the practice problems at the end of the chapters known to be difficult? Looking for a sanity check in my progress basically. Automate The Boring Stuff"},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, …)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "Crowbar - Package Management without Venv", "Author": "coryalanfitz", "Content": "https://github.com/coryfitz/crowbar What it does: I'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don’t have to think about them. First: pip install crowbar-package-manager Basically you just install and run things with the crowbar command rather than pip: crowbar install package_name And then you also run things with the crowbar command rather than using \"python\" - crowbar then runs the program based on the packages in the local environment rather than having to activate your virtual environment. It's inspired by npm if you've used that with js."},
{"Title": "Open-source AI shorts generator in python", "Author": "ANil1729", "Content": "I have open-sourced a Text-To-Video-AI generated which generates video from a topic by collecting relevant stock videos and stitching them together similar to popular video tools like Invideo, Pictory etc. Link to code :- https://github.com/SamurAIGPT/Text-To-Video-AI"},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "An IDE with the same step by step functionality as in Matlab", "Author": "Cerricola", "Content": "When working with Matlab I love how I can run the code step by step to debug it. Even being able to \"step in\" functions and loops. Then, I was looking to an IDE with a similar functionality for Python. Nowadays I'm using Spyder."},
{"Title": "Tiny Python for x64 Server 2022?", "Author": "amckern", "Content": "I am using a 5-line script on Windows Server (production container is set up with 1GB memory) - is there a tiny Python that I can use that is optimised for small memory machines? I am not familiar with self-compiling the source (I have grown up with Visual Studio) so am after a pre-compiled release. Happy to use anything in the 3.12.x branch."},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Made a Minimalistic Router for Uvicorn", "Author": "achaayb", "Content": "Hey everyone, I've been working on a simple router for Uvicorn called ASGIRouter. If you like how Flask handles routing but want to stick with ASGI, you might find this useful.\nWhat My Project Does\nASGIRouter provides a minimalistic routing solution for ASGI applications. It offers a straightforward way to define routes, similar to Flask, but is built to work any asgi compatible webservers mainly uvicorn. This project is aimed at developers who prefer a minimalistic approach to routing in their ASGI applications. It's suitable for both toy projects and production use, depending on your needs."},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "Spotify Lyrics visualizer", "Author": "Mews75", "Content": "What My Project Does Because spotify made their lyrics menu a premium only feature, I thought I'd make my own replacement for it.\nThe app connects to your spotify account, fetches the lyrics from various websites, and then syncs them automatically to what is currently playing. Basically does the exact same as the lyrics menu used to do. Target Audience Anyone who wants to see the lyrics to songs really. Comparison Most other apps that I've found are either browser only, or don't actually sync the lyrics to the song, they just show the entire lyrics at once.\nIn comparison, my app shows the lyrics line by line, synced with the song, and also has (in my opinion lol) a fairly nice looking ui.\nIt's also very easy to use for non programmers too, since you can just download an executable to use the app."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Author": "jgloewen", "Content": "The Python Shiny library is a framework for building interactive web applications in Python. Developed by RStudio, the same team behind the Shiny library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills. All that is needed is knowledge of the Shiny user interface Application Programming Interface (API). Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone."},
{"Title": "I created an unofficial module for the ShipEngine API", "Author": "Status_Bid_1604", "Content": "What My Project Does Simplifies the interaction with the ShipEngine API with most response and requests built as objects, which in my opinion makes interaction much easier. This is my first released package so all criticism and feedback is very welcome. Target Audience Anyone who deals with the current ShipEngine API using Python. Comparison There is an official ShipEngine API module that is created by the company but I have found it somewhat lack luster with no way to create batches or bulk shipments (and other missing functionality), this is much more suited to accomplishing that task."},
{"Title": "A super easy-to-use API monitoring & analytics tool", "Author": "itssimon86", "Content": "Hey Python community! I’d like to introduce you to my indie product Apitally, a simple API monitoring & analytics tool for Python projects.\nWhat My Project Does\nApitally provides insights into API traffic, errors, and performance, for the whole API, each endpoint and individual API consumers. It also monitors API uptime, alerting users when their API is down. Apitally directly integrates with various Python web frameworks (FastAPI, Django, Flask, Litestar) through middleware, which captures request & response metadata (never anything sensitive!) and asynchronously ships it to Apitally’s servers in regular intervals."},
{"Title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies", "Author": "ManyInterests", "Content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are yanked. The important effect this has had is anyone who may have defined their requirements as something like PySimpleGUI<5 or PySimpleGUI==4.x.x for a now-deleted version, your installations will fail with a message like:"},
{"Title": "Xenharmlib - An advanced music theory library that supports microtonality", "Author": "realretooth", "Content": "Introducing Xenharmlib (Source code here) What My Project Does (taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music. Target Audience Composers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general."},
{"Title": "TIL that selenium has opt out telemetry. what other common packages do this / similar experiences?", "Author": "aman6944", "Content": "While monitoring my network while doing some browser automation with selenium, I found strange traffic. After some digging I found https://github.com/SeleniumHQ/selenium/pull/13173 .\nSearching for SE_AVOID_STATS on google to disable this has only 7 results, and practially impossible to find. I didn't expect to see this kind of dark patterns telemetry in python packages - so yeah. Has anyone else seen this? Is this some sort of recent trend?"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Textchat: TUI Single Server IRC Client", "Author": "rmpython", "Content": "Hello all! I have made an irc client with textual`. Source is available here: https://github.com/rmblau/textchat/ I would love any and all feedback on code quality and how it can be improved as well as people to test out the client. On first launch it will open a settings screen where you can input your user information once you hit the save button. Right now there's a bug that I'm working on resolving where that you'll have to quit the application once you enter your information and relaunch it to get it to connect. Feel free to file issues and contribute; I hope you all will find this fun and interesting!"},
{"Title": "Tach - enforce module boundaries + deps, now in Rust 🦀", "Author": "the1024", "Content": "https://github.com/gauge-sh/tach Hey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\nRe-wrote the core in Rust, leading to a ~19x speed up on large repos\nRe-worked the interface, and added a TUI to let you interactively declare modules\nWe built Tach to solve the “ball of mud” problem that we’ve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!"},
{"Title": "AI planner: AI tool for efficient event scheduling in Google Calendar.", "Author": "nginx26", "Content": "Good evening! I have created a new projectfor adding events to google calendar based on the text a user inputs. What My Project Does The project is a tool that uses large language models to understand the user's input and add events to the user's Google Calendar based on the user's input. It uses Ollama for natural language understanding and Google Calendar API for adding events to the user's calendar. How My Project Works Ollama uses Llama 3 with pre-instructions to act as a calendar event planner. The tool uses the model to generate responses to extract the event's details from the user's input inserted in the Web Interface. tool then asks the user to confirm the details extracted from the user's input and adds the event to the user's Google Calendar (example shown )"},
{"Title": "Virtual Python workshops", "Author": "szabgab", "Content": "I have been been teaching programming at hi-tech companies for 24 years. For many years I taught Perl 🐪 - I know, you all love it 😊 and then for even more years I taught Python 🐍. These days I also teach Rust. Recently I started to offer free online workshops via Zoom for all 3 languages. They include a presentation and then hands-on assignments to practice the things I explained. I hope these workshops will be interesting to some of the r/python members and that it is acceptable to occasionally mention the Python workshops here. (and I hope this time I put the proper flair on it)"},
{"Title": "New Lands RPG (Play testers welcome)", "Author": "Littlebudddy_321", "Content": "Good \"time of day\" my fellow peeps What my project does: I wanted to share my Python game I've been slowly working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you... Target Audience: I'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax..."},
{"Title": "PyPods: A lightweight solution to execute Python dependencies in an isolated fashion.", "Author": "Brilliant_Emphasis63", "Content": "Introducing PyPods What My Project Does A Python library designed to manage monolithic project architectures by isolating dependencies. Traditionally, monolithic architectures cluster all dependencies into one project, creating complexities and potential conflicts. PyPods offers a solution by isolating these dependencies and enabling the main project to communicate with them via remote procedure calls. This approach eliminates the need to install dependencies directly in the main project. Feel free to take a look and I am happy to receive some feedback! Target Audience"},
{"Title": "Python Open-CV Tool-Chip Contact Length Calculation", "Author": "0akman", "Content": "Just posted a video on a case study of a Python OpenCV algo that calculates the contact length between the tool and the chip in a metalworking machining process. The images have been captured with a high-speed camera. The Python code and documentation on my GitHub: https://github.com/FrunzaDan/Tool-Chip_Contact_Length The video: https://youtu.be/bndai6SlF6E Enjoy!\nWhat My Project Does"},
{"Title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite", "Author": "JaggedParadigm", "Content": "What My Project Does: Moonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\necstatic: price too low so they are extra happy\ncontent: price is what they were expecting,\nsad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period"},
{"Title": "ChatGPT hallucinated a plugin called pytest-edit. So I created it.", "Author": "Character-Maybe-4400", "Content": "I have several codebases with around 500+ different tests in each. If one of these tests fails, I need to spend ~20 seconds to find the right file, open it in neovim, and find the right test function. 20 seconds might not sound like much, but trying not to fat-finger paths in the terminal for this amount of time makes my blood boil. I wanted Pytest to do this for me, thought there would be a plugin for it. Google brought up no results, so I asked ChatGPT. It said there's a pytest-edit plugin that adds an --edit option to Pytest. There isn't. So I created just that. Enjoy."},
{"Title": "I made a desktop chat app :)", "Author": "Reasonable-Zone-7909", "Content": "What My Project Does Hi! This is my first time doing a python project more than a few hours in size. I made a chat app which features E2E encryption using a passcode and has a multiclient architecture. All comments are welcome! Target Audience It is just a toy project for my portfolio. Comparison Compared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner. But I think that IRC already has this, so it doesn't differ much XD. Git link: https://github.com/xxzoltanxx/Balvan-Chat"},
{"Title": "Mesop, open-source Python UI framework used at Google to quickly build delightful web apps", "Author": "wwwillchen", "Content": "What my project does: I’m excited to share about Mesop - a new, open-source Python UI framework that enables Python developers to quickly build delightful web apps in a scalable way. A small team of us at Google have been developing Mesop as an unofficial 20% project for the past few months. A wide range of research and product teams at Google have been using it to rapidly build internal apps and we’ve gotten a lot of positive feedback internally so now we’re looking to get feedback from the open-source community. Target audience: Python developers looking to build AI demos & internal apps."},
{"Title": "Why would anyone use pyqt if pyside exists", "Author": "AccordingBeyond2985", "Content": "Like the only different is in pyqt you must share the code or buy a license and in pyside you can share it whether you want to or not. Yet i still see so many videos on pyqt and not pyside"},
{"Title": "Rye-Tui, a Text-based User Interface (TUI) to manage rye projects", "Author": "Zaloog1337", "Content": "Hi everyone, Ive reached a state of my current project, where I want to share it with you, and gather some feedback. This is my first time using rye and I am surprised, how Hassle-Free building a package with it went. Source Code: github\nInstallation\npython -m pip install rye-tui"},
{"Title": "Dask DataFrame is Fast Now!", "Author": "phofl93", "Content": "My colleagues and I have been working on making Dask fast. It’s been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload). I wrote a blog post on what we did: https://docs.coiled.io/blog/dask-dataframe-is-fast.html Really, this came down not to doing one thing really well, but doing lots of small things “pretty good”. Some of the most prominent changes include:\nApache Arrow support in pandas"},
{"Title": "Building an HTTP Server in Python", "Author": "mraza007", "Content": "I have always been curious on how http servers works. Therefore, I decided to write a post on how they work and implementing a simple server in Python. Link to blog post"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Automate your WordPress new-page creation with Python", "Author": "EngineeringFit5761", "Content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin). It's a simple app, but has great expansion potential and it's really easy to use. To start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page. Run the program, add sections, choose your desired structure, and select the right widgets for your content. Once you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I built a pipeline sending my wife and I SMSs twice a week with budgeting advice generated by AI", "Author": "MoodAppropriate4108", "Content": "What My Project Does:\nI built a pipeline of Dagger modules to send my wife and I SMSs twice a week with actionable financial advice generated by AI based on data from bank accounts regarding our daily spending. Details: Dagger is an open source programmable CI/CD engine. I built each step in the pipeline as a Dagger method. Dagger spins up ephemeral containers, running everything within its own container. I use GitHub Actions to trigger dagger methods that;"},
{"Title": "Granian 1.4 is out", "Author": "gi0baro", "Content": "Granian – the Rust HTTP server for Python applications – 1.4 was released! Blog post: https://polar.sh/emmett-framework/posts/granian-1-4 Release details: https://github.com/emmett-framework/granian/releases/tag/v1.4.0 Repo: https://github.com/emmett-framework/granian"},
{"Title": "open source CLI tool for finding out how programs work", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow users to find out what frameworks, tools, engines a program / game was made in. Looks through a directory and searches for common folder structures, and file names. You can add the -d flag to do a \"deep dive\" and it will look through for strings inside of the binaries. Image Example\nTarget Audience\nAnyone! Developers looking to learn how other programs were made, people who are just interested."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "We built open-source SDK for adding custom code interpreters to AI apps", "Author": "mlejva", "Content": "What My Project Does Hey everyone! I'm the CEO of the company that built an SDK that makes it easy to build custom code interpreters for AI apps. We're a company called E2B [0]. We're building and open-source [1] secure environments for running untrusted AI-generated code and AI agents. We call these environments sandboxes and they are built on top of micro VM called Firecracker [2]. We specifically decided to use Firecrackers instead of containers because of their security and ability to do snapshots. You can think of us as giving small cloud computers to LLMs. We recently created a dedicated SDK for building custom code interpreters in Python or JS/TS. We saw this need after a lot of our users have been adding code execution capabilities to their AI apps with our core SDK [3]. These use cases were often centered around AI data analysis so code interpreter-like behavior made sense"},
{"Title": "Kivy School - Crowdfunding Update", "Author": "filipemarch", "Content": "We're excited to share that our Kivy School crowdfunding project on Kickstarter is over 50% funded, but we only have 2 days left to reach our goal! We want to show our appreciation to everyone who has supported us. Even if we don't reach 100% funding, everyone who trusted us will still receive free access to all free resources at kivyschool.com and our course on Udemy. Kivy School is an organization made by volunteers to teach others how to create Python apps using the Kivy framework and deploy them on all platforms: Android, iOS, Windows, macOS, Linux, Raspberry and on your toaster!"},
{"Title": "My little ChatGPT-Multimodal Server Starter", "Author": "TwistedMinda", "Content": "Please check out my Desktoppy Server. What My Project Does It allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's. It uses ollama internally so you can use all the open-source Models but by default it's using:\nLLama3 for text-generation\nLLava for image recognition\nStable Diffusion 2 for image generation"},
{"Title": "I made a small Python script that uses NASA'S APOD API to set cool backgrounds on a Windows machine", "Author": "Potato_eating_a_dog", "Content": "https://github.com/william7491681/APOD_Wallpaper_Script\nWhat my project does\nNASA has a ton of accessible API's, one of which being the APOD (Astronomy Picture Of the Day) API. I made a script to get the last 9 pictures of the day and set them as my Windows 10 background, and then used task scheduler to have the script re-run every day at noon and whenever the computer boots up. It's fairly hard coded for my setup (specific file paths, 1920x1080 monitor, etc), but it shouldn't be too hard to change if one wanted to."},
{"Title": "Async Python Clarifications", "Author": "Cool-Focus6556", "Content": "Ok, so just so I have this straight:\nAsyncio runs in a single thread and uses cooperative multitasking to context switch between tasks\nThe threading library creates threads and uses preemptive multitasking to context switch between threads\nAsyncio is more efficient than threading for the reasons above"},
{"Title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation", "Author": "pdcz", "Content": "Hi everyone, I'd like to share couple of news regarding my personal project:\nNew documentation written in Ludic showcasing it's capabilities: https://getludic.dev/docs/\nNew section regrading Layouts inspired from the Every Layout Book: https://getludic.dev/catalog/layouts\nCookiecutter template to get quickly started: https://github.com/paveldedik/ludic-template\nI have a lot of plans with this project and I'd appreciate any feedback. About The Project Ludic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components."},
{"Title": "The Problems with Celery", "Author": "hatchet-dev", "Content": "Hey everyone - I wrote up a blog post on the problems that we've encountered using Celery: https://docs.hatchet.run/blog/problems-with-celery Our issues with the Celery project were part of the reason why we started Hatchet. Would love to hear comments or feedback!"},
{"Title": "JSX Syntax inside Python files. (Packed)", "Author": "RevolutionaryPen4661", "Content": "There was a JSX-style syntax preprocessor for Python called \"Packed,\" which allowed us to write JSX inside Python (*.pyx and *.py) files. It's unclear why they chose *.pyx for the file extension, as it conflicts with the naming of Cythonic file extensions (I have checked their issues). This project might have thrived with sufficient contributions and could have changed the way apps are built. However, the project is now archived on GitHub. The last commit was 5 years ago (LICENSE), and the last development commit was 9 years ago. This repository needs someone to revive it, but I don't have enough experience to take on that task. Even though I don't have enough information, we should start with Rust + Python to build a compiler (aka. template replacer) (this doesn't compile Python but replaces all JSX with a dictionary) and cleaner syntax. Integration with Django (Packed has an example too), Flask, FastAPI, Robyn etc."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python's many command-line utilities", "Author": "treyhunner", "Content": "Python 3.12 comes bundled with 50 command-line tools. For example, python -m webbrowser http://example.com opens a web browser, python -m sqlite3 launches a sqlite prompt, and python -m ast my_file.py shows the abstract syntax tree for a given Python file. I've dug into each of them and categorized them based on their purpose and how useful they are. Python's many command-line tools"},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It’s a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "EFT - A file extension for implementing user created themes", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to implement custom themes into their programs, while having a file format that is human readable Example:\nmy_theme.eft - My Theme\n\nbackground_color : 255,255,255 : Color\ntitle : \"Hi\" : String\nnumber : 5 : Int\nenabled : true : Bool"},
{"Title": "DeepFusion: a highly modular Deep Learning Framework.", "Author": "atharvaaalok1", "Content": "What My Project Does: Hello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning. And Voila... I've developed a deep learning library, DeepFusion! Details: It's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code. You can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion"},
{"Title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa", "Author": "Jaeger1987", "Content": "What My Project Does Hello everyone! I've just released a new Python package, notion2pandas, which allows you to import a Notion database into a pandas dataframe with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code. Target Audience Whether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding! 🔗 GitLab repo: https://gitlab.com/Jaeger87/notion2pandas Key Features"},
{"Title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer What My Project Does: MyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience. mytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/"},
{"Title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it 🤞", "Author": "VoyZan", "Content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts: tl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in this Gist.\nProblem\nRequest rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of counter. Multiprocessing is not great at having a single shared variable."},
{"Title": "Thank You PyConUS 2024 !!!", "Author": "ryanstephendavis", "Content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon... I've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture."},
{"Title": "Using python for static typing benefits", "Author": "britishbanana", "Content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced. I'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyODMongo an ODM for MongoDB", "Author": "maurinhoandre", "Content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\nBuilt on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents."},
{"Title": "Speed improvements in Polars over Pandas", "Author": "zzoetrop_1999", "Content": "I'm giving a talk on polars in July. It's been pretty fast for us, but I'm curious to hear some examples of improvements other people have seen. I got one process down from over three minutes to around 10 seconds.\nAlso curious whether people have switched over to using polars instead of pandas or they reserve it for specific use cases."},
{"Title": "Tutorial on Surprisingly Simple Python Streamlit Dashboards", "Author": "jgloewen", "Content": "Streamlit is becoming an increasingly a popular framework for data visualization prototyping with Python. The Streamlit framework saves time, effort, and reduces the complexity traditionally associated with crafting maps and charts.Particularly if we approach application development with a modular approach. Starting simple, let’s put together 4 specific examples that leverage Streamlit for interactive data visualization:\nA global choropleth map for a dataset for a specific year."},
{"Title": "Interfacing Custom USB endpoints using Python!", "Author": "shekhuu", "Content": "Hi everyone, I was building something that required me to communicate over USB to Raspberry Pi Pico using Pyusb Python. So I decided to make a blog post about it showing the concepts, process, and source code.\nCheck out the blog post here!\nCheck out the source code here!"},
{"Title": "Mystique: Sparse data matching for Python tests", "Author": "jonocodes", "Content": "What My Project Does I made this library to help assert test responses inline while directing the comparison to be as rigid or lax as it needs to be. Motivation I write a lot of tests that assert values in complex nested dictionaries. But really I only need to check some parts in the response, not all of it. I often find myself transforming the response or maliciously extracting the important parts I need - in order to satisfy the assertions. This gets messy and can make tests hard to follow. Target Audience Anyone who writes tests. This is particularly useful if you generate fake data in your tests with something like Faker, Factory Boy, or Model Bakery."},
{"Title": "I made python audioplayer with FFmpeg and Qt6", "Author": "WyseTwist", "Content": "Midnight Player - a simple python audiplayer for playing audio What My Project Does: My project is just an audio player for playing music, it can play audio from folders, supports different audio formats like Flac, Mp3 and can show some information about the track. Player uses subprocess to access ffmpeg, then it decodes the audio file into pcm format, then plays this file using sounddevice library. the use of these libraries is to ensure that the audio file does not lose quality during processing. Target Audience: This project was made to increase experience in python programming and to understand how the audio playback process works, but the project is also useful for people who are interested in learning the structure of the audio player as it is open source."},
{"Title": "How to publish a Python package with GitHub Actions using Poetry", "Author": "johnfraney", "Content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/ If you've got any tips for publishing a Python package, I'd be happy to hear those, too"},
{"Title": "Reforger Whitelist Py", "Author": "PyjamaZombie", "Content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually. The target audience for this is the Arma Reforger community, for which, the application is made for. Currently, to my knowledge, there is no application like this available to the Arma Reforger community. I am very open to feedback, contributions and advice as want to expand this as much as possible!"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Traversible Tree in Python", "Author": "frankstan33", "Content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure. What My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times. There are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth)."},
{"Title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python", "Author": "aoeu512", "Content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging. Programmable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement."},
{"Title": "try... except... finally!", "Author": "young-and-ignorant", "Content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally. from your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()"},
{"Title": "Durable Python - Infrastructure failures should not stop the process", "Author": "autokitteh", "Content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience. It automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns. Consider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete. import requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation", "Author": "AlSweigart", "Content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books Be sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!) For $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Flappy Berd in PyQt", "Author": "GhnQuix", "Content": "Hello there What my project does: I’m excited to share my Flappy Bird clone, written in PyQt! This project captures all the fun of the original game with key features like pressing the spacebar to make the bird jump. Yes, I know, getting that key feature was challenging! 😃 As Richard Watterson once said: \"10/10 game, would play again.\" Target Audience This game is for anyone who’s bored and looking for a quick, fun way to pass the time. Whether you're a casual gamer or just curious, this Flappy Bird clone is a not so good way to relive the original experience. Comparison Think of it as a faithful recreation of Flappy Bird with a PyQt twist."},
{"Title": "I have made an open source library for logging errors / messages :)", "Author": "PossiblePandaYT", "Content": "What my project does\nAllow developers to easily log errors, messages, and warnings to the console, and an optional log file. Have you ever released a project, and then somebody runs your project and encounter an error, and you need to see their console? No worries, pandalog can store logs in a file wherever you choose. You can also have errors automatically be sent in the console & log through pandalog.\nTarget Audience"},
{"Title": "Just released my first Python package: Melodica Notes 🎶", "Author": "bettercallsenna", "Content": "Hey everyone! I’m excited to share my first Python package: Melodica Notes. It's a CLI tool aimed at helping melodica players with musical scales, chords, and harmonics. What My Project Does: Melodica Notes helps melodica players by providing easy access to musical scales, chords, and harmonic information directly from the command line. It's designed to be a simple yet powerful tool for both beginners and advanced players. Target Audience: This project is meant for anyone who plays the melodica (or piano), from casual hobbyists to serious musicians. It's also a project for developers interested in music-related applications. While it’s fully functional, I consider it an evolving tool and welcome contributions to enhance its features."},
{"Title": "steer - An interactive CLI tool to write json and yaml file from JSON schemas", "Author": "jcoelho93", "Content": "What my project does: It's an interactive tool to help you write json or yaml based on a JSON schema. I built this because I thought it would be helpful to write values.yaml files for Helm charts. But it can be used for a lot of other things like CICD configuration, OpenAPI specifications, etc. Target Audience Developers mostly, I guess Comparison I haven't seen anything similar to this. Except maybe spotlight for writing OpenAPI specs, except steer is from the command line. Code: Here's the GitHub repo https://github.com/jcoelho93/steer"},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "Async Python adoption?", "Author": "mcharytoniuk", "Content": "Are there any studies, large-scale polls, or anything about async coding adoption in Python? I wonder how widely the community accepts it, how widespread its usage is, and what the general sentiment is towards it."},
{"Title": "Tuples Are Underrated! List vs Tuple 🐍", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ☺️ https://youtu.be/-sO4FG6W4ho"},
{"Title": "Understanding Python Decorators", "Author": "ashok_tankala", "Content": "Without using decorators I think mostly we can’t build a decent application. They are everywhere.\nI wrote an article to get an understanding of Decorators. https://newsletter.piptrends.com/p/understanding-python-decorators I hope this will give you a good understanding of Decorators if you don't know about them."},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, …)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Author": "jgloewen", "Content": "The Python Shiny library is a framework for building interactive web applications in Python. Developed by RStudio, the same team behind the Shiny library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills. All that is needed is knowledge of the Shiny user interface Application Programming Interface (API). Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone."},
{"Title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies", "Author": "ManyInterests", "Content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are yanked. The important effect this has had is anyone who may have defined their requirements as something like PySimpleGUI<5 or PySimpleGUI==4.x.x for a now-deleted version, your installations will fail with a message like:"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tach - enforce module boundaries + deps, now in Rust 🦀", "Author": "the1024", "Content": "https://github.com/gauge-sh/tach Hey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\nRe-wrote the core in Rust, leading to a ~19x speed up on large repos\nRe-worked the interface, and added a TUI to let you interactively declare modules\nWe built Tach to solve the “ball of mud” problem that we’ve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!"},
{"Title": "New Lands RPG (Play testers welcome)", "Author": "Littlebudddy_321", "Content": "Good \"time of day\" my fellow peeps What my project does: I wanted to share my Python game I've been slowly working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you... Target Audience: I'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax..."},
{"Title": "Archand: Control your mouse entirely using hand gestures.", "Author": "prateekvellala", "Content": "Link: https://github.com/prateekvellala/Archand\nWhat My Project Does\nArchand allows you to control your mouse entirely using hand gestures which are performed in the air and captured via a webcam. Archand also has a speech-to-text feature which is activated by a specific gesture, transforming your spoken words into written text on your computer. With this, you can perform any task you would normally do with a keyboard as well, such as visiting websites, writing emails, texting people, etc."},
{"Title": "Rye-Tui, a Text-based User Interface (TUI) to manage rye projects", "Author": "Zaloog1337", "Content": "Hi everyone, Ive reached a state of my current project, where I want to share it with you, and gather some feedback. This is my first time using rye and I am surprised, how Hassle-Free building a package with it went. Source Code: github\nInstallation\npython -m pip install rye-tui"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "CopySave - And easy to use clipboard manager", "Author": "legend3008", "Content": "What my project does\nCopySave is an app that saves everything you copy in your clipboard locally, so it can be used later, thus saving time.\nTarget Audience\nEveryone who works at a pc, with data. Programmers, especially.\nComparison"},
{"Title": "I built a pipeline sending my wife and I SMSs twice a week with budgeting advice generated by AI", "Author": "MoodAppropriate4108", "Content": "What My Project Does:\nI built a pipeline of Dagger modules to send my wife and I SMSs twice a week with actionable financial advice generated by AI based on data from bank accounts regarding our daily spending. Details: Dagger is an open source programmable CI/CD engine. I built each step in the pipeline as a Dagger method. Dagger spins up ephemeral containers, running everything within its own container. I use GitHub Actions to trigger dagger methods that;"},
{"Title": "Seeking Feedback: Should Robyn(Web Framework) Support ASGI?", "Author": "stealthanthrax", "Content": "Hey Everyone 👋 The author of Robyn here. For those unaware, Robyn is one of the fastest Python web frameworks with a Rust runtime.Robyn offers a variety of features designed to enhance your web development experience. However, one topic that has sparked mixed feelings within the community is Robyn's choice of not supporting ASGI. I'd love to hear your thoughts on this. Specifically, what specific features of ASGI do you miss in Robyn? You can find Robyn's documentation here. We're aiming for a v1.0 release soon, and your feedback will be invaluable in determining whether introducing ASGI support should be a priority."},
{"Title": "We built open-source SDK for adding custom code interpreters to AI apps", "Author": "mlejva", "Content": "What My Project Does Hey everyone! I'm the CEO of the company that built an SDK that makes it easy to build custom code interpreters for AI apps. We're a company called E2B [0]. We're building and open-source [1] secure environments for running untrusted AI-generated code and AI agents. We call these environments sandboxes and they are built on top of micro VM called Firecracker [2]. We specifically decided to use Firecrackers instead of containers because of their security and ability to do snapshots. You can think of us as giving small cloud computers to LLMs. We recently created a dedicated SDK for building custom code interpreters in Python or JS/TS. We saw this need after a lot of our users have been adding code execution capabilities to their AI apps with our core SDK [3]. These use cases were often centered around AI data analysis so code interpreter-like behavior made sense"},
{"Title": "YouTube playlist with 100 most-watched Python 2023 conference talks", "Author": "TechTalksWeekly", "Content": "tldr; https://www.youtube.com/playlist?list=PLsaeJ8d49kCnv20dizZqF_EjAoAByNfMj long: Hello r/python! As a part of Tech Talks Weekly newsletter, I've put together a list of the most watched Python conference talks from 2023 as a youtube playlist. The list is ordered by the view count for your convenience. The talks come from conferences like PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. I've built the playlist as a part of my newsletter called Tech Talks Weekly where once a week I send out all the recently uploaded tech conference talks across engineering conferences ("},
{"Title": "I made a small Python script that uses NASA'S APOD API to set cool backgrounds on a Windows machine", "Author": "Potato_eating_a_dog", "Content": "https://github.com/william7491681/APOD_Wallpaper_Script\nWhat my project does\nNASA has a ton of accessible API's, one of which being the APOD (Astronomy Picture Of the Day) API. I made a script to get the last 9 pictures of the day and set them as my Windows 10 background, and then used task scheduler to have the script re-run every day at noon and whenever the computer boots up. It's fairly hard coded for my setup (specific file paths, 1920x1080 monitor, etc), but it shouldn't be too hard to change if one wanted to."},
{"Title": "Introducing Zenaura, python framework for building scalable, maintainable component based SPAs.", "Author": "Beneficial-Ad-9243", "Content": "What My Project Does Zenaura is a cutting-edge Python library, leveraging Pyodide and PyScript, designed to empower developers to create lightweight, performant, stateful, component-based Single Page Applications (SPAs) with ease. By utilizing a virtual DOM implementation, Zenaura enhances performance, reactivity, responsiveness, and interactivity, allowing developers to build dynamic web applications using familiar Python concepts and syntax. key features\nExceptional Developer Experience: Intuitive and efficient development workflow."},
{"Title": "JSX Syntax inside Python files. (Packed)", "Author": "RevolutionaryPen4661", "Content": "There was a JSX-style syntax preprocessor for Python called \"Packed,\" which allowed us to write JSX inside Python (*.pyx and *.py) files. It's unclear why they chose *.pyx for the file extension, as it conflicts with the naming of Cythonic file extensions (I have checked their issues). This project might have thrived with sufficient contributions and could have changed the way apps are built. However, the project is now archived on GitHub. The last commit was 5 years ago (LICENSE), and the last development commit was 9 years ago. This repository needs someone to revive it, but I don't have enough experience to take on that task. Even though I don't have enough information, we should start with Rust + Python to build a compiler (aka. template replacer) (this doesn't compile Python but replaces all JSX with a dictionary) and cleaner syntax. Integration with Django (Packed has an example too), Flask, FastAPI, Robyn etc."},
{"Title": "[OS] Burr -- Build AI Applications/Agents as State Machines", "Author": "benizzy1", "Content": "Hey folks! I wanted to share Burr, an open-source project we've been working on that I'm really excited about.\nTarget Audience\nDevelopers looking to integrate AI into their web services, or who are curious about state machines.\nThe problem\nMost AI-application frameworks are overly opinionated about how to craft prompts, interact with LLMs, and store memory in a specific format. See  for a nice summary. The problem is they often overlook more production-critical aspects such as managing and persisting state, integrating telemetry, bringing apps to production, and seamlessly switching between human input and AI decisions."},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It’s a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "Request to journalists: no snakes", "Author": "qabr", "Content": "Could you please stop using photos of snakes on your articles about Python? Not only is it unimaginative, stale, and cliché, but many of us also find it genuinely off-putting. Our passion certainly lies in coding, not necessarily in reptiles. P.S. Imagine 9 out of 10 articles on Windows featuring photos of pretty youknowwhat"},
{"Title": "DeepFusion: a highly modular Deep Learning Framework.", "Author": "atharvaaalok1", "Content": "What My Project Does: Hello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning. And Voila... I've developed a deep learning library, DeepFusion! Details: It's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code. You can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion"},
{"Title": "Instant Python pipeline from OpenAPI spec", "Author": "Thinker_Assignment", "Content": "Hey folks, I work on dlt, the open source python library for turning messy jsons into clean relational tables or typed, clean parquet datasets. We recently created 2 new tools: A python-dict based REST API extractor where you can just declare how to extract, and a tool that can init the above source fully configured by reading an OpenAPI spec. The generation of the pipes is algorithmic and deterministic, not LLM based. What My Project Does dlt-init-openapi, and the REST API toolkitare tool designed to simplify the creation of data pipelines by automating the integration with APIs defined by OpenAPI specifications. The pipelines generated are customizable Python pipelines that use the REST API source template that dlt offers (a declarative python-dict first way of writing pipelines)."},
{"Title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite", "Author": "JaggedParadigm", "Content": "What My Project Does: Moonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\necstatic: price too low so they are extra happy\ncontent: price is what they were expecting,\nsad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period"},
{"Title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer What My Project Does: MyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience. mytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/"},
{"Title": "What are the best Python projects you've worked on?", "Author": "NINTSKARI", "Content": "Off with the hate, what have been the best Python projects you have worked on? What did the code look like? What were the standards? Why was it the best?"},
{"Title": "Mesop, open-source Python UI framework used at Google to quickly build delightful web apps", "Author": "wwwillchen", "Content": "What my project does: I’m excited to share about Mesop - a new, open-source Python UI framework that enables Python developers to quickly build delightful web apps in a scalable way. A small team of us at Google have been developing Mesop as an unofficial 20% project for the past few months. A wide range of research and product teams at Google have been using it to rapidly build internal apps and we’ve gotten a lot of positive feedback internally so now we’re looking to get feedback from the open-source community. Target audience: Python developers looking to build AI demos & internal apps."},
{"Title": "Thank You PyConUS 2024 !!!", "Author": "ryanstephendavis", "Content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon... I've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Dask DataFrame is Fast Now!", "Author": "phofl93", "Content": "My colleagues and I have been working on making Dask fast. It’s been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload). I wrote a blog post on what we did: https://docs.coiled.io/blog/dask-dataframe-is-fast.html Really, this came down not to doing one thing really well, but doing lots of small things “pretty good”. Some of the most prominent changes include:\nApache Arrow support in pandas"},
{"Title": "Python script to automate Bing searches for reward generation", "Author": "adityashrivastav", "Content": "What My Project Does\n(Link) Check this out : aditya-shrivastavv/ranwcopy Python program which generates random words and sentences and copy them to clipboard🗒️. I created a script to automate Bing searches for reward generation\n👍 Excellent command line experience.\n🙂 User friendly."},
{"Title": "Automate your WordPress new-page creation with Python", "Author": "EngineeringFit5761", "Content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin). It's a simple app, but has great expansion potential and it's really easy to use. To start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page. Run the program, add sections, choose your desired structure, and select the right widgets for your content. Once you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)"},
{"Title": "I created a video on why you should be careful when using Python dictionaries as function parameter", "Author": "justinezila", "Content": "This talks about mutability as Changes inside a function affect the original dictionary which could lead to unexpected behaviors and hard to debug issues. Here is a link to the video https://www.youtube.com/watch?v=zTTDQePffxU"},
{"Title": "Granian 1.4 is out", "Author": "gi0baro", "Content": "Granian – the Rust HTTP server for Python applications – 1.4 was released! Blog post: https://polar.sh/emmett-framework/posts/granian-1-4 Release details: https://github.com/emmett-framework/granian/releases/tag/v1.4.0 Repo: https://github.com/emmett-framework/granian"},
{"Title": "py4cli (A python library for developing scalable cli utility tools using declarative programming)", "Author": "Palani-SN", "Content": "py4cli (Scalable Argument Parser)\nTarget Audience\n* Developers who want to develop scalable cli utility tools in python using declarative programming\nComparison \n* Even Though Python have great libraries for passing command line arguments, those libraries aren't scalable for complex use case. So, I have developed a scalable argument parser, which not only helps in passing cli arguments, but also can alter the execution flow of the code based on arguments."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Lightning-Fast Text Classification with LLM Embeddings on CPU", "Author": "brunneis", "Content": "I'm happy to introduce fastc, a humble Python library designed to make text classification efficient and straightforward, especially in CPU environments. Whether you’re working on sentiment analysis, spam detection, or other text classification tasks, fastc is oriented for small models and avoids fine-tuning, making it perfect for resource-constrained settings. Despite its simple approach, the performance is quite good. Key Features\nFocused on CPU execution: Use efficient models like deepset/tinyroberta-6l-768d for embedding generation."},
{"Title": "My little ChatGPT-Multimodal Server Starter", "Author": "TwistedMinda", "Content": "Please check out my Desktoppy Server. What My Project Does It allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's. It uses ollama internally so you can use all the open-source Models but by default it's using:\nLLama3 for text-generation\nLLava for image recognition\nStable Diffusion 2 for image generation"},
{"Title": "Password protect Pdf using python", "Author": "Trinity_software", "Content": "https://youtu.be/sSPWHRpDZXo?si=b-HJ4Cu1sN-tFls1 This video explains how files ( all types) are encrypted and decrypted with PyAesCrypt module of python. Also using pypdf module , pdf files are password protected. Decryption of password protected pdf can also be done"},
{"Title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation", "Author": "pdcz", "Content": "Hi everyone, I'd like to share couple of news regarding my personal project:\nNew documentation written in Ludic showcasing it's capabilities: https://getludic.dev/docs/\nNew section regrading Layouts inspired from the Every Layout Book: https://getludic.dev/catalog/layouts\nCookiecutter template to get quickly started: https://github.com/paveldedik/ludic-template\nI have a lot of plans with this project and I'd appreciate any feedback. About The Project Ludic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components."},
{"Title": "RESTful API Hosting", "Author": "Loose_Read_9400", "Content": "Good morrow all, I have a simple rest api I have initially developed using Flask. This is a super low utilization app, that may receive 10-12 requests per week. Currently, I have it running a local network using my main machine as the server. This has been great for testing and development, but I need to transition to a more permanent hosting situation. I have been looking at Azure Functions and this seems like the way to go, and would fall under the free tier from what I can tell. Is this the way to go? OR Should i look at other options? This is something for work, not a personal project."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Python's many command-line utilities", "Author": "treyhunner", "Content": "Python 3.12 comes bundled with 50 command-line tools. For example, python -m webbrowser http://example.com opens a web browser, python -m sqlite3 launches a sqlite prompt, and python -m ast my_file.py shows the abstract syntax tree for a given Python file. I've dug into each of them and categorized them based on their purpose and how useful they are. Python's many command-line tools"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa", "Author": "Jaeger1987", "Content": "What My Project Does Hello everyone! I've just released a new Python package, notion2pandas, which allows you to import a Notion database into a pandas dataframe with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code. Target Audience Whether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding! 🔗 GitLab repo: https://gitlab.com/Jaeger87/notion2pandas Key Features"},
{"Title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it 🤞", "Author": "VoyZan", "Content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts: tl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in this Gist.\nProblem\nRequest rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of counter. Multiprocessing is not great at having a single shared variable."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Using python for static typing benefits", "Author": "britishbanana", "Content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced. I'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things."},
{"Title": "Speed improvements in Polars over Pandas", "Author": "zzoetrop_1999", "Content": "I'm giving a talk on polars in July. It's been pretty fast for us, but I'm curious to hear some examples of improvements other people have seen. I got one process down from over three minutes to around 10 seconds.\nAlso curious whether people have switched over to using polars instead of pandas or they reserve it for specific use cases."},
{"Title": "PyODMongo an ODM for MongoDB", "Author": "maurinhoandre", "Content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\nBuilt on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents."},
{"Title": "Interfacing Custom USB endpoints using Python!", "Author": "shekhuu", "Content": "Hi everyone, I was building something that required me to communicate over USB to Raspberry Pi Pico using Pyusb Python. So I decided to make a blog post about it showing the concepts, process, and source code.\nCheck out the blog post here!\nCheck out the source code here!"},
{"Title": "Tutorial on Surprisingly Simple Python Streamlit Dashboards", "Author": "jgloewen", "Content": "Streamlit is becoming an increasingly a popular framework for data visualization prototyping with Python. The Streamlit framework saves time, effort, and reduces the complexity traditionally associated with crafting maps and charts.Particularly if we approach application development with a modular approach. Starting simple, let’s put together 4 specific examples that leverage Streamlit for interactive data visualization:\nA global choropleth map for a dataset for a specific year."},
{"Title": "Mystique: Sparse data matching for Python tests", "Author": "jonocodes", "Content": "What My Project Does I made this library to help assert test responses inline while directing the comparison to be as rigid or lax as it needs to be. Motivation I write a lot of tests that assert values in complex nested dictionaries. But really I only need to check some parts in the response, not all of it. I often find myself transforming the response or maliciously extracting the important parts I need - in order to satisfy the assertions. This gets messy and can make tests hard to follow. Target Audience Anyone who writes tests. This is particularly useful if you generate fake data in your tests with something like Faker, Factory Boy, or Model Bakery."},
{"Title": "I made python audioplayer with FFmpeg and Qt6", "Author": "WyseTwist", "Content": "Midnight Player - a simple python audiplayer for playing audio What My Project Does: My project is just an audio player for playing music, it can play audio from folders, supports different audio formats like Flac, Mp3 and can show some information about the track. Player uses subprocess to access ffmpeg, then it decodes the audio file into pcm format, then plays this file using sounddevice library. the use of these libraries is to ensure that the audio file does not lose quality during processing. Target Audience: This project was made to increase experience in python programming and to understand how the audio playback process works, but the project is also useful for people who are interested in learning the structure of the audio player as it is open source."},
{"Title": "How to publish a Python package with GitHub Actions using Poetry", "Author": "johnfraney", "Content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/ If you've got any tips for publishing a Python package, I'd be happy to hear those, too"},
{"Title": "Reforger Whitelist Py", "Author": "PyjamaZombie", "Content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually. The target audience for this is the Arma Reforger community, for which, the application is made for. Currently, to my knowledge, there is no application like this available to the Arma Reforger community. I am very open to feedback, contributions and advice as want to expand this as much as possible!"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Traversible Tree in Python", "Author": "frankstan33", "Content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure. What My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times. There are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth)."},
{"Title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python", "Author": "aoeu512", "Content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging. Programmable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement."},
{"Title": "try... except... finally!", "Author": "young-and-ignorant", "Content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally. from your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()"},
{"Title": "Durable Python - Infrastructure failures should not stop the process", "Author": "autokitteh", "Content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience. It automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns. Consider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete. import requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation", "Author": "AlSweigart", "Content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books Be sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!) For $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Fields and class properties should be sorted alphabetically?", "Author": "Myterro", "Content": "Hello, I'm having code-review suggestion doubts about sorting alphabetically fields in classes, e.g. Pydantic models. For example, there's a model: class Example(BaseModel):\n    id: int\n    name: str\n    surname: str\n    age: int\n    operation: str"},
{"Title": "Tuples Are Underrated! List vs Tuple 🐍", "Author": "JosephLovesPython", "Content": "Do you feel like you're underutilizing tuples in you code? Maybe cause you think lists are always the correct choice, and tuples don't have a place to exist. In this video we will walk through the differences between lists and tuples, especially focusing on a difference very rarely discussed, albeit it being the most crucial one: the semantic. Following that we will elaborate how and when it is better to utilize either lists or tuples! Any feedback on the content would be highly appreciated ☺️ https://youtu.be/-sO4FG6W4ho"},
{"Title": "CMake configs for Python modules (Pytest, Sphinx, …)", "Author": "buddly27", "Content": "As Python is one of the most popular languages, many C++ projects end up using Python bindings of some sort. Pytest and Sphinx are very popular frameworks, so many CMake modules have been written, and most projects end up including a copy of these modules or using some hardcoded paths. I wrote two Python packages to manage the installation and update of CMake configs for Pytest and Sphinx.\nhttps://github.com/python-cmake/pytest-cmake"},
{"Title": "Polars news: Faster CSV writer, dead expr elimination optimization, hiring engineers.", "Author": "commandlineluser", "Content": "Details about added features in the releases of Polars 0.20.17 to Polars 0.20.31\nhttps://pola.rs/posts/polars-in-aggregate-jun24/"},
{"Title": "Code review for my simple project", "Author": "Mews75", "Content": "I've made this simple little package to stretch out audios https://github.com/Mews/simpleaudiostretch However I'm still new to uploading packages to pypi and doing documentation and the sorts, so I'd appreciate it if someone could review my project and see if what I'm doing are the best practices. Thank you in advance if anyone is willing to help"},
{"Title": "Wave Equation Solver in Python", "Author": "salastrodaemon", "Content": "Hello r/Python,\nWhat My Project Does\nI wanted to share a Python project I've been working on called WavePDE. WavePDE is a simulation and animation tool for studying wave equations in one or two dimensions. It's a handy tool for anyone interested in wave phenomena, also it's customizable and interactive. You can adjust domain size, grid resolution, wave speed, time step, boundary conditions (Dirichlet or Neumann), initial conditions, and more. Additionally, it is possible save your simulations as video files for further analysis or presentations."},
{"Title": "Self updating spreadsheet with popular questions from Ask Reddit and summarized answers using OpenAI", "Author": "DouweOsinga", "Content": "What My Project Does\nThis is a small Python script that runs inside a Google Sheet by way of the Python add-on. It uses the reddit api to fetch posts from Ask Reddit twice daily. For posts with enough upvotes, it uses the OpenAI API to summarize an answer to the question based on the comments. I then inserts any new questions and their answers into the spreadsheet and uses the Twitter APIto also post the answer to Twitter I mean X. Should be interesting to anybody looking to connect (a subset) of those APIs."},
{"Title": "Tutorial: How To Create Professional Python Shiny Dashboards In A Jiffy", "Author": "jgloewen", "Content": "The Python Shiny library is a framework for building interactive web applications in Python. Developed by RStudio, the same team behind the Shiny library for R, this library is particularly useful for data scientists and analysts who want to build interactive dashboards and applications without having extensive front-end development skills. All that is needed is knowledge of the Shiny user interface Application Programming Interface (API). Python Shiny can be used to develop applications that allow users to interact with data in real time. Data scientists can quickly prototype data applications and share them with anyone."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "1BRC solution using CPython", "Author": "pappuks", "Content": "What My Project Does: I finally got some time to attempt the 1 Billion Row Challenge (1BRC) (https://www.morling.dev/blog/one-billion-row-challenge/) where we are supposed to process a file with 1 billion records of temperature values for cities and print a sorted list with min, max and mean temperature per city. I am a sucker for optimization. So when I heard about 1BRC I got intrigued and in the last few days started experimenting with python implementations. I achieved my goal and implemented the fastest implementation running on CPython, without any external libraries. My motivation for CPython was so that I can apply any of the learning's in my day to day work, as I don't see us moving to PyPy any time sooner."},
{"Title": "Community Insights on PgQueuer", "Author": "GabelSnabel", "Content": "Hey r/Python! A while ago, I introduced you to PgQueuer, a Python library designed for handling job queues using Postgres native functionalities. If you've started using PgQueuer, I’m keen to initiate a discussion on your experiences with it.\nHow and where have you integrated PgQueuer into your projects?\nAny difficulties or shortcomings you’ve experienced while using PgQueuer?\nThoughts on the library’s efficiency and features?"},
{"Title": "A Beginner's Guide to Unit Testing with Pytest", "Author": "Stanulilic", "Content": "Hey r/python! I wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link."},
{"Title": "PSA: PySimpleGUI has deleted [almost] all old LGPL versions from PyPI; update your dependencies", "Author": "ManyInterests", "Content": "Months ago, PySimpleGUI relicensed from LGPL3 to a proprietary license/subscription model with the release of version 5 and nuked the source code and history from GitHub. Up until recently, the old versions of PySimpleGUI remained on PyPI. However, all but two of these have been deleted and those that remain are yanked. The important effect this has had is anyone who may have defined their requirements as something like PySimpleGUI<5 or PySimpleGUI==4.x.x for a now-deleted version, your installations will fail with a message like:"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tach - enforce module boundaries + deps, now in Rust 🦀", "Author": "the1024", "Content": "https://github.com/gauge-sh/tach Hey everyone! Wanted to share some pretty significant updates to the tool I've been working on. Tach lets you define module boundaries and enforce rules across your modules, including isolation, dependencies, and strict interfaces. Some updates -\nRe-wrote the core in Rust, leading to a ~19x speed up on large repos\nRe-worked the interface, and added a TUI to let you interactively declare modules\nWe built Tach to solve the “ball of mud” problem that we’ve ran into throughout all of my previous work experiences. Over time, the codebase would become tightly coupled together, making even simple changes/refactors painful. By setting up module boundaries and enforcing them early on, you can avoid all of this!"},
{"Title": "New Lands RPG (Play testers welcome)", "Author": "Littlebudddy_321", "Content": "Good \"time of day\" my fellow peeps What my project does: I wanted to share my Python game I've been slowly working on over the past... I'd say 1.5 years. It is a simple texted based resource collection game where you travel to different areas, collect resources, sell them in town but be careful there are bandits about, so don't go too far without having some cooked fish on you... Target Audience: I'd say its mainly for well... everyone, anyone who enjoys text based games and anyone who wants to chill out on a rainy day when all the other games in their steam library are looking boring and they just want to relax..."},
{"Title": "Keep system awake (prevent sleep) using python: wakepy", "Author": "fohrloop", "Content": "Hi all, I had previously a problem that I wanted to run some long running python scripts without being interrupted by the automatic suspend. I did not find a package that would solve the problem, so I decided to create my own. In the design, I have selected non-disruptive methods which do not rely on mouse movement or pressing a button like F15 or alter system settings. Instead, I've chosen methods that use the APIs and executables meant specifically for the purpose. I've just released wakepy 0.9.0 which supports Windows, macOS, Gnome, KDE and freedesktop.org compliant DEs."},
{"Title": "Bayesian bandits item pricing in a simplified Moonlighter shop simulation using Python and SQLite", "Author": "JaggedParadigm", "Content": "What My Project Does: Moonlighter is a game that includes a mechanic where you place items on shelves in your store and set the price. Customer's reactions give you hints about what prices would be ideal. These reactions take the form of four moods:\necstatic: price too low so they are extra happy\ncontent: price is what they were expecting,\nsad: price is too high to them but they buy anyway and this lowers the price everyone will pay for a certain period"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Mesop, open-source Python UI framework used at Google to quickly build delightful web apps", "Author": "wwwillchen", "Content": "What my project does: I’m excited to share about Mesop - a new, open-source Python UI framework that enables Python developers to quickly build delightful web apps in a scalable way. A small team of us at Google have been developing Mesop as an unofficial 20% project for the past few months. A wide range of research and product teams at Google have been using it to rapidly build internal apps and we’ve gotten a lot of positive feedback internally so now we’re looking to get feedback from the open-source community. Target audience: Python developers looking to build AI demos & internal apps."},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Author": "Content_Ad_4153", "Content": "Problem Statement I recently explored SonarQube for static code analysis. While it’s a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself. Target Audience This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback! Comparison with Similar Tools There was only one similar tool in the Sonar Marketplace, but it’s no longer maintained. Project Details I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub."},
{"Title": "Dask DataFrame is Fast Now!", "Author": "phofl93", "Content": "My colleagues and I have been working on making Dask fast. It’s been fun. Dask DataFrame is now 20x faster and ~50% faster than Spark (but it depends a lot on the workload). I wrote a blog post on what we did: https://docs.coiled.io/blog/dask-dataframe-is-fast.html Really, this came down not to doing one thing really well, but doing lots of small things “pretty good”. Some of the most prominent changes include:\nApache Arrow support in pandas"},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Author": "Eastern_Reporter_834", "Content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!"},
{"Title": "Automate your WordPress new-page creation with Python", "Author": "EngineeringFit5761", "Content": "Hi everyone! I'm sharing with you a Python tool I've built and been using, intended to haste new-page creation in WordPress (with Elementor plugin). It's a simple app, but has great expansion potential and it's really easy to use. To start, you will previously need a WordPress site with Elementor installed and activated, and the content you want to introduce into the new page. Run the program, add sections, choose your desired structure, and select the right widgets for your content. Once you've loaded the content, add your credentials and click Confirm & Run (or just press Enter). The system will do the rest :)"},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Author": "good-guy-coder", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities. What My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI. GitHub Repository: NiimPrintX"},
{"Title": "Granian 1.4 is out", "Author": "gi0baro", "Content": "Granian – the Rust HTTP server for Python applications – 1.4 was released! Blog post: https://polar.sh/emmett-framework/posts/granian-1-4 Release details: https://github.com/emmett-framework/granian/releases/tag/v1.4.0 Repo: https://github.com/emmett-framework/granian"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "zeroize: Securely clear secrets from memory", "Author": "radumarias", "Content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "My little ChatGPT-Multimodal Server Starter", "Author": "TwistedMinda", "Content": "Please check out my Desktoppy Server. What My Project Does It allows you to run your own personal AI on your computer, say bye-bye rate-limits and paywalls from mainstream AI's. It uses ollama internally so you can use all the open-source Models but by default it's using:\nLLama3 for text-generation\nLLava for image recognition\nStable Diffusion 2 for image generation"},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Author": "radumarias", "Content": "https://github.com/radumarias/rencrypt-python\nWhat My Project Does: A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\nTarget Audience This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet."},
{"Title": "Reactive programming for Python with live-cells-py", "Author": "alex-gutev", "Content": "live-cells-py (Live Cells Python) is a reactive programming library which I ported from Live Cells for Dart.\nWhat my project Does:\nYou can declare cells which are observable containers for data: import live_cells as lc\n\na = lc.mutable(0)"},
{"Title": "Ludic Update: Web Apps in pure Python with HTMX, Themes, Component Catalog, new Documentation", "Author": "pdcz", "Content": "Hi everyone, I'd like to share couple of news regarding my personal project:\nNew documentation written in Ludic showcasing it's capabilities: https://getludic.dev/docs/\nNew section regrading Layouts inspired from the Every Layout Book: https://getludic.dev/catalog/layouts\nCookiecutter template to get quickly started: https://github.com/paveldedik/ludic-template\nI have a lot of plans with this project and I'd appreciate any feedback. About The Project Ludic allows web development in pure Python with components. It uses HTMX to add UI interactivity and has a catalog of components."},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Author": "eonlav", "Content": "What My Project Does Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models. Video running Phi-2 model on a MacBook Air with 8GB RAM, all CPU Target Audience Devs looking to experiment with integrating on-device AI into their software. Comparison\nJARVIS - an all API-based solution using DeepGram, OpenAI and ElevenLabs\nLocal Talking LLM - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word."},
{"Title": "The possibility to build Android apps with python professionally is here and needs your support.", "Author": "klargstein", "Content": "You guys really need to check this. I believe new comers to python would love to tinker with the android ecosystem from the safety of python :-) Imgur: https://imgur.com/gallery/DtfwOVi https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course Edit: added imgur link."},
{"Title": "Python's many command-line utilities", "Author": "treyhunner", "Content": "Python 3.12 comes bundled with 50 command-line tools. For example, python -m webbrowser http://example.com opens a web browser, python -m sqlite3 launches a sqlite prompt, and python -m ast my_file.py shows the abstract syntax tree for a given Python file. I've dug into each of them and categorized them based on their purpose and how useful they are. Python's many command-line tools"},
{"Title": "Calculator without eval()", "Author": "Zorgon-589", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python. TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions. COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators! See the below link for github: https://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "You should only use licensed version of python", "Author": "vikashgraja", "Content": "I’m an intern in a company and I automated some processes using python. My company’s IT wing said that as long as it is a licensed software you can use it in our company. In my mind I was like where the f I’m going to get a license for an open source software. Note : They mention that another team has been using licensed python. I thought either IT is so stupid or that team is so smart that they brought license for pycharm or anaconda (claim that it is a Python license) and fooled IT. If I am wrong then tell me where I can get that license. And I am also looking for job in data analyst."},
{"Title": "Notion2Pandas: A new python package to import Notion Database into Pandas framework and viceversa", "Author": "Jaeger1987", "Content": "What My Project Does Hello everyone! I've just released a new Python package, notion2pandas, which allows you to import a Notion database into a pandas dataframe with just one line of code, and to update a Notion database from a pandas dataframe also with just one line of code. Target Audience Whether you're a data scientist, a data engineer, a Python enthusiast, or just curious, 'pip install notion2pandas' from the terminal, follow the tutorial in the README, and happy coding! 🔗 GitLab repo: https://gitlab.com/Jaeger87/notion2pandas Key Features"},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try."},
{"Title": "Dash Pip Components", "Author": "Soolsily", "Content": "What My Project Does\nHey everyone, just released 8 new pip components for plotly and dash including:\nFull Calendar Component - A Full Calendar Component for Dash\nDash Summernote - A rich text WYSIWYG Editor for Dash\nDash Emoji Mart - A Slack-like Emoji Picker for Dash\nDash Charty - A Charting Library for Dash"},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Author": "neozhaoliang", "Content": "What My Project Does An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs. Target Audience RAG applications developers. Comparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies."},
{"Title": "Rate Limiting + Multiprocessing = Nightmare? But I think I've found one nice way to do it 🤞", "Author": "VoyZan", "Content": "If you're interested in Python multiprocessing, I'd appreciate if you read this and share your thoughts: tl;dr: I've implemented a cross-process request rate limiter, allowing for N requests per T seconds. See it in this Gist.\nProblem\nRequest rate limiting (or throttling) requires a place in memory to track the the amount of calls already made - some kind of counter. Multiprocessing is not great at having a single shared variable."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Circler imports in Observer design pattern in Python", "Author": "ALior1", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve. At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error. I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this."},
{"Title": "Using python for static typing benefits", "Author": "britishbanana", "Content": "I'm interested in using cython specifically for introducing static typing to parts of a code base. For anyone who has used cython, could you give any details about your experience with introducing it gradually, how it changed the deployment and execution processes, how well it played with code that is calling lots of 3rd party frameworks. Also curious to hear about any headaches or issues it introduced. I'm less interested in the performance benefits, more interested in static type checks. I do use mypy already but I'm left quite lacking with it compared to real compilation checks. I'm curious more generally about the possibility of having a code base that mixes static and dynamic typing, and if I could stay in Python while doing that instead of going to Rust that would really simplify things."},
{"Title": "HS-transform, python package for hyperbolic S-transform in signal processing", "Author": "Ok_Employ_2414", "Content": "I made a python package for S-transform with Hyperbolic window (Hyperbolic S-transform or HSTransform package). This is my first time publishing a python package, so the project is still far from stable and still under beta release.\nWhat my project does: This transformation is applied to signal processing, analyzing transient changes of a signal during very short-time. Some special use case can be in power system signal, or Geophysical signal analysis, or MRI ..."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyODMongo an ODM for MongoDB", "Author": "maurinhoandre", "Content": "What My Project Does: PyODMongo is a modern Python library that serves as a robust Object-Document Mapper (ODM) and seamlessly bridges the gap between Python and MongoDB. It offers an intuitive and efficient way to interact with documents.\nBuilt on top of Pydantic V2, PyODMongo ensures that documents in the database rigorously represent the structure of Python objects. This means that documents are saved and retrieved from the database exactly as a Python object is structured, regardless of how nested the objects are and whether they are stored persistently or by reference. PyODMongo can automatically populate these documents."},
{"Title": "I made a cheatsheet for pydash", "Author": "poopatroopa3", "Content": "https://brunodantas.github.io/pydash-cheatsheet/en/\nWhat my project does: pydash is a library with great potential to make you code more Functional and simple. I made this cheatsheet a while ago to highlight some of the most useful functions of the library, since there are so many. I hope it's useful.\nTarget audience: anyone who is interested in pydash, functional programming, not reinventing the wheel."},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python) * **What My Project Does** A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try. * **Target Audience** This is just a toy project as a learning experience"},
{"Title": "Tutorial on Surprisingly Simple Python Streamlit Dashboards", "Author": "jgloewen", "Content": "Streamlit is becoming an increasingly a popular framework for data visualization prototyping with Python. The Streamlit framework saves time, effort, and reduces the complexity traditionally associated with crafting maps and charts.Particularly if we approach application development with a modular approach. Starting simple, let’s put together 4 specific examples that leverage Streamlit for interactive data visualization:\nA global choropleth map for a dataset for a specific year."},
{"Title": "IconMatch - find icons and letters positions from images!", "Author": "TraditionalDistrict9", "Content": "Hey all, I am not the original creator, but found that 4yo project, and decided to revive it! What my project does: IconMatch is library allowing you to extract icons and letter positions from image or from display! There is also realtime demo on repo showcasing how it works! Target Audience: For all detecting objects from display! Comparison: I did not find other project like that - but it was my first find too! It is also not OCR! https://github.com/NativeSensors/IconMatch Have fun!"},
{"Title": "AndroidWorld — Build and test AI agents on Android", "Author": "crawles89", "Content": "What it does: It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging. It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them. Target Audience: Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you’d like and test out the default agent, M3A, on it. Just give it a task like “Show my most recent purchases on Amazon.” You can also build your own agent."},
{"Title": "Tutorial: Simple Pretty Maps That Will Improve Your Python Streamlit Skills", "Author": "jgloewen", "Content": "Interactive web applications for data visualization improve user engagement and understanding. These days, Streamlit is a very popular framework used to provide web applications for data science. It is a terrific programming tool to have in you Python knowledge toolbox. Here’s a fun and practical tutorial on how to create a simple interactive and dynamic Streamlit application. This application generates a beautiful and original map using the prettymaps library. Free article: HERE"},
{"Title": "Rio: WebApps in pure Python – Thanks and Feedback wanted!", "Author": "Sn3llius", "Content": "Hey everyone, I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for! As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned! We are looking forward to your feedback, so let us hear from you! :) GitHub"},
{"Title": "2024 StackOverflow Survey", "Author": "monorepo", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish. Link to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "cachebox: The fastest caching library written in Rust", "Author": "SpareRevolution1487", "Content": "What my library does You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs. One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary. Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code."},
{"Title": "Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient Code", "Author": "Slow_Scene_7972", "Content": "Optimize Your Python Workflow: Proven Techniques for Crafting Production-Ready Code Link"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Enhanced EPUB Version of \"An Understated Dominance\" Available for Fans!", "Author": "abdirxhmxn", "Content": "Hey everyone! I recently completed a fun project that I think fans of \"An Understated Dominance\" will appreciate, especially those who have struggled with reading the novel online due to website clutter and distractions. I've created a clean, distraction-free EPUB version of the novel that you can download and read on your preferred device. You can get it here: EPUB Download. Why I did this: The original website hosting the novel has a lot of distractions that can take away from the reading experience. My goal was to provide a seamless reading experience that allows you to fully immerse yourself in the story without unnecessary interruptions."},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Author": "PyDataAmsterdam", "Content": "Hey all, we will close the Call for Proposals portal this Sunday, June 2, for our PyData Amsterdam 2024 Conference which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > https://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "Picodi - Simplifying Dependency Injection in Python", "Author": "yakimka", "Content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features"},
{"Title": "Homoiconic Python Code", "Author": "moonbunR", "Content": "Homoiconic, what does it mean? In simple terms, homoiconic code is when code is treated as data and can be manipulated as you would data. This means the code can be changed, new functions and variables added, the code can generate new code or even examine and modify its own structure and behavior all while it is running. That’s why homoiconic languages like Lisp are so powerful. But what if we can make a homoiconic python code, where the code and the data are one and the same and can be modified in the same way? This guide does a good job in trying to explain how you would create a python version of the “Lisp in Lisp” code which would give you access to all those homoiconic features that Lisp brags of like the macro systems, the expressiveness and flexibility, the metaprogramming etc. while still using python. What do you guys think of this?"},
{"Title": "The best Python CLI library, arguably.", "Author": "AND_MY_HAX", "Content": "What My Project Does https://github.com/treykeown/arguably arguably makes it super simple to define complex CLIs. It uses your function signatures and docstrings to set everything up. Here's how it works:\nAdding the @arguably.command decorator to a function makes it appear on the CLI.\nIf multiple functions are decorated, they'll all be set up as subcommands. You can even set up multiple levels of subcommands."},
{"Title": "LinkedIn-Learning-Downloader v1.1", "Author": "YounesWinter", "Content": "With Python i created a tool that enables users to download LinkedIn Learning courses, including the often overlooked but incredibly valuable exercise files. This feature sets our project apart, offering a complete learning experience by providing both the course videos and the materials needed for practical application.\nWhat great about it and beyond other tools in the same genre concerned LinkedIn Learning Downloaders, now you can download the whole courses from a path link. this is was never possible without Python."},
{"Title": "FastAPI Backend Template for SaaS products", "Author": "shekhuu", "Content": "Hello there, I just created a template for creating a backend for your SaaS products. What my project does: It is a FastAPI project/template for creating SaaS backends and admin dashboards. Comparison: \nOut of the box, it supports\nLicence key generation and validation.\nOAuth 2 authentication with scopes."},
{"Title": "this.s and this.d", "Author": "VladTbk", "Content": "Recently, I found out about the this \"Easter egg\" in python3. Adding import this into a py file will print \"The Zen of Python\" by Tim Peters. Also, this has two attributes: this.s and this.d, which I guess form the actual Easter egg. this.s returns an encrypted version of \"The Zen\" and this.d well, see for yourself, maybe you'll solve the puzzle."},
{"Title": "I made a Mandelbrot Zoom using Python", "Author": "AbideByReason", "Content": "I made a YouTube video which previews the zoom and explains the code, which you can find here: https://youtu.be/HtNUFdh2sjg What my project does: it creates a Mandelbrot Zoom. Comparison: it uses Pillow and consists of just 2 main blocks of code: one is the main function that finds which points are in the Mandelbrot Set and the other is the main loop that applies appropriate colors to each image. It gives the option of being black and white OR in color. It works fairly well but can definitely be faster if parallelized. I'd love to hear any suggestions on how it can be improved. Target Audience: fun/toy project"},
{"Title": "sjvisualizer: a python package to animate time-series data", "Author": "PieChartPirate", "Content": "What the project does: data animation library for time-series data. Currently it supports the following chart types:\nBar races\nAnimated Pie Charts\nAnimated Line Charts\nAnimated Stacked Area Charts"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Auto Data Analysis python packages to know", "Author": "mehul_gupta1997", "Content": "Check this video tutorial to explore different AutoEDA python packages like pandas-profiling, sweetviz, dataprep,etc which can enable automatic data analysis within minutes without any effort : https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry"},
{"Title": "Folks who know the internals: Where does operator precedence \"happen\"?", "Author": "BeerIsTheMindKiller", "Content": "Hey! Messing around with instaviz, cool library, highly recommend. You can visualize a function's bytecode as well as AST and some other stuff. i entered this: def f():\n  x = 1 + 2 - 10**2\n  return x I was expecting the AST nodes for 1 + 2 - 10**2 to be rearranged somehow, with 10**2 being moved to the left hand of the expression, because exponents get evaluated before addition/subtraction. but no! just looks like this:"},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "Self updating spreadsheet with popular questions from Ask Reddit and summarized answers using OpenAI", "Author": "DouweOsinga", "Content": "What My Project Does\nThis is a small Python script that runs inside a Google Sheet by way of the Python add-on. It uses the reddit api to fetch posts from Ask Reddit twice daily. For posts with enough upvotes, it uses the OpenAI API to summarize an answer to the question based on the comments. I then inserts any new questions and their answers into the spreadsheet and uses the Twitter APIto also post the answer to Twitter I mean X. Should be interesting to anybody looking to connect (a subset) of those APIs."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "1BRC solution using CPython", "Author": "pappuks", "Content": "What My Project Does: I finally got some time to attempt the 1 Billion Row Challenge (1BRC) (https://www.morling.dev/blog/one-billion-row-challenge/) where we are supposed to process a file with 1 billion records of temperature values for cities and print a sorted list with min, max and mean temperature per city. I am a sucker for optimization. So when I heard about 1BRC I got intrigued and in the last few days started experimenting with python implementations. I achieved my goal and implemented the fastest implementation running on CPython, without any external libraries. My motivation for CPython was so that I can apply any of the learning's in my day to day work, as I don't see us moving to PyPy any time sooner."},
{"Title": "Community Insights on PgQueuer", "Author": "GabelSnabel", "Content": "Hey r/Python! A while ago, I introduced you to PgQueuer, a Python library designed for handling job queues using Postgres native functionalities. If you've started using PgQueuer, I’m keen to initiate a discussion on your experiences with it.\nHow and where have you integrated PgQueuer into your projects?\nAny difficulties or shortcomings you’ve experienced while using PgQueuer?\nThoughts on the library’s efficiency and features?"},
{"Title": "Keep system awake (prevent sleep) using python: wakepy", "Author": "fohrloop", "Content": "Hi all, I had previously a problem that I wanted to run some long running python scripts without being interrupted by the automatic suspend. I did not find a package that would solve the problem, so I decided to create my own. In the design, I have selected non-disruptive methods which do not rely on mouse movement or pressing a button like F15 or alter system settings. Instead, I've chosen methods that use the APIs and executables meant specifically for the purpose. I've just released wakepy 0.9.0 which supports Windows, macOS, Gnome, KDE and freedesktop.org compliant DEs."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PDF Reports for SonarQube Analysis ( Community Edition )", "Author": "Content_Ad_4153", "Content": "Problem Statement I recently explored SonarQube for static code analysis. While it’s a great tool, the free edition lacks the ability to generate PDF reports, making it hard to share issues. There was no maintained plugin available, so I decided to solve this problem myself. Target Audience This started as a hobby/side project, but I wanted to share it in case others find it useful. I'm open to suggestions and feedback! Comparison with Similar Tools There was only one similar tool in the Sonar Marketplace, but it’s no longer maintained. Project Details I've developed and published a Python library called RedCoffee, which generates PDF reports from SonarQube analysis. You can find it on PyPi and GitHub."},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "ReqFlow - Simplifying API Testing with Python", "Author": "Eastern_Reporter_834", "Content": "Hello everyone!\nWhat My Project Does\nI'm excited to share ReqFlow - a Python library designed to make API testing straightforward and efficient. It offers a fluent interface for building and validating HTTP requests, making it a handy tool for small-sized testing frameworks or utilities. While it's still in development and might have some bugs, I would love your feedback and contributions to improve it!"},
{"Title": "NiimPrintX: A desktop app for NiimBot Label Printers developed in Python", "Author": "good-guy-coder", "Content": "I'm super excited to share NiimPrintX, a desktop app I've been working on for NiimBot label printers. This is my first release, and I am actively working on adding new functionalities. What My Project Does:\nNiimPrintX offers both a command line and graphical user interface app to connect with your NiimBot printer. It connects via Bluetooth and makes label printing a breeze. The app is developed completely using Python 3.12 and the Tkinter library for the GUI. GitHub Repository: NiimPrintX"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "zeroize: Securely clear secrets from memory", "Author": "radumarias", "Content": "https://github.com/radumarias/zeroize-python\nWhat My Project Does: Clear secrets from memory. Built on stable Rust primitives which guarantee memory is zeroed using an operation will not be 'optimized away' by the compiler.\nTarget Audience it can be used in production, it's just a simple wrapper over zeroize crate from Rust\nComparison Personally I didn't found an easy and safe solution in Python to do this, hence I created this lib"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "A blend of Rust and Python: a faster encryption for Python", "Author": "radumarias", "Content": "https://github.com/radumarias/rencrypt-python\nWhat My Project Does: A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data.\nTarget Audience This lib hasn't been audited, but it mostly wraps ring crate which is a well known library, so in principle it should offer as similar level of security. This is still under development. Please do not use it with sensitive data just yet."},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "AI Voice Assistant using on-device LLM, STT, TTS and Wake Word tech", "Author": "eonlav", "Content": "What My Project Does Allows you to have a voice-to-voice interaction with an LLM, similar to the ChatGPT app, except with all inference running locally. You can choose from a few different open-weight models. Video running Phi-2 model on a MacBook Air with 8GB RAM, all CPU Target Audience Devs looking to experiment with integrating on-device AI into their software. Comparison\nJARVIS - an all API-based solution using DeepGram, OpenAI and ElevenLabs\nLocal Talking LLM - a higher-latency, more resource intensive local approach using Whisper, Llama and Bark, but with no wake word."},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "Calculator without eval()", "Author": "Zorgon-589", "Content": "WHAT MY PROJECT DOES: Solves basic arithmetic problems in an interactive way in python. TARGET AUDIENCE: Anyone, it's just a program to get practice using loops, lists, and functions. COMPARISON: This program functions as a calculator without the use of the eval() function to make everything superfluously easy. It's not perfect and my next version is gonna try and address queries with parenthesis and multiple operators! See the below link for github: https://github.com/Zorgon589/Calculator/tree/main"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "REncrypt\nWhat My Project Does A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption. If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try."},
{"Title": "musicnotes: Python module for playing musical instruments!", "Author": "must1088", "Content": "https://github.com/must108/musicnotes\nWhat My Project Does\nmusicnotes is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers."},
{"Title": "RAGFlow: Deep document understanding RAG engine", "Author": "neozhaoliang", "Content": "What My Project Does An open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers layout recognition, OCR-based chunking templates for data cleasing and provides hallucination-free answers with traceable citations. Compatible with mainstream LLMs. Target Audience RAG applications developers. Comparison\nIt offers various chunking templates for various fils categories, such as resume, legal documents, table, and print copies."},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Author": "XUtYwYzz", "Content": "I saw the words 'visual effects', just give me GIFs Understandable, visit the Effects Showroom first. Then come back if you like what you see. What My Project Does TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features. Use cases:\nInvoke at terminal launch to produce an animation (ex: fetch)."},
{"Title": "Circler imports in Observer design pattern in Python", "Author": "ALior1", "Content": "So I'm trying to do a small refresher in design patterns and I reached the Observer pattern.\nAnd I'm encounter a circular import error that I'm not sure how to solve. At first I had two files: `observers.py` and `subjects.py`, which each contained the abstract class and some concrete ones.\nBut because each had to know about the other, I got a circler import error. I tried to put them in the same file, but than the first cant use the second.\nAlso tried to put the Observer in the \"subjects.py\" file, textualy before \"Subject\", that worked, but not clear to me why.\nI know that in compiled languages, they just use an interface, but we dont have it in Python.\nTried to solved it in a various ways, but want to hear others, how you think this can be solved and opinons on this."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Preferred method to run python in VS Code", "Author": "SuperMB13", "Content": "Been working on a python tool for VS Code. Curious to get peoples' opinion on how they run python files (not notebooks) within VS Code. Do you typically run files python by:\nTyping the python command into the integrated terminal\nClicking the run button at the top of the file\nPressing F5 for debugging\nPressing Ctrl+F5 for run but not debug"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "pip time machine", "Author": "rejectedlesbian", "Content": "https://github.com/nevakrien/time_machine_pip this is a fairly simple project barely anything to it but I think its promising\nthe idea is to put pip in a time machine so it can not use package versions that were made after the project is made. I am doing this by proxiying pypi and cutting out the newer versions. initial tests show that pip respects the proxy and works like you would expect"},
{"Title": "Choosing between dash and react", "Author": "Berlibur", "Content": "At work I'm getting the question to build a platform that will be used to navigate all kinds of business metrics to different levels of granularity. Ideally there is also insights on their relationships, and advice on actions to take. I have experience with both Dash and React, and my feeling says to go with React (and a python backend). Mostly because I foresee this application to grow over time, and managing big Dash applications (as a dev) can get clunky. However, in my team there's no extra JavaScript (let alone React) knowledge. While there is a solid base for Python. There might be opportunities to source outside the team/company, which I'd have to make a strong case for."},
{"Title": "New project: A blend of Rust and Python: speeding up Python encryption", "Author": "radumarias", "Content": "[https://github.com/radumarias/rencrypt-python](https://github.com/radumarias/rencrypt-python) * **What My Project Does** A Python encryption library implemented in Rust. It supports AEAD with AES-GCM and ChaCha20Poly1305. It uses ring to handle encryption.If offers slightly higher speed compared to other Python libs, especially for small chunks of data. The API also tries to be easy to use but it's more optimized for speed than usability. So if you are open to experiment and want to achieve the highest possible encryption speed, consider giving it a try. * **Target Audience** This is just a toy project as a learning experience"},
{"Title": "Gloe: A lightweight lib to create readable and type-safe pipelines", "Author": "justme_sam", "Content": "Have you ever faced a moment when your code is a mess of nested classes and functions, and you have to dig through dozens of levels to understand a simple function? Gloe (pronounced like “glow”) is a library designed to assist you organize your code into a type-safe flow, making it flat and linear. What My Project Does Here’s what it can do for you:\nWrite type-safe pipelines with pure Python.\nExpress your code as a set of atomic and extensible units of responsibility called transformers."},
{"Title": "Building an LLM chat application using RAG Agent", "Author": "iryna_kondr", "Content": "Motivation\nChatbots are among the most popular applications of large language models (LLMs). Often, an LLM's internal knowledge base is adequate for answering users questions. However, in those cases, the model may generate outdated, incorrect, or too generic responses when specificity is expected. These challenges can be partially addressed by supplementing the LLM with an external knowledge base and employing the retrieval-augmented generation (RAG) technique. However, if user queries are complex, it may be necessary to break the task into several sub-parts. In such cases, relying solely on the RAG technique may not be sufficient, and the use of agents may be required."},
{"Title": "AndroidWorld — Build and test AI agents on Android", "Author": "crawles89", "Content": "What it does: It is for building AI agents that perform tasks for you on Android using LLMs. Agents read the screen and perform actions like clicking, typing, and dragging. It includes a test suite of 116 tasks across 20 real-world apps to evaluate agent performance. Think of each task like a unit test, with a setup, evaluation, and tear down procedure. Every task is written in Python. The most powerful agents should be able to pass all of them. Target Audience: Anyone looking to experiment with LLM for controlling Android UIs. You can download any app you’d like and test out the default agent, M3A, on it. Just give it a task like “Show my most recent purchases on Amazon.” You can also build your own agent."},
{"Title": "What changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ?", "Author": "These_Shoe3594", "Content": "What are all the changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ? There are some CVE fixes available in the latest 3.x version of werkzueg. To take the fixes as part of my code, we want to upgrade the version. When I do so, I’ve faced lot of breakages. I found some on documents and release notes. But it would be easier if someone already did some changes regarding this."},
{"Title": "Book Management Restful-API", "Author": "ThePawners", "Content": "What My Project Does: This project aims to provide a simple and efficient way to manage a collection of books through various API endpoints. This API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn."},
{"Title": "Rio: WebApps in pure Python – Thanks and Feedback wanted!", "Author": "Sn3llius", "Content": "Hey everyone, I'm a Rio developer, and I just wanted to say thanks for all the feedback we've received so far! Since our launch, we've implemented a lot of the features you asked for! As requested, we are currently working on an in-depth technical description of Rio, explaining how it works under the hood. So stay tuned! We are looking forward to your feedback, so let us hear from you! :) GitHub"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "2024 StackOverflow Survey", "Author": "monorepo", "Content": "This years SO survey is out now. It includes questions for Python tooling and frameworks. Contribute when you can, it closes soon. It takes ~10 minutes to finish. Link to the survey: https://stackoverflow.az1.qualtrics.com/jfe/form/SV_6rJVT6XXsfTo1JI"},
{"Title": "Langchain using llama3 to build recommendation system", "Author": "yngwieHero", "Content": "Hi, Recently I played a bit with LLMs, specifcally exploring ways of running the models locally and building prompts using LangChain. As a result ended up coding a small recommendation system, powered with Llama3-7b model, which suggests topics to read on HackerNews. Wanted to share my experiences, so I wrote a small article where I described all my findings.\nHope you'll like it: https://lukaszksiezak.github.io/ScrapyToLLM/ Github repo: https://github.com/lukaszksiezak/ScrapyToLLM What the project does: It's a Python application which uses scrapy to scrape HackerNews page. Scraped articles are pipelined to redis, which is then feeding Llama3 using langchain. Prompter is configured to serve a user articles which are matching his request."},
{"Title": "SH1106 OLED Screen App Framework for Raspberry Pi - Now on PyPI", "Author": "danyourmaster", "Content": "What it does:\nToday, I released the first working version of my SH1106 app framework for Raspberry Pi on PyPI! The SH1106 is an affordable OLED screen, costing under $3, and it's perfect for projects of all sizes. This package enables the creation of apps for it with graphics support, state management, image conversion utilities, and custom fonts. Check it out here: SH1106 Framework on PyPI. Target audience:\nThe package is mainly aimed at hobbyists who want to create small projects using the SH1106 OLED without having to manually write a lot of the graphics code typically needed on top of standard packages. I am also developing a hardware synthesizer keyboard from scratch that utilizes this framework extensively. So far, the framework handles the massive scaling required for this project excellently in terms of both code organization and performance."},
{"Title": "cachebox: The fastest caching library written in Rust", "Author": "SpareRevolution1487", "Content": "What my library does You can easily and powerfully perform caching and memoizing operations in your Python projects using my library. This library is written in Rust, which makes its performance very fast and efficient. By using this library, you can use 7 different caching algorithms that allow you to choose the best algorithm based on your needs. One prominent feature of this library is its simplicity to work with. You just need to import the library into your project and then behave with it like a dictionary. Therefore, if you are looking for a powerful, fast, and simple library for caching and memoizing in Python, my library will be responsive to your needs. By using this library, you can improve the performance of your program and significantly reduce the execution time of your Python code."},
{"Title": "PyCon US 2024 is here!", "Author": "monorepo", "Content": "Official Event"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Crowbar - Package Management without Venv", "Author": "coryalanfitz", "Content": "https://github.com/coryfitz/crowbar What it does: I'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don’t have to think about them. First: pip install crowbar-package-manager Basically you just install and run things with the crowbar command rather than pip: crowbar install package_name And then you also run things with the crowbar command rather than using \"python\" - crowbar then runs the program based on the packages in the local environment rather than having to activate your virtual environment. It's inspired by npm if you've used that with js."},
{"Title": "Blat AI generates Python code to do web-scraping (code based on Scrapy framework)", "Author": "arnaupv", "Content": "Miguel Algorri and Arnau Pont Vílchez here, blat co-founders! Target Audience\nPeople who need to collect public data from the web (pricing, articles, reviews, leads etc). What does our Project Do?\nAt blat we aim to deliver production-ready web scraping code in minutes (written in Python, Scrapy framework).\nThis is feasible thanks to our Web Scraping AI Agent 🧠. Here our CLI to interact with the Web Scraping AI Agent (github). Too good to be true?"},
{"Title": "PyData Amsterdam 2024 Call for Proposals closes on Sunday, June 2", "Author": "PyDataAmsterdam", "Content": "Hey all, we will close the Call for Proposals portal this Sunday, June 2, for our PyData Amsterdam 2024 Conference which will take place on September 18-20 in Amsterdam. We are looking for presentations that can captivate our audience, provide invaluable insights, and foster community learning. Don't miss this chance to speak on stage in front of over 800 attendees in the field of Data & AI. Submit a talk here > https://amsterdam2024.pydata.org/cfp/cfp"},
{"Title": "An IDE with the same step by step functionality as in Matlab", "Author": "Cerricola", "Content": "When working with Matlab I love how I can run the code step by step to debug it. Even being able to \"step in\" functions and loops. Then, I was looking to an IDE with a similar functionality for Python. Nowadays I'm using Spyder."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Apple Health data exploration with Atlas, Clickhouse, Vega-Altair, Quarto", "Author": "__tosh", "Content": "What My Project Does A few days ago I wrote a simple python script (\"Atlas\") that turns the Apple Health export.xml file (which is about 1 GB in my case, with about 10 years of data) into a very simple parquet file (a bit like a compressed CSV) that is also way smaller (40 MB). The parquet file has 5 columns:\ntype (e.g. \"CyclingDistance\")\nvalue (e.g. \"12.100\")"},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "Spotify Lyrics visualizer", "Author": "Mews75", "Content": "What My Project Does Because spotify made their lyrics menu a premium only feature, I thought I'd make my own replacement for it.\nThe app connects to your spotify account, fetches the lyrics from various websites, and then syncs them automatically to what is currently playing. Basically does the exact same as the lyrics menu used to do. Target Audience Anyone who wants to see the lyrics to songs really. Comparison Most other apps that I've found are either browser only, or don't actually sync the lyrics to the song, they just show the entire lyrics at once.\nIn comparison, my app shows the lyrics line by line, synced with the song, and also has (in my opinion lol) a fairly nice looking ui.\nIt's also very easy to use for non programmers too, since you can just download an executable to use the app."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a python bot that plays minesweeper", "Author": "_dwightshrute", "Content": "Hello, I made this Minesweeper bot that I wanted to share with you all. What My Project Does - The bot takes a screenshot of the board and runs a classification algorithm to extract the contents of the board. It then analyzes the board, finds as many mines as it can, and sends clicks. If it cannot find any mines then it guesses the most probable position of a mine. Target Audience - It's a toy project for anyone interested in algorithms or problem-solving. Comparison - This is just my attempt at making a minesweeper bot. I'm sure there are many bots out there that are much more efficient than this."},
{"Title": "I created an unofficial module for the ShipEngine API", "Author": "Status_Bid_1604", "Content": "What My Project Does Simplifies the interaction with the ShipEngine API with most response and requests built as objects, which in my opinion makes interaction much easier. This is my first released package so all criticism and feedback is very welcome. Target Audience Anyone who deals with the current ShipEngine API using Python. Comparison There is an official ShipEngine API module that is created by the company but I have found it somewhat lack luster with no way to create batches or bulk shipments (and other missing functionality), this is much more suited to accomplishing that task."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Xenharmlib - An advanced music theory library that supports microtonality", "Author": "realretooth", "Content": "Introducing Xenharmlib (Source code here) What My Project Does (taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music. Target Audience Composers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general."},
{"Title": "Production grade AI Web apps, just using python ?", "Author": "prime_danger", "Content": "Hey guys, I have worked on building multiple ai/ml usecases and their specific backends. But now I want build interfaces for easy and quick integration. I saw a blog which used FastUI which looks quick decent but when I tried it just showed me a Json of elements on the page. Are there any other libraries I should use? 🤔"},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Is PyGame still alive?", "Author": "pyeri", "Content": "So it was a long time ago in the good old Python 2.x days (circa 2010 probably) that I had learned PyGame with some tutorials at my former work place. But nowadays since I mostly freelance with business apps, I never felt the need for it. But since such a game development project is on the horizon after all these years, I was wondering if PyGame can still be up for the task with Python 3.x? Or is there a better Python library available these days? I don't need any advanced gaming features of modern day VFX or anything, all I need is some basic Mario/Luigi style graphics, that's all!"},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "AI planner: AI tool for efficient event scheduling in Google Calendar.", "Author": "nginx26", "Content": "Good evening! I have created a new projectfor adding events to google calendar based on the text a user inputs. What My Project Does The project is a tool that uses large language models to understand the user's input and add events to the user's Google Calendar based on the user's input. It uses Ollama for natural language understanding and Google Calendar API for adding events to the user's calendar. How My Project Works Ollama uses Llama 3 with pre-instructions to act as a calendar event planner. The tool uses the model to generate responses to extract the event's details from the user's input inserted in the Web Interface. tool then asks the user to confirm the details extracted from the user's input and adds the event to the user's Google Calendar (example shown )"},
{"Title": "Track the size of your PyInstaller packages in CI", "Author": "bencherdev", "Content": "If you have ever wanted to track the size of your PyInstaller packages in CI, Bencher now supports tracking your package size: https://bencher.dev/docs/how-to/track-file-size/"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyPods: A lightweight solution to execute Python dependencies in an isolated fashion.", "Author": "Brilliant_Emphasis63", "Content": "Introducing PyPods What My Project Does A Python library designed to manage monolithic project architectures by isolating dependencies. Traditionally, monolithic architectures cluster all dependencies into one project, creating complexities and potential conflicts. PyPods offers a solution by isolating these dependencies and enabling the main project to communicate with them via remote procedure calls. This approach eliminates the need to install dependencies directly in the main project. Feel free to take a look and I am happy to receive some feedback! Target Audience"},
{"Title": "I created a Python script that makes it easier to track how your baby's sleep is improving", "Author": "BX1959", "Content": "My wife and I use the Huckleberry app to track our baby's sleep periods. Although the free version of the app allows you to view a number of sleep-related metrics, I also wanted to see whether his longest nightly sleep stretches were getting longer over time. Therefore, I created a Python project to help me answer this and other questions I had about my baby's sleep.\nWhat My Project Does\nThis project reads in data from a Huckleberry .csv export (or a separate custom .csv file); analyzes its sleep information; and then produces ."},
{"Title": "musicnotes: Python module for playing musical instruments!", "Author": "must1088", "Content": "https://github.com/must108/musicnotes\nWhat My Project Does\nmusicnotes is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers."},
{"Title": "I made a desktop chat app :)", "Author": "Reasonable-Zone-7909", "Content": "What My Project Does Hi! This is my first time doing a python project more than a few hours in size. I made a chat app which features E2E encryption using a passcode and has a multiclient architecture. All comments are welcome! Target Audience It is just a toy project for my portfolio. Comparison Compared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner. But I think that IRC already has this, so it doesn't differ much XD. Git link: https://github.com/xxzoltanxx/Balvan-Chat"},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Author": "XUtYwYzz", "Content": "I saw the words 'visual effects', just give me GIFs Understandable, visit the Effects Showroom first. Then come back if you like what you see. What My Project Does TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features. Use cases:\nInvoke at terminal launch to produce an animation (ex: fetch)."},
{"Title": "ChatGPT can talk with all my Python notebooks", "Author": "pp314159", "Content": "I'm working on an open-source framework for converting Python notebooks into web applications, it is called Mercury. Recently, I have added an option to execute notebooks with REST API. You can pass paramters in POST request body to the notebook, execute all cells and return JSON as response. I'm also running a SaaS service, Mercury Cloud where you can deploy notebooks with one-click with unique website domain. What My Project Does It makes Python notebooks extermely easy to integrate with custom ChatGPT, so GPT can execute Python notebooks and get response. It is 3-steps process:"},
{"Title": "Preferred method to run python in VS Code", "Author": "SuperMB13", "Content": "Been working on a python tool for VS Code. Curious to get peoples' opinion on how they run python files (not notebooks) within VS Code. Do you typically run files python by:\nTyping the python command into the integrated terminal\nClicking the run button at the top of the file\nPressing F5 for debugging\nPressing Ctrl+F5 for run but not debug"},
{"Title": "Framework to use for backend", "Author": "Clickyz", "Content": "Hello guys I recently decided to move from nodejs(expressjs) to python for general purposes but mostly for backend. I have couple of questions.\nWill i regret my migration to python? :)\nWhich framework you suggest for backend solo dev?\nAnd what tips are you suggesting me in general to get used to python."},
{"Title": "Choosing between dash and react", "Author": "Berlibur", "Content": "At work I'm getting the question to build a platform that will be used to navigate all kinds of business metrics to different levels of granularity. Ideally there is also insights on their relationships, and advice on actions to take. I have experience with both Dash and React, and my feeling says to go with React (and a python backend). Mostly because I foresee this application to grow over time, and managing big Dash applications (as a dev) can get clunky. However, in my team there's no extra JavaScript (let alone React) knowledge. While there is a solid base for Python. There might be opportunities to source outside the team/company, which I'd have to make a strong case for."},
{"Title": "New Python-only abstractions for extracting data from apis", "Author": "Thinker_Assignment", "Content": "Hey there, you are probably familiar with REST APIs.\nWe at dlt library added a new way to get data from apis (and dlt can already load it with best practice to db or parquet). We already did some internal hackathons but we would appreciate your feedback so we can improve it further\n- Our new REST API Source is a short, declarative configuration driven way of creating sources.\n- Our new REST API Client is a collection of Python helpers used by the above source, which you can also use as a standalone, config-free, imperative high-level abstraction for building pipelines.\nYou can read more about the source here or go to our docs for the REST APIClient info\n\nPS: see you at Pycon Pittsburgh!"},
{"Title": "Gloe: A lightweight lib to create readable and type-safe pipelines", "Author": "justme_sam", "Content": "Have you ever faced a moment when your code is a mess of nested classes and functions, and you have to dig through dozens of levels to understand a simple function? Gloe (pronounced like “glow”) is a library designed to assist you organize your code into a type-safe flow, making it flat and linear. What My Project Does Here’s what it can do for you:\nWrite type-safe pipelines with pure Python.\nExpress your code as a set of atomic and extensible units of responsibility called transformers."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Book Management Restful-API", "Author": "ThePawners", "Content": "What My Project Does: This project aims to provide a simple and efficient way to manage a collection of books through various API endpoints. This API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn."},
{"Title": "Interactive Data Visualization with Python: A Showcase of Plotly Dash", "Author": "AbhishekSuryavanshee", "Content": "What My Project Does:\nI'm excited to introduce my latest project built with Python – an interactive data visualization application using Plotly Dash. This project aims to empower users to explore and analyze datasets dynamically through interactive visualizations. By leveraging Plotly Dash's capabilities, users can interact with data in real-time, customize visualizations on the fly, and gain deeper insights with just a few clicks. Target Audience:\nThis project caters to a wide range of users, from data enthusiasts and analysts to professionals seeking to communicate insights effectively. Whether you're a data scientist exploring patterns in large datasets or a business analyst presenting findings to stakeholders, this tool is designed to streamline your workflow and enhance your data storytelling capabilities. It's suitable for both production-grade applications and educational purposes, offering a versatile platform for data visualization tasks of varying complexity."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Declarative GUI Slint v1.6 released with Design Mode (WYSIWYG) Improvements", "Author": "madnirua", "Content": "https://slint.dev/blog/slint-1.6-released Slint is a declarative GUI toolkit to build native user interfaces for desktop and embedded applications. Find more information at https://slint.dev/ or check out the source code at https://github.com/slint-ui/slint. EDIT: The Python APIs are currently in alpha. More info -- https://github.com/slint-ui/slint/tree/master/api/python"},
{"Title": "SH1106 OLED Screen App Framework for Raspberry Pi - Now on PyPI", "Author": "danyourmaster", "Content": "What it does:\nToday, I released the first working version of my SH1106 app framework for Raspberry Pi on PyPI! The SH1106 is an affordable OLED screen, costing under $3, and it's perfect for projects of all sizes. This package enables the creation of apps for it with graphics support, state management, image conversion utilities, and custom fonts. Check it out here: SH1106 Framework on PyPI. Target audience:\nThe package is mainly aimed at hobbyists who want to create small projects using the SH1106 OLED without having to manually write a lot of the graphics code typically needed on top of standard packages. I am also developing a hardware synthesizer keyboard from scratch that utilizes this framework extensively. So far, the framework handles the massive scaling required for this project excellently in terms of both code organization and performance."},
{"Title": "Implementing your own pypi clone", "Author": "chione99", "Content": "Hi, Just want to know how difficult is it to manage your own pypi clone and how do you recommend to create a seperation between dev and prod systems."},
{"Title": "Crowbar - Package Management without Venv", "Author": "coryalanfitz", "Content": "https://github.com/coryfitz/crowbar What it does: I'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don’t have to think about them. First: pip install crowbar-package-manager Basically you just install and run things with the crowbar command rather than pip: crowbar install package_name And then you also run things with the crowbar command rather than using \"python\" - crowbar then runs the program based on the packages in the local environment rather than having to activate your virtual environment. It's inspired by npm if you've used that with js."},
{"Title": "Manage Your Squid Proxy Server Efficiently with This Python Script", "Author": "SAV_NC", "Content": "🦑 Squid Proxy Manager Script Hello fellow Python enthusiasts! I've created a Python script that makes managing your Squid Proxy Server a breeze. If you're looking for an efficient and straightforward way to interact with your Squid server remotely, this script is for you. 🎉 What My Project Does The Squid Proxy Manager script allows you to manage your Squid Proxy Server remotely using a simple command-line interface. Here are some of the key features:\nCheck Squid Service Status: Quickly check if your Squid service is running or not."},
{"Title": "An IDE with the same step by step functionality as in Matlab", "Author": "Cerricola", "Content": "When working with Matlab I love how I can run the code step by step to debug it. Even being able to \"step in\" functions and loops. Then, I was looking to an IDE with a similar functionality for Python. Nowadays I'm using Spyder."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "modern_colorthief - Modified Median Cut Quantization algorithm in rust + python", "Author": "BasePlate_Admin", "Content": "github\ndocumentation\nWhat my project does : It gets the dominant color/color palette from given image. Target Audience: Anyone Usage modern_colorthief exposes two functions get_color and get_palette Here is how to use get_color: from modern_colorthief import get_color\n\n# Path to any image\npath = ...\n\nprint(get_color(path)) # returns tuple[int,int,int]"},
{"Title": "Spotify Lyrics visualizer", "Author": "Mews75", "Content": "What My Project Does Because spotify made their lyrics menu a premium only feature, I thought I'd make my own replacement for it.\nThe app connects to your spotify account, fetches the lyrics from various websites, and then syncs them automatically to what is currently playing. Basically does the exact same as the lyrics menu used to do. Target Audience Anyone who wants to see the lyrics to songs really. Comparison Most other apps that I've found are either browser only, or don't actually sync the lyrics to the song, they just show the entire lyrics at once.\nIn comparison, my app shows the lyrics line by line, synced with the song, and also has (in my opinion lol) a fairly nice looking ui.\nIt's also very easy to use for non programmers too, since you can just download an executable to use the app."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I created an unofficial module for the ShipEngine API", "Author": "Status_Bid_1604", "Content": "What My Project Does Simplifies the interaction with the ShipEngine API with most response and requests built as objects, which in my opinion makes interaction much easier. This is my first released package so all criticism and feedback is very welcome. Target Audience Anyone who deals with the current ShipEngine API using Python. Comparison There is an official ShipEngine API module that is created by the company but I have found it somewhat lack luster with no way to create batches or bulk shipments (and other missing functionality), this is much more suited to accomplishing that task."},
{"Title": "Frame - a new language for programming state machines in Python", "Author": "framelanger", "Content": "Hey, I am (re)releasing a project called Frame that I've been working on to create a language and transpiler to easily create state machines/automata in Python. It also is able to generate UML documentation as well. This project is for people who are interested in programming state machines for a wide range of purposes such as game programming, workflows, MBSE modeling as well as school projects for comp sci theory. It is also useful simply for generating flow documentation. The Framepiler (Frame transpiler) is in beta at this time. It would be great to get feedback from the Python community on any gaps in key functionality or bugs."},
{"Title": "Xenharmlib - An advanced music theory library that supports microtonality", "Author": "realretooth", "Content": "Introducing Xenharmlib (Source code here) What My Project Does (taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music. Target Audience Composers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general."},
{"Title": "SQLPage - a Python library to add string token based pagination easily", "Author": "kernelslayer", "Content": "What My Project Does - This is a Python package to easily add string token based pagination. Currently it supports SQLModel and SQLAlchemy ORMs. Recently I wanted to add pagination in one of my Python projects and in the API response, I had to return a string next page token. Now I could not find a straight-forward way of doing this in Python. All of the tutorials or blog posts I saw, there in the response the server always returned a page_number, page_size, and total_elements and then the onus was on the calling service to adjust this accordingly.  Comparison - The current packages and methods requires some changes in the app layer as well. I tried using a few but those did not satisfy the use case and were also a bit harder to implement. I could not find a easy to use option. The present ones returned integers instead of a string token"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "UXsim 1.3.0 released with vehicle tracking and improved vehicle routing", "Author": "Balance-", "Content": "Main Changes\nAdd GUI functions\nVehicle tracking: You can now track a specific vehicle to see their route\nDataframe viewer: Stats can be confirmed\nImprove vehicle routing functions\nAdd example of routing optimization"},
{"Title": "AI planner: AI tool for efficient event scheduling in Google Calendar.", "Author": "nginx26", "Content": "Good evening! I have created a new projectfor adding events to google calendar based on the text a user inputs. What My Project Does The project is a tool that uses large language models to understand the user's input and add events to the user's Google Calendar based on the user's input. It uses Ollama for natural language understanding and Google Calendar API for adding events to the user's calendar. How My Project Works Ollama uses Llama 3 with pre-instructions to act as a calendar event planner. The tool uses the model to generate responses to extract the event's details from the user's input inserted in the Web Interface. tool then asks the user to confirm the details extracted from the user's input and adds the event to the user's Google Calendar (example shown )"},
{"Title": "Resume Screening Chatbot using RAG Fusion", "Author": "Babe_My_Name_Is_Hung", "Content": "Hi everyone! I recently finished a small side project for my graduating thesis, which is about experimenting with RAG-based frameworks in improving resume screening. What my project does: The project for the thesis is a GPT-4 Chatbot with RAG Fusion retrieval. Given a job description as input, the system retrieves the most relevant candidate profiles to perform follow-up tasks such as analysis, summarization, and decision-making, which can assist the screening process better. The revolving idea is that the similarity-based retrieval process can effectively narrow the initial large pool of applicants down to the most relevant resumes. However, this simple similarity ranking should not be used to evaluate a candidate's actual ability. Therefore, the top resumes are used to augment the GPT-4 Chatbot so it can be conditioned on these profiles and perform further downstream tasks."},
{"Title": "PyPods: A lightweight solution to execute Python dependencies in an isolated fashion.", "Author": "Brilliant_Emphasis63", "Content": "Introducing PyPods What My Project Does A Python library designed to manage monolithic project architectures by isolating dependencies. Traditionally, monolithic architectures cluster all dependencies into one project, creating complexities and potential conflicts. PyPods offers a solution by isolating these dependencies and enabling the main project to communicate with them via remote procedure calls. This approach eliminates the need to install dependencies directly in the main project. Feel free to take a look and I am happy to receive some feedback! Target Audience"},
{"Title": "I made a desktop chat app :)", "Author": "Reasonable-Zone-7909", "Content": "What My Project Does Hi! This is my first time doing a python project more than a few hours in size. I made a chat app which features E2E encryption using a passcode and has a multiclient architecture. All comments are welcome! Target Audience It is just a toy project for my portfolio. Comparison Compared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner. But I think that IRC already has this, so it doesn't differ much XD. Git link: https://github.com/xxzoltanxx/Balvan-Chat"},
{"Title": "Giving New Life to JModelica: Bringing Powerful Modelica Simulations to Python", "Author": "foadsf", "Content": "Five years ago, I posted about JModelica, a fantastic open-source tool for simulating complex systems that combined the ease of Python with the strength of Modelica. Sadly, the project went quiet, but I'm thrilled to share that, thanks to the dedication of a few folks (myself included!), JModelica is back! You can find the revived project on GitHub: https://github.com/JModelica/JModelica. What JModelica Does: JModelica provides a way to write complex simulations using the Modelica language, which is known for its ability to handle differential equations and model physical systems beautifully. The magic of JModelica lies in its Python integration—you can solve your Modelica models and access the results directly in Python for in-depth analysis, visualization, and even optimization using libraries you already love!"},
{"Title": "CLI to embed code snippets in your README, from actual (testable) code", "Author": "realazthat", "Content": "What My Project Does What My Project Does: snipinator is a CLI to embed (testable) snippets from your codebase into your README, using Jinja2 and functions provided by snipinator to assist with embedding code, shell output, etc. Please provide any feedback in the comments or GH issues. Target Audience Target Audience: Developers of {GitHub,other} projects that have a README. It works for me, it might work for you. Comparison Features:\nSupports anything Jinja2 supports."},
{"Title": "Rye-Tui, a Text-based User Interface (TUI) to manage rye projects", "Author": "Zaloog1337", "Content": "Hi everyone, Ive reached a state of my current project, where I want to share it with you, and gather some feedback. This is my first time using rye and I am surprised, how Hassle-Free building a package with it went. Source Code: github\nInstallation\npython -m pip install rye-tui"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "map_plotter - abstracts complexity of creating intensity plots overlaid onto global map", "Author": "teamamentum", "Content": "What My Project Does\nOverlaying intensity plots onto a geographical map using cartopy/matplotlib can be complex. So we created this map_plotter package to abstract away that complexity for a common use case. Installation (opinionated use of conda to avoid cartopy dependency hell and install precompiled binaries) conda install cartopy\ngit clone git@github.com:amentumspace/map_plotter.git\ncd map_plotter\npip install ."},
{"Title": "I built a pipeline sending my wife and I SMSs twice a week with budgeting advice generated by AI", "Author": "MoodAppropriate4108", "Content": "What My Project Does:\nI built a pipeline of Dagger modules to send my wife and I SMSs twice a week with actionable financial advice generated by AI based on data from bank accounts regarding our daily spending. Details: Dagger is an open source programmable CI/CD engine. I built each step in the pipeline as a Dagger method. Dagger spins up ephemeral containers, running everything within its own container. I use GitHub Actions to trigger dagger methods that;"},
{"Title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"", "Author": "AlSweigart", "Content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs I'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10) Once printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become."},
{"Title": "We built open-source SDK for adding custom code interpreters to AI apps", "Author": "mlejva", "Content": "What My Project Does Hey everyone! I'm the CEO of the company that built an SDK that makes it easy to build custom code interpreters for AI apps. We're a company called E2B [0]. We're building and open-source [1] secure environments for running untrusted AI-generated code and AI agents. We call these environments sandboxes and they are built on top of micro VM called Firecracker [2]. We specifically decided to use Firecrackers instead of containers because of their security and ability to do snapshots. You can think of us as giving small cloud computers to LLMs. We recently created a dedicated SDK for building custom code interpreters in Python or JS/TS. We saw this need after a lot of our users have been adding code execution capabilities to their AI apps with our core SDK [3]. These use cases were often centered around AI data analysis so code interpreter-like behavior made sense"},
{"Title": "Reviewing Dataframe Changes? Looking for Your Preferred Methods!", "Author": "rageagainistjg", "Content": "After playing around with a dataframe—applying filters or other transformations—I'm curious about your methods for reviewing the changes. In VS Code, the variable explorer is quite handy for a quick look at the modified dataframe. Alternatively, when working in a Jupyter notebook within VS Code, exporting the data to an Excel file provides a detailed view and allows for an easy deep dive into the results. What are your preferred practices for ensuring your data adjustments are precisely what you intended?"},
{"Title": "I made a small Python script that uses NASA'S APOD API to set cool backgrounds on a Windows machine", "Author": "Potato_eating_a_dog", "Content": "https://github.com/william7491681/APOD_Wallpaper_Script\nWhat my project does\nNASA has a ton of accessible API's, one of which being the APOD (Astronomy Picture Of the Day) API. I made a script to get the last 9 pictures of the day and set them as my Windows 10 background, and then used task scheduler to have the script re-run every day at noon and whenever the computer boots up. It's fairly hard coded for my setup (specific file paths, 1920x1080 monitor, etc), but it shouldn't be too hard to change if one wanted to."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "JSX Syntax inside Python files. (Packed)", "Author": "RevolutionaryPen4661", "Content": "There was a JSX-style syntax preprocessor for Python called \"Packed,\" which allowed us to write JSX inside Python (*.pyx and *.py) files. It's unclear why they chose *.pyx for the file extension, as it conflicts with the naming of Cythonic file extensions (I have checked their issues). This project might have thrived with sufficient contributions and could have changed the way apps are built. However, the project is now archived on GitHub. The last commit was 5 years ago (LICENSE), and the last development commit was 9 years ago. This repository needs someone to revive it, but I don't have enough experience to take on that task. Even though I don't have enough information, we should start with Rust + Python to build a compiler (aka. template replacer) (this doesn't compile Python but replaces all JSX with a dictionary) and cleaner syntax. Integration with Django (Packed has an example too), Flask, FastAPI, Robyn etc."},
{"Title": "Library for automatic Cython 3.0 code annotations generation.", "Author": "Cool-Nefariousness76", "Content": "Hi everybody, over the last year I've been developing a library that adds some Cython 3.0 annotations to existing python code. What My Project Does: For example if it sees a for i in range(): in a function it recognizes i as an integer and adds a i = cython.declare(cython.int)line at the beginning of the function. It actually uses the built-in ast module under the hood for parsing, I found it a super useful library! Target Audience: It is a side project I made mainly for fun. I don't know if it can be of interest to anybody, or if it could have some potential utility."},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It’s a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "APScheduler vs Schedule package", "Author": "kostakos14", "Content": "Hey folks, looking to use one library to implement some background scheduling logic on my application. I find in Google search APScheduler to be frequently mentioned, but I can see the Schedule package has more GH stars. Was curious if anybody has used one of them, and which one would you recommend based on your own experience."},
{"Title": "DeepFusion: a highly modular Deep Learning Framework.", "Author": "atharvaaalok1", "Content": "What My Project Does: Hello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning. And Voila... I've developed a deep learning library, DeepFusion! Details: It's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code. You can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion"},
{"Title": "Introducing Notolog: Python Markdown Editor built with PySide6", "Author": "devotaku", "Content": "Excited to share my personal open-source project: Notolog - Python Markdown Editor (MIT License). The main motivation for developing another markdown editor was my passion for learning new things and enhancing my development skills in Python. I developed it in my spare time over a few months, despite having no prior experience in creating full-scale Python applications. What My Project Does ∗ Multiplatform ∗ Markdown async syntax highlighting created by me ∗ Several pre-installed color themes ∗ Supports English and 17 other languages right out of the box ∗ Integration with OpenAI API for AI-assisted features"},
{"Title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer What My Project Does: MyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience. mytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/"},
{"Title": "I've developed a library for send metrics to zabbix asynchronously", "Author": "Royal_Section4889", "Content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this. Tests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async What My Project Does Send zabbix sender messages using asyncio tasks. Target Audience SysAdmins who use Zabbix to monitor a large number of metrics. Comparison Instead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix"},
{"Title": "Thank You PyConUS 2024 !!!", "Author": "ryanstephendavis", "Content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon... I've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture."},
{"Title": "I made a Python text to speech library - Pyt2s", "Author": "asksumanth", "Content": "What my project does: It supports services like IBM Watson, Acapela and Stream labs' demo websites to convert your text to speech. Target audience: It's a toy project and would not recommend you to use in Production. Comparison: It's wayyyyy easy to use. Just pip install and use in your project. No extra setup required like other libraries. Also supports various languages and voices and accents. Check docs for more. Here is the link to repository. Please go do check it out and star it if it's helpful to you guys. Thank you. I made this library taking inspiration from this php tts library by chrisjp."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Interactive plots in the terminal", "Author": "Spiffidimus", "Content": "I made a library to create interactive plots in the terminal (pip install itrm). It uses braille characters (by default) to display the data with sub-character resolution. There are several keybindings for moving a vertical cursor left and right, for zooming in or out on data, and for changing which curve to focus on. There are occasions (such as when working with a server) where MatPlotLib is not an option and the terminal is the only available tool. But, in my opinion, it is actually faster to use this tool (itrm) to zoom in on interesting parts of data and analyze patterns than using other tools like MatPlotLib. In fact, with large data sets (~1 million points), this tool actually renders faster than MatPlotLib. Please check it out and let know what you think."},
{"Title": "Speed improvements in Polars over Pandas", "Author": "zzoetrop_1999", "Content": "I'm giving a talk on polars in July. It's been pretty fast for us, but I'm curious to hear some examples of improvements other people have seen. I got one process down from over three minutes to around 10 seconds.\nAlso curious whether people have switched over to using polars instead of pandas or they reserve it for specific use cases."},
{"Title": "Interfacing Custom USB endpoints using Python!", "Author": "shekhuu", "Content": "Hi everyone, I was building something that required me to communicate over USB to Raspberry Pi Pico using Pyusb Python. So I decided to make a blog post about it showing the concepts, process, and source code.\nCheck out the blog post here!\nCheck out the source code here!"},
{"Title": "Hi! I've published a Python client for IBKR REST and WebSocket APIs - IBind. Hope you like it 👋", "Author": "VoyZan", "Content": "Hi! I want to share a library I've built recently. IBind is a REST and WebSocket Python client for Interactive Brokers Client Portal Web API. It is directed at IBKR users. You can find IBind on GitHub: https://github.com/Voyz/ibind What My Project Does: It is a REST and WebSocket API for the Interactive Brokers' Web API. I'm particularly proud of a few things in this release:\nThe REST and WebSocket API clients are based on an abstract base class RestClient and WsClient accordingly. These could be implemented to use some other Web APIs in a relatively straightforward way. I have in fact used a version of that for a cryptocurrency WebSocket API, and it is nice to see it adapt to a different environment."},
{"Title": "Mystique: Sparse data matching for Python tests", "Author": "jonocodes", "Content": "What My Project Does I made this library to help assert test responses inline while directing the comparison to be as rigid or lax as it needs to be. Motivation I write a lot of tests that assert values in complex nested dictionaries. But really I only need to check some parts in the response, not all of it. I often find myself transforming the response or maliciously extracting the important parts I need - in order to satisfy the assertions. This gets messy and can make tests hard to follow. Target Audience Anyone who writes tests. This is particularly useful if you generate fake data in your tests with something like Faker, Factory Boy, or Model Bakery."},
{"Title": "Python Streamlit Spotlight Tutorial: an Interactive Dashboard using UNHCR Refugee Data", "Author": "jgloewen", "Content": "Python Streamlit is a terrific tool for creating interactive data visualizations. It packages all your visualizations up into a neat little application - including charts and maps - and displays them in your default browser. No muss, no fuss. Recently, I found a new dataset (to me) on the UN High Commission for Refugees (UNHCR) website. It contains country-to-country movements for refugees both from origin country and country of asylum Using this dataset, here's a step-by-step on how to code a Python Streamlit application that has:"},
{"Title": "I made python audioplayer with FFmpeg and Qt6", "Author": "WyseTwist", "Content": "Midnight Player - a simple python audiplayer for playing audio What My Project Does: My project is just an audio player for playing music, it can play audio from folders, supports different audio formats like Flac, Mp3 and can show some information about the track. Player uses subprocess to access ffmpeg, then it decodes the audio file into pcm format, then plays this file using sounddevice library. the use of these libraries is to ensure that the audio file does not lose quality during processing. Target Audience: This project was made to increase experience in python programming and to understand how the audio playback process works, but the project is also useful for people who are interested in learning the structure of the audio player as it is open source."},
{"Title": "IP subnet or IP calculator tool need feedback", "Author": "nicanorflavier", "Content": "Hey folks, I've been dabbling with a Python project recently that's all about making life easier for us I.T. people. It's a nifty little tool that calculates IP subnets and does IP calculations from the command or CLI. Here's the GitHub link and the code: https://github.com/nicanorflavier/ipnet I’m pretty stoked about it, but I know there’s always room for improvement. So, I thought, better to turn to than the wise minds of this python community? I’m all ears for any feedback, tips, tricks, or advice you guys might have. Thanks a ton in advance!"},
{"Title": "How to publish a Python package with GitHub Actions using Poetry", "Author": "johnfraney", "Content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/ If you've got any tips for publishing a Python package, I'd be happy to hear those, too"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Zango - New python framework for building enterprise ready business apps. Salesforce alternative.", "Author": "CanaryHill", "Content": "What My Project Does Zango, built on top of Django, is further opinionated towards building enterprise ready custom business apps. Includes additional batteries for out of the box enterprise readiness and rapid app development. Growing ecosystem of packages that serves as building blocks of apps. Zango also enables multi-tenancy where each tenant, representing an app/microservices, can be deployed independently on the same underlying monolith. Tenants have logically seperated db, codebase as well as deployment. This significantly cuts down per app hosting cost and enables microservices pattern without the cost overhead."},
{"Title": "Reforger Whitelist Py", "Author": "PyjamaZombie", "Content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually. The target audience for this is the Arma Reforger community, for which, the application is made for. Currently, to my knowledge, there is no application like this available to the Arma Reforger community. I am very open to feedback, contributions and advice as want to expand this as much as possible!"},
{"Title": "Pre-commit hook to keep coverage badge in README up to date", "Author": "60percentcocoa", "Content": "Wrote this as a tool to keep README coverage badges up to date without relying on 3rd party services or having to do anything extra, thought others might get some utility out of it: coverage-pre-commit. A .coverage file is expected at the root of the project, generated by running coverage run directly or using a plugin such as pytest-cov when running tests. Most convenient when used as a pre-push hook imo. Feel free to opine, be it positive or negative!"},
{"Title": "pyDSLR: Easy-to-use wrapper around libgphoto2 to control your DSLR/DSLM from Linux/MacOS", "Author": "Zahlii", "Content": "What the Project Does The idea is to provide an easy to use (and fully typed, including camera settings!) abstraction around libgphoto2, allowing even non-tech-savy users to write Python scripts/sequences to take pictures. Generally, it supports all cameras that libgphoto2 also supports!\nPossible use cases are:\nSource code/examples available here (this one can be used to automatically take an image once a lightning strike is detected):"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyWolt: Wolt food delivery service API wrapper", "Author": "daivushe1", "Content": "I'm thrilled to share my first open-source project with you all: PyWolt! 🎉 PyWolt is a Python library that makes it super easy to interact with the Wolt API.\nWhat My Project Does:\nDiscover Venues: Find nearby spots to grab a bite.\nExplore Menus: Dive into a venue's menu and pick your favorites.\nTarget Audience:"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Traversible Tree in Python", "Author": "frankstan33", "Content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure. What My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times. There are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth)."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python", "Author": "aoeu512", "Content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging. Programmable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement."},
{"Title": "From poetry to docker - easy way", "Author": "nicoloboschi", "Content": "Poetry plugin to generate Dockerfile and images automatically This project lets you generate a docker image or just a Dockerfile for your poetry application without manual setup It is meant for production images. https://github.com/nicoloboschi/poetry-dockerize-plugin https://pypi.org/project/poetry-dockerize-plugin/ Get started with poetry self add poetry-dockerize-plugin@latest This command generates a production-ready, optimized python image:"},
{"Title": "I made a React-like web framework for Python 👋", "Author": "Rawing7", "Content": "I'm Paul, one of the creators of Rio. Over the years I've tried many different established python GUI frameworks, but none of them really satisfied me. So I teamed up with a few like minded developers and spent the last few months to create our own framework. Rio is the result of this effort. What My Project Does Rio is a brand new GUI framework that lets you create modern web apps in just a few lines of Python. Our goal is to simplify web and app development, so you can focus on the things you care about, instead of wasting countless hours on frustrating user interface details. We do this by following the core principles of Python that we all know and love. Python is supposed to be simple and compact - and so is Rio. There is no need to learn any additional languages such as HTML, CSS or JavaScript, because all of the UI, Logic, Components and even layouting is done entirely in Python. There’s not even a distinction between front-end and back-end. Rio handles all of the communication transparently for you."},
{"Title": "try... except... finally!", "Author": "young-and-ignorant", "Content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally. from your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()"},
{"Title": "A \"new\" Object & Vector Database for Python", "Author": "greenrobot_de", "Content": "ObjectBox (GitHub) is an embedded database for Python objects and high-dimensional vectors. Today is it's first stable release for Python developers. It's very lightweight similar to SQLite, but built for objects so it's faster as there's no SQL layer in-between. It's the very first vector database that also runs on smaller low-memory devices. The article comes with first benchmarks and hints at the LangChain integration."},
{"Title": "The new REPL in Python 3.13.0 beta 1", "Author": "treyhunner", "Content": "Python 3.13.0 beta 1 was released today. The feature I'm most excited about is the new Python REPL. Here's a summary of my favorite features in the new REPL along with animated gifs. The TLDR:\nSupport for block-leveling history and block-level editing\nPasting code (even with blank lines within it) works as expected now\nTyping exit will exit (no more Use exit() or Ctrl-D (i.e. EOF) to exit message)"},
{"Title": "Durable Python - Infrastructure failures should not stop the process", "Author": "autokitteh", "Content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience. It automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns. Consider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete. import requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "musicnotes: Python module for playing musical instruments!", "Author": "must1088", "Content": "https://github.com/must108/musicnotes\nWhat My Project Does\nmusicnotes is a small open-source project that lets you play musical instruments (currently, only piano and guitar) in your Python programs. I created this project as I wanted to create a simple and useful open-source project for beginner developers to easily contribute to the project. I know it's hard to find good open-source projects for new developers."},
{"Title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation", "Author": "AlSweigart", "Content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books Be sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!) For $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate"},
{"Title": "TerminalTextEffects (TTE) - A terminal visual effects engine, application, and library.", "Author": "XUtYwYzz", "Content": "I saw the words 'visual effects', just give me GIFs Understandable, visit the Effects Showroom first. Then come back if you like what you see. What My Project Does TerminalTextEffects (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts/applications. TTE includes a growing library of built-in effects which showcase the engine's features. Use cases:\nInvoke at terminal launch to produce an animation (ex: fetch)."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Preferred method to run python in VS Code", "Author": "SuperMB13", "Content": "Been working on a python tool for VS Code. Curious to get peoples' opinion on how they run python files (not notebooks) within VS Code. Do you typically run files python by:\nTyping the python command into the integrated terminal\nClicking the run button at the top of the file\nPressing F5 for debugging\nPressing Ctrl+F5 for run but not debug"},
{"Title": "A Beginner's Guide to Unit Testing with Pytest", "Author": "Stanulilic", "Content": "Hey r/python! I wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link."},
{"Title": "Choosing between dash and react", "Author": "Berlibur", "Content": "At work I'm getting the question to build a platform that will be used to navigate all kinds of business metrics to different levels of granularity. Ideally there is also insights on their relationships, and advice on actions to take. I have experience with both Dash and React, and my feeling says to go with React (and a python backend). Mostly because I foresee this application to grow over time, and managing big Dash applications (as a dev) can get clunky. However, in my team there's no extra JavaScript (let alone React) knowledge. While there is a solid base for Python. There might be opportunities to source outside the team/company, which I'd have to make a strong case for."},
{"Title": "Reactive programming for Python with live-cells-py", "Author": "alex-gutev", "Content": "live-cells-py (Live Cells Python) is a reactive programming library which I ported from Live Cells for Dart.\nWhat my project Does:\nYou can declare cells which are observable containers for data: import live_cells as lc\n\na = lc.mutable(0)"},
{"Title": "Gloe: A lightweight lib to create readable and type-safe pipelines", "Author": "justme_sam", "Content": "Have you ever faced a moment when your code is a mess of nested classes and functions, and you have to dig through dozens of levels to understand a simple function? Gloe (pronounced like “glow”) is a library designed to assist you organize your code into a type-safe flow, making it flat and linear. What My Project Does Here’s what it can do for you:\nWrite type-safe pipelines with pure Python.\nExpress your code as a set of atomic and extensible units of responsibility called transformers."},
{"Title": "The possibility to build Android apps with python professionally is here and needs your support.", "Author": "klargstein", "Content": "You guys really need to check this. I believe new comers to python would love to tinker with the android ecosystem from the safety of python :-) Imgur: https://imgur.com/gallery/DtfwOVi https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course Edit: added imgur link."},
{"Title": "Book Management Restful-API", "Author": "ThePawners", "Content": "What My Project Does: This project aims to provide a simple and efficient way to manage a collection of books through various API endpoints. This API allows you to:\nGet a list of all books.\nAdd a new book.\nGet a book by its isbn.\nUpdate an existing book by its isbn."},
{"Title": "You should only use licensed version of python", "Author": "vikashgraja", "Content": "I’m an intern in a company and I automated some processes using python. My company’s IT wing said that as long as it is a licensed software you can use it in our company. In my mind I was like where the f I’m going to get a license for an open source software. Note : They mention that another team has been using licensed python. I thought either IT is so stupid or that team is so smart that they brought license for pycharm or anaconda (claim that it is a Python license) and fooled IT. If I am wrong then tell me where I can get that license. And I am also looking for job in data analyst."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Dash Pip Components", "Author": "Soolsily", "Content": "What My Project Does\nHey everyone, just released 8 new pip components for plotly and dash including:\nFull Calendar Component - A Full Calendar Component for Dash\nDash Summernote - A rich text WYSIWYG Editor for Dash\nDash Emoji Mart - A Slack-like Emoji Picker for Dash\nDash Charty - A Charting Library for Dash"},
{"Title": "SH1106 OLED Screen App Framework for Raspberry Pi - Now on PyPI", "Author": "danyourmaster", "Content": "What it does:\nToday, I released the first working version of my SH1106 app framework for Raspberry Pi on PyPI! The SH1106 is an affordable OLED screen, costing under $3, and it's perfect for projects of all sizes. This package enables the creation of apps for it with graphics support, state management, image conversion utilities, and custom fonts. Check it out here: SH1106 Framework on PyPI. Target audience:\nThe package is mainly aimed at hobbyists who want to create small projects using the SH1106 OLED without having to manually write a lot of the graphics code typically needed on top of standard packages. I am also developing a hardware synthesizer keyboard from scratch that utilizes this framework extensively. So far, the framework handles the massive scaling required for this project excellently in terms of both code organization and performance."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Crowbar - Package Management without Venv", "Author": "coryalanfitz", "Content": "https://github.com/coryfitz/crowbar What it does: I'm working on a way of simplifying your Python dependency management. Basically, it handles virtual environments so you don’t have to think about them. First: pip install crowbar-package-manager Basically you just install and run things with the crowbar command rather than pip: crowbar install package_name And then you also run things with the crowbar command rather than using \"python\" - crowbar then runs the program based on the packages in the local environment rather than having to activate your virtual environment. It's inspired by npm if you've used that with js."},
{"Title": "HS-transform, python package for hyperbolic S-transform in signal processing", "Author": "Ok_Employ_2414", "Content": "I made a python package for S-transform with Hyperbolic window (Hyperbolic S-transform or HSTransform package). This is my first time publishing a python package, so the project is still far from stable and still under beta release.\nWhat my project does: This transformation is applied to signal processing, analyzing transient changes of a signal during very short-time. Some special use case can be in power system signal, or Geophysical signal analysis, or MRI ..."},
{"Title": "An IDE with the same step by step functionality as in Matlab", "Author": "Cerricola", "Content": "When working with Matlab I love how I can run the code step by step to debug it. Even being able to \"step in\" functions and loops. Then, I was looking to an IDE with a similar functionality for Python. Nowadays I'm using Spyder."},
{"Title": "I made a cheatsheet for pydash", "Author": "poopatroopa3", "Content": "https://brunodantas.github.io/pydash-cheatsheet/en/\nWhat my project does: pydash is a library with great potential to make you code more Functional and simple. I made this cheatsheet a while ago to highlight some of the most useful functions of the library, since there are so many. I hope it's useful.\nTarget audience: anyone who is interested in pydash, functional programming, not reinventing the wheel."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "IconMatch - find icons and letters positions from images!", "Author": "TraditionalDistrict9", "Content": "Hey all, I am not the original creator, but found that 4yo project, and decided to revive it! What my project does: IconMatch is library allowing you to extract icons and letter positions from image or from display! There is also realtime demo on repo showcasing how it works! Target Audience: For all detecting objects from display! Comparison: I did not find other project like that - but it was my first find too! It is also not OCR! https://github.com/NativeSensors/IconMatch Have fun!"},
{"Title": "Spotify Lyrics visualizer", "Author": "Mews75", "Content": "What My Project Does Because spotify made their lyrics menu a premium only feature, I thought I'd make my own replacement for it.\nThe app connects to your spotify account, fetches the lyrics from various websites, and then syncs them automatically to what is currently playing. Basically does the exact same as the lyrics menu used to do. Target Audience Anyone who wants to see the lyrics to songs really. Comparison Most other apps that I've found are either browser only, or don't actually sync the lyrics to the song, they just show the entire lyrics at once.\nIn comparison, my app shows the lyrics line by line, synced with the song, and also has (in my opinion lol) a fairly nice looking ui.\nIt's also very easy to use for non programmers too, since you can just download an executable to use the app."},
{"Title": "Tutorial: Simple Pretty Maps That Will Improve Your Python Streamlit Skills", "Author": "jgloewen", "Content": "Interactive web applications for data visualization improve user engagement and understanding. These days, Streamlit is a very popular framework used to provide web applications for data science. It is a terrific programming tool to have in you Python knowledge toolbox. Here’s a fun and practical tutorial on how to create a simple interactive and dynamic Streamlit application. This application generates a beautiful and original map using the prettymaps library. Free article: HERE"},
{"Title": "I created an unofficial module for the ShipEngine API", "Author": "Status_Bid_1604", "Content": "What My Project Does Simplifies the interaction with the ShipEngine API with most response and requests built as objects, which in my opinion makes interaction much easier. This is my first released package so all criticism and feedback is very welcome. Target Audience Anyone who deals with the current ShipEngine API using Python. Comparison There is an official ShipEngine API module that is created by the company but I have found it somewhat lack luster with no way to create batches or bulk shipments (and other missing functionality), this is much more suited to accomplishing that task."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Xenharmlib - An advanced music theory library that supports microtonality", "Author": "realretooth", "Content": "Introducing Xenharmlib (Source code here) What My Project Does (taken from the docs) Xenharmlib is a music theory library for the exploration and research of microtonality, diatonic set theory, non-standard notations, and many more. The library implements a superset of Western classical music theory, so you can also use it to compose and analyze music in the boundaries of the common practice period or 20th century Western music. Target Audience Composers who want to get answers to theoretical questions pertaining to structures of musical scales, note intervals, frequencies and frequency ratios in equal division tunings. People who want to explore microtonality or non-western musical theory in general."},
{"Title": "Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient Code", "Author": "Slow_Scene_7972", "Content": "Optimize Your Python Workflow: Proven Techniques for Crafting Production-Ready Code Link"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "SQLPage - a Python library to add string token based pagination easily", "Author": "kernelslayer", "Content": "What My Project Does - This is a Python package to easily add string token based pagination. Currently it supports SQLModel and SQLAlchemy ORMs. Recently I wanted to add pagination in one of my Python projects and in the API response, I had to return a string next page token. Now I could not find a straight-forward way of doing this in Python. All of the tutorials or blog posts I saw, there in the response the server always returned a page_number, page_size, and total_elements and then the onus was on the calling service to adjust this accordingly.  Comparison - The current packages and methods requires some changes in the app layer as well. I tried using a few but those did not satisfy the use case and were also a bit harder to implement. I could not find a easy to use option. The present ones returned integers instead of a string token"},
{"Title": "Enhanced EPUB Version of \"An Understated Dominance\" Available for Fans!", "Author": "abdirxhmxn", "Content": "Hey everyone! I recently completed a fun project that I think fans of \"An Understated Dominance\" will appreciate, especially those who have struggled with reading the novel online due to website clutter and distractions. I've created a clean, distraction-free EPUB version of the novel that you can download and read on your preferred device. You can get it here: EPUB Download. Why I did this: The original website hosting the novel has a lot of distractions that can take away from the reading experience. My goal was to provide a seamless reading experience that allows you to fully immerse yourself in the story without unnecessary interruptions."},
{"Title": "AI planner: AI tool for efficient event scheduling in Google Calendar.", "Author": "nginx26", "Content": "Good evening! I have created a new projectfor adding events to google calendar based on the text a user inputs. What My Project Does The project is a tool that uses large language models to understand the user's input and add events to the user's Google Calendar based on the user's input. It uses Ollama for natural language understanding and Google Calendar API for adding events to the user's calendar. How My Project Works Ollama uses Llama 3 with pre-instructions to act as a calendar event planner. The tool uses the model to generate responses to extract the event's details from the user's input inserted in the Web Interface. tool then asks the user to confirm the details extracted from the user's input and adds the event to the user's Google Calendar (example shown )"},
{"Title": "UXsim 1.3.0 released with vehicle tracking and improved vehicle routing", "Author": "Balance-", "Content": "Main Changes\nAdd GUI functions\nVehicle tracking: You can now track a specific vehicle to see their route\nDataframe viewer: Stats can be confirmed\nImprove vehicle routing functions\nAdd example of routing optimization"},
{"Title": "Picodi - Simplifying Dependency Injection in Python", "Author": "yakimka", "Content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features"},
{"Title": "PyPods: A lightweight solution to execute Python dependencies in an isolated fashion.", "Author": "Brilliant_Emphasis63", "Content": "Introducing PyPods What My Project Does A Python library designed to manage monolithic project architectures by isolating dependencies. Traditionally, monolithic architectures cluster all dependencies into one project, creating complexities and potential conflicts. PyPods offers a solution by isolating these dependencies and enabling the main project to communicate with them via remote procedure calls. This approach eliminates the need to install dependencies directly in the main project. Feel free to take a look and I am happy to receive some feedback! Target Audience"},
{"Title": "Resume Screening Chatbot using RAG Fusion", "Author": "Babe_My_Name_Is_Hung", "Content": "Hi everyone! I recently finished a small side project for my graduating thesis, which is about experimenting with RAG-based frameworks in improving resume screening. What my project does: The project for the thesis is a GPT-4 Chatbot with RAG Fusion retrieval. Given a job description as input, the system retrieves the most relevant candidate profiles to perform follow-up tasks such as analysis, summarization, and decision-making, which can assist the screening process better. The revolving idea is that the similarity-based retrieval process can effectively narrow the initial large pool of applicants down to the most relevant resumes. However, this simple similarity ranking should not be used to evaluate a candidate's actual ability. Therefore, the top resumes are used to augment the GPT-4 Chatbot so it can be conditioned on these profiles and perform further downstream tasks."},
{"Title": "Homoiconic Python Code", "Author": "moonbunR", "Content": "Homoiconic, what does it mean? In simple terms, homoiconic code is when code is treated as data and can be manipulated as you would data. This means the code can be changed, new functions and variables added, the code can generate new code or even examine and modify its own structure and behavior all while it is running. That’s why homoiconic languages like Lisp are so powerful. But what if we can make a homoiconic python code, where the code and the data are one and the same and can be modified in the same way? This guide does a good job in trying to explain how you would create a python version of the “Lisp in Lisp” code which would give you access to all those homoiconic features that Lisp brags of like the macro systems, the expressiveness and flexibility, the metaprogramming etc. while still using python. What do you guys think of this?"},
{"Title": "I made a desktop chat app :)", "Author": "Reasonable-Zone-7909", "Content": "What My Project Does Hi! This is my first time doing a python project more than a few hours in size. I made a chat app which features E2E encryption using a passcode and has a multiclient architecture. All comments are welcome! Target Audience It is just a toy project for my portfolio. Comparison Compared to other chat clients, this one uses a passphrase to encrypt all data, with the passphrase being chosen out of the app, for instance on a dinner. But I think that IRC already has this, so it doesn't differ much XD. Git link: https://github.com/xxzoltanxx/Balvan-Chat"},
{"Title": "The best Python CLI library, arguably.", "Author": "AND_MY_HAX", "Content": "What My Project Does https://github.com/treykeown/arguably arguably makes it super simple to define complex CLIs. It uses your function signatures and docstrings to set everything up. Here's how it works:\nAdding the @arguably.command decorator to a function makes it appear on the CLI.\nIf multiple functions are decorated, they'll all be set up as subcommands. You can even set up multiple levels of subcommands."},
{"Title": "Rye-Tui, a Text-based User Interface (TUI) to manage rye projects", "Author": "Zaloog1337", "Content": "Hi everyone, Ive reached a state of my current project, where I want to share it with you, and gather some feedback. This is my first time using rye and I am surprised, how Hassle-Free building a package with it went. Source Code: github\nInstallation\npython -m pip install rye-tui"},
{"Title": "LinkedIn-Learning-Downloader v1.1", "Author": "YounesWinter", "Content": "With Python i created a tool that enables users to download LinkedIn Learning courses, including the often overlooked but incredibly valuable exercise files. This feature sets our project apart, offering a complete learning experience by providing both the course videos and the materials needed for practical application.\nWhat great about it and beyond other tools in the same genre concerned LinkedIn Learning Downloaders, now you can download the whole courses from a path link. this is was never possible without Python."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "FastAPI Backend Template for SaaS products", "Author": "shekhuu", "Content": "Hello there, I just created a template for creating a backend for your SaaS products. What my project does: It is a FastAPI project/template for creating SaaS backends and admin dashboards. Comparison: \nOut of the box, it supports\nLicence key generation and validation.\nOAuth 2 authentication with scopes."},
{"Title": "I built a pipeline sending my wife and I SMSs twice a week with budgeting advice generated by AI", "Author": "MoodAppropriate4108", "Content": "What My Project Does:\nI built a pipeline of Dagger modules to send my wife and I SMSs twice a week with actionable financial advice generated by AI based on data from bank accounts regarding our daily spending. Details: Dagger is an open source programmable CI/CD engine. I built each step in the pipeline as a Dagger method. Dagger spins up ephemeral containers, running everything within its own container. I use GitHub Actions to trigger dagger methods that;"},
{"Title": "this.s and this.d", "Author": "VladTbk", "Content": "Recently, I found out about the this \"Easter egg\" in python3. Adding import this into a py file will print \"The Zen of Python\" by Tim Peters. Also, this has two attributes: this.s and this.d, which I guess form the actual Easter egg. this.s returns an encrypted version of \"The Zen\" and this.d well, see for yourself, maybe you'll solve the puzzle."},
{"Title": "We built open-source SDK for adding custom code interpreters to AI apps", "Author": "mlejva", "Content": "What My Project Does Hey everyone! I'm the CEO of the company that built an SDK that makes it easy to build custom code interpreters for AI apps. We're a company called E2B [0]. We're building and open-source [1] secure environments for running untrusted AI-generated code and AI agents. We call these environments sandboxes and they are built on top of micro VM called Firecracker [2]. We specifically decided to use Firecrackers instead of containers because of their security and ability to do snapshots. You can think of us as giving small cloud computers to LLMs. We recently created a dedicated SDK for building custom code interpreters in Python or JS/TS. We saw this need after a lot of our users have been adding code execution capabilities to their AI apps with our core SDK [3]. These use cases were often centered around AI data analysis so code interpreter-like behavior made sense"},
{"Title": "I made a Mandelbrot Zoom using Python", "Author": "AbideByReason", "Content": "I made a YouTube video which previews the zoom and explains the code, which you can find here: https://youtu.be/HtNUFdh2sjg What my project does: it creates a Mandelbrot Zoom. Comparison: it uses Pillow and consists of just 2 main blocks of code: one is the main function that finds which points are in the Mandelbrot Set and the other is the main loop that applies appropriate colors to each image. It gives the option of being black and white OR in color. It works fairly well but can definitely be faster if parallelized. I'd love to hear any suggestions on how it can be improved. Target Audience: fun/toy project"},
{"Title": "I made a small Python script that uses NASA'S APOD API to set cool backgrounds on a Windows machine", "Author": "Potato_eating_a_dog", "Content": "https://github.com/william7491681/APOD_Wallpaper_Script\nWhat my project does\nNASA has a ton of accessible API's, one of which being the APOD (Astronomy Picture Of the Day) API. I made a script to get the last 9 pictures of the day and set them as my Windows 10 background, and then used task scheduler to have the script re-run every day at noon and whenever the computer boots up. It's fairly hard coded for my setup (specific file paths, 1920x1080 monitor, etc), but it shouldn't be too hard to change if one wanted to."},
{"Title": "JSX Syntax inside Python files. (Packed)", "Author": "RevolutionaryPen4661", "Content": "There was a JSX-style syntax preprocessor for Python called \"Packed,\" which allowed us to write JSX inside Python (*.pyx and *.py) files. It's unclear why they chose *.pyx for the file extension, as it conflicts with the naming of Cythonic file extensions (I have checked their issues). This project might have thrived with sufficient contributions and could have changed the way apps are built. However, the project is now archived on GitHub. The last commit was 5 years ago (LICENSE), and the last development commit was 9 years ago. This repository needs someone to revive it, but I don't have enough experience to take on that task. Even though I don't have enough information, we should start with Rust + Python to build a compiler (aka. template replacer) (this doesn't compile Python but replaces all JSX with a dictionary) and cleaner syntax. Integration with Django (Packed has an example too), Flask, FastAPI, Robyn etc."},
{"Title": "sjvisualizer: a python package to animate time-series data", "Author": "PieChartPirate", "Content": "What the project does: data animation library for time-series data. Currently it supports the following chart types:\nBar races\nAnimated Pie Charts\nAnimated Line Charts\nAnimated Stacked Area Charts"},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It’s a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "DeepFusion: a highly modular Deep Learning Framework.", "Author": "atharvaaalok1", "Content": "What My Project Does: Hello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning. And Voila... I've developed a deep learning library, DeepFusion! Details: It's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code. You can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Giving New Life to JModelica: Bringing Powerful Modelica Simulations to Python", "Author": "foadsf", "Content": "Five years ago, I posted about JModelica, a fantastic open-source tool for simulating complex systems that combined the ease of Python with the strength of Modelica. Sadly, the project went quiet, but I'm thrilled to share that, thanks to the dedication of a few folks (myself included!), JModelica is back! You can find the revived project on GitHub: https://github.com/JModelica/JModelica. What JModelica Does: JModelica provides a way to write complex simulations using the Modelica language, which is known for its ability to handle differential equations and model physical systems beautifully. The magic of JModelica lies in its Python integration—you can solve your Modelica models and access the results directly in Python for in-depth analysis, visualization, and even optimization using libraries you already love!"},
{"Title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer What My Project Does: MyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience. mytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/"},
{"Title": "Auto Data Analysis python packages to know", "Author": "mehul_gupta1997", "Content": "Check this video tutorial to explore different AutoEDA python packages like pandas-profiling, sweetviz, dataprep,etc which can enable automatic data analysis within minutes without any effort : https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry"},
{"Title": "Thank You PyConUS 2024 !!!", "Author": "ryanstephendavis", "Content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon... I've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture."},
{"Title": "Folks who know the internals: Where does operator precedence \"happen\"?", "Author": "BeerIsTheMindKiller", "Content": "Hey! Messing around with instaviz, cool library, highly recommend. You can visualize a function's bytecode as well as AST and some other stuff. i entered this: def f():\n  x = 1 + 2 - 10**2\n  return x I was expecting the AST nodes for 1 + 2 - 10**2 to be rearranged somehow, with 10**2 being moved to the left hand of the expression, because exponents get evaluated before addition/subtraction. but no! just looks like this:"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "CLI to embed code snippets in your README, from actual (testable) code", "Author": "realazthat", "Content": "What My Project Does What My Project Does: snipinator is a CLI to embed (testable) snippets from your codebase into your README, using Jinja2 and functions provided by snipinator to assist with embedding code, shell output, etc. Please provide any feedback in the comments or GH issues. Target Audience Target Audience: Developers of {GitHub,other} projects that have a README. It works for me, it might work for you. Comparison Features:\nSupports anything Jinja2 supports."},
{"Title": "Speed improvements in Polars over Pandas", "Author": "zzoetrop_1999", "Content": "I'm giving a talk on polars in July. It's been pretty fast for us, but I'm curious to hear some examples of improvements other people have seen. I got one process down from over three minutes to around 10 seconds.\nAlso curious whether people have switched over to using polars instead of pandas or they reserve it for specific use cases."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Interfacing Custom USB endpoints using Python!", "Author": "shekhuu", "Content": "Hi everyone, I was building something that required me to communicate over USB to Raspberry Pi Pico using Pyusb Python. So I decided to make a blog post about it showing the concepts, process, and source code.\nCheck out the blog post here!\nCheck out the source code here!"},
{"Title": "Mystique: Sparse data matching for Python tests", "Author": "jonocodes", "Content": "What My Project Does I made this library to help assert test responses inline while directing the comparison to be as rigid or lax as it needs to be. Motivation I write a lot of tests that assert values in complex nested dictionaries. But really I only need to check some parts in the response, not all of it. I often find myself transforming the response or maliciously extracting the important parts I need - in order to satisfy the assertions. This gets messy and can make tests hard to follow. Target Audience Anyone who writes tests. This is particularly useful if you generate fake data in your tests with something like Faker, Factory Boy, or Model Bakery."},
{"Title": "map_plotter - abstracts complexity of creating intensity plots overlaid onto global map", "Author": "teamamentum", "Content": "What My Project Does\nOverlaying intensity plots onto a geographical map using cartopy/matplotlib can be complex. So we created this map_plotter package to abstract away that complexity for a common use case. Installation (opinionated use of conda to avoid cartopy dependency hell and install precompiled binaries) conda install cartopy\ngit clone git@github.com:amentumspace/map_plotter.git\ncd map_plotter\npip install ."},
{"Title": "I made python audioplayer with FFmpeg and Qt6", "Author": "WyseTwist", "Content": "Midnight Player - a simple python audiplayer for playing audio What My Project Does: My project is just an audio player for playing music, it can play audio from folders, supports different audio formats like Flac, Mp3 and can show some information about the track. Player uses subprocess to access ffmpeg, then it decodes the audio file into pcm format, then plays this file using sounddevice library. the use of these libraries is to ensure that the audio file does not lose quality during processing. Target Audience: This project was made to increase experience in python programming and to understand how the audio playback process works, but the project is also useful for people who are interested in learning the structure of the audio player as it is open source."},
{"Title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"", "Author": "AlSweigart", "Content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs I'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10) Once printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become."},
{"Title": "How to publish a Python package with GitHub Actions using Poetry", "Author": "johnfraney", "Content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/ If you've got any tips for publishing a Python package, I'd be happy to hear those, too"},
{"Title": "Reviewing Dataframe Changes? Looking for Your Preferred Methods!", "Author": "rageagainistjg", "Content": "After playing around with a dataframe—applying filters or other transformations—I'm curious about your methods for reviewing the changes. In VS Code, the variable explorer is quite handy for a quick look at the modified dataframe. Alternatively, when working in a Jupyter notebook within VS Code, exporting the data to an Excel file provides a detailed view and allows for an easy deep dive into the results. What are your preferred practices for ensuring your data adjustments are precisely what you intended?"},
{"Title": "Reforger Whitelist Py", "Author": "PyjamaZombie", "Content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually. The target audience for this is the Arma Reforger community, for which, the application is made for. Currently, to my knowledge, there is no application like this available to the Arma Reforger community. I am very open to feedback, contributions and advice as want to expand this as much as possible!"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Library for automatic Cython 3.0 code annotations generation.", "Author": "Cool-Nefariousness76", "Content": "Hi everybody, over the last year I've been developing a library that adds some Cython 3.0 annotations to existing python code. What My Project Does: For example if it sees a for i in range(): in a function it recognizes i as an integer and adds a i = cython.declare(cython.int)line at the beginning of the function. It actually uses the built-in ast module under the hood for parsing, I found it a super useful library! Target Audience: It is a side project I made mainly for fun. I don't know if it can be of interest to anybody, or if it could have some potential utility."},
{"Title": "I made a Traversible Tree in Python", "Author": "frankstan33", "Content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure. What My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times. There are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth)."},
{"Title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python", "Author": "aoeu512", "Content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging. Programmable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement."},
{"Title": "APScheduler vs Schedule package", "Author": "kostakos14", "Content": "Hey folks, looking to use one library to implement some background scheduling logic on my application. I find in Google search APScheduler to be frequently mentioned, but I can see the Schedule package has more GH stars. Was curious if anybody has used one of them, and which one would you recommend based on your own experience."},
{"Title": "try... except... finally!", "Author": "young-and-ignorant", "Content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally. from your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()"},
{"Title": "Introducing Notolog: Python Markdown Editor built with PySide6", "Author": "devotaku", "Content": "Excited to share my personal open-source project: Notolog - Python Markdown Editor (MIT License). The main motivation for developing another markdown editor was my passion for learning new things and enhancing my development skills in Python. I developed it in my spare time over a few months, despite having no prior experience in creating full-scale Python applications. What My Project Does ∗ Multiplatform ∗ Markdown async syntax highlighting created by me ∗ Several pre-installed color themes ∗ Supports English and 17 other languages right out of the box ∗ Integration with OpenAI API for AI-assisted features"},
{"Title": "Durable Python - Infrastructure failures should not stop the process", "Author": "autokitteh", "Content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience. It automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns. Consider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete. import requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)"},
{"Title": "I've developed a library for send metrics to zabbix asynchronously", "Author": "Royal_Section4889", "Content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this. Tests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async What My Project Does Send zabbix sender messages using asyncio tasks. Target Audience SysAdmins who use Zabbix to monitor a large number of metrics. Comparison Instead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Python text to speech library - Pyt2s", "Author": "asksumanth", "Content": "What my project does: It supports services like IBM Watson, Acapela and Stream labs' demo websites to convert your text to speech. Target audience: It's a toy project and would not recommend you to use in Production. Comparison: It's wayyyyy easy to use. Just pip install and use in your project. No extra setup required like other libraries. Also supports various languages and voices and accents. Check docs for more. Here is the link to repository. Please go do check it out and star it if it's helpful to you guys. Thank you. I made this library taking inspiration from this php tts library by chrisjp."},
{"Title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation", "Author": "AlSweigart", "Content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books Be sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!) For $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate"},
{"Title": "Interactive plots in the terminal", "Author": "Spiffidimus", "Content": "I made a library to create interactive plots in the terminal (pip install itrm). It uses braille characters (by default) to display the data with sub-character resolution. There are several keybindings for moving a vertical cursor left and right, for zooming in or out on data, and for changing which curve to focus on. There are occasions (such as when working with a server) where MatPlotLib is not an option and the terminal is the only available tool. But, in my opinion, it is actually faster to use this tool (itrm) to zoom in on interesting parts of data and analyze patterns than using other tools like MatPlotLib. In fact, with large data sets (~1 million points), this tool actually renders faster than MatPlotLib. Please check it out and let know what you think."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Hi! I've published a Python client for IBKR REST and WebSocket APIs - IBind. Hope you like it 👋", "Author": "VoyZan", "Content": "Hi! I want to share a library I've built recently. IBind is a REST and WebSocket Python client for Interactive Brokers Client Portal Web API. It is directed at IBKR users. You can find IBind on GitHub: https://github.com/Voyz/ibind What My Project Does: It is a REST and WebSocket API for the Interactive Brokers' Web API. I'm particularly proud of a few things in this release:\nThe REST and WebSocket API clients are based on an abstract base class RestClient and WsClient accordingly. These could be implemented to use some other Web APIs in a relatively straightforward way. I have in fact used a version of that for a cryptocurrency WebSocket API, and it is nice to see it adapt to a different environment."},
{"Title": "Python Streamlit Spotlight Tutorial: an Interactive Dashboard using UNHCR Refugee Data", "Author": "jgloewen", "Content": "Python Streamlit is a terrific tool for creating interactive data visualizations. It packages all your visualizations up into a neat little application - including charts and maps - and displays them in your default browser. No muss, no fuss. Recently, I found a new dataset (to me) on the UN High Commission for Refugees (UNHCR) website. It contains country-to-country movements for refugees both from origin country and country of asylum Using this dataset, here's a step-by-step on how to code a Python Streamlit application that has:"},
{"Title": "IP subnet or IP calculator tool need feedback", "Author": "nicanorflavier", "Content": "Hey folks, I've been dabbling with a Python project recently that's all about making life easier for us I.T. people. It's a nifty little tool that calculates IP subnets and does IP calculations from the command or CLI. Here's the GitHub link and the code: https://github.com/nicanorflavier/ipnet I’m pretty stoked about it, but I know there’s always room for improvement. So, I thought, better to turn to than the wise minds of this python community? I’m all ears for any feedback, tips, tricks, or advice you guys might have. Thanks a ton in advance!"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A Beginner's Guide to Unit Testing with Pytest", "Author": "Stanulilic", "Content": "Hey r/python! I wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link."},
{"Title": "Pre-commit hook to keep coverage badge in README up to date", "Author": "60percentcocoa", "Content": "Wrote this as a tool to keep README coverage badges up to date without relying on 3rd party services or having to do anything extra, thought others might get some utility out of it: coverage-pre-commit. A .coverage file is expected at the root of the project, generated by running coverage run directly or using a plugin such as pytest-cov when running tests. Most convenient when used as a pre-push hook imo. Feel free to opine, be it positive or negative!"},
{"Title": "Reactive programming for Python with live-cells-py", "Author": "alex-gutev", "Content": "live-cells-py (Live Cells Python) is a reactive programming library which I ported from Live Cells for Dart.\nWhat my project Does:\nYou can declare cells which are observable containers for data: import live_cells as lc\n\na = lc.mutable(0)"},
{"Title": "PyWolt: Wolt food delivery service API wrapper", "Author": "daivushe1", "Content": "I'm thrilled to share my first open-source project with you all: PyWolt! 🎉 PyWolt is a Python library that makes it super easy to interact with the Wolt API.\nWhat My Project Does:\nDiscover Venues: Find nearby spots to grab a bite.\nExplore Menus: Dive into a venue's menu and pick your favorites.\nTarget Audience:"},
{"Title": "The possibility to build Android apps with python professionally is here and needs your support.", "Author": "klargstein", "Content": "You guys really need to check this. I believe new comers to python would love to tinker with the android ecosystem from the safety of python :-) Imgur: https://imgur.com/gallery/DtfwOVi https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course Edit: added imgur link."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "You should only use licensed version of python", "Author": "vikashgraja", "Content": "I’m an intern in a company and I automated some processes using python. My company’s IT wing said that as long as it is a licensed software you can use it in our company. In my mind I was like where the f I’m going to get a license for an open source software. Note : They mention that another team has been using licensed python. I thought either IT is so stupid or that team is so smart that they brought license for pycharm or anaconda (claim that it is a Python license) and fooled IT. If I am wrong then tell me where I can get that license. And I am also looking for job in data analyst."},
{"Title": "I made a React-like web framework for Python 👋", "Author": "Rawing7", "Content": "I'm Paul, one of the creators of Rio. Over the years I've tried many different established python GUI frameworks, but none of them really satisfied me. So I teamed up with a few like minded developers and spent the last few months to create our own framework. Rio is the result of this effort. What My Project Does Rio is a brand new GUI framework that lets you create modern web apps in just a few lines of Python. Our goal is to simplify web and app development, so you can focus on the things you care about, instead of wasting countless hours on frustrating user interface details. We do this by following the core principles of Python that we all know and love. Python is supposed to be simple and compact - and so is Rio. There is no need to learn any additional languages such as HTML, CSS or JavaScript, because all of the UI, Logic, Components and even layouting is done entirely in Python. There’s not even a distinction between front-end and back-end. Rio handles all of the communication transparently for you."},
{"Title": "Dash Pip Components", "Author": "Soolsily", "Content": "What My Project Does\nHey everyone, just released 8 new pip components for plotly and dash including:\nFull Calendar Component - A Full Calendar Component for Dash\nDash Summernote - A rich text WYSIWYG Editor for Dash\nDash Emoji Mart - A Slack-like Emoji Picker for Dash\nDash Charty - A Charting Library for Dash"},
{"Title": "The new REPL in Python 3.13.0 beta 1", "Author": "treyhunner", "Content": "Python 3.13.0 beta 1 was released today. The feature I'm most excited about is the new Python REPL. Here's a summary of my favorite features in the new REPL along with animated gifs. The TLDR:\nSupport for block-leveling history and block-level editing\nPasting code (even with blank lines within it) works as expected now\nTyping exit will exit (no more Use exit() or Ctrl-D (i.e. EOF) to exit message)"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "HS-transform, python package for hyperbolic S-transform in signal processing", "Author": "Ok_Employ_2414", "Content": "I made a python package for S-transform with Hyperbolic window (Hyperbolic S-transform or HSTransform package). This is my first time publishing a python package, so the project is still far from stable and still under beta release.\nWhat my project does: This transformation is applied to signal processing, analyzing transient changes of a signal during very short-time. Some special use case can be in power system signal, or Geophysical signal analysis, or MRI ..."},
{"Title": "I made a cheatsheet for pydash", "Author": "poopatroopa3", "Content": "https://brunodantas.github.io/pydash-cheatsheet/en/\nWhat my project does: pydash is a library with great potential to make you code more Functional and simple. I made this cheatsheet a while ago to highlight some of the most useful functions of the library, since there are so many. I hope it's useful.\nTarget audience: anyone who is interested in pydash, functional programming, not reinventing the wheel."},
{"Title": "IconMatch - find icons and letters positions from images!", "Author": "TraditionalDistrict9", "Content": "Hey all, I am not the original creator, but found that 4yo project, and decided to revive it! What my project does: IconMatch is library allowing you to extract icons and letter positions from image or from display! There is also realtime demo on repo showcasing how it works! Target Audience: For all detecting objects from display! Comparison: I did not find other project like that - but it was my first find too! It is also not OCR! https://github.com/NativeSensors/IconMatch Have fun!"},
{"Title": "Tutorial: Simple Pretty Maps That Will Improve Your Python Streamlit Skills", "Author": "jgloewen", "Content": "Interactive web applications for data visualization improve user engagement and understanding. These days, Streamlit is a very popular framework used to provide web applications for data science. It is a terrific programming tool to have in you Python knowledge toolbox. Here’s a fun and practical tutorial on how to create a simple interactive and dynamic Streamlit application. This application generates a beautiful and original map using the prettymaps library. Free article: HERE"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient Code", "Author": "Slow_Scene_7972", "Content": "Optimize Your Python Workflow: Proven Techniques for Crafting Production-Ready Code Link"},
{"Title": "Enhanced EPUB Version of \"An Understated Dominance\" Available for Fans!", "Author": "abdirxhmxn", "Content": "Hey everyone! I recently completed a fun project that I think fans of \"An Understated Dominance\" will appreciate, especially those who have struggled with reading the novel online due to website clutter and distractions. I've created a clean, distraction-free EPUB version of the novel that you can download and read on your preferred device. You can get it here: EPUB Download. Why I did this: The original website hosting the novel has a lot of distractions that can take away from the reading experience. My goal was to provide a seamless reading experience that allows you to fully immerse yourself in the story without unnecessary interruptions."},
{"Title": "Rye-Tui, a Text-based User Interface (TUI) to manage rye projects", "Author": "Zaloog1337", "Content": "Hi everyone, Ive reached a state of my current project, where I want to share it with you, and gather some feedback. This is my first time using rye and I am surprised, how Hassle-Free building a package with it went. Source Code: github\nInstallation\npython -m pip install rye-tui"},
{"Title": "Picodi - Simplifying Dependency Injection in Python", "Author": "yakimka", "Content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Homoiconic Python Code", "Author": "moonbunR", "Content": "Homoiconic, what does it mean? In simple terms, homoiconic code is when code is treated as data and can be manipulated as you would data. This means the code can be changed, new functions and variables added, the code can generate new code or even examine and modify its own structure and behavior all while it is running. That’s why homoiconic languages like Lisp are so powerful. But what if we can make a homoiconic python code, where the code and the data are one and the same and can be modified in the same way? This guide does a good job in trying to explain how you would create a python version of the “Lisp in Lisp” code which would give you access to all those homoiconic features that Lisp brags of like the macro systems, the expressiveness and flexibility, the metaprogramming etc. while still using python. What do you guys think of this?"},
{"Title": "I built a pipeline sending my wife and I SMSs twice a week with budgeting advice generated by AI", "Author": "MoodAppropriate4108", "Content": "What My Project Does:\nI built a pipeline of Dagger modules to send my wife and I SMSs twice a week with actionable financial advice generated by AI based on data from bank accounts regarding our daily spending. Details: Dagger is an open source programmable CI/CD engine. I built each step in the pipeline as a Dagger method. Dagger spins up ephemeral containers, running everything within its own container. I use GitHub Actions to trigger dagger methods that;"},
{"Title": "The best Python CLI library, arguably.", "Author": "AND_MY_HAX", "Content": "What My Project Does https://github.com/treykeown/arguably arguably makes it super simple to define complex CLIs. It uses your function signatures and docstrings to set everything up. Here's how it works:\nAdding the @arguably.command decorator to a function makes it appear on the CLI.\nIf multiple functions are decorated, they'll all be set up as subcommands. You can even set up multiple levels of subcommands."},
{"Title": "We built open-source SDK for adding custom code interpreters to AI apps", "Author": "mlejva", "Content": "What My Project Does Hey everyone! I'm the CEO of the company that built an SDK that makes it easy to build custom code interpreters for AI apps. We're a company called E2B [0]. We're building and open-source [1] secure environments for running untrusted AI-generated code and AI agents. We call these environments sandboxes and they are built on top of micro VM called Firecracker [2]. We specifically decided to use Firecrackers instead of containers because of their security and ability to do snapshots. You can think of us as giving small cloud computers to LLMs. We recently created a dedicated SDK for building custom code interpreters in Python or JS/TS. We saw this need after a lot of our users have been adding code execution capabilities to their AI apps with our core SDK [3]. These use cases were often centered around AI data analysis so code interpreter-like behavior made sense"},
{"Title": "LinkedIn-Learning-Downloader v1.1", "Author": "YounesWinter", "Content": "With Python i created a tool that enables users to download LinkedIn Learning courses, including the often overlooked but incredibly valuable exercise files. This feature sets our project apart, offering a complete learning experience by providing both the course videos and the materials needed for practical application.\nWhat great about it and beyond other tools in the same genre concerned LinkedIn Learning Downloaders, now you can download the whole courses from a path link. this is was never possible without Python."},
{"Title": "I made a small Python script that uses NASA'S APOD API to set cool backgrounds on a Windows machine", "Author": "Potato_eating_a_dog", "Content": "https://github.com/william7491681/APOD_Wallpaper_Script\nWhat my project does\nNASA has a ton of accessible API's, one of which being the APOD (Astronomy Picture Of the Day) API. I made a script to get the last 9 pictures of the day and set them as my Windows 10 background, and then used task scheduler to have the script re-run every day at noon and whenever the computer boots up. It's fairly hard coded for my setup (specific file paths, 1920x1080 monitor, etc), but it shouldn't be too hard to change if one wanted to."},
{"Title": "FastAPI Backend Template for SaaS products", "Author": "shekhuu", "Content": "Hello there, I just created a template for creating a backend for your SaaS products. What my project does: It is a FastAPI project/template for creating SaaS backends and admin dashboards. Comparison: \nOut of the box, it supports\nLicence key generation and validation.\nOAuth 2 authentication with scopes."},
{"Title": "JSX Syntax inside Python files. (Packed)", "Author": "RevolutionaryPen4661", "Content": "There was a JSX-style syntax preprocessor for Python called \"Packed,\" which allowed us to write JSX inside Python (*.pyx and *.py) files. It's unclear why they chose *.pyx for the file extension, as it conflicts with the naming of Cythonic file extensions (I have checked their issues). This project might have thrived with sufficient contributions and could have changed the way apps are built. However, the project is now archived on GitHub. The last commit was 5 years ago (LICENSE), and the last development commit was 9 years ago. This repository needs someone to revive it, but I don't have enough experience to take on that task. Even though I don't have enough information, we should start with Rust + Python to build a compiler (aka. template replacer) (this doesn't compile Python but replaces all JSX with a dictionary) and cleaner syntax. Integration with Django (Packed has an example too), Flask, FastAPI, Robyn etc."},
{"Title": "this.s and this.d", "Author": "VladTbk", "Content": "Recently, I found out about the this \"Easter egg\" in python3. Adding import this into a py file will print \"The Zen of Python\" by Tim Peters. Also, this has two attributes: this.s and this.d, which I guess form the actual Easter egg. this.s returns an encrypted version of \"The Zen\" and this.d well, see for yourself, maybe you'll solve the puzzle."},
{"Title": "TPC-H Cloud Benchmarks: Spark, Dask, DuckDB, Polars", "Author": "mrocklin", "Content": "I hit publish on a blogpost last week on running Spark, Dask, DuckDB, and Polars on the TPC-H benchmark across a variety of scales (10 GiB, 100 GiB, 1 TiB, 10 TiB), both locally on a Macbook Pro and on the cloud.  It’s a broad set of configurations.  The results are interesting. No project wins uniformly.  They all perform differently at different scales: \nDuckDB and Polars are crazy fast on local machines\nDask and DuckDB seem to win on cloud and at scale"},
{"Title": "I made a Mandelbrot Zoom using Python", "Author": "AbideByReason", "Content": "I made a YouTube video which previews the zoom and explains the code, which you can find here: https://youtu.be/HtNUFdh2sjg What my project does: it creates a Mandelbrot Zoom. Comparison: it uses Pillow and consists of just 2 main blocks of code: one is the main function that finds which points are in the Mandelbrot Set and the other is the main loop that applies appropriate colors to each image. It gives the option of being black and white OR in color. It works fairly well but can definitely be faster if parallelized. I'd love to hear any suggestions on how it can be improved. Target Audience: fun/toy project"},
{"Title": "DeepFusion: a highly modular Deep Learning Framework.", "Author": "atharvaaalok1", "Content": "What My Project Does: Hello all, I am a student at Stanford University, I was on a gap year due to medical conditions and to utilitze my time I was studying deep learning. And Voila... I've developed a deep learning library, DeepFusion! Details: It's customizable and has an easily accessible and highly intuitive codebase. One can just dive right in and effortlessly understand the source code. You can download it from:\ngithub at https://github.com/atharvaaalok/deepfusion"},
{"Title": "MyTimer v1.3: A Geeky Timer for Terminal Enthusiasts", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/sepandhaghighi/mytimer What My Project Does: MyTimer is a Python CLI project that provides a simple, efficient timer for terminal users, particularly targeting the geek community. It allows users to set timers directly from their command line interface, offering a distraction-free experience. mytimer --hour=12 --minute=34 --second=56 --alarm --alarm-repeat=5\n\n ___    ______          ______   _     _         _______  _______   \n(___)  (_____ \\        (_____ \\ | |   (_)       (_______)(_______)  \n   _     ____) )   _    _____) )| |_____    _    ______   ______    \n  | |   / ____/   (_)  (_____ ( |_____  |  (_)  (_____ \\ |  ___ \\   \n _| |_ | (_____    _    _____) )      | |   _    _____) )| |___) )  \n(_____)|_______)  (_)  (______/       |_|  (_)  (______/ |______/"},
{"Title": "sjvisualizer: a python package to animate time-series data", "Author": "PieChartPirate", "Content": "What the project does: data animation library for time-series data. Currently it supports the following chart types:\nBar races\nAnimated Pie Charts\nAnimated Line Charts\nAnimated Stacked Area Charts"},
{"Title": "Thank You PyConUS 2024 !!!", "Author": "ryanstephendavis", "Content": "First timer this year, currently at the airport leaving Pittsburgh after 6 days of PyCon... I've never seen such an intelligent, inclusive, humble, diverse, and inspiring group of human beings. The Python community serves as a beautiful model of what tech culture should strive towards. I could go on and on about how much fun I had, but in short, thanks to all the volunteers, staff, and FOSS developers that have cultivated such an amazing culture."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Calculating Virtual Cycling Power With Python", "Author": "TokenChingy", "Content": "I was doing some light reading and stumbled across Steve Gribbles Power vs Speed Calculator and thought I'd give it a go at rebuilding it based on his Physics model using Python. Then I wrote an article about. Thought I'd share it with you all: Calculating Virtual Cycling Power (jasonlei.com)"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Auto Data Analysis python packages to know", "Author": "mehul_gupta1997", "Content": "Check this video tutorial to explore different AutoEDA python packages like pandas-profiling, sweetviz, dataprep,etc which can enable automatic data analysis within minutes without any effort : https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry"},
{"Title": "Folks who know the internals: Where does operator precedence \"happen\"?", "Author": "BeerIsTheMindKiller", "Content": "Hey! Messing around with instaviz, cool library, highly recommend. You can visualize a function's bytecode as well as AST and some other stuff. i entered this: def f():\n  x = 1 + 2 - 10**2\n  return x I was expecting the AST nodes for 1 + 2 - 10**2 to be rearranged somehow, with 10**2 being moved to the left hand of the expression, because exponents get evaluated before addition/subtraction. but no! just looks like this:"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Speed improvements in Polars over Pandas", "Author": "zzoetrop_1999", "Content": "I'm giving a talk on polars in July. It's been pretty fast for us, but I'm curious to hear some examples of improvements other people have seen. I got one process down from over three minutes to around 10 seconds.\nAlso curious whether people have switched over to using polars instead of pandas or they reserve it for specific use cases."},
{"Title": "Interfacing Custom USB endpoints using Python!", "Author": "shekhuu", "Content": "Hi everyone, I was building something that required me to communicate over USB to Raspberry Pi Pico using Pyusb Python. So I decided to make a blog post about it showing the concepts, process, and source code.\nCheck out the blog post here!\nCheck out the source code here!"},
{"Title": "InterProcessPyObjects: Fast IPC for Sharing and Modifying Objects Across Processes", "Author": "FI_Mihej", "Content": "InterProcessPyObjects Python package\ngithub.com/FI-Mihej/InterProcessPyObjects If you like the project, consider giving it a star on GitHub to show your support and help further development. :) pypi.org/project/InterProcessPyObjects\nWhat My Project Does\nInterProcessPyObjects is a part of the Cengal library. If you have any questions or would like to participate in discussions, feel free to join the . Your support and involvement are greatly appreciated as Cengal evolves."},
{"Title": "Mystique: Sparse data matching for Python tests", "Author": "jonocodes", "Content": "What My Project Does I made this library to help assert test responses inline while directing the comparison to be as rigid or lax as it needs to be. Motivation I write a lot of tests that assert values in complex nested dictionaries. But really I only need to check some parts in the response, not all of it. I often find myself transforming the response or maliciously extracting the important parts I need - in order to satisfy the assertions. This gets messy and can make tests hard to follow. Target Audience Anyone who writes tests. This is particularly useful if you generate fake data in your tests with something like Faker, Factory Boy, or Model Bakery."},
{"Title": "AzuracastPy: An Unofficial Python Wrapper for the Azuracast API.", "Author": "ARandomBoiIsMe", "Content": "Source code What My Project Does: It acts as a wrapper for the AzuraCast API, providing custom functions and classes for more straightforward use of the API in python projects. Target Audience: Python users who are interested in programmatically interacting with online radios hosted on AzuraCast. Comparison: The idea of API Wrappers is not new. However, I noticed that the only existing wrapper for this API is written in PHP, which I am not experienced with. I created this project so I, and other python programmers by extension, could have an easier time working with the API."},
{"Title": "I made python audioplayer with FFmpeg and Qt6", "Author": "WyseTwist", "Content": "Midnight Player - a simple python audiplayer for playing audio What My Project Does: My project is just an audio player for playing music, it can play audio from folders, supports different audio formats like Flac, Mp3 and can show some information about the track. Player uses subprocess to access ffmpeg, then it decodes the audio file into pcm format, then plays this file using sounddevice library. the use of these libraries is to ensure that the audio file does not lose quality during processing. Target Audience: This project was made to increase experience in python programming and to understand how the audio playback process works, but the project is also useful for people who are interested in learning the structure of the audio player as it is open source."},
{"Title": "How to publish a Python package with GitHub Actions using Poetry", "Author": "johnfraney", "Content": "Hi! I've been enjoying using PyPI's trusted publishing for the Python packages I maintain and I threw together a little post showing how I'm using that along with Poetry to publish a package from GitHub https://johnfraney.ca/blog/how-to-publish-a-python-package-with-poetry-and-github-actions/ If you've got any tips for publishing a Python package, I'd be happy to hear those, too"},
{"Title": "diskcache: This key-value store library is faster than Redis and Memcached 😮 (built by Grant Jenks)", "Author": "RevolutionaryPen4661", "Content": "PYPI (From the README, Released Last Year, Edited by Grammarly) Github pip install diskcache The cloud-based computing of 2024 puts a premium on memory. Gigabytes of space are left on disks as processes vie for memory. Memcached (and sometimes Redis) is used as a cache among these processes. Wouldn’t it be nice to leverage empty disk space for caching? Django is Python’s most popular web framework and has several caching backends. Unfortunately, the file-based cache in Django is essentially broken. The culling method is random and large caches repeatedly scan a cache directory which slows linearly with growth. Can you allow it to take sixty milliseconds to store a key in a cache with a thousand items?"},
{"Title": "Reforger Whitelist Py", "Author": "PyjamaZombie", "Content": "My project below, to put it simply, periodically checks the console.log for when a player join event occurs, when it does, it extracts the player's identifiers (player_name and identity_id). This is then checked against either, a JSON or, a database. I have incorporated standard logging, command-line arguments and threading to handle each player process individually. The target audience for this is the Arma Reforger community, for which, the application is made for. Currently, to my knowledge, there is no application like this available to the Arma Reforger community. I am very open to feedback, contributions and advice as want to expand this as much as possible!"},
{"Title": "Who is using quart framework for microservices?", "Author": "Dry_Raspberry4514", "Content": "I am using quart framework (https://quart.palletsprojects.com) for a number of microservices in a SaaS application. However, I hardly hear anything about this framework on any social media platform which seems to be dominated by FastAPI. Also I'm unable to find which all projects/companies are using this framework. All this is leading to anxiety around the future of this project. Are there any well known projects / companies which are using this framework for microservices?"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Why is Plotly so cumbersome to tweak?", "Author": "olive_oil_for_you", "Content": "I made this visualisation with this code. I have three questions:\nIs Plotly supposed to be this cumbersome to tweak? Would other libraries require the same amount of code to add the details I did?\nCan my code be reduced in size? Maybe it's me who is complicating things with Plotly and there are easier ways to do what I am doing.\nAny R enthusiast who can tell me how much shorter this code would look like with ggplot2? I asked ChatGPT but the result was garbage."},
{"Title": "I made a Traversible Tree in Python", "Author": "frankstan33", "Content": "Comparison\nIt is inspired from the existing tree command on linux and windows too So basically it is just like the tree command, it shows you a tree of the current directory structure. What My Project Does\nIt basically gives you a birds eye view of your dir structure and quickly navigate to the folder you want to without having to know its path or doing cd ../../.. many times. There are a bunch of command line args such as setting the paths, flags to show dot directories, set head height (no. of parent dirs shown) and tail height (depth)."},
{"Title": "I connected LLM to Python runtime and generated unit-tests (OpenSource)", "Author": "Financial_Muffin396", "Content": "Hi all, I initially started this adventure by trying to automate bug fixes with the help of LLMs. However, I received feedback saying the fixes aren't always correct, leading to the question: why bother reviewing PRs that might add more issues? (It's really hard for LLMs to say \"I don't know\"). So, I decided to focus on reliability perfecting unit tests. The source code is available at: https://github.com/CaptureFlow/captureflow-py What My Project Does: It incorporates a tracer client-side Python library and a backend that accumulates such traces and is capable of proposing code improvements and generating tests for your repository. It traverses the execution graph, extracts relevant parts, enriches them with implementation data from the GitHub API, and then generates tests with the help of GPT4."},
{"Title": "Programmable Semantics (Eval, Semicolon, Assignment) for Python", "Author": "aoeu512", "Content": "I've seen programmable semantics (eval-hacking, macros) in LISPs and in Haskell-likes(Monads/Template Haskell), the overall techinque in OOP languages is called \"Aspect Oriented Programming\". Has this kind of thing been discussed before, and is it Pythonic it could allow a lot of Python code to be shorter. Python has sys.set_trace that sort of allows some form of programmable semantics but its mostly for debugging. Programmable assignment(variables) are like setters/getters/properties, but instead of being run on o.x = 5, you could run them on \"all local assignments\" isnside a context manager or in a decorated function. On every assignment you could do stuff like log the values, update dependencies, notify objects, do a database transaction, do persistance, calculate other values, without having to explicitly do so for every assignment statement."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "try... except... finally!", "Author": "young-and-ignorant", "Content": "Haven't seen this syntax used very often and was wondering why. During error handling, if you have something to run independent of the success, you can use finally. from your_library import DataProcess\n\n\nengine = DataProcess()\n\ntry:\n    engine.io()\n    engine.process()\n    engine.some_more_io()\nexcept Exception as e:\n    engine.revert()\n    raise e\nfinally:\n    engine.cleanup()"},
{"Title": "Seeking Your Input: Let's Co-Create FreeCodeCamp for python together", "Author": "globalwarming_isreal", "Content": "Hello all, This is probably my first post here. I usuallly lurk around here and Django subreddits. I've been brewing up an idea and I need your input before I take the plunge! Picture this: a website like FreeCodeCamp but for python and related technologies, a learning oasis where anyone can kickstart their journey from Python newbie to job-ready pro, and it's all free! But here's the thing, I want this to be our platform, crafted with your needs and dreams in mind. So, before I start, I need to know: would this be something that gets you excited? Imagine quizzes helping you find your starting point, interactive challenges that keep you in the zone, and a supportive community to cheer you on every step of the way. Plus, videos, written tutorials, and a progress tracker to keep you motivated!"},
{"Title": "Durable Python - Infrastructure failures should not stop the process", "Author": "autokitteh", "Content": "Durable Python enables developers to write Python code while an underlying system ensures reliability and resilience. It automatically handles state persistence, fault tolerance, and retry mechanisms, allowing developers to focus on business logic without worrying about infrastructure concerns. Consider the following code, in case the process terminates in the middle of execution, in case the process is killed or due to hardware failure, the process will not complete. import requests\nimport time\n\n\nSLEEP_SECONDS = 3\nURL = \"http://localhost:9980/webtools/api/msgs\"\n\ndef on_http_get(data):\n    for i in range(10):\n        print(\"Loop iteration: %d of 10\" % (i + 1))\n\n        # Send a POST request to the application\n        requests.post(URL, data = \"This is my \" + str(i) + \" iteration...\")\n        time.sleep(SLEEP_SECONDS)"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tutorial on Creating Useful Data Visuals with Python seaborn and matplotlib libraries", "Author": "jgloewen", "Content": "With the current global deluge of data and information, there has never been a more important to visualize your data in a clear and simple manner. Python is a terrific tool to help us do this. The key to this lies in choosing the the right data visualization techniques to tell the most interesting and relevant story. Three useful visuals are:\nsmall multiples\nheat maps"},
{"Title": "Dive into DevOps ebook Humble Bundle supporting the Python Software Foundation", "Author": "AlSweigart", "Content": "https://www.humblebundle.com/books/dive-into-dev-ops-no-starch-books Be sure to click on \"Adjust Donation\" and \"Custom Amount\" and then max out the amount going to the Python Software Foundation. (From $1.75 to $24.50!) For $30 you get the following ebooks from No Starch Press:\nAutomate the Boring Stuff with Python, 2nd Edition\nDevOps for the Desperate"},
{"Title": "Rethinking String Encoding: a 37.5% space efficient string encoding than UTF-8 in Apache Fury", "Author": "Shawn-Yang25", "Content": "In rpc/serialization systems, we often need to send namespace/path/filename/fieldName/packageName/moduleName/className/enumValue string between processes.\nThose strings are mostly ascii strings. In order to transfer between processes, we encode such strings using utf-8 encodings. Such encoding will take one byte for every char, which is not space efficient actually.\nIf we take a deeper look, we will found that most chars are lowercase chars, ., $ and _, which can be expressed in a much smaller range 0~32. But one byte can represent range 0~255, the significant bits are wasted, and this cost is not ignorable. In a dynamic serialization framework, such meta will take considerable cost compared to actual data.\nSo we proposed a new string encoding which we called meta string encoding in Fury. It will encode most chars using 5 bits instead of 8 bits in utf-8 encoding, which can bring 37.5% space cost savings compared to utf-8 encoding.\nFor string can't be represented by 5 bits, we also proposed encoding using 6 bits which can bring 25% space cost savings"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python script to convert Spotify Artists to Playlists", "Author": "RJW-20", "Content": "I've made my first bit of useful software and I wanted to share it here. I'd love some feedback (and it would be amazing to hear if someone has used it!) What My Project Does: Using the third party requests package, the script interacts with the Spotify web API to request all albums from the given Artist, then all the tracks from all of those albums. It then goes through the list to remove any duplicates and also tries to remove any unwanted versions (only done by examining the name of the track, since Spotify does not attribute a version type to its tracks). Once that's done a playlist is then created on your Spotify account with the name of the Artist and all the tracks are posted there in chronological (essentially per album) order."},
{"Title": "List of Sites that Packages Need to Connect to?", "Author": "BullCityPicker", "Content": "I'm doing most of my work behind a government firewall, and I'm having trouble connecting to certain sites. I can do the usual \"pip\" installs just fine, but I'm talking about packages that need to download data to do their job. An example is the NLTK (Natural Language Toolkit) package, which downloads dictionaries, lookup tables for sentiment analysis, and so on. I know what sites to open up for that particular problem (pastebin.com and nltk.org), but I wonder if anybody's made a list of such sites for different packages. I can ask for the two sites I know about to be opened up, but I'd like to have a more comprehensive list so I don't have to go through the red tape multiple times."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "pip time machine", "Author": "rejectedlesbian", "Content": "https://github.com/nevakrien/time_machine_pip this is a fairly simple project barely anything to it but I think its promising\nthe idea is to put pip in a time machine so it can not use package versions that were made after the project is made. I am doing this by proxiying pypi and cutting out the newer versions. initial tests show that pip respects the proxy and works like you would expect"},
{"Title": "Pip 24.1 beta released, and it's a big one", "Author": "zurtex", "Content": "I'd like to call attention to pip 24.1 beta asit is unusual for the pip team to release betas:\nhttps://pip.pypa.io/en/latest/news/#b1-2024-05-06\nhttps://pypi.org/project/pip/24.1b1/\nYou can install with: python -m pip install pip==24.1b1 In particular they have upgraded their vendored version of packaging from 21.3 to 24.0, this was a and , included significant performance improvements, and will allow pip to support . However, it also means legacy versions and specifiers are with pip."},
{"Title": "How Python Asyncio Works: Recreating it from Scratch", "Author": "jpjacobpadilla", "Content": "Do you understand how asyncio works behind the scenes? Read this article and see how you can use Python generators to create your own version of asyncio, and then use the __await__ dunder method to use the async/await keywords to come full circle! https://jacobpadilla.com/articles/recreating-asyncio"},
{"Title": "Build tool support for PySide / PyQt", "Author": "jmacey", "Content": "Just interested in how people approach this, typically I just use VSCode or QtCreator to build simple projects. However I now want to automate some of the build process such as running uic, and rcc. I've tried to use CMake but can't seem to get it to work without a lot of custom scripting (for example the AUTOUIC etc functions need c++ projects), can't see any info on running uic in QtCreator (which would be ideal but python support is really just an after thought). I could write some Makefiles but this is a little ad-hoc and also confuses the IDE's (and at the end of the day I want a simple process for my students to use and I already teach cmake for C++ dev)."},
{"Title": "relax-py - Web framework for htmx with hot module replacement", "Author": "MindLopsided4430", "Content": "Excited to finally showcase this! It's still pretty rough around the edges, but I'm finally happy enough with the feature set and curious to see what the community thinks about a framework like this. Code: github.com/crpier/relax-py Documentation: crpier.github.io/relax-py What My Project Does relax-py is a Python framework for building full-stack applications with htmx It provides tools for writing HTML in a manner similar to simple_html (which also inspired the decision to use standard Python to write HTML, rather than use Jinja2 or to make something like templ work in Python) It has:"},
{"Title": "python-oracledb 2.2 and the VECTOR type in Oracle Database 23ai", "Author": "cjbj", "Content": "python-oracledb 2.2, the Oracle Database driver, has been released with support for Oracle Database 23ai features such as the VECTOR and BOOLEAN data types, Implicit Connection Pooling, and improved connection performance. See the release announcement."},
{"Title": "I've started writing Python bindings for lexertl", "Author": "BenHanson", "Content": "See https://github.com/BenHanson/pylexertl I will see about registering as an official library when I am happy I have completed all the bindings. I added all the missing functions for the rules objects today, so things are in reasonable shape already. My python experience has been limited up until now, but it is big for my new role. I have a runtime parser generator https://github.com/BenHanson/parsertl17 which I also plan to add bindings for. I hope this is of interest to somebody! What My Project Does Allows you to build lexical analysers at runtime and use them to lex text (in this case utf-8)"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Introducing PgQueuer: A Minimalist Python Job Queue Built on PostgreSQL", "Author": "GabelSnabel", "Content": "What My Project Does PgQueuer is a Python library designed to manage job queues using PostgreSQL features. It leverages PostgreSQL's native LISTEN/NOTIFY, along with advanced locking mechanisms, to handle job queues efficiently. This allows for real-time job processing, concurrency, and reliable task execution without the need for a separate queuing system. Target Audience PgQueuer is ideal for developers and teams who already use PostgreSQL in their projects and are looking for a simple, integrated way to handle background tasks and job queues. It's designed for production use, offering a dependable solution that scales seamlessly with existing PostgreSQL databases."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Building an LLM chat application using RAG Agent", "Author": "iryna_kondr", "Content": "Motivation\nChatbots are among the most popular applications of large language models (LLMs). Often, an LLM's internal knowledge base is adequate for answering users questions. However, in those cases, the model may generate outdated, incorrect, or too generic responses when specificity is expected. These challenges can be partially addressed by supplementing the LLM with an external knowledge base and employing the retrieval-augmented generation (RAG) technique. However, if user queries are complex, it may be necessary to break the task into several sub-parts. In such cases, relying solely on the RAG technique may not be sufficient, and the use of agents may be required."},
{"Title": "Reboot Your Router with a Python Script", "Author": "SAV_NC", "Content": "Hello r/python, I've developed a Python script that allows you to reboot your router remotely via SSH! This script handles the countdown and checks when the router is back online after a reboot. What My Project Does: Key Features:\nAutomated Router Reboot: Remotely trigger a reboot of your router.\nMonitoring: After sending the reboot command, the script counts down from 350 seconds and starts checking the router's status by pinging it after the first 100 seconds have passed."},
{"Title": "What changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ?", "Author": "These_Shoe3594", "Content": "What are all the changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ? There are some CVE fixes available in the latest 3.x version of werkzueg. To take the fixes as part of my code, we want to upgrade the version. When I do so, I’ve faced lot of breakages. I found some on documents and release notes. But it would be easier if someone already did some changes regarding this."},
{"Title": "Opinions sought: Modernising the Apache NiFi Python client", "Author": "Samausi", "Content": "Hello folks, I am the author of NiPyAPI, the defacto Python client for the Apache NiFi project. For those unfamiliar, Apache NiFi is an open-source ETL tool designed around the flow-based programming paradigm. It excels at continuously moving and managing arbitrary data flows between disparate systems with low latency at large scale, and is often contrasted with Airflow. Amongst many features, NiFi allows for Command & Control via a native UI, enabling live edits to data routing and transformation. NiFi also enforces an API-first approach, and produces a swagger definition during code compilation, which allowed creation of a Python client to enable automated Data Flow testing and a Design & Deploy approach by running it through tool shaped by mustache templates. This produces a verbose low-level client, which I then leverage in higher-level operational functions and demo scripts in the library."},
{"Title": "Langchain using llama3 to build recommendation system", "Author": "yngwieHero", "Content": "Hi, Recently I played a bit with LLMs, specifcally exploring ways of running the models locally and building prompts using LangChain. As a result ended up coding a small recommendation system, powered with Llama3-7b model, which suggests topics to read on HackerNews. Wanted to share my experiences, so I wrote a small article where I described all my findings.\nHope you'll like it: https://lukaszksiezak.github.io/ScrapyToLLM/ Github repo: https://github.com/lukaszksiezak/ScrapyToLLM What the project does: It's a Python application which uses scrapy to scrape HackerNews page. Scraped articles are pipelined to redis, which is then feeding Llama3 using langchain. Prompter is configured to serve a user articles which are matching his request."},
{"Title": "PyCon US 2024 is here!", "Author": "monorepo", "Content": "Official Event"},
{"Title": "Blat AI generates Python code to do web-scraping (code based on Scrapy framework)", "Author": "arnaupv", "Content": "Miguel Algorri and Arnau Pont Vílchez here, blat co-founders! Target Audience\nPeople who need to collect public data from the web (pricing, articles, reviews, leads etc). What does our Project Do?\nAt blat we aim to deliver production-ready web scraping code in minutes (written in Python, Scrapy framework).\nThis is feasible thanks to our Web Scraping AI Agent 🧠. Here our CLI to interact with the Web Scraping AI Agent (github). Too good to be true?"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Apple Health data exploration with Atlas, Clickhouse, Vega-Altair, Quarto", "Author": "__tosh", "Content": "What My Project Does A few days ago I wrote a simple python script (\"Atlas\") that turns the Apple Health export.xml file (which is about 1 GB in my case, with about 10 years of data) into a very simple parquet file (a bit like a compressed CSV) that is also way smaller (40 MB). The parquet file has 5 columns:\ntype (e.g. \"CyclingDistance\")\nvalue (e.g. \"12.100\")"},
{"Title": "I made a python bot that plays minesweeper", "Author": "_dwightshrute", "Content": "Hello, I made this Minesweeper bot that I wanted to share with you all. What My Project Does - The bot takes a screenshot of the board and runs a classification algorithm to extract the contents of the board. It then analyzes the board, finds as many mines as it can, and sends clicks. If it cannot find any mines then it guesses the most probable position of a mine. Target Audience - It's a toy project for anyone interested in algorithms or problem-solving. Comparison - This is just my attempt at making a minesweeper bot. I'm sure there are many bots out there that are much more efficient than this."},
{"Title": "Production grade AI Web apps, just using python ?", "Author": "prime_danger", "Content": "Hey guys, I have worked on building multiple ai/ml usecases and their specific backends. But now I want build interfaces for easy and quick integration. I saw a blog which used FastUI which looks quick decent but when I tried it just showed me a Json of elements on the page. Are there any other libraries I should use? 🤔"},
{"Title": "A Beginner's Guide to Unit Testing with Pytest", "Author": "Stanulilic", "Content": "Hey r/python! I wrote a guide on how to use Pytest, covering a bunch of important features like designing tests, filtering tests, parameterizing tests, fixtures, and more. Check it out on this link."},
{"Title": "Is PyGame still alive?", "Author": "pyeri", "Content": "So it was a long time ago in the good old Python 2.x days (circa 2010 probably) that I had learned PyGame with some tutorials at my former work place. But nowadays since I mostly freelance with business apps, I never felt the need for it. But since such a game development project is on the horizon after all these years, I was wondering if PyGame can still be up for the task with Python 3.x? Or is there a better Python library available these days? I don't need any advanced gaming features of modern day VFX or anything, all I need is some basic Mario/Luigi style graphics, that's all!"},
{"Title": "Reactive programming for Python with live-cells-py", "Author": "alex-gutev", "Content": "live-cells-py (Live Cells Python) is a reactive programming library which I ported from Live Cells for Dart.\nWhat my project Does:\nYou can declare cells which are observable containers for data: import live_cells as lc\n\na = lc.mutable(0)"},
{"Title": "Track the size of your PyInstaller packages in CI", "Author": "bencherdev", "Content": "If you have ever wanted to track the size of your PyInstaller packages in CI, Bencher now supports tracking your package size: https://bencher.dev/docs/how-to/track-file-size/"},
{"Title": "The possibility to build Android apps with python professionally is here and needs your support.", "Author": "klargstein", "Content": "You guys really need to check this. I believe new comers to python would love to tinker with the android ecosystem from the safety of python :-) Imgur: https://imgur.com/gallery/DtfwOVi https://www.kickstarter.com/projects/kivyschool/the-pain-free-python-on-android-essentials-course Edit: added imgur link."},
{"Title": "I created a Python script that makes it easier to track how your baby's sleep is improving", "Author": "BX1959", "Content": "My wife and I use the Huckleberry app to track our baby's sleep periods. Although the free version of the app allows you to view a number of sleep-related metrics, I also wanted to see whether his longest nightly sleep stretches were getting longer over time. Therefore, I created a Python project to help me answer this and other questions I had about my baby's sleep.\nWhat My Project Does\nThis project reads in data from a Huckleberry .csv export (or a separate custom .csv file); analyzes its sleep information; and then produces ."},
{"Title": "ChatGPT can talk with all my Python notebooks", "Author": "pp314159", "Content": "I'm working on an open-source framework for converting Python notebooks into web applications, it is called Mercury. Recently, I have added an option to execute notebooks with REST API. You can pass paramters in POST request body to the notebook, execute all cells and return JSON as response. I'm also running a SaaS service, Mercury Cloud where you can deploy notebooks with one-click with unique website domain. What My Project Does It makes Python notebooks extermely easy to integrate with custom ChatGPT, so GPT can execute Python notebooks and get response. It is 3-steps process:"},
{"Title": "Framework to use for backend", "Author": "Clickyz", "Content": "Hello guys I recently decided to move from nodejs(expressjs) to python for general purposes but mostly for backend. I have couple of questions.\nWill i regret my migration to python? :)\nWhich framework you suggest for backend solo dev?\nAnd what tips are you suggesting me in general to get used to python."},
{"Title": "New Python-only abstractions for extracting data from apis", "Author": "Thinker_Assignment", "Content": "Hey there, you are probably familiar with REST APIs.\nWe at dlt library added a new way to get data from apis (and dlt can already load it with best practice to db or parquet). We already did some internal hackathons but we would appreciate your feedback so we can improve it further\n- Our new REST API Source is a short, declarative configuration driven way of creating sources.\n- Our new REST API Client is a collection of Python helpers used by the above source, which you can also use as a standalone, config-free, imperative high-level abstraction for building pipelines.\nYou can read more about the source here or go to our docs for the REST APIClient info\n\nPS: see you at Pycon Pittsburgh!"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Interactive Data Visualization with Python: A Showcase of Plotly Dash", "Author": "AbhishekSuryavanshee", "Content": "What My Project Does:\nI'm excited to introduce my latest project built with Python – an interactive data visualization application using Plotly Dash. This project aims to empower users to explore and analyze datasets dynamically through interactive visualizations. By leveraging Plotly Dash's capabilities, users can interact with data in real-time, customize visualizations on the fly, and gain deeper insights with just a few clicks. Target Audience:\nThis project caters to a wide range of users, from data enthusiasts and analysts to professionals seeking to communicate insights effectively. Whether you're a data scientist exploring patterns in large datasets or a business analyst presenting findings to stakeholders, this tool is designed to streamline your workflow and enhance your data storytelling capabilities. It's suitable for both production-grade applications and educational purposes, offering a versatile platform for data visualization tasks of varying complexity."},
{"Title": "Declarative GUI Slint v1.6 released with Design Mode (WYSIWYG) Improvements", "Author": "madnirua", "Content": "https://slint.dev/blog/slint-1.6-released Slint is a declarative GUI toolkit to build native user interfaces for desktop and embedded applications. Find more information at https://slint.dev/ or check out the source code at https://github.com/slint-ui/slint. EDIT: The Python APIs are currently in alpha. More info -- https://github.com/slint-ui/slint/tree/master/api/python"},
{"Title": "Implementing your own pypi clone", "Author": "chione99", "Content": "Hi, Just want to know how difficult is it to manage your own pypi clone and how do you recommend to create a seperation between dev and prod systems."},
{"Title": "Manage Your Squid Proxy Server Efficiently with This Python Script", "Author": "SAV_NC", "Content": "🦑 Squid Proxy Manager Script Hello fellow Python enthusiasts! I've created a Python script that makes managing your Squid Proxy Server a breeze. If you're looking for an efficient and straightforward way to interact with your Squid server remotely, this script is for you. 🎉 What My Project Does The Squid Proxy Manager script allows you to manage your Squid Proxy Server remotely using a simple command-line interface. Here are some of the key features:\nCheck Squid Service Status: Quickly check if your Squid service is running or not."},
{"Title": "You should only use licensed version of python", "Author": "vikashgraja", "Content": "I’m an intern in a company and I automated some processes using python. My company’s IT wing said that as long as it is a licensed software you can use it in our company. In my mind I was like where the f I’m going to get a license for an open source software. Note : They mention that another team has been using licensed python. I thought either IT is so stupid or that team is so smart that they brought license for pycharm or anaconda (claim that it is a Python license) and fooled IT. If I am wrong then tell me where I can get that license. And I am also looking for job in data analyst."},
{"Title": "modern_colorthief - Modified Median Cut Quantization algorithm in rust + python", "Author": "BasePlate_Admin", "Content": "github\ndocumentation\nWhat my project does : It gets the dominant color/color palette from given image. Target Audience: Anyone Usage modern_colorthief exposes two functions get_color and get_palette Here is how to use get_color: from modern_colorthief import get_color\n\n# Path to any image\npath = ...\n\nprint(get_color(path)) # returns tuple[int,int,int]"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Dash Pip Components", "Author": "Soolsily", "Content": "What My Project Does\nHey everyone, just released 8 new pip components for plotly and dash including:\nFull Calendar Component - A Full Calendar Component for Dash\nDash Summernote - A rich text WYSIWYG Editor for Dash\nDash Emoji Mart - A Slack-like Emoji Picker for Dash\nDash Charty - A Charting Library for Dash"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Frame - a new language for programming state machines in Python", "Author": "framelanger", "Content": "Hey, I am (re)releasing a project called Frame that I've been working on to create a language and transpiler to easily create state machines/automata in Python. It also is able to generate UML documentation as well. This project is for people who are interested in programming state machines for a wide range of purposes such as game programming, workflows, MBSE modeling as well as school projects for comp sci theory. It is also useful simply for generating flow documentation. The Framepiler (Frame transpiler) is in beta at this time. It would be great to get feedback from the Python community on any gaps in key functionality or bugs."},
{"Title": "HS-transform, python package for hyperbolic S-transform in signal processing", "Author": "Ok_Employ_2414", "Content": "I made a python package for S-transform with Hyperbolic window (Hyperbolic S-transform or HSTransform package). This is my first time publishing a python package, so the project is still far from stable and still under beta release.\nWhat my project does: This transformation is applied to signal processing, analyzing transient changes of a signal during very short-time. Some special use case can be in power system signal, or Geophysical signal analysis, or MRI ..."},
{"Title": "I made a cheatsheet for pydash", "Author": "poopatroopa3", "Content": "https://brunodantas.github.io/pydash-cheatsheet/en/\nWhat my project does: pydash is a library with great potential to make you code more Functional and simple. I made this cheatsheet a while ago to highlight some of the most useful functions of the library, since there are so many. I hope it's useful.\nTarget audience: anyone who is interested in pydash, functional programming, not reinventing the wheel."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "IconMatch - find icons and letters positions from images!", "Author": "TraditionalDistrict9", "Content": "Hey all, I am not the original creator, but found that 4yo project, and decided to revive it! What my project does: IconMatch is library allowing you to extract icons and letter positions from image or from display! There is also realtime demo on repo showcasing how it works! Target Audience: For all detecting objects from display! Comparison: I did not find other project like that - but it was my first find too! It is also not OCR! https://github.com/NativeSensors/IconMatch Have fun!"},
{"Title": "Python Test 220: Getting the most out of PyCon, including juggling - Rob Ludwick", "Author": "variedthoughts", "Content": "Listen at https://podcast.pythontest.com/episodes/220-juggling-pycon\nEven if you never get a chance to go to PyCon, I hope this interview helps you get a feel for the welcoming aspect of the Python community. The juggling at PyCon is one of the inspirations for PythonPeople.fm, one of PythonTests's sibling podcasts. Do you have any conference tips to add?"},
{"Title": "Tutorial: Simple Pretty Maps That Will Improve Your Python Streamlit Skills", "Author": "jgloewen", "Content": "Interactive web applications for data visualization improve user engagement and understanding. These days, Streamlit is a very popular framework used to provide web applications for data science. It is a terrific programming tool to have in you Python knowledge toolbox. Here’s a fun and practical tutorial on how to create a simple interactive and dynamic Streamlit application. This application generates a beautiful and original map using the prettymaps library. Free article: HERE"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient Code", "Author": "Slow_Scene_7972", "Content": "Optimize Your Python Workflow: Proven Techniques for Crafting Production-Ready Code Link"},
{"Title": "Enhanced EPUB Version of \"An Understated Dominance\" Available for Fans!", "Author": "abdirxhmxn", "Content": "Hey everyone! I recently completed a fun project that I think fans of \"An Understated Dominance\" will appreciate, especially those who have struggled with reading the novel online due to website clutter and distractions. I've created a clean, distraction-free EPUB version of the novel that you can download and read on your preferred device. You can get it here: EPUB Download. Why I did this: The original website hosting the novel has a lot of distractions that can take away from the reading experience. My goal was to provide a seamless reading experience that allows you to fully immerse yourself in the story without unnecessary interruptions."},
{"Title": "Picodi - Simplifying Dependency Injection in Python", "Author": "yakimka", "Content": "What My Project Does\nPicodi is a lightweight and easy-to-use Dependency Injection (DI) library for Python. Picodi supports both synchronous and asynchronous contexts and offers features like resource lifecycle management. Think about Picodi as a decorator that helps you manage your dependencies without the need for a full-blown DI container.\nKey Features"},
{"Title": "Homoiconic Python Code", "Author": "moonbunR", "Content": "Homoiconic, what does it mean? In simple terms, homoiconic code is when code is treated as data and can be manipulated as you would data. This means the code can be changed, new functions and variables added, the code can generate new code or even examine and modify its own structure and behavior all while it is running. That’s why homoiconic languages like Lisp are so powerful. But what if we can make a homoiconic python code, where the code and the data are one and the same and can be modified in the same way? This guide does a good job in trying to explain how you would create a python version of the “Lisp in Lisp” code which would give you access to all those homoiconic features that Lisp brags of like the macro systems, the expressiveness and flexibility, the metaprogramming etc. while still using python. What do you guys think of this?"},
{"Title": "The best Python CLI library, arguably.", "Author": "AND_MY_HAX", "Content": "What My Project Does https://github.com/treykeown/arguably arguably makes it super simple to define complex CLIs. It uses your function signatures and docstrings to set everything up. Here's how it works:\nAdding the @arguably.command decorator to a function makes it appear on the CLI.\nIf multiple functions are decorated, they'll all be set up as subcommands. You can even set up multiple levels of subcommands."},
{"Title": "LinkedIn-Learning-Downloader v1.1", "Author": "YounesWinter", "Content": "With Python i created a tool that enables users to download LinkedIn Learning courses, including the often overlooked but incredibly valuable exercise files. This feature sets our project apart, offering a complete learning experience by providing both the course videos and the materials needed for practical application.\nWhat great about it and beyond other tools in the same genre concerned LinkedIn Learning Downloaders, now you can download the whole courses from a path link. this is was never possible without Python."},
{"Title": "FastAPI Backend Template for SaaS products", "Author": "shekhuu", "Content": "Hello there, I just created a template for creating a backend for your SaaS products. What my project does: It is a FastAPI project/template for creating SaaS backends and admin dashboards. Comparison: \nOut of the box, it supports\nLicence key generation and validation.\nOAuth 2 authentication with scopes."},
{"Title": "this.s and this.d", "Author": "VladTbk", "Content": "Recently, I found out about the this \"Easter egg\" in python3. Adding import this into a py file will print \"The Zen of Python\" by Tim Peters. Also, this has two attributes: this.s and this.d, which I guess form the actual Easter egg. this.s returns an encrypted version of \"The Zen\" and this.d well, see for yourself, maybe you'll solve the puzzle."},
{"Title": "I made a Mandelbrot Zoom using Python", "Author": "AbideByReason", "Content": "I made a YouTube video which previews the zoom and explains the code, which you can find here: https://youtu.be/HtNUFdh2sjg What my project does: it creates a Mandelbrot Zoom. Comparison: it uses Pillow and consists of just 2 main blocks of code: one is the main function that finds which points are in the Mandelbrot Set and the other is the main loop that applies appropriate colors to each image. It gives the option of being black and white OR in color. It works fairly well but can definitely be faster if parallelized. I'd love to hear any suggestions on how it can be improved. Target Audience: fun/toy project"},
{"Title": "Suggestions for python libraries to contribute to", "Author": "JimJimBerry", "Content": "Hey, python folks ! I have been coding in python for around 3 years, 2 years professionally. I have worked with asyncio, typing and other stuff that is needed to build a server. I was looking for a small but impactful enough open source core python library/application to work on. I tried cpython but it seems to be beyond my capability at the moment. As for my interests I was interested in lower level stuff as well as libraries like asyncio and celery. Any suggestions for libraries that could use a bit of help and teach me some stuff as well would be appreciated"},
{"Title": "sjvisualizer: a python package to animate time-series data", "Author": "PieChartPirate", "Content": "What the project does: data animation library for time-series data. Currently it supports the following chart types:\nBar races\nAnimated Pie Charts\nAnimated Line Charts\nAnimated Stacked Area Charts"},
{"Title": "Project: Simple Interactive Python Streamlit Maps With NASA GIS Data", "Author": "jgloewen", "Content": "Python Streamlit is terrific for putting together interactive dashboards. Combined with the geopandas library, streamlit can easily display GIS data points on a map for you. Forest fires in my home province of British Columbia, Canada have been really bad recently. NASA has a terrific dataset that keeps track of forest fires by country. Can I use Streamlit to access this dataset and display a map off all the fires within a certain area (BC) for a particular time frame (2021)? And can I give the user the ability to choose a month? You bet! Let me step you through how! FREE tutorial (with code):"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "SQLPage - a Python library to add string token based pagination easily", "Author": "kernelslayer", "Content": "What My Project Does - This is a Python package to easily add string token based pagination. Currently it supports SQLModel and SQLAlchemy ORMs. Recently I wanted to add pagination in one of my Python projects and in the API response, I had to return a string next page token. Now I could not find a straight-forward way of doing this in Python. All of the tutorials or blog posts I saw, there in the response the server always returned a page_number, page_size, and total_elements and then the onus was on the calling service to adjust this accordingly.  Comparison - The current packages and methods requires some changes in the app layer as well. I tried using a few but those did not satisfy the use case and were also a bit harder to implement. I could not find a easy to use option. The present ones returned integers instead of a string token"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "New book! The Quick Python Book, Fourth Edition by Naomi Ceder", "Author": "ManningBooks", "Content": "Hello everybody, Thank you for having us here, and a huge \"Thank you\" to the moderators for letting us post. We have just released the latest edition of The Quick Python Book by the one-and-only Naomi Ceder, and I wanted to share that news with the community. Many of you are already familiar with Naomi's work and her massive contributions to the world of Python programming language. The Quick Python Book has aided over 100,000 developers in mastering Python. The Fourth Edition of the book has been revised to include the latest features, control structures, and libraries of Python, along with new coverage of working with AI-generated Python code. Naomi, the author, has beautifully balanced the details of the language with the insights and advice required to accomplish any task. Her personal touch has made learning Python an enjoyable experience for countless developers."},
{"Title": "UXsim 1.3.0 released with vehicle tracking and improved vehicle routing", "Author": "Balance-", "Content": "Main Changes\nAdd GUI functions\nVehicle tracking: You can now track a specific vehicle to see their route\nDataframe viewer: Stats can be confirmed\nImprove vehicle routing functions\nAdd example of routing optimization"},
{"Title": "Auto Data Analysis python packages to know", "Author": "mehul_gupta1997", "Content": "Check this video tutorial to explore different AutoEDA python packages like pandas-profiling, sweetviz, dataprep,etc which can enable automatic data analysis within minutes without any effort : https://youtu.be/Z7RgmM4cI2I?si=8GGM50qqlN0lGzry"},
{"Title": "typedattr: Autocompletion and typechecking for CLI script arguments, using standard argparse syntax", "Author": "gings7", "Content": "Excited to share my pypi package typedparser I have been working on for around 1 year now. What My Project Does: It enables writing CLI scripts and create an \"args\" variable with autocompleted members and type checks, but still keeps the simple and universally understood syntax of the stdlib argarse module. Target Audience: For stability, I battletested it in my research projects and added automatic builds as well as 80%+ test coverage. So I believe it is pretty stable. Comparison: For typing functionality it uses the attrs package as backend. It also provides some additional features for object and dictionary manipulation. Of course there are many other CLI argument packages out there, but this one stands out in that it tries to keep the syntax of the argparse standard library as much as possible, making it easy for others to figure out what your script does. Check it out and let me know what you think."},
{"Title": "Folks who know the internals: Where does operator precedence \"happen\"?", "Author": "BeerIsTheMindKiller", "Content": "Hey! Messing around with instaviz, cool library, highly recommend. You can visualize a function's bytecode as well as AST and some other stuff. i entered this: def f():\n  x = 1 + 2 - 10**2\n  return x I was expecting the AST nodes for 1 + 2 - 10**2 to be rearranged somehow, with 10**2 being moved to the left hand of the expression, because exponents get evaluated before addition/subtraction. but no! just looks like this:"},
{"Title": "Dash vs Reflex vs Others", "Author": "Sea_Split_1182", "Content": "Where can I find a decent comparison (pros and cons) of these 5 solutions? They seem to be solving the same problem, which is, afaiu, separating the frontend ‘annoyance’ from Python scripting / math.\n⁠Reflex (used to be called Pynecone) https://reflex.dev\n⁠Streamlit https://streamlit.io\n⁠Gradio https://gradio.app\n⁠Dash https://dash.plotly.com"},
{"Title": "I made a python package that can parse Excel Formula Strings into dictionary structures!", "Author": "MPGaming9000", "Content": "What my project does: It basically takes a formula string like you'd get from Openpyxl like \"=SUM(A1:B2)\" and breaks it all out into a dictionary structure for you to then navigate through, modify, and then reformat that modified structure back into an excel friendly formula string again! Target Audience: (People who modify Excel formula strings in automated spreadsheet modification scripts. Or people who need to analyze formulas in a spreadsheet to do some kind of logic based on that analysis). Disclaimer: For most people some simple regex pattern matching and str replaces would be fine to modify formulas but if you need a more structured approach to working with these strings, this package has you covered!"},
{"Title": "Hatch v1.10.0 - UV support, new test command and built-in script runner", "Author": "Ofekmeister", "Content": "Hello everyone! I'd like to announce version 1.10.0: https://hatch.pypa.io/latest/blog/2024/05/02/hatch-v1100/ Feel free to provide any feedback either here or as a discussion on the repo: https://github.com/pypa/hatch"},
{"Title": "What does your python development setup look like?", "Author": "Working_Noise_6043", "Content": "I'd like to explore other people's setup and perhaps try need things or extra tools. What kind IDE, any extra tools to make it easier for you, etc. Looking forward to everyone's responses!"},
{"Title": "Tutorial on Building a Server-to-Server Zoom App with Python", "Author": "SleekEagle", "Content": "I made a tutorial on how to build a server-to-server Zoom OAuth application using Python. This application can transcribe Zoom meeting recordings, print the transcripts to the terminal, and save the transcripts as text files.\nvideo tutorial\nrepo\nwritten tutorial"},
{"Title": "Multipart File Uploads to S3 with Python", "Author": "tylersavery", "Content": "I created this tutorial after overcoming a difficult challenge myself: uploading 5GB+ files to AWS. This approach allows the browser to securely upload directly to an S3 bucket without the file having to travel through the backend server. The implementation is written in python (backend) and vanilla js (frontend)."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Resume Screening Chatbot using RAG Fusion", "Author": "Babe_My_Name_Is_Hung", "Content": "Hi everyone! I recently finished a small side project for my graduating thesis, which is about experimenting with RAG-based frameworks in improving resume screening. What my project does: The project for the thesis is a GPT-4 Chatbot with RAG Fusion retrieval. Given a job description as input, the system retrieves the most relevant candidate profiles to perform follow-up tasks such as analysis, summarization, and decision-making, which can assist the screening process better. The revolving idea is that the similarity-based retrieval process can effectively narrow the initial large pool of applicants down to the most relevant resumes. However, this simple similarity ranking should not be used to evaluate a candidate's actual ability. Therefore, the top resumes are used to augment the GPT-4 Chatbot so it can be conditioned on these profiles and perform further downstream tasks."},
{"Title": "Suggestions for a self-hosted authentication as a service?", "Author": "FlyingRaijinEX", "Content": "I have a simple backend REST API service that is serving a few ML models. I have made it \"secured\" by implementing an API key in order call those endpoints. I was wondering, how common it is for people to use services that can be self-hosted as their authentication/authorization. If it is common and reliable, what are the best options to go for? I've read that building your own authentication/authorization service with email verification, password reset, and social auth can be a pain. Also, did some googling and found this General - Fief. Has anyone ever tried using this? If so, how was the experience?"},
{"Title": "Giving New Life to JModelica: Bringing Powerful Modelica Simulations to Python", "Author": "foadsf", "Content": "Five years ago, I posted about JModelica, a fantastic open-source tool for simulating complex systems that combined the ease of Python with the strength of Modelica. Sadly, the project went quiet, but I'm thrilled to share that, thanks to the dedication of a few folks (myself included!), JModelica is back! You can find the revived project on GitHub: https://github.com/JModelica/JModelica. What JModelica Does: JModelica provides a way to write complex simulations using the Modelica language, which is known for its ability to handle differential equations and model physical systems beautifully. The magic of JModelica lies in its Python integration—you can solve your Modelica models and access the results directly in Python for in-depth analysis, visualization, and even optimization using libraries you already love!"},
{"Title": "One pytest marker to track the performance of your tests", "Author": "toodarktoshine", "Content": "Hello Pythonistas!\nI just wrote a blog post about measuring performance inside pytest test cases. We dive into why it’s important to test for performance and how to integrate the measurements in the CI.\nHere is the link to the blog: https://codspeed.io/blog/one-pytest-marker-to-track-the-performance-of-your-tests"},
{"Title": "How to create architecture diagrams from code in Jupyter Notebook", "Author": "writer_on_rails", "Content": "Hello world,I wrote an article about creating diagrams from code on Jupyter Notebook inside VS Code. It will give you a brief on the setup and also an overview of concepts. Within 5 minutes, you should be able to start making cool architecture diagrams. [TO MODERATOR: This link does not contain any paywalled or paid content. All the contents are available for free] Article link: https://ashgaikwad.substack.com/p/how-to-create-architecture-diagrams"},
{"Title": "CLI to embed code snippets in your README, from actual (testable) code", "Author": "realazthat", "Content": "What My Project Does What My Project Does: snipinator is a CLI to embed (testable) snippets from your codebase into your README, using Jinja2 and functions provided by snipinator to assist with embedding code, shell output, etc. Please provide any feedback in the comments or GH issues. Target Audience Target Audience: Developers of {GitHub,other} projects that have a README. It works for me, it might work for you. Comparison Features:\nSupports anything Jinja2 supports."},
{"Title": "Starter Code for a LLM-based AI Assistant", "Author": "2bytesgoat", "Content": "Hey everyone 👋 TL;DR\nSince everyone is talking about the Humane AI Pin and the Rabbit R1, I decided to make a short 5 minute tutorial on how people can setup and customize their own little AI assistant on their machine. I've uploaded a video tutorial here: https://www.youtube.com/watch?v=2fD_SAouoOs&ab_channel=2BytesGoat And the Github code is here: https://github.com/2BYTESGOAT/AI-ASSISTANT Longer version"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "map_plotter - abstracts complexity of creating intensity plots overlaid onto global map", "Author": "teamamentum", "Content": "What My Project Does\nOverlaying intensity plots onto a geographical map using cartopy/matplotlib can be complex. So we created this map_plotter package to abstract away that complexity for a common use case. Installation (opinionated use of conda to avoid cartopy dependency hell and install precompiled binaries) conda install cartopy\ngit clone git@github.com:amentumspace/map_plotter.git\ncd map_plotter\npip install ."},
{"Title": "How to auto-instrument Python servers w/ OpenTelemetry for performance & error monitoring", "Author": "__boba__", "Content": "Hi everyone! We've recently written up a guide for anyone running a Python server (ex. Flask, Django, FastAPI) to instrument their app to debug slow downs and errors using the CNCF OpenTelemetry project and their Python instrumentation package. It's really straightforward to get started with just a few lines of added code and commands to any Python project, so hopefully helps some people out as they're looking to add better instrumentation to their servers. Here's the tutorial: https://www.hyperdx.io/blog/opentelemetry-python-server-auto-instrumentation"},
{"Title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"", "Author": "AlSweigart", "Content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs I'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10) Once printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become."},
{"Title": "k8sAI - my open-source GPT CLI tool for Kubernetes!", "Author": "Wild_Plantain528", "Content": "What my project does: I wanted to share an open-source project I’ve been working on called k8sAI. It’s a personal AI Kubernetes expert that can answer questions about your cluster, suggests commands, and even executes relevant kubectl commands to help diagnose and suggest fixes to your cluster, all in the CLI! Target Audience: As a relative newcomer to k8s, this tool has really streamlined my workflow. I can ask questions about my cluster, k8sAI will run kubectl commands to gather info, and then answer those question. It’s also found several issues in my cluster for me - all I’ve had to do is point it in the right direction. I’ve really enjoyed making and using this so I thought it could be useful for others. Added bonus is that you don’t need to copy and paste into ChatGPT anymore!"},
{"Title": "Reviewing Dataframe Changes? Looking for Your Preferred Methods!", "Author": "rageagainistjg", "Content": "After playing around with a dataframe—applying filters or other transformations—I'm curious about your methods for reviewing the changes. In VS Code, the variable explorer is quite handy for a quick look at the modified dataframe. Alternatively, when working in a Jupyter notebook within VS Code, exporting the data to an Excel file provides a detailed view and allows for an easy deep dive into the results. What are your preferred practices for ensuring your data adjustments are precisely what you intended?"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PkgInspect - Inspect Local/External Python Packages", "Author": "yousefabuz", "Content": "GitHub\nWhat My Project Does\nPkgInspect is a comprehensive tool designed to inspect and compare Python packages and Python versions effortlessly. It equips users with a comprehensive set of tools and utility classes to retrieve essential information from installed Python packages, compare versions seamlessly, and extract various details about Python installations with ease."},
{"Title": "Library for automatic Cython 3.0 code annotations generation.", "Author": "Cool-Nefariousness76", "Content": "Hi everybody, over the last year I've been developing a library that adds some Cython 3.0 annotations to existing python code. What My Project Does: For example if it sees a for i in range(): in a function it recognizes i as an integer and adds a i = cython.declare(cython.int)line at the beginning of the function. It actually uses the built-in ast module under the hood for parsing, I found it a super useful library! Target Audience: It is a side project I made mainly for fun. I don't know if it can be of interest to anybody, or if it could have some potential utility."},
{"Title": "2,000 free sign ups available for the \"Automate the Boring Stuff with Python\" online course. (May 20", "Author": "AlSweigart", "Content": "If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): *The sign ups are all used up, but you can still watch all the videos for free. Read below! https://udemy.com/course/automate/?couponCode=MAY2024FREE https://udemy.com/course/automate/?couponCode=MAY2024FREE2 If you are reading this after the sign ups are used up, you can always find the first 15 of the course's 50 videos are free on YouTube if you want to preview them. YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have \"preview\" turned on. Scroll down to find and click \"Expand All Sections\" and then click the preview link. You won't have access to the forums and other materials, but you can watch the videos."},
{"Title": "APScheduler vs Schedule package", "Author": "kostakos14", "Content": "Hey folks, looking to use one library to implement some background scheduling logic on my application. I find in Google search APScheduler to be frequently mentioned, but I can see the Schedule package has more GH stars. Was curious if anybody has used one of them, and which one would you recommend based on your own experience."},
{"Title": "Best book for GUI development in Python", "Author": "Bekhyam", "Content": "Can you guys suggest some very good book for GUI development in Python? I'm currently working on a visualizer that needs many features to plot data on a 3D and 2D space. Using PyQt for this as it has threading support."},
{"Title": "Introducing Notolog: Python Markdown Editor built with PySide6", "Author": "devotaku", "Content": "Excited to share my personal open-source project: Notolog - Python Markdown Editor (MIT License). The main motivation for developing another markdown editor was my passion for learning new things and enhancing my development skills in Python. I developed it in my spare time over a few months, despite having no prior experience in creating full-scale Python applications. What My Project Does ∗ Multiplatform ∗ Markdown async syntax highlighting created by me ∗ Several pre-installed color themes ∗ Supports English and 17 other languages right out of the box ∗ Integration with OpenAI API for AI-assisted features"},
{"Title": "I've developed a library for send metrics to zabbix asynchronously", "Author": "Royal_Section4889", "Content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this. Tests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async What My Project Does Send zabbix sender messages using asyncio tasks. Target Audience SysAdmins who use Zabbix to monitor a large number of metrics. Comparison Instead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Python text to speech library - Pyt2s", "Author": "asksumanth", "Content": "What my project does: It supports services like IBM Watson, Acapela and Stream labs' demo websites to convert your text to speech. Target audience: It's a toy project and would not recommend you to use in Production. Comparison: It's wayyyyy easy to use. Just pip install and use in your project. No extra setup required like other libraries. Also supports various languages and voices and accents. Check docs for more. Here is the link to repository. Please go do check it out and star it if it's helpful to you guys. Thank you. I made this library taking inspiration from this php tts library by chrisjp."},
{"Title": "pip time machine", "Author": "rejectedlesbian", "Content": "https://github.com/nevakrien/time_machine_pip this is a fairly simple project barely anything to it but I think its promising\nthe idea is to put pip in a time machine so it can not use package versions that were made after the project is made. I am doing this by proxiying pypi and cutting out the newer versions. initial tests show that pip respects the proxy and works like you would expect"},
{"Title": "Interactive plots in the terminal", "Author": "Spiffidimus", "Content": "I made a library to create interactive plots in the terminal (pip install itrm). It uses braille characters (by default) to display the data with sub-character resolution. There are several keybindings for moving a vertical cursor left and right, for zooming in or out on data, and for changing which curve to focus on. There are occasions (such as when working with a server) where MatPlotLib is not an option and the terminal is the only available tool. But, in my opinion, it is actually faster to use this tool (itrm) to zoom in on interesting parts of data and analyze patterns than using other tools like MatPlotLib. In fact, with large data sets (~1 million points), this tool actually renders faster than MatPlotLib. Please check it out and let know what you think."},
{"Title": "Building an LLM chat application using RAG Agent", "Author": "iryna_kondr", "Content": "Motivation\nChatbots are among the most popular applications of large language models (LLMs). Often, an LLM's internal knowledge base is adequate for answering users questions. However, in those cases, the model may generate outdated, incorrect, or too generic responses when specificity is expected. These challenges can be partially addressed by supplementing the LLM with an external knowledge base and employing the retrieval-augmented generation (RAG) technique. However, if user queries are complex, it may be necessary to break the task into several sub-parts. In such cases, relying solely on the RAG technique may not be sufficient, and the use of agents may be required."},
{"Title": "Hi! I've published a Python client for IBKR REST and WebSocket APIs - IBind. Hope you like it 👋", "Author": "VoyZan", "Content": "Hi! I want to share a library I've built recently. IBind is a REST and WebSocket Python client for Interactive Brokers Client Portal Web API. It is directed at IBKR users. You can find IBind on GitHub: https://github.com/Voyz/ibind What My Project Does: It is a REST and WebSocket API for the Interactive Brokers' Web API. I'm particularly proud of a few things in this release:\nThe REST and WebSocket API clients are based on an abstract base class RestClient and WsClient accordingly. These could be implemented to use some other Web APIs in a relatively straightforward way. I have in fact used a version of that for a cryptocurrency WebSocket API, and it is nice to see it adapt to a different environment."},
{"Title": "What changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ?", "Author": "These_Shoe3594", "Content": "What are all the changes needs to be done when I change the version of Wergzeug from 2.3.8 to 3.0.0 ? There are some CVE fixes available in the latest 3.x version of werkzueg. To take the fixes as part of my code, we want to upgrade the version. When I do so, I’ve faced lot of breakages. I found some on documents and release notes. But it would be easier if someone already did some changes regarding this."},
{"Title": "Python Streamlit Spotlight Tutorial: an Interactive Dashboard using UNHCR Refugee Data", "Author": "jgloewen", "Content": "Python Streamlit is a terrific tool for creating interactive data visualizations. It packages all your visualizations up into a neat little application - including charts and maps - and displays them in your default browser. No muss, no fuss. Recently, I found a new dataset (to me) on the UN High Commission for Refugees (UNHCR) website. It contains country-to-country movements for refugees both from origin country and country of asylum Using this dataset, here's a step-by-step on how to code a Python Streamlit application that has:"},
{"Title": "Langchain using llama3 to build recommendation system", "Author": "yngwieHero", "Content": "Hi, Recently I played a bit with LLMs, specifcally exploring ways of running the models locally and building prompts using LangChain. As a result ended up coding a small recommendation system, powered with Llama3-7b model, which suggests topics to read on HackerNews. Wanted to share my experiences, so I wrote a small article where I described all my findings.\nHope you'll like it: https://lukaszksiezak.github.io/ScrapyToLLM/ Github repo: https://github.com/lukaszksiezak/ScrapyToLLM What the project does: It's a Python application which uses scrapy to scrape HackerNews page. Scraped articles are pipelined to redis, which is then feeding Llama3 using langchain. Prompter is configured to serve a user articles which are matching his request."},
{"Title": "IP subnet or IP calculator tool need feedback", "Author": "nicanorflavier", "Content": "Hey folks, I've been dabbling with a Python project recently that's all about making life easier for us I.T. people. It's a nifty little tool that calculates IP subnets and does IP calculations from the command or CLI. Here's the GitHub link and the code: https://github.com/nicanorflavier/ipnet I’m pretty stoked about it, but I know there’s always room for improvement. So, I thought, better to turn to than the wise minds of this python community? I’m all ears for any feedback, tips, tricks, or advice you guys might have. Thanks a ton in advance!"},
{"Title": "PyCon US 2024 is here!", "Author": "monorepo", "Content": "Official Event"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Blat AI generates Python code to do web-scraping (code based on Scrapy framework)", "Author": "arnaupv", "Content": "Miguel Algorri and Arnau Pont Vílchez here, blat co-founders! Target Audience\nPeople who need to collect public data from the web (pricing, articles, reviews, leads etc). What does our Project Do?\nAt blat we aim to deliver production-ready web scraping code in minutes (written in Python, Scrapy framework).\nThis is feasible thanks to our Web Scraping AI Agent 🧠. Here our CLI to interact with the Web Scraping AI Agent (github). Too good to be true?"},
{"Title": "Pre-commit hook to keep coverage badge in README up to date", "Author": "60percentcocoa", "Content": "Wrote this as a tool to keep README coverage badges up to date without relying on 3rd party services or having to do anything extra, thought others might get some utility out of it: coverage-pre-commit. A .coverage file is expected at the root of the project, generated by running coverage run directly or using a plugin such as pytest-cov when running tests. Most convenient when used as a pre-push hook imo. Feel free to opine, be it positive or negative!"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyWolt: Wolt food delivery service API wrapper", "Author": "daivushe1", "Content": "I'm thrilled to share my first open-source project with you all: PyWolt! 🎉 PyWolt is a Python library that makes it super easy to interact with the Wolt API.\nWhat My Project Does:\nDiscover Venues: Find nearby spots to grab a bite.\nExplore Menus: Dive into a venue's menu and pick your favorites.\nTarget Audience:"},
{"Title": "Apple Health data exploration with Atlas, Clickhouse, Vega-Altair, Quarto", "Author": "__tosh", "Content": "What My Project Does A few days ago I wrote a simple python script (\"Atlas\") that turns the Apple Health export.xml file (which is about 1 GB in my case, with about 10 years of data) into a very simple parquet file (a bit like a compressed CSV) that is also way smaller (40 MB). The parquet file has 5 columns:\ntype (e.g. \"CyclingDistance\")\nvalue (e.g. \"12.100\")"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a python bot that plays minesweeper", "Author": "_dwightshrute", "Content": "Hello, I made this Minesweeper bot that I wanted to share with you all. What My Project Does - The bot takes a screenshot of the board and runs a classification algorithm to extract the contents of the board. It then analyzes the board, finds as many mines as it can, and sends clicks. If it cannot find any mines then it guesses the most probable position of a mine. Target Audience - It's a toy project for anyone interested in algorithms or problem-solving. Comparison - This is just my attempt at making a minesweeper bot. I'm sure there are many bots out there that are much more efficient than this."},
{"Title": "I made a React-like web framework for Python 👋", "Author": "Rawing7", "Content": "I'm Paul, one of the creators of Rio. Over the years I've tried many different established python GUI frameworks, but none of them really satisfied me. So I teamed up with a few like minded developers and spent the last few months to create our own framework. Rio is the result of this effort. What My Project Does Rio is a brand new GUI framework that lets you create modern web apps in just a few lines of Python. Our goal is to simplify web and app development, so you can focus on the things you care about, instead of wasting countless hours on frustrating user interface details. We do this by following the core principles of Python that we all know and love. Python is supposed to be simple and compact - and so is Rio. There is no need to learn any additional languages such as HTML, CSS or JavaScript, because all of the UI, Logic, Components and even layouting is done entirely in Python. There’s not even a distinction between front-end and back-end. Rio handles all of the communication transparently for you."},
{"Title": "Production grade AI Web apps, just using python ?", "Author": "prime_danger", "Content": "Hey guys, I have worked on building multiple ai/ml usecases and their specific backends. But now I want build interfaces for easy and quick integration. I saw a blog which used FastUI which looks quick decent but when I tried it just showed me a Json of elements on the page. Are there any other libraries I should use? 🤔"},
{"Title": "The new REPL in Python 3.13.0 beta 1", "Author": "treyhunner", "Content": "Python 3.13.0 beta 1 was released today. The feature I'm most excited about is the new Python REPL. Here's a summary of my favorite features in the new REPL along with animated gifs. The TLDR:\nSupport for block-leveling history and block-level editing\nPasting code (even with blank lines within it) works as expected now\nTyping exit will exit (no more Use exit() or Ctrl-D (i.e. EOF) to exit message)"},
{"Title": "Is PyGame still alive?", "Author": "pyeri", "Content": "So it was a long time ago in the good old Python 2.x days (circa 2010 probably) that I had learned PyGame with some tutorials at my former work place. But nowadays since I mostly freelance with business apps, I never felt the need for it. But since such a game development project is on the horizon after all these years, I was wondering if PyGame can still be up for the task with Python 3.x? Or is there a better Python library available these days? I don't need any advanced gaming features of modern day VFX or anything, all I need is some basic Mario/Luigi style graphics, that's all!"},
{"Title": "Track the size of your PyInstaller packages in CI", "Author": "bencherdev", "Content": "If you have ever wanted to track the size of your PyInstaller packages in CI, Bencher now supports tracking your package size: https://bencher.dev/docs/how-to/track-file-size/"},
{"Title": "I created a Python script that makes it easier to track how your baby's sleep is improving", "Author": "BX1959", "Content": "My wife and I use the Huckleberry app to track our baby's sleep periods. Although the free version of the app allows you to view a number of sleep-related metrics, I also wanted to see whether his longest nightly sleep stretches were getting longer over time. Therefore, I created a Python project to help me answer this and other questions I had about my baby's sleep.\nWhat My Project Does\nThis project reads in data from a Huckleberry .csv export (or a separate custom .csv file); analyzes its sleep information; and then produces ."},
{"Title": "ChatGPT can talk with all my Python notebooks", "Author": "pp314159", "Content": "I'm working on an open-source framework for converting Python notebooks into web applications, it is called Mercury. Recently, I have added an option to execute notebooks with REST API. You can pass paramters in POST request body to the notebook, execute all cells and return JSON as response. I'm also running a SaaS service, Mercury Cloud where you can deploy notebooks with one-click with unique website domain. What My Project Does It makes Python notebooks extermely easy to integrate with custom ChatGPT, so GPT can execute Python notebooks and get response. It is 3-steps process:"},
{"Title": "Framework to use for backend", "Author": "Clickyz", "Content": "Hello guys I recently decided to move from nodejs(expressjs) to python for general purposes but mostly for backend. I have couple of questions.\nWill i regret my migration to python? :)\nWhich framework you suggest for backend solo dev?\nAnd what tips are you suggesting me in general to get used to python."},
{"Title": "New Python-only abstractions for extracting data from apis", "Author": "Thinker_Assignment", "Content": "Hey there, you are probably familiar with REST APIs.\nWe at dlt library added a new way to get data from apis (and dlt can already load it with best practice to db or parquet). We already did some internal hackathons but we would appreciate your feedback so we can improve it further\n- Our new REST API Source is a short, declarative configuration driven way of creating sources.\n- Our new REST API Client is a collection of Python helpers used by the above source, which you can also use as a standalone, config-free, imperative high-level abstraction for building pipelines.\nYou can read more about the source here or go to our docs for the REST APIClient info\n\nPS: see you at Pycon Pittsburgh!"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Interactive Data Visualization with Python: A Showcase of Plotly Dash", "Author": "AbhishekSuryavanshee", "Content": "What My Project Does:\nI'm excited to introduce my latest project built with Python – an interactive data visualization application using Plotly Dash. This project aims to empower users to explore and analyze datasets dynamically through interactive visualizations. By leveraging Plotly Dash's capabilities, users can interact with data in real-time, customize visualizations on the fly, and gain deeper insights with just a few clicks. Target Audience:\nThis project caters to a wide range of users, from data enthusiasts and analysts to professionals seeking to communicate insights effectively. Whether you're a data scientist exploring patterns in large datasets or a business analyst presenting findings to stakeholders, this tool is designed to streamline your workflow and enhance your data storytelling capabilities. It's suitable for both production-grade applications and educational purposes, offering a versatile platform for data visualization tasks of varying complexity."},
{"Title": "ConfigClass - simple dataclass inspired configuration", "Author": "TheTerrasque", "Content": "What My Project Does I'm making a simple configclass for handling configuration in smaller projects and scripts. Goal is to be as simple to start with as creating a dataclass. The module itself works off dataclass and when you use it you just define a dataclass as normal, but decorate it with @configclass() instead. Example: from configclass import configclass\n\n@configclass()\nclass Settings:\n    foo: bool = False\n    url: str = \"\"\n    footoo: bool = True\n    my_model: str = \"model.pt\"\n\nsetting = Settings.load()\n\nprint(setting.foo, setting.footoo, setting.my_model)"},
{"Title": "Declarative GUI Slint v1.6 released with Design Mode (WYSIWYG) Improvements", "Author": "madnirua", "Content": "https://slint.dev/blog/slint-1.6-released Slint is a declarative GUI toolkit to build native user interfaces for desktop and embedded applications. Find more information at https://slint.dev/ or check out the source code at https://github.com/slint-ui/slint. EDIT: The Python APIs are currently in alpha. More info -- https://github.com/slint-ui/slint/tree/master/api/python"},
{"Title": "tach - a Python tool to enforce modular design", "Author": "the1024", "Content": "https://github.com/Never-Over/tach What My Project Does tach is a lightweight Python tool that enforces boundaries and dependencies in your Python project. Inspired by nx, tach helps you maintain a decoupled and modular Python codebase. An earlier version of this tool was called modguard, which we shared here. By default, Python allows you to import and use anything, anywhere. Over time, this results in modules that were intended to be separate getting tightly coupled together, and domain boundaries breaking down. We experienced this first-hand at a unicorn startup, where the eng team paused development for over a year in an attempt to split up packages into independent services. This attempt ultimately failed."},
{"Title": "Implementing your own pypi clone", "Author": "chione99", "Content": "Hi, Just want to know how difficult is it to manage your own pypi clone and how do you recommend to create a seperation between dev and prod systems."},
{"Title": "Just an Appreciation Post for the Python Standard Library", "Author": "SpeakerOk1974", "Content": "Approaching a year into my journey of learning Python (I come from a C background) I finally understand the beauty and ubiquity of the langauge. Initially, I was hesitant to learn a dynamically typed and interpreted language when job requirements required me to learn it (I help support a team of Power Systems Engineers, and our professional software uses python for scripting). My first attempts were extremely unpythonic and it felt like I was fighting the language (index based looping, declaring variables before use, C style procedural code on top of Pandas antipatterns) and the lack of brackets I found appalling. Then I had my first code review with a helpful Senior engineer. We refactored my code together and something beautiful came together. He then told me to read the Zen of Python. It was love at first \"import this\". I was hooked. Every waking moment for weeks I was learning all I could muster about python."},
{"Title": "Manage Your Squid Proxy Server Efficiently with This Python Script", "Author": "SAV_NC", "Content": "🦑 Squid Proxy Manager Script Hello fellow Python enthusiasts! I've created a Python script that makes managing your Squid Proxy Server a breeze. If you're looking for an efficient and straightforward way to interact with your Squid server remotely, this script is for you. 🎉 What My Project Does The Squid Proxy Manager script allows you to manage your Squid Proxy Server remotely using a simple command-line interface. Here are some of the key features:\nCheck Squid Service Status: Quickly check if your Squid service is running or not."},
{"Title": "ext-message: Send files over Discord direct messages", "Author": "FeLoNy111", "Content": "Hey all! I recently made a library for sending text files over Discord DMs https://pypi.org/project/ext-message/ https://github.com/jwjeffr/ext-message/ What my project does This code is a command-line interface for sending text files to Discord DMs from a bot. Target audience My personal use-case is for my research, where I run long simulations (~72 hours) on a computing cluster. These simulations generate log files, so I can send myself the log file after the simulation, letting me: - Know that the simulation is done - Check that the simulation ran as intended without having to SSH into the cluster. As of now, those running similarly heavy code looking to be notified when it finishes is my target audience, but I would love to hear other creative use cases to expand that audience!"},
{"Title": "modern_colorthief - Modified Median Cut Quantization algorithm in rust + python", "Author": "BasePlate_Admin", "Content": "github\ndocumentation\nWhat my project does : It gets the dominant color/color palette from given image. Target Audience: Anyone Usage modern_colorthief exposes two functions get_color and get_palette Here is how to use get_color: from modern_colorthief import get_color\n\n# Path to any image\npath = ...\n\nprint(get_color(path)) # returns tuple[int,int,int]"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "pytest-ndb - debugging pytest tests in a notebook", "Author": "rhshadrach", "Content": "What My Project Does: Allows users to run a pytest test from a notebook or other REPL and capture local variables for inspection / debugging. While I think users should very often prefer debugging tests with a debugger, in certain situations where one deals with a nontrivial amount of data or many complex objects, being able to inspect and manipulate objects in a notebook can be helpful. Target Audience: Primarily data scientists, but more generally anyone who tests with large/complex objects that can be difficult to understand in a debugger. Comparison: I'm not aware of any alternatives, other than copy-and-pasting your pytest tests in a notebook."},
{"Title": "Frame - a new language for programming state machines in Python", "Author": "framelanger", "Content": "Hey, I am (re)releasing a project called Frame that I've been working on to create a language and transpiler to easily create state machines/automata in Python. It also is able to generate UML documentation as well. This project is for people who are interested in programming state machines for a wide range of purposes such as game programming, workflows, MBSE modeling as well as school projects for comp sci theory. It is also useful simply for generating flow documentation. The Framepiler (Frame transpiler) is in beta at this time. It would be great to get feedback from the Python community on any gaps in key functionality or bugs."},
{"Title": "Google laysoff Python maintainer team", "Author": "jmreagle", "Content": "https://www.hindustantimes.com/business/google-layoffs-sundar-pichai-led-company-fires-entire-python-team-for-cheaper-labour-101714379453603.html Are there any ramifications for the Python community outside of Google?"},
{"Title": "SQLPage - a Python library to add string token based pagination easily", "Author": "kernelslayer", "Content": "What My Project Does - This is a Python package to easily add string token based pagination. Currently it supports SQLModel and SQLAlchemy ORMs. Recently I wanted to add pagination in one of my Python projects and in the API response, I had to return a string next page token. Now I could not find a straight-forward way of doing this in Python. All of the tutorials or blog posts I saw, there in the response the server always returned a page_number, page_size, and total_elements and then the onus was on the calling service to adjust this accordingly.  Comparison - The current packages and methods requires some changes in the app layer as well. I tried using a few but those did not satisfy the use case and were also a bit harder to implement. I could not find a easy to use option. The present ones returned integers instead of a string token"},
{"Title": "pyrseus - concurrent.futures extensions for easier troubleshooting", "Author": "Mental-Elephant-6215", "Content": "https://github.com/dalleyg/pyrseus What My Project Does Pyrseus extends Python’s concurrent.futures asynchronous and concurrent programming package with:\na collection of non-concurrent executors for light workloads and troubleshooting,\nExecutorCtx, a factory for easily switching between different executors, and\na collection of ready-built ExecutorCtx plugins, supporting executors from concurrent.futures, ipyparallel, loky, mpi4py, and itself. Where relevant, optional cloudpickle-enhanced plugins are also provided."},
{"Title": "UXsim 1.3.0 released with vehicle tracking and improved vehicle routing", "Author": "Balance-", "Content": "Main Changes\nAdd GUI functions\nVehicle tracking: You can now track a specific vehicle to see their route\nDataframe viewer: Stats can be confirmed\nImprove vehicle routing functions\nAdd example of routing optimization"},
{"Title": "python irl in london england", "Author": "ProsodySpeaks", "Content": "are there any groups, meets, events etc i can get involved with locally in london uk? i've got moderate python chops as well as a wide range of other skills and tools, notably construction and event organisation/production/management, but also 3d design and print, some electronics and others. i work flexible hours and honestly am looking to develop a network and experiences to land my first job that at least involves some coding - i'm happy to commit significant time and resource to interesting projects to get eventually my foot or at least my nose in a door somewhere. (i dont mean i would stop contributing to the project once i land a job!)"},
{"Title": "Resume Screening Chatbot using RAG Fusion", "Author": "Babe_My_Name_Is_Hung", "Content": "Hi everyone! I recently finished a small side project for my graduating thesis, which is about experimenting with RAG-based frameworks in improving resume screening. What my project does: The project for the thesis is a GPT-4 Chatbot with RAG Fusion retrieval. Given a job description as input, the system retrieves the most relevant candidate profiles to perform follow-up tasks such as analysis, summarization, and decision-making, which can assist the screening process better. The revolving idea is that the similarity-based retrieval process can effectively narrow the initial large pool of applicants down to the most relevant resumes. However, this simple similarity ranking should not be used to evaluate a candidate's actual ability. Therefore, the top resumes are used to augment the GPT-4 Chatbot so it can be conditioned on these profiles and perform further downstream tasks."},
{"Title": "Giving New Life to JModelica: Bringing Powerful Modelica Simulations to Python", "Author": "foadsf", "Content": "Five years ago, I posted about JModelica, a fantastic open-source tool for simulating complex systems that combined the ease of Python with the strength of Modelica. Sadly, the project went quiet, but I'm thrilled to share that, thanks to the dedication of a few folks (myself included!), JModelica is back! You can find the revived project on GitHub: https://github.com/JModelica/JModelica. What JModelica Does: JModelica provides a way to write complex simulations using the Modelica language, which is known for its ability to handle differential equations and model physical systems beautifully. The magic of JModelica lies in its Python integration—you can solve your Modelica models and access the results directly in Python for in-depth analysis, visualization, and even optimization using libraries you already love!"},
{"Title": "Analyzing Python Compression Libraries: zlib, LZ4, Brotli, and Zstandard", "Author": "dhilip-siva", "Content": "Source Code: https://github.com/dhilipsiva/py-compress-compare\nAnalyzing Python Compression Libraries: zlib, LZ4, Brotli, and Zstandard\nWhen dealing with large volumes of data, compression can be a critical factor in enhancing performance, reducing storage costs, and speeding up network transfers. In this blog post, we will dive into a comparison of four popular Python compression libraries—zlib, LZ4, Brotli, and Zstandard—using a real-world dataset to evaluate their performance in terms of compression ratio and time efficiency."},
{"Title": "I wrote a book on Python Regular Expressions - and made it free!", "Author": "code_x_7777", "Content": "Hi! I've just sorted through some of my books on Leanpub and decided to make the book on Python Regular Expressions free to download for a couple of days. Why? Just for fun and learning and to get some valuable feedback.\nFree ebook link: https://leanpub.com/regexpython/\nRegex Video Tutorials: https://blog.finxter.com/python-regex/\nThis book helps you learn regular expressions chapter by chapter. Each chapter first teaches the concepts and then asks you to solve Python puzzles (\"Guess the code!\") to master the concepts. The main idea is to keep it lightweight and fun."},
{"Title": "How Malicious Python Code Gains Execution", "Author": "louis11", "Content": "The primary vector for malicious code running in software developer environments (e.g., local system, CI/CD runners, production servers, etc.) is software dependencies. This is third-party code which often means open-source software, also known as running code from strangers on the internet. The prized goal for attackers is arbitrary code execution. It’s the stuff high CVE scores are made of and often the topic of how vulnerabilities can turn into exploits. It’s the foothold needed to run cryptominers, steal secrets, or encrypt data for ransom. It’s no wonder why threat actors want it, but how do they get it? Sutton’s Law makes it obvious why they go after open-source software: because executing arbitrary code is easy there."},
{"Title": "CLI to embed code snippets in your README, from actual (testable) code", "Author": "realazthat", "Content": "What My Project Does What My Project Does: snipinator is a CLI to embed (testable) snippets from your codebase into your README, using Jinja2 and functions provided by snipinator to assist with embedding code, shell output, etc. Please provide any feedback in the comments or GH issues. Target Audience Target Audience: Developers of {GitHub,other} projects that have a README. It works for me, it might work for you. Comparison Features:\nSupports anything Jinja2 supports."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Medical imaging Python jobs", "Author": "Durysik", "Content": "Hi folks! I am currently looking for a US (west coast best) based job where I could grow as a python programmer, specifically analysing medical images. Looking online I found some labs where they work with images, but I thought I'd ask (not sure if it's the right sub tho) cause I'm sure this way I'll hear about many places that deal with Medical Imaging. Thanks :)"},
{"Title": "map_plotter - abstracts complexity of creating intensity plots overlaid onto global map", "Author": "teamamentum", "Content": "What My Project Does\nOverlaying intensity plots onto a geographical map using cartopy/matplotlib can be complex. So we created this map_plotter package to abstract away that complexity for a common use case. Installation (opinionated use of conda to avoid cartopy dependency hell and install precompiled binaries) conda install cartopy\ngit clone git@github.com:amentumspace/map_plotter.git\ncd map_plotter\npip install ."},
{"Title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"", "Author": "AlSweigart", "Content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs I'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10) Once printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become."},
{"Title": "tab-pal: a TUI for adding and editing custom colour palettes in Tableau", "Author": "Ok-Frosting7364", "Content": "Source code: https://github.com/ben-n93/tab-pal\nWhat my Project Does\nMakes it quicker, easier and prettier to create custom colour palettes in Tableau. Rather than having to find your Preferences.tps file every time and edit the XML you can just launch tab-pal from the command-line and make any changes you want (adding/deleting new palettes, adding/removing colours. You also get a preview of the colours you've added. Target Audience\nData/business analysts and data scientists and who work with Tableau.\n\nThere are some websites that let you dynamically create the Preferences.tps XML file however this still requires you to locate the file and copy and paste over it with any changes you make"},
{"Title": "Reviewing Dataframe Changes? Looking for Your Preferred Methods!", "Author": "rageagainistjg", "Content": "After playing around with a dataframe—applying filters or other transformations—I'm curious about your methods for reviewing the changes. In VS Code, the variable explorer is quite handy for a quick look at the modified dataframe. Alternatively, when working in a Jupyter notebook within VS Code, exporting the data to an Excel file provides a detailed view and allows for an easy deep dive into the results. What are your preferred practices for ensuring your data adjustments are precisely what you intended?"},
{"Title": "A Free GPT-Powered Financial Analysis Tool", "Author": "Starks-Technology", "Content": "Link to GitHub Page\nWhat My Project Does\nI created a simple financial analysis tool using the SimFin API and the GPT API. This tool summarizes financial information and makes it digestable for people who don't know a lot about finance.\nTarget Audience\nThis is more of a toy project for those interested in AI and Finance. It's meant for people without a ton of GPT experience to see a tangible use-case of generative AI within the field."},
{"Title": "Calculating Virtual Cycling Power With Python", "Author": "TokenChingy", "Content": "I was doing some light reading and stumbled across Steve Gribbles Power vs Speed Calculator and thought I'd give it a go at rebuilding it based on his Physics model using Python. Then I wrote an article about. Thought I'd share it with you all: Calculating Virtual Cycling Power (jasonlei.com)"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Tkinter \"DevTools\" to inspect and modify widgets in your running app in real-time", "Author": "254hypebeast", "Content": "source: https://github.com/ObaraEmmanuel/Formation pypi: https://pypi.org/project/formation-studio/ What My Project Does Allows you to inspect widgets in your running Tk app in real-time. You can view the widget hierarchy, modify widget attributes, adjust widget layout and run arbitrary code to interact with your widgets through the embedded Python REPL console. It works just like DevTools in a browser. This debugger is part of the Formation studio project which is a drag-n-drop graphical UI builder for Tkinter. Target Audience Any Tk developer seeking to have an easier time debugging their UI or seeking to experiment with the Tk framework with minimal effort."},
{"Title": "Library for automatic Cython 3.0 code annotations generation.", "Author": "Cool-Nefariousness76", "Content": "Hi everybody, over the last year I've been developing a library that adds some Cython 3.0 annotations to existing python code. What My Project Does: For example if it sees a for i in range(): in a function it recognizes i as an integer and adds a i = cython.declare(cython.int)line at the beginning of the function. It actually uses the built-in ast module under the hood for parsing, I found it a super useful library! Target Audience: It is a side project I made mainly for fun. I don't know if it can be of interest to anybody, or if it could have some potential utility."},
{"Title": "I made a Python CLI Tools for Competitive Programming", "Author": "Old-Manufacturer6209", "Content": "Source Code: https://github.com/JeanExtreme002/FastSnake PyPI: https://pypi.org/project/FastSnake/ What My Project Does FastSnake is a command-line tool that allows you to easily create, expand, run, and test Python solutions for competitive programming problems. 🐍🏁 This project provides useful CLI tools for competitive programming, such as test case generators, algorithms and data structures, tools for platforms Codeforces and AtCoder, and other features that assist you during the development and testing of solutions, besides building a nice directory structure to develop your solutions. 🤓"},
{"Title": "APScheduler vs Schedule package", "Author": "kostakos14", "Content": "Hey folks, looking to use one library to implement some background scheduling logic on my application. I find in Google search APScheduler to be frequently mentioned, but I can see the Schedule package has more GH stars. Was curious if anybody has used one of them, and which one would you recommend based on your own experience."},
{"Title": "InterProcessPyObjects: Fast IPC for Sharing and Modifying Objects Across Processes", "Author": "FI_Mihej", "Content": "InterProcessPyObjects Python package\ngithub.com/FI-Mihej/InterProcessPyObjects If you like the project, consider giving it a star on GitHub to show your support and help further development. :) pypi.org/project/InterProcessPyObjects\nWhat My Project Does\nInterProcessPyObjects is a part of the Cengal library. If you have any questions or would like to participate in discussions, feel free to join the . Your support and involvement are greatly appreciated as Cengal evolves."},
{"Title": "Meteor Science using Python - Creating a \"weird\" coordinate system", "Author": "MrAstroThomas", "Content": "Hey everyone, I am creating \"Space Science with Python\" tutorials on YouTube with free and open accessible Python code on GitHub. It is not fancy or a \"super high animation quality YouTube production\". I am just an astrophysicists (what a difficult word to write), working in industry who continues with science as a hobby. Ha! And I have some crazy niche knowledge that is not covered by Gemini or chatGPT (yet). Anyway, I am creating now a tutorial on meteor science and wanted to show you how to create a coordinate system that co-rotates with the Earth while it is revolving around the Sun."},
{"Title": "Introducing Notolog: Python Markdown Editor built with PySide6", "Author": "devotaku", "Content": "Excited to share my personal open-source project: Notolog - Python Markdown Editor (MIT License). The main motivation for developing another markdown editor was my passion for learning new things and enhancing my development skills in Python. I developed it in my spare time over a few months, despite having no prior experience in creating full-scale Python applications. What My Project Does ∗ Multiplatform ∗ Markdown async syntax highlighting created by me ∗ Several pre-installed color themes ∗ Supports English and 17 other languages right out of the box ∗ Integration with OpenAI API for AI-assisted features"},
{"Title": "AzuracastPy: An Unofficial Python Wrapper for the Azuracast API.", "Author": "ARandomBoiIsMe", "Content": "Source code What My Project Does: It acts as a wrapper for the AzuraCast API, providing custom functions and classes for more straightforward use of the API in python projects. Target Audience: Python users who are interested in programmatically interacting with online radios hosted on AzuraCast. Comparison: The idea of API Wrappers is not new. However, I noticed that the only existing wrapper for this API is written in PHP, which I am not experienced with. I created this project so I, and other python programmers by extension, could have an easier time working with the API."},
{"Title": "SecretScraper: highly configurable web crawler/scraper for extracting sensitive data from websites", "Author": "PadishahIII", "Content": "Hi, I'm a cybersecurity enthusiastic. And I've made a web crawler/scraper tool to extract links and sensitive information against target websites. You can find it here: https://github.com/PadishahIII/SecretScraper. What My Project Does SecretScraper is a highly configurable web scraper tool that crawls links, extracts subdomains from target websites and finds sensitive data using regular expressions. The features included in the SecretScraper are:\nWeb crawler: extract links using both DOM hierarchy and regex"},
{"Title": "I've developed a library for send metrics to zabbix asynchronously", "Author": "Royal_Section4889", "Content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this. Tests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async What My Project Does Send zabbix sender messages using asyncio tasks. Target Audience SysAdmins who use Zabbix to monitor a large number of metrics. Comparison Instead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix"},
{"Title": "diskcache: This key-value store library is faster than Redis and Memcached 😮 (built by Grant Jenks)", "Author": "RevolutionaryPen4661", "Content": "PYPI (From the README, Released Last Year, Edited by Grammarly) Github pip install diskcache The cloud-based computing of 2024 puts a premium on memory. Gigabytes of space are left on disks as processes vie for memory. Memcached (and sometimes Redis) is used as a cache among these processes. Wouldn’t it be nice to leverage empty disk space for caching? Django is Python’s most popular web framework and has several caching backends. Unfortunately, the file-based cache in Django is essentially broken. The culling method is random and large caches repeatedly scan a cache directory which slows linearly with growth. Can you allow it to take sixty milliseconds to store a key in a cache with a thousand items?"},
{"Title": "I made a Python text to speech library - Pyt2s", "Author": "asksumanth", "Content": "What my project does: It supports services like IBM Watson, Acapela and Stream labs' demo websites to convert your text to speech. Target audience: It's a toy project and would not recommend you to use in Production. Comparison: It's wayyyyy easy to use. Just pip install and use in your project. No extra setup required like other libraries. Also supports various languages and voices and accents. Check docs for more. Here is the link to repository. Please go do check it out and star it if it's helpful to you guys. Thank you. I made this library taking inspiration from this php tts library by chrisjp."},
{"Title": "Who is using quart framework for microservices?", "Author": "Dry_Raspberry4514", "Content": "I am using quart framework (https://quart.palletsprojects.com) for a number of microservices in a SaaS application. However, I hardly hear anything about this framework on any social media platform which seems to be dominated by FastAPI. Also I'm unable to find which all projects/companies are using this framework. All this is leading to anxiety around the future of this project. Are there any well known projects / companies which are using this framework for microservices?"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Interactive plots in the terminal", "Author": "Spiffidimus", "Content": "I made a library to create interactive plots in the terminal (pip install itrm). It uses braille characters (by default) to display the data with sub-character resolution. There are several keybindings for moving a vertical cursor left and right, for zooming in or out on data, and for changing which curve to focus on. There are occasions (such as when working with a server) where MatPlotLib is not an option and the terminal is the only available tool. But, in my opinion, it is actually faster to use this tool (itrm) to zoom in on interesting parts of data and analyze patterns than using other tools like MatPlotLib. In fact, with large data sets (~1 million points), this tool actually renders faster than MatPlotLib. Please check it out and let know what you think."},
{"Title": "Why is Plotly so cumbersome to tweak?", "Author": "olive_oil_for_you", "Content": "I made this visualisation with this code. I have three questions:\nIs Plotly supposed to be this cumbersome to tweak? Would other libraries require the same amount of code to add the details I did?\nCan my code be reduced in size? Maybe it's me who is complicating things with Plotly and there are easier ways to do what I am doing.\nAny R enthusiast who can tell me how much shorter this code would look like with ggplot2? I asked ChatGPT but the result was garbage."},
{"Title": "TypeIs does what I thought TypeGuard would do in Python", "Author": "Ok_Analysis_4910", "Content": "While it's unfortunate to have two constructs—TypeGuard and TypeIs—with slightly different behaviors, I'm glad that the latter is less surprising. https://rednafi.com/python/typeguard_vs_typeis/"},
{"Title": "I connected LLM to Python runtime and generated unit-tests (OpenSource)", "Author": "Financial_Muffin396", "Content": "Hi all, I initially started this adventure by trying to automate bug fixes with the help of LLMs. However, I received feedback saying the fixes aren't always correct, leading to the question: why bother reviewing PRs that might add more issues? (It's really hard for LLMs to say \"I don't know\"). So, I decided to focus on reliability perfecting unit tests. The source code is available at: https://github.com/CaptureFlow/captureflow-py What My Project Does: It incorporates a tracer client-side Python library and a backend that accumulates such traces and is capable of proposing code improvements and generating tests for your repository. It traverses the execution graph, extracts relevant parts, enriches them with implementation data from the GitHub API, and then generates tests with the help of GPT4."},
{"Title": "Are PEP 744 goals very modest?", "Author": "MrMrsPotts", "Content": "Pypy has been able to speed up pure python code by a factor of 5 or more for a number of years. The only disadvantage it has is the difficulty in handling C extensions which are very commonly used in practice. https://peps.python.org/pep-0744 seems to be talking about speed ups of 5-10%. Why are the goals so much more modest than what pypy can already achieve?"},
{"Title": "Hi! I've published a Python client for IBKR REST and WebSocket APIs - IBind. Hope you like it 👋", "Author": "VoyZan", "Content": "Hi! I want to share a library I've built recently. IBind is a REST and WebSocket Python client for Interactive Brokers Client Portal Web API. It is directed at IBKR users. You can find IBind on GitHub: https://github.com/Voyz/ibind What My Project Does: It is a REST and WebSocket API for the Interactive Brokers' Web API. I'm particularly proud of a few things in this release:\nThe REST and WebSocket API clients are based on an abstract base class RestClient and WsClient accordingly. These could be implemented to use some other Web APIs in a relatively straightforward way. I have in fact used a version of that for a cryptocurrency WebSocket API, and it is nice to see it adapt to a different environment."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python Streamlit Spotlight Tutorial: an Interactive Dashboard using UNHCR Refugee Data", "Author": "jgloewen", "Content": "Python Streamlit is a terrific tool for creating interactive data visualizations. It packages all your visualizations up into a neat little application - including charts and maps - and displays them in your default browser. No muss, no fuss. Recently, I found a new dataset (to me) on the UN High Commission for Refugees (UNHCR) website. It contains country-to-country movements for refugees both from origin country and country of asylum Using this dataset, here's a step-by-step on how to code a Python Streamlit application that has:"},
{"Title": "Pure Python Physics Engine", "Author": "More-Tower9993", "Content": "What My Project Does The Physics Engine Called PhysEng, provides an easy to use environment and visualization combo in which to try out different physics or even provide a template to design your own accelleration/velocity fields. Besides the visualization aspect and numpy the basic functions of the Engine are written completely in 100% python. The features included in the Engine are:\nParticles, Soft Bodies, Anchor points\nBuilt in Fields: Drag, Uniform Force Fields, Gravity Between Particles, Octree Gravity etc"},
{"Title": "Seeking Your Input: Let's Co-Create FreeCodeCamp for python together", "Author": "globalwarming_isreal", "Content": "Hello all, This is probably my first post here. I usuallly lurk around here and Django subreddits. I've been brewing up an idea and I need your input before I take the plunge! Picture this: a website like FreeCodeCamp but for python and related technologies, a learning oasis where anyone can kickstart their journey from Python newbie to job-ready pro, and it's all free! But here's the thing, I want this to be our platform, crafted with your needs and dreams in mind. So, before I start, I need to know: would this be something that gets you excited? Imagine quizzes helping you find your starting point, interactive challenges that keep you in the zone, and a supportive community to cheer you on every step of the way. Plus, videos, written tutorials, and a progress tracker to keep you motivated!"},
{"Title": "IP subnet or IP calculator tool need feedback", "Author": "nicanorflavier", "Content": "Hey folks, I've been dabbling with a Python project recently that's all about making life easier for us I.T. people. It's a nifty little tool that calculates IP subnets and does IP calculations from the command or CLI. Here's the GitHub link and the code: https://github.com/nicanorflavier/ipnet I’m pretty stoked about it, but I know there’s always room for improvement. So, I thought, better to turn to than the wise minds of this python community? I’m all ears for any feedback, tips, tricks, or advice you guys might have. Thanks a ton in advance!"},
{"Title": "In what way do you try out small things when developing?", "Author": "HatWithAChat", "Content": "I've noticed at work that my coworkers and I try out small things in different ways. Small things like if you want to try that adding two datetimes together behaves in the way you expect. Some people use jupyter notebook for this and others run python interactively in a separate command prompt. I usually run debug in whatever IDE I'm using and then letting it stop at the code I'm currently developing and then using the debug console to test things out. Sometimes this means just leaving the debugger at a breakpoint for half an hour while I continue writing code. Is my way of doing it weird or does it have any disadvantages? How do you usually test out things on the go in a good way?"},
{"Title": "Tutorial on Creating Useful Data Visuals with Python seaborn and matplotlib libraries", "Author": "jgloewen", "Content": "With the current global deluge of data and information, there has never been a more important to visualize your data in a clear and simple manner. Python is a terrific tool to help us do this. The key to this lies in choosing the the right data visualization techniques to tell the most interesting and relevant story. Three useful visuals are:\nsmall multiples\nheat maps"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ArchiveFile: Unified interface for tar, zip, sevenzip, and rar files", "Author": "PredatorOwl", "Content": "What My Project Does archivefile is a wrapper around tarfile, zipfile, py7zr, and rarfile. The above libraries are excellent when you are dealing with a single archive format but things quickly get annoying when you have a bunch of mixed archives such as .zip, .7z, .cbr, .tar.gz, etc because each library has a slightly different syntax and quirks which you need to deal with. archivefile wraps the common methods from the above libraries to provide a unified interface that takes care of said differences under the hood. However, it's not as powerful as the libraries it wraps due to lack of support for features that are unique to a specific archive format and library."},
{"Title": "Rethinking String Encoding: a 37.5% space efficient string encoding than UTF-8 in Apache Fury", "Author": "Shawn-Yang25", "Content": "In rpc/serialization systems, we often need to send namespace/path/filename/fieldName/packageName/moduleName/className/enumValue string between processes.\nThose strings are mostly ascii strings. In order to transfer between processes, we encode such strings using utf-8 encodings. Such encoding will take one byte for every char, which is not space efficient actually.\nIf we take a deeper look, we will found that most chars are lowercase chars, ., $ and _, which can be expressed in a much smaller range 0~32. But one byte can represent range 0~255, the significant bits are wasted, and this cost is not ignorable. In a dynamic serialization framework, such meta will take considerable cost compared to actual data.\nSo we proposed a new string encoding which we called meta string encoding in Fury. It will encode most chars using 5 bits instead of 8 bits in utf-8 encoding, which can bring 37.5% space cost savings compared to utf-8 encoding.\nFor string can't be represented by 5 bits, we also proposed encoding using 6 bits which can bring 25% space cost savings"},
{"Title": "Pre-commit hook to keep coverage badge in README up to date", "Author": "60percentcocoa", "Content": "Wrote this as a tool to keep README coverage badges up to date without relying on 3rd party services or having to do anything extra, thought others might get some utility out of it: coverage-pre-commit. A .coverage file is expected at the root of the project, generated by running coverage run directly or using a plugin such as pytest-cov when running tests. Most convenient when used as a pre-push hook imo. Feel free to opine, be it positive or negative!"},
{"Title": "I made an easy and secure data lake for Pandas", "Author": "realstoned", "Content": "What My Project Does Shoots is essentially a \"data lake\" where you can easily store pandas dataframes, and retrieve them later or from different locations or in different tools. Shoots has a client and a server. After choosing a place to run the server, you can easily use the client to \"put\" and \"get\" dataframes. Shoots supports SQL, allowing you to put very large dataframes, and then use a query to only get a subset. Shoots also allows you to resample on the server. # put a dataframe, uploads it to the server  \ndf = pd.read\\_csv('sensor\\_data.csv')  \nshoots.put(\"sensor\\_data\", dataframe=df, mode=PutMode.REPLACE)  \n\n\n# retrieve the whole data frame  \ndf0 = shoots.get(\"sensor\\_data\")  \nprint(df0)  \n\n# or use sql to retrieve just some of the data  \nsql = 'select \"Sensor\\_1\" from sensor\\_data where \"Sensor\\_2\" < .2'  \ndf1 = shoots.get(\"sensor\\_data\", sql=sql)"},
{"Title": "Python script to convert Spotify Artists to Playlists", "Author": "RJW-20", "Content": "I've made my first bit of useful software and I wanted to share it here. I'd love some feedback (and it would be amazing to hear if someone has used it!) What My Project Does: Using the third party requests package, the script interacts with the Spotify web API to request all albums from the given Artist, then all the tracks from all of those albums. It then goes through the list to remove any duplicates and also tries to remove any unwanted versions (only done by examining the name of the track, since Spotify does not attribute a version type to its tracks). Once that's done a playlist is then created on your Spotify account with the name of the Artist and all the tracks are posted there in chronological (essentially per album) order."},
{"Title": "PyWolt: Wolt food delivery service API wrapper", "Author": "daivushe1", "Content": "I'm thrilled to share my first open-source project with you all: PyWolt! 🎉 PyWolt is a Python library that makes it super easy to interact with the Wolt API.\nWhat My Project Does:\nDiscover Venues: Find nearby spots to grab a bite.\nExplore Menus: Dive into a venue's menu and pick your favorites.\nTarget Audience:"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "List of Sites that Packages Need to Connect to?", "Author": "BullCityPicker", "Content": "I'm doing most of my work behind a government firewall, and I'm having trouble connecting to certain sites. I can do the usual \"pip\" installs just fine, but I'm talking about packages that need to download data to do their job. An example is the NLTK (Natural Language Toolkit) package, which downloads dictionaries, lookup tables for sentiment analysis, and so on. I know what sites to open up for that particular problem (pastebin.com and nltk.org), but I wonder if anybody's made a list of such sites for different packages. I can ask for the two sites I know about to be opened up, but I'd like to have a more comprehensive list so I don't have to go through the red tape multiple times."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Share Proejct: NLLB-200 Distill 350M en-ko", "Author": "SaeChan5", "Content": "Hello , I'm excited to share a project that was initially intended to use in my graduating product(Capstone) What My Proeject Does I made NLLB-200 Distill 350M model to translating English to Korean Target Audience GPU servers are quite expensive, so I made it for university students who can't cost the server (like me.) Comparison It's even smaller and faster the other NLLB-200 model. so it can be run with CPU! more details are in my page If you know Korean, please give me a lot of feedback https://github.com/newfull5/NLLB-200-Distilled-350M-en-ko thank you!!"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a React-like web framework for Python 👋", "Author": "Rawing7", "Content": "I'm Paul, one of the creators of Rio. Over the years I've tried many different established python GUI frameworks, but none of them really satisfied me. So I teamed up with a few like minded developers and spent the last few months to create our own framework. Rio is the result of this effort. What My Project Does Rio is a brand new GUI framework that lets you create modern web apps in just a few lines of Python. Our goal is to simplify web and app development, so you can focus on the things you care about, instead of wasting countless hours on frustrating user interface details. We do this by following the core principles of Python that we all know and love. Python is supposed to be simple and compact - and so is Rio. There is no need to learn any additional languages such as HTML, CSS or JavaScript, because all of the UI, Logic, Components and even layouting is done entirely in Python. There’s not even a distinction between front-end and back-end. Rio handles all of the communication transparently for you."},
{"Title": "ASCII plot backend package for matplotlib", "Author": "jetpack_away", "Content": "Hi I've made a package called mpl_ascii which is a backend for matplotlib. You can find it here: https://github.com/chriscave/mpl_ascii I would love to share it with others and see what you guys think What it is It is a backend for matplotlib that converts your plots into ASCII characters. At the moment I have only made support for: bar charts, scatter plots and line plots but if there's demand for more then I would love to keep working on it. Target Audience: Anyone using matplotlib to create plots who might also want to track how their plots change with their codebase (i.e. version control)."},
{"Title": "Pip 24.1 beta released, and it's a big one", "Author": "zurtex", "Content": "I'd like to call attention to pip 24.1 beta asit is unusual for the pip team to release betas:\nhttps://pip.pypa.io/en/latest/news/#b1-2024-05-06\nhttps://pypi.org/project/pip/24.1b1/\nYou can install with: python -m pip install pip==24.1b1 In particular they have upgraded their vendored version of packaging from 21.3 to 24.0, this was a and , included significant performance improvements, and will allow pip to support . However, it also means legacy versions and specifiers are with pip."},
{"Title": "The new REPL in Python 3.13.0 beta 1", "Author": "treyhunner", "Content": "Python 3.13.0 beta 1 was released today. The feature I'm most excited about is the new Python REPL. Here's a summary of my favorite features in the new REPL along with animated gifs. The TLDR:\nSupport for block-leveling history and block-level editing\nPasting code (even with blank lines within it) works as expected now\nTyping exit will exit (no more Use exit() or Ctrl-D (i.e. EOF) to exit message)"},
{"Title": "How Python Asyncio Works: Recreating it from Scratch", "Author": "jpjacobpadilla", "Content": "Do you understand how asyncio works behind the scenes? Read this article and see how you can use Python generators to create your own version of asyncio, and then use the __await__ dunder method to use the async/await keywords to come full circle! https://jacobpadilla.com/articles/recreating-asyncio"},
{"Title": "Cross platform python3 shebang", "Author": "tedkotz", "Content": "There is no shebang line that actually works across platforms for python 3. I would like one that works on unmodified :\nDebian shell (Dropped python2, falls under PEP 394)\nOlder Linux shells that still have python pointing to python2 (PEP 394)\nWindows cmd.exe shell (this really just means one that will work with PEP 397)\nGitbash for Windows (sort of a weird half sibling that respects shebangs)"},
{"Title": "Build tool support for PySide / PyQt", "Author": "jmacey", "Content": "Just interested in how people approach this, typically I just use VSCode or QtCreator to build simple projects. However I now want to automate some of the build process such as running uic, and rcc. I've tried to use CMake but can't seem to get it to work without a lot of custom scripting (for example the AUTOUIC etc functions need c++ projects), can't see any info on running uic in QtCreator (which would be ideal but python support is really just an after thought). I could write some Makefiles but this is a little ad-hoc and also confuses the IDE's (and at the end of the day I want a simple process for my students to use and I already teach cmake for C++ dev)."},
{"Title": "American Airlines scraper made in Python with only http requests", "Author": "JohnBalvin", "Content": "Hello wonderful community, Today I'll present to you pyaair, a scraper made pure on Python https://github.com/johnbalvin/pyaair Easy instalation ` ` `pip install pyaair ` ` ` Easy Usage ` ` ` airports=pyaair.airports(\"miami\",\"\") ` ` ` Always remember, only use selenium, puppeteer, playwright etc when it's strictly necesary Let me know what you think, thanks About me: I'm full stack developer specialized on web scraping and backend, with 6-7 years of experience"},
{"Title": "I made a Python app that turns your Figma design into code", "Author": "axorax", "Content": "Link: https://github.com/Axorax/tkforge Hey, my name is Axorax. I have been programming for a few years now. I started making a lot more projects in Python recently and this is one of them. I decided to call the project TkForge. What My Project Does TkForge allows you to turn your Figma design into code. So, you can make the UI for an app in Figma and add input fields, buttons and much more and name them properly then you can run TkForge to convert your Figma design into code. The names need to be the element that you want. For example; if you want a button element then you can name it \"button\" or \"button Hello World!\". The \"Hello World!\" portion will just get ignored. All of the text after the first space is ignored. However, for some elements, they matter. Like, if you want a textbox element with the placeholder text of \"Hello\" then you need to name it \"textbox Hello\"."},
{"Title": "relax-py - Web framework for htmx with hot module replacement", "Author": "MindLopsided4430", "Content": "Excited to finally showcase this! It's still pretty rough around the edges, but I'm finally happy enough with the feature set and curious to see what the community thinks about a framework like this. Code: github.com/crpier/relax-py Documentation: crpier.github.io/relax-py What My Project Does relax-py is a Python framework for building full-stack applications with htmx It provides tools for writing HTML in a manner similar to simple_html (which also inspired the decision to use standard Python to write HTML, rather than use Jinja2 or to make something like templ work in Python) It has:"},
{"Title": "python-oracledb 2.2 and the VECTOR type in Oracle Database 23ai", "Author": "cjbj", "Content": "python-oracledb 2.2, the Oracle Database driver, has been released with support for Oracle Database 23ai features such as the VECTOR and BOOLEAN data types, Implicit Connection Pooling, and improved connection performance. See the release announcement."},
{"Title": "milkcow - First package/library", "Author": "Samuel_G_Reynoso", "Content": "Excited to share milkcow, my first python package. I'd love any feedback, and to continue to build out the parts of this package that show potential. https://pypi.org/project/milkcow/ https://github.com/SamReynoso/milkcow What MilkCow Does Milkcow automates database creation and offers in-memory key-value mapping for data handling. Whether you're building middleware, local storage, or multiprocessing scripts. Target Audience MilkCow is designed for developers looking to streamline the development process. It caters to those who want to simplify data."},
{"Title": "I've started writing Python bindings for lexertl", "Author": "BenHanson", "Content": "See https://github.com/BenHanson/pylexertl I will see about registering as an official library when I am happy I have completed all the bindings. I added all the missing functions for the rules objects today, so things are in reasonable shape already. My python experience has been limited up until now, but it is big for my new role. I have a runtime parser generator https://github.com/BenHanson/parsertl17 which I also plan to add bindings for. I hope this is of interest to somebody! What My Project Does Allows you to build lexical analysers at runtime and use them to lex text (in this case utf-8)"},
{"Title": "Python Quality Standards", "Author": "nicomarcan", "Content": "Hey, happy Friday (don't push to prod). Me and some friends are building a no-code platform to run code improvement agents (really in BETA) . We want to have a quality agent for each language, and I would really appreciate your feedback on python best practices and standards. The agents are created by defining the steps that you want to apply in natural language. Right now our Python agent has the following steps:\nUse descriptive naming for functions and variables."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Introducing PgQueuer: A Minimalist Python Job Queue Built on PostgreSQL", "Author": "GabelSnabel", "Content": "What My Project Does PgQueuer is a Python library designed to manage job queues using PostgreSQL features. It leverages PostgreSQL's native LISTEN/NOTIFY, along with advanced locking mechanisms, to handle job queues efficiently. This allows for real-time job processing, concurrency, and reliable task execution without the need for a separate queuing system. Target Audience PgQueuer is ideal for developers and teams who already use PostgreSQL in their projects and are looking for a simple, integrated way to handle background tasks and job queues. It's designed for production use, offering a dependable solution that scales seamlessly with existing PostgreSQL databases."},
{"Title": "How To Build a Social Media Sentiment Analysis Pipeline With FastAPI And Generative AI", "Author": "arthurdelerue25", "Content": "Social media like Reddit, Hacker News, Twitter, etc. contain tons of genuine discussions that you might want to analyze automatically with sentiment analysis. For example you might want to monitor what people say about you, your product, your competitors, etc. I made a technical article that shows how to implement such a sentiment analysis pipeline using the following steps:\nImplement social media listening\nIntegrate the data in your system with an API webhook processed in Python/FastAPI"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Reboot Your Router with a Python Script", "Author": "SAV_NC", "Content": "Hello r/python, I've developed a Python script that allows you to reboot your router remotely via SSH! This script handles the countdown and checks when the router is back online after a reboot. What My Project Does: Key Features:\nAutomated Router Reboot: Remotely trigger a reboot of your router.\nMonitoring: After sending the reboot command, the script counts down from 350 seconds and starts checking the router's status by pinging it after the first 100 seconds have passed."},
{"Title": "Python Interview Cheat Sheet Website!", "Author": "ixatrap", "Content": "Hey everyone, I’ve recently launched a new website aimed at helping fellow programmers ace their Python interviews. It’s not just limited to Python though; it also covers essential topics like big-O notation, object-oriented programming, design patterns, and more! I’d love to hear your thoughts and feedback on the content, layout, and anything else you think could be improved. Check it out here https://hlop3z.github.io/interviews-python/ and let me know what you think. Your input is invaluable in making this resource the best it can be. Thanks in advance for your time and insights! 🚀🐍"},
{"Title": "Opinions sought: Modernising the Apache NiFi Python client", "Author": "Samausi", "Content": "Hello folks, I am the author of NiPyAPI, the defacto Python client for the Apache NiFi project. For those unfamiliar, Apache NiFi is an open-source ETL tool designed around the flow-based programming paradigm. It excels at continuously moving and managing arbitrary data flows between disparate systems with low latency at large scale, and is often contrasted with Airflow. Amongst many features, NiFi allows for Command & Control via a native UI, enabling live edits to data routing and transformation. NiFi also enforces an API-first approach, and produces a swagger definition during code compilation, which allowed creation of a Python client to enable automated Data Flow testing and a Design & Deploy approach by running it through tool shaped by mustache templates. This produces a verbose low-level client, which I then leverage in higher-level operational functions and demo scripts in the library."},
{"Title": "Python Test 219: Building Django Apps & SaaS Pegasus - Cory Zue", "Author": "variedthoughts", "Content": "Listen at podcast.pythontest.com/219 When starting a SaaS project using Django, there are tons of decisions. I've asked Cory Zue, creator of SaaS Pegasus, to help me sift through some common SaaS/Django decisions."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "🔭 OpenTelemetry Architecture: Python SDK Overview", "Author": "roma-glushko", "Content": "Hey folks,\nI have just posted an article for those who want to go a little bit beyond the basic usage of OTEL and understand how it works under the hood. The post quickly touches on:\n- 🔭 History and the idea of OpenTelemetry\n- 🧵 Distributed traces & spans. How span collection happens on the service side\n- 💼 Baggage & trace ctx propagation\n- 📈 Metrics collection. Views & aggregations. Metrics readers\n- 📑 OTEL Logging integration\n- 🤝 Semantic conventions and why that is important\nBlog Post:\nLet me know what do you think and hope this is helpful for someone 🙌"},
{"Title": "Python Test 220: Getting the most out of PyCon, including juggling - Rob Ludwick", "Author": "variedthoughts", "Content": "Listen at https://podcast.pythontest.com/episodes/220-juggling-pycon\nEven if you never get a chance to go to PyCon, I hope this interview helps you get a feel for the welcoming aspect of the Python community. The juggling at PyCon is one of the inspirations for PythonPeople.fm, one of PythonTests's sibling podcasts. Do you have any conference tips to add?"},
{"Title": "How to create a Discord Bot to launch a Minecraft server automatically", "Author": "chadicus-gigo", "Content": "Hi y'all, This might be off topic a bit from the normal stuff that gets posted here, but a while back I was messing around on a Minecraft server that I was hosting on Aternos (a free online Minecraft server host). Now since the server wasn't running on my computer (and since Aternos has a timeout policy to save server resources) it became annoying for my buddies to hop on the server if I was busy. They'd have to ask me to manually start the server from the webpage. So I had a free Saturday a couple of months ago and decided to remedy this problem. My source code is hosted on a GIGO Dev environment if y'all wanna check it out:"},
{"Title": "Suggestions for python libraries to contribute to", "Author": "JimJimBerry", "Content": "Hey, python folks ! I have been coding in python for around 3 years, 2 years professionally. I have worked with asyncio, typing and other stuff that is needed to build a server. I was looking for a small but impactful enough open source core python library/application to work on. I tried cpython but it seems to be beyond my capability at the moment. As for my interests I was interested in lower level stuff as well as libraries like asyncio and celery. Any suggestions for libraries that could use a bit of help and teach me some stuff as well would be appreciated"},
{"Title": "What are your favourite pre-commit hooks and why?", "Author": "LatterConcentrate6", "Content": "Just getting started with pre-commit and I think it's awesome. Looking to find out what other code automation tools people are using. Let me know what works for you and why. Thanks!"},
{"Title": "Project: Simple Interactive Python Streamlit Maps With NASA GIS Data", "Author": "jgloewen", "Content": "Python Streamlit is terrific for putting together interactive dashboards. Combined with the geopandas library, streamlit can easily display GIS data points on a map for you. Forest fires in my home province of British Columbia, Canada have been really bad recently. NASA has a terrific dataset that keeps track of forest fires by country. Can I use Streamlit to access this dataset and display a map off all the fires within a certain area (BC) for a particular time frame (2021)? And can I give the user the ability to choose a month? You bet! Let me step you through how! FREE tutorial (with code):"},
{"Title": "Sensor-App: A Sensor Data Displaying/Streaming Android App written in Python", "Author": "StoneSteel_1", "Content": "Sensor-App is an Android App that's main focus is to help create a real-time mobile sensor data stream for computer applications, data collection, AR, VR, etc. Github: SensorApp\nFeatures of Sensor-App\nReal-Time Sensor Data display\nFaster Real-Time Sensor Data Streaming via TCP Sockets\nSimple and Easy setup of Data Streaming Server"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "UXsim 1.2.0 released with support for (self-driving) taxis and shared mobility", "Author": "Balance-", "Content": "Version 1.2.0 of UXsim is released, which allows simulating taxis, shared mobility and self-driving taxis! Main Changes in 1.2.0\nAdd taxi (aka. shared mobility) functions\nA standard vehicle in UXsim just travel from A to B and disappear. This is like a private owned vehicle.\nFrom this update, a Vehicle with mode=\"taxi\" behave like a taxi. Specifically, they travel through a network by passing through specific nodes that are dynamically updated, simulating passenger pickup and drop-off."},
{"Title": "New book! The Quick Python Book, Fourth Edition by Naomi Ceder", "Author": "ManningBooks", "Content": "Hello everybody, Thank you for having us here, and a huge \"Thank you\" to the moderators for letting us post. We have just released the latest edition of The Quick Python Book by the one-and-only Naomi Ceder, and I wanted to share that news with the community. Many of you are already familiar with Naomi's work and her massive contributions to the world of Python programming language. The Quick Python Book has aided over 100,000 developers in mastering Python. The Fourth Edition of the book has been revised to include the latest features, control structures, and libraries of Python, along with new coverage of working with AI-generated Python code. Naomi, the author, has beautifully balanced the details of the language with the insights and advice required to accomplish any task. Her personal touch has made learning Python an enjoyable experience for countless developers."},
{"Title": "Best way to grade Jupyter-Notebooks?", "Author": "flying_Wahale", "Content": "I recently took a job with a professor, that includes helping with the grading of biweekly assignments. So I basically have now 30 Notebooks that I have to grade. Top of my head I can think of these approaches:\nConvert to PDF and write into the PDF\nDuplicate the Notebook and write the comments in extra blocks\nCreate a .txt file with all my note"},
{"Title": "typedattr: Autocompletion and typechecking for CLI script arguments, using standard argparse syntax", "Author": "gings7", "Content": "Excited to share my pypi package typedparser I have been working on for around 1 year now. What My Project Does: It enables writing CLI scripts and create an \"args\" variable with autocompleted members and type checks, but still keeps the simple and universally understood syntax of the stdlib argarse module. Target Audience: For stability, I battletested it in my research projects and added automatic builds as well as 80%+ test coverage. So I believe it is pretty stable. Comparison: For typing functionality it uses the attrs package as backend. It also provides some additional features for object and dictionary manipulation. Of course there are many other CLI argument packages out there, but this one stands out in that it tries to keep the syntax of the argparse standard library as much as possible, making it easy for others to figure out what your script does. Check it out and let me know what you think."},
{"Title": "What is your best Tkinter project that you put a lot of effort into creating?", "Author": "_-Dan_-", "Content": "I want to hear your description of the project you are most proud of. I was just trying to find something on the Internet, but I didn't find much of interest. The only difficult project was CustomTkinter, which, as far as I know, was done entirely in Tkinter. Since it is possible to create something this complex, I'm sure you have something cool too.\nNote: I am expecting to hear projects more complex than a calculator :)"},
{"Title": "Dash vs Reflex vs Others", "Author": "Sea_Split_1182", "Content": "Where can I find a decent comparison (pros and cons) of these 5 solutions? They seem to be solving the same problem, which is, afaiu, separating the frontend ‘annoyance’ from Python scripting / math.\n⁠Reflex (used to be called Pynecone) https://reflex.dev\n⁠Streamlit https://streamlit.io\n⁠Gradio https://gradio.app\n⁠Dash https://dash.plotly.com"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a python package that can parse Excel Formula Strings into dictionary structures!", "Author": "MPGaming9000", "Content": "What my project does: It basically takes a formula string like you'd get from Openpyxl like \"=SUM(A1:B2)\" and breaks it all out into a dictionary structure for you to then navigate through, modify, and then reformat that modified structure back into an excel friendly formula string again! Target Audience: (People who modify Excel formula strings in automated spreadsheet modification scripts. Or people who need to analyze formulas in a spreadsheet to do some kind of logic based on that analysis). Disclaimer: For most people some simple regex pattern matching and str replaces would be fine to modify formulas but if you need a more structured approach to working with these strings, this package has you covered!"},
{"Title": "Zillow scraper made pure in Python", "Author": "JohnBalvin", "Content": "Hello everyone., on today new scraper I created the python version for the zillow scraper. https://github.com/johnbalvin/pyzill What My Project Does The library will get zillow listings and details.\nI didn't created a defined structured like on the Go version just because it's not as easy to maintain this kind of projects on python like on Go.\nIt is made on pure python with HTTP requests, so no selenium, puppeteer, playwright etc. or none of those automation libraries that I hate."},
{"Title": "Hatch v1.10.0 - UV support, new test command and built-in script runner", "Author": "Ofekmeister", "Content": "Hello everyone! I'd like to announce version 1.10.0: https://hatch.pypa.io/latest/blog/2024/05/02/hatch-v1100/ Feel free to provide any feedback either here or as a discussion on the repo: https://github.com/pypa/hatch"},
{"Title": "Created Netlify DNS Manager: CLI Tool for uploading zone Files to Netlify or exporting Netlify DNS", "Author": "snorkell_", "Content": "What My Project Does? Command-line tool to simplify the management of DNS records for domains hosted on Netlify, whether you want to migrate to Netlify or migrate away from Netlify.\nImport Zone File from Godaddy, NameCheap or others to Netlify - helpful in migrating nameservers.\nExport DNS records from Netlify as zonefile to be import it to Godaddy, Namecheap or other servers."},
{"Title": "What does your python development setup look like?", "Author": "Working_Noise_6043", "Content": "I'd like to explore other people's setup and perhaps try need things or extra tools. What kind IDE, any extra tools to make it easier for you, etc. Looking forward to everyone's responses!"},
{"Title": "Tutorial on Building a Server-to-Server Zoom App with Python", "Author": "SleekEagle", "Content": "I made a tutorial on how to build a server-to-server Zoom OAuth application using Python. This application can transcribe Zoom meeting recordings, print the transcripts to the terminal, and save the transcripts as text files.\nvideo tutorial\nrepo\nwritten tutorial"},
{"Title": "Multipart File Uploads to S3 with Python", "Author": "tylersavery", "Content": "I created this tutorial after overcoming a difficult challenge myself: uploading 5GB+ files to AWS. This approach allows the browser to securely upload directly to an S3 bucket without the file having to travel through the backend server. The implementation is written in python (backend) and vanilla js (frontend)."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Suggestions for a self-hosted authentication as a service?", "Author": "FlyingRaijinEX", "Content": "I have a simple backend REST API service that is serving a few ML models. I have made it \"secured\" by implementing an API key in order call those endpoints. I was wondering, how common it is for people to use services that can be self-hosted as their authentication/authorization. If it is common and reliable, what are the best options to go for? I've read that building your own authentication/authorization service with email verification, password reset, and social auth can be a pain. Also, did some googling and found this General - Fief. Has anyone ever tried using this? If so, how was the experience?"},
{"Title": "One pytest marker to track the performance of your tests", "Author": "toodarktoshine", "Content": "Hello Pythonistas!\nI just wrote a blog post about measuring performance inside pytest test cases. We dive into why it’s important to test for performance and how to integrate the measurements in the CI.\nHere is the link to the blog: https://codspeed.io/blog/one-pytest-marker-to-track-the-performance-of-your-tests"},
{"Title": "SQLPage - a Python library to add string token based pagination easily", "Author": "kernelslayer", "Content": "What My Project Does - This is a Python package to easily add string token based pagination. Currently it supports SQLModel and SQLAlchemy ORMs. Recently I wanted to add pagination in one of my Python projects and in the API response, I had to return a string next page token. Now I could not find a straight-forward way of doing this in Python. All of the tutorials or blog posts I saw, there in the response the server always returned a page_number, page_size, and total_elements and then the onus was on the calling service to adjust this accordingly.  Comparison - The current packages and methods requires some changes in the app layer as well. I tried using a few but those did not satisfy the use case and were also a bit harder to implement. I could not find a easy to use option. The present ones returned integers instead of a string token"},
{"Title": "How to create architecture diagrams from code in Jupyter Notebook", "Author": "writer_on_rails", "Content": "Hello world,I wrote an article about creating diagrams from code on Jupyter Notebook inside VS Code. It will give you a brief on the setup and also an overview of concepts. Within 5 minutes, you should be able to start making cool architecture diagrams. [TO MODERATOR: This link does not contain any paywalled or paid content. All the contents are available for free] Article link: https://ashgaikwad.substack.com/p/how-to-create-architecture-diagrams"},
{"Title": "UXsim 1.3.0 released with vehicle tracking and improved vehicle routing", "Author": "Balance-", "Content": "Main Changes\nAdd GUI functions\nVehicle tracking: You can now track a specific vehicle to see their route\nDataframe viewer: Stats can be confirmed\nImprove vehicle routing functions\nAdd example of routing optimization"},
{"Title": "Starter Code for a LLM-based AI Assistant", "Author": "2bytesgoat", "Content": "Hey everyone 👋 TL;DR\nSince everyone is talking about the Humane AI Pin and the Rabbit R1, I decided to make a short 5 minute tutorial on how people can setup and customize their own little AI assistant on their machine. I've uploaded a video tutorial here: https://www.youtube.com/watch?v=2fD_SAouoOs&ab_channel=2BytesGoat And the Github code is here: https://github.com/2BYTESGOAT/AI-ASSISTANT Longer version"},
{"Title": "Resume Screening Chatbot using RAG Fusion", "Author": "Babe_My_Name_Is_Hung", "Content": "Hi everyone! I recently finished a small side project for my graduating thesis, which is about experimenting with RAG-based frameworks in improving resume screening. What my project does: The project for the thesis is a GPT-4 Chatbot with RAG Fusion retrieval. Given a job description as input, the system retrieves the most relevant candidate profiles to perform follow-up tasks such as analysis, summarization, and decision-making, which can assist the screening process better. The revolving idea is that the similarity-based retrieval process can effectively narrow the initial large pool of applicants down to the most relevant resumes. However, this simple similarity ranking should not be used to evaluate a candidate's actual ability. Therefore, the top resumes are used to augment the GPT-4 Chatbot so it can be conditioned on these profiles and perform further downstream tasks."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Giving New Life to JModelica: Bringing Powerful Modelica Simulations to Python", "Author": "foadsf", "Content": "Five years ago, I posted about JModelica, a fantastic open-source tool for simulating complex systems that combined the ease of Python with the strength of Modelica. Sadly, the project went quiet, but I'm thrilled to share that, thanks to the dedication of a few folks (myself included!), JModelica is back! You can find the revived project on GitHub: https://github.com/JModelica/JModelica. What JModelica Does: JModelica provides a way to write complex simulations using the Modelica language, which is known for its ability to handle differential equations and model physical systems beautifully. The magic of JModelica lies in its Python integration—you can solve your Modelica models and access the results directly in Python for in-depth analysis, visualization, and even optimization using libraries you already love!"},
{"Title": "How to auto-instrument Python servers w/ OpenTelemetry for performance & error monitoring", "Author": "__boba__", "Content": "Hi everyone! We've recently written up a guide for anyone running a Python server (ex. Flask, Django, FastAPI) to instrument their app to debug slow downs and errors using the CNCF OpenTelemetry project and their Python instrumentation package. It's really straightforward to get started with just a few lines of added code and commands to any Python project, so hopefully helps some people out as they're looking to add better instrumentation to their servers. Here's the tutorial: https://www.hyperdx.io/blog/opentelemetry-python-server-auto-instrumentation"},
{"Title": "k8sAI - my open-source GPT CLI tool for Kubernetes!", "Author": "Wild_Plantain528", "Content": "What my project does: I wanted to share an open-source project I’ve been working on called k8sAI. It’s a personal AI Kubernetes expert that can answer questions about your cluster, suggests commands, and even executes relevant kubectl commands to help diagnose and suggest fixes to your cluster, all in the CLI! Target Audience: As a relative newcomer to k8s, this tool has really streamlined my workflow. I can ask questions about my cluster, k8sAI will run kubectl commands to gather info, and then answer those question. It’s also found several issues in my cluster for me - all I’ve had to do is point it in the right direction. I’ve really enjoyed making and using this so I thought it could be useful for others. Added bonus is that you don’t need to copy and paste into ChatGPT anymore!"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "CLI to embed code snippets in your README, from actual (testable) code", "Author": "realazthat", "Content": "What My Project Does What My Project Does: snipinator is a CLI to embed (testable) snippets from your codebase into your README, using Jinja2 and functions provided by snipinator to assist with embedding code, shell output, etc. Please provide any feedback in the comments or GH issues. Target Audience Target Audience: Developers of {GitHub,other} projects that have a README. It works for me, it might work for you. Comparison Features:\nSupports anything Jinja2 supports."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PkgInspect - Inspect Local/External Python Packages", "Author": "yousefabuz", "Content": "GitHub\nWhat My Project Does\nPkgInspect is a comprehensive tool designed to inspect and compare Python packages and Python versions effortlessly. It equips users with a comprehensive set of tools and utility classes to retrieve essential information from installed Python packages, compare versions seamlessly, and extract various details about Python installations with ease."},
{"Title": "map_plotter - abstracts complexity of creating intensity plots overlaid onto global map", "Author": "teamamentum", "Content": "What My Project Does\nOverlaying intensity plots onto a geographical map using cartopy/matplotlib can be complex. So we created this map_plotter package to abstract away that complexity for a common use case. Installation (opinionated use of conda to avoid cartopy dependency hell and install precompiled binaries) conda install cartopy\ngit clone git@github.com:amentumspace/map_plotter.git\ncd map_plotter\npip install ."},
{"Title": "2,000 free sign ups available for the \"Automate the Boring Stuff with Python\" online course. (May 20", "Author": "AlSweigart", "Content": "If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): *The sign ups are all used up, but you can still watch all the videos for free. Read below! https://udemy.com/course/automate/?couponCode=MAY2024FREE https://udemy.com/course/automate/?couponCode=MAY2024FREE2 If you are reading this after the sign ups are used up, you can always find the first 15 of the course's 50 videos are free on YouTube if you want to preview them. YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have \"preview\" turned on. Scroll down to find and click \"Expand All Sections\" and then click the preview link. You won't have access to the forums and other materials, but you can watch the videos."},
{"Title": "2,000 lines of Python code to make this scrolling ASCII art animation: \"The Forbidden Zone\"", "Author": "AlSweigart", "Content": "What My Project Does\nThis is a music video of the output of a Python program: https://www.youtube.com/watch?v=Sjk4UMpJqVs I'm the author of Automate the Boring Stuff with Python and I teach people to code. As part of that, I created something I call \"scroll art\". Scroll art is a program that prints text from a loop, eventually filling the screen and causing the text to scroll up. (Something like those BASIC programs that are 10 PRINT \"HELLO\"; 20 GOTO 10) Once printed, text cannot be erased, it can only be scrolled up. It's an easy and artistic way for beginners to get into coding, but it's surprising how sophisticated they can become."},
{"Title": "Best book for GUI development in Python", "Author": "Bekhyam", "Content": "Can you guys suggest some very good book for GUI development in Python? I'm currently working on a visualizer that needs many features to plot data on a 3D and 2D space. Using PyQt for this as it has threading support."},
{"Title": "Reviewing Dataframe Changes? Looking for Your Preferred Methods!", "Author": "rageagainistjg", "Content": "After playing around with a dataframe—applying filters or other transformations—I'm curious about your methods for reviewing the changes. In VS Code, the variable explorer is quite handy for a quick look at the modified dataframe. Alternatively, when working in a Jupyter notebook within VS Code, exporting the data to an Excel file provides a detailed view and allows for an easy deep dive into the results. What are your preferred practices for ensuring your data adjustments are precisely what you intended?"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Library for automatic Cython 3.0 code annotations generation.", "Author": "Cool-Nefariousness76", "Content": "Hi everybody, over the last year I've been developing a library that adds some Cython 3.0 annotations to existing python code. What My Project Does: For example if it sees a for i in range(): in a function it recognizes i as an integer and adds a i = cython.declare(cython.int)line at the beginning of the function. It actually uses the built-in ast module under the hood for parsing, I found it a super useful library! Target Audience: It is a side project I made mainly for fun. I don't know if it can be of interest to anybody, or if it could have some potential utility."},
{"Title": "ArchiveFile: Unified interface for tar, zip, sevenzip, and rar files", "Author": "PredatorOwl", "Content": "What My Project Does archivefile is a wrapper around tarfile, zipfile, py7zr, and rarfile. The above libraries are excellent when you are dealing with a single archive format but things quickly get annoying when you have a bunch of mixed archives such as .zip, .7z, .cbr, .tar.gz, etc because each library has a slightly different syntax and quirks which you need to deal with. archivefile wraps the common methods from the above libraries to provide a unified interface that takes care of said differences under the hood. However, it's not as powerful as the libraries it wraps due to lack of support for features that are unique to a specific archive format and library."},
{"Title": "APScheduler vs Schedule package", "Author": "kostakos14", "Content": "Hey folks, looking to use one library to implement some background scheduling logic on my application. I find in Google search APScheduler to be frequently mentioned, but I can see the Schedule package has more GH stars. Was curious if anybody has used one of them, and which one would you recommend based on your own experience."},
{"Title": "I made an easy and secure data lake for Pandas", "Author": "realstoned", "Content": "What My Project Does Shoots is essentially a \"data lake\" where you can easily store pandas dataframes, and retrieve them later or from different locations or in different tools. Shoots has a client and a server. After choosing a place to run the server, you can easily use the client to \"put\" and \"get\" dataframes. Shoots supports SQL, allowing you to put very large dataframes, and then use a query to only get a subset. Shoots also allows you to resample on the server. # put a dataframe, uploads it to the server  \ndf = pd.read\\_csv('sensor\\_data.csv')  \nshoots.put(\"sensor\\_data\", dataframe=df, mode=PutMode.REPLACE)  \n\n\n# retrieve the whole data frame  \ndf0 = shoots.get(\"sensor\\_data\")  \nprint(df0)  \n\n# or use sql to retrieve just some of the data  \nsql = 'select \"Sensor\\_1\" from sensor\\_data where \"Sensor\\_2\" < .2'  \ndf1 = shoots.get(\"sensor\\_data\", sql=sql)"},
{"Title": "Introducing Notolog: Python Markdown Editor built with PySide6", "Author": "devotaku", "Content": "Excited to share my personal open-source project: Notolog - Python Markdown Editor (MIT License). The main motivation for developing another markdown editor was my passion for learning new things and enhancing my development skills in Python. I developed it in my spare time over a few months, despite having no prior experience in creating full-scale Python applications. What My Project Does ∗ Multiplatform ∗ Markdown async syntax highlighting created by me ∗ Several pre-installed color themes ∗ Supports English and 17 other languages right out of the box ∗ Integration with OpenAI API for AI-assisted features"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I've developed a library for send metrics to zabbix asynchronously", "Author": "Royal_Section4889", "Content": "I have been using zabbix for monitoring a lot of metrics in my work, none of the most popular zabbix were capable of doing async tasks, so I've developed some simple package capable of doing this. Tests, examples and how-tos can be found here: https://github.com/gustavofbreunig/zabbix-sender-async What My Project Does Send zabbix sender messages using asyncio tasks. Target Audience SysAdmins who use Zabbix to monitor a large number of metrics. Comparison Instead of doing traditional way, using these abandoned library: https://github.com/adubkov/py-zabbix"},
{"Title": "I made a Python text to speech library - Pyt2s", "Author": "asksumanth", "Content": "What my project does: It supports services like IBM Watson, Acapela and Stream labs' demo websites to convert your text to speech. Target audience: It's a toy project and would not recommend you to use in Production. Comparison: It's wayyyyy easy to use. Just pip install and use in your project. No extra setup required like other libraries. Also supports various languages and voices and accents. Check docs for more. Here is the link to repository. Please go do check it out and star it if it's helpful to you guys. Thank you. I made this library taking inspiration from this php tts library by chrisjp."},
{"Title": "Interactive plots in the terminal", "Author": "Spiffidimus", "Content": "I made a library to create interactive plots in the terminal (pip install itrm). It uses braille characters (by default) to display the data with sub-character resolution. There are several keybindings for moving a vertical cursor left and right, for zooming in or out on data, and for changing which curve to focus on. There are occasions (such as when working with a server) where MatPlotLib is not an option and the terminal is the only available tool. But, in my opinion, it is actually faster to use this tool (itrm) to zoom in on interesting parts of data and analyze patterns than using other tools like MatPlotLib. In fact, with large data sets (~1 million points), this tool actually renders faster than MatPlotLib. Please check it out and let know what you think."},
{"Title": "Hi! I've published a Python client for IBKR REST and WebSocket APIs - IBind. Hope you like it 👋", "Author": "VoyZan", "Content": "Hi! I want to share a library I've built recently. IBind is a REST and WebSocket Python client for Interactive Brokers Client Portal Web API. It is directed at IBKR users. You can find IBind on GitHub: https://github.com/Voyz/ibind What My Project Does: It is a REST and WebSocket API for the Interactive Brokers' Web API. I'm particularly proud of a few things in this release:\nThe REST and WebSocket API clients are based on an abstract base class RestClient and WsClient accordingly. These could be implemented to use some other Web APIs in a relatively straightforward way. I have in fact used a version of that for a cryptocurrency WebSocket API, and it is nice to see it adapt to a different environment."},
{"Title": "Python Streamlit Spotlight Tutorial: an Interactive Dashboard using UNHCR Refugee Data", "Author": "jgloewen", "Content": "Python Streamlit is a terrific tool for creating interactive data visualizations. It packages all your visualizations up into a neat little application - including charts and maps - and displays them in your default browser. No muss, no fuss. Recently, I found a new dataset (to me) on the UN High Commission for Refugees (UNHCR) website. It contains country-to-country movements for refugees both from origin country and country of asylum Using this dataset, here's a step-by-step on how to code a Python Streamlit application that has:"},
{"Title": "IP subnet or IP calculator tool need feedback", "Author": "nicanorflavier", "Content": "Hey folks, I've been dabbling with a Python project recently that's all about making life easier for us I.T. people. It's a nifty little tool that calculates IP subnets and does IP calculations from the command or CLI. Here's the GitHub link and the code: https://github.com/nicanorflavier/ipnet I’m pretty stoked about it, but I know there’s always room for improvement. So, I thought, better to turn to than the wise minds of this python community? I’m all ears for any feedback, tips, tricks, or advice you guys might have. Thanks a ton in advance!"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Pre-commit hook to keep coverage badge in README up to date", "Author": "60percentcocoa", "Content": "Wrote this as a tool to keep README coverage badges up to date without relying on 3rd party services or having to do anything extra, thought others might get some utility out of it: coverage-pre-commit. A .coverage file is expected at the root of the project, generated by running coverage run directly or using a plugin such as pytest-cov when running tests. Most convenient when used as a pre-push hook imo. Feel free to opine, be it positive or negative!"},
{"Title": "PyWolt: Wolt food delivery service API wrapper", "Author": "daivushe1", "Content": "I'm thrilled to share my first open-source project with you all: PyWolt! 🎉 PyWolt is a Python library that makes it super easy to interact with the Wolt API.\nWhat My Project Does:\nDiscover Venues: Find nearby spots to grab a bite.\nExplore Menus: Dive into a venue's menu and pick your favorites.\nTarget Audience:"},
{"Title": "Share Proejct: NLLB-200 Distill 350M en-ko", "Author": "SaeChan5", "Content": "Hello , I'm excited to share a project that was initially intended to use in my graduating product(Capstone) What My Proeject Does I made NLLB-200 Distill 350M model to translating English to Korean Target Audience GPU servers are quite expensive, so I made it for university students who can't cost the server (like me.) Comparison It's even smaller and faster the other NLLB-200 model. so it can be run with CPU! more details are in my page If you know Korean, please give me a lot of feedback https://github.com/newfull5/NLLB-200-Distilled-350M-en-ko thank you!!"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ASCII plot backend package for matplotlib", "Author": "jetpack_away", "Content": "Hi I've made a package called mpl_ascii which is a backend for matplotlib. You can find it here: https://github.com/chriscave/mpl_ascii I would love to share it with others and see what you guys think What it is It is a backend for matplotlib that converts your plots into ASCII characters. At the moment I have only made support for: bar charts, scatter plots and line plots but if there's demand for more then I would love to keep working on it. Target Audience: Anyone using matplotlib to create plots who might also want to track how their plots change with their codebase (i.e. version control)."},
{"Title": "I made a React-like web framework for Python 👋", "Author": "Rawing7", "Content": "I'm Paul, one of the creators of Rio. Over the years I've tried many different established python GUI frameworks, but none of them really satisfied me. So I teamed up with a few like minded developers and spent the last few months to create our own framework. Rio is the result of this effort. What My Project Does Rio is a brand new GUI framework that lets you create modern web apps in just a few lines of Python. Our goal is to simplify web and app development, so you can focus on the things you care about, instead of wasting countless hours on frustrating user interface details. We do this by following the core principles of Python that we all know and love. Python is supposed to be simple and compact - and so is Rio. There is no need to learn any additional languages such as HTML, CSS or JavaScript, because all of the UI, Logic, Components and even layouting is done entirely in Python. There’s not even a distinction between front-end and back-end. Rio handles all of the communication transparently for you."},
{"Title": "The new REPL in Python 3.13.0 beta 1", "Author": "treyhunner", "Content": "Python 3.13.0 beta 1 was released today. The feature I'm most excited about is the new Python REPL. Here's a summary of my favorite features in the new REPL along with animated gifs. The TLDR:\nSupport for block-leveling history and block-level editing\nPasting code (even with blank lines within it) works as expected now\nTyping exit will exit (no more Use exit() or Ctrl-D (i.e. EOF) to exit message)"},
{"Title": "Cross platform python3 shebang", "Author": "tedkotz", "Content": "There is no shebang line that actually works across platforms for python 3. I would like one that works on unmodified :\nDebian shell (Dropped python2, falls under PEP 394)\nOlder Linux shells that still have python pointing to python2 (PEP 394)\nWindows cmd.exe shell (this really just means one that will work with PEP 397)\nGitbash for Windows (sort of a weird half sibling that respects shebangs)"},
{"Title": "Calculating Virtual Cycling Power With Python", "Author": "TokenChingy", "Content": "I was doing some light reading and stumbled across Steve Gribbles Power vs Speed Calculator and thought I'd give it a go at rebuilding it based on his Physics model using Python. Then I wrote an article about. Thought I'd share it with you all: Calculating Virtual Cycling Power (jasonlei.com)"},
{"Title": "American Airlines scraper made in Python with only http requests", "Author": "JohnBalvin", "Content": "Hello wonderful community, Today I'll present to you pyaair, a scraper made pure on Python https://github.com/johnbalvin/pyaair Easy instalation ` ` `pip install pyaair ` ` ` Easy Usage ` ` ` airports=pyaair.airports(\"miami\",\"\") ` ` ` Always remember, only use selenium, puppeteer, playwright etc when it's strictly necesary Let me know what you think, thanks About me: I'm full stack developer specialized on web scraping and backend, with 6-7 years of experience"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Python app that turns your Figma design into code", "Author": "axorax", "Content": "Link: https://github.com/Axorax/tkforge Hey, my name is Axorax. I have been programming for a few years now. I started making a lot more projects in Python recently and this is one of them. I decided to call the project TkForge. What My Project Does TkForge allows you to turn your Figma design into code. So, you can make the UI for an app in Figma and add input fields, buttons and much more and name them properly then you can run TkForge to convert your Figma design into code. The names need to be the element that you want. For example; if you want a button element then you can name it \"button\" or \"button Hello World!\". The \"Hello World!\" portion will just get ignored. All of the text after the first space is ignored. However, for some elements, they matter. Like, if you want a textbox element with the placeholder text of \"Hello\" then you need to name it \"textbox Hello\"."},
{"Title": "Python Test 220: Getting the most out of PyCon, including juggling - Rob Ludwick", "Author": "variedthoughts", "Content": "Listen at https://podcast.pythontest.com/episodes/220-juggling-pycon\nEven if you never get a chance to go to PyCon, I hope this interview helps you get a feel for the welcoming aspect of the Python community. The juggling at PyCon is one of the inspirations for PythonPeople.fm, one of PythonTests's sibling podcasts. Do you have any conference tips to add?"},
{"Title": "InterProcessPyObjects: Fast IPC for Sharing and Modifying Objects Across Processes", "Author": "FI_Mihej", "Content": "InterProcessPyObjects Python package\ngithub.com/FI-Mihej/InterProcessPyObjects If you like the project, consider giving it a star on GitHub to show your support and help further development. :) pypi.org/project/InterProcessPyObjects\nWhat My Project Does\nInterProcessPyObjects is a part of the Cengal library. If you have any questions or would like to participate in discussions, feel free to join the . Your support and involvement are greatly appreciated as Cengal evolves."},
{"Title": "Suggestions for python libraries to contribute to", "Author": "JimJimBerry", "Content": "Hey, python folks ! I have been coding in python for around 3 years, 2 years professionally. I have worked with asyncio, typing and other stuff that is needed to build a server. I was looking for a small but impactful enough open source core python library/application to work on. I tried cpython but it seems to be beyond my capability at the moment. As for my interests I was interested in lower level stuff as well as libraries like asyncio and celery. Any suggestions for libraries that could use a bit of help and teach me some stuff as well would be appreciated"},
{"Title": "milkcow - First package/library", "Author": "Samuel_G_Reynoso", "Content": "Excited to share milkcow, my first python package. I'd love any feedback, and to continue to build out the parts of this package that show potential. https://pypi.org/project/milkcow/ https://github.com/SamReynoso/milkcow What MilkCow Does Milkcow automates database creation and offers in-memory key-value mapping for data handling. Whether you're building middleware, local storage, or multiprocessing scripts. Target Audience MilkCow is designed for developers looking to streamline the development process. It caters to those who want to simplify data."},
{"Title": "AzuracastPy: An Unofficial Python Wrapper for the Azuracast API.", "Author": "ARandomBoiIsMe", "Content": "Source code What My Project Does: It acts as a wrapper for the AzuraCast API, providing custom functions and classes for more straightforward use of the API in python projects. Target Audience: Python users who are interested in programmatically interacting with online radios hosted on AzuraCast. Comparison: The idea of API Wrappers is not new. However, I noticed that the only existing wrapper for this API is written in PHP, which I am not experienced with. I created this project so I, and other python programmers by extension, could have an easier time working with the API."},
{"Title": "Python Quality Standards", "Author": "nicomarcan", "Content": "Hey, happy Friday (don't push to prod). Me and some friends are building a no-code platform to run code improvement agents (really in BETA) . We want to have a quality agent for each language, and I would really appreciate your feedback on python best practices and standards. The agents are created by defining the steps that you want to apply in natural language. Right now our Python agent has the following steps:\nUse descriptive naming for functions and variables."},
{"Title": "diskcache: This key-value store library is faster than Redis and Memcached 😮 (built by Grant Jenks)", "Author": "RevolutionaryPen4661", "Content": "PYPI (From the README, Released Last Year, Edited by Grammarly) Github pip install diskcache The cloud-based computing of 2024 puts a premium on memory. Gigabytes of space are left on disks as processes vie for memory. Memcached (and sometimes Redis) is used as a cache among these processes. Wouldn’t it be nice to leverage empty disk space for caching? Django is Python’s most popular web framework and has several caching backends. Unfortunately, the file-based cache in Django is essentially broken. The culling method is random and large caches repeatedly scan a cache directory which slows linearly with growth. Can you allow it to take sixty milliseconds to store a key in a cache with a thousand items?"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Who is using quart framework for microservices?", "Author": "Dry_Raspberry4514", "Content": "I am using quart framework (https://quart.palletsprojects.com) for a number of microservices in a SaaS application. However, I hardly hear anything about this framework on any social media platform which seems to be dominated by FastAPI. Also I'm unable to find which all projects/companies are using this framework. All this is leading to anxiety around the future of this project. Are there any well known projects / companies which are using this framework for microservices?"},
{"Title": "How To Build a Social Media Sentiment Analysis Pipeline With FastAPI And Generative AI", "Author": "arthurdelerue25", "Content": "Social media like Reddit, Hacker News, Twitter, etc. contain tons of genuine discussions that you might want to analyze automatically with sentiment analysis. For example you might want to monitor what people say about you, your product, your competitors, etc. I made a technical article that shows how to implement such a sentiment analysis pipeline using the following steps:\nImplement social media listening\nIntegrate the data in your system with an API webhook processed in Python/FastAPI"},
{"Title": "Why is Plotly so cumbersome to tweak?", "Author": "olive_oil_for_you", "Content": "I made this visualisation with this code. I have three questions:\nIs Plotly supposed to be this cumbersome to tweak? Would other libraries require the same amount of code to add the details I did?\nCan my code be reduced in size? Maybe it's me who is complicating things with Plotly and there are easier ways to do what I am doing.\nAny R enthusiast who can tell me how much shorter this code would look like with ggplot2? I asked ChatGPT but the result was garbage."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I connected LLM to Python runtime and generated unit-tests (OpenSource)", "Author": "Financial_Muffin396", "Content": "Hi all, I initially started this adventure by trying to automate bug fixes with the help of LLMs. However, I received feedback saying the fixes aren't always correct, leading to the question: why bother reviewing PRs that might add more issues? (It's really hard for LLMs to say \"I don't know\"). So, I decided to focus on reliability perfecting unit tests. The source code is available at: https://github.com/CaptureFlow/captureflow-py What My Project Does: It incorporates a tracer client-side Python library and a backend that accumulates such traces and is capable of proposing code improvements and generating tests for your repository. It traverses the execution graph, extracts relevant parts, enriches them with implementation data from the GitHub API, and then generates tests with the help of GPT4."},
{"Title": "Python Interview Cheat Sheet Website!", "Author": "ixatrap", "Content": "Hey everyone, I’ve recently launched a new website aimed at helping fellow programmers ace their Python interviews. It’s not just limited to Python though; it also covers essential topics like big-O notation, object-oriented programming, design patterns, and more! I’d love to hear your thoughts and feedback on the content, layout, and anything else you think could be improved. Check it out here https://hlop3z.github.io/interviews-python/ and let me know what you think. Your input is invaluable in making this resource the best it can be. Thanks in advance for your time and insights! 🚀🐍"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python Test 219: Building Django Apps & SaaS Pegasus - Cory Zue", "Author": "variedthoughts", "Content": "Listen at podcast.pythontest.com/219 When starting a SaaS project using Django, there are tons of decisions. I've asked Cory Zue, creator of SaaS Pegasus, to help me sift through some common SaaS/Django decisions."},
{"Title": "Seeking Your Input: Let's Co-Create FreeCodeCamp for python together", "Author": "globalwarming_isreal", "Content": "Hello all, This is probably my first post here. I usuallly lurk around here and Django subreddits. I've been brewing up an idea and I need your input before I take the plunge! Picture this: a website like FreeCodeCamp but for python and related technologies, a learning oasis where anyone can kickstart their journey from Python newbie to job-ready pro, and it's all free! But here's the thing, I want this to be our platform, crafted with your needs and dreams in mind. So, before I start, I need to know: would this be something that gets you excited? Imagine quizzes helping you find your starting point, interactive challenges that keep you in the zone, and a supportive community to cheer you on every step of the way. Plus, videos, written tutorials, and a progress tracker to keep you motivated!"},
{"Title": "🔭 OpenTelemetry Architecture: Python SDK Overview", "Author": "roma-glushko", "Content": "Hey folks,\nI have just posted an article for those who want to go a little bit beyond the basic usage of OTEL and understand how it works under the hood. The post quickly touches on:\n- 🔭 History and the idea of OpenTelemetry\n- 🧵 Distributed traces & spans. How span collection happens on the service side\n- 💼 Baggage & trace ctx propagation\n- 📈 Metrics collection. Views & aggregations. Metrics readers\n- 📑 OTEL Logging integration\n- 🤝 Semantic conventions and why that is important\nBlog Post:\nLet me know what do you think and hope this is helpful for someone 🙌"},
{"Title": "Tutorial on Creating Useful Data Visuals with Python seaborn and matplotlib libraries", "Author": "jgloewen", "Content": "With the current global deluge of data and information, there has never been a more important to visualize your data in a clear and simple manner. Python is a terrific tool to help us do this. The key to this lies in choosing the the right data visualization techniques to tell the most interesting and relevant story. Three useful visuals are:\nsmall multiples\nheat maps"},
{"Title": "How to create a Discord Bot to launch a Minecraft server automatically", "Author": "chadicus-gigo", "Content": "Hi y'all, This might be off topic a bit from the normal stuff that gets posted here, but a while back I was messing around on a Minecraft server that I was hosting on Aternos (a free online Minecraft server host). Now since the server wasn't running on my computer (and since Aternos has a timeout policy to save server resources) it became annoying for my buddies to hop on the server if I was busy. They'd have to ask me to manually start the server from the webpage. So I had a free Saturday a couple of months ago and decided to remedy this problem. My source code is hosted on a GIGO Dev environment if y'all wanna check it out:"},
{"Title": "Rethinking String Encoding: a 37.5% space efficient string encoding than UTF-8 in Apache Fury", "Author": "Shawn-Yang25", "Content": "In rpc/serialization systems, we often need to send namespace/path/filename/fieldName/packageName/moduleName/className/enumValue string between processes.\nThose strings are mostly ascii strings. In order to transfer between processes, we encode such strings using utf-8 encodings. Such encoding will take one byte for every char, which is not space efficient actually.\nIf we take a deeper look, we will found that most chars are lowercase chars, ., $ and _, which can be expressed in a much smaller range 0~32. But one byte can represent range 0~255, the significant bits are wasted, and this cost is not ignorable. In a dynamic serialization framework, such meta will take considerable cost compared to actual data.\nSo we proposed a new string encoding which we called meta string encoding in Fury. It will encode most chars using 5 bits instead of 8 bits in utf-8 encoding, which can bring 37.5% space cost savings compared to utf-8 encoding.\nFor string can't be represented by 5 bits, we also proposed encoding using 6 bits which can bring 25% space cost savings"},
{"Title": "What are your favourite pre-commit hooks and why?", "Author": "LatterConcentrate6", "Content": "Just getting started with pre-commit and I think it's awesome. Looking to find out what other code automation tools people are using. Let me know what works for you and why. Thanks!"},
{"Title": "Python script to convert Spotify Artists to Playlists", "Author": "RJW-20", "Content": "I've made my first bit of useful software and I wanted to share it here. I'd love some feedback (and it would be amazing to hear if someone has used it!) What My Project Does: Using the third party requests package, the script interacts with the Spotify web API to request all albums from the given Artist, then all the tracks from all of those albums. It then goes through the list to remove any duplicates and also tries to remove any unwanted versions (only done by examining the name of the track, since Spotify does not attribute a version type to its tracks). Once that's done a playlist is then created on your Spotify account with the name of the Artist and all the tracks are posted there in chronological (essentially per album) order."},
{"Title": "Project: Simple Interactive Python Streamlit Maps With NASA GIS Data", "Author": "jgloewen", "Content": "Python Streamlit is terrific for putting together interactive dashboards. Combined with the geopandas library, streamlit can easily display GIS data points on a map for you. Forest fires in my home province of British Columbia, Canada have been really bad recently. NASA has a terrific dataset that keeps track of forest fires by country. Can I use Streamlit to access this dataset and display a map off all the fires within a certain area (BC) for a particular time frame (2021)? And can I give the user the ability to choose a month? You bet! Let me step you through how! FREE tutorial (with code):"},
{"Title": "List of Sites that Packages Need to Connect to?", "Author": "BullCityPicker", "Content": "I'm doing most of my work behind a government firewall, and I'm having trouble connecting to certain sites. I can do the usual \"pip\" installs just fine, but I'm talking about packages that need to download data to do their job. An example is the NLTK (Natural Language Toolkit) package, which downloads dictionaries, lookup tables for sentiment analysis, and so on. I know what sites to open up for that particular problem (pastebin.com and nltk.org), but I wonder if anybody's made a list of such sites for different packages. I can ask for the two sites I know about to be opened up, but I'd like to have a more comprehensive list so I don't have to go through the red tape multiple times."},
{"Title": "Sensor-App: A Sensor Data Displaying/Streaming Android App written in Python", "Author": "StoneSteel_1", "Content": "Sensor-App is an Android App that's main focus is to help create a real-time mobile sensor data stream for computer applications, data collection, AR, VR, etc. Github: SensorApp\nFeatures of Sensor-App\nReal-Time Sensor Data display\nFaster Real-Time Sensor Data Streaming via TCP Sockets\nSimple and Easy setup of Data Streaming Server"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "UXsim 1.2.0 released with support for (self-driving) taxis and shared mobility", "Author": "Balance-", "Content": "Version 1.2.0 of UXsim is released, which allows simulating taxis, shared mobility and self-driving taxis! Main Changes in 1.2.0\nAdd taxi (aka. shared mobility) functions\nA standard vehicle in UXsim just travel from A to B and disappear. This is like a private owned vehicle.\nFrom this update, a Vehicle with mode=\"taxi\" behave like a taxi. Specifically, they travel through a network by passing through specific nodes that are dynamically updated, simulating passenger pickup and drop-off."},
{"Title": "New book! The Quick Python Book, Fourth Edition by Naomi Ceder", "Author": "ManningBooks", "Content": "Hello everybody, Thank you for having us here, and a huge \"Thank you\" to the moderators for letting us post. We have just released the latest edition of The Quick Python Book by the one-and-only Naomi Ceder, and I wanted to share that news with the community. Many of you are already familiar with Naomi's work and her massive contributions to the world of Python programming language. The Quick Python Book has aided over 100,000 developers in mastering Python. The Fourth Edition of the book has been revised to include the latest features, control structures, and libraries of Python, along with new coverage of working with AI-generated Python code. Naomi, the author, has beautifully balanced the details of the language with the insights and advice required to accomplish any task. Her personal touch has made learning Python an enjoyable experience for countless developers."},
{"Title": "Pip 24.1 beta released, and it's a big one", "Author": "zurtex", "Content": "I'd like to call attention to pip 24.1 beta asit is unusual for the pip team to release betas:\nhttps://pip.pypa.io/en/latest/news/#b1-2024-05-06\nhttps://pypi.org/project/pip/24.1b1/\nYou can install with: python -m pip install pip==24.1b1 In particular they have upgraded their vendored version of packaging from 21.3 to 24.0, this was a and , included significant performance improvements, and will allow pip to support . However, it also means legacy versions and specifiers are with pip."},
{"Title": "typedattr: Autocompletion and typechecking for CLI script arguments, using standard argparse syntax", "Author": "gings7", "Content": "Excited to share my pypi package typedparser I have been working on for around 1 year now. What My Project Does: It enables writing CLI scripts and create an \"args\" variable with autocompleted members and type checks, but still keeps the simple and universally understood syntax of the stdlib argarse module. Target Audience: For stability, I battletested it in my research projects and added automatic builds as well as 80%+ test coverage. So I believe it is pretty stable. Comparison: For typing functionality it uses the attrs package as backend. It also provides some additional features for object and dictionary manipulation. Of course there are many other CLI argument packages out there, but this one stands out in that it tries to keep the syntax of the argparse standard library as much as possible, making it easy for others to figure out what your script does. Check it out and let me know what you think."},
{"Title": "Best way to grade Jupyter-Notebooks?", "Author": "flying_Wahale", "Content": "I recently took a job with a professor, that includes helping with the grading of biweekly assignments. So I basically have now 30 Notebooks that I have to grade. Top of my head I can think of these approaches:\nConvert to PDF and write into the PDF\nDuplicate the Notebook and write the comments in extra blocks\nCreate a .txt file with all my note"},
{"Title": "How Python Asyncio Works: Recreating it from Scratch", "Author": "jpjacobpadilla", "Content": "Do you understand how asyncio works behind the scenes? Read this article and see how you can use Python generators to create your own version of asyncio, and then use the __await__ dunder method to use the async/await keywords to come full circle! https://jacobpadilla.com/articles/recreating-asyncio"},
{"Title": "What is your best Tkinter project that you put a lot of effort into creating?", "Author": "_-Dan_-", "Content": "I want to hear your description of the project you are most proud of. I was just trying to find something on the Internet, but I didn't find much of interest. The only difficult project was CustomTkinter, which, as far as I know, was done entirely in Tkinter. Since it is possible to create something this complex, I'm sure you have something cool too.\nNote: I am expecting to hear projects more complex than a calculator :)"},
{"Title": "Dash vs Reflex vs Others", "Author": "Sea_Split_1182", "Content": "Where can I find a decent comparison (pros and cons) of these 5 solutions? They seem to be solving the same problem, which is, afaiu, separating the frontend ‘annoyance’ from Python scripting / math.\n⁠Reflex (used to be called Pynecone) https://reflex.dev\n⁠Streamlit https://streamlit.io\n⁠Gradio https://gradio.app\n⁠Dash https://dash.plotly.com"},
{"Title": "Build tool support for PySide / PyQt", "Author": "jmacey", "Content": "Just interested in how people approach this, typically I just use VSCode or QtCreator to build simple projects. However I now want to automate some of the build process such as running uic, and rcc. I've tried to use CMake but can't seem to get it to work without a lot of custom scripting (for example the AUTOUIC etc functions need c++ projects), can't see any info on running uic in QtCreator (which would be ideal but python support is really just an after thought). I could write some Makefiles but this is a little ad-hoc and also confuses the IDE's (and at the end of the day I want a simple process for my students to use and I already teach cmake for C++ dev)."},
{"Title": "I made a python package that can parse Excel Formula Strings into dictionary structures!", "Author": "MPGaming9000", "Content": "What my project does: It basically takes a formula string like you'd get from Openpyxl like \"=SUM(A1:B2)\" and breaks it all out into a dictionary structure for you to then navigate through, modify, and then reformat that modified structure back into an excel friendly formula string again! Target Audience: (People who modify Excel formula strings in automated spreadsheet modification scripts. Or people who need to analyze formulas in a spreadsheet to do some kind of logic based on that analysis). Disclaimer: For most people some simple regex pattern matching and str replaces would be fine to modify formulas but if you need a more structured approach to working with these strings, this package has you covered!"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "relax-py - Web framework for htmx with hot module replacement", "Author": "MindLopsided4430", "Content": "Excited to finally showcase this! It's still pretty rough around the edges, but I'm finally happy enough with the feature set and curious to see what the community thinks about a framework like this. Code: github.com/crpier/relax-py Documentation: crpier.github.io/relax-py What My Project Does relax-py is a Python framework for building full-stack applications with htmx It provides tools for writing HTML in a manner similar to simple_html (which also inspired the decision to use standard Python to write HTML, rather than use Jinja2 or to make something like templ work in Python) It has:"},
{"Title": "Hatch v1.10.0 - UV support, new test command and built-in script runner", "Author": "Ofekmeister", "Content": "Hello everyone! I'd like to announce version 1.10.0: https://hatch.pypa.io/latest/blog/2024/05/02/hatch-v1100/ Feel free to provide any feedback either here or as a discussion on the repo: https://github.com/pypa/hatch"},
{"Title": "Zillow scraper made pure in Python", "Author": "JohnBalvin", "Content": "Hello everyone., on today new scraper I created the python version for the zillow scraper. https://github.com/johnbalvin/pyzill What My Project Does The library will get zillow listings and details.\nI didn't created a defined structured like on the Go version just because it's not as easy to maintain this kind of projects on python like on Go.\nIt is made on pure python with HTTP requests, so no selenium, puppeteer, playwright etc. or none of those automation libraries that I hate."},
{"Title": "python-oracledb 2.2 and the VECTOR type in Oracle Database 23ai", "Author": "cjbj", "Content": "python-oracledb 2.2, the Oracle Database driver, has been released with support for Oracle Database 23ai features such as the VECTOR and BOOLEAN data types, Implicit Connection Pooling, and improved connection performance. See the release announcement."},
{"Title": "What does your python development setup look like?", "Author": "Working_Noise_6043", "Content": "I'd like to explore other people's setup and perhaps try need things or extra tools. What kind IDE, any extra tools to make it easier for you, etc. Looking forward to everyone's responses!"},
{"Title": "Created Netlify DNS Manager: CLI Tool for uploading zone Files to Netlify or exporting Netlify DNS", "Author": "snorkell_", "Content": "What My Project Does? Command-line tool to simplify the management of DNS records for domains hosted on Netlify, whether you want to migrate to Netlify or migrate away from Netlify.\nImport Zone File from Godaddy, NameCheap or others to Netlify - helpful in migrating nameservers.\nExport DNS records from Netlify as zonefile to be import it to Godaddy, Namecheap or other servers."},
{"Title": "I've started writing Python bindings for lexertl", "Author": "BenHanson", "Content": "See https://github.com/BenHanson/pylexertl I will see about registering as an official library when I am happy I have completed all the bindings. I added all the missing functions for the rules objects today, so things are in reasonable shape already. My python experience has been limited up until now, but it is big for my new role. I have a runtime parser generator https://github.com/BenHanson/parsertl17 which I also plan to add bindings for. I hope this is of interest to somebody! What My Project Does Allows you to build lexical analysers at runtime and use them to lex text (in this case utf-8)"},
{"Title": "Tutorial on Building a Server-to-Server Zoom App with Python", "Author": "SleekEagle", "Content": "I made a tutorial on how to build a server-to-server Zoom OAuth application using Python. This application can transcribe Zoom meeting recordings, print the transcripts to the terminal, and save the transcripts as text files.\nvideo tutorial\nrepo\nwritten tutorial"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Multipart File Uploads to S3 with Python", "Author": "tylersavery", "Content": "I created this tutorial after overcoming a difficult challenge myself: uploading 5GB+ files to AWS. This approach allows the browser to securely upload directly to an S3 bucket without the file having to travel through the backend server. The implementation is written in python (backend) and vanilla js (frontend)."},
{"Title": "Introducing PgQueuer: A Minimalist Python Job Queue Built on PostgreSQL", "Author": "GabelSnabel", "Content": "What My Project Does PgQueuer is a Python library designed to manage job queues using PostgreSQL features. It leverages PostgreSQL's native LISTEN/NOTIFY, along with advanced locking mechanisms, to handle job queues efficiently. This allows for real-time job processing, concurrency, and reliable task execution without the need for a separate queuing system. Target Audience PgQueuer is ideal for developers and teams who already use PostgreSQL in their projects and are looking for a simple, integrated way to handle background tasks and job queues. It's designed for production use, offering a dependable solution that scales seamlessly with existing PostgreSQL databases."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Suggestions for a self-hosted authentication as a service?", "Author": "FlyingRaijinEX", "Content": "I have a simple backend REST API service that is serving a few ML models. I have made it \"secured\" by implementing an API key in order call those endpoints. I was wondering, how common it is for people to use services that can be self-hosted as their authentication/authorization. If it is common and reliable, what are the best options to go for? I've read that building your own authentication/authorization service with email verification, password reset, and social auth can be a pain. Also, did some googling and found this General - Fief. Has anyone ever tried using this? If so, how was the experience?"},
{"Title": "Reboot Your Router with a Python Script", "Author": "SAV_NC", "Content": "Hello r/python, I've developed a Python script that allows you to reboot your router remotely via SSH! This script handles the countdown and checks when the router is back online after a reboot. What My Project Does: Key Features:\nAutomated Router Reboot: Remotely trigger a reboot of your router.\nMonitoring: After sending the reboot command, the script counts down from 350 seconds and starts checking the router's status by pinging it after the first 100 seconds have passed."},
{"Title": "One pytest marker to track the performance of your tests", "Author": "toodarktoshine", "Content": "Hello Pythonistas!\nI just wrote a blog post about measuring performance inside pytest test cases. We dive into why it’s important to test for performance and how to integrate the measurements in the CI.\nHere is the link to the blog: https://codspeed.io/blog/one-pytest-marker-to-track-the-performance-of-your-tests"},
{"Title": "Opinions sought: Modernising the Apache NiFi Python client", "Author": "Samausi", "Content": "Hello folks, I am the author of NiPyAPI, the defacto Python client for the Apache NiFi project. For those unfamiliar, Apache NiFi is an open-source ETL tool designed around the flow-based programming paradigm. It excels at continuously moving and managing arbitrary data flows between disparate systems with low latency at large scale, and is often contrasted with Airflow. Amongst many features, NiFi allows for Command & Control via a native UI, enabling live edits to data routing and transformation. NiFi also enforces an API-first approach, and produces a swagger definition during code compilation, which allowed creation of a Python client to enable automated Data Flow testing and a Design & Deploy approach by running it through tool shaped by mustache templates. This produces a verbose low-level client, which I then leverage in higher-level operational functions and demo scripts in the library."},
{"Title": "How to create architecture diagrams from code in Jupyter Notebook", "Author": "writer_on_rails", "Content": "Hello world,I wrote an article about creating diagrams from code on Jupyter Notebook inside VS Code. It will give you a brief on the setup and also an overview of concepts. Within 5 minutes, you should be able to start making cool architecture diagrams. [TO MODERATOR: This link does not contain any paywalled or paid content. All the contents are available for free] Article link: https://ashgaikwad.substack.com/p/how-to-create-architecture-diagrams"},
{"Title": "Starter Code for a LLM-based AI Assistant", "Author": "2bytesgoat", "Content": "Hey everyone 👋 TL;DR\nSince everyone is talking about the Humane AI Pin and the Rabbit R1, I decided to make a short 5 minute tutorial on how people can setup and customize their own little AI assistant on their machine. I've uploaded a video tutorial here: https://www.youtube.com/watch?v=2fD_SAouoOs&ab_channel=2BytesGoat And the Github code is here: https://github.com/2BYTESGOAT/AI-ASSISTANT Longer version"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "How to auto-instrument Python servers w/ OpenTelemetry for performance & error monitoring", "Author": "__boba__", "Content": "Hi everyone! We've recently written up a guide for anyone running a Python server (ex. Flask, Django, FastAPI) to instrument their app to debug slow downs and errors using the CNCF OpenTelemetry project and their Python instrumentation package. It's really straightforward to get started with just a few lines of added code and commands to any Python project, so hopefully helps some people out as they're looking to add better instrumentation to their servers. Here's the tutorial: https://www.hyperdx.io/blog/opentelemetry-python-server-auto-instrumentation"},
{"Title": "k8sAI - my open-source GPT CLI tool for Kubernetes!", "Author": "Wild_Plantain528", "Content": "What my project does: I wanted to share an open-source project I’ve been working on called k8sAI. It’s a personal AI Kubernetes expert that can answer questions about your cluster, suggests commands, and even executes relevant kubectl commands to help diagnose and suggest fixes to your cluster, all in the CLI! Target Audience: As a relative newcomer to k8s, this tool has really streamlined my workflow. I can ask questions about my cluster, k8sAI will run kubectl commands to gather info, and then answer those question. It’s also found several issues in my cluster for me - all I’ve had to do is point it in the right direction. I’ve really enjoyed making and using this so I thought it could be useful for others. Added bonus is that you don’t need to copy and paste into ChatGPT anymore!"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PkgInspect - Inspect Local/External Python Packages", "Author": "yousefabuz", "Content": "GitHub\nWhat My Project Does\nPkgInspect is a comprehensive tool designed to inspect and compare Python packages and Python versions effortlessly. It equips users with a comprehensive set of tools and utility classes to retrieve essential information from installed Python packages, compare versions seamlessly, and extract various details about Python installations with ease."},
{"Title": "2,000 free sign ups available for the \"Automate the Boring Stuff with Python\" online course. (May 20", "Author": "AlSweigart", "Content": "If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): *The sign ups are all used up, but you can still watch all the videos for free. Read below! https://udemy.com/course/automate/?couponCode=MAY2024FREE https://udemy.com/course/automate/?couponCode=MAY2024FREE2 If you are reading this after the sign ups are used up, you can always find the first 15 of the course's 50 videos are free on YouTube if you want to preview them. YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have \"preview\" turned on. Scroll down to find and click \"Expand All Sections\" and then click the preview link. You won't have access to the forums and other materials, but you can watch the videos."},
{"Title": "Best book for GUI development in Python", "Author": "Bekhyam", "Content": "Can you guys suggest some very good book for GUI development in Python? I'm currently working on a visualizer that needs many features to plot data on a 3D and 2D space. Using PyQt for this as it has threading support."},
{"Title": "Py2wasm: A Python to Wasm compiler 3x faster than pyiodide", "Author": "desmoulinmichel", "Content": "Take the excellent nuitka, compile python code to C, turn it into web assembly, and you got Python in the browser, without the usual runtime overhead:\nhttps://wasmer.io/posts/py2wasm-a-python-to-wasm-compiler While the doc states you can get this effect by doing: pip install py2wasm\npy2wasm myprogram.py -o myprogram.wasm"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Runtime type checking performance", "Author": "gerardwx", "Content": "I'm trying to decide whether to use typeguard or stick to assert isinstance in the places where I care. Has anyone done benchmarking testing of the overhead of using type guards \"at\"typeguard decorator ?"},
{"Title": "pwdgen v2 -a simple password generator", "Author": "RRTheGuy", "Content": "https://github.com/RadoTheProgrammer/pwdgen\nWhat my project does\nMy project generate simple, strong, memorable and easy-to-type passwords. The system is simple: it generate 2 pronounceable words separated by a special char, with a number at start or end. I tried creating a password generator that combines simplicity, security, memorability, and ease of type. This should be secure enough because it can generate 4e15 possibilities of passwords and uses the module."},
{"Title": "I analyzed & visualized 7 years of music royalties with polars & Vega-Altair. Code in article", "Author": "fjogurpiano", "Content": "Hi all, I used polars (a Rust-powered “Blazingly Fast DataFrame Library”) to analyze seven years of my own music royalties data. Vega-Altair (Python wrapper for Vega-Lite) powers the (often interactive) visualizations. Link to the article: https://osc.garden/blog/data-analysis-music-streaming/ It was a lot of fun learning polars and setting up the graphs with Vega-Altair. Would love to hear any comments and suggestions. Link to r/dataisbeautiful post: https://www.reddit.com/r/dataisbeautiful/comments/1ca7x6z/oc_my_music_needs_more_than_200k_plays_on/"},
{"Title": "Calculating Virtual Cycling Power With Python", "Author": "TokenChingy", "Content": "I was doing some light reading and stumbled across Steve Gribbles Power vs Speed Calculator and thought I'd give it a go at rebuilding it based on his Physics model using Python. Then I wrote an article about. Thought I'd share it with you all: Calculating Virtual Cycling Power (jasonlei.com)"},
{"Title": "find_where - my first Python package published to PyPi", "Author": "dan_ohn", "Content": "PyPi\nSource What My Project Does\nfind_where is a Python package that provides a function to find values in dictionaries where a specified key matches a given value, similar to filtering in SQL. Target Audience\nThis is my first attempt at creating a Python package so I would describe this as a toy project at this stage but am definitely looking for feedback from the wider community. Comparison\nI mainly wrote this package because I kept on writing the same iterable based code when trying to find a value, given a key:"},
{"Title": "I now know again why I stopped using mamba / conda for setting up virtual environments", "Author": "RareRandomRedditor", "Content": "I have started at a new job and had the idea that it would probably be clever to set up my developing environment in exactly the same way as my predecessor did. Because:\nThis should help resolving errors quicker in the transition period\nHis code was good and clean and it appears that he knows what he is doing\nwe were using mostly the same tools (VScode etc.) anyways.\nHe set up his virtual environments (VE)s with conda/mamba. I vaguely remembered that I also used to do that but then stopped for some reason and switched to the virtualenv package. But I did not remember why anymore. So I just set up my VEs in the same way, it should not really make any difference anyways (so I thought). Well, fast forward about two weeks and now I have VEs that occasionally (but not always) exist twice in the same folders under the same name (according to mamba info --envs) and that are at the same time completely empty (according to mamba list) and contain all packages I have installed anywhere, ever (according to pip list). I usually install packages via pip and I assume this may have fucked things up in combination with mamba? I'll probably switch back to virtualenv again and add a \"do not use conda/mamba VEs !!!\" in my notes. I am working on Windows. Is mamba better on Linux?"},
{"Title": "InterProcessPyObjects: Fast IPC for Sharing and Modifying Objects Across Processes", "Author": "FI_Mihej", "Content": "InterProcessPyObjects Python package\ngithub.com/FI-Mihej/InterProcessPyObjects If you like the project, consider giving it a star on GitHub to show your support and help further development. :) pypi.org/project/InterProcessPyObjects\nWhat My Project Does\nInterProcessPyObjects is a part of the Cengal library. If you have any questions or would like to participate in discussions, feel free to join the . Your support and involvement are greatly appreciated as Cengal evolves."},
{"Title": "Pandas Python Introduction", "Author": "cyprusgreekstudent", "Content": "I'm sharing some of the Python tutorials I made. I teach Ukrainian teenagers and university students Python programming and data science for free. Here is an introduction to Pandas. It shows:\nHow to read data into a Pandas dataframe from a CSV file.\nShow how to print out the column names.\nSee and set the index.\nPrint sections of the dataframe."},
{"Title": "AzuracastPy: An Unofficial Python Wrapper for the Azuracast API.", "Author": "ARandomBoiIsMe", "Content": "Source code What My Project Does: It acts as a wrapper for the AzuraCast API, providing custom functions and classes for more straightforward use of the API in python projects. Target Audience: Python users who are interested in programmatically interacting with online radios hosted on AzuraCast. Comparison: The idea of API Wrappers is not new. However, I noticed that the only existing wrapper for this API is written in PHP, which I am not experienced with. I created this project so I, and other python programmers by extension, could have an easier time working with the API."},
{"Title": "Inline templating engine", "Author": "TheRealMrMatt", "Content": "I was wondering if anyone has come across anything like https://github.com/a-h/templ or https://hono.dev/guides/jsx, but for python. For context, I am familiar with jinja2, mako, etc. but find them to be unintuitive due to the loose coupling of logic (ex: database calls) and templating (ex: generating a list from the database results). Therefore, I am looking for a \"inline\" templating solution."},
{"Title": "diskcache: This key-value store library is faster than Redis and Memcached 😮 (built by Grant Jenks)", "Author": "RevolutionaryPen4661", "Content": "PYPI (From the README, Released Last Year, Edited by Grammarly) Github pip install diskcache The cloud-based computing of 2024 puts a premium on memory. Gigabytes of space are left on disks as processes vie for memory. Memcached (and sometimes Redis) is used as a cache among these processes. Wouldn’t it be nice to leverage empty disk space for caching? Django is Python’s most popular web framework and has several caching backends. Unfortunately, the file-based cache in Django is essentially broken. The culling method is random and large caches repeatedly scan a cache directory which slows linearly with growth. Can you allow it to take sixty milliseconds to store a key in a cache with a thousand items?"},
{"Title": "ConfigClass - simple dataclass inspired configuration", "Author": "TheTerrasque", "Content": "What My Project Does I'm making a simple configclass for handling configuration in smaller projects and scripts. Goal is to be as simple to start with as creating a dataclass. The module itself works off dataclass and when you use it you just define a dataclass as normal, but decorate it with @configclass() instead. Example: from configclass import configclass\n\n@configclass()\nclass Settings:\n    foo: bool = False\n    url: str = \"\"\n    footoo: bool = True\n    my_model: str = \"model.pt\"\n\nsetting = Settings.load()\n\nprint(setting.foo, setting.footoo, setting.my_model)"},
{"Title": "Who is using quart framework for microservices?", "Author": "Dry_Raspberry4514", "Content": "I am using quart framework (https://quart.palletsprojects.com) for a number of microservices in a SaaS application. However, I hardly hear anything about this framework on any social media platform which seems to be dominated by FastAPI. Also I'm unable to find which all projects/companies are using this framework. All this is leading to anxiety around the future of this project. Are there any well known projects / companies which are using this framework for microservices?"},
{"Title": "I made Cria - Run LLMs (AI) locally and programmatically with as little friction as possible", "Author": "reformedbillclinton", "Content": "https://github.com/leftmove/cria My name is Anonyo, and I am a seventeen year old from Southeast Michigan. This is my second open source project. I built Cria, a Python library that allows you to run LLMs programmatically through Python. Cria is designed so there is as little friction as possible — getting started takes just five lines of code. I created this library because I was using OpenAI in my project, and kept running into rate limits. With local LLMs getting better and better, I sought to switch, but found command line configurations to be limited. Running and configuring LLMs can be trivial, but programs like ollama make it easier. The only problem I found with ollama though, was the lack of features in its Python client."},
{"Title": "Why is Plotly so cumbersome to tweak?", "Author": "olive_oil_for_you", "Content": "I made this visualisation with this code. I have three questions:\nIs Plotly supposed to be this cumbersome to tweak? Would other libraries require the same amount of code to add the details I did?\nCan my code be reduced in size? Maybe it's me who is complicating things with Plotly and there are easier ways to do what I am doing.\nAny R enthusiast who can tell me how much shorter this code would look like with ggplot2? I asked ChatGPT but the result was garbage."},
{"Title": "[tutorial] Data imputation on real-time data source", "Author": "oli_k", "Content": "Hi there, My team at Bytewax and I have been working on a series of hands-on guides on streaming data and I am excited to share how one can handle missing values in real-time in Python. While some parts of the guide are simplified, for example, we use a random number generator as an input source, the algorithmic part is production-ready. We are taking advantage of the Numpy library + stateful operators in Bytewax. Other input sources are available, too. https://bytewax.io/guides/handling-missing-values"},
{"Title": "tach - a Python tool to enforce modular design", "Author": "the1024", "Content": "https://github.com/Never-Over/tach What My Project Does tach is a lightweight Python tool that enforces boundaries and dependencies in your Python project. Inspired by nx, tach helps you maintain a decoupled and modular Python codebase. An earlier version of this tool was called modguard, which we shared here. By default, Python allows you to import and use anything, anywhere. Over time, this results in modules that were intended to be separate getting tightly coupled together, and domain boundaries breaking down. We experienced this first-hand at a unicorn startup, where the eng team paused development for over a year in an attempt to split up packages into independent services. This attempt ultimately failed."},
{"Title": "I connected LLM to Python runtime and generated unit-tests (OpenSource)", "Author": "Financial_Muffin396", "Content": "Hi all, I initially started this adventure by trying to automate bug fixes with the help of LLMs. However, I received feedback saying the fixes aren't always correct, leading to the question: why bother reviewing PRs that might add more issues? (It's really hard for LLMs to say \"I don't know\"). So, I decided to focus on reliability perfecting unit tests. The source code is available at: https://github.com/CaptureFlow/captureflow-py What My Project Does: It incorporates a tracer client-side Python library and a backend that accumulates such traces and is capable of proposing code improvements and generating tests for your repository. It traverses the execution graph, extracts relevant parts, enriches them with implementation data from the GitHub API, and then generates tests with the help of GPT4."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Molly - a data quality monitoring library specifically designed for time series data", "Author": "flaviaouyang", "Content": "What My Project Does\nMolly is designed to monitor time series data in a SQL database such as MySQL or PostgreSQL. Currently supported data quality feature:\n- staleness: when the data was last updated\n- completeness: whether any data is missing in a given date range Currently support messaging service:\n- Slack Web API"},
{"Title": "Just an Appreciation Post for the Python Standard Library", "Author": "SpeakerOk1974", "Content": "Approaching a year into my journey of learning Python (I come from a C background) I finally understand the beauty and ubiquity of the langauge. Initially, I was hesitant to learn a dynamically typed and interpreted language when job requirements required me to learn it (I help support a team of Power Systems Engineers, and our professional software uses python for scripting). My first attempts were extremely unpythonic and it felt like I was fighting the language (index based looping, declaring variables before use, C style procedural code on top of Pandas antipatterns) and the lack of brackets I found appalling. Then I had my first code review with a helpful Senior engineer. We refactored my code together and something beautiful came together. He then told me to read the Zen of Python. It was love at first \"import this\". I was hooked. Every waking moment for weeks I was learning all I could muster about python."},
{"Title": "Seeking Your Input: Let's Co-Create FreeCodeCamp for python together", "Author": "globalwarming_isreal", "Content": "Hello all, This is probably my first post here. I usuallly lurk around here and Django subreddits. I've been brewing up an idea and I need your input before I take the plunge! Picture this: a website like FreeCodeCamp but for python and related technologies, a learning oasis where anyone can kickstart their journey from Python newbie to job-ready pro, and it's all free! But here's the thing, I want this to be our platform, crafted with your needs and dreams in mind. So, before I start, I need to know: would this be something that gets you excited? Imagine quizzes helping you find your starting point, interactive challenges that keep you in the zone, and a supportive community to cheer you on every step of the way. Plus, videos, written tutorials, and a progress tracker to keep you motivated!"},
{"Title": "What is currently the fastest/state-of-the-art ODE solver in Python?", "Author": "D_vd_P", "Content": "For my application, Scipy's solvers are not fast enough so I am looking to speed up by using another package. These are some packages I have found so far:\nNumbaLSODA\nDifferentialEquations.jl\nTorchquad\n(Although doesn't solve ODEs, just integrates quickly, but that could be wrapped I guess)"},
{"Title": "ext-message: Send files over Discord direct messages", "Author": "FeLoNy111", "Content": "Hey all! I recently made a library for sending text files over Discord DMs https://pypi.org/project/ext-message/ https://github.com/jwjeffr/ext-message/ What my project does This code is a command-line interface for sending text files to Discord DMs from a bot. Target audience My personal use-case is for my research, where I run long simulations (~72 hours) on a computing cluster. These simulations generate log files, so I can send myself the log file after the simulation, letting me: - Know that the simulation is done - Check that the simulation ran as intended without having to SSH into the cluster. As of now, those running similarly heavy code looking to be notified when it finishes is my target audience, but I would love to hear other creative use cases to expand that audience!"},
{"Title": "Tutorial on Creating Useful Data Visuals with Python seaborn and matplotlib libraries", "Author": "jgloewen", "Content": "With the current global deluge of data and information, there has never been a more important to visualize your data in a clear and simple manner. Python is a terrific tool to help us do this. The key to this lies in choosing the the right data visualization techniques to tell the most interesting and relevant story. Three useful visuals are:\nsmall multiples\nheat maps"},
{"Title": "Announcing The Python Logging Book & Course Kickstarter", "Author": "driscollis", "Content": "New developers print out strings to their terminal. It’s how we learn! But printing out to the terminal isn’t what you do with most professional applications. In those cases, you log into files. Sometimes, you log into multiple locations at once. These logs may serve as an audit trail for compliance purposes or help the engineers debug what went wrong. Python Logging teaches you how to log in the Python programming language. Python is one of the most popular programming languages in the world. Python comes with a logging module that makes logging easy."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Rethinking String Encoding: a 37.5% space efficient string encoding than UTF-8 in Apache Fury", "Author": "Shawn-Yang25", "Content": "In rpc/serialization systems, we often need to send namespace/path/filename/fieldName/packageName/moduleName/className/enumValue string between processes.\nThose strings are mostly ascii strings. In order to transfer between processes, we encode such strings using utf-8 encodings. Such encoding will take one byte for every char, which is not space efficient actually.\nIf we take a deeper look, we will found that most chars are lowercase chars, ., $ and _, which can be expressed in a much smaller range 0~32. But one byte can represent range 0~255, the significant bits are wasted, and this cost is not ignorable. In a dynamic serialization framework, such meta will take considerable cost compared to actual data.\nSo we proposed a new string encoding which we called meta string encoding in Fury. It will encode most chars using 5 bits instead of 8 bits in utf-8 encoding, which can bring 37.5% space cost savings compared to utf-8 encoding.\nFor string can't be represented by 5 bits, we also proposed encoding using 6 bits which can bring 25% space cost savings"},
{"Title": "Most-watched PyData conference & meetup talks from 2023", "Author": "ad81923", "Content": "Just came across this list and I think it's amazing: https://techtalksweekly.substack.com/p/all-pydata-2023-talks"},
{"Title": "pytest-ndb - debugging pytest tests in a notebook", "Author": "rhshadrach", "Content": "What My Project Does: Allows users to run a pytest test from a notebook or other REPL and capture local variables for inspection / debugging. While I think users should very often prefer debugging tests with a debugger, in certain situations where one deals with a nontrivial amount of data or many complex objects, being able to inspect and manipulate objects in a notebook can be helpful. Target Audience: Primarily data scientists, but more generally anyone who tests with large/complex objects that can be difficult to understand in a debugger. Comparison: I'm not aware of any alternatives, other than copy-and-pasting your pytest tests in a notebook."},
{"Title": "Python script to convert Spotify Artists to Playlists", "Author": "RJW-20", "Content": "I've made my first bit of useful software and I wanted to share it here. I'd love some feedback (and it would be amazing to hear if someone has used it!) What My Project Does: Using the third party requests package, the script interacts with the Spotify web API to request all albums from the given Artist, then all the tracks from all of those albums. It then goes through the list to remove any duplicates and also tries to remove any unwanted versions (only done by examining the name of the track, since Spotify does not attribute a version type to its tracks). Once that's done a playlist is then created on your Spotify account with the name of the Artist and all the tracks are posted there in chronological (essentially per album) order."},
{"Title": "Is Pythonista (Python for iOS/iPadOS) no longer with active development and support?", "Author": "br_web", "Content": "I have not seen updates in almost a year and there is no activity in the support forum? Is there a replacement forum? Thanks"},
{"Title": "Google laysoff Python maintainer team", "Author": "jmreagle", "Content": "https://www.hindustantimes.com/business/google-layoffs-sundar-pichai-led-company-fires-entire-python-team-for-cheaper-labour-101714379453603.html Are there any ramifications for the Python community outside of Google?"},
{"Title": "List of Sites that Packages Need to Connect to?", "Author": "BullCityPicker", "Content": "I'm doing most of my work behind a government firewall, and I'm having trouble connecting to certain sites. I can do the usual \"pip\" installs just fine, but I'm talking about packages that need to download data to do their job. An example is the NLTK (Natural Language Toolkit) package, which downloads dictionaries, lookup tables for sentiment analysis, and so on. I know what sites to open up for that particular problem (pastebin.com and nltk.org), but I wonder if anybody's made a list of such sites for different packages. I can ask for the two sites I know about to be opened up, but I'd like to have a more comprehensive list so I don't have to go through the red tape multiple times."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "pyrseus - concurrent.futures extensions for easier troubleshooting", "Author": "Mental-Elephant-6215", "Content": "https://github.com/dalleyg/pyrseus What My Project Does Pyrseus extends Python’s concurrent.futures asynchronous and concurrent programming package with:\na collection of non-concurrent executors for light workloads and troubleshooting,\nExecutorCtx, a factory for easily switching between different executors, and\na collection of ready-built ExecutorCtx plugins, supporting executors from concurrent.futures, ipyparallel, loky, mpi4py, and itself. Where relevant, optional cloudpickle-enhanced plugins are also provided."},
{"Title": "Jobs that utilize Jupyter Notebook?", "Author": "Shadowforce426", "Content": "I have been programming for a few years now and have on and off had jobs in the industry. I used Jupyter Notebook in undergrad for a course almost a decade ago and I found it really cool. Back then I really didn’t know what I was doing and now I do. I think it’s cool how it makes it feel more like a TI calculator (I studied math originally) What are jobs that utilize this? What can I do or practice to put myself in a better position to land one?"},
{"Title": "Pip 24.1 beta released, and it's a big one", "Author": "zurtex", "Content": "I'd like to call attention to pip 24.1 beta asit is unusual for the pip team to release betas:\nhttps://pip.pypa.io/en/latest/news/#b1-2024-05-06\nhttps://pypi.org/project/pip/24.1b1/\nYou can install with: python -m pip install pip==24.1b1 In particular they have upgraded their vendored version of packaging from 21.3 to 24.0, this was a and , included significant performance improvements, and will allow pip to support . However, it also means legacy versions and specifiers are with pip."},
{"Title": "python irl in london england", "Author": "ProsodySpeaks", "Content": "are there any groups, meets, events etc i can get involved with locally in london uk? i've got moderate python chops as well as a wide range of other skills and tools, notably construction and event organisation/production/management, but also 3d design and print, some electronics and others. i work flexible hours and honestly am looking to develop a network and experiences to land my first job that at least involves some coding - i'm happy to commit significant time and resource to interesting projects to get eventually my foot or at least my nose in a door somewhere. (i dont mean i would stop contributing to the project once i land a job!)"},
{"Title": "How Python Asyncio Works: Recreating it from Scratch", "Author": "jpjacobpadilla", "Content": "Do you understand how asyncio works behind the scenes? Read this article and see how you can use Python generators to create your own version of asyncio, and then use the __await__ dunder method to use the async/await keywords to come full circle! https://jacobpadilla.com/articles/recreating-asyncio"},
{"Title": "How to Clean Data and work with outliers and Missing Data in Python Pandas", "Author": "cyprusgreekstudent", "Content": "I made a detailed tutorial on how to work with missing data, outliers, and how to lean up data in Pandas Python. This explains how to clean up your data so that your statistical results and trainin data is not skewed. https://github.com/werowe/HypatiaAcademy/blob/master/pandas/pandas_missing_data.ipynb"},
{"Title": "Analyzing Python Compression Libraries: zlib, LZ4, Brotli, and Zstandard", "Author": "dhilip-siva", "Content": "Source Code: https://github.com/dhilipsiva/py-compress-compare\nAnalyzing Python Compression Libraries: zlib, LZ4, Brotli, and Zstandard\nWhen dealing with large volumes of data, compression can be a critical factor in enhancing performance, reducing storage costs, and speeding up network transfers. In this blog post, we will dive into a comparison of four popular Python compression libraries—zlib, LZ4, Brotli, and Zstandard—using a real-world dataset to evaluate their performance in terms of compression ratio and time efficiency."},
{"Title": "Build tool support for PySide / PyQt", "Author": "jmacey", "Content": "Just interested in how people approach this, typically I just use VSCode or QtCreator to build simple projects. However I now want to automate some of the build process such as running uic, and rcc. I've tried to use CMake but can't seem to get it to work without a lot of custom scripting (for example the AUTOUIC etc functions need c++ projects), can't see any info on running uic in QtCreator (which would be ideal but python support is really just an after thought). I could write some Makefiles but this is a little ad-hoc and also confuses the IDE's (and at the end of the day I want a simple process for my students to use and I already teach cmake for C++ dev)."},
{"Title": "Tkinter Variable class C/Python garbage collection mismatch", "Author": "ranemaeker", "Content": "Tkinter is going to drive me crazy. Let me lay this out for you: Tkinter is the GUI interface I am using, which is a python frontend for a C library It holds \"widgets\" in a window. Some widgets have variables (StringVar, BooleanVar, etc - not \"variables\" like code variables but a class of updatable data holders for the widgets to link to the Tcl backend) The Vars have incremental names like PYVAR1, PYVAR93, etc by default. Names can be provided to the Vars via keywords upon initialization. (Note I have not been able to find any reason to not do this - hence this post) Names should absolutely be provided to the Vars unless they are unique. Because on python garbage collection (or \"del Var\" command) the Vars are told to destroy() themselves and then this command is passed to C \"destroy this Var.\""},
{"Title": "I wrote a book on Python Regular Expressions - and made it free!", "Author": "code_x_7777", "Content": "Hi! I've just sorted through some of my books on Leanpub and decided to make the book on Python Regular Expressions free to download for a couple of days. Why? Just for fun and learning and to get some valuable feedback.\nFree ebook link: https://leanpub.com/regexpython/\nRegex Video Tutorials: https://blog.finxter.com/python-regex/\nThis book helps you learn regular expressions chapter by chapter. Each chapter first teaches the concepts and then asks you to solve Python puzzles (\"Guess the code!\") to master the concepts. The main idea is to keep it lightweight and fun."},
{"Title": "relax-py - Web framework for htmx with hot module replacement", "Author": "MindLopsided4430", "Content": "Excited to finally showcase this! It's still pretty rough around the edges, but I'm finally happy enough with the feature set and curious to see what the community thinks about a framework like this. Code: github.com/crpier/relax-py Documentation: crpier.github.io/relax-py What My Project Does relax-py is a Python framework for building full-stack applications with htmx It provides tools for writing HTML in a manner similar to simple_html (which also inspired the decision to use standard Python to write HTML, rather than use Jinja2 or to make something like templ work in Python) It has:"},
{"Title": "I created an AI tool for using python to process excel and other files", "Author": "smallSohoSolo", "Content": "Hi, I'm Owen, and I've developed an AI tool for data processing. I spend a significant amount of time processing daily data from numerous Excel files, which requires me to write a lot of Python code. I have been using GitHub Copilot to assist with this, but I am exploring ways to eliminate the need to write code manually. The tool is called Tipis AI, and you can find it here: https://github.com/tipisai/tipis-fe What My Project Does Therefore, I have developed an AI that generates Python code for data processing. I've also created a Python runtime environment to execute this code."},
{"Title": "How Malicious Python Code Gains Execution", "Author": "louis11", "Content": "The primary vector for malicious code running in software developer environments (e.g., local system, CI/CD runners, production servers, etc.) is software dependencies. This is third-party code which often means open-source software, also known as running code from strangers on the internet. The prized goal for attackers is arbitrary code execution. It’s the stuff high CVE scores are made of and often the topic of how vulnerabilities can turn into exploits. It’s the foothold needed to run cryptominers, steal secrets, or encrypt data for ransom. It’s no wonder why threat actors want it, but how do they get it? Sutton’s Law makes it obvious why they go after open-source software: because executing arbitrary code is easy there."},
{"Title": "python-oracledb 2.2 and the VECTOR type in Oracle Database 23ai", "Author": "cjbj", "Content": "python-oracledb 2.2, the Oracle Database driver, has been released with support for Oracle Database 23ai features such as the VECTOR and BOOLEAN data types, Implicit Connection Pooling, and improved connection performance. See the release announcement."},
{"Title": "Ray on Golem MVP Launch: the Best Way of Running Python Code on the Golem Network", "Author": "GolemSM", "Content": "Golem Network has just released Ray on Golem MVP, a significant milestone in integrating Ray with Golem's decentralized infrastructure! 🎉\nCheck out all the details about the release and next steps in our blog post:\n📝 https://blog.golem.network/announcing-ray-on-golem-mvp-launch-the-recommended-way-of-running-python-code-on-the-golem-network/\n👉 Golem is looking for engaged beta testers to run diverse applications and collaborate on refining the solution. Interested? Find all the information on the brand-new Ray on Golem site:\n🔗"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I've started writing Python bindings for lexertl", "Author": "BenHanson", "Content": "See https://github.com/BenHanson/pylexertl I will see about registering as an official library when I am happy I have completed all the bindings. I added all the missing functions for the rules objects today, so things are in reasonable shape already. My python experience has been limited up until now, but it is big for my new role. I have a runtime parser generator https://github.com/BenHanson/parsertl17 which I also plan to add bindings for. I hope this is of interest to somebody! What My Project Does Allows you to build lexical analysers at runtime and use them to lex text (in this case utf-8)"},
{"Title": "Should I use pydantic for all my classes?", "Author": "uh_sorry_i_dont_know", "Content": "Pydantic makes your code safer by making it strongly typed. You can no longer input a wrongly typed argument without getting an error (if pydantic can't convert it). This is great but to me it seems that sometimes standard python classes still seem preferable. Perhaps it's because I'm not using it correctly but my code for a pydantic class is much longer then for a normal class. Especially if you are working with computed attributes. Then you have to start using special decorators and for every computed attribute you have to declare a function with \"def ...\" Instead of in an init function just being able to write attribute_3 = attribute 1 + attribute 2."},
{"Title": "Medical imaging Python jobs", "Author": "Durysik", "Content": "Hi folks! I am currently looking for a US (west coast best) based job where I could grow as a python programmer, specifically analysing medical images. Looking online I found some labs where they work with images, but I thought I'd ask (not sure if it's the right sub tho) cause I'm sure this way I'll hear about many places that deal with Medical Imaging. Thanks :)"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Intermediate Project: Python Plotly Data Visuals: Dropdowns and Range Sliders For User Interaction", "Author": "jgloewen", "Content": "Interactive data visualization is a powerful tool that can significantly enhance the analysis and interpretation of complex datasets. With Python, the Plotly library offers various features that can be used to create interactive publication-quality graphs. This project demonstrates how to use 2 of these awesome features:\nRange Slider\nDropdown Menu"},
{"Title": "tab-pal: a TUI for adding and editing custom colour palettes in Tableau", "Author": "Ok-Frosting7364", "Content": "Source code: https://github.com/ben-n93/tab-pal\nWhat my Project Does\nMakes it quicker, easier and prettier to create custom colour palettes in Tableau. Rather than having to find your Preferences.tps file every time and edit the XML you can just launch tab-pal from the command-line and make any changes you want (adding/deleting new palettes, adding/removing colours. You also get a preview of the colours you've added. Target Audience\nData/business analysts and data scientists and who work with Tableau.\n\nThere are some websites that let you dynamically create the Preferences.tps XML file however this still requires you to locate the file and copy and paste over it with any changes you make"},
{"Title": "Introducing PgQueuer: A Minimalist Python Job Queue Built on PostgreSQL", "Author": "GabelSnabel", "Content": "What My Project Does PgQueuer is a Python library designed to manage job queues using PostgreSQL features. It leverages PostgreSQL's native LISTEN/NOTIFY, along with advanced locking mechanisms, to handle job queues efficiently. This allows for real-time job processing, concurrency, and reliable task execution without the need for a separate queuing system. Target Audience PgQueuer is ideal for developers and teams who already use PostgreSQL in their projects and are looking for a simple, integrated way to handle background tasks and job queues. It's designed for production use, offering a dependable solution that scales seamlessly with existing PostgreSQL databases."},
{"Title": "My latest TILs about Python", "Author": "JCx64", "Content": "After 10+ years working with it, I keep discovering new features. This is a list of the most recent ones: https://jcarlosroldan.com/post/329"},
{"Title": "A Free GPT-Powered Financial Analysis Tool", "Author": "Starks-Technology", "Content": "Link to GitHub Page\nWhat My Project Does\nI created a simple financial analysis tool using the SimFin API and the GPT API. This tool summarizes financial information and makes it digestable for people who don't know a lot about finance.\nTarget Audience\nThis is more of a toy project for those interested in AI and Finance. It's meant for people without a ton of GPT experience to see a tangible use-case of generative AI within the field."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Single file, hot reloading python server with raw websockets and inotify", "Author": "tootac", "Content": "A project to build a local server without any external dependencies with main features of hot reloading browser on source modification. The idea is to make it simple, standalone and work without any setup. The project uses regular sockets, websockets, inotify and a bit of javascript on the fly embedding to allow users to achieve automatic synchronization with browser. The article describes hot to monitor file changes with direct loading of libc and requesting kernel notify on change. Free article and code: https://hereket.com/posts/linux_live_reload_python_server/"},
{"Title": "I made a Tkinter \"DevTools\" to inspect and modify widgets in your running app in real-time", "Author": "254hypebeast", "Content": "source: https://github.com/ObaraEmmanuel/Formation pypi: https://pypi.org/project/formation-studio/ What My Project Does Allows you to inspect widgets in your running Tk app in real-time. You can view the widget hierarchy, modify widget attributes, adjust widget layout and run arbitrary code to interact with your widgets through the embedded Python REPL console. It works just like DevTools in a browser. This debugger is part of the Formation studio project which is a drag-n-drop graphical UI builder for Tkinter. Target Audience Any Tk developer seeking to have an easier time debugging their UI or seeking to experiment with the Tk framework with minimal effort."},
{"Title": "Reboot Your Router with a Python Script", "Author": "SAV_NC", "Content": "Hello r/python, I've developed a Python script that allows you to reboot your router remotely via SSH! This script handles the countdown and checks when the router is back online after a reboot. What My Project Does: Key Features:\nAutomated Router Reboot: Remotely trigger a reboot of your router.\nMonitoring: After sending the reboot command, the script counts down from 350 seconds and starts checking the router's status by pinging it after the first 100 seconds have passed."},
{"Title": "I made a team of AI manage my YouTube channel and my work with Python based framework CrewAI", "Author": "fx2mx3", "Content": "I found this awesome AI framework for python called \"Crew AI\", that allows us to create assistants, or agents in the CrewAI lingo, and assign specific tasks. I started my tiny youtube channel 3 months and for a youtuber, especially a novice one like myself, there are a bunch of tasks such as checking what other similar channels are doing, which topics are trending and if a video idea is good or not. There is also the part of coming up with the video content idea itself, create a catchy title, suitable youtube tags and finding the appropriate forum to talk about! You folks get the picture. It's a great project for anyone seeking to automate tasks not just related to a youtube channel, but this could easily be adapted to your daily job tasks, or even a startup idea."},
{"Title": "I made a Python CLI Tools for Competitive Programming", "Author": "Old-Manufacturer6209", "Content": "Source Code: https://github.com/JeanExtreme002/FastSnake PyPI: https://pypi.org/project/FastSnake/ What My Project Does FastSnake is a command-line tool that allows you to easily create, expand, run, and test Python solutions for competitive programming problems. 🐍🏁 This project provides useful CLI tools for competitive programming, such as test case generators, algorithms and data structures, tools for platforms Codeforces and AtCoder, and other features that assist you during the development and testing of solutions, besides building a nice directory structure to develop your solutions. 🤓"},
{"Title": "Opinions sought: Modernising the Apache NiFi Python client", "Author": "Samausi", "Content": "Hello folks, I am the author of NiPyAPI, the defacto Python client for the Apache NiFi project. For those unfamiliar, Apache NiFi is an open-source ETL tool designed around the flow-based programming paradigm. It excels at continuously moving and managing arbitrary data flows between disparate systems with low latency at large scale, and is often contrasted with Airflow. Amongst many features, NiFi allows for Command & Control via a native UI, enabling live edits to data routing and transformation. NiFi also enforces an API-first approach, and produces a swagger definition during code compilation, which allowed creation of a Python client to enable automated Data Flow testing and a Design & Deploy approach by running it through tool shaped by mustache templates. This produces a verbose low-level client, which I then leverage in higher-level operational functions and demo scripts in the library."},
{"Title": "Anycrc - Python CRC computation library", "Author": "marzoogy", "Content": "Link: https://github.com/marzooqy/anycrc What My Project Does This is a Cython module with bindings to the crcany library. It supports calculating CRC hashes of arbitary sizes as well as updating a crc hash over time, and I believe that it is the fastest generic CRC library available for Python. Target Audience Anyone that needs to compute CRCs. Comparison with Alternatives crcmod-plus: A modernized version of the old crcmod library. It's highly customizable and fast. fastcrc: A library with bindings to the crc-rs library. Has a limited selection of CRCs to use. binascii: The standard library module comes with support for only CRC32 and CRC-CCITT, and at least the CRC32 implementation used is pretty fast according to my testing."},
{"Title": "Meteor Science using Python - Creating a \"weird\" coordinate system", "Author": "MrAstroThomas", "Content": "Hey everyone, I am creating \"Space Science with Python\" tutorials on YouTube with free and open accessible Python code on GitHub. It is not fancy or a \"super high animation quality YouTube production\". I am just an astrophysicists (what a difficult word to write), working in industry who continues with science as a hobby. Ha! And I have some crazy niche knowledge that is not covered by Gemini or chatGPT (yet). Anyway, I am creating now a tutorial on meteor science and wanted to show you how to create a coordinate system that co-rotates with the Earth while it is revolving around the Sun."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python Test 220: Getting the most out of PyCon, including juggling - Rob Ludwick", "Author": "variedthoughts", "Content": "Listen at https://podcast.pythontest.com/episodes/220-juggling-pycon\nEven if you never get a chance to go to PyCon, I hope this interview helps you get a feel for the welcoming aspect of the Python community. The juggling at PyCon is one of the inspirations for PythonPeople.fm, one of PythonTests's sibling podcasts. Do you have any conference tips to add?"},
{"Title": "SecretScraper: highly configurable web crawler/scraper for extracting sensitive data from websites", "Author": "PadishahIII", "Content": "Hi, I'm a cybersecurity enthusiastic. And I've made a web crawler/scraper tool to extract links and sensitive information against target websites. You can find it here: https://github.com/PadishahIII/SecretScraper. What My Project Does SecretScraper is a highly configurable web scraper tool that crawls links, extracts subdomains from target websites and finds sensitive data using regular expressions. The features included in the SecretScraper are:\nWeb crawler: extract links using both DOM hierarchy and regex"},
{"Title": "Returns Python library for FP", "Author": "yinshangyi", "Content": "Hello!\nI work in big data space (data engineering), I mainly used Java, Scala and Python.\nI have been learning functional programming in greater depth and I found this Python library which seems pretty cool.\nhttps://github.com/dry-python/returns\nI've used it at work for implementing an Either based error handling.\nIt seems a great library.\nAny of you have used it?\nAny thoughts?\nFor sure, I prefer doing FP in Scala but given the job market isn't too kind too Scala and FP languages in general. What are your thoughts to bring FP (at least parts of it) to the Python world?\nSome people in the TypeScript world seem to take that direction:"},
{"Title": "Suggestions for python libraries to contribute to", "Author": "JimJimBerry", "Content": "Hey, python folks ! I have been coding in python for around 3 years, 2 years professionally. I have worked with asyncio, typing and other stuff that is needed to build a server. I was looking for a small but impactful enough open source core python library/application to work on. I tried cpython but it seems to be beyond my capability at the moment. As for my interests I was interested in lower level stuff as well as libraries like asyncio and celery. Any suggestions for libraries that could use a bit of help and teach me some stuff as well would be appreciated"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Project: Simple Interactive Python Streamlit Maps With NASA GIS Data", "Author": "jgloewen", "Content": "Python Streamlit is terrific for putting together interactive dashboards. Combined with the geopandas library, streamlit can easily display GIS data points on a map for you. Forest fires in my home province of British Columbia, Canada have been really bad recently. NASA has a terrific dataset that keeps track of forest fires by country. Can I use Streamlit to access this dataset and display a map off all the fires within a certain area (BC) for a particular time frame (2021)? And can I give the user the ability to choose a month? You bet! Let me step you through how! FREE tutorial (with code):"},
{"Title": "TypeIs does what I thought TypeGuard would do in Python", "Author": "Ok_Analysis_4910", "Content": "While it's unfortunate to have two constructs—TypeGuard and TypeIs—with slightly different behaviors, I'm glad that the latter is less surprising. https://rednafi.com/python/typeguard_vs_typeis/"},
{"Title": "Introducing Stockdex: A Superior Python Package for Real-Time Financial Data Retrieval", "Author": "nginx26", "Content": "Greetings! I've previously introduced my Python package in this post. Since then, I've significantly enhanced its performance and expanded its capabilities.\nWhat My Project Does\nA lightweight python package designed for the efficient retrieval of financial data from various sources like Yahoo Finance, Nasdaq, Digrin and JustETF websites (somewhat similar to yfinance). This tool provides functionality akin to yfinance but with broader data access."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Are PEP 744 goals very modest?", "Author": "MrMrsPotts", "Content": "Pypy has been able to speed up pure python code by a factor of 5 or more for a number of years. The only disadvantage it has is the difficulty in handling C extensions which are very commonly used in practice. https://peps.python.org/pep-0744 seems to be talking about speed ups of 5-10%. Why are the goals so much more modest than what pypy can already achieve?"},
{"Title": "Python icon library with 5237 high-quality icons (Tabler Icons wrapper)", "Author": "niklashnng", "Content": "What My Project Does:\npytablericons is a Python wrapper for the tabler-icons project, which provides a set of 5237 free MIT-licensed high-quality SVG icons for web projects with each icon being designed on a 24x24 grid and a 2px stroke.\nIt allows you to load any of those SVG icons directly into a Pillow PNG Image in any size and color without losing quality and without having to download the icons manually or handling the SVG conversion yourself. For the outline icons, the stroke width is customizable as well. All of this is done in just a single line and since the icon is a Pillow Image, it can then be used easily with basically anything (e.g. PyQt5, PyQt6, PySide2, PySide6, Tkinter, etc.)"},
{"Title": "New book! The Quick Python Book, Fourth Edition by Naomi Ceder", "Author": "ManningBooks", "Content": "Hello everybody, Thank you for having us here, and a huge \"Thank you\" to the moderators for letting us post. We have just released the latest edition of The Quick Python Book by the one-and-only Naomi Ceder, and I wanted to share that news with the community. Many of you are already familiar with Naomi's work and her massive contributions to the world of Python programming language. The Quick Python Book has aided over 100,000 developers in mastering Python. The Fourth Edition of the book has been revised to include the latest features, control structures, and libraries of Python, along with new coverage of working with AI-generated Python code. Naomi, the author, has beautifully balanced the details of the language with the insights and advice required to accomplish any task. Her personal touch has made learning Python an enjoyable experience for countless developers."},
{"Title": "Pure Python Physics Engine", "Author": "More-Tower9993", "Content": "What My Project Does The Physics Engine Called PhysEng, provides an easy to use environment and visualization combo in which to try out different physics or even provide a template to design your own accelleration/velocity fields. Besides the visualization aspect and numpy the basic functions of the Engine are written completely in 100% python. The features included in the Engine are:\nParticles, Soft Bodies, Anchor points\nBuilt in Fields: Drag, Uniform Force Fields, Gravity Between Particles, Octree Gravity etc"},
{"Title": "A word search game generator", "Author": "RRTheGuy", "Content": "https://github.com/RadoTheProgrammer/motsmeles/\nWhat my project does\nIt generate word search games with custom words, dimensions.\nTarget audience\nFor people who want to get fun with some word searching\nComparison"},
{"Title": "typedattr: Autocompletion and typechecking for CLI script arguments, using standard argparse syntax", "Author": "gings7", "Content": "Excited to share my pypi package typedparser I have been working on for around 1 year now. What My Project Does: It enables writing CLI scripts and create an \"args\" variable with autocompleted members and type checks, but still keeps the simple and universally understood syntax of the stdlib argarse module. Target Audience: For stability, I battletested it in my research projects and added automatic builds as well as 80%+ test coverage. So I believe it is pretty stable. Comparison: For typing functionality it uses the attrs package as backend. It also provides some additional features for object and dictionary manipulation. Of course there are many other CLI argument packages out there, but this one stands out in that it tries to keep the syntax of the argparse standard library as much as possible, making it easy for others to figure out what your script does. Check it out and let me know what you think."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "In what way do you try out small things when developing?", "Author": "HatWithAChat", "Content": "I've noticed at work that my coworkers and I try out small things in different ways. Small things like if you want to try that adding two datetimes together behaves in the way you expect. Some people use jupyter notebook for this and others run python interactively in a separate command prompt. I usually run debug in whatever IDE I'm using and then letting it stop at the code I'm currently developing and then using the debug console to test things out. Sometimes this means just leaving the debugger at a breakpoint for half an hour while I continue writing code. Is my way of doing it weird or does it have any disadvantages? How do you usually test out things on the go in a good way?"},
{"Title": "Dash vs Reflex vs Others", "Author": "Sea_Split_1182", "Content": "Where can I find a decent comparison (pros and cons) of these 5 solutions? They seem to be solving the same problem, which is, afaiu, separating the frontend ‘annoyance’ from Python scripting / math.\n⁠Reflex (used to be called Pynecone) https://reflex.dev\n⁠Streamlit https://streamlit.io\n⁠Gradio https://gradio.app\n⁠Dash https://dash.plotly.com"},
{"Title": "What's the best library to find differences in two text files and visulaize it?", "Author": "TheGupta", "Content": "difflib is popular. Most of the answers on Stack Overflow uses it. But, I think Google's diff-match-patch is better. See an example here. Or, am I missing something?"},
{"Title": "ArchiveFile: Unified interface for tar, zip, sevenzip, and rar files", "Author": "PredatorOwl", "Content": "What My Project Does archivefile is a wrapper around tarfile, zipfile, py7zr, and rarfile. The above libraries are excellent when you are dealing with a single archive format but things quickly get annoying when you have a bunch of mixed archives such as .zip, .7z, .cbr, .tar.gz, etc because each library has a slightly different syntax and quirks which you need to deal with. archivefile wraps the common methods from the above libraries to provide a unified interface that takes care of said differences under the hood. However, it's not as powerful as the libraries it wraps due to lack of support for features that are unique to a specific archive format and library."},
{"Title": "I made a python package that can parse Excel Formula Strings into dictionary structures!", "Author": "MPGaming9000", "Content": "What my project does: It basically takes a formula string like you'd get from Openpyxl like \"=SUM(A1:B2)\" and breaks it all out into a dictionary structure for you to then navigate through, modify, and then reformat that modified structure back into an excel friendly formula string again! Target Audience: (People who modify Excel formula strings in automated spreadsheet modification scripts. Or people who need to analyze formulas in a spreadsheet to do some kind of logic based on that analysis). Disclaimer: For most people some simple regex pattern matching and str replaces would be fine to modify formulas but if you need a more structured approach to working with these strings, this package has you covered!"},
{"Title": "Alternative data managment tool to replace the need to use Jupyter Notebook for Python", "Author": "IllogicalLunarBear", "Content": "What My Project Does: For everyone who says they use jupyter Notebook for Python to do chunks of code work… I developed my own data management system for that kind of stuff that provides a wrapper over serialization that essentially creates pythonic pointers to data on any network drive. I just grab my data that I want to grab. Provides autocomplete and C# like attributes. I can dynamically build any data storage class using UML formatted infrastructure-as-code to build the front end. The back end is completely dynamic. Here is the pypi link. Note that I developed this to handle genomic data that was generated over the course of a week of 24/7 computation, that I break into multiple logical chunks. You dont need to rely on Jupyter to hold your data and you can retrieve it months after generating it."},
{"Title": "I made an easy and secure data lake for Pandas", "Author": "realstoned", "Content": "What My Project Does Shoots is essentially a \"data lake\" where you can easily store pandas dataframes, and retrieve them later or from different locations or in different tools. Shoots has a client and a server. After choosing a place to run the server, you can easily use the client to \"put\" and \"get\" dataframes. Shoots supports SQL, allowing you to put very large dataframes, and then use a query to only get a subset. Shoots also allows you to resample on the server. # put a dataframe, uploads it to the server  \ndf = pd.read\\_csv('sensor\\_data.csv')  \nshoots.put(\"sensor\\_data\", dataframe=df, mode=PutMode.REPLACE)  \n\n\n# retrieve the whole data frame  \ndf0 = shoots.get(\"sensor\\_data\")  \nprint(df0)  \n\n# or use sql to retrieve just some of the data  \nsql = 'select \"Sensor\\_1\" from sensor\\_data where \"Sensor\\_2\" < .2'  \ndf1 = shoots.get(\"sensor\\_data\", sql=sql)"},
{"Title": "Hatch v1.10.0 - UV support, new test command and built-in script runner", "Author": "Ofekmeister", "Content": "Hello everyone! I'd like to announce version 1.10.0: https://hatch.pypa.io/latest/blog/2024/05/02/hatch-v1100/ Feel free to provide any feedback either here or as a discussion on the repo: https://github.com/pypa/hatch"},
{"Title": "Ruff 0.4.0 just dropped, with a faster parser and a new language server", "Author": "QueasyEntrance6269", "Content": "Release notes here, seems to be a 20-40% improvement around the board. This version features a new hand-written parser (rather than a generated one) that is much faster and offers better error messages. It also comes with a new rust-native language server inspired by rust-analyzer, that is multithreaded. I think they’re challenging Pylance’s throne, wouldn’t be surprised if the team goes after type checking next."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "What does your python development setup look like?", "Author": "Working_Noise_6043", "Content": "I'd like to explore other people's setup and perhaps try need things or extra tools. What kind IDE, any extra tools to make it easier for you, etc. Looking forward to everyone's responses!"},
{"Title": "Understanding State Machines in Python Through a Practical Example", "Author": "pemidi", "Content": "Hey everyone! I've written an article that simplifies the concept of state machines using Python, with a practical example related to order statuses. If you've ever been confused about state machines or just want a refresher with a real-world application, this might be just what you're looking for. Check it out and let me know what you think!\nRead the full article here I'm here for any questions or discussions"},
{"Title": "Share Proejct: NLLB-200 Distill 350M en-ko", "Author": "SaeChan5", "Content": "Hello , I'm excited to share a project that was initially intended to use in my graduating product(Capstone) What My Proeject Does I made NLLB-200 Distill 350M model to translating English to Korean Target Audience GPU servers are quite expensive, so I made it for university students who can't cost the server (like me.) Comparison It's even smaller and faster the other NLLB-200 model. so it can be run with CPU! more details are in my page If you know Korean, please give me a lot of feedback https://github.com/newfull5/NLLB-200-Distilled-350M-en-ko thank you!!"},
{"Title": "Tutorial on Building a Server-to-Server Zoom App with Python", "Author": "SleekEagle", "Content": "I made a tutorial on how to build a server-to-server Zoom OAuth application using Python. This application can transcribe Zoom meeting recordings, print the transcripts to the terminal, and save the transcripts as text files.\nvideo tutorial\nrepo\nwritten tutorial"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ASCII plot backend package for matplotlib", "Author": "jetpack_away", "Content": "Hi I've made a package called mpl_ascii which is a backend for matplotlib. You can find it here: https://github.com/chriscave/mpl_ascii I would love to share it with others and see what you guys think What it is It is a backend for matplotlib that converts your plots into ASCII characters. At the moment I have only made support for: bar charts, scatter plots and line plots but if there's demand for more then I would love to keep working on it. Target Audience: Anyone using matplotlib to create plots who might also want to track how their plots change with their codebase (i.e. version control)."},
{"Title": "Multipart File Uploads to S3 with Python", "Author": "tylersavery", "Content": "I created this tutorial after overcoming a difficult challenge myself: uploading 5GB+ files to AWS. This approach allows the browser to securely upload directly to an S3 bucket without the file having to travel through the backend server. The implementation is written in python (backend) and vanilla js (frontend)."},
{"Title": "Project: An Interactive Python Dashboard For Data Storytelling UN Food Security", "Author": "jgloewen", "Content": "Python’s Plotly Dash is a powerful tool for creating interactive data visualizations. As a Comp Sci professor, I use it extensively for interactive dashboards. Its usefulness lies in its ability to create web-based applications directly from Python code, without the need for additional web development skills.\nUsing UN food security data, let me show you an example of how you can create an interesting and useful Python Plotly dashboard that tells a data story using:"},
{"Title": "Cross platform python3 shebang", "Author": "tedkotz", "Content": "There is no shebang line that actually works across platforms for python 3. I would like one that works on unmodified :\nDebian shell (Dropped python2, falls under PEP 394)\nOlder Linux shells that still have python pointing to python2 (PEP 394)\nWindows cmd.exe shell (this really just means one that will work with PEP 397)\nGitbash for Windows (sort of a weird half sibling that respects shebangs)"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Python desktop app using PyWebview (similar to ElectronJS) & ReactJS that tracks time.", "Author": "zynix", "Content": "https://github.com/devdave/pyminder What does it do? The application is a very simple time tracker broken down by Client->Project->Task. In addition it has a summary report view plus a simple CRUD like data manager. The bigger goal was to see what it entailed to mix Python w/ReactJS and if it was easier using HTML+TypeScript over QT, TK, or some other unique API. Target Audience While I am using PyMinder to track my own work it wasn't meant for a general audience. Instead I am sharing this in case anyone else has a need to make a desktop application and looking for alternatives."},
{"Title": "American Airlines scraper made in Python with only http requests", "Author": "JohnBalvin", "Content": "Hello wonderful community, Today I'll present to you pyaair, a scraper made pure on Python https://github.com/johnbalvin/pyaair Easy instalation ` ` `pip install pyaair ` ` ` Easy Usage ` ` ` airports=pyaair.airports(\"miami\",\"\") ` ` ` Always remember, only use selenium, puppeteer, playwright etc when it's strictly necesary Let me know what you think, thanks About me: I'm full stack developer specialized on web scraping and backend, with 6-7 years of experience"},
{"Title": "Suggestions for a self-hosted authentication as a service?", "Author": "FlyingRaijinEX", "Content": "I have a simple backend REST API service that is serving a few ML models. I have made it \"secured\" by implementing an API key in order call those endpoints. I was wondering, how common it is for people to use services that can be self-hosted as their authentication/authorization. If it is common and reliable, what are the best options to go for? I've read that building your own authentication/authorization service with email verification, password reset, and social auth can be a pain. Also, did some googling and found this General - Fief. Has anyone ever tried using this? If so, how was the experience?"},
{"Title": "I made a Python app that turns your Figma design into code", "Author": "axorax", "Content": "Link: https://github.com/Axorax/tkforge Hey, my name is Axorax. I have been programming for a few years now. I started making a lot more projects in Python recently and this is one of them. I decided to call the project TkForge. What My Project Does TkForge allows you to turn your Figma design into code. So, you can make the UI for an app in Figma and add input fields, buttons and much more and name them properly then you can run TkForge to convert your Figma design into code. The names need to be the element that you want. For example; if you want a button element then you can name it \"button\" or \"button Hello World!\". The \"Hello World!\" portion will just get ignored. All of the text after the first space is ignored. However, for some elements, they matter. Like, if you want a textbox element with the placeholder text of \"Hello\" then you need to name it \"textbox Hello\"."},
{"Title": "Import pdf into python GUI and measure length within PDF", "Author": "Most-Guarantee956", "Content": "I'm interested to create a software where I can import some construction drawings and measure the distance within the PDF as a first step of my work. Tried a few open source pdf but none of them still allows me to have a correct measurement on the PDF, anyone have an idea?"},
{"Title": "One pytest marker to track the performance of your tests", "Author": "toodarktoshine", "Content": "Hello Pythonistas!\nI just wrote a blog post about measuring performance inside pytest test cases. We dive into why it’s important to test for performance and how to integrate the measurements in the CI.\nHere is the link to the blog: https://codspeed.io/blog/one-pytest-marker-to-track-the-performance-of-your-tests"},
{"Title": "milkcow - First package/library", "Author": "Samuel_G_Reynoso", "Content": "Excited to share milkcow, my first python package. I'd love any feedback, and to continue to build out the parts of this package that show potential. https://pypi.org/project/milkcow/ https://github.com/SamReynoso/milkcow What MilkCow Does Milkcow automates database creation and offers in-memory key-value mapping for data handling. Whether you're building middleware, local storage, or multiprocessing scripts. Target Audience MilkCow is designed for developers looking to streamline the development process. It caters to those who want to simplify data."},
{"Title": "How to create architecture diagrams from code in Jupyter Notebook", "Author": "writer_on_rails", "Content": "Hello world,I wrote an article about creating diagrams from code on Jupyter Notebook inside VS Code. It will give you a brief on the setup and also an overview of concepts. Within 5 minutes, you should be able to start making cool architecture diagrams. [TO MODERATOR: This link does not contain any paywalled or paid content. All the contents are available for free] Article link: https://ashgaikwad.substack.com/p/how-to-create-architecture-diagrams"},
{"Title": "PyPDFForm now lets you create widgets without Acrobat", "Author": "chinapandaman", "Content": "Hello ! Earlier this year I made a post about my open source project PyPDFForm and got some really nice feedbacks from you guys. I have been since then continuously working on it and I'd love to share you two really cool features that were newly added to the library. The first one is, like what the title says, the library finally supports creating a subset of widgets through code now. One of the previous hard dependency for PyPDFForm was that it requires a PDF template that was prepared using another tool, namely Adobe Acrobat or some web based ones like DocFly. Well now, at least for text field, checkbox, and dropdown, you can do it through plain Python code. I personally find this a huge milestone of the project and if you are interested in this new feature checkout the documentation ."},
{"Title": "Python Quality Standards", "Author": "nicomarcan", "Content": "Hey, happy Friday (don't push to prod). Me and some friends are building a no-code platform to run code improvement agents (really in BETA) . We want to have a quality agent for each language, and I would really appreciate your feedback on python best practices and standards. The agents are created by defining the steps that you want to apply in natural language. Right now our Python agent has the following steps:\nUse descriptive naming for functions and variables."},
{"Title": "Starter Code for a LLM-based AI Assistant", "Author": "2bytesgoat", "Content": "Hey everyone 👋 TL;DR\nSince everyone is talking about the Humane AI Pin and the Rabbit R1, I decided to make a short 5 minute tutorial on how people can setup and customize their own little AI assistant on their machine. I've uploaded a video tutorial here: https://www.youtube.com/watch?v=2fD_SAouoOs&ab_channel=2BytesGoat And the Github code is here: https://github.com/2BYTESGOAT/AI-ASSISTANT Longer version"},
{"Title": "Open Sourcing a Python Project the Right Way in 2024", "Author": "Vegetable_Study3730", "Content": "I recently open-sourced a package and the tooling was a bit of a struggle. I decided to write down the steps & all the tools needed to open-source a Python package in a scalable way that invite users and contributors. https://jonathanadly.com/open-sourcing-a-python-project-the-right-way-in-2024 Happy to hear your feedback!"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "Python Wrapper For Meta AI (Llama 3)", "Author": "Significant-Turn4107", "Content": "Here is just a small wrapper to interact with the new MetaAI chat bot assistant with Python (https://www.meta.ai/), which is running the newly release Llama 3 model. Another nice thing is that its directly connected with Bing Search so you will be able to get the latest informations. https://github.com/Strvm/meta-ai-api"},
{"Title": "How To Build a Social Media Sentiment Analysis Pipeline With FastAPI And Generative AI", "Author": "arthurdelerue25", "Content": "Social media like Reddit, Hacker News, Twitter, etc. contain tons of genuine discussions that you might want to analyze automatically with sentiment analysis. For example you might want to monitor what people say about you, your product, your competitors, etc. I made a technical article that shows how to implement such a sentiment analysis pipeline using the following steps:\nImplement social media listening\nIntegrate the data in your system with an API webhook processed in Python/FastAPI"},
{"Title": "How to auto-instrument Python servers w/ OpenTelemetry for performance & error monitoring", "Author": "__boba__", "Content": "Hi everyone! We've recently written up a guide for anyone running a Python server (ex. Flask, Django, FastAPI) to instrument their app to debug slow downs and errors using the CNCF OpenTelemetry project and their Python instrumentation package. It's really straightforward to get started with just a few lines of added code and commands to any Python project, so hopefully helps some people out as they're looking to add better instrumentation to their servers. Here's the tutorial: https://www.hyperdx.io/blog/opentelemetry-python-server-auto-instrumentation"},
{"Title": "Has PyPI ceased all support?", "Author": "baekalfen", "Content": "Does anyone know what’s going on behind the scenes of PyPI (who maintains `pip install`)? It seems like they’ve stopped processing support tickets over a month ago. I’ve hit the data limit for my package [PyBoy](https://github.com/baekalfen/pyboy), and I immediately posted a ticket to get the limit increased (as others have successfully done). But after more than a month, and several attempts at contacting the support team, I’ve heard nothing back, and I’ve run out of options. Does anyone know what’s happening, or how to get a comment from PyPI? My ticket is this one:"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "k8sAI - my open-source GPT CLI tool for Kubernetes!", "Author": "Wild_Plantain528", "Content": "What my project does: I wanted to share an open-source project I’ve been working on called k8sAI. It’s a personal AI Kubernetes expert that can answer questions about your cluster, suggests commands, and even executes relevant kubectl commands to help diagnose and suggest fixes to your cluster, all in the CLI! Target Audience: As a relative newcomer to k8s, this tool has really streamlined my workflow. I can ask questions about my cluster, k8sAI will run kubectl commands to gather info, and then answer those question. It’s also found several issues in my cluster for me - all I’ve had to do is point it in the right direction. I’ve really enjoyed making and using this so I thought it could be useful for others. Added bonus is that you don’t need to copy and paste into ChatGPT anymore!"},
{"Title": "Achieve true parallelism in Python 3.12", "Author": "ThatsAHumanPerson", "Content": "Article link: https://rishiraj.me/articles/2024-04/python_subinterpreter_parallelism I have written an article, which should be helpful to folks at all experience levels, covering various multi-tasking paradigms in computers, and how they apply in CPython, with its unique limitations like the Global Interpreter Lock. Using this knowledge, we look at traditional ways to achieve \"true parallelism\" (i.e. multiple tasks running at the same time) in Python. Finally, we build a solution utilizing newer concepts in Python 3.12 to run any arbitrary pure Python code in parallel across multiple threads. All the code used to achieve this, along with the benchmarking code are available in the repository linked in the blog-post."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python Interview Cheat Sheet Website!", "Author": "ixatrap", "Content": "Hey everyone, I’ve recently launched a new website aimed at helping fellow programmers ace their Python interviews. It’s not just limited to Python though; it also covers essential topics like big-O notation, object-oriented programming, design patterns, and more! I’d love to hear your thoughts and feedback on the content, layout, and anything else you think could be improved. Check it out here https://hlop3z.github.io/interviews-python/ and let me know what you think. Your input is invaluable in making this resource the best it can be. Thanks in advance for your time and insights! 🚀🐍"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python Test 219: Building Django Apps & SaaS Pegasus - Cory Zue", "Author": "variedthoughts", "Content": "Listen at podcast.pythontest.com/219 When starting a SaaS project using Django, there are tons of decisions. I've asked Cory Zue, creator of SaaS Pegasus, to help me sift through some common SaaS/Django decisions."},
{"Title": "PkgInspect - Inspect Local/External Python Packages", "Author": "yousefabuz", "Content": "GitHub\nWhat My Project Does\nPkgInspect is a comprehensive tool designed to inspect and compare Python packages and Python versions effortlessly. It equips users with a comprehensive set of tools and utility classes to retrieve essential information from installed Python packages, compare versions seamlessly, and extract various details about Python installations with ease."},
{"Title": "MPCode is a scripting programming language", "Author": "weksoftware", "Content": "MPCode is a small open-source scripting programming language written in python 3.12 The repository with the same name on github.com allows you to modify the language to your own needs, execute small scripts, write programmes and libraries.\nThe language itself already has functions, object groups, logical operators, loops and variables.\nThe current functionality has documentation in three languages (English, Italian and Russian) and some small code samples.\nIt would be very nice to get feedback and ideas from you.\nYou can also develop your own projects based on it, as the project is licensed by MIT.\nLink to the repository:"},
{"Title": "🔭 OpenTelemetry Architecture: Python SDK Overview", "Author": "roma-glushko", "Content": "Hey folks,\nI have just posted an article for those who want to go a little bit beyond the basic usage of OTEL and understand how it works under the hood. The post quickly touches on:\n- 🔭 History and the idea of OpenTelemetry\n- 🧵 Distributed traces & spans. How span collection happens on the service side\n- 💼 Baggage & trace ctx propagation\n- 📈 Metrics collection. Views & aggregations. Metrics readers\n- 📑 OTEL Logging integration\n- 🤝 Semantic conventions and why that is important\nBlog Post:\nLet me know what do you think and hope this is helpful for someone 🙌"},
{"Title": "2,000 free sign ups available for the \"Automate the Boring Stuff with Python\" online course. (May 20", "Author": "AlSweigart", "Content": "If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): *The sign ups are all used up, but you can still watch all the videos for free. Read below! https://udemy.com/course/automate/?couponCode=MAY2024FREE https://udemy.com/course/automate/?couponCode=MAY2024FREE2 If you are reading this after the sign ups are used up, you can always find the first 15 of the course's 50 videos are free on YouTube if you want to preview them. YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have \"preview\" turned on. Scroll down to find and click \"Expand All Sections\" and then click the preview link. You won't have access to the forums and other materials, but you can watch the videos."},
{"Title": "Web API Security Champion: Broken Object Level Authorization (OWASP TOP 10) for Python Developers", "Author": "theowni", "Content": "Explaining one of the most common web API vulnerability classes - Broken Object Level Authorization in a practical manner. Providing a case study example based on the Damn Vulnerable RESTaurant API, including methods for identifying and preventing these vulnerabilities. https://devsec-blog.com/2024/04/web-api-security-champion-broken-object-level-authorization-owasp-top-10/"},
{"Title": "How to create a Discord Bot to launch a Minecraft server automatically", "Author": "chadicus-gigo", "Content": "Hi y'all, This might be off topic a bit from the normal stuff that gets posted here, but a while back I was messing around on a Minecraft server that I was hosting on Aternos (a free online Minecraft server host). Now since the server wasn't running on my computer (and since Aternos has a timeout policy to save server resources) it became annoying for my buddies to hop on the server if I was busy. They'd have to ask me to manually start the server from the webpage. So I had a free Saturday a couple of months ago and decided to remedy this problem. My source code is hosted on a GIGO Dev environment if y'all wanna check it out:"},
{"Title": "Best book for GUI development in Python", "Author": "Bekhyam", "Content": "Can you guys suggest some very good book for GUI development in Python? I'm currently working on a visualizer that needs many features to plot data on a 3D and 2D space. Using PyQt for this as it has threading support."},
{"Title": "What are your favourite pre-commit hooks and why?", "Author": "LatterConcentrate6", "Content": "Just getting started with pre-commit and I think it's awesome. Looking to find out what other code automation tools people are using. Let me know what works for you and why. Thanks!"},
{"Title": "Sensor-App: A Sensor Data Displaying/Streaming Android App written in Python", "Author": "StoneSteel_1", "Content": "Sensor-App is an Android App that's main focus is to help create a real-time mobile sensor data stream for computer applications, data collection, AR, VR, etc. Github: SensorApp\nFeatures of Sensor-App\nReal-Time Sensor Data display\nFaster Real-Time Sensor Data Streaming via TCP Sockets\nSimple and Easy setup of Data Streaming Server"},
{"Title": "UXsim 1.2.0 released with support for (self-driving) taxis and shared mobility", "Author": "Balance-", "Content": "Version 1.2.0 of UXsim is released, which allows simulating taxis, shared mobility and self-driving taxis! Main Changes in 1.2.0\nAdd taxi (aka. shared mobility) functions\nA standard vehicle in UXsim just travel from A to B and disappear. This is like a private owned vehicle.\nFrom this update, a Vehicle with mode=\"taxi\" behave like a taxi. Specifically, they travel through a network by passing through specific nodes that are dynamically updated, simulating passenger pickup and drop-off."},
{"Title": "Best way to grade Jupyter-Notebooks?", "Author": "flying_Wahale", "Content": "I recently took a job with a professor, that includes helping with the grading of biweekly assignments. So I basically have now 30 Notebooks that I have to grade. Top of my head I can think of these approaches:\nConvert to PDF and write into the PDF\nDuplicate the Notebook and write the comments in extra blocks\nCreate a .txt file with all my note"},
{"Title": "What is your best Tkinter project that you put a lot of effort into creating?", "Author": "_-Dan_-", "Content": "I want to hear your description of the project you are most proud of. I was just trying to find something on the Internet, but I didn't find much of interest. The only difficult project was CustomTkinter, which, as far as I know, was done entirely in Tkinter. Since it is possible to create something this complex, I'm sure you have something cool too.\nNote: I am expecting to hear projects more complex than a calculator :)"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Zillow scraper made pure in Python", "Author": "JohnBalvin", "Content": "Hello everyone., on today new scraper I created the python version for the zillow scraper. https://github.com/johnbalvin/pyzill What My Project Does The library will get zillow listings and details.\nI didn't created a defined structured like on the Go version just because it's not as easy to maintain this kind of projects on python like on Go.\nIt is made on pure python with HTTP requests, so no selenium, puppeteer, playwright etc. or none of those automation libraries that I hate."},
{"Title": "Created Netlify DNS Manager: CLI Tool for uploading zone Files to Netlify or exporting Netlify DNS", "Author": "snorkell_", "Content": "What My Project Does? Command-line tool to simplify the management of DNS records for domains hosted on Netlify, whether you want to migrate to Netlify or migrate away from Netlify.\nImport Zone File from Godaddy, NameCheap or others to Netlify - helpful in migrating nameservers.\nExport DNS records from Netlify as zonefile to be import it to Godaddy, Namecheap or other servers."},
{"Title": "Single file, hot reloading python server with raw websockets and inotify", "Author": "tootac", "Content": "A project to build a local server without any external dependencies with main features of hot reloading browser on source modification. The idea is to make it simple, standalone and work without any setup. The project uses regular sockets, websockets, inotify and a bit of javascript on the fly embedding to allow users to achieve automatic synchronization with browser. The article describes hot to monitor file changes with direct loading of libc and requesting kernel notify on change. Free article and code: https://hereket.com/posts/linux_live_reload_python_server/"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ArchiveFile: Unified interface for tar, zip, sevenzip, and rar files", "Author": "PredatorOwl", "Content": "What My Project Does archivefile is a wrapper around tarfile, zipfile, py7zr, and rarfile. The above libraries are excellent when you are dealing with a single archive format but things quickly get annoying when you have a bunch of mixed archives such as .zip, .7z, .cbr, .tar.gz, etc because each library has a slightly different syntax and quirks which you need to deal with. archivefile wraps the common methods from the above libraries to provide a unified interface that takes care of said differences under the hood. However, it's not as powerful as the libraries it wraps due to lack of support for features that are unique to a specific archive format and library."},
{"Title": "I made an easy and secure data lake for Pandas", "Author": "realstoned", "Content": "What My Project Does Shoots is essentially a \"data lake\" where you can easily store pandas dataframes, and retrieve them later or from different locations or in different tools. Shoots has a client and a server. After choosing a place to run the server, you can easily use the client to \"put\" and \"get\" dataframes. Shoots supports SQL, allowing you to put very large dataframes, and then use a query to only get a subset. Shoots also allows you to resample on the server. # put a dataframe, uploads it to the server  \ndf = pd.read\\_csv('sensor\\_data.csv')  \nshoots.put(\"sensor\\_data\", dataframe=df, mode=PutMode.REPLACE)  \n\n\n# retrieve the whole data frame  \ndf0 = shoots.get(\"sensor\\_data\")  \nprint(df0)  \n\n# or use sql to retrieve just some of the data  \nsql = 'select \"Sensor\\_1\" from sensor\\_data where \"Sensor\\_2\" < .2'  \ndf1 = shoots.get(\"sensor\\_data\", sql=sql)"},
{"Title": "Python Test 220: Getting the most out of PyCon, including juggling - Rob Ludwick", "Author": "variedthoughts", "Content": "Listen at https://podcast.pythontest.com/episodes/220-juggling-pycon\nEven if you never get a chance to go to PyCon, I hope this interview helps you get a feel for the welcoming aspect of the Python community. The juggling at PyCon is one of the inspirations for PythonPeople.fm, one of PythonTests's sibling podcasts. Do you have any conference tips to add?"},
{"Title": "Suggestions for python libraries to contribute to", "Author": "JimJimBerry", "Content": "Hey, python folks ! I have been coding in python for around 3 years, 2 years professionally. I have worked with asyncio, typing and other stuff that is needed to build a server. I was looking for a small but impactful enough open source core python library/application to work on. I tried cpython but it seems to be beyond my capability at the moment. As for my interests I was interested in lower level stuff as well as libraries like asyncio and celery. Any suggestions for libraries that could use a bit of help and teach me some stuff as well would be appreciated"},
{"Title": "I made a team of AI manage my YouTube channel and my work with Python based framework CrewAI", "Author": "fx2mx3", "Content": "I found this awesome AI framework for python called \"Crew AI\", that allows us to create assistants, or agents in the CrewAI lingo, and assign specific tasks. I started my tiny youtube channel 3 months and for a youtuber, especially a novice one like myself, there are a bunch of tasks such as checking what other similar channels are doing, which topics are trending and if a video idea is good or not. There is also the part of coming up with the video content idea itself, create a catchy title, suitable youtube tags and finding the appropriate forum to talk about! You folks get the picture. It's a great project for anyone seeking to automate tasks not just related to a youtube channel, but this could easily be adapted to your daily job tasks, or even a startup idea."},
{"Title": "Project: Simple Interactive Python Streamlit Maps With NASA GIS Data", "Author": "jgloewen", "Content": "Python Streamlit is terrific for putting together interactive dashboards. Combined with the geopandas library, streamlit can easily display GIS data points on a map for you. Forest fires in my home province of British Columbia, Canada have been really bad recently. NASA has a terrific dataset that keeps track of forest fires by country. Can I use Streamlit to access this dataset and display a map off all the fires within a certain area (BC) for a particular time frame (2021)? And can I give the user the ability to choose a month? You bet! Let me step you through how! FREE tutorial (with code):"},
{"Title": "Anycrc - Python CRC computation library", "Author": "marzoogy", "Content": "Link: https://github.com/marzooqy/anycrc What My Project Does This is a Cython module with bindings to the crcany library. It supports calculating CRC hashes of arbitary sizes as well as updating a crc hash over time, and I believe that it is the fastest generic CRC library available for Python. Target Audience Anyone that needs to compute CRCs. Comparison with Alternatives crcmod-plus: A modernized version of the old crcmod library. It's highly customizable and fast. fastcrc: A library with bindings to the crc-rs library. Has a limited selection of CRCs to use. binascii: The standard library module comes with support for only CRC32 and CRC-CCITT, and at least the CRC32 implementation used is pretty fast according to my testing."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "New book! The Quick Python Book, Fourth Edition by Naomi Ceder", "Author": "ManningBooks", "Content": "Hello everybody, Thank you for having us here, and a huge \"Thank you\" to the moderators for letting us post. We have just released the latest edition of The Quick Python Book by the one-and-only Naomi Ceder, and I wanted to share that news with the community. Many of you are already familiar with Naomi's work and her massive contributions to the world of Python programming language. The Quick Python Book has aided over 100,000 developers in mastering Python. The Fourth Edition of the book has been revised to include the latest features, control structures, and libraries of Python, along with new coverage of working with AI-generated Python code. Naomi, the author, has beautifully balanced the details of the language with the insights and advice required to accomplish any task. Her personal touch has made learning Python an enjoyable experience for countless developers."},
{"Title": "Returns Python library for FP", "Author": "yinshangyi", "Content": "Hello!\nI work in big data space (data engineering), I mainly used Java, Scala and Python.\nI have been learning functional programming in greater depth and I found this Python library which seems pretty cool.\nhttps://github.com/dry-python/returns\nI've used it at work for implementing an Either based error handling.\nIt seems a great library.\nAny of you have used it?\nAny thoughts?\nFor sure, I prefer doing FP in Scala but given the job market isn't too kind too Scala and FP languages in general. What are your thoughts to bring FP (at least parts of it) to the Python world?\nSome people in the TypeScript world seem to take that direction:"},
{"Title": "typedattr: Autocompletion and typechecking for CLI script arguments, using standard argparse syntax", "Author": "gings7", "Content": "Excited to share my pypi package typedparser I have been working on for around 1 year now. What My Project Does: It enables writing CLI scripts and create an \"args\" variable with autocompleted members and type checks, but still keeps the simple and universally understood syntax of the stdlib argarse module. Target Audience: For stability, I battletested it in my research projects and added automatic builds as well as 80%+ test coverage. So I believe it is pretty stable. Comparison: For typing functionality it uses the attrs package as backend. It also provides some additional features for object and dictionary manipulation. Of course there are many other CLI argument packages out there, but this one stands out in that it tries to keep the syntax of the argparse standard library as much as possible, making it easy for others to figure out what your script does. Check it out and let me know what you think."},
{"Title": "Introducing Stockdex: A Superior Python Package for Real-Time Financial Data Retrieval", "Author": "nginx26", "Content": "Greetings! I've previously introduced my Python package in this post. Since then, I've significantly enhanced its performance and expanded its capabilities.\nWhat My Project Does\nA lightweight python package designed for the efficient retrieval of financial data from various sources like Yahoo Finance, Nasdaq, Digrin and JustETF websites (somewhat similar to yfinance). This tool provides functionality akin to yfinance but with broader data access."},
{"Title": "Dash vs Reflex vs Others", "Author": "Sea_Split_1182", "Content": "Where can I find a decent comparison (pros and cons) of these 5 solutions? They seem to be solving the same problem, which is, afaiu, separating the frontend ‘annoyance’ from Python scripting / math.\n⁠Reflex (used to be called Pynecone) https://reflex.dev\n⁠Streamlit https://streamlit.io\n⁠Gradio https://gradio.app\n⁠Dash https://dash.plotly.com"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a python package that can parse Excel Formula Strings into dictionary structures!", "Author": "MPGaming9000", "Content": "What my project does: It basically takes a formula string like you'd get from Openpyxl like \"=SUM(A1:B2)\" and breaks it all out into a dictionary structure for you to then navigate through, modify, and then reformat that modified structure back into an excel friendly formula string again! Target Audience: (People who modify Excel formula strings in automated spreadsheet modification scripts. Or people who need to analyze formulas in a spreadsheet to do some kind of logic based on that analysis). Disclaimer: For most people some simple regex pattern matching and str replaces would be fine to modify formulas but if you need a more structured approach to working with these strings, this package has you covered!"},
{"Title": "Python icon library with 5237 high-quality icons (Tabler Icons wrapper)", "Author": "niklashnng", "Content": "What My Project Does:\npytablericons is a Python wrapper for the tabler-icons project, which provides a set of 5237 free MIT-licensed high-quality SVG icons for web projects with each icon being designed on a 24x24 grid and a 2px stroke.\nIt allows you to load any of those SVG icons directly into a Pillow PNG Image in any size and color without losing quality and without having to download the icons manually or handling the SVG conversion yourself. For the outline icons, the stroke width is customizable as well. All of this is done in just a single line and since the icon is a Pillow Image, it can then be used easily with basically anything (e.g. PyQt5, PyQt6, PySide2, PySide6, Tkinter, etc.)"},
{"Title": "Share Proejct: NLLB-200 Distill 350M en-ko", "Author": "SaeChan5", "Content": "Hello , I'm excited to share a project that was initially intended to use in my graduating product(Capstone) What My Proeject Does I made NLLB-200 Distill 350M model to translating English to Korean Target Audience GPU servers are quite expensive, so I made it for university students who can't cost the server (like me.) Comparison It's even smaller and faster the other NLLB-200 model. so it can be run with CPU! more details are in my page If you know Korean, please give me a lot of feedback https://github.com/newfull5/NLLB-200-Distilled-350M-en-ko thank you!!"},
{"Title": "Hatch v1.10.0 - UV support, new test command and built-in script runner", "Author": "Ofekmeister", "Content": "Hello everyone! I'd like to announce version 1.10.0: https://hatch.pypa.io/latest/blog/2024/05/02/hatch-v1100/ Feel free to provide any feedback either here or as a discussion on the repo: https://github.com/pypa/hatch"},
{"Title": "A word search game generator", "Author": "RRTheGuy", "Content": "https://github.com/RadoTheProgrammer/motsmeles/\nWhat my project does\nIt generate word search games with custom words, dimensions.\nTarget audience\nFor people who want to get fun with some word searching\nComparison"},
{"Title": "ASCII plot backend package for matplotlib", "Author": "jetpack_away", "Content": "Hi I've made a package called mpl_ascii which is a backend for matplotlib. You can find it here: https://github.com/chriscave/mpl_ascii I would love to share it with others and see what you guys think What it is It is a backend for matplotlib that converts your plots into ASCII characters. At the moment I have only made support for: bar charts, scatter plots and line plots but if there's demand for more then I would love to keep working on it. Target Audience: Anyone using matplotlib to create plots who might also want to track how their plots change with their codebase (i.e. version control)."},
{"Title": "What does your python development setup look like?", "Author": "Working_Noise_6043", "Content": "I'd like to explore other people's setup and perhaps try need things or extra tools. What kind IDE, any extra tools to make it easier for you, etc. Looking forward to everyone's responses!"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Cross platform python3 shebang", "Author": "tedkotz", "Content": "There is no shebang line that actually works across platforms for python 3. I would like one that works on unmodified :\nDebian shell (Dropped python2, falls under PEP 394)\nOlder Linux shells that still have python pointing to python2 (PEP 394)\nWindows cmd.exe shell (this really just means one that will work with PEP 397)\nGitbash for Windows (sort of a weird half sibling that respects shebangs)"},
{"Title": "Tutorial on Building a Server-to-Server Zoom App with Python", "Author": "SleekEagle", "Content": "I made a tutorial on how to build a server-to-server Zoom OAuth application using Python. This application can transcribe Zoom meeting recordings, print the transcripts to the terminal, and save the transcripts as text files.\nvideo tutorial\nrepo\nwritten tutorial"},
{"Title": "What's the best library to find differences in two text files and visulaize it?", "Author": "TheGupta", "Content": "difflib is popular. Most of the answers on Stack Overflow uses it. But, I think Google's diff-match-patch is better. See an example here. Or, am I missing something?"},
{"Title": "Multipart File Uploads to S3 with Python", "Author": "tylersavery", "Content": "I created this tutorial after overcoming a difficult challenge myself: uploading 5GB+ files to AWS. This approach allows the browser to securely upload directly to an S3 bucket without the file having to travel through the backend server. The implementation is written in python (backend) and vanilla js (frontend)."},
{"Title": "American Airlines scraper made in Python with only http requests", "Author": "JohnBalvin", "Content": "Hello wonderful community, Today I'll present to you pyaair, a scraper made pure on Python https://github.com/johnbalvin/pyaair Easy instalation ` ` `pip install pyaair ` ` ` Easy Usage ` ` ` airports=pyaair.airports(\"miami\",\"\") ` ` ` Always remember, only use selenium, puppeteer, playwright etc when it's strictly necesary Let me know what you think, thanks About me: I'm full stack developer specialized on web scraping and backend, with 6-7 years of experience"},
{"Title": "Alternative data managment tool to replace the need to use Jupyter Notebook for Python", "Author": "IllogicalLunarBear", "Content": "What My Project Does: For everyone who says they use jupyter Notebook for Python to do chunks of code work… I developed my own data management system for that kind of stuff that provides a wrapper over serialization that essentially creates pythonic pointers to data on any network drive. I just grab my data that I want to grab. Provides autocomplete and C# like attributes. I can dynamically build any data storage class using UML formatted infrastructure-as-code to build the front end. The back end is completely dynamic. Here is the pypi link. Note that I developed this to handle genomic data that was generated over the course of a week of 24/7 computation, that I break into multiple logical chunks. You dont need to rely on Jupyter to hold your data and you can retrieve it months after generating it."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a Python app that turns your Figma design into code", "Author": "axorax", "Content": "Link: https://github.com/Axorax/tkforge Hey, my name is Axorax. I have been programming for a few years now. I started making a lot more projects in Python recently and this is one of them. I decided to call the project TkForge. What My Project Does TkForge allows you to turn your Figma design into code. So, you can make the UI for an app in Figma and add input fields, buttons and much more and name them properly then you can run TkForge to convert your Figma design into code. The names need to be the element that you want. For example; if you want a button element then you can name it \"button\" or \"button Hello World!\". The \"Hello World!\" portion will just get ignored. All of the text after the first space is ignored. However, for some elements, they matter. Like, if you want a textbox element with the placeholder text of \"Hello\" then you need to name it \"textbox Hello\"."},
{"Title": "Ruff 0.4.0 just dropped, with a faster parser and a new language server", "Author": "QueasyEntrance6269", "Content": "Release notes here, seems to be a 20-40% improvement around the board. This version features a new hand-written parser (rather than a generated one) that is much faster and offers better error messages. It also comes with a new rust-native language server inspired by rust-analyzer, that is multithreaded. I think they’re challenging Pylance’s throne, wouldn’t be surprised if the team goes after type checking next."},
{"Title": "Suggestions for a self-hosted authentication as a service?", "Author": "FlyingRaijinEX", "Content": "I have a simple backend REST API service that is serving a few ML models. I have made it \"secured\" by implementing an API key in order call those endpoints. I was wondering, how common it is for people to use services that can be self-hosted as their authentication/authorization. If it is common and reliable, what are the best options to go for? I've read that building your own authentication/authorization service with email verification, password reset, and social auth can be a pain. Also, did some googling and found this General - Fief. Has anyone ever tried using this? If so, how was the experience?"},
{"Title": "milkcow - First package/library", "Author": "Samuel_G_Reynoso", "Content": "Excited to share milkcow, my first python package. I'd love any feedback, and to continue to build out the parts of this package that show potential. https://pypi.org/project/milkcow/ https://github.com/SamReynoso/milkcow What MilkCow Does Milkcow automates database creation and offers in-memory key-value mapping for data handling. Whether you're building middleware, local storage, or multiprocessing scripts. Target Audience MilkCow is designed for developers looking to streamline the development process. It caters to those who want to simplify data."},
{"Title": "One pytest marker to track the performance of your tests", "Author": "toodarktoshine", "Content": "Hello Pythonistas!\nI just wrote a blog post about measuring performance inside pytest test cases. We dive into why it’s important to test for performance and how to integrate the measurements in the CI.\nHere is the link to the blog: https://codspeed.io/blog/one-pytest-marker-to-track-the-performance-of-your-tests"},
{"Title": "Understanding State Machines in Python Through a Practical Example", "Author": "pemidi", "Content": "Hey everyone! I've written an article that simplifies the concept of state machines using Python, with a practical example related to order statuses. If you've ever been confused about state machines or just want a refresher with a real-world application, this might be just what you're looking for. Check it out and let me know what you think!\nRead the full article here I'm here for any questions or discussions"},
{"Title": "Python Quality Standards", "Author": "nicomarcan", "Content": "Hey, happy Friday (don't push to prod). Me and some friends are building a no-code platform to run code improvement agents (really in BETA) . We want to have a quality agent for each language, and I would really appreciate your feedback on python best practices and standards. The agents are created by defining the steps that you want to apply in natural language. Right now our Python agent has the following steps:\nUse descriptive naming for functions and variables."},
{"Title": "How to create architecture diagrams from code in Jupyter Notebook", "Author": "writer_on_rails", "Content": "Hello world,I wrote an article about creating diagrams from code on Jupyter Notebook inside VS Code. It will give you a brief on the setup and also an overview of concepts. Within 5 minutes, you should be able to start making cool architecture diagrams. [TO MODERATOR: This link does not contain any paywalled or paid content. All the contents are available for free] Article link: https://ashgaikwad.substack.com/p/how-to-create-architecture-diagrams"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Starter Code for a LLM-based AI Assistant", "Author": "2bytesgoat", "Content": "Hey everyone 👋 TL;DR\nSince everyone is talking about the Humane AI Pin and the Rabbit R1, I decided to make a short 5 minute tutorial on how people can setup and customize their own little AI assistant on their machine. I've uploaded a video tutorial here: https://www.youtube.com/watch?v=2fD_SAouoOs&ab_channel=2BytesGoat And the Github code is here: https://github.com/2BYTESGOAT/AI-ASSISTANT Longer version"},
{"Title": "Project: An Interactive Python Dashboard For Data Storytelling UN Food Security", "Author": "jgloewen", "Content": "Python’s Plotly Dash is a powerful tool for creating interactive data visualizations. As a Comp Sci professor, I use it extensively for interactive dashboards. Its usefulness lies in its ability to create web-based applications directly from Python code, without the need for additional web development skills.\nUsing UN food security data, let me show you an example of how you can create an interesting and useful Python Plotly dashboard that tells a data story using:"},
{"Title": "How To Build a Social Media Sentiment Analysis Pipeline With FastAPI And Generative AI", "Author": "arthurdelerue25", "Content": "Social media like Reddit, Hacker News, Twitter, etc. contain tons of genuine discussions that you might want to analyze automatically with sentiment analysis. For example you might want to monitor what people say about you, your product, your competitors, etc. I made a technical article that shows how to implement such a sentiment analysis pipeline using the following steps:\nImplement social media listening\nIntegrate the data in your system with an API webhook processed in Python/FastAPI"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter, a weekly news and project resource", "Author": "HP7933", "Content": "The Python on Microcontrollers (and Raspberry Pi) Newsletter: subscribe for free\nWith the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe."},
{"Title": "I made a Python desktop app using PyWebview (similar to ElectronJS) & ReactJS that tracks time.", "Author": "zynix", "Content": "https://github.com/devdave/pyminder What does it do? The application is a very simple time tracker broken down by Client->Project->Task. In addition it has a summary report view plus a simple CRUD like data manager. The bigger goal was to see what it entailed to mix Python w/ReactJS and if it was easier using HTML+TypeScript over QT, TK, or some other unique API. Target Audience While I am using PyMinder to track my own work it wasn't meant for a general audience. Instead I am sharing this in case anyone else has a need to make a desktop application and looking for alternatives."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "How to auto-instrument Python servers w/ OpenTelemetry for performance & error monitoring", "Author": "__boba__", "Content": "Hi everyone! We've recently written up a guide for anyone running a Python server (ex. Flask, Django, FastAPI) to instrument their app to debug slow downs and errors using the CNCF OpenTelemetry project and their Python instrumentation package. It's really straightforward to get started with just a few lines of added code and commands to any Python project, so hopefully helps some people out as they're looking to add better instrumentation to their servers. Here's the tutorial: https://www.hyperdx.io/blog/opentelemetry-python-server-auto-instrumentation"},
{"Title": "Import pdf into python GUI and measure length within PDF", "Author": "Most-Guarantee956", "Content": "I'm interested to create a software where I can import some construction drawings and measure the distance within the PDF as a first step of my work. Tried a few open source pdf but none of them still allows me to have a correct measurement on the PDF, anyone have an idea?"},
{"Title": "Python Interview Cheat Sheet Website!", "Author": "ixatrap", "Content": "Hey everyone, I’ve recently launched a new website aimed at helping fellow programmers ace their Python interviews. It’s not just limited to Python though; it also covers essential topics like big-O notation, object-oriented programming, design patterns, and more! I’d love to hear your thoughts and feedback on the content, layout, and anything else you think could be improved. Check it out here https://hlop3z.github.io/interviews-python/ and let me know what you think. Your input is invaluable in making this resource the best it can be. Thanks in advance for your time and insights! 🚀🐍"},
{"Title": "k8sAI - my open-source GPT CLI tool for Kubernetes!", "Author": "Wild_Plantain528", "Content": "What my project does: I wanted to share an open-source project I’ve been working on called k8sAI. It’s a personal AI Kubernetes expert that can answer questions about your cluster, suggests commands, and even executes relevant kubectl commands to help diagnose and suggest fixes to your cluster, all in the CLI! Target Audience: As a relative newcomer to k8s, this tool has really streamlined my workflow. I can ask questions about my cluster, k8sAI will run kubectl commands to gather info, and then answer those question. It’s also found several issues in my cluster for me - all I’ve had to do is point it in the right direction. I’ve really enjoyed making and using this so I thought it could be useful for others. Added bonus is that you don’t need to copy and paste into ChatGPT anymore!"},
{"Title": "PyPDFForm now lets you create widgets without Acrobat", "Author": "chinapandaman", "Content": "Hello ! Earlier this year I made a post about my open source project PyPDFForm and got some really nice feedbacks from you guys. I have been since then continuously working on it and I'd love to share you two really cool features that were newly added to the library. The first one is, like what the title says, the library finally supports creating a subset of widgets through code now. One of the previous hard dependency for PyPDFForm was that it requires a PDF template that was prepared using another tool, namely Adobe Acrobat or some web based ones like DocFly. Well now, at least for text field, checkbox, and dropdown, you can do it through plain Python code. I personally find this a huge milestone of the project and if you are interested in this new feature checkout the documentation ."},
{"Title": "Python Test 219: Building Django Apps & SaaS Pegasus - Cory Zue", "Author": "variedthoughts", "Content": "Listen at podcast.pythontest.com/219 When starting a SaaS project using Django, there are tons of decisions. I've asked Cory Zue, creator of SaaS Pegasus, to help me sift through some common SaaS/Django decisions."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Open Sourcing a Python Project the Right Way in 2024", "Author": "Vegetable_Study3730", "Content": "I recently open-sourced a package and the tooling was a bit of a struggle. I decided to write down the steps & all the tools needed to open-source a Python package in a scalable way that invite users and contributors. https://jonathanadly.com/open-sourcing-a-python-project-the-right-way-in-2024 Happy to hear your feedback!"},
{"Title": "🔭 OpenTelemetry Architecture: Python SDK Overview", "Author": "roma-glushko", "Content": "Hey folks,\nI have just posted an article for those who want to go a little bit beyond the basic usage of OTEL and understand how it works under the hood. The post quickly touches on:\n- 🔭 History and the idea of OpenTelemetry\n- 🧵 Distributed traces & spans. How span collection happens on the service side\n- 💼 Baggage & trace ctx propagation\n- 📈 Metrics collection. Views & aggregations. Metrics readers\n- 📑 OTEL Logging integration\n- 🤝 Semantic conventions and why that is important\nBlog Post:\nLet me know what do you think and hope this is helpful for someone 🙌"},
{"Title": "PkgInspect - Inspect Local/External Python Packages", "Author": "yousefabuz", "Content": "GitHub\nWhat My Project Does\nPkgInspect is a comprehensive tool designed to inspect and compare Python packages and Python versions effortlessly. It equips users with a comprehensive set of tools and utility classes to retrieve essential information from installed Python packages, compare versions seamlessly, and extract various details about Python installations with ease."},
{"Title": "Python Wrapper For Meta AI (Llama 3)", "Author": "Significant-Turn4107", "Content": "Here is just a small wrapper to interact with the new MetaAI chat bot assistant with Python (https://www.meta.ai/), which is running the newly release Llama 3 model. Another nice thing is that its directly connected with Bing Search so you will be able to get the latest informations. https://github.com/Strvm/meta-ai-api"},
{"Title": "How to create a Discord Bot to launch a Minecraft server automatically", "Author": "chadicus-gigo", "Content": "Hi y'all, This might be off topic a bit from the normal stuff that gets posted here, but a while back I was messing around on a Minecraft server that I was hosting on Aternos (a free online Minecraft server host). Now since the server wasn't running on my computer (and since Aternos has a timeout policy to save server resources) it became annoying for my buddies to hop on the server if I was busy. They'd have to ask me to manually start the server from the webpage. So I had a free Saturday a couple of months ago and decided to remedy this problem. My source code is hosted on a GIGO Dev environment if y'all wanna check it out:"},
{"Title": "2,000 free sign ups available for the \"Automate the Boring Stuff with Python\" online course. (May 20", "Author": "AlSweigart", "Content": "If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): *The sign ups are all used up, but you can still watch all the videos for free. Read below! https://udemy.com/course/automate/?couponCode=MAY2024FREE https://udemy.com/course/automate/?couponCode=MAY2024FREE2 If you are reading this after the sign ups are used up, you can always find the first 15 of the course's 50 videos are free on YouTube if you want to preview them. YOU CAN ALSO WATCH THE VIDEOS WITHOUT SIGNING UP FOR THE COURSE. All of the videos on the course webpage have \"preview\" turned on. Scroll down to find and click \"Expand All Sections\" and then click the preview link. You won't have access to the forums and other materials, but you can watch the videos."},
{"Title": "What are your favourite pre-commit hooks and why?", "Author": "LatterConcentrate6", "Content": "Just getting started with pre-commit and I think it's awesome. Looking to find out what other code automation tools people are using. Let me know what works for you and why. Thanks!"},
{"Title": "Has PyPI ceased all support?", "Author": "baekalfen", "Content": "Does anyone know what’s going on behind the scenes of PyPI (who maintains `pip install`)? It seems like they’ve stopped processing support tickets over a month ago. I’ve hit the data limit for my package [PyBoy](https://github.com/baekalfen/pyboy), and I immediately posted a ticket to get the limit increased (as others have successfully done). But after more than a month, and several attempts at contacting the support team, I’ve heard nothing back, and I’ve run out of options. Does anyone know what’s happening, or how to get a comment from PyPI? My ticket is this one:"},
{"Title": "Best book for GUI development in Python", "Author": "Bekhyam", "Content": "Can you guys suggest some very good book for GUI development in Python? I'm currently working on a visualizer that needs many features to plot data on a 3D and 2D space. Using PyQt for this as it has threading support."},
{"Title": "Sensor-App: A Sensor Data Displaying/Streaming Android App written in Python", "Author": "StoneSteel_1", "Content": "Sensor-App is an Android App that's main focus is to help create a real-time mobile sensor data stream for computer applications, data collection, AR, VR, etc. Github: SensorApp\nFeatures of Sensor-App\nReal-Time Sensor Data display\nFaster Real-Time Sensor Data Streaming via TCP Sockets\nSimple and Easy setup of Data Streaming Server"},
{"Title": "Achieve true parallelism in Python 3.12", "Author": "ThatsAHumanPerson", "Content": "Article link: https://rishiraj.me/articles/2024-04/python_subinterpreter_parallelism I have written an article, which should be helpful to folks at all experience levels, covering various multi-tasking paradigms in computers, and how they apply in CPython, with its unique limitations like the Global Interpreter Lock. Using this knowledge, we look at traditional ways to achieve \"true parallelism\" (i.e. multiple tasks running at the same time) in Python. Finally, we build a solution utilizing newer concepts in Python 3.12 to run any arbitrary pure Python code in parallel across multiple threads. All the code used to achieve this, along with the benchmarking code are available in the repository linked in the blog-post."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "UXsim 1.2.0 released with support for (self-driving) taxis and shared mobility", "Author": "Balance-", "Content": "Version 1.2.0 of UXsim is released, which allows simulating taxis, shared mobility and self-driving taxis! Main Changes in 1.2.0\nAdd taxi (aka. shared mobility) functions\nA standard vehicle in UXsim just travel from A to B and disappear. This is like a private owned vehicle.\nFrom this update, a Vehicle with mode=\"taxi\" behave like a taxi. Specifically, they travel through a network by passing through specific nodes that are dynamically updated, simulating passenger pickup and drop-off."},
{"Title": "MPCode is a scripting programming language", "Author": "weksoftware", "Content": "MPCode is a small open-source scripting programming language written in python 3.12 The repository with the same name on github.com allows you to modify the language to your own needs, execute small scripts, write programmes and libraries.\nThe language itself already has functions, object groups, logical operators, loops and variables.\nThe current functionality has documentation in three languages (English, Italian and Russian) and some small code samples.\nIt would be very nice to get feedback and ideas from you.\nYou can also develop your own projects based on it, as the project is licensed by MIT.\nLink to the repository:"},
{"Title": "Best way to grade Jupyter-Notebooks?", "Author": "flying_Wahale", "Content": "I recently took a job with a professor, that includes helping with the grading of biweekly assignments. So I basically have now 30 Notebooks that I have to grade. Top of my head I can think of these approaches:\nConvert to PDF and write into the PDF\nDuplicate the Notebook and write the comments in extra blocks\nCreate a .txt file with all my note"},
{"Title": "Web API Security Champion: Broken Object Level Authorization (OWASP TOP 10) for Python Developers", "Author": "theowni", "Content": "Explaining one of the most common web API vulnerability classes - Broken Object Level Authorization in a practical manner. Providing a case study example based on the Damn Vulnerable RESTaurant API, including methods for identifying and preventing these vulnerabilities. https://devsec-blog.com/2024/04/web-api-security-champion-broken-object-level-authorization-owasp-top-10/"},
{"Title": "What is your best Tkinter project that you put a lot of effort into creating?", "Author": "_-Dan_-", "Content": "I want to hear your description of the project you are most proud of. I was just trying to find something on the Internet, but I didn't find much of interest. The only difficult project was CustomTkinter, which, as far as I know, was done entirely in Tkinter. Since it is possible to create something this complex, I'm sure you have something cool too.\nNote: I am expecting to hear projects more complex than a calculator :)"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Zillow scraper made pure in Python", "Author": "JohnBalvin", "Content": "Hello everyone., on today new scraper I created the python version for the zillow scraper. https://github.com/johnbalvin/pyzill What My Project Does The library will get zillow listings and details.\nI didn't created a defined structured like on the Go version just because it's not as easy to maintain this kind of projects on python like on Go.\nIt is made on pure python with HTTP requests, so no selenium, puppeteer, playwright etc. or none of those automation libraries that I hate."},
{"Title": "Created Netlify DNS Manager: CLI Tool for uploading zone Files to Netlify or exporting Netlify DNS", "Author": "snorkell_", "Content": "What My Project Does? Command-line tool to simplify the management of DNS records for domains hosted on Netlify, whether you want to migrate to Netlify or migrate away from Netlify.\nImport Zone File from Godaddy, NameCheap or others to Netlify - helpful in migrating nameservers.\nExport DNS records from Netlify as zonefile to be import it to Godaddy, Namecheap or other servers."},
{"Title": "ConfigClass - simple dataclass inspired configuration", "Author": "TheTerrasque", "Content": "What My Project Does I'm making a simple configclass for handling configuration in smaller projects and scripts. Goal is to be as simple to start with as creating a dataclass. The module itself works off dataclass and when you use it you just define a dataclass as normal, but decorate it with @configclass() instead. Example: from configclass import configclass\n\n@configclass()\nclass Settings:\n    foo: bool = False\n    url: str = \"\"\n    footoo: bool = True\n    my_model: str = \"model.pt\"\n\nsetting = Settings.load()\n\nprint(setting.foo, setting.footoo, setting.my_model)"},
{"Title": "tach - a Python tool to enforce modular design", "Author": "the1024", "Content": "https://github.com/Never-Over/tach What My Project Does tach is a lightweight Python tool that enforces boundaries and dependencies in your Python project. Inspired by nx, tach helps you maintain a decoupled and modular Python codebase. An earlier version of this tool was called modguard, which we shared here. By default, Python allows you to import and use anything, anywhere. Over time, this results in modules that were intended to be separate getting tightly coupled together, and domain boundaries breaking down. We experienced this first-hand at a unicorn startup, where the eng team paused development for over a year in an attempt to split up packages into independent services. This attempt ultimately failed."},
{"Title": "Just an Appreciation Post for the Python Standard Library", "Author": "SpeakerOk1974", "Content": "Approaching a year into my journey of learning Python (I come from a C background) I finally understand the beauty and ubiquity of the langauge. Initially, I was hesitant to learn a dynamically typed and interpreted language when job requirements required me to learn it (I help support a team of Power Systems Engineers, and our professional software uses python for scripting). My first attempts were extremely unpythonic and it felt like I was fighting the language (index based looping, declaring variables before use, C style procedural code on top of Pandas antipatterns) and the lack of brackets I found appalling. Then I had my first code review with a helpful Senior engineer. We refactored my code together and something beautiful came together. He then told me to read the Zen of Python. It was love at first \"import this\". I was hooked. Every waking moment for weeks I was learning all I could muster about python."},
{"Title": "ext-message: Send files over Discord direct messages", "Author": "FeLoNy111", "Content": "Hey all! I recently made a library for sending text files over Discord DMs https://pypi.org/project/ext-message/ https://github.com/jwjeffr/ext-message/ What my project does This code is a command-line interface for sending text files to Discord DMs from a bot. Target audience My personal use-case is for my research, where I run long simulations (~72 hours) on a computing cluster. These simulations generate log files, so I can send myself the log file after the simulation, letting me: - Know that the simulation is done - Check that the simulation ran as intended without having to SSH into the cluster. As of now, those running similarly heavy code looking to be notified when it finishes is my target audience, but I would love to hear other creative use cases to expand that audience!"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "pytest-ndb - debugging pytest tests in a notebook", "Author": "rhshadrach", "Content": "What My Project Does: Allows users to run a pytest test from a notebook or other REPL and capture local variables for inspection / debugging. While I think users should very often prefer debugging tests with a debugger, in certain situations where one deals with a nontrivial amount of data or many complex objects, being able to inspect and manipulate objects in a notebook can be helpful. Target Audience: Primarily data scientists, but more generally anyone who tests with large/complex objects that can be difficult to understand in a debugger. Comparison: I'm not aware of any alternatives, other than copy-and-pasting your pytest tests in a notebook."},
{"Title": "Google laysoff Python maintainer team", "Author": "jmreagle", "Content": "https://www.hindustantimes.com/business/google-layoffs-sundar-pichai-led-company-fires-entire-python-team-for-cheaper-labour-101714379453603.html Are there any ramifications for the Python community outside of Google?"},
{"Title": "chatpdb - gpt for your python debugger", "Author": "the1024", "Content": "https://github.com/Never-Over/chatpdb Do you ever copy code, errors, or stack traces into ChatGPT? We did, and found it frustrating to always have to manually find, copy, and paste each relevant piece of information. On top of that, being forced to change tools would switch our focus and cause us to lose our flow. That’s why we built chatpdb  - a python debugger with ChatGPT! Simply use chatpdb like you would use ipdb or pdb; it’s a drop in replacement with the exact same functionality. The only addition is the new y keyword, which will trigger a response from ChatGPT."},
{"Title": "groupby in Python| Python Hacks you might now know.", "Author": "hasanul_islam", "Content": "Groupby in itertools module of python works differently that you might have thought. In this video, I have tried to explain very clearly about this feature. You are requested to watch the video. If you like, you can share the video and subscribe my youtube channel for further hacks. https://youtu.be/sX8G8qNwxjc?si=UTdHvbDKIMfOGhpr"},
{"Title": "pyrseus - concurrent.futures extensions for easier troubleshooting", "Author": "Mental-Elephant-6215", "Content": "https://github.com/dalleyg/pyrseus What My Project Does Pyrseus extends Python’s concurrent.futures asynchronous and concurrent programming package with:\na collection of non-concurrent executors for light workloads and troubleshooting,\nExecutorCtx, a factory for easily switching between different executors, and\na collection of ready-built ExecutorCtx plugins, supporting executors from concurrent.futures, ipyparallel, loky, mpi4py, and itself. Where relevant, optional cloudpickle-enhanced plugins are also provided."},
{"Title": "python irl in london england", "Author": "ProsodySpeaks", "Content": "are there any groups, meets, events etc i can get involved with locally in london uk? i've got moderate python chops as well as a wide range of other skills and tools, notably construction and event organisation/production/management, but also 3d design and print, some electronics and others. i work flexible hours and honestly am looking to develop a network and experiences to land my first job that at least involves some coding - i'm happy to commit significant time and resource to interesting projects to get eventually my foot or at least my nose in a door somewhere. (i dont mean i would stop contributing to the project once i land a job!)"},
{"Title": "Handling of long-running processes with timeouts in Flask + Gunicorn API app", "Author": "zacky2004", "Content": "I run an API (Python + Flask + Gunicorn) which has an endpoint that's calls a nested processes, which can sometimes take 6 seconds, to sometimes 60+ seconds to complete. The time it takes isn't a measure of my API's performance really, but rather its bottlenecked by an external service that the process has to rely on. Im looking for any suggested libraries that can safely handle this secondary process asynchronously with a long timeout. Ideally the API endpoint is called, and it won't have to wait for this process to finish if it takes more than 30+ seconds.\nHere's a mockup of what the chain of commands look like."},
{"Title": "Analyzing Python Compression Libraries: zlib, LZ4, Brotli, and Zstandard", "Author": "dhilip-siva", "Content": "Source Code: https://github.com/dhilipsiva/py-compress-compare\nAnalyzing Python Compression Libraries: zlib, LZ4, Brotli, and Zstandard\nWhen dealing with large volumes of data, compression can be a critical factor in enhancing performance, reducing storage costs, and speeding up network transfers. In this blog post, we will dive into a comparison of four popular Python compression libraries—zlib, LZ4, Brotli, and Zstandard—using a real-world dataset to evaluate their performance in terms of compression ratio and time efficiency."},
{"Title": "Deploying Multi-Module Python Applications on GCP: Service Recommendations?", "Author": "ste042024", "Content": "I'm working on a project involving a Python application with multiple interacting modules and am looking for some advice on deploying it efficiently on Google Cloud Platform. Here's a brief overview of what the application entails: Functionality Overview: • Data Fetching: One module fetches data from external websites. • Data Extraction: Another module extracts data from another GCP project. • Data Processing: Variables are processed across various modules. • CSV Output: The app generates and stores CSV files. • Scheduled Running: The application should run automatically once daily."},
{"Title": "I wrote a book on Python Regular Expressions - and made it free!", "Author": "code_x_7777", "Content": "Hi! I've just sorted through some of my books on Leanpub and decided to make the book on Python Regular Expressions free to download for a couple of days. Why? Just for fun and learning and to get some valuable feedback.\nFree ebook link: https://leanpub.com/regexpython/\nRegex Video Tutorials: https://blog.finxter.com/python-regex/\nThis book helps you learn regular expressions chapter by chapter. Each chapter first teaches the concepts and then asks you to solve Python puzzles (\"Guess the code!\") to master the concepts. The main idea is to keep it lightweight and fun."},
{"Title": "ScrumMD: A CLI Scrum tool written in Python", "Author": "thelochok", "Content": "I got grumpy with our Scrum process, and I thought about what kinda tool I'd love to work with... so I started making it in my beloved Python. I think it's mature enough I'd like to start giving it to other people. It's called ScrumMD. It's open source, and you can already install it with pip (pip install scrummd) if you've got Python 3.10+. Documented, with tutorials on https://scrummd.readthedocs.io/en/stable/ and source on https://github.com/lkingsford/scrummd What my project does Short version is that it's some tools to support you storing all of your Scrum cards (or, I guess, other cards - tickets perhaps?) in markdown format on a local machine. There's intentionally a lot of flexibility - so, every card needs a summary, but everything else is fair game. You can configure to require fields for some collections (like needing status in stories), or limit fields (like requiring status be 'Done' or 'In Progress')."},
{"Title": "How Malicious Python Code Gains Execution", "Author": "louis11", "Content": "The primary vector for malicious code running in software developer environments (e.g., local system, CI/CD runners, production servers, etc.) is software dependencies. This is third-party code which often means open-source software, also known as running code from strangers on the internet. The prized goal for attackers is arbitrary code execution. It’s the stuff high CVE scores are made of and often the topic of how vulnerabilities can turn into exploits. It’s the foothold needed to run cryptominers, steal secrets, or encrypt data for ransom. It’s no wonder why threat actors want it, but how do they get it? Sutton’s Law makes it obvious why they go after open-source software: because executing arbitrary code is easy there."},
{"Title": "Why Jupyter notebook", "Author": "IllogicalLunarBear", "Content": "I did a search and read previous discussions in this sub about why Jupyter labs exists. From what I understand it is for quick code to try things out especially in data science …. Thing is, can’t you get the same thing via a decent IDE with autocomplete and quality debug tools in some quick Python code like in VSCODE? I do that all the time…. I develop RNA computational software in Python and I abandoned Jupyter labs very early on as it just was not well suited to the job of bespoke data science. So many limitations and don’t get me started with widgets… I’ve been developing code for decades and I have spent 3 days trying to understand widgets and I think I finally understand how to modify a text box and get a value from it…. You have to observe (why?), then act on, then route through some output and then you can get the info? It’s like someone was drunk while trying to emulate visual C#."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Py2wasm: A Python to Wasm compiler 3x faster than pyiodide", "Author": "desmoulinmichel", "Content": "Take the excellent nuitka, compile python code to C, turn it into web assembly, and you got Python in the browser, without the usual runtime overhead:\nhttps://wasmer.io/posts/py2wasm-a-python-to-wasm-compiler While the doc states you can get this effect by doing: pip install py2wasm\npy2wasm myprogram.py -o myprogram.wasm"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Medical imaging Python jobs", "Author": "Durysik", "Content": "Hi folks! I am currently looking for a US (west coast best) based job where I could grow as a python programmer, specifically analysing medical images. Looking online I found some labs where they work with images, but I thought I'd ask (not sure if it's the right sub tho) cause I'm sure this way I'll hear about many places that deal with Medical Imaging. Thanks :)"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Big O Cheat Sheet: the time complexities of operations Python's data structures", "Author": "treyhunner", "Content": "I made a cheat sheet of all common operations on Python's many data structures. This include both the built-in data structures and all common standard library data structures. The time complexities of different data structures in Python If you're unfamiliar with time complexity and Big O notation, be sure to read the first section and the last two sections. I also recommend Ned Batchelder's talk/article that explains this topic more deeply."},
{"Title": "tab-pal: a TUI for adding and editing custom colour palettes in Tableau", "Author": "Ok-Frosting7364", "Content": "Source code: https://github.com/ben-n93/tab-pal\nWhat my Project Does\nMakes it quicker, easier and prettier to create custom colour palettes in Tableau. Rather than having to find your Preferences.tps file every time and edit the XML you can just launch tab-pal from the command-line and make any changes you want (adding/deleting new palettes, adding/removing colours. You also get a preview of the colours you've added. Target Audience\nData/business analysts and data scientists and who work with Tableau.\n\nThere are some websites that let you dynamically create the Preferences.tps XML file however this still requires you to locate the file and copy and paste over it with any changes you make"},
{"Title": "Runtime type checking performance", "Author": "gerardwx", "Content": "I'm trying to decide whether to use typeguard or stick to assert isinstance in the places where I care. Has anyone done benchmarking testing of the overhead of using type guards \"at\"typeguard decorator ?"},
{"Title": "Transforming Images to Art with Python: My Journey with Stable Diffusion", "Author": "Maleficent_Yak_993", "Content": "Hey Python community! I created a stable diffusion pipeline to convert reference images to prompt and used it along with text prompt to generate variations of reference image. Explainer video here: https://www.youtube.com/watch?v=x9VryjEcxzk"},
{"Title": "A Free GPT-Powered Financial Analysis Tool", "Author": "Starks-Technology", "Content": "Link to GitHub Page\nWhat My Project Does\nI created a simple financial analysis tool using the SimFin API and the GPT API. This tool summarizes financial information and makes it digestable for people who don't know a lot about finance.\nTarget Audience\nThis is more of a toy project for those interested in AI and Finance. It's meant for people without a ton of GPT experience to see a tangible use-case of generative AI within the field."},
{"Title": "pwdgen v2 -a simple password generator", "Author": "RRTheGuy", "Content": "https://github.com/RadoTheProgrammer/pwdgen\nWhat my project does\nMy project generate simple, strong, memorable and easy-to-type passwords. The system is simple: it generate 2 pronounceable words separated by a special char, with a number at start or end. I tried creating a password generator that combines simplicity, security, memorability, and ease of type. This should be secure enough because it can generate 4e15 possibilities of passwords and uses the module."},
{"Title": "bridge — automatic infrastructure for Django", "Author": "the1024", "Content": "https://github.com/Never-Over/bridge\nThe Problem\nWe built bridge to solve the most frustrating part of any new project — infrastructure. Whenever you spin up a new Django project, you usually have to manually configure Postgres, background workers, a task queue, and more. The problem is amplified when you go to deploy your application — hosting providers don’t understand anything about what you’ve configured already, so you have to run through an even more complicated process to set up the same infrastructure in a deployed environment."},
{"Title": "I made a Tkinter \"DevTools\" to inspect and modify widgets in your running app in real-time", "Author": "254hypebeast", "Content": "source: https://github.com/ObaraEmmanuel/Formation pypi: https://pypi.org/project/formation-studio/ What My Project Does Allows you to inspect widgets in your running Tk app in real-time. You can view the widget hierarchy, modify widget attributes, adjust widget layout and run arbitrary code to interact with your widgets through the embedded Python REPL console. It works just like DevTools in a browser. This debugger is part of the Formation studio project which is a drag-n-drop graphical UI builder for Tkinter. Target Audience Any Tk developer seeking to have an easier time debugging their UI or seeking to experiment with the Tk framework with minimal effort."},
{"Title": "I analyzed & visualized 7 years of music royalties with polars & Vega-Altair. Code in article", "Author": "fjogurpiano", "Content": "Hi all, I used polars (a Rust-powered “Blazingly Fast DataFrame Library”) to analyze seven years of my own music royalties data. Vega-Altair (Python wrapper for Vega-Lite) powers the (often interactive) visualizations. Link to the article: https://osc.garden/blog/data-analysis-music-streaming/ It was a lot of fun learning polars and setting up the graphs with Vega-Altair. Would love to hear any comments and suggestions. Link to r/dataisbeautiful post: https://www.reddit.com/r/dataisbeautiful/comments/1ca7x6z/oc_my_music_needs_more_than_200k_plays_on/"},
{"Title": "I made a Python CLI Tools for Competitive Programming", "Author": "Old-Manufacturer6209", "Content": "Source Code: https://github.com/JeanExtreme002/FastSnake PyPI: https://pypi.org/project/FastSnake/ What My Project Does FastSnake is a command-line tool that allows you to easily create, expand, run, and test Python solutions for competitive programming problems. 🐍🏁 This project provides useful CLI tools for competitive programming, such as test case generators, algorithms and data structures, tools for platforms Codeforces and AtCoder, and other features that assist you during the development and testing of solutions, besides building a nice directory structure to develop your solutions. 🤓"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "find_where - my first Python package published to PyPi", "Author": "dan_ohn", "Content": "PyPi\nSource What My Project Does\nfind_where is a Python package that provides a function to find values in dictionaries where a specified key matches a given value, similar to filtering in SQL. Target Audience\nThis is my first attempt at creating a Python package so I would describe this as a toy project at this stage but am definitely looking for feedback from the wider community. Comparison\nI mainly wrote this package because I kept on writing the same iterable based code when trying to find a value, given a key:"},
{"Title": "Meteor Science using Python - Creating a \"weird\" coordinate system", "Author": "MrAstroThomas", "Content": "Hey everyone, I am creating \"Space Science with Python\" tutorials on YouTube with free and open accessible Python code on GitHub. It is not fancy or a \"super high animation quality YouTube production\". I am just an astrophysicists (what a difficult word to write), working in industry who continues with science as a hobby. Ha! And I have some crazy niche knowledge that is not covered by Gemini or chatGPT (yet). Anyway, I am creating now a tutorial on meteor science and wanted to show you how to create a coordinate system that co-rotates with the Earth while it is revolving around the Sun."},
{"Title": "UXsim 1.1.1 released: Significantly increased performance for the network traffic flow simulator", "Author": "Balance-", "Content": "Version 1.1.1 of UXsim is released, which improves performance significantly. Main Changes in 1.1.1\nAdd setting to adjust vehicle logging time interval via World.vehicle_logging_timestep_interval\nBy lowering the interval (e.g., World.vehicle_logging_timestep_interval=2), the simulation time can be reduced (~20% speed up), and we can obtain vehicle trajectory data with slightly less accuracy.\nThe logging setting does not affect the internal simulation accuracy. Only the outputted trajectories are affected."},
{"Title": "I now know again why I stopped using mamba / conda for setting up virtual environments", "Author": "RareRandomRedditor", "Content": "I have started at a new job and had the idea that it would probably be clever to set up my developing environment in exactly the same way as my predecessor did. Because:\nThis should help resolving errors quicker in the transition period\nHis code was good and clean and it appears that he knows what he is doing\nwe were using mostly the same tools (VScode etc.) anyways.\nHe set up his virtual environments (VE)s with conda/mamba. I vaguely remembered that I also used to do that but then stopped for some reason and switched to the virtualenv package. But I did not remember why anymore. So I just set up my VEs in the same way, it should not really make any difference anyways (so I thought). Well, fast forward about two weeks and now I have VEs that occasionally (but not always) exist twice in the same folders under the same name (according to mamba info --envs) and that are at the same time completely empty (according to mamba list) and contain all packages I have installed anywhere, ever (according to pip list). I usually install packages via pip and I assume this may have fucked things up in combination with mamba? I'll probably switch back to virtualenv again and add a \"do not use conda/mamba VEs !!!\" in my notes. I am working on Windows. Is mamba better on Linux?"},
{"Title": "SecretScraper: highly configurable web crawler/scraper for extracting sensitive data from websites", "Author": "PadishahIII", "Content": "Hi, I'm a cybersecurity enthusiastic. And I've made a web crawler/scraper tool to extract links and sensitive information against target websites. You can find it here: https://github.com/PadishahIII/SecretScraper. What My Project Does SecretScraper is a highly configurable web scraper tool that crawls links, extracts subdomains from target websites and finds sensitive data using regular expressions. The features included in the SecretScraper are:\nWeb crawler: extract links using both DOM hierarchy and regex"},
{"Title": "Commercial pip packages?", "Author": "Normal_Antenna", "Content": "I’m aware there is a big open source community aspect to the python community. So my question is: “would uploading commercial software as a pip package offend the community?” I’m hesitant if this is normal, and if users would consider trials for components that would then make their project ask for a license to work after some time. Just wondering if it’s worth the effort to make products more accessible, or if it would just rub users the wrong way."},
{"Title": "Pandas Python Introduction", "Author": "cyprusgreekstudent", "Content": "I'm sharing some of the Python tutorials I made. I teach Ukrainian teenagers and university students Python programming and data science for free. Here is an introduction to Pandas. It shows:\nHow to read data into a Pandas dataframe from a CSV file.\nShow how to print out the column names.\nSee and set the index.\nPrint sections of the dataframe."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Question: Tool for editing figures in Python", "Author": "Dangerous_Law1678", "Content": "So I'm trying to switch from MATLAB to Python for my numerical simulations. One of the things I like about MATLAB is the ability to edit figures by adding stuff (eg arrows, lines, text ... ) to the figure within the software itself. This is what I mean. It's a very handy tool in my line of work and I use it often. I was wondering if there's any similar tool for Python. I use matplotlib and seaborn. Any suggestions would be great. Thanks guys!"},
{"Title": "Inline templating engine", "Author": "TheRealMrMatt", "Content": "I was wondering if anyone has come across anything like https://github.com/a-h/templ or https://hono.dev/guides/jsx, but for python. For context, I am familiar with jinja2, mako, etc. but find them to be unintuitive due to the loose coupling of logic (ex: database calls) and templating (ex: generating a list from the database results). Therefore, I am looking for a \"inline\" templating solution."},
{"Title": "TypeIs does what I thought TypeGuard would do in Python", "Author": "Ok_Analysis_4910", "Content": "While it's unfortunate to have two constructs—TypeGuard and TypeIs—with slightly different behaviors, I'm glad that the latter is less surprising. https://rednafi.com/python/typeguard_vs_typeis/"},
{"Title": "How fast can Python parse 1 billion rows of data? (1brc)", "Author": "mercer22", "Content": "https://www.youtube.com/watch?v=utTaPW32gKY I made a video summarizing the top techniques used by the Python community in the recently popular One Billion Row Challenge (1brc, https://github.com/gunnarmorling/1brc). I adapted one of the top Python submissions into the fastest pure Python approach for the 1brc (using only built-in libraries). Also, I tested a few awesome libraries (polars, duckdb) to see how well they can carve through the challenge's 1 billion rows of input data. If anyone wants to try to speed up my solution, then feel free to fork this repo and give it a shot!"},
{"Title": "I made Cria - Run LLMs (AI) locally and programmatically with as little friction as possible", "Author": "reformedbillclinton", "Content": "https://github.com/leftmove/cria My name is Anonyo, and I am a seventeen year old from Southeast Michigan. This is my second open source project. I built Cria, a Python library that allows you to run LLMs programmatically through Python. Cria is designed so there is as little friction as possible — getting started takes just five lines of code. I created this library because I was using OpenAI in my project, and kept running into rate limits. With local LLMs getting better and better, I sought to switch, but found command line configurations to be limited. Running and configuring LLMs can be trivial, but programs like ollama make it easier. The only problem I found with ollama though, was the lack of features in its Python client."},
{"Title": "Are PEP 744 goals very modest?", "Author": "MrMrsPotts", "Content": "Pypy has been able to speed up pure python code by a factor of 5 or more for a number of years. The only disadvantage it has is the difficulty in handling C extensions which are very commonly used in practice. https://peps.python.org/pep-0744 seems to be talking about speed ups of 5-10%. Why are the goals so much more modest than what pypy can already achieve?"},
{"Title": "Some days I really love python...", "Author": "Jazzlike-Compote4463", "Content": "I have a problem that I was terrible at listening to new music, everything I listen to is from around 2000 - 2010. There is a radio station here in the UK called BBC 6 music that has a decent playlist but since I only really listen in the car its not always appropriate to note the track names down - and my memory is terrible so I always forget by the time I get home. Luckily they put the playlist online but it's just text links so I can't add it to my music service of choice - YouTube Music. Thankfully the page is pretty simple so I wrote a basic ass scraper that will grab the HTML, parse through the tracks with beautful soup, then use the package to remove the old tracks from my playlist and recreate it with the freshly scraped data, then makes it dead easy to deploy and schedule it to run once a day."},
{"Title": "[tutorial] Data imputation on real-time data source", "Author": "oli_k", "Content": "Hi there, My team at Bytewax and I have been working on a series of hands-on guides on streaming data and I am excited to share how one can handle missing values in real-time in Python. While some parts of the guide are simplified, for example, we use a random number generator as an input source, the algorithmic part is production-ready. We are taking advantage of the Numpy library + stateful operators in Bytewax. Other input sources are available, too. https://bytewax.io/guides/handling-missing-values"},
{"Title": "Pure Python Physics Engine", "Author": "More-Tower9993", "Content": "What My Project Does The Physics Engine Called PhysEng, provides an easy to use environment and visualization combo in which to try out different physics or even provide a template to design your own accelleration/velocity fields. Besides the visualization aspect and numpy the basic functions of the Engine are written completely in 100% python. The features included in the Engine are:\nParticles, Soft Bodies, Anchor points\nBuilt in Fields: Drag, Uniform Force Fields, Gravity Between Particles, Octree Gravity etc"},
{"Title": "Meta Used Monolithic Architecture Using Python to Ship Threads in Only Five Months", "Author": "rgancarz", "Content": "https://www.infoq.com/news/2024/04/meta-threads-instagram-5-months/ Zahan Malkani talked during QCon London 2024 about Meta's journey from identifying the opportunity in the market to shipping the Threads application only five months later. The company leveraged Instagram's existing monolithic architecture, written in Python and PHP, and quickly iterated to create a new text-first microblogging service in record time."},
{"Title": "Molly - a data quality monitoring library specifically designed for time series data", "Author": "flaviaouyang", "Content": "What My Project Does\nMolly is designed to monitor time series data in a SQL database such as MySQL or PostgreSQL. Currently supported data quality feature:\n- staleness: when the data was last updated\n- completeness: whether any data is missing in a given date range Currently support messaging service:\n- Slack Web API"},
{"Title": "In what way do you try out small things when developing?", "Author": "HatWithAChat", "Content": "I've noticed at work that my coworkers and I try out small things in different ways. Small things like if you want to try that adding two datetimes together behaves in the way you expect. Some people use jupyter notebook for this and others run python interactively in a separate command prompt. I usually run debug in whatever IDE I'm using and then letting it stop at the code I'm currently developing and then using the debug console to test things out. Sometimes this means just leaving the debugger at a breakpoint for half an hour while I continue writing code. Is my way of doing it weird or does it have any disadvantages? How do you usually test out things on the go in a good way?"},
{"Title": "float('inf') is bad practice", "Author": "Librarian-Rare", "Content": "I don't know why float('inf') was chosen as the way the language accesses infinity since this is using a magic string. Why couldn't it just be float.inf? That way magic string is avoided. Feels too basic of a best practice to be simply passed up. Anyone know the reason behind this?"},
{"Title": "What is currently the fastest/state-of-the-art ODE solver in Python?", "Author": "D_vd_P", "Content": "For my application, Scipy's solvers are not fast enough so I am looking to speed up by using another package. These are some packages I have found so far:\nNumbaLSODA\nDifferentialEquations.jl\nTorchquad\n(Although doesn't solve ODEs, just integrates quickly, but that could be wrapped I guess)"},
{"Title": "ArchiveFile: Unified interface for tar, zip, sevenzip, and rar files", "Author": "PredatorOwl", "Content": "What My Project Does archivefile is a wrapper around tarfile, zipfile, py7zr, and rarfile. The above libraries are excellent when you are dealing with a single archive format but things quickly get annoying when you have a bunch of mixed archives such as .zip, .7z, .cbr, .tar.gz, etc because each library has a slightly different syntax and quirks which you need to deal with. archivefile wraps the common methods from the above libraries to provide a unified interface that takes care of said differences under the hood. However, it's not as powerful as the libraries it wraps due to lack of support for features that are unique to a specific archive format and library."},
{"Title": "Using Pandas 2 and different datetime erros", "Author": "technically_right_", "Content": "Hey Folks, I am working on a project that uses a bit old pandas version (1.5.3). I am trying to update it and use a more recent version (2.2.2). Its the first time I use pandas 2 btw. I simply ran all my unit tests and got multiple and different errors all concerning some datetime aspects. I tried troubleshooting by searching the errors and look in pandas release note but I find really complicated. It feels like the documentation is really exhaustive but I could really use a note on principal errors one can get switching to pandas 2. Does anyone have any handy blogpost, article, documentation that specifies this ? My focus is mainly on datetime errors when differences computed or comparaisons"},
{"Title": "I made an easy and secure data lake for Pandas", "Author": "realstoned", "Content": "What My Project Does Shoots is essentially a \"data lake\" where you can easily store pandas dataframes, and retrieve them later or from different locations or in different tools. Shoots has a client and a server. After choosing a place to run the server, you can easily use the client to \"put\" and \"get\" dataframes. Shoots supports SQL, allowing you to put very large dataframes, and then use a query to only get a subset. Shoots also allows you to resample on the server. # put a dataframe, uploads it to the server  \ndf = pd.read\\_csv('sensor\\_data.csv')  \nshoots.put(\"sensor\\_data\", dataframe=df, mode=PutMode.REPLACE)  \n\n\n# retrieve the whole data frame  \ndf0 = shoots.get(\"sensor\\_data\")  \nprint(df0)  \n\n# or use sql to retrieve just some of the data  \nsql = 'select \"Sensor\\_1\" from sensor\\_data where \"Sensor\\_2\" < .2'  \ndf1 = shoots.get(\"sensor\\_data\", sql=sql)"},
{"Title": "Announcing The Python Logging Book & Course Kickstarter", "Author": "driscollis", "Content": "New developers print out strings to their terminal. It’s how we learn! But printing out to the terminal isn’t what you do with most professional applications. In those cases, you log into files. Sometimes, you log into multiple locations at once. These logs may serve as an audit trail for compliance purposes or help the engineers debug what went wrong. Python Logging teaches you how to log in the Python programming language. Python is one of the most popular programming languages in the world. Python comes with a logging module that makes logging easy."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "kmeans-tjdwill: A K-Means Implementation that Maintains Data Association", "Author": "tjdwill", "Content": "Hello,   I recently published my first Python package on PyPi called kmeans-tjdwill (source). This is a k-means clustering implementation I wrote as a toy project that eventually was used extensively throughout my Master's degree, especially in my thesis. After a refactor and some optimization, I wanted to post here to hopefully elicit feedback and commentary from more experienced, professional software engineers. What My Project Does The central function is kmeans.cluster which segments input data into groups based on proximity to centroids. Users may either specify the initial means themselves or allow them to be chosen from among the input data. There is also a function for viewing the clustering process for 2-D and 3-D data, and, finally, a function that uses to perform image segmentation. Visual examples of both are found on the landing page of the Github repo linked above."},
{"Title": "Most-watched PyData conference & meetup talks from 2023", "Author": "ad81923", "Content": "Just came across this list and I think it's amazing: https://techtalksweekly.substack.com/p/all-pydata-2023-talks"},
{"Title": "Share Proejct: NLLB-200 Distill 350M en-ko", "Author": "SaeChan5", "Content": "Hello , I'm excited to share a project that was initially intended to use in my graduating product(Capstone) What My Proeject Does I made NLLB-200 Distill 350M model to translating English to Korean Target Audience GPU servers are quite expensive, so I made it for university students who can't cost the server (like me.) Comparison It's even smaller and faster the other NLLB-200 model. so it can be run with CPU! more details are in my page If you know Korean, please give me a lot of feedback https://github.com/newfull5/NLLB-200-Distilled-350M-en-ko thank you!!"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Is Pythonista (Python for iOS/iPadOS) no longer with active development and support?", "Author": "br_web", "Content": "I have not seen updates in almost a year and there is no activity in the support forum? Is there a replacement forum? Thanks"},
{"Title": "ASCII plot backend package for matplotlib", "Author": "jetpack_away", "Content": "Hi I've made a package called mpl_ascii which is a backend for matplotlib. You can find it here: https://github.com/chriscave/mpl_ascii I would love to share it with others and see what you guys think What it is It is a backend for matplotlib that converts your plots into ASCII characters. At the moment I have only made support for: bar charts, scatter plots and line plots but if there's demand for more then I would love to keep working on it. Target Audience: Anyone using matplotlib to create plots who might also want to track how their plots change with their codebase (i.e. version control)."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "zpy can now use uv as a backend to replace Python's venv module and pip-tools", "Author": "AndydeCleyre", "Content": "Hello!\nWhat My Project Does\nzpy is a set of Zsh functions, mostly wrapping pip-tools or uv, for the simple and practical management of Python virtual environments, dependency specifications, and isolated Python app installation. You may find it a suitable alternative to poetry, pipenv, pipx, or unaided pip-tools or uv. There's a focus on use of good old requirements.txt files, and extensive tab completion assistance."},
{"Title": "Cross platform python3 shebang", "Author": "tedkotz", "Content": "There is no shebang line that actually works across platforms for python 3. I would like one that works on unmodified :\nDebian shell (Dropped python2, falls under PEP 394)\nOlder Linux shells that still have python pointing to python2 (PEP 394)\nWindows cmd.exe shell (this really just means one that will work with PEP 397)\nGitbash for Windows (sort of a weird half sibling that respects shebangs)"},
{"Title": "Jobs that utilize Jupyter Notebook?", "Author": "Shadowforce426", "Content": "I have been programming for a few years now and have on and off had jobs in the industry. I used Jupyter Notebook in undergrad for a course almost a decade ago and I found it really cool. Back then I really didn’t know what I was doing and now I do. I think it’s cool how it makes it feel more like a TI calculator (I studied math originally) What are jobs that utilize this? What can I do or practice to put myself in a better position to land one?"},
{"Title": "Announcing pixi-kernel - Jupyter kernels using Pixi for reproducible notebooks", "Author": "renanengmec", "Content": "What My Project Does?\nHello everyone, I'm proud to announce a brand-new Python library named pixi-kernel: https://github.com/renan-r-santos/pixi-kernel allowing you to run Jupyter kernels using Pixi for reproducible notebooks. By the way, if you haven't heard of the Pixi package manager, check it out at https://pixi.sh/latest/.It supports conda and PyPI (through uv) packages, pyproject.toml config, git, path and editable installs and it is really fast."},
{"Title": "American Airlines scraper made in Python with only http requests", "Author": "JohnBalvin", "Content": "Hello wonderful community, Today I'll present to you pyaair, a scraper made pure on Python https://github.com/johnbalvin/pyaair Easy instalation ` ` `pip install pyaair ` ` ` Easy Usage ` ` ` airports=pyaair.airports(\"miami\",\"\") ` ` ` Always remember, only use selenium, puppeteer, playwright etc when it's strictly necesary Let me know what you think, thanks About me: I'm full stack developer specialized on web scraping and backend, with 6-7 years of experience"},
{"Title": "How to Clean Data and work with outliers and Missing Data in Python Pandas", "Author": "cyprusgreekstudent", "Content": "I made a detailed tutorial on how to work with missing data, outliers, and how to lean up data in Pandas Python. This explains how to clean up your data so that your statistical results and trainin data is not skewed. https://github.com/werowe/HypatiaAcademy/blob/master/pandas/pandas_missing_data.ipynb"},
{"Title": "motsmeles - word search generator", "Author": "RRTheGuy", "Content": "https://github.com/RadoTheProgrammer/motsmeles/ Note: This is written in french.\nWhat my project does\nIt generate word search games with custom words, dimensions.\nTarget audience\nFor people who want to get fun with some word searching\nComparison"},
{"Title": "I made a Python app that turns your Figma design into code", "Author": "axorax", "Content": "Link: https://github.com/Axorax/tkforge Hey, my name is Axorax. I have been programming for a few years now. I started making a lot more projects in Python recently and this is one of them. I decided to call the project TkForge. What My Project Does TkForge allows you to turn your Figma design into code. So, you can make the UI for an app in Figma and add input fields, buttons and much more and name them properly then you can run TkForge to convert your Figma design into code. The names need to be the element that you want. For example; if you want a button element then you can name it \"button\" or \"button Hello World!\". The \"Hello World!\" portion will just get ignored. All of the text after the first space is ignored. However, for some elements, they matter. Like, if you want a textbox element with the placeholder text of \"Hello\" then you need to name it \"textbox Hello\"."},
{"Title": "Tkinter Variable class C/Python garbage collection mismatch", "Author": "ranemaeker", "Content": "Tkinter is going to drive me crazy. Let me lay this out for you: Tkinter is the GUI interface I am using, which is a python frontend for a C library It holds \"widgets\" in a window. Some widgets have variables (StringVar, BooleanVar, etc - not \"variables\" like code variables but a class of updatable data holders for the widgets to link to the Tcl backend) The Vars have incremental names like PYVAR1, PYVAR93, etc by default. Names can be provided to the Vars via keywords upon initialization. (Note I have not been able to find any reason to not do this - hence this post) Names should absolutely be provided to the Vars unless they are unique. Because on python garbage collection (or \"del Var\" command) the Vars are told to destroy() themselves and then this command is passed to C \"destroy this Var.\""},
{"Title": "Heavy Stack - Top to Bottom Python, Dev Container, Hot Reloading, More", "Author": "JamesHutchisonReal", "Content": "Trying this again a third time because automod flagged it as a resource and the mods do not appear to be responding.https://github.com/heavy-resume/heavy-stack What it does: The Heavy Stack is a template web framework that is top to bottom Python using Sanic / (custom) ReactPy / Brython. It's a complete solution that just works out of the box. Target Audience: This is production capable but a little on the early side. Iterating is quite fast. Comparison: Compared to other web frameworks:\nJust works out of the box, even has a docker image ready to go for the server and your postgres database that uses PG Vector."},
{"Title": "milkcow - First package/library", "Author": "Samuel_G_Reynoso", "Content": "Excited to share milkcow, my first python package. I'd love any feedback, and to continue to build out the parts of this package that show potential. https://pypi.org/project/milkcow/ https://github.com/SamReynoso/milkcow What MilkCow Does Milkcow automates database creation and offers in-memory key-value mapping for data handling. Whether you're building middleware, local storage, or multiprocessing scripts. Target Audience MilkCow is designed for developers looking to streamline the development process. It caters to those who want to simplify data."},
{"Title": "I created an AI tool for using python to process excel and other files", "Author": "smallSohoSolo", "Content": "Hi, I'm Owen, and I've developed an AI tool for data processing. I spend a significant amount of time processing daily data from numerous Excel files, which requires me to write a lot of Python code. I have been using GitHub Copilot to assist with this, but I am exploring ways to eliminate the need to write code manually. The tool is called Tipis AI, and you can find it here: https://github.com/tipisai/tipis-fe What My Project Does Therefore, I have developed an AI that generates Python code for data processing. I've also created a Python runtime environment to execute this code."},
{"Title": "Behavior of AttributeError in @property and __getattr__", "Author": "Hatteras-", "Content": "I'm sure that many people have encountered the following (code for reproduction below) behavior: if during the execution of `@property`, an `AttributeError` is raised and the same class implements `__getattr__` then `__getattr__` is invoked with the name of the property resulting in a confusing message: `AttributeError: 'Foo' object has no attribute 'something'`. If we remove `__getattr__` then we get a more meaningful and correct message: `AttributeError: 'Foo' object has no attribute 'bar'`. from dataclasses import dataclass\n\n@dataclass\nclass Foo: val = 'foo_value'\n\nclass Test: \n    def __init__(self): \n        self.foo = Foo()\n\n    def __getattr__(self, name):\n        return getattr(self.foo, name)\n    \n    @property\n    def something(self):\n        return self.foo.bar\n\nt = Test() t.something"},
{"Title": "Python Quality Standards", "Author": "nicomarcan", "Content": "Hey, happy Friday (don't push to prod). Me and some friends are building a no-code platform to run code improvement agents (really in BETA) . We want to have a quality agent for each language, and I would really appreciate your feedback on python best practices and standards. The agents are created by defining the steps that you want to apply in natural language. Right now our Python agent has the following steps:\nUse descriptive naming for functions and variables."},
{"Title": "Ray on Golem MVP Launch: the Best Way of Running Python Code on the Golem Network", "Author": "GolemSM", "Content": "Golem Network has just released Ray on Golem MVP, a significant milestone in integrating Ray with Golem's decentralized infrastructure! 🎉\nCheck out all the details about the release and next steps in our blog post:\n📝 https://blog.golem.network/announcing-ray-on-golem-mvp-launch-the-recommended-way-of-running-python-code-on-the-golem-network/\n👉 Golem is looking for engaged beta testers to run diverse applications and collaborate on refining the solution. Interested? Find all the information on the brand-new Ray on Golem site:\n🔗"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Should I use pydantic for all my classes?", "Author": "uh_sorry_i_dont_know", "Content": "Pydantic makes your code safer by making it strongly typed. You can no longer input a wrongly typed argument without getting an error (if pydantic can't convert it). This is great but to me it seems that sometimes standard python classes still seem preferable. Perhaps it's because I'm not using it correctly but my code for a pydantic class is much longer then for a normal class. Especially if you are working with computed attributes. Then you have to start using special decorators and for every computed attribute you have to declare a function with \"def ...\" Instead of in an init function just being able to write attribute_3 = attribute 1 + attribute 2."},
{"Title": "Is Litestar production ready 2024?", "Author": "I_will_delete_myself", "Content": "At least a couple things that seems is that Litestar appears to be a fast Django lite. Some batteries included, but not too many and opinionated. It's uses Rust so of course it's going to be fast, not that it really matters that much since IO > CPU for a website IMO. Which any async framework addresses this. I haven't heard many people using it though despite it having a lot of batteries included, but not dominating everything with first party support. Anyone using it in production in 2024? Edit: Fact check it appers it isn't written in Rust, I probably confused it with something else or it might just be data serialization"},
{"Title": "How To Build a Social Media Sentiment Analysis Pipeline With FastAPI And Generative AI", "Author": "arthurdelerue25", "Content": "Social media like Reddit, Hacker News, Twitter, etc. contain tons of genuine discussions that you might want to analyze automatically with sentiment analysis. For example you might want to monitor what people say about you, your product, your competitors, etc. I made a technical article that shows how to implement such a sentiment analysis pipeline using the following steps:\nImplement social media listening\nIntegrate the data in your system with an API webhook processed in Python/FastAPI"},
{"Title": "Intermediate Project: Python Plotly Data Visuals: Dropdowns and Range Sliders For User Interaction", "Author": "jgloewen", "Content": "Interactive data visualization is a powerful tool that can significantly enhance the analysis and interpretation of complex datasets. With Python, the Plotly library offers various features that can be used to create interactive publication-quality graphs. This project demonstrates how to use 2 of these awesome features:\nRange Slider\nDropdown Menu"},
{"Title": "Demystifying list comprehensions in Python", "Author": "lyubolp", "Content": "In this article, I explain list comprehensions, as this is something people new to Python struggle with. Demystifying list comprehensions in Python"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "My latest TILs about Python", "Author": "JCx64", "Content": "After 10+ years working with it, I keep discovering new features. This is a list of the most recent ones: https://jcarlosroldan.com/post/329"},
{"Title": "Python Interview Cheat Sheet Website!", "Author": "ixatrap", "Content": "Hey everyone, I’ve recently launched a new website aimed at helping fellow programmers ace their Python interviews. It’s not just limited to Python though; it also covers essential topics like big-O notation, object-oriented programming, design patterns, and more! I’d love to hear your thoughts and feedback on the content, layout, and anything else you think could be improved. Check it out here https://hlop3z.github.io/interviews-python/ and let me know what you think. Your input is invaluable in making this resource the best it can be. Thanks in advance for your time and insights! 🚀🐍"},
{"Title": "Using Polars to Write Multiple LazyFrames to Delta from One Source File", "Author": "EngiNerd9000", "Content": "I'm working on an ETL job that reads in a JSONL file, splits it into multiple Polars LazyFrames, collects those to DataFrames, and then writes them to a Delta Table. Prior to doing this with Polars, I would generally complete a task like this with either Pandas or PySpark depending on the size of data I was dealing with. I'm looking for any suggestions or advice the community has on doing this as efficiently as possible using Polars."},
{"Title": "Python Test 219: Building Django Apps & SaaS Pegasus - Cory Zue", "Author": "variedthoughts", "Content": "Listen at podcast.pythontest.com/219 When starting a SaaS project using Django, there are tons of decisions. I've asked Cory Zue, creator of SaaS Pegasus, to help me sift through some common SaaS/Django decisions."},
{"Title": "Single file, hot reloading python server with raw websockets and inotify", "Author": "tootac", "Content": "A project to build a local server without any external dependencies with main features of hot reloading browser on source modification. The idea is to make it simple, standalone and work without any setup. The project uses regular sockets, websockets, inotify and a bit of javascript on the fly embedding to allow users to achieve automatic synchronization with browser. The article describes hot to monitor file changes with direct loading of libc and requesting kernel notify on change. Free article and code: https://hereket.com/posts/linux_live_reload_python_server/"},
{"Title": "ChatGPT / Python", "Author": "meisghost", "Content": "A lot of people are starting to rely on ChatGPT to write code for them from time to time. What I have personally noticed is ChatGPT writes modules so heavy its ridiculous. Last night I was working on an issue a small but technical issue, and asked it for help, it spat out, I kid you not 200+ lines of code and I just thought to myself this cannot be right, it was so heavy I was shaking my head. After some trial and error I got a very elegant piece done in 15 lines of code. Way faster, cleaner and yes reusable. So, it's nice that you can ask CGPT a question from time to time but to rely on it for code structure at this point, in my opinion, no good. Nice to be here!"},
{"Title": "🔭 OpenTelemetry Architecture: Python SDK Overview", "Author": "roma-glushko", "Content": "Hey folks,\nI have just posted an article for those who want to go a little bit beyond the basic usage of OTEL and understand how it works under the hood. The post quickly touches on:\n- 🔭 History and the idea of OpenTelemetry\n- 🧵 Distributed traces & spans. How span collection happens on the service side\n- 💼 Baggage & trace ctx propagation\n- 📈 Metrics collection. Views & aggregations. Metrics readers\n- 📑 OTEL Logging integration\n- 🤝 Semantic conventions and why that is important\nBlog Post:\nLet me know what do you think and hope this is helpful for someone 🙌"},
{"Title": "I made a team of AI manage my YouTube channel and my work with Python based framework CrewAI", "Author": "fx2mx3", "Content": "I found this awesome AI framework for python called \"Crew AI\", that allows us to create assistants, or agents in the CrewAI lingo, and assign specific tasks. I started my tiny youtube channel 3 months and for a youtuber, especially a novice one like myself, there are a bunch of tasks such as checking what other similar channels are doing, which topics are trending and if a video idea is good or not. There is also the part of coming up with the video content idea itself, create a catchy title, suitable youtube tags and finding the appropriate forum to talk about! You folks get the picture. It's a great project for anyone seeking to automate tasks not just related to a youtube channel, but this could easily be adapted to your daily job tasks, or even a startup idea."},
{"Title": "privates.py - Stop others from touching your privates!", "Author": "ZeroIntensity", "Content": "Quick example: from privates import private\n\n@private\nclass Hello:\n    __readonly__ = \"bar\",  # No need for @property!\n    __protected__ = \"foo\",\n\n    def __init__(self):\n        self.bar = \"hello world!\"\n        self.foo = \"foo\"\n\n# Hello is now only usable from this module"},
{"Title": "How to create a Discord Bot to launch a Minecraft server automatically", "Author": "chadicus-gigo", "Content": "Hi y'all, This might be off topic a bit from the normal stuff that gets posted here, but a while back I was messing around on a Minecraft server that I was hosting on Aternos (a free online Minecraft server host). Now since the server wasn't running on my computer (and since Aternos has a timeout policy to save server resources) it became annoying for my buddies to hop on the server if I was busy. They'd have to ask me to manually start the server from the webpage. So I had a free Saturday a couple of months ago and decided to remedy this problem. My source code is hosted on a GIGO Dev environment if y'all wanna check it out:"},
{"Title": "Anycrc - Python CRC computation library", "Author": "marzoogy", "Content": "Link: https://github.com/marzooqy/anycrc What My Project Does This is a Cython module with bindings to the crcany library. It supports calculating CRC hashes of arbitary sizes as well as updating a crc hash over time, and I believe that it is the fastest generic CRC library available for Python. Target Audience Anyone that needs to compute CRCs. Comparison with Alternatives crcmod-plus: A modernized version of the old crcmod library. It's highly customizable and fast. fastcrc: A library with bindings to the crc-rs library. Has a limited selection of CRCs to use. binascii: The standard library module comes with support for only CRC32 and CRC-CCITT, and at least the CRC32 implementation used is pretty fast according to my testing."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "What are your favourite pre-commit hooks and why?", "Author": "LatterConcentrate6", "Content": "Just getting started with pre-commit and I think it's awesome. Looking to find out what other code automation tools people are using. Let me know what works for you and why. Thanks!"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Using FastAPI REST along with RabbitMQ", "Author": "Accembler", "Content": "I have searched for a workable solution for the marriage of FastAPI async REST with RabbitMQ async interop in one application. Here is a fully workable code I came up with (intentionally simplified). class MessageBrokerManager:\n    async def consume(self, loop):\n        try:\n            pika.BlockingConnection(\n                parameters=pika.ConnectionParameters(\n                    host=self._host,\n                    port=self._port,\n                    credentials=pika.PlainCredentials(\n                        username=self._username,\n                        password=self._password,\n                    ),\n                )\n            )\n        except Exception as e:\n            log_info_fail(\"Failed to connect to RabbitMQ\")\n            # return empty task\n            return asyncio.create_task(asyncio.sleep(0))\n\n        self._connection = await connect_robust(\n            host=self._host,\n            port=self._port,\n            login=self._username,\n            password=self._password,\n            loop=loop,\n        )\n\n        self._channel = await self._connection.channel()\n        queue = await self._channel.declare_queue(self._queue_name, durable=True)\n        await queue.consume(callback=MessageBrokerManager.on_message, no_ack=True)\n\n        return self._connection\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    try:\n        loop = asyncio.get_running_loop()\n        task = loop.create_task(MessageBrokerManager().consume(loop))\n        await task\n    except Exception as e:\n        pass\n    yield\n\napp = FastAPI(lifespan=lifespan)\napp.include_router(some_rest_router)"},
{"Title": "Sensor-App: A Sensor Data Displaying/Streaming Android App written in Python", "Author": "StoneSteel_1", "Content": "Sensor-App is an Android App that's main focus is to help create a real-time mobile sensor data stream for computer applications, data collection, AR, VR, etc. Github: SensorApp\nFeatures of Sensor-App\nReal-Time Sensor Data display\nFaster Real-Time Sensor Data Streaming via TCP Sockets\nSimple and Easy setup of Data Streaming Server"},
{"Title": "Returns Python library for FP", "Author": "yinshangyi", "Content": "Hello!\nI work in big data space (data engineering), I mainly used Java, Scala and Python.\nI have been learning functional programming in greater depth and I found this Python library which seems pretty cool.\nhttps://github.com/dry-python/returns\nI've used it at work for implementing an Either based error handling.\nIt seems a great library.\nAny of you have used it?\nAny thoughts?\nFor sure, I prefer doing FP in Scala but given the job market isn't too kind too Scala and FP languages in general. What are your thoughts to bring FP (at least parts of it) to the Python world?\nSome people in the TypeScript world seem to take that direction:"},
{"Title": "constable - automatically inject print statements into your functions for debugging variables", "Author": "saurabh0719", "Content": "What My Project Does constable automatically injects print statements, during runtime, into your function code to give you a live step by step replay of each variable assignment. Github repo - https://github.com/saurabh0719/constable Target Audience Can be used in testing/debugging environments. Do not leave this hanging around in production! Comparison Use pdb for all purposes that matter. Or an object state tracker. Example - import constable\n\n@constable.trace('a', 'b')\ndef example(a, b):\n    a = a + b\n    c = a\n    a = \"Experimenting with the AST\"\n    b = c + b\n    a = c + b\n    return a\n\nexample(5, 6)"},
{"Title": "UXsim 1.2.0 released with support for (self-driving) taxis and shared mobility", "Author": "Balance-", "Content": "Version 1.2.0 of UXsim is released, which allows simulating taxis, shared mobility and self-driving taxis! Main Changes in 1.2.0\nAdd taxi (aka. shared mobility) functions\nA standard vehicle in UXsim just travel from A to B and disappear. This is like a private owned vehicle.\nFrom this update, a Vehicle with mode=\"taxi\" behave like a taxi. Specifically, they travel through a network by passing through specific nodes that are dynamically updated, simulating passenger pickup and drop-off."},
{"Title": "Introducing Stockdex: A Superior Python Package for Real-Time Financial Data Retrieval", "Author": "nginx26", "Content": "Greetings! I've previously introduced my Python package in this post. Since then, I've significantly enhanced its performance and expanded its capabilities.\nWhat My Project Does\nA lightweight python package designed for the efficient retrieval of financial data from various sources like Yahoo Finance, Nasdaq, Digrin and JustETF websites (somewhat similar to yfinance). This tool provides functionality akin to yfinance but with broader data access."},
{"Title": "Best way to grade Jupyter-Notebooks?", "Author": "flying_Wahale", "Content": "I recently took a job with a professor, that includes helping with the grading of biweekly assignments. So I basically have now 30 Notebooks that I have to grade. Top of my head I can think of these approaches:\nConvert to PDF and write into the PDF\nDuplicate the Notebook and write the comments in extra blocks\nCreate a .txt file with all my note"},
{"Title": "Segmentation pipeline using MONAI and Pytorch", "Author": "zacky2004", "Content": "For my machine learning project, I created an 'end to end' segmentation pipeline using MONAI and Pytorch for the deep learning portion, and the Optuna hyper parameter optimization library for hyperparam optimization / search. The entire project is fully encapsulated/packaged using Poetry, so its really easy to install and use. The pipeline is fully customizable in terms of which models to use, model parameters, optimizers, as well as hyperparameters via configuration files. It also takes advantage of automatic mixed-precision for accelerated compute. I also have it integrated with Aimstack for experiment tracking and visualization."},
{"Title": "Python icon library with 5237 high-quality icons (Tabler Icons wrapper)", "Author": "niklashnng", "Content": "What My Project Does:\npytablericons is a Python wrapper for the tabler-icons project, which provides a set of 5237 free MIT-licensed high-quality SVG icons for web projects with each icon being designed on a 24x24 grid and a 2px stroke.\nIt allows you to load any of those SVG icons directly into a Pillow PNG Image in any size and color without losing quality and without having to download the icons manually or handling the SVG conversion yourself. For the outline icons, the stroke width is customizable as well. All of this is done in just a single line and since the icon is a Pillow Image, it can then be used easily with basically anything (e.g. PyQt5, PyQt6, PySide2, PySide6, Tkinter, etc.)"},
{"Title": "What is your best Tkinter project that you put a lot of effort into creating?", "Author": "_-Dan_-", "Content": "I want to hear your description of the project you are most proud of. I was just trying to find something on the Internet, but I didn't find much of interest. The only difficult project was CustomTkinter, which, as far as I know, was done entirely in Tkinter. Since it is possible to create something this complex, I'm sure you have something cool too.\nNote: I am expecting to hear projects more complex than a calculator :)"},
{"Title": "Pandas - value replacement or interpolation", "Author": "DeskAdministrative42", "Content": "Hi all, here trying to replace values for a range of dates in a data frame copy I've made where DateTime is the index and the values I need to mass replace are in the 'Value' column. The reason why is I need to interpolate between two dates in a time series, where the data I have is incorrect due to measurement error. I need to replace it with interpolated data to make a more representative data set for forecasting Can anyone advise?"},
{"Title": "A word search game generator", "Author": "RRTheGuy", "Content": "https://github.com/RadoTheProgrammer/motsmeles/\nWhat my project does\nIt generate word search games with custom words, dimensions.\nTarget audience\nFor people who want to get fun with some word searching\nComparison"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Topic ideas for talk", "Author": "jackh53453", "Content": "I’m thinking about giving a talk at my Python group but struggling to think of an interesting topic. Any suggestions or recommendations of ways of brainstorming? I like running so was thinking about a talk about using the Strava API, maybe get the top running shoes, but not sure if that’d interest other people. Topic ideas please!"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Zillow scraper made pure in Python", "Author": "JohnBalvin", "Content": "Hello everyone., on today new scraper I created the python version for the zillow scraper. https://github.com/johnbalvin/pyzill What My Project Does The library will get zillow listings and details.\nI didn't created a defined structured like on the Go version just because it's not as easy to maintain this kind of projects on python like on Go.\nIt is made on pure python with HTTP requests, so no selenium, puppeteer, playwright etc. or none of those automation libraries that I hate."},
{"Title": "resvg-py, safe bindings for resvg project", "Author": "BasePlate_Admin", "Content": "Hi everyone,\nGithub\nDocumentation\nWhat my project does :\nFor a long time, i had a problem of rendering svg to png format. Specially after my project required opengraph image generation. Vercel's OG supports this functionality but that's JavaScript. So therefore i created this bindings to resvg library (same library used by vercel og)"},
{"Title": "What's the best library to find differences in two text files and visulaize it?", "Author": "TheGupta", "Content": "difflib is popular. Most of the answers on Stack Overflow uses it. But, I think Google's diff-match-patch is better. See an example here. Or, am I missing something?"},
{"Title": "Created Netlify DNS Manager: CLI Tool for uploading zone Files to Netlify or exporting Netlify DNS", "Author": "snorkell_", "Content": "What My Project Does? Command-line tool to simplify the management of DNS records for domains hosted on Netlify, whether you want to migrate to Netlify or migrate away from Netlify.\nImport Zone File from Godaddy, NameCheap or others to Netlify - helpful in migrating nameservers.\nExport DNS records from Netlify as zonefile to be import it to Godaddy, Namecheap or other servers."},
{"Title": "pydantic + dataloader = pydantic-resolve", "Author": "TurbulentAd8020", "Content": "https://github.com/allmonday/pydantic-resolve supports both pydantic v1 and v2. What My Project Does: a declaractive, schema based way for fetching and reorgnizing and changing data, from simple to complicated. Target Audience: production, web development Comparison: graphql frameworks. much simple, define specific schemas at backend. and can adjust data in backward stage of traversal. Introduction: I've used FastAPI for around two years, and like the pydantic as well. The idea of generating openapi.json from pydantic (response_model) is facinating, it help frontend generate clients based on it and simpilify the integration."},
{"Title": "Alternative data managment tool to replace the need to use Jupyter Notebook for Python", "Author": "IllogicalLunarBear", "Content": "What My Project Does: For everyone who says they use jupyter Notebook for Python to do chunks of code work… I developed my own data management system for that kind of stuff that provides a wrapper over serialization that essentially creates pythonic pointers to data on any network drive. I just grab my data that I want to grab. Provides autocomplete and C# like attributes. I can dynamically build any data storage class using UML formatted infrastructure-as-code to build the front end. The back end is completely dynamic. Here is the pypi link. Note that I developed this to handle genomic data that was generated over the course of a week of 24/7 computation, that I break into multiple logical chunks. You dont need to rely on Jupyter to hold your data and you can retrieve it months after generating it."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Ruff 0.4.0 just dropped, with a faster parser and a new language server", "Author": "QueasyEntrance6269", "Content": "Release notes here, seems to be a 20-40% improvement around the board. This version features a new hand-written parser (rather than a generated one) that is much faster and offers better error messages. It also comes with a new rust-native language server inspired by rust-analyzer, that is multithreaded. I think they’re challenging Pylance’s throne, wouldn’t be surprised if the team goes after type checking next."},
{"Title": "Understanding State Machines in Python Through a Practical Example", "Author": "pemidi", "Content": "Hey everyone! I've written an article that simplifies the concept of state machines using Python, with a practical example related to order statuses. If you've ever been confused about state machines or just want a refresher with a real-world application, this might be just what you're looking for. Check it out and let me know what you think!\nRead the full article here I'm here for any questions or discussions"},
{"Title": "Example Data Pipeline with Prefect, Delta Lake, and Dask", "Author": "dask-jeeves", "Content": "I’m an OSS developer (primarily working on Dask) and lately I’ve been talking to users about how they’re using Dask for ETL-style production workflows and this inspired me to make something myself. I wanted a simple example that met the following criteria:\nRun locally (optionally). Should be easy to try out locally and easily scalable.\nScalable to cloud. I didn’t want to think hard about cloud deployment.\nPython forward. I wanted to use tools familiar to Python users, not an ETL expert."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Project: An Interactive Python Dashboard For Data Storytelling UN Food Security", "Author": "jgloewen", "Content": "Python’s Plotly Dash is a powerful tool for creating interactive data visualizations. As a Comp Sci professor, I use it extensively for interactive dashboards. Its usefulness lies in its ability to create web-based applications directly from Python code, without the need for additional web development skills.\nUsing UN food security data, let me show you an example of how you can create an interesting and useful Python Plotly dashboard that tells a data story using:"},
{"Title": "JSON to Python - VSCode extension", "Author": "MichalMietus", "Content": "Hi, I just published my mini extension to VSCode with a command to convert a JSON object file to Python, something I often missed. I hope you will find it useful! https://marketplace.visualstudio.com/items?itemName=BringFuture.json-to-python What My Project Does: Converts JSON to Python\nTarget Audience: VSCode coders\nComparison: Formatters, etc. I could not find a tool to do exactly that"},
{"Title": "Python 3.12.3 Released", "Author": "chinawcswing", "Content": "https://www.python.org/downloads/release/python-3123/ 3.12.3 is the latest maintenance release, containing more than 300 bugfixes, build improvements and documentation changes since 3.12.2."},
{"Title": "I made a Python desktop app using PyWebview (similar to ElectronJS) & ReactJS that tracks time.", "Author": "zynix", "Content": "https://github.com/devdave/pyminder What does it do? The application is a very simple time tracker broken down by Client->Project->Task. In addition it has a summary report view plus a simple CRUD like data manager. The bigger goal was to see what it entailed to mix Python w/ReactJS and if it was easier using HTML+TypeScript over QT, TK, or some other unique API. Target Audience While I am using PyMinder to track my own work it wasn't meant for a general audience. Instead I am sharing this in case anyone else has a need to make a desktop application and looking for alternatives."},
{"Title": "Import pdf into python GUI and measure length within PDF", "Author": "Most-Guarantee956", "Content": "I'm interested to create a software where I can import some construction drawings and measure the distance within the PDF as a first step of my work. Tried a few open source pdf but none of them still allows me to have a correct measurement on the PDF, anyone have an idea?"},
{"Title": "Awesome Python Library: Tenacity", "Author": "pysk00l", "Content": "When writing code or tests in Python, one issue I had was when the code would fail due to random things like network issues or external peripherals not responding in time. So I had to add extra code to retry the code, but this added unnecessary complexity. Thats when I discovered the Tenacity library and it saved me hours and a lot of useless boilerplate code. Link: https://tenacity.readthedocs.io/en/latest/ I wrote a blog on it with some examples: https://new.pythonforengineers.com/blog/awesome-python-library-tenacity/"},
{"Title": "PyPDFForm now lets you create widgets without Acrobat", "Author": "chinapandaman", "Content": "Hello ! Earlier this year I made a post about my open source project PyPDFForm and got some really nice feedbacks from you guys. I have been since then continuously working on it and I'd love to share you two really cool features that were newly added to the library. The first one is, like what the title says, the library finally supports creating a subset of widgets through code now. One of the previous hard dependency for PyPDFForm was that it requires a PDF template that was prepared using another tool, namely Adobe Acrobat or some web based ones like DocFly. Well now, at least for text field, checkbox, and dropdown, you can do it through plain Python code. I personally find this a huge milestone of the project and if you are interested in this new feature checkout the documentation ."},
{"Title": "Build and Publish Your Python Project", "Author": "Shay-Hill", "Content": "In another article, I outlined how to handle Python imports and dependencies in Poetry. Poetry has a lot to recommend it:\nwrites a pyproject.toml file for you\ncreates an environment for you\npins top-level dependencies in pyproject.toml (nice if that’s what you want)\nautomates a lot of adding and removing dependencies"},
{"Title": "Open Sourcing a Python Project the Right Way in 2024", "Author": "Vegetable_Study3730", "Content": "I recently open-sourced a package and the tooling was a bit of a struggle. I decided to write down the steps & all the tools needed to open-source a Python package in a scalable way that invite users and contributors. https://jonathanadly.com/open-sourcing-a-python-project-the-right-way-in-2024 Happy to hear your feedback!"},
{"Title": "\"Gracefully\" Implementing Graceful Shutdowns - FastApi | Kubernetes | WebSockets | Black | Ruff Show", "Author": "Jainal09", "Content": "Overview\nWhen deploying a new version of an application, it is essential to ensure that no tasks are lost during the deployment process. This is especially important for applications that use WebSockets to maintain real-time connections with clients. In such cases, abruptly terminating the application can lead to data loss and client disconnections. What My Project Does? This project demonstrates how to implement graceful shutdowns using FastAPI and Kubernetes, that use WebSockets client connections and internal background queues."},
{"Title": "Python Wrapper For Meta AI (Llama 3)", "Author": "Significant-Turn4107", "Content": "Here is just a small wrapper to interact with the new MetaAI chat bot assistant with Python (https://www.meta.ai/), which is running the newly release Llama 3 model. Another nice thing is that its directly connected with Bing Search so you will be able to get the latest informations. https://github.com/Strvm/meta-ai-api"},
{"Title": "Has PyPI ceased all support?", "Author": "baekalfen", "Content": "Does anyone know what’s going on behind the scenes of PyPI (who maintains `pip install`)? It seems like they’ve stopped processing support tickets over a month ago. I’ve hit the data limit for my package [PyBoy](https://github.com/baekalfen/pyboy), and I immediately posted a ticket to get the limit increased (as others have successfully done). But after more than a month, and several attempts at contacting the support team, I’ve heard nothing back, and I’ve run out of options. Does anyone know what’s happening, or how to get a comment from PyPI? My ticket is this one:"},
{"Title": "Achieve true parallelism in Python 3.12", "Author": "ThatsAHumanPerson", "Content": "Article link: https://rishiraj.me/articles/2024-04/python_subinterpreter_parallelism I have written an article, which should be helpful to folks at all experience levels, covering various multi-tasking paradigms in computers, and how they apply in CPython, with its unique limitations like the Global Interpreter Lock. Using this knowledge, we look at traditional ways to achieve \"true parallelism\" (i.e. multiple tasks running at the same time) in Python. Finally, we build a solution utilizing newer concepts in Python 3.12 to run any arbitrary pure Python code in parallel across multiple threads. All the code used to achieve this, along with the benchmarking code are available in the repository linked in the blog-post."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "All Python conference talks from 2023 ordered by the number of views", "Author": "TechTalksWeekly", "Content": "Hello r/python 👋! Back in January, I've compiled a list of the most watched PyCon talks from 2023. I've received tons of positive feedback via DM, upvotes, and comments, so I decided to put together another compilation. This time around, I've gathered not only PyCon, but all Python 2023 talks across +100 conferences (here's the list) that include PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. The list is gigantic and includes over 850 talks**!** What's more, I've created a Google Sheets version of this post that gives more convenient sorting and filtering options."},
{"Title": "MPCode is a scripting programming language", "Author": "weksoftware", "Content": "MPCode is a small open-source scripting programming language written in python 3.12 The repository with the same name on github.com allows you to modify the language to your own needs, execute small scripts, write programmes and libraries.\nThe language itself already has functions, object groups, logical operators, loops and variables.\nThe current functionality has documentation in three languages (English, Italian and Russian) and some small code samples.\nIt would be very nice to get feedback and ideas from you.\nYou can also develop your own projects based on it, as the project is licensed by MIT.\nLink to the repository:"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Web API Security Champion: Broken Object Level Authorization (OWASP TOP 10) for Python Developers", "Author": "theowni", "Content": "Explaining one of the most common web API vulnerability classes - Broken Object Level Authorization in a practical manner. Providing a case study example based on the Damn Vulnerable RESTaurant API, including methods for identifying and preventing these vulnerabilities. https://devsec-blog.com/2024/04/web-api-security-champion-broken-object-level-authorization-owasp-top-10/"},
{"Title": "ArchiveFile: Unified interface for tar, zip, sevenzip, and rar files", "Author": "PredatorOwl", "Content": "What My Project Does archivefile is a wrapper around tarfile, zipfile, py7zr, and rarfile. The above libraries are excellent when you are dealing with a single archive format but things quickly get annoying when you have a bunch of mixed archives such as .zip, .7z, .cbr, .tar.gz, etc because each library has a slightly different syntax and quirks which you need to deal with. archivefile wraps the common methods from the above libraries to provide a unified interface that takes care of said differences under the hood. However, it's not as powerful as the libraries it wraps due to lack of support for features that are unique to a specific archive format and library."},
{"Title": "I made an easy and secure data lake for Pandas", "Author": "realstoned", "Content": "What My Project Does Shoots is essentially a \"data lake\" where you can easily store pandas dataframes, and retrieve them later or from different locations or in different tools. Shoots has a client and a server. After choosing a place to run the server, you can easily use the client to \"put\" and \"get\" dataframes. Shoots supports SQL, allowing you to put very large dataframes, and then use a query to only get a subset. Shoots also allows you to resample on the server. # put a dataframe, uploads it to the server  \ndf = pd.read\\_csv('sensor\\_data.csv')  \nshoots.put(\"sensor\\_data\", dataframe=df, mode=PutMode.REPLACE)  \n\n\n# retrieve the whole data frame  \ndf0 = shoots.get(\"sensor\\_data\")  \nprint(df0)  \n\n# or use sql to retrieve just some of the data  \nsql = 'select \"Sensor\\_1\" from sensor\\_data where \"Sensor\\_2\" < .2'  \ndf1 = shoots.get(\"sensor\\_data\", sql=sql)"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Share Proejct: NLLB-200 Distill 350M en-ko", "Author": "SaeChan5", "Content": "Hello , I'm excited to share a project that was initially intended to use in my graduating product(Capstone) What My Proeject Does I made NLLB-200 Distill 350M model to translating English to Korean Target Audience GPU servers are quite expensive, so I made it for university students who can't cost the server (like me.) Comparison It's even smaller and faster the other NLLB-200 model. so it can be run with CPU! more details are in my page If you know Korean, please give me a lot of feedback https://github.com/newfull5/NLLB-200-Distilled-350M-en-ko thank you!!"},
{"Title": "ASCII plot backend package for matplotlib", "Author": "jetpack_away", "Content": "Hi I've made a package called mpl_ascii which is a backend for matplotlib. You can find it here: https://github.com/chriscave/mpl_ascii I would love to share it with others and see what you guys think What it is It is a backend for matplotlib that converts your plots into ASCII characters. At the moment I have only made support for: bar charts, scatter plots and line plots but if there's demand for more then I would love to keep working on it. Target Audience: Anyone using matplotlib to create plots who might also want to track how their plots change with their codebase (i.e. version control)."},
{"Title": "Cross platform python3 shebang", "Author": "tedkotz", "Content": "There is no shebang line that actually works across platforms for python 3. I would like one that works on unmodified :\nDebian shell (Dropped python2, falls under PEP 394)\nOlder Linux shells that still have python pointing to python2 (PEP 394)\nWindows cmd.exe shell (this really just means one that will work with PEP 397)\nGitbash for Windows (sort of a weird half sibling that respects shebangs)"},
{"Title": "American Airlines scraper made in Python with only http requests", "Author": "JohnBalvin", "Content": "Hello wonderful community, Today I'll present to you pyaair, a scraper made pure on Python https://github.com/johnbalvin/pyaair Easy instalation ` ` `pip install pyaair ` ` ` Easy Usage ` ` ` airports=pyaair.airports(\"miami\",\"\") ` ` ` Always remember, only use selenium, puppeteer, playwright etc when it's strictly necesary Let me know what you think, thanks About me: I'm full stack developer specialized on web scraping and backend, with 6-7 years of experience"},
{"Title": "I made a Python app that turns your Figma design into code", "Author": "axorax", "Content": "Link: https://github.com/Axorax/tkforge Hey, my name is Axorax. I have been programming for a few years now. I started making a lot more projects in Python recently and this is one of them. I decided to call the project TkForge. What My Project Does TkForge allows you to turn your Figma design into code. So, you can make the UI for an app in Figma and add input fields, buttons and much more and name them properly then you can run TkForge to convert your Figma design into code. The names need to be the element that you want. For example; if you want a button element then you can name it \"button\" or \"button Hello World!\". The \"Hello World!\" portion will just get ignored. All of the text after the first space is ignored. However, for some elements, they matter. Like, if you want a textbox element with the placeholder text of \"Hello\" then you need to name it \"textbox Hello\"."},
{"Title": "milkcow - First package/library", "Author": "Samuel_G_Reynoso", "Content": "Excited to share milkcow, my first python package. I'd love any feedback, and to continue to build out the parts of this package that show potential. https://pypi.org/project/milkcow/ https://github.com/SamReynoso/milkcow What MilkCow Does Milkcow automates database creation and offers in-memory key-value mapping for data handling. Whether you're building middleware, local storage, or multiprocessing scripts. Target Audience MilkCow is designed for developers looking to streamline the development process. It caters to those who want to simplify data."},
{"Title": "Python Quality Standards", "Author": "nicomarcan", "Content": "Hey, happy Friday (don't push to prod). Me and some friends are building a no-code platform to run code improvement agents (really in BETA) . We want to have a quality agent for each language, and I would really appreciate your feedback on python best practices and standards. The agents are created by defining the steps that you want to apply in natural language. Right now our Python agent has the following steps:\nUse descriptive naming for functions and variables."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "How To Build a Social Media Sentiment Analysis Pipeline With FastAPI And Generative AI", "Author": "arthurdelerue25", "Content": "Social media like Reddit, Hacker News, Twitter, etc. contain tons of genuine discussions that you might want to analyze automatically with sentiment analysis. For example you might want to monitor what people say about you, your product, your competitors, etc. I made a technical article that shows how to implement such a sentiment analysis pipeline using the following steps:\nImplement social media listening\nIntegrate the data in your system with an API webhook processed in Python/FastAPI"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python Interview Cheat Sheet Website!", "Author": "ixatrap", "Content": "Hey everyone, I’ve recently launched a new website aimed at helping fellow programmers ace their Python interviews. It’s not just limited to Python though; it also covers essential topics like big-O notation, object-oriented programming, design patterns, and more! I’d love to hear your thoughts and feedback on the content, layout, and anything else you think could be improved. Check it out here https://hlop3z.github.io/interviews-python/ and let me know what you think. Your input is invaluable in making this resource the best it can be. Thanks in advance for your time and insights! 🚀🐍"},
{"Title": "Python Test 219: Building Django Apps & SaaS Pegasus - Cory Zue", "Author": "variedthoughts", "Content": "Listen at podcast.pythontest.com/219 When starting a SaaS project using Django, there are tons of decisions. I've asked Cory Zue, creator of SaaS Pegasus, to help me sift through some common SaaS/Django decisions."},
{"Title": "🔭 OpenTelemetry Architecture: Python SDK Overview", "Author": "roma-glushko", "Content": "Hey folks,\nI have just posted an article for those who want to go a little bit beyond the basic usage of OTEL and understand how it works under the hood. The post quickly touches on:\n- 🔭 History and the idea of OpenTelemetry\n- 🧵 Distributed traces & spans. How span collection happens on the service side\n- 💼 Baggage & trace ctx propagation\n- 📈 Metrics collection. Views & aggregations. Metrics readers\n- 📑 OTEL Logging integration\n- 🤝 Semantic conventions and why that is important\nBlog Post:\nLet me know what do you think and hope this is helpful for someone 🙌"},
{"Title": "How to create a Discord Bot to launch a Minecraft server automatically", "Author": "chadicus-gigo", "Content": "Hi y'all, This might be off topic a bit from the normal stuff that gets posted here, but a while back I was messing around on a Minecraft server that I was hosting on Aternos (a free online Minecraft server host). Now since the server wasn't running on my computer (and since Aternos has a timeout policy to save server resources) it became annoying for my buddies to hop on the server if I was busy. They'd have to ask me to manually start the server from the webpage. So I had a free Saturday a couple of months ago and decided to remedy this problem. My source code is hosted on a GIGO Dev environment if y'all wanna check it out:"},
{"Title": "What are your favourite pre-commit hooks and why?", "Author": "LatterConcentrate6", "Content": "Just getting started with pre-commit and I think it's awesome. Looking to find out what other code automation tools people are using. Let me know what works for you and why. Thanks!"},
{"Title": "Behavior of AttributeError in @property and __getattr__", "Author": "Hatteras-", "Content": "I'm sure that many people have encountered the following (code for reproduction below) behavior: if during the execution of `@property`, an `AttributeError` is raised and the same class implements `__getattr__` then `__getattr__` is invoked with the name of the property resulting in a confusing message: `AttributeError: 'Foo' object has no attribute 'something'`. If we remove `__getattr__` then we get a more meaningful and correct message: `AttributeError: 'Foo' object has no attribute 'bar'`. from dataclasses import dataclass\n\n@dataclass\nclass Foo: val = 'foo_value'\n\nclass Test: \n    def __init__(self): \n        self.foo = Foo()\n\n    def __getattr__(self, name):\n        return getattr(self.foo, name)\n    \n    @property\n    def something(self):\n        return self.foo.bar\n\nt = Test() t.something"},
{"Title": "Sensor-App: A Sensor Data Displaying/Streaming Android App written in Python", "Author": "StoneSteel_1", "Content": "Sensor-App is an Android App that's main focus is to help create a real-time mobile sensor data stream for computer applications, data collection, AR, VR, etc. Github: SensorApp\nFeatures of Sensor-App\nReal-Time Sensor Data display\nFaster Real-Time Sensor Data Streaming via TCP Sockets\nSimple and Easy setup of Data Streaming Server"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "UXsim 1.2.0 released with support for (self-driving) taxis and shared mobility", "Author": "Balance-", "Content": "Version 1.2.0 of UXsim is released, which allows simulating taxis, shared mobility and self-driving taxis! Main Changes in 1.2.0\nAdd taxi (aka. shared mobility) functions\nA standard vehicle in UXsim just travel from A to B and disappear. This is like a private owned vehicle.\nFrom this update, a Vehicle with mode=\"taxi\" behave like a taxi. Specifically, they travel through a network by passing through specific nodes that are dynamically updated, simulating passenger pickup and drop-off."},
{"Title": "Single file, hot reloading python server with raw websockets and inotify", "Author": "tootac", "Content": "A project to build a local server without any external dependencies with main features of hot reloading browser on source modification. The idea is to make it simple, standalone and work without any setup. The project uses regular sockets, websockets, inotify and a bit of javascript on the fly embedding to allow users to achieve automatic synchronization with browser. The article describes hot to monitor file changes with direct loading of libc and requesting kernel notify on change. Free article and code: https://hereket.com/posts/linux_live_reload_python_server/"},
{"Title": "Is Litestar production ready 2024?", "Author": "I_will_delete_myself", "Content": "At least a couple things that seems is that Litestar appears to be a fast Django lite. Some batteries included, but not too many and opinionated. It's uses Rust so of course it's going to be fast, not that it really matters that much since IO > CPU for a website IMO. Which any async framework addresses this. I haven't heard many people using it though despite it having a lot of batteries included, but not dominating everything with first party support. Anyone using it in production in 2024? Edit: Fact check it appers it isn't written in Rust, I probably confused it with something else or it might just be data serialization"},
{"Title": "Best way to grade Jupyter-Notebooks?", "Author": "flying_Wahale", "Content": "I recently took a job with a professor, that includes helping with the grading of biweekly assignments. So I basically have now 30 Notebooks that I have to grade. Top of my head I can think of these approaches:\nConvert to PDF and write into the PDF\nDuplicate the Notebook and write the comments in extra blocks\nCreate a .txt file with all my note"},
{"Title": "I made a team of AI manage my YouTube channel and my work with Python based framework CrewAI", "Author": "fx2mx3", "Content": "I found this awesome AI framework for python called \"Crew AI\", that allows us to create assistants, or agents in the CrewAI lingo, and assign specific tasks. I started my tiny youtube channel 3 months and for a youtuber, especially a novice one like myself, there are a bunch of tasks such as checking what other similar channels are doing, which topics are trending and if a video idea is good or not. There is also the part of coming up with the video content idea itself, create a catchy title, suitable youtube tags and finding the appropriate forum to talk about! You folks get the picture. It's a great project for anyone seeking to automate tasks not just related to a youtube channel, but this could easily be adapted to your daily job tasks, or even a startup idea."},
{"Title": "Demystifying list comprehensions in Python", "Author": "lyubolp", "Content": "In this article, I explain list comprehensions, as this is something people new to Python struggle with. Demystifying list comprehensions in Python"},
{"Title": "What is your best Tkinter project that you put a lot of effort into creating?", "Author": "_-Dan_-", "Content": "I want to hear your description of the project you are most proud of. I was just trying to find something on the Internet, but I didn't find much of interest. The only difficult project was CustomTkinter, which, as far as I know, was done entirely in Tkinter. Since it is possible to create something this complex, I'm sure you have something cool too.\nNote: I am expecting to hear projects more complex than a calculator :)"},
{"Title": "Using Polars to Write Multiple LazyFrames to Delta from One Source File", "Author": "EngiNerd9000", "Content": "I'm working on an ETL job that reads in a JSONL file, splits it into multiple Polars LazyFrames, collects those to DataFrames, and then writes them to a Delta Table. Prior to doing this with Polars, I would generally complete a task like this with either Pandas or PySpark depending on the size of data I was dealing with. I'm looking for any suggestions or advice the community has on doing this as efficiently as possible using Polars."},
{"Title": "Anycrc - Python CRC computation library", "Author": "marzoogy", "Content": "Link: https://github.com/marzooqy/anycrc What My Project Does This is a Cython module with bindings to the crcany library. It supports calculating CRC hashes of arbitary sizes as well as updating a crc hash over time, and I believe that it is the fastest generic CRC library available for Python. Target Audience Anyone that needs to compute CRCs. Comparison with Alternatives crcmod-plus: A modernized version of the old crcmod library. It's highly customizable and fast. fastcrc: A library with bindings to the crc-rs library. Has a limited selection of CRCs to use. binascii: The standard library module comes with support for only CRC32 and CRC-CCITT, and at least the CRC32 implementation used is pretty fast according to my testing."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ChatGPT / Python", "Author": "meisghost", "Content": "A lot of people are starting to rely on ChatGPT to write code for them from time to time. What I have personally noticed is ChatGPT writes modules so heavy its ridiculous. Last night I was working on an issue a small but technical issue, and asked it for help, it spat out, I kid you not 200+ lines of code and I just thought to myself this cannot be right, it was so heavy I was shaking my head. After some trial and error I got a very elegant piece done in 15 lines of code. Way faster, cleaner and yes reusable. So, it's nice that you can ask CGPT a question from time to time but to rely on it for code structure at this point, in my opinion, no good. Nice to be here!"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Zillow scraper made pure in Python", "Author": "JohnBalvin", "Content": "Hello everyone., on today new scraper I created the python version for the zillow scraper. https://github.com/johnbalvin/pyzill What My Project Does The library will get zillow listings and details.\nI didn't created a defined structured like on the Go version just because it's not as easy to maintain this kind of projects on python like on Go.\nIt is made on pure python with HTTP requests, so no selenium, puppeteer, playwright etc. or none of those automation libraries that I hate."},
{"Title": "Returns Python library for FP", "Author": "yinshangyi", "Content": "Hello!\nI work in big data space (data engineering), I mainly used Java, Scala and Python.\nI have been learning functional programming in greater depth and I found this Python library which seems pretty cool.\nhttps://github.com/dry-python/returns\nI've used it at work for implementing an Either based error handling.\nIt seems a great library.\nAny of you have used it?\nAny thoughts?\nFor sure, I prefer doing FP in Scala but given the job market isn't too kind too Scala and FP languages in general. What are your thoughts to bring FP (at least parts of it) to the Python world?\nSome people in the TypeScript world seem to take that direction:"},
{"Title": "privates.py - Stop others from touching your privates!", "Author": "ZeroIntensity", "Content": "Quick example: from privates import private\n\n@private\nclass Hello:\n    __readonly__ = \"bar\",  # No need for @property!\n    __protected__ = \"foo\",\n\n    def __init__(self):\n        self.bar = \"hello world!\"\n        self.foo = \"foo\"\n\n# Hello is now only usable from this module"},
{"Title": "Created Netlify DNS Manager: CLI Tool for uploading zone Files to Netlify or exporting Netlify DNS", "Author": "snorkell_", "Content": "What My Project Does? Command-line tool to simplify the management of DNS records for domains hosted on Netlify, whether you want to migrate to Netlify or migrate away from Netlify.\nImport Zone File from Godaddy, NameCheap or others to Netlify - helpful in migrating nameservers.\nExport DNS records from Netlify as zonefile to be import it to Godaddy, Namecheap or other servers."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Introducing Stockdex: A Superior Python Package for Real-Time Financial Data Retrieval", "Author": "nginx26", "Content": "Greetings! I've previously introduced my Python package in this post. Since then, I've significantly enhanced its performance and expanded its capabilities.\nWhat My Project Does\nA lightweight python package designed for the efficient retrieval of financial data from various sources like Yahoo Finance, Nasdaq, Digrin and JustETF websites (somewhat similar to yfinance). This tool provides functionality akin to yfinance but with broader data access."},
{"Title": "Py2wasm: A Python to Wasm compiler 3x faster than pyiodide", "Author": "desmoulinmichel", "Content": "Take the excellent nuitka, compile python code to C, turn it into web assembly, and you got Python in the browser, without the usual runtime overhead:\nhttps://wasmer.io/posts/py2wasm-a-python-to-wasm-compiler While the doc states you can get this effect by doing: pip install py2wasm\npy2wasm myprogram.py -o myprogram.wasm"},
{"Title": "Using FastAPI REST along with RabbitMQ", "Author": "Accembler", "Content": "I have searched for a workable solution for the marriage of FastAPI async REST with RabbitMQ async interop in one application. Here is a fully workable code I came up with (intentionally simplified). class MessageBrokerManager:\n    async def consume(self, loop):\n        try:\n            pika.BlockingConnection(\n                parameters=pika.ConnectionParameters(\n                    host=self._host,\n                    port=self._port,\n                    credentials=pika.PlainCredentials(\n                        username=self._username,\n                        password=self._password,\n                    ),\n                )\n            )\n        except Exception as e:\n            log_info_fail(\"Failed to connect to RabbitMQ\")\n            # return empty task\n            return asyncio.create_task(asyncio.sleep(0))\n\n        self._connection = await connect_robust(\n            host=self._host,\n            port=self._port,\n            login=self._username,\n            password=self._password,\n            loop=loop,\n        )\n\n        self._channel = await self._connection.channel()\n        queue = await self._channel.declare_queue(self._queue_name, durable=True)\n        await queue.consume(callback=MessageBrokerManager.on_message, no_ack=True)\n\n        return self._connection\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    try:\n        loop = asyncio.get_running_loop()\n        task = loop.create_task(MessageBrokerManager().consume(loop))\n        await task\n    except Exception as e:\n        pass\n    yield\n\napp = FastAPI(lifespan=lifespan)\napp.include_router(some_rest_router)"},
{"Title": "Python icon library with 5237 high-quality icons (Tabler Icons wrapper)", "Author": "niklashnng", "Content": "What My Project Does:\npytablericons is a Python wrapper for the tabler-icons project, which provides a set of 5237 free MIT-licensed high-quality SVG icons for web projects with each icon being designed on a 24x24 grid and a 2px stroke.\nIt allows you to load any of those SVG icons directly into a Pillow PNG Image in any size and color without losing quality and without having to download the icons manually or handling the SVG conversion yourself. For the outline icons, the stroke width is customizable as well. All of this is done in just a single line and since the icon is a Pillow Image, it can then be used easily with basically anything (e.g. PyQt5, PyQt6, PySide2, PySide6, Tkinter, etc.)"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "constable - automatically inject print statements into your functions for debugging variables", "Author": "saurabh0719", "Content": "What My Project Does constable automatically injects print statements, during runtime, into your function code to give you a live step by step replay of each variable assignment. Github repo - https://github.com/saurabh0719/constable Target Audience Can be used in testing/debugging environments. Do not leave this hanging around in production! Comparison Use pdb for all purposes that matter. Or an object state tracker. Example - import constable\n\n@constable.trace('a', 'b')\ndef example(a, b):\n    a = a + b\n    c = a\n    a = \"Experimenting with the AST\"\n    b = c + b\n    a = c + b\n    return a\n\nexample(5, 6)"},
{"Title": "A word search game generator", "Author": "RRTheGuy", "Content": "https://github.com/RadoTheProgrammer/motsmeles/\nWhat my project does\nIt generate word search games with custom words, dimensions.\nTarget audience\nFor people who want to get fun with some word searching\nComparison"},
{"Title": "Runtime type checking performance", "Author": "gerardwx", "Content": "I'm trying to decide whether to use typeguard or stick to assert isinstance in the places where I care. Has anyone done benchmarking testing of the overhead of using type guards \"at\"typeguard decorator ?"},
{"Title": "Segmentation pipeline using MONAI and Pytorch", "Author": "zacky2004", "Content": "For my machine learning project, I created an 'end to end' segmentation pipeline using MONAI and Pytorch for the deep learning portion, and the Optuna hyper parameter optimization library for hyperparam optimization / search. The entire project is fully encapsulated/packaged using Poetry, so its really easy to install and use. The pipeline is fully customizable in terms of which models to use, model parameters, optimizers, as well as hyperparameters via configuration files. It also takes advantage of automatic mixed-precision for accelerated compute. I also have it integrated with Aimstack for experiment tracking and visualization."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "pwdgen v2 -a simple password generator", "Author": "RRTheGuy", "Content": "https://github.com/RadoTheProgrammer/pwdgen\nWhat my project does\nMy project generate simple, strong, memorable and easy-to-type passwords. The system is simple: it generate 2 pronounceable words separated by a special char, with a number at start or end. I tried creating a password generator that combines simplicity, security, memorability, and ease of type. This should be secure enough because it can generate 4e15 possibilities of passwords and uses the module."},
{"Title": "I analyzed & visualized 7 years of music royalties with polars & Vega-Altair. Code in article", "Author": "fjogurpiano", "Content": "Hi all, I used polars (a Rust-powered “Blazingly Fast DataFrame Library”) to analyze seven years of my own music royalties data. Vega-Altair (Python wrapper for Vega-Lite) powers the (often interactive) visualizations. Link to the article: https://osc.garden/blog/data-analysis-music-streaming/ It was a lot of fun learning polars and setting up the graphs with Vega-Altair. Would love to hear any comments and suggestions. Link to r/dataisbeautiful post: https://www.reddit.com/r/dataisbeautiful/comments/1ca7x6z/oc_my_music_needs_more_than_200k_plays_on/"},
{"Title": "What's the best library to find differences in two text files and visulaize it?", "Author": "TheGupta", "Content": "difflib is popular. Most of the answers on Stack Overflow uses it. But, I think Google's diff-match-patch is better. See an example here. Or, am I missing something?"},
{"Title": "Pandas - value replacement or interpolation", "Author": "DeskAdministrative42", "Content": "Hi all, here trying to replace values for a range of dates in a data frame copy I've made where DateTime is the index and the values I need to mass replace are in the 'Value' column. The reason why is I need to interpolate between two dates in a time series, where the data I have is incorrect due to measurement error. I need to replace it with interpolated data to make a more representative data set for forecasting Can anyone advise?"},
{"Title": "Alternative data managment tool to replace the need to use Jupyter Notebook for Python", "Author": "IllogicalLunarBear", "Content": "What My Project Does: For everyone who says they use jupyter Notebook for Python to do chunks of code work… I developed my own data management system for that kind of stuff that provides a wrapper over serialization that essentially creates pythonic pointers to data on any network drive. I just grab my data that I want to grab. Provides autocomplete and C# like attributes. I can dynamically build any data storage class using UML formatted infrastructure-as-code to build the front end. The back end is completely dynamic. Here is the pypi link. Note that I developed this to handle genomic data that was generated over the course of a week of 24/7 computation, that I break into multiple logical chunks. You dont need to rely on Jupyter to hold your data and you can retrieve it months after generating it."},
{"Title": "find_where - my first Python package published to PyPi", "Author": "dan_ohn", "Content": "PyPi\nSource What My Project Does\nfind_where is a Python package that provides a function to find values in dictionaries where a specified key matches a given value, similar to filtering in SQL. Target Audience\nThis is my first attempt at creating a Python package so I would describe this as a toy project at this stage but am definitely looking for feedback from the wider community. Comparison\nI mainly wrote this package because I kept on writing the same iterable based code when trying to find a value, given a key:"},
{"Title": "Topic ideas for talk", "Author": "jackh53453", "Content": "I’m thinking about giving a talk at my Python group but struggling to think of an interesting topic. Any suggestions or recommendations of ways of brainstorming? I like running so was thinking about a talk about using the Strava API, maybe get the top running shoes, but not sure if that’d interest other people. Topic ideas please!"},
{"Title": "I now know again why I stopped using mamba / conda for setting up virtual environments", "Author": "RareRandomRedditor", "Content": "I have started at a new job and had the idea that it would probably be clever to set up my developing environment in exactly the same way as my predecessor did. Because:\nThis should help resolving errors quicker in the transition period\nHis code was good and clean and it appears that he knows what he is doing\nwe were using mostly the same tools (VScode etc.) anyways.\nHe set up his virtual environments (VE)s with conda/mamba. I vaguely remembered that I also used to do that but then stopped for some reason and switched to the virtualenv package. But I did not remember why anymore. So I just set up my VEs in the same way, it should not really make any difference anyways (so I thought). Well, fast forward about two weeks and now I have VEs that occasionally (but not always) exist twice in the same folders under the same name (according to mamba info --envs) and that are at the same time completely empty (according to mamba list) and contain all packages I have installed anywhere, ever (according to pip list). I usually install packages via pip and I assume this may have fucked things up in combination with mamba? I'll probably switch back to virtualenv again and add a \"do not use conda/mamba VEs !!!\" in my notes. I am working on Windows. Is mamba better on Linux?"},
{"Title": "Ruff 0.4.0 just dropped, with a faster parser and a new language server", "Author": "QueasyEntrance6269", "Content": "Release notes here, seems to be a 20-40% improvement around the board. This version features a new hand-written parser (rather than a generated one) that is much faster and offers better error messages. It also comes with a new rust-native language server inspired by rust-analyzer, that is multithreaded. I think they’re challenging Pylance’s throne, wouldn’t be surprised if the team goes after type checking next."},
{"Title": "resvg-py, safe bindings for resvg project", "Author": "BasePlate_Admin", "Content": "Hi everyone,\nGithub\nDocumentation\nWhat my project does :\nFor a long time, i had a problem of rendering svg to png format. Specially after my project required opengraph image generation. Vercel's OG supports this functionality but that's JavaScript. So therefore i created this bindings to resvg library (same library used by vercel og)"},
{"Title": "Pandas Python Introduction", "Author": "cyprusgreekstudent", "Content": "I'm sharing some of the Python tutorials I made. I teach Ukrainian teenagers and university students Python programming and data science for free. Here is an introduction to Pandas. It shows:\nHow to read data into a Pandas dataframe from a CSV file.\nShow how to print out the column names.\nSee and set the index.\nPrint sections of the dataframe."},
{"Title": "Understanding State Machines in Python Through a Practical Example", "Author": "pemidi", "Content": "Hey everyone! I've written an article that simplifies the concept of state machines using Python, with a practical example related to order statuses. If you've ever been confused about state machines or just want a refresher with a real-world application, this might be just what you're looking for. Check it out and let me know what you think!\nRead the full article here I'm here for any questions or discussions"},
{"Title": "pydantic + dataloader = pydantic-resolve", "Author": "TurbulentAd8020", "Content": "https://github.com/allmonday/pydantic-resolve supports both pydantic v1 and v2. What My Project Does: a declaractive, schema based way for fetching and reorgnizing and changing data, from simple to complicated. Target Audience: production, web development Comparison: graphql frameworks. much simple, define specific schemas at backend. and can adjust data in backward stage of traversal. Introduction: I've used FastAPI for around two years, and like the pydantic as well. The idea of generating openapi.json from pydantic (response_model) is facinating, it help frontend generate clients based on it and simpilify the integration."},
{"Title": "Inline templating engine", "Author": "TheRealMrMatt", "Content": "I was wondering if anyone has come across anything like https://github.com/a-h/templ or https://hono.dev/guides/jsx, but for python. For context, I am familiar with jinja2, mako, etc. but find them to be unintuitive due to the loose coupling of logic (ex: database calls) and templating (ex: generating a list from the database results). Therefore, I am looking for a \"inline\" templating solution."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made Cria - Run LLMs (AI) locally and programmatically with as little friction as possible", "Author": "reformedbillclinton", "Content": "https://github.com/leftmove/cria My name is Anonyo, and I am a seventeen year old from Southeast Michigan. This is my second open source project. I built Cria, a Python library that allows you to run LLMs programmatically through Python. Cria is designed so there is as little friction as possible — getting started takes just five lines of code. I created this library because I was using OpenAI in my project, and kept running into rate limits. With local LLMs getting better and better, I sought to switch, but found command line configurations to be limited. Running and configuring LLMs can be trivial, but programs like ollama make it easier. The only problem I found with ollama though, was the lack of features in its Python client."},
{"Title": "Project: An Interactive Python Dashboard For Data Storytelling UN Food Security", "Author": "jgloewen", "Content": "Python’s Plotly Dash is a powerful tool for creating interactive data visualizations. As a Comp Sci professor, I use it extensively for interactive dashboards. Its usefulness lies in its ability to create web-based applications directly from Python code, without the need for additional web development skills.\nUsing UN food security data, let me show you an example of how you can create an interesting and useful Python Plotly dashboard that tells a data story using:"},
{"Title": "[tutorial] Data imputation on real-time data source", "Author": "oli_k", "Content": "Hi there, My team at Bytewax and I have been working on a series of hands-on guides on streaming data and I am excited to share how one can handle missing values in real-time in Python. While some parts of the guide are simplified, for example, we use a random number generator as an input source, the algorithmic part is production-ready. We are taking advantage of the Numpy library + stateful operators in Bytewax. Other input sources are available, too. https://bytewax.io/guides/handling-missing-values"},
{"Title": "Example Data Pipeline with Prefect, Delta Lake, and Dask", "Author": "dask-jeeves", "Content": "I’m an OSS developer (primarily working on Dask) and lately I’ve been talking to users about how they’re using Dask for ETL-style production workflows and this inspired me to make something myself. I wanted a simple example that met the following criteria:\nRun locally (optionally). Should be easy to try out locally and easily scalable.\nScalable to cloud. I didn’t want to think hard about cloud deployment.\nPython forward. I wanted to use tools familiar to Python users, not an ETL expert."},
{"Title": "I made a Python desktop app using PyWebview (similar to ElectronJS) & ReactJS that tracks time.", "Author": "zynix", "Content": "https://github.com/devdave/pyminder What does it do? The application is a very simple time tracker broken down by Client->Project->Task. In addition it has a summary report view plus a simple CRUD like data manager. The bigger goal was to see what it entailed to mix Python w/ReactJS and if it was easier using HTML+TypeScript over QT, TK, or some other unique API. Target Audience While I am using PyMinder to track my own work it wasn't meant for a general audience. Instead I am sharing this in case anyone else has a need to make a desktop application and looking for alternatives."},
{"Title": "Molly - a data quality monitoring library specifically designed for time series data", "Author": "flaviaouyang", "Content": "What My Project Does\nMolly is designed to monitor time series data in a SQL database such as MySQL or PostgreSQL. Currently supported data quality feature:\n- staleness: when the data was last updated\n- completeness: whether any data is missing in a given date range Currently support messaging service:\n- Slack Web API"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Import pdf into python GUI and measure length within PDF", "Author": "Most-Guarantee956", "Content": "I'm interested to create a software where I can import some construction drawings and measure the distance within the PDF as a first step of my work. Tried a few open source pdf but none of them still allows me to have a correct measurement on the PDF, anyone have an idea?"},
{"Title": "What is currently the fastest/state-of-the-art ODE solver in Python?", "Author": "D_vd_P", "Content": "For my application, Scipy's solvers are not fast enough so I am looking to speed up by using another package. These are some packages I have found so far:\nNumbaLSODA\nDifferentialEquations.jl\nTorchquad\n(Although doesn't solve ODEs, just integrates quickly, but that could be wrapped I guess)"},
{"Title": "JSON to Python - VSCode extension", "Author": "MichalMietus", "Content": "Hi, I just published my mini extension to VSCode with a command to convert a JSON object file to Python, something I often missed. I hope you will find it useful! https://marketplace.visualstudio.com/items?itemName=BringFuture.json-to-python What My Project Does: Converts JSON to Python\nTarget Audience: VSCode coders\nComparison: Formatters, etc. I could not find a tool to do exactly that"},
{"Title": "PyPDFForm now lets you create widgets without Acrobat", "Author": "chinapandaman", "Content": "Hello ! Earlier this year I made a post about my open source project PyPDFForm and got some really nice feedbacks from you guys. I have been since then continuously working on it and I'd love to share you two really cool features that were newly added to the library. The first one is, like what the title says, the library finally supports creating a subset of widgets through code now. One of the previous hard dependency for PyPDFForm was that it requires a PDF template that was prepared using another tool, namely Adobe Acrobat or some web based ones like DocFly. Well now, at least for text field, checkbox, and dropdown, you can do it through plain Python code. I personally find this a huge milestone of the project and if you are interested in this new feature checkout the documentation ."},
{"Title": "Announcing The Python Logging Book & Course Kickstarter", "Author": "driscollis", "Content": "New developers print out strings to their terminal. It’s how we learn! But printing out to the terminal isn’t what you do with most professional applications. In those cases, you log into files. Sometimes, you log into multiple locations at once. These logs may serve as an audit trail for compliance purposes or help the engineers debug what went wrong. Python Logging teaches you how to log in the Python programming language. Python is one of the most popular programming languages in the world. Python comes with a logging module that makes logging easy."},
{"Title": "Python 3.12.3 Released", "Author": "chinawcswing", "Content": "https://www.python.org/downloads/release/python-3123/ 3.12.3 is the latest maintenance release, containing more than 300 bugfixes, build improvements and documentation changes since 3.12.2."},
{"Title": "Open Sourcing a Python Project the Right Way in 2024", "Author": "Vegetable_Study3730", "Content": "I recently open-sourced a package and the tooling was a bit of a struggle. I decided to write down the steps & all the tools needed to open-source a Python package in a scalable way that invite users and contributors. https://jonathanadly.com/open-sourcing-a-python-project-the-right-way-in-2024 Happy to hear your feedback!"},
{"Title": "Most-watched PyData conference & meetup talks from 2023", "Author": "ad81923", "Content": "Just came across this list and I think it's amazing: https://techtalksweekly.substack.com/p/all-pydata-2023-talks"},
{"Title": "Awesome Python Library: Tenacity", "Author": "pysk00l", "Content": "When writing code or tests in Python, one issue I had was when the code would fail due to random things like network issues or external peripherals not responding in time. So I had to add extra code to retry the code, but this added unnecessary complexity. Thats when I discovered the Tenacity library and it saved me hours and a lot of useless boilerplate code. Link: https://tenacity.readthedocs.io/en/latest/ I wrote a blog on it with some examples: https://new.pythonforengineers.com/blog/awesome-python-library-tenacity/"},
{"Title": "Is Pythonista (Python for iOS/iPadOS) no longer with active development and support?", "Author": "br_web", "Content": "I have not seen updates in almost a year and there is no activity in the support forum? Is there a replacement forum? Thanks"},
{"Title": "Python Wrapper For Meta AI (Llama 3)", "Author": "Significant-Turn4107", "Content": "Here is just a small wrapper to interact with the new MetaAI chat bot assistant with Python (https://www.meta.ai/), which is running the newly release Llama 3 model. Another nice thing is that its directly connected with Bing Search so you will be able to get the latest informations. https://github.com/Strvm/meta-ai-api"},
{"Title": "Build and Publish Your Python Project", "Author": "Shay-Hill", "Content": "In another article, I outlined how to handle Python imports and dependencies in Poetry. Poetry has a lot to recommend it:\nwrites a pyproject.toml file for you\ncreates an environment for you\npins top-level dependencies in pyproject.toml (nice if that’s what you want)\nautomates a lot of adding and removing dependencies"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Has PyPI ceased all support?", "Author": "baekalfen", "Content": "Does anyone know what’s going on behind the scenes of PyPI (who maintains `pip install`)? It seems like they’ve stopped processing support tickets over a month ago. I’ve hit the data limit for my package [PyBoy](https://github.com/baekalfen/pyboy), and I immediately posted a ticket to get the limit increased (as others have successfully done). But after more than a month, and several attempts at contacting the support team, I’ve heard nothing back, and I’ve run out of options. Does anyone know what’s happening, or how to get a comment from PyPI? My ticket is this one:"},
{"Title": "Jobs that utilize Jupyter Notebook?", "Author": "Shadowforce426", "Content": "I have been programming for a few years now and have on and off had jobs in the industry. I used Jupyter Notebook in undergrad for a course almost a decade ago and I found it really cool. Back then I really didn’t know what I was doing and now I do. I think it’s cool how it makes it feel more like a TI calculator (I studied math originally) What are jobs that utilize this? What can I do or practice to put myself in a better position to land one?"},
{"Title": "\"Gracefully\" Implementing Graceful Shutdowns - FastApi | Kubernetes | WebSockets | Black | Ruff Show", "Author": "Jainal09", "Content": "Overview\nWhen deploying a new version of an application, it is essential to ensure that no tasks are lost during the deployment process. This is especially important for applications that use WebSockets to maintain real-time connections with clients. In such cases, abruptly terminating the application can lead to data loss and client disconnections. What My Project Does? This project demonstrates how to implement graceful shutdowns using FastAPI and Kubernetes, that use WebSockets client connections and internal background queues."},
{"Title": "Achieve true parallelism in Python 3.12", "Author": "ThatsAHumanPerson", "Content": "Article link: https://rishiraj.me/articles/2024-04/python_subinterpreter_parallelism I have written an article, which should be helpful to folks at all experience levels, covering various multi-tasking paradigms in computers, and how they apply in CPython, with its unique limitations like the Global Interpreter Lock. Using this knowledge, we look at traditional ways to achieve \"true parallelism\" (i.e. multiple tasks running at the same time) in Python. Finally, we build a solution utilizing newer concepts in Python 3.12 to run any arbitrary pure Python code in parallel across multiple threads. All the code used to achieve this, along with the benchmarking code are available in the repository linked in the blog-post."},
{"Title": "How to Clean Data and work with outliers and Missing Data in Python Pandas", "Author": "cyprusgreekstudent", "Content": "I made a detailed tutorial on how to work with missing data, outliers, and how to lean up data in Pandas Python. This explains how to clean up your data so that your statistical results and trainin data is not skewed. https://github.com/werowe/HypatiaAcademy/blob/master/pandas/pandas_missing_data.ipynb"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tkinter Variable class C/Python garbage collection mismatch", "Author": "ranemaeker", "Content": "Tkinter is going to drive me crazy. Let me lay this out for you: Tkinter is the GUI interface I am using, which is a python frontend for a C library It holds \"widgets\" in a window. Some widgets have variables (StringVar, BooleanVar, etc - not \"variables\" like code variables but a class of updatable data holders for the widgets to link to the Tcl backend) The Vars have incremental names like PYVAR1, PYVAR93, etc by default. Names can be provided to the Vars via keywords upon initialization. (Note I have not been able to find any reason to not do this - hence this post) Names should absolutely be provided to the Vars unless they are unique. Because on python garbage collection (or \"del Var\" command) the Vars are told to destroy() themselves and then this command is passed to C \"destroy this Var.\""},
{"Title": "MPCode is a scripting programming language", "Author": "weksoftware", "Content": "MPCode is a small open-source scripting programming language written in python 3.12 The repository with the same name on github.com allows you to modify the language to your own needs, execute small scripts, write programmes and libraries.\nThe language itself already has functions, object groups, logical operators, loops and variables.\nThe current functionality has documentation in three languages (English, Italian and Russian) and some small code samples.\nIt would be very nice to get feedback and ideas from you.\nYou can also develop your own projects based on it, as the project is licensed by MIT.\nLink to the repository:"},
{"Title": "I created an AI tool for using python to process excel and other files", "Author": "smallSohoSolo", "Content": "Hi, I'm Owen, and I've developed an AI tool for data processing. I spend a significant amount of time processing daily data from numerous Excel files, which requires me to write a lot of Python code. I have been using GitHub Copilot to assist with this, but I am exploring ways to eliminate the need to write code manually. The tool is called Tipis AI, and you can find it here: https://github.com/tipisai/tipis-fe What My Project Does Therefore, I have developed an AI that generates Python code for data processing. I've also created a Python runtime environment to execute this code."},
{"Title": "Web API Security Champion: Broken Object Level Authorization (OWASP TOP 10) for Python Developers", "Author": "theowni", "Content": "Explaining one of the most common web API vulnerability classes - Broken Object Level Authorization in a practical manner. Providing a case study example based on the Damn Vulnerable RESTaurant API, including methods for identifying and preventing these vulnerabilities. https://devsec-blog.com/2024/04/web-api-security-champion-broken-object-level-authorization-owasp-top-10/"},
{"Title": "Ray on Golem MVP Launch: the Best Way of Running Python Code on the Golem Network", "Author": "GolemSM", "Content": "Golem Network has just released Ray on Golem MVP, a significant milestone in integrating Ray with Golem's decentralized infrastructure! 🎉\nCheck out all the details about the release and next steps in our blog post:\n📝 https://blog.golem.network/announcing-ray-on-golem-mvp-launch-the-recommended-way-of-running-python-code-on-the-golem-network/\n👉 Golem is looking for engaged beta testers to run diverse applications and collaborate on refining the solution. Interested? Find all the information on the brand-new Ray on Golem site:\n🔗"},
{"Title": "chatpdb - gpt for your python debugger", "Author": "the1024", "Content": "https://github.com/Never-Over/chatpdb Do you ever copy code, errors, or stack traces into ChatGPT? We did, and found it frustrating to always have to manually find, copy, and paste each relevant piece of information. On top of that, being forced to change tools would switch our focus and cause us to lose our flow. That’s why we built chatpdb  - a python debugger with ChatGPT! Simply use chatpdb like you would use ipdb or pdb; it’s a drop in replacement with the exact same functionality. The only addition is the new y keyword, which will trigger a response from ChatGPT."},
{"Title": "All Python conference talks from 2023 ordered by the number of views", "Author": "TechTalksWeekly", "Content": "Hello r/python 👋! Back in January, I've compiled a list of the most watched PyCon talks from 2023. I've received tons of positive feedback via DM, upvotes, and comments, so I decided to put together another compilation. This time around, I've gathered not only PyCon, but all Python 2023 talks across +100 conferences (here's the list) that include PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. The list is gigantic and includes over 850 talks**!** What's more, I've created a Google Sheets version of this post that gives more convenient sorting and filtering options."},
{"Title": "Should I use pydantic for all my classes?", "Author": "uh_sorry_i_dont_know", "Content": "Pydantic makes your code safer by making it strongly typed. You can no longer input a wrongly typed argument without getting an error (if pydantic can't convert it). This is great but to me it seems that sometimes standard python classes still seem preferable. Perhaps it's because I'm not using it correctly but my code for a pydantic class is much longer then for a normal class. Especially if you are working with computed attributes. Then you have to start using special decorators and for every computed attribute you have to declare a function with \"def ...\" Instead of in an init function just being able to write attribute_3 = attribute 1 + attribute 2."},
{"Title": "groupby in Python| Python Hacks you might now know.", "Author": "hasanul_islam", "Content": "Groupby in itertools module of python works differently that you might have thought. In this video, I have tried to explain very clearly about this feature. You are requested to watch the video. If you like, you can share the video and subscribe my youtube channel for further hacks. https://youtu.be/sX8G8qNwxjc?si=UTdHvbDKIMfOGhpr"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Intermediate Project: Python Plotly Data Visuals: Dropdowns and Range Sliders For User Interaction", "Author": "jgloewen", "Content": "Interactive data visualization is a powerful tool that can significantly enhance the analysis and interpretation of complex datasets. With Python, the Plotly library offers various features that can be used to create interactive publication-quality graphs. This project demonstrates how to use 2 of these awesome features:\nRange Slider\nDropdown Menu"},
{"Title": "Handling of long-running processes with timeouts in Flask + Gunicorn API app", "Author": "zacky2004", "Content": "I run an API (Python + Flask + Gunicorn) which has an endpoint that's calls a nested processes, which can sometimes take 6 seconds, to sometimes 60+ seconds to complete. The time it takes isn't a measure of my API's performance really, but rather its bottlenecked by an external service that the process has to rely on. Im looking for any suggested libraries that can safely handle this secondary process asynchronously with a long timeout. Ideally the API endpoint is called, and it won't have to wait for this process to finish if it takes more than 30+ seconds.\nHere's a mockup of what the chain of commands look like."},
{"Title": "My latest TILs about Python", "Author": "JCx64", "Content": "After 10+ years working with it, I keep discovering new features. This is a list of the most recent ones: https://jcarlosroldan.com/post/329"},
{"Title": "Python 3.12.3 - The third maintenance release of Python 3.12", "Author": "Neustradamus", "Content": "https://www.python.org/downloads/release/python-3123/"},
{"Title": "Deploying Multi-Module Python Applications on GCP: Service Recommendations?", "Author": "ste042024", "Content": "I'm working on a project involving a Python application with multiple interacting modules and am looking for some advice on deploying it efficiently on Google Cloud Platform. Here's a brief overview of what the application entails: Functionality Overview: • Data Fetching: One module fetches data from external websites. • Data Extraction: Another module extracts data from another GCP project. • Data Processing: Variables are processed across various modules. • CSV Output: The app generates and stores CSV files. • Scheduled Running: The application should run automatically once daily."},
{"Title": "Adnexus DI/IoC Framework", "Author": "Nictec", "Content": "Repo: https://github.com/Nictec/Adnexus What My Project Does: Adnexus is a declarative and fully typed DI/IoC framework for python. It is inspired by python-dependency-injector because this project is no longer maintained. Target Audience: Currently Adnexus is in heavy development. So expect heavy errors and breaking changes. Eventually if we reach 1.0.0 the project will be ready for production. Comparison: The main difference to existing (and maintained) projects is the \"declarative\" part of the framework. Injectables are declared direclty in the container class using Providers. This takes away the \"magic\" of IoC because it is clear where your dependencies come from. Furthermore all dependencies can be directly configured using the integrated config system (for details see the repo)"},
{"Title": "ScrumMD: A CLI Scrum tool written in Python", "Author": "thelochok", "Content": "I got grumpy with our Scrum process, and I thought about what kinda tool I'd love to work with... so I started making it in my beloved Python. I think it's mature enough I'd like to start giving it to other people. It's called ScrumMD. It's open source, and you can already install it with pip (pip install scrummd) if you've got Python 3.10+. Documented, with tutorials on https://scrummd.readthedocs.io/en/stable/ and source on https://github.com/lkingsford/scrummd What my project does Short version is that it's some tools to support you storing all of your Scrum cards (or, I guess, other cards - tickets perhaps?) in markdown format on a local machine. There's intentionally a lot of flexibility - so, every card needs a summary, but everything else is fair game. You can configure to require fields for some collections (like needing status in stories), or limit fields (like requiring status be 'Done' or 'In Progress')."},
{"Title": "PGCacheWatch - Supercharge Your Caching Strategy", "Author": "GabelSnabel", "Content": "Hey Python enthusiasts! 👋\nI'm thrilled to introduce PGCacheWatch, my recent project designed to enhance your PostgreSQL databases by bringing real-time event notifications right into your applications. Vastly improved cache invalidation efficiency, without the need for adding any new services or infrastructure.\nWhat My Project Does\nPGCacheWatch capitalizes on PostgreSQL's built-in NOTIFY/LISTEN features to deliver instant, real-time notifications about database events, ensuring your application's cache remains fresh and synchronized with your database."},
{"Title": "Why Jupyter notebook", "Author": "IllogicalLunarBear", "Content": "I did a search and read previous discussions in this sub about why Jupyter labs exists. From what I understand it is for quick code to try things out especially in data science …. Thing is, can’t you get the same thing via a decent IDE with autocomplete and quality debug tools in some quick Python code like in VSCODE? I do that all the time…. I develop RNA computational software in Python and I abandoned Jupyter labs very early on as it just was not well suited to the job of bespoke data science. So many limitations and don’t get me started with widgets… I’ve been developing code for decades and I have spent 3 days trying to understand widgets and I think I finally understand how to modify a text box and get a value from it…. You have to observe (why?), then act on, then route through some output and then you can get the info? It’s like someone was drunk while trying to emulate visual C#."},
{"Title": "Advanced Macro & Calorie Calculator", "Author": "MCTrovato", "Content": "What My Project Does A macro-nutrient and calorie calculator to help me achieve body composition goals.\nThis calculator is compatible with metric and imperial units. It supports weight changes based on percentage and fixed values (lbs, kg). This is useful when losing weight in a fat loss phase as a percentage, and for gaining at a fixed value during a muscle growth phase.\nThe recommendations are built using scientific research based on lean body mass. If the user's body fat percentage is unknown, then it will be calculated using BMI and the Deurenberg formula.\nGeneral guidance is also available on the ."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Big O Cheat Sheet: the time complexities of operations Python's data structures", "Author": "treyhunner", "Content": "I made a cheat sheet of all common operations on Python's many data structures. This include both the built-in data structures and all common standard library data structures. The time complexities of different data structures in Python If you're unfamiliar with time complexity and Big O notation, be sure to read the first section and the last two sections. I also recommend Ned Batchelder's talk/article that explains this topic more deeply."},
{"Title": "Using Jupyter Notebooks with Flox", "Author": "z_mitchell", "Content": "https://flox.dev/blog/jupyter-remote-env Hey everyone, we released Flox 1.0 a few weeks ago and one of the cool things you can do is set up environments with a bunch of dependencies already set up for running a Jupyter notebook. Take a look to see how it all works!"},
{"Title": "Transforming Images to Art with Python: My Journey with Stable Diffusion", "Author": "Maleficent_Yak_993", "Content": "Hey Python community! I created a stable diffusion pipeline to convert reference images to prompt and used it along with text prompt to generate variations of reference image. Explainer video here: https://www.youtube.com/watch?v=x9VryjEcxzk"},
{"Title": "automathon: A Python library for simulating and visualizing finite automata", "Author": "fexx3l", "Content": "What my project does\nautomathon is a Python library for simulating and visualizing finite automata, is easy to use and have a docs website to read more about the functions that are implemented for DFAs and NFAs. During my CS degree, I learned about automata and this became one of my favorite topics, that's why I started to work on this project, I wanted to create something simple and easy to use.\nTarget audience"},
{"Title": "bridge — automatic infrastructure for Django", "Author": "the1024", "Content": "https://github.com/Never-Over/bridge\nThe Problem\nWe built bridge to solve the most frustrating part of any new project — infrastructure. Whenever you spin up a new Django project, you usually have to manually configure Postgres, background workers, a task queue, and more. The problem is amplified when you go to deploy your application — hosting providers don’t understand anything about what you’ve configured already, so you have to run through an even more complicated process to set up the same infrastructure in a deployed environment."},
{"Title": "pwdgen - a simple password generator", "Author": "RRTheGuy", "Content": "What my project does\nMy project generate simple, strong, memorable and easy-to-type passwords.\nTarget audience\nFor anyone who need to get passwords easily.\nComparison\nMost passwords manager generate completely passwords with completely random characters that aren't very easy to memorize or tape."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Paid libraries may kill Python", "Author": "Glxblt76", "Content": "It appeared too easy to me that we could create entire GUI from Python. I waited for the other shoe to drop, and it dropped. Now Anaconda and PySimpleGUI require payment if ever you want to use the libraries professionally. I wonder whether this will be the end of Python. It seems enshittification is finally reaching Python, where people previously used libraries for free and when they update them find out that they have to pay or stop using the libraries."},
{"Title": "UXsim 1.1.1 released: Significantly increased performance for the network traffic flow simulator", "Author": "Balance-", "Content": "Version 1.1.1 of UXsim is released, which improves performance significantly. Main Changes in 1.1.1\nAdd setting to adjust vehicle logging time interval via World.vehicle_logging_timestep_interval\nBy lowering the interval (e.g., World.vehicle_logging_timestep_interval=2), the simulation time can be reduced (~20% speed up), and we can obtain vehicle trajectory data with slightly less accuracy.\nThe logging setting does not affect the internal simulation accuracy. Only the outputted trajectories are affected."},
{"Title": "async_api_caller - simplifies asynchronous web API calling", "Author": "teamamentum", "Content": "What My Project Does\nMaking asynchronous web API calls with asyncio and aiohttp can be complicated. This async_api_caller package abstracts away that complexity for a common case of needing to make multiple web API calls while varying query parameters. Installation git clone git@github.com:amentumspace/async_api_caller.git\ncd async_api_caller/\npip install ."},
{"Title": "Commercial pip packages?", "Author": "Normal_Antenna", "Content": "I’m aware there is a big open source community aspect to the python community. So my question is: “would uploading commercial software as a pip package offend the community?” I’m hesitant if this is normal, and if users would consider trials for components that would then make their project ask for a license to work after some time. Just wondering if it’s worth the effort to make products more accessible, or if it would just rub users the wrong way."},
{"Title": "magic-di: Dependency Injector with minimal boilerplate code, built-in support for FastAPI and Celery", "Author": "R1ngoB", "Content": "I’m excited to share something we’ve been working on at Wolt: a new dependency injection library for Python “magic-di”. Born from our experience with a large service that has many components such as: API, event consumers, background workers, and cron jobs. magic-di aims to simplify dependency management without the hassle. from magic_di.fastapi import inject_app, Provide\n\napp = inject_app(FastAPI())\n\n@app.get(path=\"/hello-reddit\") \ndef hello_reddit(service: Provide[Service]) -> dict: \n  return { \n     \"is_connected\": service.is_connected(),\n  }"},
{"Title": "Question: Tool for editing figures in Python", "Author": "Dangerous_Law1678", "Content": "So I'm trying to switch from MATLAB to Python for my numerical simulations. One of the things I like about MATLAB is the ability to edit figures by adding stuff (eg arrows, lines, text ... ) to the figure within the software itself. This is what I mean. It's a very handy tool in my line of work and I use it often. I was wondering if there's any similar tool for Python. I use matplotlib and seaborn. Any suggestions would be great. Thanks guys!"},
{"Title": "3-dimensional/ heatmap peak picking?", "Author": "robbie_s1", "Content": "Hello python community. I’m pretty new to scripting and come from a pure chemistry background. I’m working with 3-D MALDI-trapped ion mobility mass spectrometry data and I’ve been looking for a solid algorithm that can peak pick from two ‘time-resolved’ dimensions (mass and mobility), and the intensity arrays associated with those two dimensions. I need to peak pick from a heatmap essentially. Does anyone know of any good 3-D peak picking algorithms, or otherwise know how I can approach this? Thank you all!"},
{"Title": "How fast can Python parse 1 billion rows of data? (1brc)", "Author": "mercer22", "Content": "https://www.youtube.com/watch?v=utTaPW32gKY I made a video summarizing the top techniques used by the Python community in the recently popular One Billion Row Challenge (1brc, https://github.com/gunnarmorling/1brc). I adapted one of the top Python submissions into the fastest pure Python approach for the 1brc (using only built-in libraries). Also, I tested a few awesome libraries (polars, duckdb) to see how well they can carve through the challenge's 1 billion rows of input data. If anyone wants to try to speed up my solution, then feel free to fork this repo and give it a shot!"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Some days I really love python...", "Author": "Jazzlike-Compote4463", "Content": "I have a problem that I was terrible at listening to new music, everything I listen to is from around 2000 - 2010. There is a radio station here in the UK called BBC 6 music that has a decent playlist but since I only really listen in the car its not always appropriate to note the track names down - and my memory is terrible so I always forget by the time I get home. Luckily they put the playlist online but it's just text links so I can't add it to my music service of choice - YouTube Music. Thankfully the page is pretty simple so I wrote a basic ass scraper that will grab the HTML, parse through the tracks with beautful soup, then use the package to remove the old tracks from my playlist and recreate it with the freshly scraped data, then makes it dead easy to deploy and schedule it to run once a day."},
{"Title": "Do folks ever use Pandas when they should use SQL?", "Author": "ChristianPacifist", "Content": "I think I see this a lot. I believe SQL, including like dataframe SQL packages, should always be used over Pandas when possible unless one is doing something Pandas is more suited to or unless someone requires broader Python control structures or features. I am a big believer in sticking to SQL as a baseline data manipulation framework and only using other frameworks if SQL is lacking. One of the biggest ways to accumulate technical debt is solving problems in multiple ways that are not standardized that not all people know."},
{"Title": "Meta Used Monolithic Architecture Using Python to Ship Threads in Only Five Months", "Author": "rgancarz", "Content": "https://www.infoq.com/news/2024/04/meta-threads-instagram-5-months/ Zahan Malkani talked during QCon London 2024 about Meta's journey from identifying the opportunity in the market to shipping the Threads application only five months later. The company leveraged Instagram's existing monolithic architecture, written in Python and PHP, and quickly iterated to create a new text-first microblogging service in record time."},
{"Title": "float('inf') is bad practice", "Author": "Librarian-Rare", "Content": "I don't know why float('inf') was chosen as the way the language accesses infinity since this is using a magic string. Why couldn't it just be float.inf? That way magic string is avoided. Feels too basic of a best practice to be simply passed up. Anyone know the reason behind this?"},
{"Title": "Automatically extract phone call insights with LLMs - quick tutorial", "Author": "SleekEagle", "Content": "Hey everyone! I wrote this quick Python script showing how you can automatically extract information from phone calls with LLMS. The call I use is a phone call received by a home building company where the caller is inquiring about an estimate for the cost to build a home on land he may purchase. Here's what the LLM extracted: SUMMARY:\n- The caller is interested in getting an estimate for building a house on a property he is looking to purchase in Westchester.\n\nACTION ITEMS:\n- Have someone call the customer back today to discuss building estimate.\n- Set up time for builder to assess potential property site prior to purchase.\n\nCONTACT INFORMATION:\nName: Lindstrom, Kenny\nPhone number: 610-265-1715"},
{"Title": "Using Pandas 2 and different datetime erros", "Author": "technically_right_", "Content": "Hey Folks, I am working on a project that uses a bit old pandas version (1.5.3). I am trying to update it and use a more recent version (2.2.2). Its the first time I use pandas 2 btw. I simply ran all my unit tests and got multiple and different errors all concerning some datetime aspects. I tried troubleshooting by searching the errors and look in pandas release note but I find really complicated. It feels like the documentation is really exhaustive but I could really use a note on principal errors one can get switching to pandas 2. Does anyone have any handy blogpost, article, documentation that specifies this ? My focus is mainly on datetime errors when differences computed or comparaisons"},
{"Title": "With the demise of open Pysimplegui is anyone interested in helping productionise this alternative?", "Author": "Black-DVD-Archiver", "Content": "I wrote my own Pyside6 alternative to Pysimple gui that I use in my projects starting some years back after some unsatisfactory interactions with the author of Pysimple gui. The GIT source for my GUI wrapper is in https://github.com/David-Worboys/Black-DVD-Archiver/blob/main/qtgui.py And the open source project it is used in is https://github.com/David-Worboys/Black-DVD-Archiver Just look for the layout methods in the .py files to see how it is used. https://github.com/David-Worboys/Black-DVD-Archiver/blob/main/video_cutter.py#L2391 is a good place to start, line 953,."},
{"Title": "Py2wasm: A Python to Wasm compiler 3x faster than pyiodide", "Author": "desmoulinmichel", "Content": "Take the excellent nuitka, compile python code to C, turn it into web assembly, and you got Python in the browser, without the usual runtime overhead:\nhttps://wasmer.io/posts/py2wasm-a-python-to-wasm-compiler While the doc states you can get this effect by doing: pip install py2wasm\npy2wasm myprogram.py -o myprogram.wasm"},
{"Title": "kmeans-tjdwill: A K-Means Implementation that Maintains Data Association", "Author": "tjdwill", "Content": "Hello,   I recently published my first Python package on PyPi called kmeans-tjdwill (source). This is a k-means clustering implementation I wrote as a toy project that eventually was used extensively throughout my Master's degree, especially in my thesis. After a refactor and some optimization, I wanted to post here to hopefully elicit feedback and commentary from more experienced, professional software engineers. What My Project Does The central function is kmeans.cluster which segments input data into groups based on proximity to centroids. Users may either specify the initial means themselves or allow them to be chosen from among the input data. There is also a function for viewing the clustering process for 2-D and 3-D data, and, finally, a function that uses to perform image segmentation. Visual examples of both are found on the landing page of the Github repo linked above."},
{"Title": "Automated system testing on GUI app (Nodezator - Public domain generalist Python node editor)", "Author": "KennedyRichard", "Content": "Hello, everyone. I'm Kennedy Guerra, 33, open-source software maintainer. Just wanted to share a new feature I'm working on for the next version of Nodezator (GitHub | website), my public domain generalist Python node editor. In case you don't know Nodezator, the next few sections present it briefly. If you want to know about the new feature I'm working on, you can skip straight to the last subsection, which contains a detailed explanation and links to videos and extra info about the feature, called Automated System Testing."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Runtime type checking performance", "Author": "gerardwx", "Content": "I'm trying to decide whether to use typeguard or stick to assert isinstance in the places where I care. Has anyone done benchmarking testing of the overhead of using type guards \"at\"typeguard decorator ?"},
{"Title": "zpy can now use uv as a backend to replace Python's venv module and pip-tools", "Author": "AndydeCleyre", "Content": "Hello!\nWhat My Project Does\nzpy is a set of Zsh functions, mostly wrapping pip-tools or uv, for the simple and practical management of Python virtual environments, dependency specifications, and isolated Python app installation. You may find it a suitable alternative to poetry, pipenv, pipx, or unaided pip-tools or uv. There's a focus on use of good old requirements.txt files, and extensive tab completion assistance."},
{"Title": "Gmail Filter Squasher project", "Author": "unexpected_possum", "Content": "In Gmail I realized that I had way too many filters that performed exactly the same action, but they simply had different \"from\" addresses. To solve this I created this little project that merges similar filters into a single one. It does require a lot of setup due to having to authenticate into Gmail, but if someone is on the same situation as me, it could be helpful. Link to the project: github What My Project Does It connects into a Gmail account, reads their filters and squashes them into a single one. The program requires a manual setup of creating an OAuth credentials screen and downloading relevant credentials, which is cumbersome. But it's a one time effort as you can keep on using the application as long as you keep access to the GCP project."},
{"Title": "pwdgen v2 -a simple password generator", "Author": "RRTheGuy", "Content": "https://github.com/RadoTheProgrammer/pwdgen\nWhat my project does\nMy project generate simple, strong, memorable and easy-to-type passwords. The system is simple: it generate 2 pronounceable words separated by a special char, with a number at start or end. I tried creating a password generator that combines simplicity, security, memorability, and ease of type. This should be secure enough because it can generate 4e15 possibilities of passwords and uses the module."},
{"Title": "Announcing pixi-kernel - Jupyter kernels using Pixi for reproducible notebooks", "Author": "renanengmec", "Content": "What My Project Does?\nHello everyone, I'm proud to announce a brand-new Python library named pixi-kernel: https://github.com/renan-r-santos/pixi-kernel allowing you to run Jupyter kernels using Pixi for reproducible notebooks. By the way, if you haven't heard of the Pixi package manager, check it out at https://pixi.sh/latest/.It supports conda and PyPI (through uv) packages, pyproject.toml config, git, path and editable installs and it is really fast."},
{"Title": "I analyzed & visualized 7 years of music royalties with polars & Vega-Altair. Code in article", "Author": "fjogurpiano", "Content": "Hi all, I used polars (a Rust-powered “Blazingly Fast DataFrame Library”) to analyze seven years of my own music royalties data. Vega-Altair (Python wrapper for Vega-Lite) powers the (often interactive) visualizations. Link to the article: https://osc.garden/blog/data-analysis-music-streaming/ It was a lot of fun learning polars and setting up the graphs with Vega-Altair. Would love to hear any comments and suggestions. Link to r/dataisbeautiful post: https://www.reddit.com/r/dataisbeautiful/comments/1ca7x6z/oc_my_music_needs_more_than_200k_plays_on/"},
{"Title": "I made my very first python library! It converts reddit posts to text format for feeding to LLM's!", "Author": "NFeruch", "Content": "Hello everyone, I've been programming for about 4 years now and this is my first ever library that I created! What My Project Does It's called Reddit2Text, and it converts a reddit post (and all its comments) into a single, clean, easy to copy/paste string. I often like to ask ChatGPT about reddit posts, but copying all the relevant information among a large amount of comments is difficult/impossible. I searched for a tool or library that would help me do this and was astonished to find no such thing! I took it into my own hands and decided to make it myself. Target Audience This project is useable in its current state, and always looking for more feedback/features from the community!"},
{"Title": "motsmeles - word search generator", "Author": "RRTheGuy", "Content": "https://github.com/RadoTheProgrammer/motsmeles/ Note: This is written in french.\nWhat my project does\nIt generate word search games with custom words, dimensions.\nTarget audience\nFor people who want to get fun with some word searching\nComparison"},
{"Title": "find_where - my first Python package published to PyPi", "Author": "dan_ohn", "Content": "PyPi\nSource What My Project Does\nfind_where is a Python package that provides a function to find values in dictionaries where a specified key matches a given value, similar to filtering in SQL. Target Audience\nThis is my first attempt at creating a Python package so I would describe this as a toy project at this stage but am definitely looking for feedback from the wider community. Comparison\nI mainly wrote this package because I kept on writing the same iterable based code when trying to find a value, given a key:"},
{"Title": "Would there be general interest for a library that ensure external application API call safety?", "Author": "SpeakerOk1974", "Content": "Python has become a popular inclusion as a scripting language for many professional software packages. However, the APIs presented by these applications may be unsafe and/or do not include pythonic error handling. As someone working in the energy sector at my day job, I often find myself wrestling issues external to my python code in our power system simulator (usually memory related) that due to the implementation of the API can error at runtime below the exception handling mechanism of the interpreter. I will have have to implement a library for this purpose either internally or as an open-source side project."},
{"Title": "Heavy Stack - Top to Bottom Python, Dev Container, Hot Reloading, More", "Author": "JamesHutchisonReal", "Content": "Trying this again a third time because automod flagged it as a resource and the mods do not appear to be responding.https://github.com/heavy-resume/heavy-stack What it does: The Heavy Stack is a template web framework that is top to bottom Python using Sanic / (custom) ReactPy / Brython. It's a complete solution that just works out of the box. Target Audience: This is production capable but a little on the early side. Iterating is quite fast. Comparison: Compared to other web frameworks:\nJust works out of the box, even has a docker image ready to go for the server and your postgres database that uses PG Vector."},
{"Title": "I now know again why I stopped using mamba / conda for setting up virtual environments", "Author": "RareRandomRedditor", "Content": "I have started at a new job and had the idea that it would probably be clever to set up my developing environment in exactly the same way as my predecessor did. Because:\nThis should help resolving errors quicker in the transition period\nHis code was good and clean and it appears that he knows what he is doing\nwe were using mostly the same tools (VScode etc.) anyways.\nHe set up his virtual environments (VE)s with conda/mamba. I vaguely remembered that I also used to do that but then stopped for some reason and switched to the virtualenv package. But I did not remember why anymore. So I just set up my VEs in the same way, it should not really make any difference anyways (so I thought). Well, fast forward about two weeks and now I have VEs that occasionally (but not always) exist twice in the same folders under the same name (according to mamba info --envs) and that are at the same time completely empty (according to mamba list) and contain all packages I have installed anywhere, ever (according to pip list). I usually install packages via pip and I assume this may have fucked things up in combination with mamba? I'll probably switch back to virtualenv again and add a \"do not use conda/mamba VEs !!!\" in my notes. I am working on Windows. Is mamba better on Linux?"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Pandas Python Introduction", "Author": "cyprusgreekstudent", "Content": "I'm sharing some of the Python tutorials I made. I teach Ukrainian teenagers and university students Python programming and data science for free. Here is an introduction to Pandas. It shows:\nHow to read data into a Pandas dataframe from a CSV file.\nShow how to print out the column names.\nSee and set the index.\nPrint sections of the dataframe."},
{"Title": "PyPDFCompare PDF Comparison CLI Tool", "Author": "Motox2019", "Content": "First time poster here, Ill preface this post by saying I am not a software engineer by any metric. I am a hobbyist programmer and I mainly just create programs I find particularly useful in my day job as a designer. Figured I would share my handy PDF comparison tool, see if anyone else can find it useful as well. This tool is mostly designed around comparing CAD drawings. It probably isn't great for comparing text documents at the moment though I plan to add this functionality. It works by comparing the pdf's page by page in a raster image format. It creates several output files of different styles:"},
{"Title": "Inline templating engine", "Author": "TheRealMrMatt", "Content": "I was wondering if anyone has come across anything like https://github.com/a-h/templ or https://hono.dev/guides/jsx, but for python. For context, I am familiar with jinja2, mako, etc. but find them to be unintuitive due to the loose coupling of logic (ex: database calls) and templating (ex: generating a list from the database results). Therefore, I am looking for a \"inline\" templating solution."},
{"Title": "I created a way to connect your Python to LLM to provide it with debugger-level context (OpenSource)", "Author": "Financial_Muffin396", "Content": "I recently developed an OpenSource solution that can auto-fix production exceptions for Python servers. Think of it as Datadog, but with the added capability to refactor your code. Currently, it's suitable for experimental use, and yes based on OpenAI API. The source code is available at https://github.com/CaptureFlow/captureflow-py. What My Project Does:\nIt incorporates a tracer client-side Python library and backend that accumulates such traces and is capable of proposing code improvements for your repository. It traverses the execution graph, extracts relevant parts of it, enriches it with implementation data from the GitHub API, and then generates suggestions using the OpenAI API."},
{"Title": "I made Cria - Run LLMs (AI) locally and programmatically with as little friction as possible", "Author": "reformedbillclinton", "Content": "https://github.com/leftmove/cria My name is Anonyo, and I am a seventeen year old from Southeast Michigan. This is my second open source project. I built Cria, a Python library that allows you to run LLMs programmatically through Python. Cria is designed so there is as little friction as possible — getting started takes just five lines of code. I created this library because I was using OpenAI in my project, and kept running into rate limits. With local LLMs getting better and better, I sought to switch, but found command line configurations to be limited. Running and configuring LLMs can be trivial, but programs like ollama make it easier. The only problem I found with ollama though, was the lack of features in its Python client."},
{"Title": "An efficient modeling interface for mathematical optimization: PyOptInterface", "Author": "c0decs", "Content": "I recently develop an efficient modeling interface for optimization problems in Python called PyOptInterface.\nSource code is at https://github.com/metab0t/PyOptInterface\nDocumentation is at https://metab0t.github.io/PyOptInterface/\nWhat My Project Does It is designed as a very thin wrapper of native C API of optimizers and attempts to provide common abstractions of an algebraic modelling environment including model, variable, constraint and expression with the least overhead of performance."},
{"Title": "[tutorial] Data imputation on real-time data source", "Author": "oli_k", "Content": "Hi there, My team at Bytewax and I have been working on a series of hands-on guides on streaming data and I am excited to share how one can handle missing values in real-time in Python. While some parts of the guide are simplified, for example, we use a random number generator as an input source, the algorithmic part is production-ready. We are taking advantage of the Numpy library + stateful operators in Bytewax. Other input sources are available, too. https://bytewax.io/guides/handling-missing-values"},
{"Title": "Molly - a data quality monitoring library specifically designed for time series data", "Author": "flaviaouyang", "Content": "What My Project Does\nMolly is designed to monitor time series data in a SQL database such as MySQL or PostgreSQL. Currently supported data quality feature:\n- staleness: when the data was last updated\n- completeness: whether any data is missing in a given date range Currently support messaging service:\n- Slack Web API"},
{"Title": "What is currently the fastest/state-of-the-art ODE solver in Python?", "Author": "D_vd_P", "Content": "For my application, Scipy's solvers are not fast enough so I am looking to speed up by using another package. These are some packages I have found so far:\nNumbaLSODA\nDifferentialEquations.jl\nTorchquad\n(Although doesn't solve ODEs, just integrates quickly, but that could be wrapped I guess)"},
{"Title": "Announcing The Python Logging Book & Course Kickstarter", "Author": "driscollis", "Content": "New developers print out strings to their terminal. It’s how we learn! But printing out to the terminal isn’t what you do with most professional applications. In those cases, you log into files. Sometimes, you log into multiple locations at once. These logs may serve as an audit trail for compliance purposes or help the engineers debug what went wrong. Python Logging teaches you how to log in the Python programming language. Python is one of the most popular programming languages in the world. Python comes with a logging module that makes logging easy."},
{"Title": "Most-watched PyData conference & meetup talks from 2023", "Author": "ad81923", "Content": "Just came across this list and I think it's amazing: https://techtalksweekly.substack.com/p/all-pydata-2023-talks"},
{"Title": "Is Pythonista (Python for iOS/iPadOS) no longer with active development and support?", "Author": "br_web", "Content": "I have not seen updates in almost a year and there is no activity in the support forum? Is there a replacement forum? Thanks"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Jobs that utilize Jupyter Notebook?", "Author": "Shadowforce426", "Content": "I have been programming for a few years now and have on and off had jobs in the industry. I used Jupyter Notebook in undergrad for a course almost a decade ago and I found it really cool. Back then I really didn’t know what I was doing and now I do. I think it’s cool how it makes it feel more like a TI calculator (I studied math originally) What are jobs that utilize this? What can I do or practice to put myself in a better position to land one?"},
{"Title": "chatpdb - gpt for your python debugger", "Author": "the1024", "Content": "https://github.com/Never-Over/chatpdb Do you ever copy code, errors, or stack traces into ChatGPT? We did, and found it frustrating to always have to manually find, copy, and paste each relevant piece of information. On top of that, being forced to change tools would switch our focus and cause us to lose our flow. That’s why we built chatpdb  - a python debugger with ChatGPT! Simply use chatpdb like you would use ipdb or pdb; it’s a drop in replacement with the exact same functionality. The only addition is the new y keyword, which will trigger a response from ChatGPT."},
{"Title": "How to Clean Data and work with outliers and Missing Data in Python Pandas", "Author": "cyprusgreekstudent", "Content": "I made a detailed tutorial on how to work with missing data, outliers, and how to lean up data in Pandas Python. This explains how to clean up your data so that your statistical results and trainin data is not skewed. https://github.com/werowe/HypatiaAcademy/blob/master/pandas/pandas_missing_data.ipynb"},
{"Title": "groupby in Python| Python Hacks you might now know.", "Author": "hasanul_islam", "Content": "Groupby in itertools module of python works differently that you might have thought. In this video, I have tried to explain very clearly about this feature. You are requested to watch the video. If you like, you can share the video and subscribe my youtube channel for further hacks. https://youtu.be/sX8G8qNwxjc?si=UTdHvbDKIMfOGhpr"},
{"Title": "Tkinter Variable class C/Python garbage collection mismatch", "Author": "ranemaeker", "Content": "Tkinter is going to drive me crazy. Let me lay this out for you: Tkinter is the GUI interface I am using, which is a python frontend for a C library It holds \"widgets\" in a window. Some widgets have variables (StringVar, BooleanVar, etc - not \"variables\" like code variables but a class of updatable data holders for the widgets to link to the Tcl backend) The Vars have incremental names like PYVAR1, PYVAR93, etc by default. Names can be provided to the Vars via keywords upon initialization. (Note I have not been able to find any reason to not do this - hence this post) Names should absolutely be provided to the Vars unless they are unique. Because on python garbage collection (or \"del Var\" command) the Vars are told to destroy() themselves and then this command is passed to C \"destroy this Var.\""},
{"Title": "Handling of long-running processes with timeouts in Flask + Gunicorn API app", "Author": "zacky2004", "Content": "I run an API (Python + Flask + Gunicorn) which has an endpoint that's calls a nested processes, which can sometimes take 6 seconds, to sometimes 60+ seconds to complete. The time it takes isn't a measure of my API's performance really, but rather its bottlenecked by an external service that the process has to rely on. Im looking for any suggested libraries that can safely handle this secondary process asynchronously with a long timeout. Ideally the API endpoint is called, and it won't have to wait for this process to finish if it takes more than 30+ seconds.\nHere's a mockup of what the chain of commands look like."},
{"Title": "I created an AI tool for using python to process excel and other files", "Author": "smallSohoSolo", "Content": "Hi, I'm Owen, and I've developed an AI tool for data processing. I spend a significant amount of time processing daily data from numerous Excel files, which requires me to write a lot of Python code. I have been using GitHub Copilot to assist with this, but I am exploring ways to eliminate the need to write code manually. The tool is called Tipis AI, and you can find it here: https://github.com/tipisai/tipis-fe What My Project Does Therefore, I have developed an AI that generates Python code for data processing. I've also created a Python runtime environment to execute this code."},
{"Title": "Ray on Golem MVP Launch: the Best Way of Running Python Code on the Golem Network", "Author": "GolemSM", "Content": "Golem Network has just released Ray on Golem MVP, a significant milestone in integrating Ray with Golem's decentralized infrastructure! 🎉\nCheck out all the details about the release and next steps in our blog post:\n📝 https://blog.golem.network/announcing-ray-on-golem-mvp-launch-the-recommended-way-of-running-python-code-on-the-golem-network/\n👉 Golem is looking for engaged beta testers to run diverse applications and collaborate on refining the solution. Interested? Find all the information on the brand-new Ray on Golem site:\n🔗"},
{"Title": "Deploying Multi-Module Python Applications on GCP: Service Recommendations?", "Author": "ste042024", "Content": "I'm working on a project involving a Python application with multiple interacting modules and am looking for some advice on deploying it efficiently on Google Cloud Platform. Here's a brief overview of what the application entails: Functionality Overview: • Data Fetching: One module fetches data from external websites. • Data Extraction: Another module extracts data from another GCP project. • Data Processing: Variables are processed across various modules. • CSV Output: The app generates and stores CSV files. • Scheduled Running: The application should run automatically once daily."},
{"Title": "Should I use pydantic for all my classes?", "Author": "uh_sorry_i_dont_know", "Content": "Pydantic makes your code safer by making it strongly typed. You can no longer input a wrongly typed argument without getting an error (if pydantic can't convert it). This is great but to me it seems that sometimes standard python classes still seem preferable. Perhaps it's because I'm not using it correctly but my code for a pydantic class is much longer then for a normal class. Especially if you are working with computed attributes. Then you have to start using special decorators and for every computed attribute you have to declare a function with \"def ...\" Instead of in an init function just being able to write attribute_3 = attribute 1 + attribute 2."},
{"Title": "ScrumMD: A CLI Scrum tool written in Python", "Author": "thelochok", "Content": "I got grumpy with our Scrum process, and I thought about what kinda tool I'd love to work with... so I started making it in my beloved Python. I think it's mature enough I'd like to start giving it to other people. It's called ScrumMD. It's open source, and you can already install it with pip (pip install scrummd) if you've got Python 3.10+. Documented, with tutorials on https://scrummd.readthedocs.io/en/stable/ and source on https://github.com/lkingsford/scrummd What my project does Short version is that it's some tools to support you storing all of your Scrum cards (or, I guess, other cards - tickets perhaps?) in markdown format on a local machine. There's intentionally a lot of flexibility - so, every card needs a summary, but everything else is fair game. You can configure to require fields for some collections (like needing status in stories), or limit fields (like requiring status be 'Done' or 'In Progress')."},
{"Title": "Intermediate Project: Python Plotly Data Visuals: Dropdowns and Range Sliders For User Interaction", "Author": "jgloewen", "Content": "Interactive data visualization is a powerful tool that can significantly enhance the analysis and interpretation of complex datasets. With Python, the Plotly library offers various features that can be used to create interactive publication-quality graphs. This project demonstrates how to use 2 of these awesome features:\nRange Slider\nDropdown Menu"},
{"Title": "Python 3.12.3 - The third maintenance release of Python 3.12", "Author": "Neustradamus", "Content": "https://www.python.org/downloads/release/python-3123/"},
{"Title": "Why Jupyter notebook", "Author": "IllogicalLunarBear", "Content": "I did a search and read previous discussions in this sub about why Jupyter labs exists. From what I understand it is for quick code to try things out especially in data science …. Thing is, can’t you get the same thing via a decent IDE with autocomplete and quality debug tools in some quick Python code like in VSCODE? I do that all the time…. I develop RNA computational software in Python and I abandoned Jupyter labs very early on as it just was not well suited to the job of bespoke data science. So many limitations and don’t get me started with widgets… I’ve been developing code for decades and I have spent 3 days trying to understand widgets and I think I finally understand how to modify a text box and get a value from it…. You have to observe (why?), then act on, then route through some output and then you can get the info? It’s like someone was drunk while trying to emulate visual C#."},
{"Title": "My latest TILs about Python", "Author": "JCx64", "Content": "After 10+ years working with it, I keep discovering new features. This is a list of the most recent ones: https://jcarlosroldan.com/post/329"},
{"Title": "Adnexus DI/IoC Framework", "Author": "Nictec", "Content": "Repo: https://github.com/Nictec/Adnexus What My Project Does: Adnexus is a declarative and fully typed DI/IoC framework for python. It is inspired by python-dependency-injector because this project is no longer maintained. Target Audience: Currently Adnexus is in heavy development. So expect heavy errors and breaking changes. Eventually if we reach 1.0.0 the project will be ready for production. Comparison: The main difference to existing (and maintained) projects is the \"declarative\" part of the framework. Injectables are declared direclty in the container class using Providers. This takes away the \"magic\" of IoC because it is clear where your dependencies come from. Furthermore all dependencies can be directly configured using the integrated config system (for details see the repo)"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Big O Cheat Sheet: the time complexities of operations Python's data structures", "Author": "treyhunner", "Content": "I made a cheat sheet of all common operations on Python's many data structures. This include both the built-in data structures and all common standard library data structures. The time complexities of different data structures in Python If you're unfamiliar with time complexity and Big O notation, be sure to read the first section and the last two sections. I also recommend Ned Batchelder's talk/article that explains this topic more deeply."},
{"Title": "Transforming Images to Art with Python: My Journey with Stable Diffusion", "Author": "Maleficent_Yak_993", "Content": "Hey Python community! I created a stable diffusion pipeline to convert reference images to prompt and used it along with text prompt to generate variations of reference image. Explainer video here: https://www.youtube.com/watch?v=x9VryjEcxzk"},
{"Title": "PGCacheWatch - Supercharge Your Caching Strategy", "Author": "GabelSnabel", "Content": "Hey Python enthusiasts! 👋\nI'm thrilled to introduce PGCacheWatch, my recent project designed to enhance your PostgreSQL databases by bringing real-time event notifications right into your applications. Vastly improved cache invalidation efficiency, without the need for adding any new services or infrastructure.\nWhat My Project Does\nPGCacheWatch capitalizes on PostgreSQL's built-in NOTIFY/LISTEN features to deliver instant, real-time notifications about database events, ensuring your application's cache remains fresh and synchronized with your database."},
{"Title": "bridge — automatic infrastructure for Django", "Author": "the1024", "Content": "https://github.com/Never-Over/bridge\nThe Problem\nWe built bridge to solve the most frustrating part of any new project — infrastructure. Whenever you spin up a new Django project, you usually have to manually configure Postgres, background workers, a task queue, and more. The problem is amplified when you go to deploy your application — hosting providers don’t understand anything about what you’ve configured already, so you have to run through an even more complicated process to set up the same infrastructure in a deployed environment."},
{"Title": "Advanced Macro & Calorie Calculator", "Author": "MCTrovato", "Content": "What My Project Does A macro-nutrient and calorie calculator to help me achieve body composition goals.\nThis calculator is compatible with metric and imperial units. It supports weight changes based on percentage and fixed values (lbs, kg). This is useful when losing weight in a fat loss phase as a percentage, and for gaining at a fixed value during a muscle growth phase.\nThe recommendations are built using scientific research based on lean body mass. If the user's body fat percentage is unknown, then it will be calculated using BMI and the Deurenberg formula.\nGeneral guidance is also available on the ."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "UXsim 1.1.1 released: Significantly increased performance for the network traffic flow simulator", "Author": "Balance-", "Content": "Version 1.1.1 of UXsim is released, which improves performance significantly. Main Changes in 1.1.1\nAdd setting to adjust vehicle logging time interval via World.vehicle_logging_timestep_interval\nBy lowering the interval (e.g., World.vehicle_logging_timestep_interval=2), the simulation time can be reduced (~20% speed up), and we can obtain vehicle trajectory data with slightly less accuracy.\nThe logging setting does not affect the internal simulation accuracy. Only the outputted trajectories are affected."},
{"Title": "Using Jupyter Notebooks with Flox", "Author": "z_mitchell", "Content": "https://flox.dev/blog/jupyter-remote-env Hey everyone, we released Flox 1.0 a few weeks ago and one of the cool things you can do is set up environments with a bunch of dependencies already set up for running a Jupyter notebook. Take a look to see how it all works!"},
{"Title": "Commercial pip packages?", "Author": "Normal_Antenna", "Content": "I’m aware there is a big open source community aspect to the python community. So my question is: “would uploading commercial software as a pip package offend the community?” I’m hesitant if this is normal, and if users would consider trials for components that would then make their project ask for a license to work after some time. Just wondering if it’s worth the effort to make products more accessible, or if it would just rub users the wrong way."},
{"Title": "Question: Tool for editing figures in Python", "Author": "Dangerous_Law1678", "Content": "So I'm trying to switch from MATLAB to Python for my numerical simulations. One of the things I like about MATLAB is the ability to edit figures by adding stuff (eg arrows, lines, text ... ) to the figure within the software itself. This is what I mean. It's a very handy tool in my line of work and I use it often. I was wondering if there's any similar tool for Python. I use matplotlib and seaborn. Any suggestions would be great. Thanks guys!"},
{"Title": "automathon: A Python library for simulating and visualizing finite automata", "Author": "fexx3l", "Content": "What my project does\nautomathon is a Python library for simulating and visualizing finite automata, is easy to use and have a docs website to read more about the functions that are implemented for DFAs and NFAs. During my CS degree, I learned about automata and this became one of my favorite topics, that's why I started to work on this project, I wanted to create something simple and easy to use.\nTarget audience"},
{"Title": "How fast can Python parse 1 billion rows of data? (1brc)", "Author": "mercer22", "Content": "https://www.youtube.com/watch?v=utTaPW32gKY I made a video summarizing the top techniques used by the Python community in the recently popular One Billion Row Challenge (1brc, https://github.com/gunnarmorling/1brc). I adapted one of the top Python submissions into the fastest pure Python approach for the 1brc (using only built-in libraries). Also, I tested a few awesome libraries (polars, duckdb) to see how well they can carve through the challenge's 1 billion rows of input data. If anyone wants to try to speed up my solution, then feel free to fork this repo and give it a shot!"},
{"Title": "pwdgen - a simple password generator", "Author": "RRTheGuy", "Content": "What my project does\nMy project generate simple, strong, memorable and easy-to-type passwords.\nTarget audience\nFor anyone who need to get passwords easily.\nComparison\nMost passwords manager generate completely passwords with completely random characters that aren't very easy to memorize or tape."},
{"Title": "Some days I really love python...", "Author": "Jazzlike-Compote4463", "Content": "I have a problem that I was terrible at listening to new music, everything I listen to is from around 2000 - 2010. There is a radio station here in the UK called BBC 6 music that has a decent playlist but since I only really listen in the car its not always appropriate to note the track names down - and my memory is terrible so I always forget by the time I get home. Luckily they put the playlist online but it's just text links so I can't add it to my music service of choice - YouTube Music. Thankfully the page is pretty simple so I wrote a basic ass scraper that will grab the HTML, parse through the tracks with beautful soup, then use the package to remove the old tracks from my playlist and recreate it with the freshly scraped data, then makes it dead easy to deploy and schedule it to run once a day."},
{"Title": "Paid libraries may kill Python", "Author": "Glxblt76", "Content": "It appeared too easy to me that we could create entire GUI from Python. I waited for the other shoe to drop, and it dropped. Now Anaconda and PySimpleGUI require payment if ever you want to use the libraries professionally. I wonder whether this will be the end of Python. It seems enshittification is finally reaching Python, where people previously used libraries for free and when they update them find out that they have to pay or stop using the libraries."},
{"Title": "Meta Used Monolithic Architecture Using Python to Ship Threads in Only Five Months", "Author": "rgancarz", "Content": "https://www.infoq.com/news/2024/04/meta-threads-instagram-5-months/ Zahan Malkani talked during QCon London 2024 about Meta's journey from identifying the opportunity in the market to shipping the Threads application only five months later. The company leveraged Instagram's existing monolithic architecture, written in Python and PHP, and quickly iterated to create a new text-first microblogging service in record time."},
{"Title": "float('inf') is bad practice", "Author": "Librarian-Rare", "Content": "I don't know why float('inf') was chosen as the way the language accesses infinity since this is using a magic string. Why couldn't it just be float.inf? That way magic string is avoided. Feels too basic of a best practice to be simply passed up. Anyone know the reason behind this?"},
{"Title": "async_api_caller - simplifies asynchronous web API calling", "Author": "teamamentum", "Content": "What My Project Does\nMaking asynchronous web API calls with asyncio and aiohttp can be complicated. This async_api_caller package abstracts away that complexity for a common case of needing to make multiple web API calls while varying query parameters. Installation git clone git@github.com:amentumspace/async_api_caller.git\ncd async_api_caller/\npip install ."},
{"Title": "Using Pandas 2 and different datetime erros", "Author": "technically_right_", "Content": "Hey Folks, I am working on a project that uses a bit old pandas version (1.5.3). I am trying to update it and use a more recent version (2.2.2). Its the first time I use pandas 2 btw. I simply ran all my unit tests and got multiple and different errors all concerning some datetime aspects. I tried troubleshooting by searching the errors and look in pandas release note but I find really complicated. It feels like the documentation is really exhaustive but I could really use a note on principal errors one can get switching to pandas 2. Does anyone have any handy blogpost, article, documentation that specifies this ? My focus is mainly on datetime errors when differences computed or comparaisons"},
{"Title": "magic-di: Dependency Injector with minimal boilerplate code, built-in support for FastAPI and Celery", "Author": "R1ngoB", "Content": "I’m excited to share something we’ve been working on at Wolt: a new dependency injection library for Python “magic-di”. Born from our experience with a large service that has many components such as: API, event consumers, background workers, and cron jobs. magic-di aims to simplify dependency management without the hassle. from magic_di.fastapi import inject_app, Provide\n\napp = inject_app(FastAPI())\n\n@app.get(path=\"/hello-reddit\") \ndef hello_reddit(service: Provide[Service]) -> dict: \n  return { \n     \"is_connected\": service.is_connected(),\n  }"},
{"Title": "kmeans-tjdwill: A K-Means Implementation that Maintains Data Association", "Author": "tjdwill", "Content": "Hello,   I recently published my first Python package on PyPi called kmeans-tjdwill (source). This is a k-means clustering implementation I wrote as a toy project that eventually was used extensively throughout my Master's degree, especially in my thesis. After a refactor and some optimization, I wanted to post here to hopefully elicit feedback and commentary from more experienced, professional software engineers. What My Project Does The central function is kmeans.cluster which segments input data into groups based on proximity to centroids. Users may either specify the initial means themselves or allow them to be chosen from among the input data. There is also a function for viewing the clustering process for 2-D and 3-D data, and, finally, a function that uses to perform image segmentation. Visual examples of both are found on the landing page of the Github repo linked above."},
{"Title": "3-dimensional/ heatmap peak picking?", "Author": "robbie_s1", "Content": "Hello python community. I’m pretty new to scripting and come from a pure chemistry background. I’m working with 3-D MALDI-trapped ion mobility mass spectrometry data and I’ve been looking for a solid algorithm that can peak pick from two ‘time-resolved’ dimensions (mass and mobility), and the intensity arrays associated with those two dimensions. I need to peak pick from a heatmap essentially. Does anyone know of any good 3-D peak picking algorithms, or otherwise know how I can approach this? Thank you all!"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Single file, hot reloading python server with raw websockets and inotify", "Author": "tootac", "Content": "A project to build a local server without any external dependencies with main features of hot reloading browser on source modification. The idea is to make it simple, standalone and work without any setup. The project uses regular sockets, websockets, inotify and a bit of javascript on the fly embedding to allow users to achieve automatic synchronization with browser. The article describes hot to monitor file changes with direct loading of libc and requesting kernel notify on change. Free article and code: https://hereket.com/posts/linux_live_reload_python_server/"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a team of AI manage my YouTube channel and my work with Python based framework CrewAI", "Author": "fx2mx3", "Content": "I found this awesome AI framework for python called \"Crew AI\", that allows us to create assistants, or agents in the CrewAI lingo, and assign specific tasks. I started my tiny youtube channel 3 months and for a youtuber, especially a novice one like myself, there are a bunch of tasks such as checking what other similar channels are doing, which topics are trending and if a video idea is good or not. There is also the part of coming up with the video content idea itself, create a catchy title, suitable youtube tags and finding the appropriate forum to talk about! You folks get the picture. It's a great project for anyone seeking to automate tasks not just related to a youtube channel, but this could easily be adapted to your daily job tasks, or even a startup idea."},
{"Title": "zpy can now use uv as a backend to replace Python's venv module and pip-tools", "Author": "AndydeCleyre", "Content": "Hello!\nWhat My Project Does\nzpy is a set of Zsh functions, mostly wrapping pip-tools or uv, for the simple and practical management of Python virtual environments, dependency specifications, and isolated Python app installation. You may find it a suitable alternative to poetry, pipenv, pipx, or unaided pip-tools or uv. There's a focus on use of good old requirements.txt files, and extensive tab completion assistance."},
{"Title": "Do folks ever use Pandas when they should use SQL?", "Author": "ChristianPacifist", "Content": "I think I see this a lot. I believe SQL, including like dataframe SQL packages, should always be used over Pandas when possible unless one is doing something Pandas is more suited to or unless someone requires broader Python control structures or features. I am a big believer in sticking to SQL as a baseline data manipulation framework and only using other frameworks if SQL is lacking. One of the biggest ways to accumulate technical debt is solving problems in multiple ways that are not standardized that not all people know."},
{"Title": "Anycrc - Python CRC computation library", "Author": "marzoogy", "Content": "Link: https://github.com/marzooqy/anycrc What My Project Does This is a Cython module with bindings to the crcany library. It supports calculating CRC hashes of arbitary sizes as well as updating a crc hash over time, and I believe that it is the fastest generic CRC library available for Python. Target Audience Anyone that needs to compute CRCs. Comparison with Alternatives crcmod-plus: A modernized version of the old crcmod library. It's highly customizable and fast. fastcrc: A library with bindings to the crc-rs library. Has a limited selection of CRCs to use. binascii: The standard library module comes with support for only CRC32 and CRC-CCITT, and at least the CRC32 implementation used is pretty fast according to my testing."},
{"Title": "Announcing pixi-kernel - Jupyter kernels using Pixi for reproducible notebooks", "Author": "renanengmec", "Content": "What My Project Does?\nHello everyone, I'm proud to announce a brand-new Python library named pixi-kernel: https://github.com/renan-r-santos/pixi-kernel allowing you to run Jupyter kernels using Pixi for reproducible notebooks. By the way, if you haven't heard of the Pixi package manager, check it out at https://pixi.sh/latest/.It supports conda and PyPI (through uv) packages, pyproject.toml config, git, path and editable installs and it is really fast."},
{"Title": "Automatically extract phone call insights with LLMs - quick tutorial", "Author": "SleekEagle", "Content": "Hey everyone! I wrote this quick Python script showing how you can automatically extract information from phone calls with LLMS. The call I use is a phone call received by a home building company where the caller is inquiring about an estimate for the cost to build a home on land he may purchase. Here's what the LLM extracted: SUMMARY:\n- The caller is interested in getting an estimate for building a house on a property he is looking to purchase in Westchester.\n\nACTION ITEMS:\n- Have someone call the customer back today to discuss building estimate.\n- Set up time for builder to assess potential property site prior to purchase.\n\nCONTACT INFORMATION:\nName: Lindstrom, Kenny\nPhone number: 610-265-1715"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "motsmeles - word search generator", "Author": "RRTheGuy", "Content": "https://github.com/RadoTheProgrammer/motsmeles/ Note: This is written in french.\nWhat my project does\nIt generate word search games with custom words, dimensions.\nTarget audience\nFor people who want to get fun with some word searching\nComparison"},
{"Title": "With the demise of open Pysimplegui is anyone interested in helping productionise this alternative?", "Author": "Black-DVD-Archiver", "Content": "I wrote my own Pyside6 alternative to Pysimple gui that I use in my projects starting some years back after some unsatisfactory interactions with the author of Pysimple gui. The GIT source for my GUI wrapper is in https://github.com/David-Worboys/Black-DVD-Archiver/blob/main/qtgui.py And the open source project it is used in is https://github.com/David-Worboys/Black-DVD-Archiver Just look for the layout methods in the .py files to see how it is used. https://github.com/David-Worboys/Black-DVD-Archiver/blob/main/video_cutter.py#L2391 is a good place to start, line 953,."},
{"Title": "Returns Python library for FP", "Author": "yinshangyi", "Content": "Hello!\nI work in big data space (data engineering), I mainly used Java, Scala and Python.\nI have been learning functional programming in greater depth and I found this Python library which seems pretty cool.\nhttps://github.com/dry-python/returns\nI've used it at work for implementing an Either based error handling.\nIt seems a great library.\nAny of you have used it?\nAny thoughts?\nFor sure, I prefer doing FP in Scala but given the job market isn't too kind too Scala and FP languages in general. What are your thoughts to bring FP (at least parts of it) to the Python world?\nSome people in the TypeScript world seem to take that direction:"},
{"Title": "Heavy Stack - Top to Bottom Python, Dev Container, Hot Reloading, More", "Author": "JamesHutchisonReal", "Content": "Trying this again a third time because automod flagged it as a resource and the mods do not appear to be responding.https://github.com/heavy-resume/heavy-stack What it does: The Heavy Stack is a template web framework that is top to bottom Python using Sanic / (custom) ReactPy / Brython. It's a complete solution that just works out of the box. Target Audience: This is production capable but a little on the early side. Iterating is quite fast. Comparison: Compared to other web frameworks:\nJust works out of the box, even has a docker image ready to go for the server and your postgres database that uses PG Vector."},
{"Title": "Introducing Stockdex: A Superior Python Package for Real-Time Financial Data Retrieval", "Author": "nginx26", "Content": "Greetings! I've previously introduced my Python package in this post. Since then, I've significantly enhanced its performance and expanded its capabilities.\nWhat My Project Does\nA lightweight python package designed for the efficient retrieval of financial data from various sources like Yahoo Finance, Nasdaq, Digrin and JustETF websites (somewhat similar to yfinance). This tool provides functionality akin to yfinance but with broader data access."},
{"Title": "Automated system testing on GUI app (Nodezator - Public domain generalist Python node editor)", "Author": "KennedyRichard", "Content": "Hello, everyone. I'm Kennedy Guerra, 33, open-source software maintainer. Just wanted to share a new feature I'm working on for the next version of Nodezator (GitHub | website), my public domain generalist Python node editor. In case you don't know Nodezator, the next few sections present it briefly. If you want to know about the new feature I'm working on, you can skip straight to the last subsection, which contains a detailed explanation and links to videos and extra info about the feature, called Automated System Testing."},
{"Title": "Python icon library with 5237 high-quality icons (Tabler Icons wrapper)", "Author": "niklashnng", "Content": "What My Project Does:\npytablericons is a Python wrapper for the tabler-icons project, which provides a set of 5237 free MIT-licensed high-quality SVG icons for web projects with each icon being designed on a 24x24 grid and a 2px stroke.\nIt allows you to load any of those SVG icons directly into a Pillow PNG Image in any size and color without losing quality and without having to download the icons manually or handling the SVG conversion yourself. For the outline icons, the stroke width is customizable as well. All of this is done in just a single line and since the icon is a Pillow Image, it can then be used easily with basically anything (e.g. PyQt5, PyQt6, PySide2, PySide6, Tkinter, etc.)"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A word search game generator", "Author": "RRTheGuy", "Content": "https://github.com/RadoTheProgrammer/motsmeles/\nWhat my project does\nIt generate word search games with custom words, dimensions.\nTarget audience\nFor people who want to get fun with some word searching\nComparison"},
{"Title": "Gmail Filter Squasher project", "Author": "unexpected_possum", "Content": "In Gmail I realized that I had way too many filters that performed exactly the same action, but they simply had different \"from\" addresses. To solve this I created this little project that merges similar filters into a single one. It does require a lot of setup due to having to authenticate into Gmail, but if someone is on the same situation as me, it could be helpful. Link to the project: github What My Project Does It connects into a Gmail account, reads their filters and squashes them into a single one. The program requires a manual setup of creating an OAuth credentials screen and downloading relevant credentials, which is cumbersome. But it's a one time effort as you can keep on using the application as long as you keep access to the GCP project."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made my very first python library! It converts reddit posts to text format for feeding to LLM's!", "Author": "NFeruch", "Content": "Hello everyone, I've been programming for about 4 years now and this is my first ever library that I created! What My Project Does It's called Reddit2Text, and it converts a reddit post (and all its comments) into a single, clean, easy to copy/paste string. I often like to ask ChatGPT about reddit posts, but copying all the relevant information among a large amount of comments is difficult/impossible. I searched for a tool or library that would help me do this and was astonished to find no such thing! I took it into my own hands and decided to make it myself. Target Audience This project is useable in its current state, and always looking for more feedback/features from the community!"},
{"Title": "What's the best library to find differences in two text files and visulaize it?", "Author": "TheGupta", "Content": "difflib is popular. Most of the answers on Stack Overflow uses it. But, I think Google's diff-match-patch is better. See an example here. Or, am I missing something?"},
{"Title": "Would there be general interest for a library that ensure external application API call safety?", "Author": "SpeakerOk1974", "Content": "Python has become a popular inclusion as a scripting language for many professional software packages. However, the APIs presented by these applications may be unsafe and/or do not include pythonic error handling. As someone working in the energy sector at my day job, I often find myself wrestling issues external to my python code in our power system simulator (usually memory related) that due to the implementation of the API can error at runtime below the exception handling mechanism of the interpreter. I will have have to implement a library for this purpose either internally or as an open-source side project."},
{"Title": "Alternative data managment tool to replace the need to use Jupyter Notebook for Python", "Author": "IllogicalLunarBear", "Content": "What My Project Does: For everyone who says they use jupyter Notebook for Python to do chunks of code work… I developed my own data management system for that kind of stuff that provides a wrapper over serialization that essentially creates pythonic pointers to data on any network drive. I just grab my data that I want to grab. Provides autocomplete and C# like attributes. I can dynamically build any data storage class using UML formatted infrastructure-as-code to build the front end. The back end is completely dynamic. Here is the pypi link. Note that I developed this to handle genomic data that was generated over the course of a week of 24/7 computation, that I break into multiple logical chunks. You dont need to rely on Jupyter to hold your data and you can retrieve it months after generating it."},
{"Title": "Ruff 0.4.0 just dropped, with a faster parser and a new language server", "Author": "QueasyEntrance6269", "Content": "Release notes here, seems to be a 20-40% improvement around the board. This version features a new hand-written parser (rather than a generated one) that is much faster and offers better error messages. It also comes with a new rust-native language server inspired by rust-analyzer, that is multithreaded. I think they’re challenging Pylance’s throne, wouldn’t be surprised if the team goes after type checking next."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Understanding State Machines in Python Through a Practical Example", "Author": "pemidi", "Content": "Hey everyone! I've written an article that simplifies the concept of state machines using Python, with a practical example related to order statuses. If you've ever been confused about state machines or just want a refresher with a real-world application, this might be just what you're looking for. Check it out and let me know what you think!\nRead the full article here I'm here for any questions or discussions"},
{"Title": "PyPDFCompare PDF Comparison CLI Tool", "Author": "Motox2019", "Content": "First time poster here, Ill preface this post by saying I am not a software engineer by any metric. I am a hobbyist programmer and I mainly just create programs I find particularly useful in my day job as a designer. Figured I would share my handy PDF comparison tool, see if anyone else can find it useful as well. This tool is mostly designed around comparing CAD drawings. It probably isn't great for comparing text documents at the moment though I plan to add this functionality. It works by comparing the pdf's page by page in a raster image format. It creates several output files of different styles:"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I created a way to connect your Python to LLM to provide it with debugger-level context (OpenSource)", "Author": "Financial_Muffin396", "Content": "I recently developed an OpenSource solution that can auto-fix production exceptions for Python servers. Think of it as Datadog, but with the added capability to refactor your code. Currently, it's suitable for experimental use, and yes based on OpenAI API. The source code is available at https://github.com/CaptureFlow/captureflow-py. What My Project Does:\nIt incorporates a tracer client-side Python library and backend that accumulates such traces and is capable of proposing code improvements for your repository. It traverses the execution graph, extracts relevant parts of it, enriches it with implementation data from the GitHub API, and then generates suggestions using the OpenAI API."},
{"Title": "Project: An Interactive Python Dashboard For Data Storytelling UN Food Security", "Author": "jgloewen", "Content": "Python’s Plotly Dash is a powerful tool for creating interactive data visualizations. As a Comp Sci professor, I use it extensively for interactive dashboards. Its usefulness lies in its ability to create web-based applications directly from Python code, without the need for additional web development skills.\nUsing UN food security data, let me show you an example of how you can create an interesting and useful Python Plotly dashboard that tells a data story using:"},
{"Title": "An efficient modeling interface for mathematical optimization: PyOptInterface", "Author": "c0decs", "Content": "I recently develop an efficient modeling interface for optimization problems in Python called PyOptInterface.\nSource code is at https://github.com/metab0t/PyOptInterface\nDocumentation is at https://metab0t.github.io/PyOptInterface/\nWhat My Project Does It is designed as a very thin wrapper of native C API of optimizers and attempts to provide common abstractions of an algebraic modelling environment including model, variable, constraint and expression with the least overhead of performance."},
{"Title": "I made a Python desktop app using PyWebview (similar to ElectronJS) & ReactJS that tracks time.", "Author": "zynix", "Content": "https://github.com/devdave/pyminder What does it do? The application is a very simple time tracker broken down by Client->Project->Task. In addition it has a summary report view plus a simple CRUD like data manager. The bigger goal was to see what it entailed to mix Python w/ReactJS and if it was easier using HTML+TypeScript over QT, TK, or some other unique API. Target Audience While I am using PyMinder to track my own work it wasn't meant for a general audience. Instead I am sharing this in case anyone else has a need to make a desktop application and looking for alternatives."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter. Weekly news, subscribe for free", "Author": "HP7933", "Content": "With the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe. 10,921 subscribers - the largest Python on hardware newsletter out there. Catch all the weekly news on Python for Microcontrollers with adafruitdaily.com. This ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!"},
{"Title": "Import pdf into python GUI and measure length within PDF", "Author": "Most-Guarantee956", "Content": "I'm interested to create a software where I can import some construction drawings and measure the distance within the PDF as a first step of my work. Tried a few open source pdf but none of them still allows me to have a correct measurement on the PDF, anyone have an idea?"},
{"Title": "PyPDFForm now lets you create widgets without Acrobat", "Author": "chinapandaman", "Content": "Hello ! Earlier this year I made a post about my open source project PyPDFForm and got some really nice feedbacks from you guys. I have been since then continuously working on it and I'd love to share you two really cool features that were newly added to the library. The first one is, like what the title says, the library finally supports creating a subset of widgets through code now. One of the previous hard dependency for PyPDFForm was that it requires a PDF template that was prepared using another tool, namely Adobe Acrobat or some web based ones like DocFly. Well now, at least for text field, checkbox, and dropdown, you can do it through plain Python code. I personally find this a huge milestone of the project and if you are interested in this new feature checkout the documentation ."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Open Sourcing a Python Project the Right Way in 2024", "Author": "Vegetable_Study3730", "Content": "I recently open-sourced a package and the tooling was a bit of a struggle. I decided to write down the steps & all the tools needed to open-source a Python package in a scalable way that invite users and contributors. https://jonathanadly.com/open-sourcing-a-python-project-the-right-way-in-2024 Happy to hear your feedback!"},
{"Title": "Python open source Projects", "Author": "Rare-Lion1261", "Content": "I'm seeking for python open source project where I can add things , colaborate with a community on building valuable stuff , Any good suggestions please ?"},
{"Title": "Python Wrapper For Meta AI (Llama 3)", "Author": "Significant-Turn4107", "Content": "Here is just a small wrapper to interact with the new MetaAI chat bot assistant with Python (https://www.meta.ai/), which is running the newly release Llama 3 model. Another nice thing is that its directly connected with Bing Search so you will be able to get the latest informations. https://github.com/Strvm/meta-ai-api"},
{"Title": "Where are you getting your Python news? (besides right here, of course)", "Author": "wanderingmonster", "Content": "Hello all. I just saw this post about Pandas, which lead to a discussion of Polars being much faster. Polars, which I had never heard about before this morning. This leads me to wonder: where are you all getting your Python news and other information? r/Python obviously, but I fear there are some pipelines or subscriptions for Python news, information about must-have new packages, and the like that I'm currently missing."},
{"Title": "Has PyPI ceased all support?", "Author": "baekalfen", "Content": "Does anyone know what’s going on behind the scenes of PyPI (who maintains `pip install`)? It seems like they’ve stopped processing support tickets over a month ago. I’ve hit the data limit for my package [PyBoy](https://github.com/baekalfen/pyboy), and I immediately posted a ticket to get the limit increased (as others have successfully done). But after more than a month, and several attempts at contacting the support team, I’ve heard nothing back, and I’ve run out of options. Does anyone know what’s happening, or how to get a comment from PyPI? My ticket is this one:"},
{"Title": "Do you make display-tables in Python? - \"The Design Philosophy of Great Tables\"", "Author": "economicurtis", "Content": "The maintainer of `great_tables` released an article about the design philosophy of his package https://posit-dev.github.io/great-tables/blog/design-philosophy/ Curious about your thoughts. What tools do you prefer to use when you need to share a data table based on work you've done in python?"},
{"Title": "Achieve true parallelism in Python 3.12", "Author": "ThatsAHumanPerson", "Content": "Article link: https://rishiraj.me/articles/2024-04/python_subinterpreter_parallelism I have written an article, which should be helpful to folks at all experience levels, covering various multi-tasking paradigms in computers, and how they apply in CPython, with its unique limitations like the Global Interpreter Lock. Using this knowledge, we look at traditional ways to achieve \"true parallelism\" (i.e. multiple tasks running at the same time) in Python. Finally, we build a solution utilizing newer concepts in Python 3.12 to run any arbitrary pure Python code in parallel across multiple threads. All the code used to achieve this, along with the benchmarking code are available in the repository linked in the blog-post."},
{"Title": "A solver of Le Compte Est Bon and Le Mot Le Plus Long", "Author": "RRTheGuy", "Content": "Hi, I made a new project called dcdljeu (written in French), a solver for the games Le Compte Est Bon and Le Mot Le Plus Long from the TV Show Des Chiffres Et Des Lettres."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "MPCode is a scripting programming language", "Author": "weksoftware", "Content": "MPCode is a small open-source scripting programming language written in python 3.12 The repository with the same name on github.com allows you to modify the language to your own needs, execute small scripts, write programmes and libraries.\nThe language itself already has functions, object groups, logical operators, loops and variables.\nThe current functionality has documentation in three languages (English, Italian and Russian) and some small code samples.\nIt would be very nice to get feedback and ideas from you.\nYou can also develop your own projects based on it, as the project is licensed by MIT.\nLink to the repository:"},
{"Title": "pipxu - a faster alternative to pipx", "Author": "bulletmark", "Content": "What my project does\npipxu installs Python applications, i.e. Python packages which have one or more executable programs, into independent isolated virtual environments on your system. Each package and it's dependencies are thus insulated from all other applications, and from the system Python. pipxu creates links to application executables in a common directory, which you have in your PATH. Packages are typically sourced from PyPI, the Python Package Index."},
{"Title": "Behavior of AttributeError in @property and __getattr__", "Author": "Hatteras-", "Content": "I'm sure that many people have encountered the following (code for reproduction below) behavior: if during the execution of `@property`, an `AttributeError` is raised and the same class implements `__getattr__` then `__getattr__` is invoked with the name of the property resulting in a confusing message: `AttributeError: 'Foo' object has no attribute 'something'`. If we remove `__getattr__` then we get a more meaningful and correct message: `AttributeError: 'Foo' object has no attribute 'bar'`. from dataclasses import dataclass\n\n@dataclass\nclass Foo: val = 'foo_value'\n\nclass Test: \n    def __init__(self): \n        self.foo = Foo()\n\n    def __getattr__(self, name):\n        return getattr(self.foo, name)\n    \n    @property\n    def something(self):\n        return self.foo.bar\n\nt = Test() t.something"},
{"Title": "Web API Security Champion: Broken Object Level Authorization (OWASP TOP 10) for Python Developers", "Author": "theowni", "Content": "Explaining one of the most common web API vulnerability classes - Broken Object Level Authorization in a practical manner. Providing a case study example based on the Damn Vulnerable RESTaurant API, including methods for identifying and preventing these vulnerabilities. https://devsec-blog.com/2024/04/web-api-security-champion-broken-object-level-authorization-owasp-top-10/"},
{"Title": "UXsim 1.1.0 released: Network traffic flow simulator gets Multilane support", "Author": "Balance-", "Content": "Version 1.1.0 of UXsim is released, which now supports modeling multilane ways. Main Changes\nAdd support for multilane links. More technically, it is a multilane, single-pipe model where vehicles cannot overtake others. This allows us to set traffic capacity significantly larger while keeping consistency to KW theory.\nSeparate Analyzer class from uxsim.py. This means that uxsim.py now contains only the essential codes for the simulation. It makes it easier for users to understand the simulation logic."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "chatpdb - gpt for your python debugger", "Author": "the1024", "Content": "https://github.com/Never-Over/chatpdb Do you ever copy code, errors, or stack traces into ChatGPT? We did, and found it frustrating to always have to manually find, copy, and paste each relevant piece of information. On top of that, being forced to change tools would switch our focus and cause us to lose our flow. That’s why we built chatpdb  - a python debugger with ChatGPT! Simply use chatpdb like you would use ipdb or pdb; it’s a drop in replacement with the exact same functionality. The only addition is the new y keyword, which will trigger a response from ChatGPT."},
{"Title": "Does it really matter what order you import modules in python?", "Author": "lizziemoon89", "Content": "I am trying to understand why anyone would care whether you import math or numpy first. I am told it is good practise but it just seem pointless to care."},
{"Title": "Is Litestar production ready 2024?", "Author": "I_will_delete_myself", "Content": "At least a couple things that seems is that Litestar appears to be a fast Django lite. Some batteries included, but not too many and opinionated. It's uses Rust so of course it's going to be fast, not that it really matters that much since IO > CPU for a website IMO. Which any async framework addresses this. I haven't heard many people using it though despite it having a lot of batteries included, but not dominating everything with first party support. Anyone using it in production in 2024? Edit: Fact check it appers it isn't written in Rust, I probably confused it with something else or it might just be data serialization"},
{"Title": "groupby in Python| Python Hacks you might now know.", "Author": "hasanul_islam", "Content": "Groupby in itertools module of python works differently that you might have thought. In this video, I have tried to explain very clearly about this feature. You are requested to watch the video. If you like, you can share the video and subscribe my youtube channel for further hacks. https://youtu.be/sX8G8qNwxjc?si=UTdHvbDKIMfOGhpr"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Demystifying list comprehensions in Python", "Author": "lyubolp", "Content": "In this article, I explain list comprehensions, as this is something people new to Python struggle with. Demystifying list comprehensions in Python"},
{"Title": "Handling of long-running processes with timeouts in Flask + Gunicorn API app", "Author": "zacky2004", "Content": "I run an API (Python + Flask + Gunicorn) which has an endpoint that's calls a nested processes, which can sometimes take 6 seconds, to sometimes 60+ seconds to complete. The time it takes isn't a measure of my API's performance really, but rather its bottlenecked by an external service that the process has to rely on. Im looking for any suggested libraries that can safely handle this secondary process asynchronously with a long timeout. Ideally the API endpoint is called, and it won't have to wait for this process to finish if it takes more than 30+ seconds.\nHere's a mockup of what the chain of commands look like."},
{"Title": "XZ Vulnerability Anaconda", "Author": "jimtoberfest", "Content": "Is the xz library compromised along with the xz Linux utility? Anaconda seems to auto load this library upon creation of new venvs."},
{"Title": "Using Polars to Write Multiple LazyFrames to Delta from One Source File", "Author": "EngiNerd9000", "Content": "I'm working on an ETL job that reads in a JSONL file, splits it into multiple Polars LazyFrames, collects those to DataFrames, and then writes them to a Delta Table. Prior to doing this with Polars, I would generally complete a task like this with either Pandas or PySpark depending on the size of data I was dealing with. I'm looking for any suggestions or advice the community has on doing this as efficiently as possible using Polars."},
{"Title": "Deploying Multi-Module Python Applications on GCP: Service Recommendations?", "Author": "ste042024", "Content": "I'm working on a project involving a Python application with multiple interacting modules and am looking for some advice on deploying it efficiently on Google Cloud Platform. Here's a brief overview of what the application entails: Functionality Overview: • Data Fetching: One module fetches data from external websites. • Data Extraction: Another module extracts data from another GCP project. • Data Processing: Variables are processed across various modules. • CSV Output: The app generates and stores CSV files. • Scheduled Running: The application should run automatically once daily."},
{"Title": "Nava: Python Light-Weight Sound-Player Library", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/openscilab/nava What My Project Does: Nava is a Python library that allows users to play sound in Python without any dependencies or platform restrictions. It is a cross-platform solution that runs on any operating system, including Windows, macOS, and Linux. Its lightweight and easy-to-use design makes Nava an ideal choice for developers looking to add sound functionality to their Python programs. import time\nfrom nava import play, stop\nsound_id = play(\"alarm.wav\", async_mode=True, loop=False)\ntime.sleep(4)\nstop(sound_id)"},
{"Title": "ChatGPT / Python", "Author": "meisghost", "Content": "A lot of people are starting to rely on ChatGPT to write code for them from time to time. What I have personally noticed is ChatGPT writes modules so heavy its ridiculous. Last night I was working on an issue a small but technical issue, and asked it for help, it spat out, I kid you not 200+ lines of code and I just thought to myself this cannot be right, it was so heavy I was shaking my head. After some trial and error I got a very elegant piece done in 15 lines of code. Way faster, cleaner and yes reusable. So, it's nice that you can ask CGPT a question from time to time but to rely on it for code structure at this point, in my opinion, no good. Nice to be here!"},
{"Title": "ScrumMD: A CLI Scrum tool written in Python", "Author": "thelochok", "Content": "I got grumpy with our Scrum process, and I thought about what kinda tool I'd love to work with... so I started making it in my beloved Python. I think it's mature enough I'd like to start giving it to other people. It's called ScrumMD. It's open source, and you can already install it with pip (pip install scrummd) if you've got Python 3.10+. Documented, with tutorials on https://scrummd.readthedocs.io/en/stable/ and source on https://github.com/lkingsford/scrummd What my project does Short version is that it's some tools to support you storing all of your Scrum cards (or, I guess, other cards - tickets perhaps?) in markdown format on a local machine. There's intentionally a lot of flexibility - so, every card needs a summary, but everything else is fair game. You can configure to require fields for some collections (like needing status in stories), or limit fields (like requiring status be 'Done' or 'In Progress')."},
{"Title": "privates.py - Stop others from touching your privates!", "Author": "ZeroIntensity", "Content": "Quick example: from privates import private\n\n@private\nclass Hello:\n    __readonly__ = \"bar\",  # No need for @property!\n    __protected__ = \"foo\",\n\n    def __init__(self):\n        self.bar = \"hello world!\"\n        self.foo = \"foo\"\n\n# Hello is now only usable from this module"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Why Jupyter notebook", "Author": "IllogicalLunarBear", "Content": "I did a search and read previous discussions in this sub about why Jupyter labs exists. From what I understand it is for quick code to try things out especially in data science …. Thing is, can’t you get the same thing via a decent IDE with autocomplete and quality debug tools in some quick Python code like in VSCODE? I do that all the time…. I develop RNA computational software in Python and I abandoned Jupyter labs very early on as it just was not well suited to the job of bespoke data science. So many limitations and don’t get me started with widgets… I’ve been developing code for decades and I have spent 3 days trying to understand widgets and I think I finally understand how to modify a text box and get a value from it…. You have to observe (why?), then act on, then route through some output and then you can get the info? It’s like someone was drunk while trying to emulate visual C#."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Docx2Python 2.10.0 will now extract comments from Word files", "Author": "Shay-Hill", "Content": "access comments with Docx2Python You can access docx comments with the comments attribute of the output DocxContent object. with docx2python('path/to/file.docx') as docx_content:\n    print(docx_content.comments) For each comment, this will return a tuple: (reference_text, author, date, comment_text)"},
{"Title": "Big O Cheat Sheet: the time complexities of operations Python's data structures", "Author": "treyhunner", "Content": "I made a cheat sheet of all common operations on Python's many data structures. This include both the built-in data structures and all common standard library data structures. The time complexities of different data structures in Python If you're unfamiliar with time complexity and Big O notation, be sure to read the first section and the last two sections. I also recommend Ned Batchelder's talk/article that explains this topic more deeply."},
{"Title": "Using FastAPI REST along with RabbitMQ", "Author": "Accembler", "Content": "I have searched for a workable solution for the marriage of FastAPI async REST with RabbitMQ async interop in one application. Here is a fully workable code I came up with (intentionally simplified). class MessageBrokerManager:\n    async def consume(self, loop):\n        try:\n            pika.BlockingConnection(\n                parameters=pika.ConnectionParameters(\n                    host=self._host,\n                    port=self._port,\n                    credentials=pika.PlainCredentials(\n                        username=self._username,\n                        password=self._password,\n                    ),\n                )\n            )\n        except Exception as e:\n            log_info_fail(\"Failed to connect to RabbitMQ\")\n            # return empty task\n            return asyncio.create_task(asyncio.sleep(0))\n\n        self._connection = await connect_robust(\n            host=self._host,\n            port=self._port,\n            login=self._username,\n            password=self._password,\n            loop=loop,\n        )\n\n        self._channel = await self._connection.channel()\n        queue = await self._channel.declare_queue(self._queue_name, durable=True)\n        await queue.consume(callback=MessageBrokerManager.on_message, no_ack=True)\n\n        return self._connection\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    try:\n        loop = asyncio.get_running_loop()\n        task = loop.create_task(MessageBrokerManager().consume(loop))\n        await task\n    except Exception as e:\n        pass\n    yield\n\napp = FastAPI(lifespan=lifespan)\napp.include_router(some_rest_router)"},
{"Title": "Who's going to PyCon US 2024?", "Author": "frocketgaming", "Content": "It's just around the corner. I'll be going on my own so it would be nice to meet up with some people potentially. Who plans to go and what speakers / sessions are you looking forward to?"},
{"Title": "Transforming Images to Art with Python: My Journey with Stable Diffusion", "Author": "Maleficent_Yak_993", "Content": "Hey Python community! I created a stable diffusion pipeline to convert reference images to prompt and used it along with text prompt to generate variations of reference image. Explainer video here: https://www.youtube.com/watch?v=x9VryjEcxzk"},
{"Title": "Serverless Python Support in Cloudflare Workers", "Author": "TheMadFratter", "Content": "Today Cloudflare has announced support for Python in their Clouldflare Workers serverless environment. This allows Python to be run at the edge on their global network using a combination of Pyodine and the V8 runtime. Announcement can be found on the Cloudflare Blog: https://blog.cloudflare.com/python-workers"},
{"Title": "constable - automatically inject print statements into your functions for debugging variables", "Author": "saurabh0719", "Content": "What My Project Does constable automatically injects print statements, during runtime, into your function code to give you a live step by step replay of each variable assignment. Github repo - https://github.com/saurabh0719/constable Target Audience Can be used in testing/debugging environments. Do not leave this hanging around in production! Comparison Use pdb for all purposes that matter. Or an object state tracker. Example - import constable\n\n@constable.trace('a', 'b')\ndef example(a, b):\n    a = a + b\n    c = a\n    a = \"Experimenting with the AST\"\n    b = c + b\n    a = c + b\n    return a\n\nexample(5, 6)"},
{"Title": "bridge — automatic infrastructure for Django", "Author": "the1024", "Content": "https://github.com/Never-Over/bridge\nThe Problem\nWe built bridge to solve the most frustrating part of any new project — infrastructure. Whenever you spin up a new Django project, you usually have to manually configure Postgres, background workers, a task queue, and more. The problem is amplified when you go to deploy your application — hosting providers don’t understand anything about what you’ve configured already, so you have to run through an even more complicated process to set up the same infrastructure in a deployed environment."},
{"Title": "Security Code Challenge for Developers & Ethical Hackers - Damn Vulnerable RESTaurant API", "Author": "theowni", "Content": "Security Code Challenge for Developers & Ethical Hackers – Damn Vulnerable RESTaurant A FastAPI based intentionally vulnerable web application teaching the most common security vulnerabilities in API through a dedicated game. Damn Vulnerable RESTaurant is operated by a mysterious Chef who has discovered that threat actors were able to compromise his restaurant’s API and the underlying system. He suspects that a competing restaurant located across the street might be involved in this attack! The goal of the challenge is to identify and fix vulnerabilities based on provided hints. During this adventure, you will have the opportunity to investigate how the attack was carried out and fix security issues to safeguard the application. Moreover, you can uncover the identity of the person behind the attack by the end of this adventure."},
{"Title": "Segmentation pipeline using MONAI and Pytorch", "Author": "zacky2004", "Content": "For my machine learning project, I created an 'end to end' segmentation pipeline using MONAI and Pytorch for the deep learning portion, and the Optuna hyper parameter optimization library for hyperparam optimization / search. The entire project is fully encapsulated/packaged using Poetry, so its really easy to install and use. The pipeline is fully customizable in terms of which models to use, model parameters, optimizers, as well as hyperparameters via configuration files. It also takes advantage of automatic mixed-precision for accelerated compute. I also have it integrated with Aimstack for experiment tracking and visualization."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Pandas - value replacement or interpolation", "Author": "DeskAdministrative42", "Content": "Hi all, here trying to replace values for a range of dates in a data frame copy I've made where DateTime is the index and the values I need to mass replace are in the 'Value' column. The reason why is I need to interpolate between two dates in a time series, where the data I have is incorrect due to measurement error. I need to replace it with interpolated data to make a more representative data set for forecasting Can anyone advise?"},
{"Title": "UXsim 1.1.1 released: Significantly increased performance for the network traffic flow simulator", "Author": "Balance-", "Content": "Version 1.1.1 of UXsim is released, which improves performance significantly. Main Changes in 1.1.1\nAdd setting to adjust vehicle logging time interval via World.vehicle_logging_timestep_interval\nBy lowering the interval (e.g., World.vehicle_logging_timestep_interval=2), the simulation time can be reduced (~20% speed up), and we can obtain vehicle trajectory data with slightly less accuracy.\nThe logging setting does not affect the internal simulation accuracy. Only the outputted trajectories are affected."},
{"Title": "Topic ideas for talk", "Author": "jackh53453", "Content": "I’m thinking about giving a talk at my Python group but struggling to think of an interesting topic. Any suggestions or recommendations of ways of brainstorming? I like running so was thinking about a talk about using the Strava API, maybe get the top running shoes, but not sure if that’d interest other people. Topic ideas please!"},
{"Title": "pointers.py being added to the standard library!", "Author": "ZeroIntensity", "Content": "As of PEP 4124 being accepted, the infamous pointers.py will be added to Python's standard library in 3.13! To quote Guido van Rossum's take on adding this, \"Why the hell not?\" This will also introduce pointer literals, the sizeof operator, and memory errors! from pointers import malloc\n\nptr = &\"spam\"  # Pointer literal\nprint(*ptr)\nmem = malloc(?\"hello\")  # New sizeof operator\nprint(*mem)  # MemoryError: junk 13118820 6422376 4200155 at 0x7649f65a9670\n# MemoryWarning: leak at 0x7649f65a9670"},
{"Title": "Commercial pip packages?", "Author": "Normal_Antenna", "Content": "I’m aware there is a big open source community aspect to the python community. So my question is: “would uploading commercial software as a pip package offend the community?” I’m hesitant if this is normal, and if users would consider trials for components that would then make their project ask for a license to work after some time. Just wondering if it’s worth the effort to make products more accessible, or if it would just rub users the wrong way."},
{"Title": "resvg-py, safe bindings for resvg project", "Author": "BasePlate_Admin", "Content": "Hi everyone,\nGithub\nDocumentation\nWhat my project does :\nFor a long time, i had a problem of rendering svg to png format. Specially after my project required opengraph image generation. Vercel's OG supports this functionality but that's JavaScript. So therefore i created this bindings to resvg library (same library used by vercel og)"},
{"Title": "Python isn't dramatic enough", "Author": "treyhunner", "Content": "Ever wished your Python interpreter had the dramatic feeling of a 300 baud modem connection? Today there's a solution: pip install dramatic dramatic on PyPI dramatic on GitHub What My Project Does All text output by Python will print character-by-character. It works as a context manager, as a decorator, or as a simple function call. Other features include a dramatic REPL, ability to run specific Python modules/scripts dramatically, and a --max-drama argument to make all Python programs dramatic all the time. Target Audience Those seeking amusement. Comparison Just like Python usually runs, but with the feeling that you're inside a text-based adventure game."},
{"Title": "Question: Tool for editing figures in Python", "Author": "Dangerous_Law1678", "Content": "So I'm trying to switch from MATLAB to Python for my numerical simulations. One of the things I like about MATLAB is the ability to edit figures by adding stuff (eg arrows, lines, text ... ) to the figure within the software itself. This is what I mean. It's a very handy tool in my line of work and I use it often. I was wondering if there's any similar tool for Python. I use matplotlib and seaborn. Any suggestions would be great. Thanks guys!"},
{"Title": "pydantic + dataloader = pydantic-resolve", "Author": "TurbulentAd8020", "Content": "https://github.com/allmonday/pydantic-resolve supports both pydantic v1 and v2. What My Project Does: a declaractive, schema based way for fetching and reorgnizing and changing data, from simple to complicated. Target Audience: production, web development Comparison: graphql frameworks. much simple, define specific schemas at backend. and can adjust data in backward stage of traversal. Introduction: I've used FastAPI for around two years, and like the pydantic as well. The idea of generating openapi.json from pydantic (response_model) is facinating, it help frontend generate clients based on it and simpilify the integration."},
{"Title": "geojson-shave: a command-line tool for reducing the file size of GeoJSON files", "Author": "Ok-Frosting7364", "Content": "Source code: https://github.com/ben-n93/geojson-shave What my Project Does\nReduces the file size of GeoJSON files by truncating coordinates to the specified decimal place, eliminating whitespace and (optionally) replacing the property key with an empty dictionary. Target Audience\nFor anyone that works with geospatial data (and specifically GeoJSON files) - so data analysts, data engineers, data journalists, GIS professionals, etc. Comparison There is a website that reduces the size of GeoJSON files, however it didn't work for me when I tested it. The advantage of my tool is that you can run it from the command-line and don't need an Internet connection."},
{"Title": "How fast can Python parse 1 billion rows of data? (1brc)", "Author": "mercer22", "Content": "https://www.youtube.com/watch?v=utTaPW32gKY I made a video summarizing the top techniques used by the Python community in the recently popular One Billion Row Challenge (1brc, https://github.com/gunnarmorling/1brc). I adapted one of the top Python submissions into the fastest pure Python approach for the 1brc (using only built-in libraries). Also, I tested a few awesome libraries (polars, duckdb) to see how well they can carve through the challenge's 1 billion rows of input data. If anyone wants to try to speed up my solution, then feel free to fork this repo and give it a shot!"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Drawpyo: create Draw.io diagrams with Python", "Author": "MerrimanIndustries", "Content": "This is a project that I initially created in a weekend for my own use after I was surprised to find out there was no easy way to generate Draw.io diagrams in Python. I'm a huge fan of Draw.io for documentation since it's free, lightweight, and the files are plaintext. After building basic initial functionality I decided to use this as a project to make a more mature Python library out of something I initially wrote for myself quick n dirty. I refactored (a lot), wrote docs, tests, build logic, etc. There's still a lot to do to make it as robust as it could be but I think it's good enough to share!"},
{"Title": "Some days I really love python...", "Author": "Jazzlike-Compote4463", "Content": "I have a problem that I was terrible at listening to new music, everything I listen to is from around 2000 - 2010. There is a radio station here in the UK called BBC 6 music that has a decent playlist but since I only really listen in the car its not always appropriate to note the track names down - and my memory is terrible so I always forget by the time I get home. Luckily they put the playlist online but it's just text links so I can't add it to my music service of choice - YouTube Music. Thankfully the page is pretty simple so I wrote a basic ass scraper that will grab the HTML, parse through the tracks with beautful soup, then use the package to remove the old tracks from my playlist and recreate it with the freshly scraped data, then makes it dead easy to deploy and schedule it to run once a day."},
{"Title": "Example Data Pipeline with Prefect, Delta Lake, and Dask", "Author": "dask-jeeves", "Content": "I’m an OSS developer (primarily working on Dask) and lately I’ve been talking to users about how they’re using Dask for ETL-style production workflows and this inspired me to make something myself. I wanted a simple example that met the following criteria:\nRun locally (optionally). Should be easy to try out locally and easily scalable.\nScalable to cloud. I didn’t want to think hard about cloud deployment.\nPython forward. I wanted to use tools familiar to Python users, not an ETL expert."},
{"Title": "Meta Used Monolithic Architecture Using Python to Ship Threads in Only Five Months", "Author": "rgancarz", "Content": "https://www.infoq.com/news/2024/04/meta-threads-instagram-5-months/ Zahan Malkani talked during QCon London 2024 about Meta's journey from identifying the opportunity in the market to shipping the Threads application only five months later. The company leveraged Instagram's existing monolithic architecture, written in Python and PHP, and quickly iterated to create a new text-first microblogging service in record time."},
{"Title": "The Best* Python Cheat Sheet", "Author": "kmhnz", "Content": "A dense Python cheat sheet with just what you need.\nDesign principles:\n• Focus on Python core\n• Comprehensive but selective (Just what you need)\n• Densely packed\n• Well-linked\n• Linkable\n• Responsive\n• Printable\nIssues and feedback are tracked at the .\n*It may not be the best Python cheat sheet, but it aspires to be."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "float('inf') is bad practice", "Author": "Librarian-Rare", "Content": "I don't know why float('inf') was chosen as the way the language accesses infinity since this is using a magic string. Why couldn't it just be float.inf? That way magic string is avoided. Feels too basic of a best practice to be simply passed up. Anyone know the reason behind this?"},
{"Title": "Python Inner class feature", "Author": "koldakov", "Content": "test.py import sys\nsys.setrecursionlimit(4)\nclass Foo:\n    class Foo:\n        foo = 1"},
{"Title": "JSON to Python - VSCode extension", "Author": "MichalMietus", "Content": "Hi, I just published my mini extension to VSCode with a command to convert a JSON object file to Python, something I often missed. I hope you will find it useful! https://marketplace.visualstudio.com/items?itemName=BringFuture.json-to-python What My Project Does: Converts JSON to Python\nTarget Audience: VSCode coders\nComparison: Formatters, etc. I could not find a tool to do exactly that"},
{"Title": "Using Pandas 2 and different datetime erros", "Author": "technically_right_", "Content": "Hey Folks, I am working on a project that uses a bit old pandas version (1.5.3). I am trying to update it and use a more recent version (2.2.2). Its the first time I use pandas 2 btw. I simply ran all my unit tests and got multiple and different errors all concerning some datetime aspects. I tried troubleshooting by searching the errors and look in pandas release note but I find really complicated. It feels like the documentation is really exhaustive but I could really use a note on principal errors one can get switching to pandas 2. Does anyone have any handy blogpost, article, documentation that specifies this ? My focus is mainly on datetime errors when differences computed or comparaisons"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python 3.12.3 Released", "Author": "chinawcswing", "Content": "https://www.python.org/downloads/release/python-3123/ 3.12.3 is the latest maintenance release, containing more than 300 bugfixes, build improvements and documentation changes since 3.12.2."},
{"Title": "kmeans-tjdwill: A K-Means Implementation that Maintains Data Association", "Author": "tjdwill", "Content": "Hello,   I recently published my first Python package on PyPi called kmeans-tjdwill (source). This is a k-means clustering implementation I wrote as a toy project that eventually was used extensively throughout my Master's degree, especially in my thesis. After a refactor and some optimization, I wanted to post here to hopefully elicit feedback and commentary from more experienced, professional software engineers. What My Project Does The central function is kmeans.cluster which segments input data into groups based on proximity to centroids. Users may either specify the initial means themselves or allow them to be chosen from among the input data. There is also a function for viewing the clustering process for 2-D and 3-D data, and, finally, a function that uses to perform image segmentation. Visual examples of both are found on the landing page of the Github repo linked above."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Awesome Python Library: Tenacity", "Author": "pysk00l", "Content": "When writing code or tests in Python, one issue I had was when the code would fail due to random things like network issues or external peripherals not responding in time. So I had to add extra code to retry the code, but this added unnecessary complexity. Thats when I discovered the Tenacity library and it saved me hours and a lot of useless boilerplate code. Link: https://tenacity.readthedocs.io/en/latest/ I wrote a blog on it with some examples: https://new.pythonforengineers.com/blog/awesome-python-library-tenacity/"},
{"Title": "zpy can now use uv as a backend to replace Python's venv module and pip-tools", "Author": "AndydeCleyre", "Content": "Hello!\nWhat My Project Does\nzpy is a set of Zsh functions, mostly wrapping pip-tools or uv, for the simple and practical management of Python virtual environments, dependency specifications, and isolated Python app installation. You may find it a suitable alternative to poetry, pipenv, pipx, or unaided pip-tools or uv. There's a focus on use of good old requirements.txt files, and extensive tab completion assistance."},
{"Title": "Build and Publish Your Python Project", "Author": "Shay-Hill", "Content": "In another article, I outlined how to handle Python imports and dependencies in Poetry. Poetry has a lot to recommend it:\nwrites a pyproject.toml file for you\ncreates an environment for you\npins top-level dependencies in pyproject.toml (nice if that’s what you want)\nautomates a lot of adding and removing dependencies"},
{"Title": "\"Gracefully\" Implementing Graceful Shutdowns - FastApi | Kubernetes | WebSockets | Black | Ruff Show", "Author": "Jainal09", "Content": "Overview\nWhen deploying a new version of an application, it is essential to ensure that no tasks are lost during the deployment process. This is especially important for applications that use WebSockets to maintain real-time connections with clients. In such cases, abruptly terminating the application can lead to data loss and client disconnections. What My Project Does? This project demonstrates how to implement graceful shutdowns using FastAPI and Kubernetes, that use WebSockets client connections and internal background queues."},
{"Title": "Announcing pixi-kernel - Jupyter kernels using Pixi for reproducible notebooks", "Author": "renanengmec", "Content": "What My Project Does?\nHello everyone, I'm proud to announce a brand-new Python library named pixi-kernel: https://github.com/renan-r-santos/pixi-kernel allowing you to run Jupyter kernels using Pixi for reproducible notebooks. By the way, if you haven't heard of the Pixi package manager, check it out at https://pixi.sh/latest/.It supports conda and PyPI (through uv) packages, pyproject.toml config, git, path and editable installs and it is really fast."},
{"Title": "motsmeles - word search generator", "Author": "RRTheGuy", "Content": "https://github.com/RadoTheProgrammer/motsmeles/ Note: This is written in french.\nWhat my project does\nIt generate word search games with custom words, dimensions.\nTarget audience\nFor people who want to get fun with some word searching\nComparison"},
{"Title": "Heavy Stack - Top to Bottom Python, Dev Container, Hot Reloading, More", "Author": "JamesHutchisonReal", "Content": "Trying this again a third time because automod flagged it as a resource and the mods do not appear to be responding.https://github.com/heavy-resume/heavy-stack What it does: The Heavy Stack is a template web framework that is top to bottom Python using Sanic / (custom) ReactPy / Brython. It's a complete solution that just works out of the box. Target Audience: This is production capable but a little on the early side. Iterating is quite fast. Comparison: Compared to other web frameworks:\nJust works out of the box, even has a docker image ready to go for the server and your postgres database that uses PG Vector."},
{"Title": "All Python conference talks from 2023 ordered by the number of views", "Author": "TechTalksWeekly", "Content": "Hello r/python 👋! Back in January, I've compiled a list of the most watched PyCon talks from 2023. I've received tons of positive feedback via DM, upvotes, and comments, so I decided to put together another compilation. This time around, I've gathered not only PyCon, but all Python 2023 talks across +100 conferences (here's the list) that include PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. The list is gigantic and includes over 850 talks**!** What's more, I've created a Google Sheets version of this post that gives more convenient sorting and filtering options."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python 3.12.3 - The third maintenance release of Python 3.12", "Author": "Neustradamus", "Content": "https://www.python.org/downloads/release/python-3123/"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter. Weekly news, subscribe for free", "Author": "HP7933", "Content": "With the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe. 10,921 subscribers - the largest Python on hardware newsletter out there. Catch all the weekly news on Python for Microcontrollers with adafruitdaily.com. This ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!"},
{"Title": "Adnexus DI/IoC Framework", "Author": "Nictec", "Content": "Repo: https://github.com/Nictec/Adnexus What My Project Does: Adnexus is a declarative and fully typed DI/IoC framework for python. It is inspired by python-dependency-injector because this project is no longer maintained. Target Audience: Currently Adnexus is in heavy development. So expect heavy errors and breaking changes. Eventually if we reach 1.0.0 the project will be ready for production. Comparison: The main difference to existing (and maintained) projects is the \"declarative\" part of the framework. Injectables are declared direclty in the container class using Providers. This takes away the \"magic\" of IoC because it is clear where your dependencies come from. Furthermore all dependencies can be directly configured using the integrated config system (for details see the repo)"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python open source Projects", "Author": "Rare-Lion1261", "Content": "I'm seeking for python open source project where I can add things , colaborate with a community on building valuable stuff , Any good suggestions please ?"},
{"Title": "PGCacheWatch - Supercharge Your Caching Strategy", "Author": "GabelSnabel", "Content": "Hey Python enthusiasts! 👋\nI'm thrilled to introduce PGCacheWatch, my recent project designed to enhance your PostgreSQL databases by bringing real-time event notifications right into your applications. Vastly improved cache invalidation efficiency, without the need for adding any new services or infrastructure.\nWhat My Project Does\nPGCacheWatch capitalizes on PostgreSQL's built-in NOTIFY/LISTEN features to deliver instant, real-time notifications about database events, ensuring your application's cache remains fresh and synchronized with your database."},
{"Title": "Where are you getting your Python news? (besides right here, of course)", "Author": "wanderingmonster", "Content": "Hello all. I just saw this post about Pandas, which lead to a discussion of Polars being much faster. Polars, which I had never heard about before this morning. This leads me to wonder: where are you all getting your Python news and other information? r/Python obviously, but I fear there are some pipelines or subscriptions for Python news, information about must-have new packages, and the like that I'm currently missing."},
{"Title": "Advanced Macro & Calorie Calculator", "Author": "MCTrovato", "Content": "What My Project Does A macro-nutrient and calorie calculator to help me achieve body composition goals.\nThis calculator is compatible with metric and imperial units. It supports weight changes based on percentage and fixed values (lbs, kg). This is useful when losing weight in a fat loss phase as a percentage, and for gaining at a fixed value during a muscle growth phase.\nThe recommendations are built using scientific research based on lean body mass. If the user's body fat percentage is unknown, then it will be calculated using BMI and the Deurenberg formula.\nGeneral guidance is also available on the ."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "chatpdb - gpt for your python debugger", "Author": "the1024", "Content": "https://github.com/Never-Over/chatpdb Do you ever copy code, errors, or stack traces into ChatGPT? We did, and found it frustrating to always have to manually find, copy, and paste each relevant piece of information. On top of that, being forced to change tools would switch our focus and cause us to lose our flow. That’s why we built chatpdb  - a python debugger with ChatGPT! Simply use chatpdb like you would use ipdb or pdb; it’s a drop in replacement with the exact same functionality. The only addition is the new y keyword, which will trigger a response from ChatGPT."},
{"Title": "Using Jupyter Notebooks with Flox", "Author": "z_mitchell", "Content": "https://flox.dev/blog/jupyter-remote-env Hey everyone, we released Flox 1.0 a few weeks ago and one of the cool things you can do is set up environments with a bunch of dependencies already set up for running a Jupyter notebook. Take a look to see how it all works!"},
{"Title": "groupby in Python| Python Hacks you might now know.", "Author": "hasanul_islam", "Content": "Groupby in itertools module of python works differently that you might have thought. In this video, I have tried to explain very clearly about this feature. You are requested to watch the video. If you like, you can share the video and subscribe my youtube channel for further hacks. https://youtu.be/sX8G8qNwxjc?si=UTdHvbDKIMfOGhpr"},
{"Title": "automathon: A Python library for simulating and visualizing finite automata", "Author": "fexx3l", "Content": "What my project does\nautomathon is a Python library for simulating and visualizing finite automata, is easy to use and have a docs website to read more about the functions that are implemented for DFAs and NFAs. During my CS degree, I learned about automata and this became one of my favorite topics, that's why I started to work on this project, I wanted to create something simple and easy to use.\nTarget audience"},
{"Title": "pwdgen - a simple password generator", "Author": "RRTheGuy", "Content": "What my project does\nMy project generate simple, strong, memorable and easy-to-type passwords.\nTarget audience\nFor anyone who need to get passwords easily.\nComparison\nMost passwords manager generate completely passwords with completely random characters that aren't very easy to memorize or tape."},
{"Title": "Paid libraries may kill Python", "Author": "Glxblt76", "Content": "It appeared too easy to me that we could create entire GUI from Python. I waited for the other shoe to drop, and it dropped. Now Anaconda and PySimpleGUI require payment if ever you want to use the libraries professionally. I wonder whether this will be the end of Python. It seems enshittification is finally reaching Python, where people previously used libraries for free and when they update them find out that they have to pay or stop using the libraries."},
{"Title": "async_api_caller - simplifies asynchronous web API calling", "Author": "teamamentum", "Content": "What My Project Does\nMaking asynchronous web API calls with asyncio and aiohttp can be complicated. This async_api_caller package abstracts away that complexity for a common case of needing to make multiple web API calls while varying query parameters. Installation git clone git@github.com:amentumspace/async_api_caller.git\ncd async_api_caller/\npip install ."},
{"Title": "magic-di: Dependency Injector with minimal boilerplate code, built-in support for FastAPI and Celery", "Author": "R1ngoB", "Content": "I’m excited to share something we’ve been working on at Wolt: a new dependency injection library for Python “magic-di”. Born from our experience with a large service that has many components such as: API, event consumers, background workers, and cron jobs. magic-di aims to simplify dependency management without the hassle. from magic_di.fastapi import inject_app, Provide\n\napp = inject_app(FastAPI())\n\n@app.get(path=\"/hello-reddit\") \ndef hello_reddit(service: Provide[Service]) -> dict: \n  return { \n     \"is_connected\": service.is_connected(),\n  }"},
{"Title": "3-dimensional/ heatmap peak picking?", "Author": "robbie_s1", "Content": "Hello python community. I’m pretty new to scripting and come from a pure chemistry background. I’m working with 3-D MALDI-trapped ion mobility mass spectrometry data and I’ve been looking for a solid algorithm that can peak pick from two ‘time-resolved’ dimensions (mass and mobility), and the intensity arrays associated with those two dimensions. I need to peak pick from a heatmap essentially. Does anyone know of any good 3-D peak picking algorithms, or otherwise know how I can approach this? Thank you all!"},
{"Title": "Do you make display-tables in Python? - \"The Design Philosophy of Great Tables\"", "Author": "economicurtis", "Content": "The maintainer of `great_tables` released an article about the design philosophy of his package https://posit-dev.github.io/great-tables/blog/design-philosophy/ Curious about your thoughts. What tools do you prefer to use when you need to share a data table based on work you've done in python?"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A solver of Le Compte Est Bon and Le Mot Le Plus Long", "Author": "RRTheGuy", "Content": "Hi, I made a new project called dcdljeu (written in French), a solver for the games Le Compte Est Bon and Le Mot Le Plus Long from the TV Show Des Chiffres Et Des Lettres."},
{"Title": "Do folks ever use Pandas when they should use SQL?", "Author": "ChristianPacifist", "Content": "I think I see this a lot. I believe SQL, including like dataframe SQL packages, should always be used over Pandas when possible unless one is doing something Pandas is more suited to or unless someone requires broader Python control structures or features. I am a big believer in sticking to SQL as a baseline data manipulation framework and only using other frameworks if SQL is lacking. One of the biggest ways to accumulate technical debt is solving problems in multiple ways that are not standardized that not all people know."},
{"Title": "pipxu - a faster alternative to pipx", "Author": "bulletmark", "Content": "What my project does\npipxu installs Python applications, i.e. Python packages which have one or more executable programs, into independent isolated virtual environments on your system. Each package and it's dependencies are thus insulated from all other applications, and from the system Python. pipxu creates links to application executables in a common directory, which you have in your PATH. Packages are typically sourced from PyPI, the Python Package Index."},
{"Title": "Automatically extract phone call insights with LLMs - quick tutorial", "Author": "SleekEagle", "Content": "Hey everyone! I wrote this quick Python script showing how you can automatically extract information from phone calls with LLMS. The call I use is a phone call received by a home building company where the caller is inquiring about an estimate for the cost to build a home on land he may purchase. Here's what the LLM extracted: SUMMARY:\n- The caller is interested in getting an estimate for building a house on a property he is looking to purchase in Westchester.\n\nACTION ITEMS:\n- Have someone call the customer back today to discuss building estimate.\n- Set up time for builder to assess potential property site prior to purchase.\n\nCONTACT INFORMATION:\nName: Lindstrom, Kenny\nPhone number: 610-265-1715"},
{"Title": "Handling of long-running processes with timeouts in Flask + Gunicorn API app", "Author": "zacky2004", "Content": "I run an API (Python + Flask + Gunicorn) which has an endpoint that's calls a nested processes, which can sometimes take 6 seconds, to sometimes 60+ seconds to complete. The time it takes isn't a measure of my API's performance really, but rather its bottlenecked by an external service that the process has to rely on. Im looking for any suggested libraries that can safely handle this secondary process asynchronously with a long timeout. Ideally the API endpoint is called, and it won't have to wait for this process to finish if it takes more than 30+ seconds.\nHere's a mockup of what the chain of commands look like."},
{"Title": "UXsim 1.1.0 released: Network traffic flow simulator gets Multilane support", "Author": "Balance-", "Content": "Version 1.1.0 of UXsim is released, which now supports modeling multilane ways. Main Changes\nAdd support for multilane links. More technically, it is a multilane, single-pipe model where vehicles cannot overtake others. This allows us to set traffic capacity significantly larger while keeping consistency to KW theory.\nSeparate Analyzer class from uxsim.py. This means that uxsim.py now contains only the essential codes for the simulation. It makes it easier for users to understand the simulation logic."},
{"Title": "With the demise of open Pysimplegui is anyone interested in helping productionise this alternative?", "Author": "Black-DVD-Archiver", "Content": "I wrote my own Pyside6 alternative to Pysimple gui that I use in my projects starting some years back after some unsatisfactory interactions with the author of Pysimple gui. The GIT source for my GUI wrapper is in https://github.com/David-Worboys/Black-DVD-Archiver/blob/main/qtgui.py And the open source project it is used in is https://github.com/David-Worboys/Black-DVD-Archiver Just look for the layout methods in the .py files to see how it is used. https://github.com/David-Worboys/Black-DVD-Archiver/blob/main/video_cutter.py#L2391 is a good place to start, line 953,."},
{"Title": "Deploying Multi-Module Python Applications on GCP: Service Recommendations?", "Author": "ste042024", "Content": "I'm working on a project involving a Python application with multiple interacting modules and am looking for some advice on deploying it efficiently on Google Cloud Platform. Here's a brief overview of what the application entails: Functionality Overview: • Data Fetching: One module fetches data from external websites. • Data Extraction: Another module extracts data from another GCP project. • Data Processing: Variables are processed across various modules. • CSV Output: The app generates and stores CSV files. • Scheduled Running: The application should run automatically once daily."},
{"Title": "Does it really matter what order you import modules in python?", "Author": "lizziemoon89", "Content": "I am trying to understand why anyone would care whether you import math or numpy first. I am told it is good practise but it just seem pointless to care."},
{"Title": "Automated system testing on GUI app (Nodezator - Public domain generalist Python node editor)", "Author": "KennedyRichard", "Content": "Hello, everyone. I'm Kennedy Guerra, 33, open-source software maintainer. Just wanted to share a new feature I'm working on for the next version of Nodezator (GitHub | website), my public domain generalist Python node editor. In case you don't know Nodezator, the next few sections present it briefly. If you want to know about the new feature I'm working on, you can skip straight to the last subsection, which contains a detailed explanation and links to videos and extra info about the feature, called Automated System Testing."},
{"Title": "ScrumMD: A CLI Scrum tool written in Python", "Author": "thelochok", "Content": "I got grumpy with our Scrum process, and I thought about what kinda tool I'd love to work with... so I started making it in my beloved Python. I think it's mature enough I'd like to start giving it to other people. It's called ScrumMD. It's open source, and you can already install it with pip (pip install scrummd) if you've got Python 3.10+. Documented, with tutorials on https://scrummd.readthedocs.io/en/stable/ and source on https://github.com/lkingsford/scrummd What my project does Short version is that it's some tools to support you storing all of your Scrum cards (or, I guess, other cards - tickets perhaps?) in markdown format on a local machine. There's intentionally a lot of flexibility - so, every card needs a summary, but everything else is fair game. You can configure to require fields for some collections (like needing status in stories), or limit fields (like requiring status be 'Done' or 'In Progress')."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Why Jupyter notebook", "Author": "IllogicalLunarBear", "Content": "I did a search and read previous discussions in this sub about why Jupyter labs exists. From what I understand it is for quick code to try things out especially in data science …. Thing is, can’t you get the same thing via a decent IDE with autocomplete and quality debug tools in some quick Python code like in VSCODE? I do that all the time…. I develop RNA computational software in Python and I abandoned Jupyter labs very early on as it just was not well suited to the job of bespoke data science. So many limitations and don’t get me started with widgets… I’ve been developing code for decades and I have spent 3 days trying to understand widgets and I think I finally understand how to modify a text box and get a value from it…. You have to observe (why?), then act on, then route through some output and then you can get the info? It’s like someone was drunk while trying to emulate visual C#."},
{"Title": "Gmail Filter Squasher project", "Author": "unexpected_possum", "Content": "In Gmail I realized that I had way too many filters that performed exactly the same action, but they simply had different \"from\" addresses. To solve this I created this little project that merges similar filters into a single one. It does require a lot of setup due to having to authenticate into Gmail, but if someone is on the same situation as me, it could be helpful. Link to the project: github What My Project Does It connects into a Gmail account, reads their filters and squashes them into a single one. The program requires a manual setup of creating an OAuth credentials screen and downloading relevant credentials, which is cumbersome. But it's a one time effort as you can keep on using the application as long as you keep access to the GCP project."},
{"Title": "XZ Vulnerability Anaconda", "Author": "jimtoberfest", "Content": "Is the xz library compromised along with the xz Linux utility? Anaconda seems to auto load this library upon creation of new venvs."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made my very first python library! It converts reddit posts to text format for feeding to LLM's!", "Author": "NFeruch", "Content": "Hello everyone, I've been programming for about 4 years now and this is my first ever library that I created! What My Project Does It's called Reddit2Text, and it converts a reddit post (and all its comments) into a single, clean, easy to copy/paste string. I often like to ask ChatGPT about reddit posts, but copying all the relevant information among a large amount of comments is difficult/impossible. I searched for a tool or library that would help me do this and was astonished to find no such thing! I took it into my own hands and decided to make it myself. Target Audience This project is useable in its current state, and always looking for more feedback/features from the community!"},
{"Title": "Nava: Python Light-Weight Sound-Player Library", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/openscilab/nava What My Project Does: Nava is a Python library that allows users to play sound in Python without any dependencies or platform restrictions. It is a cross-platform solution that runs on any operating system, including Windows, macOS, and Linux. Its lightweight and easy-to-use design makes Nava an ideal choice for developers looking to add sound functionality to their Python programs. import time\nfrom nava import play, stop\nsound_id = play(\"alarm.wav\", async_mode=True, loop=False)\ntime.sleep(4)\nstop(sound_id)"},
{"Title": "Big O Cheat Sheet: the time complexities of operations Python's data structures", "Author": "treyhunner", "Content": "I made a cheat sheet of all common operations on Python's many data structures. This include both the built-in data structures and all common standard library data structures. The time complexities of different data structures in Python If you're unfamiliar with time complexity and Big O notation, be sure to read the first section and the last two sections. I also recommend Ned Batchelder's talk/article that explains this topic more deeply."},
{"Title": "Would there be general interest for a library that ensure external application API call safety?", "Author": "SpeakerOk1974", "Content": "Python has become a popular inclusion as a scripting language for many professional software packages. However, the APIs presented by these applications may be unsafe and/or do not include pythonic error handling. As someone working in the energy sector at my day job, I often find myself wrestling issues external to my python code in our power system simulator (usually memory related) that due to the implementation of the API can error at runtime below the exception handling mechanism of the interpreter. I will have have to implement a library for this purpose either internally or as an open-source side project."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Transforming Images to Art with Python: My Journey with Stable Diffusion", "Author": "Maleficent_Yak_993", "Content": "Hey Python community! I created a stable diffusion pipeline to convert reference images to prompt and used it along with text prompt to generate variations of reference image. Explainer video here: https://www.youtube.com/watch?v=x9VryjEcxzk"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "bridge — automatic infrastructure for Django", "Author": "the1024", "Content": "https://github.com/Never-Over/bridge\nThe Problem\nWe built bridge to solve the most frustrating part of any new project — infrastructure. Whenever you spin up a new Django project, you usually have to manually configure Postgres, background workers, a task queue, and more. The problem is amplified when you go to deploy your application — hosting providers don’t understand anything about what you’ve configured already, so you have to run through an even more complicated process to set up the same infrastructure in a deployed environment."},
{"Title": "Docx2Python 2.10.0 will now extract comments from Word files", "Author": "Shay-Hill", "Content": "access comments with Docx2Python You can access docx comments with the comments attribute of the output DocxContent object. with docx2python('path/to/file.docx') as docx_content:\n    print(docx_content.comments) For each comment, this will return a tuple: (reference_text, author, date, comment_text)"},
{"Title": "PyPDFCompare PDF Comparison CLI Tool", "Author": "Motox2019", "Content": "First time poster here, Ill preface this post by saying I am not a software engineer by any metric. I am a hobbyist programmer and I mainly just create programs I find particularly useful in my day job as a designer. Figured I would share my handy PDF comparison tool, see if anyone else can find it useful as well. This tool is mostly designed around comparing CAD drawings. It probably isn't great for comparing text documents at the moment though I plan to add this functionality. It works by comparing the pdf's page by page in a raster image format. It creates several output files of different styles:"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Who's going to PyCon US 2024?", "Author": "frocketgaming", "Content": "It's just around the corner. I'll be going on my own so it would be nice to meet up with some people potentially. Who plans to go and what speakers / sessions are you looking forward to?"},
{"Title": "I created a way to connect your Python to LLM to provide it with debugger-level context (OpenSource)", "Author": "Financial_Muffin396", "Content": "I recently developed an OpenSource solution that can auto-fix production exceptions for Python servers. Think of it as Datadog, but with the added capability to refactor your code. Currently, it's suitable for experimental use, and yes based on OpenAI API. The source code is available at https://github.com/CaptureFlow/captureflow-py. What My Project Does:\nIt incorporates a tracer client-side Python library and backend that accumulates such traces and is capable of proposing code improvements for your repository. It traverses the execution graph, extracts relevant parts of it, enriches it with implementation data from the GitHub API, and then generates suggestions using the OpenAI API."},
{"Title": "UXsim 1.1.1 released: Significantly increased performance for the network traffic flow simulator", "Author": "Balance-", "Content": "Version 1.1.1 of UXsim is released, which improves performance significantly. Main Changes in 1.1.1\nAdd setting to adjust vehicle logging time interval via World.vehicle_logging_timestep_interval\nBy lowering the interval (e.g., World.vehicle_logging_timestep_interval=2), the simulation time can be reduced (~20% speed up), and we can obtain vehicle trajectory data with slightly less accuracy.\nThe logging setting does not affect the internal simulation accuracy. Only the outputted trajectories are affected."},
{"Title": "Serverless Python Support in Cloudflare Workers", "Author": "TheMadFratter", "Content": "Today Cloudflare has announced support for Python in their Clouldflare Workers serverless environment. This allows Python to be run at the edge on their global network using a combination of Pyodine and the V8 runtime. Announcement can be found on the Cloudflare Blog: https://blog.cloudflare.com/python-workers"},
{"Title": "An efficient modeling interface for mathematical optimization: PyOptInterface", "Author": "c0decs", "Content": "I recently develop an efficient modeling interface for optimization problems in Python called PyOptInterface.\nSource code is at https://github.com/metab0t/PyOptInterface\nDocumentation is at https://metab0t.github.io/PyOptInterface/\nWhat My Project Does It is designed as a very thin wrapper of native C API of optimizers and attempts to provide common abstractions of an algebraic modelling environment including model, variable, constraint and expression with the least overhead of performance."},
{"Title": "Commercial pip packages?", "Author": "Normal_Antenna", "Content": "I’m aware there is a big open source community aspect to the python community. So my question is: “would uploading commercial software as a pip package offend the community?” I’m hesitant if this is normal, and if users would consider trials for components that would then make their project ask for a license to work after some time. Just wondering if it’s worth the effort to make products more accessible, or if it would just rub users the wrong way."},
{"Title": "Security Code Challenge for Developers & Ethical Hackers - Damn Vulnerable RESTaurant API", "Author": "theowni", "Content": "Security Code Challenge for Developers & Ethical Hackers – Damn Vulnerable RESTaurant A FastAPI based intentionally vulnerable web application teaching the most common security vulnerabilities in API through a dedicated game. Damn Vulnerable RESTaurant is operated by a mysterious Chef who has discovered that threat actors were able to compromise his restaurant’s API and the underlying system. He suspects that a competing restaurant located across the street might be involved in this attack! The goal of the challenge is to identify and fix vulnerabilities based on provided hints. During this adventure, you will have the opportunity to investigate how the attack was carried out and fix security issues to safeguard the application. Moreover, you can uncover the identity of the person behind the attack by the end of this adventure."},
{"Title": "Question: Tool for editing figures in Python", "Author": "Dangerous_Law1678", "Content": "So I'm trying to switch from MATLAB to Python for my numerical simulations. One of the things I like about MATLAB is the ability to edit figures by adding stuff (eg arrows, lines, text ... ) to the figure within the software itself. This is what I mean. It's a very handy tool in my line of work and I use it often. I was wondering if there's any similar tool for Python. I use matplotlib and seaborn. Any suggestions would be great. Thanks guys!"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "How fast can Python parse 1 billion rows of data? (1brc)", "Author": "mercer22", "Content": "https://www.youtube.com/watch?v=utTaPW32gKY I made a video summarizing the top techniques used by the Python community in the recently popular One Billion Row Challenge (1brc, https://github.com/gunnarmorling/1brc). I adapted one of the top Python submissions into the fastest pure Python approach for the 1brc (using only built-in libraries). Also, I tested a few awesome libraries (polars, duckdb) to see how well they can carve through the challenge's 1 billion rows of input data. If anyone wants to try to speed up my solution, then feel free to fork this repo and give it a shot!"},
{"Title": "pointers.py being added to the standard library!", "Author": "ZeroIntensity", "Content": "As of PEP 4124 being accepted, the infamous pointers.py will be added to Python's standard library in 3.13! To quote Guido van Rossum's take on adding this, \"Why the hell not?\" This will also introduce pointer literals, the sizeof operator, and memory errors! from pointers import malloc\n\nptr = &\"spam\"  # Pointer literal\nprint(*ptr)\nmem = malloc(?\"hello\")  # New sizeof operator\nprint(*mem)  # MemoryError: junk 13118820 6422376 4200155 at 0x7649f65a9670\n# MemoryWarning: leak at 0x7649f65a9670"},
{"Title": "Some days I really love python...", "Author": "Jazzlike-Compote4463", "Content": "I have a problem that I was terrible at listening to new music, everything I listen to is from around 2000 - 2010. There is a radio station here in the UK called BBC 6 music that has a decent playlist but since I only really listen in the car its not always appropriate to note the track names down - and my memory is terrible so I always forget by the time I get home. Luckily they put the playlist online but it's just text links so I can't add it to my music service of choice - YouTube Music. Thankfully the page is pretty simple so I wrote a basic ass scraper that will grab the HTML, parse through the tracks with beautful soup, then use the package to remove the old tracks from my playlist and recreate it with the freshly scraped data, then makes it dead easy to deploy and schedule it to run once a day."},
{"Title": "Meta Used Monolithic Architecture Using Python to Ship Threads in Only Five Months", "Author": "rgancarz", "Content": "https://www.infoq.com/news/2024/04/meta-threads-instagram-5-months/ Zahan Malkani talked during QCon London 2024 about Meta's journey from identifying the opportunity in the market to shipping the Threads application only five months later. The company leveraged Instagram's existing monolithic architecture, written in Python and PHP, and quickly iterated to create a new text-first microblogging service in record time."},
{"Title": "Python isn't dramatic enough", "Author": "treyhunner", "Content": "Ever wished your Python interpreter had the dramatic feeling of a 300 baud modem connection? Today there's a solution: pip install dramatic dramatic on PyPI dramatic on GitHub What My Project Does All text output by Python will print character-by-character. It works as a context manager, as a decorator, or as a simple function call. Other features include a dramatic REPL, ability to run specific Python modules/scripts dramatically, and a --max-drama argument to make all Python programs dramatic all the time. Target Audience Those seeking amusement. Comparison Just like Python usually runs, but with the feeling that you're inside a text-based adventure game."},
{"Title": "float('inf') is bad practice", "Author": "Librarian-Rare", "Content": "I don't know why float('inf') was chosen as the way the language accesses infinity since this is using a magic string. Why couldn't it just be float.inf? That way magic string is avoided. Feels too basic of a best practice to be simply passed up. Anyone know the reason behind this?"},
{"Title": "geojson-shave: a command-line tool for reducing the file size of GeoJSON files", "Author": "Ok-Frosting7364", "Content": "Source code: https://github.com/ben-n93/geojson-shave What my Project Does\nReduces the file size of GeoJSON files by truncating coordinates to the specified decimal place, eliminating whitespace and (optionally) replacing the property key with an empty dictionary. Target Audience\nFor anyone that works with geospatial data (and specifically GeoJSON files) - so data analysts, data engineers, data journalists, GIS professionals, etc. Comparison There is a website that reduces the size of GeoJSON files, however it didn't work for me when I tested it. The advantage of my tool is that you can run it from the command-line and don't need an Internet connection."},
{"Title": "Using Pandas 2 and different datetime erros", "Author": "technically_right_", "Content": "Hey Folks, I am working on a project that uses a bit old pandas version (1.5.3). I am trying to update it and use a more recent version (2.2.2). Its the first time I use pandas 2 btw. I simply ran all my unit tests and got multiple and different errors all concerning some datetime aspects. I tried troubleshooting by searching the errors and look in pandas release note but I find really complicated. It feels like the documentation is really exhaustive but I could really use a note on principal errors one can get switching to pandas 2. Does anyone have any handy blogpost, article, documentation that specifies this ? My focus is mainly on datetime errors when differences computed or comparaisons"},
{"Title": "Drawpyo: create Draw.io diagrams with Python", "Author": "MerrimanIndustries", "Content": "This is a project that I initially created in a weekend for my own use after I was surprised to find out there was no easy way to generate Draw.io diagrams in Python. I'm a huge fan of Draw.io for documentation since it's free, lightweight, and the files are plaintext. After building basic initial functionality I decided to use this as a project to make a more mature Python library out of something I initially wrote for myself quick n dirty. I refactored (a lot), wrote docs, tests, build logic, etc. There's still a lot to do to make it as robust as it could be but I think it's good enough to share!"},
{"Title": "kmeans-tjdwill: A K-Means Implementation that Maintains Data Association", "Author": "tjdwill", "Content": "Hello,   I recently published my first Python package on PyPi called kmeans-tjdwill (source). This is a k-means clustering implementation I wrote as a toy project that eventually was used extensively throughout my Master's degree, especially in my thesis. After a refactor and some optimization, I wanted to post here to hopefully elicit feedback and commentary from more experienced, professional software engineers. What My Project Does The central function is kmeans.cluster which segments input data into groups based on proximity to centroids. Users may either specify the initial means themselves or allow them to be chosen from among the input data. There is also a function for viewing the clustering process for 2-D and 3-D data, and, finally, a function that uses to perform image segmentation. Visual examples of both are found on the landing page of the Github repo linked above."},
{"Title": "The Best* Python Cheat Sheet", "Author": "kmhnz", "Content": "A dense Python cheat sheet with just what you need.\nDesign principles:\n• Focus on Python core\n• Comprehensive but selective (Just what you need)\n• Densely packed\n• Well-linked\n• Linkable\n• Responsive\n• Printable\nIssues and feedback are tracked at the .\n*It may not be the best Python cheat sheet, but it aspires to be."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python Inner class feature", "Author": "koldakov", "Content": "test.py import sys\nsys.setrecursionlimit(4)\nclass Foo:\n    class Foo:\n        foo = 1"},
{"Title": "zpy can now use uv as a backend to replace Python's venv module and pip-tools", "Author": "AndydeCleyre", "Content": "Hello!\nWhat My Project Does\nzpy is a set of Zsh functions, mostly wrapping pip-tools or uv, for the simple and practical management of Python virtual environments, dependency specifications, and isolated Python app installation. You may find it a suitable alternative to poetry, pipenv, pipx, or unaided pip-tools or uv. There's a focus on use of good old requirements.txt files, and extensive tab completion assistance."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Announcing pixi-kernel - Jupyter kernels using Pixi for reproducible notebooks", "Author": "renanengmec", "Content": "What My Project Does?\nHello everyone, I'm proud to announce a brand-new Python library named pixi-kernel: https://github.com/renan-r-santos/pixi-kernel allowing you to run Jupyter kernels using Pixi for reproducible notebooks. By the way, if you haven't heard of the Pixi package manager, check it out at https://pixi.sh/latest/.It supports conda and PyPI (through uv) packages, pyproject.toml config, git, path and editable installs and it is really fast."},
{"Title": "motsmeles - word search generator", "Author": "RRTheGuy", "Content": "https://github.com/RadoTheProgrammer/motsmeles/ Note: This is written in french.\nWhat my project does\nIt generate word search games with custom words, dimensions.\nTarget audience\nFor people who want to get fun with some word searching\nComparison"},
{"Title": "Heavy Stack - Top to Bottom Python, Dev Container, Hot Reloading, More", "Author": "JamesHutchisonReal", "Content": "Trying this again a third time because automod flagged it as a resource and the mods do not appear to be responding.https://github.com/heavy-resume/heavy-stack What it does: The Heavy Stack is a template web framework that is top to bottom Python using Sanic / (custom) ReactPy / Brython. It's a complete solution that just works out of the box. Target Audience: This is production capable but a little on the early side. Iterating is quite fast. Comparison: Compared to other web frameworks:\nJust works out of the box, even has a docker image ready to go for the server and your postgres database that uses PG Vector."},
{"Title": "Python 3.12.3 - The third maintenance release of Python 3.12", "Author": "Neustradamus", "Content": "https://www.python.org/downloads/release/python-3123/"},
{"Title": "Adnexus DI/IoC Framework", "Author": "Nictec", "Content": "Repo: https://github.com/Nictec/Adnexus What My Project Does: Adnexus is a declarative and fully typed DI/IoC framework for python. It is inspired by python-dependency-injector because this project is no longer maintained. Target Audience: Currently Adnexus is in heavy development. So expect heavy errors and breaking changes. Eventually if we reach 1.0.0 the project will be ready for production. Comparison: The main difference to existing (and maintained) projects is the \"declarative\" part of the framework. Injectables are declared direclty in the container class using Providers. This takes away the \"magic\" of IoC because it is clear where your dependencies come from. Furthermore all dependencies can be directly configured using the integrated config system (for details see the repo)"},
{"Title": "PGCacheWatch - Supercharge Your Caching Strategy", "Author": "GabelSnabel", "Content": "Hey Python enthusiasts! 👋\nI'm thrilled to introduce PGCacheWatch, my recent project designed to enhance your PostgreSQL databases by bringing real-time event notifications right into your applications. Vastly improved cache invalidation efficiency, without the need for adding any new services or infrastructure.\nWhat My Project Does\nPGCacheWatch capitalizes on PostgreSQL's built-in NOTIFY/LISTEN features to deliver instant, real-time notifications about database events, ensuring your application's cache remains fresh and synchronized with your database."},
{"Title": "Advanced Macro & Calorie Calculator", "Author": "MCTrovato", "Content": "What My Project Does A macro-nutrient and calorie calculator to help me achieve body composition goals.\nThis calculator is compatible with metric and imperial units. It supports weight changes based on percentage and fixed values (lbs, kg). This is useful when losing weight in a fat loss phase as a percentage, and for gaining at a fixed value during a muscle growth phase.\nThe recommendations are built using scientific research based on lean body mass. If the user's body fat percentage is unknown, then it will be calculated using BMI and the Deurenberg formula.\nGeneral guidance is also available on the ."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Using Jupyter Notebooks with Flox", "Author": "z_mitchell", "Content": "https://flox.dev/blog/jupyter-remote-env Hey everyone, we released Flox 1.0 a few weeks ago and one of the cool things you can do is set up environments with a bunch of dependencies already set up for running a Jupyter notebook. Take a look to see how it all works!"},
{"Title": "automathon: A Python library for simulating and visualizing finite automata", "Author": "fexx3l", "Content": "What my project does\nautomathon is a Python library for simulating and visualizing finite automata, is easy to use and have a docs website to read more about the functions that are implemented for DFAs and NFAs. During my CS degree, I learned about automata and this became one of my favorite topics, that's why I started to work on this project, I wanted to create something simple and easy to use.\nTarget audience"},
{"Title": "pwdgen - a simple password generator", "Author": "RRTheGuy", "Content": "What my project does\nMy project generate simple, strong, memorable and easy-to-type passwords.\nTarget audience\nFor anyone who need to get passwords easily.\nComparison\nMost passwords manager generate completely passwords with completely random characters that aren't very easy to memorize or tape."},
{"Title": "AnyPathLib - A unified PathLib-like API for cloud storages", "Author": "kfirgold99", "Content": "Hi everybody, I'm happy to share AnyPathLib 🛣️, a pip package I created to simplify access to different storage resources - S3, Azure, and local storage. What My Project Does: Basically, instead of writing custom code to handle the different storage resources using the SDK (boto3, azure-sdk), you can now just use AnyPathLib: from anypathlib import AnyPath\n  \n\n  \n# Create an AnyPath instance for a local file\n  \n\n  \nlocal_file = AnyPath(\"/path/to/local/file.txt\")\n  \n\n  \n# Create an AnyPath instance for an S3 object\n  \n\n  \ns3_file = AnyPath(\"s3://bucket/path/to/object.txt\")\n  \n\n  \n# Copy a file from local to S3\n  \n\n  \nlocal_file.copy(s3_file)\n  \n\n  \n# Copy a directory from S3 to Azure\n  \n\n  \ns3_dir = AnyPath(\"s3://bucket/path/to/dir\") \n  \nazure_dir = AnyPath(\"https://account_name.blob.core.windows.net/container_name/path\") \n\ns3_dir.copy(azure_dir)"},
{"Title": "Paid libraries may kill Python", "Author": "Glxblt76", "Content": "It appeared too easy to me that we could create entire GUI from Python. I waited for the other shoe to drop, and it dropped. Now Anaconda and PySimpleGUI require payment if ever you want to use the libraries professionally. I wonder whether this will be the end of Python. It seems enshittification is finally reaching Python, where people previously used libraries for free and when they update them find out that they have to pay or stop using the libraries."},
{"Title": "Portr: Open source self hosted ngrok alternative designed for teams", "Author": "ShiftDefeat", "Content": "https://github.com/amalshaji/portr What my project does? Portr is a tunnelling solution that let's you expose local http/tcp connections to the public internet. Target audience Developers that work with webhooks or callbacks. Or anyone who want to quickly share their dev server with others. Comparison\nMonitor connections, and manage teams and members via the admin dashboard. Watch video\nInspect and replay HTTP requests using portr inspector. Watch video."},
{"Title": "async_api_caller - simplifies asynchronous web API calling", "Author": "teamamentum", "Content": "What My Project Does\nMaking asynchronous web API calls with asyncio and aiohttp can be complicated. This async_api_caller package abstracts away that complexity for a common case of needing to make multiple web API calls while varying query parameters. Installation git clone git@github.com:amentumspace/async_api_caller.git\ncd async_api_caller/\npip install ."},
{"Title": "Better PDF Layout Detection for LLM's + table support", "Author": "serjester4", "Content": "What's the first step to building 90% of AI applications?\nChunking your documents! Unfortunately there's very few libraries for this and most rely on naively splitting text into N characters. You lose so much valuable information hidden in the layout of the document when you do this. If you give an LLM bad inputs, you're going to get bad results. https://github.com/Filimoa/open-parse/ What it does: The library can detect the layout of a PDF, convert to markdown and extract tables into html in one line of code. You can then feed this directly into your vector database or something like LlamaIndex. It does all this while preserving bounding boxes so you can display citations directly to the user."},
{"Title": "magic-di: Dependency Injector with minimal boilerplate code, built-in support for FastAPI and Celery", "Author": "R1ngoB", "Content": "I’m excited to share something we’ve been working on at Wolt: a new dependency injection library for Python “magic-di”. Born from our experience with a large service that has many components such as: API, event consumers, background workers, and cron jobs. magic-di aims to simplify dependency management without the hassle. from magic_di.fastapi import inject_app, Provide\n\napp = inject_app(FastAPI())\n\n@app.get(path=\"/hello-reddit\") \ndef hello_reddit(service: Provide[Service]) -> dict: \n  return { \n     \"is_connected\": service.is_connected(),\n  }"},
{"Title": "Behavior of AttributeError in @property and __getattr__", "Author": "Hatteras-", "Content": "I'm sure that many people have encountered the following (code for reproduction below) behavior: if during the execution of `@property`, an `AttributeError` is raised and the same class implements `__getattr__` then `__getattr__` is invoked with the name of the property resulting in a confusing message: `AttributeError: 'Foo' object has no attribute 'something'`. If we remove `__getattr__` then we get a more meaningful and correct message: `AttributeError: 'Foo' object has no attribute 'bar'`. from dataclasses import dataclass\n\n@dataclass\nclass Foo: val = 'foo_value'\n\nclass Test: \n    def __init__(self): \n        self.foo = Foo()\n\n    def __getattr__(self, name):\n        return getattr(self.foo, name)\n    \n    @property\n    def something(self):\n        return self.foo.bar\n\nt = Test() t.something"},
{"Title": "Genuine question: Where should I share my opinion about Python language?", "Author": "HalfAByteIsWord", "Content": "I recently posted my opinions on the import system in Python and how it can be made more intuitive and straightforward. I got some comments, some of them are just snappy as usual and some of them had some suggestions and workarounds. Either way the post got removed, citing that it is not suitable for this sub-reddit. I mean, come on, I cannot talk about Python features in Python sub-reddit? Update: To mods: Thanks for letting me have this conversation. To others who made helpful comments, thank you. Original post: I don't want to recreate the post verbatim here, I don't remember it exactly too. It was basically something like this,"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "3-dimensional/ heatmap peak picking?", "Author": "robbie_s1", "Content": "Hello python community. I’m pretty new to scripting and come from a pure chemistry background. I’m working with 3-D MALDI-trapped ion mobility mass spectrometry data and I’ve been looking for a solid algorithm that can peak pick from two ‘time-resolved’ dimensions (mass and mobility), and the intensity arrays associated with those two dimensions. I need to peak pick from a heatmap essentially. Does anyone know of any good 3-D peak picking algorithms, or otherwise know how I can approach this? Thank you all!"},
{"Title": "Is Litestar production ready 2024?", "Author": "I_will_delete_myself", "Content": "At least a couple things that seems is that Litestar appears to be a fast Django lite. Some batteries included, but not too many and opinionated. It's uses Rust so of course it's going to be fast, not that it really matters that much since IO > CPU for a website IMO. Which any async framework addresses this. I haven't heard many people using it though despite it having a lot of batteries included, but not dominating everything with first party support. Anyone using it in production in 2024? Edit: Fact check it appers it isn't written in Rust, I probably confused it with something else or it might just be data serialization"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wrote a Python script for downloading images/GIFs from subreddits in bulk.", "Author": "MonsieurKebab", "Content": "What my Project Does\nIt's a program that searches through posts in a specified subreddit and downloads images, gifs etc.\nTarget Audience\nIt's a toy project at this point, but I might extend its functionality if I can find good resources. Maybe even add support for different websites (imgur et al.).\nComparison"},
{"Title": "Demystifying list comprehensions in Python", "Author": "lyubolp", "Content": "In this article, I explain list comprehensions, as this is something people new to Python struggle with. Demystifying list comprehensions in Python"},
{"Title": "Do folks ever use Pandas when they should use SQL?", "Author": "ChristianPacifist", "Content": "I think I see this a lot. I believe SQL, including like dataframe SQL packages, should always be used over Pandas when possible unless one is doing something Pandas is more suited to or unless someone requires broader Python control structures or features. I am a big believer in sticking to SQL as a baseline data manipulation framework and only using other frameworks if SQL is lacking. One of the biggest ways to accumulate technical debt is solving problems in multiple ways that are not standardized that not all people know."},
{"Title": "How to parallelize Pandas with Modin", "Author": "linchpiner", "Content": "Discover the power of Modin in overcoming the performance bottlenecks of Pandas. We'll walk you through how a simple switch can reduce your waiting times and make your workflow smooth and speedy, all without leaving the comfort of Pandas behind. Modin is an active open source project. Take a look to this blog post to see if it is applicable for your code: https://dchigarev.github.io/modin_perf_examples/"},
{"Title": "Using Polars to Write Multiple LazyFrames to Delta from One Source File", "Author": "EngiNerd9000", "Content": "I'm working on an ETL job that reads in a JSONL file, splits it into multiple Polars LazyFrames, collects those to DataFrames, and then writes them to a Delta Table. Prior to doing this with Polars, I would generally complete a task like this with either Pandas or PySpark depending on the size of data I was dealing with. I'm looking for any suggestions or advice the community has on doing this as efficiently as possible using Polars."},
{"Title": "Automatically extract phone call insights with LLMs - quick tutorial", "Author": "SleekEagle", "Content": "Hey everyone! I wrote this quick Python script showing how you can automatically extract information from phone calls with LLMS. The call I use is a phone call received by a home building company where the caller is inquiring about an estimate for the cost to build a home on land he may purchase. Here's what the LLM extracted: SUMMARY:\n- The caller is interested in getting an estimate for building a house on a property he is looking to purchase in Westchester.\n\nACTION ITEMS:\n- Have someone call the customer back today to discuss building estimate.\n- Set up time for builder to assess potential property site prior to purchase.\n\nCONTACT INFORMATION:\nName: Lindstrom, Kenny\nPhone number: 610-265-1715"},
{"Title": "Does anyone actually use PyPy or Cython?", "Author": "Sc0urge_", "Content": "I have been reading a lot about these tools recently and wondered if they are used in production, especially when building a backend with Python. As far as I know, PyPy is not ideal because of its lack of package support, but Cython seems pretty neat."},
{"Title": "ChatGPT / Python", "Author": "meisghost", "Content": "A lot of people are starting to rely on ChatGPT to write code for them from time to time. What I have personally noticed is ChatGPT writes modules so heavy its ridiculous. Last night I was working on an issue a small but technical issue, and asked it for help, it spat out, I kid you not 200+ lines of code and I just thought to myself this cannot be right, it was so heavy I was shaking my head. After some trial and error I got a very elegant piece done in 15 lines of code. Way faster, cleaner and yes reusable. So, it's nice that you can ask CGPT a question from time to time but to rely on it for code structure at this point, in my opinion, no good. Nice to be here!"},
{"Title": "With the demise of open Pysimplegui is anyone interested in helping productionise this alternative?", "Author": "Black-DVD-Archiver", "Content": "I wrote my own Pyside6 alternative to Pysimple gui that I use in my projects starting some years back after some unsatisfactory interactions with the author of Pysimple gui. The GIT source for my GUI wrapper is in https://github.com/David-Worboys/Black-DVD-Archiver/blob/main/qtgui.py And the open source project it is used in is https://github.com/David-Worboys/Black-DVD-Archiver Just look for the layout methods in the .py files to see how it is used. https://github.com/David-Worboys/Black-DVD-Archiver/blob/main/video_cutter.py#L2391 is a good place to start, line 953,."},
{"Title": "Futurama API written in async Python", "Author": "koldakov", "Content": "I've created a simple API service https://github.com/koldakov/futuramaapi to access Futurama units with async Python + FastAPI + SQLAlchemy (PostgreSQL). I've chosen Hypercorn for a web server to achieve HTTP/2 support - considering I didn't find yet cheap hosting that supports HTTP/2. Heroku doesn't support, render doesn't support. Also it has some code related to GraphQL (I used strawberry). + I didn't find a lot of discussions about Heroku + FastAPI - the problem will be with redirect to https. As default fastapi (starlette) middleware doesn't work with proxies there will be an infinite loop if you try to use . Chain will be: Client https-> Proxy(Hypercorn, for example) http-> fastapi, in that case as you can see the request is secure, but fastapi (starlette) won't understand this and will redirect to https. Here is a simple workaround to support https under proxy:"},
{"Title": "privates.py - Stop others from touching your privates!", "Author": "ZeroIntensity", "Content": "Quick example: from privates import private\n\n@private\nclass Hello:\n    __readonly__ = \"bar\",  # No need for @property!\n    __protected__ = \"foo\",\n\n    def __init__(self):\n        self.bar = \"hello world!\"\n        self.foo = \"foo\"\n\n# Hello is now only usable from this module"},
{"Title": "Automated system testing on GUI app (Nodezator - Public domain generalist Python node editor)", "Author": "KennedyRichard", "Content": "Hello, everyone. I'm Kennedy Guerra, 33, open-source software maintainer. Just wanted to share a new feature I'm working on for the next version of Nodezator (GitHub | website), my public domain generalist Python node editor. In case you don't know Nodezator, the next few sections present it briefly. If you want to know about the new feature I'm working on, you can skip straight to the last subsection, which contains a detailed explanation and links to videos and extra info about the feature, called Automated System Testing."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Using FastAPI REST along with RabbitMQ", "Author": "Accembler", "Content": "I have searched for a workable solution for the marriage of FastAPI async REST with RabbitMQ async interop in one application. Here is a fully workable code I came up with (intentionally simplified). class MessageBrokerManager:\n    async def consume(self, loop):\n        try:\n            pika.BlockingConnection(\n                parameters=pika.ConnectionParameters(\n                    host=self._host,\n                    port=self._port,\n                    credentials=pika.PlainCredentials(\n                        username=self._username,\n                        password=self._password,\n                    ),\n                )\n            )\n        except Exception as e:\n            log_info_fail(\"Failed to connect to RabbitMQ\")\n            # return empty task\n            return asyncio.create_task(asyncio.sleep(0))\n\n        self._connection = await connect_robust(\n            host=self._host,\n            port=self._port,\n            login=self._username,\n            password=self._password,\n            loop=loop,\n        )\n\n        self._channel = await self._connection.channel()\n        queue = await self._channel.declare_queue(self._queue_name, durable=True)\n        await queue.consume(callback=MessageBrokerManager.on_message, no_ack=True)\n\n        return self._connection\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    try:\n        loop = asyncio.get_running_loop()\n        task = loop.create_task(MessageBrokerManager().consume(loop))\n        await task\n    except Exception as e:\n        pass\n    yield\n\napp = FastAPI(lifespan=lifespan)\napp.include_router(some_rest_router)"},
{"Title": "remove background from image using AI in just 5 lines of python code", "Author": "Maleficent_Yak_993", "Content": "I created a python library \"dis-bg-remover\" based off the \"Highly Accurate Dichotomous Image Segmentation (https://arxiv.org/pdf/2203.03041.pdf), whose results are comparable, if not better, to the premium offerings in the market. Explainer video here https://www.youtube.com/watch?v=js7AYKkZvFI"},
{"Title": "Gmail Filter Squasher project", "Author": "unexpected_possum", "Content": "In Gmail I realized that I had way too many filters that performed exactly the same action, but they simply had different \"from\" addresses. To solve this I created this little project that merges similar filters into a single one. It does require a lot of setup due to having to authenticate into Gmail, but if someone is on the same situation as me, it could be helpful. Link to the project: github What My Project Does It connects into a Gmail account, reads their filters and squashes them into a single one. The program requires a manual setup of creating an OAuth credentials screen and downloading relevant credentials, which is cumbersome. But it's a one time effort as you can keep on using the application as long as you keep access to the GCP project."},
{"Title": "constable - automatically inject print statements into your functions for debugging variables", "Author": "saurabh0719", "Content": "What My Project Does constable automatically injects print statements, during runtime, into your function code to give you a live step by step replay of each variable assignment. Github repo - https://github.com/saurabh0719/constable Target Audience Can be used in testing/debugging environments. Do not leave this hanging around in production! Comparison Use pdb for all purposes that matter. Or an object state tracker. Example - import constable\n\n@constable.trace('a', 'b')\ndef example(a, b):\n    a = a + b\n    c = a\n    a = \"Experimenting with the AST\"\n    b = c + b\n    a = c + b\n    return a\n\nexample(5, 6)"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made my very first python library! It converts reddit posts to text format for feeding to LLM's!", "Author": "NFeruch", "Content": "Hello everyone, I've been programming for about 4 years now and this is my first ever library that I created! What My Project Does It's called Reddit2Text, and it converts a reddit post (and all its comments) into a single, clean, easy to copy/paste string. I often like to ask ChatGPT about reddit posts, but copying all the relevant information among a large amount of comments is difficult/impossible. I searched for a tool or library that would help me do this and was astonished to find no such thing! I took it into my own hands and decided to make it myself. Target Audience This project is useable in its current state, and always looking for more feedback/features from the community!"},
{"Title": "Segmentation pipeline using MONAI and Pytorch", "Author": "zacky2004", "Content": "For my machine learning project, I created an 'end to end' segmentation pipeline using MONAI and Pytorch for the deep learning portion, and the Optuna hyper parameter optimization library for hyperparam optimization / search. The entire project is fully encapsulated/packaged using Poetry, so its really easy to install and use. The pipeline is fully customizable in terms of which models to use, model parameters, optimizers, as well as hyperparameters via configuration files. It also takes advantage of automatic mixed-precision for accelerated compute. I also have it integrated with Aimstack for experiment tracking and visualization."},
{"Title": "SQLModel vs native SQL Alchemy ORM for a web backend?", "Author": "Raz_Crimson", "Content": "Hi there\nI was tasked with migrating from mongoDb to PostgreSQL due to the performance issues.\nThe backend is FastAPI-based web server for a mobile APP with a decent amount if CRUD. We also heavily use Pydantic for data validation and the primary carried of data across the service layers Would like to hear opinions from SQLModel users as to how easy it is to use or what kind of pitfalls am i setting myself up by using it. Last post that I could find was years old and even that was not really conclusive. Now SQLAlchemy 2.0 is released and even SQLModel has support for Pydantic V2, so would like some newer thoughts in this topic."},
{"Title": "Would there be general interest for a library that ensure external application API call safety?", "Author": "SpeakerOk1974", "Content": "Python has become a popular inclusion as a scripting language for many professional software packages. However, the APIs presented by these applications may be unsafe and/or do not include pythonic error handling. As someone working in the energy sector at my day job, I often find myself wrestling issues external to my python code in our power system simulator (usually memory related) that due to the implementation of the API can error at runtime below the exception handling mechanism of the interpreter. I will have have to implement a library for this purpose either internally or as an open-source side project."},
{"Title": "Pandas - value replacement or interpolation", "Author": "DeskAdministrative42", "Content": "Hi all, here trying to replace values for a range of dates in a data frame copy I've made where DateTime is the index and the values I need to mass replace are in the 'Value' column. The reason why is I need to interpolate between two dates in a time series, where the data I have is incorrect due to measurement error. I need to replace it with interpolated data to make a more representative data set for forecasting Can anyone advise?"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Topic ideas for talk", "Author": "jackh53453", "Content": "I’m thinking about giving a talk at my Python group but struggling to think of an interesting topic. Any suggestions or recommendations of ways of brainstorming? I like running so was thinking about a talk about using the Strava API, maybe get the top running shoes, but not sure if that’d interest other people. Topic ideas please!"},
{"Title": "Automating Python with Google Cloud", "Author": "neb2357", "Content": "I just published a tutorial series on how to automate a Python script in Google Cloud using Cloud Functions and/or Cloud Run. Feedback would be great. Thanks!\nAutomating Python with Google Cloud\nAutomating Python with Google Cloud Functions\nAutomating Python with Google Cloud Run"},
{"Title": "PyPDFCompare PDF Comparison CLI Tool", "Author": "Motox2019", "Content": "First time poster here, Ill preface this post by saying I am not a software engineer by any metric. I am a hobbyist programmer and I mainly just create programs I find particularly useful in my day job as a designer. Figured I would share my handy PDF comparison tool, see if anyone else can find it useful as well. This tool is mostly designed around comparing CAD drawings. It probably isn't great for comparing text documents at the moment though I plan to add this functionality. It works by comparing the pdf's page by page in a raster image format. It creates several output files of different styles:"},
{"Title": "resvg-py, safe bindings for resvg project", "Author": "BasePlate_Admin", "Content": "Hi everyone,\nGithub\nDocumentation\nWhat my project does :\nFor a long time, i had a problem of rendering svg to png format. Specially after my project required opengraph image generation. Vercel's OG supports this functionality but that's JavaScript. So therefore i created this bindings to resvg library (same library used by vercel og)"},
{"Title": "Python state management", "Author": "Extreme-Acid", "Content": "Hey all, I love what Django has with django-fsm. I require something but without Django, as there is no user interaction with the workflow. All inputs and outputs are either rabbitmq or another api. This is to be a workflow management system. I am looking for state management backed up by database so we can not suffer if a k8s pod dies with all the states in memory. Some of our workflows could take weeks. Is it still best to make this in Django or is there a database backed state management module available? I see pytransitions but I would have to add database logging to it."},
{"Title": "I created a way to connect your Python to LLM to provide it with debugger-level context (OpenSource)", "Author": "Financial_Muffin396", "Content": "I recently developed an OpenSource solution that can auto-fix production exceptions for Python servers. Think of it as Datadog, but with the added capability to refactor your code. Currently, it's suitable for experimental use, and yes based on OpenAI API. The source code is available at https://github.com/CaptureFlow/captureflow-py. What My Project Does:\nIt incorporates a tracer client-side Python library and backend that accumulates such traces and is capable of proposing code improvements for your repository. It traverses the execution graph, extracts relevant parts of it, enriches it with implementation data from the GitHub API, and then generates suggestions using the OpenAI API."},
{"Title": "pydantic + dataloader = pydantic-resolve", "Author": "TurbulentAd8020", "Content": "https://github.com/allmonday/pydantic-resolve supports both pydantic v1 and v2. What My Project Does: a declaractive, schema based way for fetching and reorgnizing and changing data, from simple to complicated. Target Audience: production, web development Comparison: graphql frameworks. much simple, define specific schemas at backend. and can adjust data in backward stage of traversal. Introduction: I've used FastAPI for around two years, and like the pydantic as well. The idea of generating openapi.json from pydantic (response_model) is facinating, it help frontend generate clients based on it and simpilify the integration."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "An efficient modeling interface for mathematical optimization: PyOptInterface", "Author": "c0decs", "Content": "I recently develop an efficient modeling interface for optimization problems in Python called PyOptInterface.\nSource code is at https://github.com/metab0t/PyOptInterface\nDocumentation is at https://metab0t.github.io/PyOptInterface/\nWhat My Project Does It is designed as a very thin wrapper of native C API of optimizers and attempts to provide common abstractions of an algebraic modelling environment including model, variable, constraint and expression with the least overhead of performance."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Creating a GeoTIFF raster XYZ tile service in python with caching capability", "Author": "iamgeoknight", "Content": "Creating a GeoTIFF raster XYZ tile service in python with caching capability"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter. Weekly news, subscribe for free", "Author": "HP7933", "Content": "With the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe. 10,921 subscribers - the largest Python on hardware newsletter out there. Catch all the weekly news on Python for Microcontrollers with adafruitdaily.com. This ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!"},
{"Title": "Example Data Pipeline with Prefect, Delta Lake, and Dask", "Author": "dask-jeeves", "Content": "I’m an OSS developer (primarily working on Dask) and lately I’ve been talking to users about how they’re using Dask for ETL-style production workflows and this inspired me to make something myself. I wanted a simple example that met the following criteria:\nRun locally (optionally). Should be easy to try out locally and easily scalable.\nScalable to cloud. I didn’t want to think hard about cloud deployment.\nPython forward. I wanted to use tools familiar to Python users, not an ETL expert."},
{"Title": "Makefile Parser for Python", "Author": "Cybasura", "Content": "Hello everyone! I am proud to introduce a Makefile Parser for Python that I think will be useful! the link is Thanatisia/makefile-parser-python As an introduction, I have been using python and been following this subreddit for quite awhile now, but this is my first post Recently, I've been planning a side-project involving the use of Makefiles in Python, and I required the use of a Makefile parser ala json or pyyaml - whereby you would import a Makefile into python as objects/dictionary/lists. Hence, I started searching for a Makefile Parser. The only parser I've found is PyMake(2) which is cool but it hasnt been updated since 2017 from what I recall and that it is more of a CLI utility, so with that in mind, I went about to make it"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "JSON to Python - VSCode extension", "Author": "MichalMietus", "Content": "Hi, I just published my mini extension to VSCode with a command to convert a JSON object file to Python, something I often missed. I hope you will find it useful! https://marketplace.visualstudio.com/items?itemName=BringFuture.json-to-python What My Project Does: Converts JSON to Python\nTarget Audience: VSCode coders\nComparison: Formatters, etc. I could not find a tool to do exactly that"},
{"Title": "Python open source Projects", "Author": "Rare-Lion1261", "Content": "I'm seeking for python open source project where I can add things , colaborate with a community on building valuable stuff , Any good suggestions please ?"},
{"Title": "Load Apple's .numbers Files into Pandas", "Author": "nez_har", "Content": "I recently ran into some challenges while trying to work with Apple's .numbers files on Linux. After a bit of experimentation, I figured out a workflow that simplifies the process. If you're planning to use .numbers files and need to load them into pandas, I've created a tutorial that covers the required dependencies and the steps to follow: https://nezhar.com/blog/load-apple-numbers-files-python-pandas-using-containers/. Has anyone else here worked with .numbers files in Python? I’d love to hear about your experiences or any tips you might have."},
{"Title": "Python 3.12.3 Released", "Author": "chinawcswing", "Content": "https://www.python.org/downloads/release/python-3123/ 3.12.3 is the latest maintenance release, containing more than 300 bugfixes, build improvements and documentation changes since 3.12.2."},
{"Title": "Where are you getting your Python news? (besides right here, of course)", "Author": "wanderingmonster", "Content": "Hello all. I just saw this post about Pandas, which lead to a discussion of Polars being much faster. Polars, which I had never heard about before this morning. This leads me to wonder: where are you all getting your Python news and other information? r/Python obviously, but I fear there are some pipelines or subscriptions for Python news, information about must-have new packages, and the like that I'm currently missing."},
{"Title": "No More Cutting in Line: Crafting Fairness in Queues using RQ in Python", "Author": "soap94", "Content": "I was trying to tackle the problem of queue fairness and here's how I solved it."},
{"Title": "Awesome Python Library: Tenacity", "Author": "pysk00l", "Content": "When writing code or tests in Python, one issue I had was when the code would fail due to random things like network issues or external peripherals not responding in time. So I had to add extra code to retry the code, but this added unnecessary complexity. Thats when I discovered the Tenacity library and it saved me hours and a lot of useless boilerplate code. Link: https://tenacity.readthedocs.io/en/latest/ I wrote a blog on it with some examples: https://new.pythonforengineers.com/blog/awesome-python-library-tenacity/"},
{"Title": "Do you make display-tables in Python? - \"The Design Philosophy of Great Tables\"", "Author": "economicurtis", "Content": "The maintainer of `great_tables` released an article about the design philosophy of his package https://posit-dev.github.io/great-tables/blog/design-philosophy/ Curious about your thoughts. What tools do you prefer to use when you need to share a data table based on work you've done in python?"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Build and Publish Your Python Project", "Author": "Shay-Hill", "Content": "In another article, I outlined how to handle Python imports and dependencies in Poetry. Poetry has a lot to recommend it:\nwrites a pyproject.toml file for you\ncreates an environment for you\npins top-level dependencies in pyproject.toml (nice if that’s what you want)\nautomates a lot of adding and removing dependencies"},
{"Title": "A solver of Le Compte Est Bon and Le Mot Le Plus Long", "Author": "RRTheGuy", "Content": "Hi, I made a new project called dcdljeu (written in French), a solver for the games Le Compte Est Bon and Le Mot Le Plus Long from the TV Show Des Chiffres Et Des Lettres."},
{"Title": "Type-Level Programming: a POC", "Author": "Kiuhnm", "Content": "While Python doesn't explicitly support Type-Level Programming, I've had some success with it. I think this may be of interest to the Python community, so I'm sharing a POC (Proof Of Concept) I've written. This POC is a statically typed list that encodes its length in its type so that, for instance, when you concatenate two lists, the result has the correct length, all done at type-checking time. Read more on GitHub"},
{"Title": "\"Gracefully\" Implementing Graceful Shutdowns - FastApi | Kubernetes | WebSockets | Black | Ruff Show", "Author": "Jainal09", "Content": "Overview\nWhen deploying a new version of an application, it is essential to ensure that no tasks are lost during the deployment process. This is especially important for applications that use WebSockets to maintain real-time connections with clients. In such cases, abruptly terminating the application can lead to data loss and client disconnections. What My Project Does? This project demonstrates how to implement graceful shutdowns using FastAPI and Kubernetes, that use WebSockets client connections and internal background queues."},
{"Title": "pipxu - a faster alternative to pipx", "Author": "bulletmark", "Content": "What my project does\npipxu installs Python applications, i.e. Python packages which have one or more executable programs, into independent isolated virtual environments on your system. Each package and it's dependencies are thus insulated from all other applications, and from the system Python. pipxu creates links to application executables in a common directory, which you have in your PATH. Packages are typically sourced from PyPI, the Python Package Index."},
{"Title": "Open Jupyter Notebooks in Kaggle? (from GitHub)", "Author": "pbeens", "Content": "I have a repo in GitHub with Jupyter Notebooks for students. On each notebook I have a link where the student can open the notebook in Colab (by changing the URL from https://github.com/ to https://githubtocolab.com/). The problem is that some school boards have Colab blocked. Is there a similar technique I can use to open the notebooks in Kaggle? Are there other sites I should be considering? Thanks!"},
{"Title": "UXsim 1.1.0 released: Network traffic flow simulator gets Multilane support", "Author": "Balance-", "Content": "Version 1.1.0 of UXsim is released, which now supports modeling multilane ways. Main Changes\nAdd support for multilane links. More technically, it is a multilane, single-pipe model where vehicles cannot overtake others. This allows us to set traffic capacity significantly larger while keeping consistency to KW theory.\nSeparate Analyzer class from uxsim.py. This means that uxsim.py now contains only the essential codes for the simulation. It makes it easier for users to understand the simulation logic."},
{"Title": "does anyone know about an alternative to aeneas that works on python 3.12.1?", "Author": "jonnisaesipylsur", "Content": "i need some python library that can automatically generate a synchronization map between a list of text fragments and an audio file containing the narration of the text. aeneas does exactly that except it doesnt work on higher than 2.7 with windows."},
{"Title": "Does it really matter what order you import modules in python?", "Author": "lizziemoon89", "Content": "I am trying to understand why anyone would care whether you import math or numpy first. I am told it is good practise but it just seem pointless to care."},
{"Title": "PyOhio CFP open through May 20", "Author": "catherinedevlin", "Content": "Call for Proposals open through May 20 PyOhio is a fun, friendly, free general Python conference now in its Nth year (N is large). This year it will be Sat & Sun Jul 27-28, 2024 at The Westin Cleveland Downtown in Cleveland, OH (its first year outside Columbus)! Hope to see you there!"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "All Python conference talks from 2023 ordered by the number of views", "Author": "TechTalksWeekly", "Content": "Hello r/python 👋! Back in January, I've compiled a list of the most watched PyCon talks from 2023. I've received tons of positive feedback via DM, upvotes, and comments, so I decided to put together another compilation. This time around, I've gathered not only PyCon, but all Python 2023 talks across +100 conferences (here's the list) that include PyCon (all locations), PyData (all locations), EuroPython, Conf42, and many more to give you a complete overview of the landscape. The list is gigantic and includes over 850 talks**!** What's more, I've created a Google Sheets version of this post that gives more convenient sorting and filtering options."},
{"Title": "XZ Vulnerability Anaconda", "Author": "jimtoberfest", "Content": "Is the xz library compromised along with the xz Linux utility? Anaconda seems to auto load this library upon creation of new venvs."},
{"Title": "\"Mark as read\" plugin for mkdocs-material", "Author": "br2krl", "Content": "Hi everyone, I developed a simple plugin for mkdocs-material. What My Project Does: In simple terms, this plugin allows users to mark pages as read and it shows a checkmark icon in navigation bar for the pages that was marked as read.\nThe plugin adds a button under the page content and when users clicks, it stores read date in localStorage. It shows a checkmark icon in the navigation panels for the pages that marked as read. It also shows a \"document updated\" icon if the pages that marked as read got an update. Target Audience:"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Nava: Python Light-Weight Sound-Player Library", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/openscilab/nava What My Project Does: Nava is a Python library that allows users to play sound in Python without any dependencies or platform restrictions. It is a cross-platform solution that runs on any operating system, including Windows, macOS, and Linux. Its lightweight and easy-to-use design makes Nava an ideal choice for developers looking to add sound functionality to their Python programs. import time\nfrom nava import play, stop\nsound_id = play(\"alarm.wav\", async_mode=True, loop=False)\ntime.sleep(4)\nstop(sound_id)"},
{"Title": "An Automated Bash Script for Python Virtual Environment Management", "Author": "SAV_NC", "Content": "Hello r/Python, What My Project Does: This script is designed to automate the management of Python virtual environments and dependencies, streamlining the setup process for Python projects. It facilitates a more efficient workflow for managing project-specific environments and package installations, especially in a professional development setting. Target Audience: This tool is particularly beneficial for developers and IT professionals looking for a systematic approach to environment management. It is designed to integrate into existing workflows, providing a reliable and consistent method for managing Python environments and dependencies."},
{"Title": "Python 3.12.3 - The third maintenance release of Python 3.12", "Author": "Neustradamus", "Content": "https://www.python.org/downloads/release/python-3123/"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Adnexus DI/IoC Framework", "Author": "Nictec", "Content": "Repo: https://github.com/Nictec/Adnexus What My Project Does: Adnexus is a declarative and fully typed DI/IoC framework for python. It is inspired by python-dependency-injector because this project is no longer maintained. Target Audience: Currently Adnexus is in heavy development. So expect heavy errors and breaking changes. Eventually if we reach 1.0.0 the project will be ready for production. Comparison: The main difference to existing (and maintained) projects is the \"declarative\" part of the framework. Injectables are declared direclty in the container class using Providers. This takes away the \"magic\" of IoC because it is clear where your dependencies come from. Furthermore all dependencies can be directly configured using the integrated config system (for details see the repo)"},
{"Title": "Docx2Python 2.10.0 will now extract comments from Word files", "Author": "Shay-Hill", "Content": "access comments with Docx2Python You can access docx comments with the comments attribute of the output DocxContent object. with docx2python('path/to/file.docx') as docx_content:\n    print(docx_content.comments) For each comment, this will return a tuple: (reference_text, author, date, comment_text)"},
{"Title": "PGCacheWatch - Supercharge Your Caching Strategy", "Author": "GabelSnabel", "Content": "Hey Python enthusiasts! 👋\nI'm thrilled to introduce PGCacheWatch, my recent project designed to enhance your PostgreSQL databases by bringing real-time event notifications right into your applications. Vastly improved cache invalidation efficiency, without the need for adding any new services or infrastructure.\nWhat My Project Does\nPGCacheWatch capitalizes on PostgreSQL's built-in NOTIFY/LISTEN features to deliver instant, real-time notifications about database events, ensuring your application's cache remains fresh and synchronized with your database."},
{"Title": "Analyzing Python Malware found in an open-source project", "Author": "42-is-the-number", "Content": "Hi all, I've recently found a Python Malware in a FOSS tool that is currently available on GitHub. I've written about how I found it, what it does and who the author is. The whole malware analysis is available in form of an article. I would appreciate any and all feedback."},
{"Title": "Who's going to PyCon US 2024?", "Author": "frocketgaming", "Content": "It's just around the corner. I'll be going on my own so it would be nice to meet up with some people potentially. Who plans to go and what speakers / sessions are you looking forward to?"},
{"Title": "Advanced Macro & Calorie Calculator", "Author": "MCTrovato", "Content": "What My Project Does A macro-nutrient and calorie calculator to help me achieve body composition goals.\nThis calculator is compatible with metric and imperial units. It supports weight changes based on percentage and fixed values (lbs, kg). This is useful when losing weight in a fat loss phase as a percentage, and for gaining at a fixed value during a muscle growth phase.\nThe recommendations are built using scientific research based on lean body mass. If the user's body fat percentage is unknown, then it will be calculated using BMI and the Deurenberg formula.\nGeneral guidance is also available on the ."},
{"Title": "ipython-sql has been forked", "Author": "databot_", "Content": "Hi r/Python, In case you didn't know, ipython-sql has been forked. The new project has fixed some long-standing issues and added a bunch of new capapabilities:\nSplitting long SQL queries in multiple cells\nPlotting large-scale datasets\nMore flexibility to open database connections\nThe API remains the same, you can replace projects that depend on ipython-sql with jupysql: pip install jupysql"},
{"Title": "Serverless Python Support in Cloudflare Workers", "Author": "TheMadFratter", "Content": "Today Cloudflare has announced support for Python in their Clouldflare Workers serverless environment. This allows Python to be run at the edge on their global network using a combination of Pyodine and the V8 runtime. Announcement can be found on the Cloudflare Blog: https://blog.cloudflare.com/python-workers"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "🚀 Goprox: Simplify Google searches with automatic proxy handling and user-agent selection.", "Author": "SwiftGloss", "Content": "What My Project Does: Goprox is a Python module that revolutionizes Google searches by automatically checking and using proxies, eliminating the need for user input. With Goprox, users can enjoy seamless searching without worrying about proxy configuration or getting blocked. Target Audience: Goprox is perfect for developers seeking to automate Google searches for web scraping, automation, or data collection tasks. It's also ideal for anyone who desires a hassle-free search experience without the hassle of manual proxy management. Comparison: Compared to existing alternatives, Goprox stands out with its focus on automatic proxy handling. Unlike other solutions that require manual proxy input, Goprox streamlines the process by autonomously managing proxies for each search query."},
{"Title": "Security Code Challenge for Developers & Ethical Hackers - Damn Vulnerable RESTaurant API", "Author": "theowni", "Content": "Security Code Challenge for Developers & Ethical Hackers – Damn Vulnerable RESTaurant A FastAPI based intentionally vulnerable web application teaching the most common security vulnerabilities in API through a dedicated game. Damn Vulnerable RESTaurant is operated by a mysterious Chef who has discovered that threat actors were able to compromise his restaurant’s API and the underlying system. He suspects that a competing restaurant located across the street might be involved in this attack! The goal of the challenge is to identify and fix vulnerabilities based on provided hints. During this adventure, you will have the opportunity to investigate how the attack was carried out and fix security issues to safeguard the application. Moreover, you can uncover the identity of the person behind the attack by the end of this adventure."},
{"Title": "Using Jupyter Notebooks with Flox", "Author": "z_mitchell", "Content": "https://flox.dev/blog/jupyter-remote-env Hey everyone, we released Flox 1.0 a few weeks ago and one of the cool things you can do is set up environments with a bunch of dependencies already set up for running a Jupyter notebook. Take a look to see how it all works!"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "automathon: A Python library for simulating and visualizing finite automata", "Author": "fexx3l", "Content": "What my project does\nautomathon is a Python library for simulating and visualizing finite automata, is easy to use and have a docs website to read more about the functions that are implemented for DFAs and NFAs. During my CS degree, I learned about automata and this became one of my favorite topics, that's why I started to work on this project, I wanted to create something simple and easy to use.\nTarget audience"},
{"Title": "pointers.py being added to the standard library!", "Author": "ZeroIntensity", "Content": "As of PEP 4124 being accepted, the infamous pointers.py will be added to Python's standard library in 3.13! To quote Guido van Rossum's take on adding this, \"Why the hell not?\" This will also introduce pointer literals, the sizeof operator, and memory errors! from pointers import malloc\n\nptr = &\"spam\"  # Pointer literal\nprint(*ptr)\nmem = malloc(?\"hello\")  # New sizeof operator\nprint(*mem)  # MemoryError: junk 13118820 6422376 4200155 at 0x7649f65a9670\n# MemoryWarning: leak at 0x7649f65a9670"},
{"Title": "Astrologers have announced the month of Python in Centrifugal Labs: real-time libraries and tutorial", "Author": "FZambia", "Content": "Hello Python community. My name is Alexander – I am the author of Centrifugo project. It's a self-hosted real-time messaging server (alternative to Ably, Pusher, Pubnub services). It was written in Python originally, but then migrated to Go. But it's fully language-agnostic and helps many projects written in Python (and in Django in particular) to add real-time updates to the application. Centrifugo is quite fast, scales well, has super-efficient integration with Redis (~million of publications per second, and more with Redis sharding/Redis Cluster)."},
{"Title": "pwdgen - a simple password generator", "Author": "RRTheGuy", "Content": "What my project does\nMy project generate simple, strong, memorable and easy-to-type passwords.\nTarget audience\nFor anyone who need to get passwords easily.\nComparison\nMost passwords manager generate completely passwords with completely random characters that aren't very easy to memorize or tape."},
{"Title": "Paid libraries may kill Python", "Author": "Glxblt76", "Content": "It appeared too easy to me that we could create entire GUI from Python. I waited for the other shoe to drop, and it dropped. Now Anaconda and PySimpleGUI require payment if ever you want to use the libraries professionally. I wonder whether this will be the end of Python. It seems enshittification is finally reaching Python, where people previously used libraries for free and when they update them find out that they have to pay or stop using the libraries."},
{"Title": "Python isn't dramatic enough", "Author": "treyhunner", "Content": "Ever wished your Python interpreter had the dramatic feeling of a 300 baud modem connection? Today there's a solution: pip install dramatic dramatic on PyPI dramatic on GitHub What My Project Does All text output by Python will print character-by-character. It works as a context manager, as a decorator, or as a simple function call. Other features include a dramatic REPL, ability to run specific Python modules/scripts dramatically, and a --max-drama argument to make all Python programs dramatic all the time. Target Audience Those seeking amusement. Comparison Just like Python usually runs, but with the feeling that you're inside a text-based adventure game."},
{"Title": "I forked Newspaper3k, fixed bugs and improved its article parsing performance - Newspaper4k package", "Author": "gringo6969", "Content": "Hi all! The Newspaper3k is abandoned (latest release in 2018) without any upgrades and bugfixing. I forked it, and imported all open Issues into my repo. The first two releases (0.9.0 and 0.9.1) were mainly bugfixes and bringing the project more up to date and compatible with python > 3.6 (I started from version 0.9.0 😁). In the latest version, 0.9.3 I not only almost reworked the whole News article parsing process, but also added a lot of new supported languages (around 40 new languages) Repository: https://github.com/AndyTheFactory/newspaper4k Documentation:"},
{"Title": "async_api_caller - simplifies asynchronous web API calling", "Author": "teamamentum", "Content": "What My Project Does\nMaking asynchronous web API calls with asyncio and aiohttp can be complicated. This async_api_caller package abstracts away that complexity for a common case of needing to make multiple web API calls while varying query parameters. Installation git clone git@github.com:amentumspace/async_api_caller.git\ncd async_api_caller/\npip install ."},
{"Title": "geojson-shave: a command-line tool for reducing the file size of GeoJSON files", "Author": "Ok-Frosting7364", "Content": "Source code: https://github.com/ben-n93/geojson-shave What my Project Does\nReduces the file size of GeoJSON files by truncating coordinates to the specified decimal place, eliminating whitespace and (optionally) replacing the property key with an empty dictionary. Target Audience\nFor anyone that works with geospatial data (and specifically GeoJSON files) - so data analysts, data engineers, data journalists, GIS professionals, etc. Comparison There is a website that reduces the size of GeoJSON files, however it didn't work for me when I tested it. The advantage of my tool is that you can run it from the command-line and don't need an Internet connection."},
{"Title": "We're building a Large Action Model (LAM) project that can do any task for you using Python!", "Author": "nobilis_rex_", "Content": "Hey guys! My friend and I are building Nelima. It's basically a Large Language Model designed to take actions on your behalf with natural language prompts and theoretically automate anything. For example, it can schedule appointments, send emails, check the weather, and even connect to IoT devices to let you command it – you can ask it to publish a website or call an Uber for you! You can integrate your own custom actions, written in Python, to suit your specific needs, and layer multiple actions to perform more complex tasks. When you create these actions or functions, it contributes to the overall capabilities of Nelima, and everyone can now invoke the same action. Right now, it's a quite limited in terms of the # of actions it can do but we're having fun building a few :)"},
{"Title": "magic-di: Dependency Injector with minimal boilerplate code, built-in support for FastAPI and Celery", "Author": "R1ngoB", "Content": "I’m excited to share something we’ve been working on at Wolt: a new dependency injection library for Python “magic-di”. Born from our experience with a large service that has many components such as: API, event consumers, background workers, and cron jobs. magic-di aims to simplify dependency management without the hassle. from magic_di.fastapi import inject_app, Provide\n\napp = inject_app(FastAPI())\n\n@app.get(path=\"/hello-reddit\") \ndef hello_reddit(service: Provide[Service]) -> dict: \n  return { \n     \"is_connected\": service.is_connected(),\n  }"},
{"Title": "Drawpyo: create Draw.io diagrams with Python", "Author": "MerrimanIndustries", "Content": "This is a project that I initially created in a weekend for my own use after I was surprised to find out there was no easy way to generate Draw.io diagrams in Python. I'm a huge fan of Draw.io for documentation since it's free, lightweight, and the files are plaintext. After building basic initial functionality I decided to use this as a project to make a more mature Python library out of something I initially wrote for myself quick n dirty. I refactored (a lot), wrote docs, tests, build logic, etc. There's still a lot to do to make it as robust as it could be but I think it's good enough to share!"},
{"Title": "Is this project worth the time and effort: Camera to Keyboard?", "Author": "mnvoh", "Content": "EDIT: Since there are a lot of upvotes on that comment, yes, this is about seeking strangers' validations. But we're all validation seekers. For instance, we all need someone's validation to make a living (boss, customers, etc.) Your boss ain't gonna tell you \"god damn boy, you suck at your job, here take my money\". But in this case, validation seeking is kind of a broad term, let's use something more specialized like Market Research 😉. Also, thanks for all your comments and inputs. Hello everyone I've been working on this project for the past 3 weeks, and I want people's opinions to determine how much time I should invest in it."},
{"Title": "3-dimensional/ heatmap peak picking?", "Author": "robbie_s1", "Content": "Hello python community. I’m pretty new to scripting and come from a pure chemistry background. I’m working with 3-D MALDI-trapped ion mobility mass spectrometry data and I’ve been looking for a solid algorithm that can peak pick from two ‘time-resolved’ dimensions (mass and mobility), and the intensity arrays associated with those two dimensions. I need to peak pick from a heatmap essentially. Does anyone know of any good 3-D peak picking algorithms, or otherwise know how I can approach this? Thank you all!"},
{"Title": "The Best* Python Cheat Sheet", "Author": "kmhnz", "Content": "A dense Python cheat sheet with just what you need.\nDesign principles:\n• Focus on Python core\n• Comprehensive but selective (Just what you need)\n• Densely packed\n• Well-linked\n• Linkable\n• Responsive\n• Printable\nIssues and feedback are tracked at the .\n*It may not be the best Python cheat sheet, but it aspires to be."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python Inner class feature", "Author": "koldakov", "Content": "test.py import sys\nsys.setrecursionlimit(4)\nclass Foo:\n    class Foo:\n        foo = 1"},
{"Title": "Do folks ever use Pandas when they should use SQL?", "Author": "ChristianPacifist", "Content": "I think I see this a lot. I believe SQL, including like dataframe SQL packages, should always be used over Pandas when possible unless one is doing something Pandas is more suited to or unless someone requires broader Python control structures or features. I am a big believer in sticking to SQL as a baseline data manipulation framework and only using other frameworks if SQL is lacking. One of the biggest ways to accumulate technical debt is solving problems in multiple ways that are not standardized that not all people know."},
{"Title": "What’s a script that you’ve written that you still use frequently?", "Author": "HiT3Kvoyivoda", "Content": "Mine is a web scraper. It’s only like 50 lines of code. It takes in a link, pulls all the hyperlinks and then does some basic regex to pull out the info I want. Then it spits out a file with all the links. Took me like 20 minutes to code, but I feel like I use it every other week to pull a bunch of links for files I might want to download quickly or to pull data from sites to model."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Automatically extract phone call insights with LLMs - quick tutorial", "Author": "SleekEagle", "Content": "Hey everyone! I wrote this quick Python script showing how you can automatically extract information from phone calls with LLMS. The call I use is a phone call received by a home building company where the caller is inquiring about an estimate for the cost to build a home on land he may purchase. Here's what the LLM extracted: SUMMARY:\n- The caller is interested in getting an estimate for building a house on a property he is looking to purchase in Westchester.\n\nACTION ITEMS:\n- Have someone call the customer back today to discuss building estimate.\n- Set up time for builder to assess potential property site prior to purchase.\n\nCONTACT INFORMATION:\nName: Lindstrom, Kenny\nPhone number: 610-265-1715"},
{"Title": "Alternative Queries: Typed and Reusable Handcrafted SQL", "Author": "baluyotraf", "Content": "Hello! It's still early in development, but I just want to know if people are interested. What My Project Does I created a library to integrate Pydantic type checking for handwritten SQL queries. It also allows you to test the types, and create nested queries easily. Alternative Queries Target Audience We had a project recently were we had to use handwritten SQL and managing the parameters and reusing queries was quite a hassle. So I'm planning to use this on my production projects moving forward. Comparison I would say in terms of usage, it's like Pydantic + SqlParams, but only with the python default formatting."},
{"Title": "With the demise of open Pysimplegui is anyone interested in helping productionise this alternative?", "Author": "Black-DVD-Archiver", "Content": "I wrote my own Pyside6 alternative to Pysimple gui that I use in my projects starting some years back after some unsatisfactory interactions with the author of Pysimple gui. The GIT source for my GUI wrapper is in https://github.com/David-Worboys/Black-DVD-Archiver/blob/main/qtgui.py And the open source project it is used in is https://github.com/David-Worboys/Black-DVD-Archiver Just look for the layout methods in the .py files to see how it is used. https://github.com/David-Worboys/Black-DVD-Archiver/blob/main/video_cutter.py#L2391 is a good place to start, line 953,."},
{"Title": "Finite Element Analysis for Continuum Mechanics of Solid Bodies (FElupe)", "Author": "adtzlr", "Content": "Hi, I'd like to introduce to you my open-source FEA package FElupe, available on GitHub. Its target audience is typically an engineer, e.g. in the field of mechanical or biomedical engineering. It is designed to be both flexible for scientifc research as well as easy-to-use for industry-related problems. Packages with similar scopes are e.g. scikit-fem and Fenics(x). FElupe is a Python 3.8+ 🐍 finite element analysis package 📦 focussing on the formulation and numerical solution of nonlinear problems in continuum mechanics 🔧 of solid bodies 🚂. Its name is a combination of FE (finite element) and the german word Lupe 🔍 (magnifying glass) as a synonym for getting an insight 📖 how a finite element analysis code 🧮 looks like under the hood 🕳️."},
{"Title": "Automated system testing on GUI app (Nodezator - Public domain generalist Python node editor)", "Author": "KennedyRichard", "Content": "Hello, everyone. I'm Kennedy Guerra, 33, open-source software maintainer. Just wanted to share a new feature I'm working on for the next version of Nodezator (GitHub | website), my public domain generalist Python node editor. In case you don't know Nodezator, the next few sections present it briefly. If you want to know about the new feature I'm working on, you can skip straight to the last subsection, which contains a detailed explanation and links to videos and extra info about the feature, called Automated System Testing."},
{"Title": "Text extraction lib", "Author": "TraditionalAlps4337", "Content": "I created a simple tool for extracting text from PDF, EPUB, TXT, and DOCX files.It is mainly for personal use, but I would really appreciate a feedback https://github.com/KirillAn/extractText/tree/main"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Gmail Filter Squasher project", "Author": "unexpected_possum", "Content": "In Gmail I realized that I had way too many filters that performed exactly the same action, but they simply had different \"from\" addresses. To solve this I created this little project that merges similar filters into a single one. It does require a lot of setup due to having to authenticate into Gmail, but if someone is on the same situation as me, it could be helpful. Link to the project: github What My Project Does It connects into a Gmail account, reads their filters and squashes them into a single one. The program requires a manual setup of creating an OAuth credentials screen and downloading relevant credentials, which is cumbersome. But it's a one time effort as you can keep on using the application as long as you keep access to the GCP project."},
{"Title": "PyBackport: Use instances from newer python releases", "Author": "tan_tata_chan", "Content": "What My Project Does PyBackport holds serves three purposes:\nUse instances from newer python releases in older python versions. For example, using StrEnum (new in python 3.11) in python 3.9\nEnable experimental unreleased classes. For example, define new enums where members are tuples with TupleEnum\nProvide support to commonly used constants. For example, PyBackport allows to import and use to avoid re-defining constant color codes in every new project."},
{"Title": "I made my very first python library! It converts reddit posts to text format for feeding to LLM's!", "Author": "NFeruch", "Content": "Hello everyone, I've been programming for about 4 years now and this is my first ever library that I created! What My Project Does It's called Reddit2Text, and it converts a reddit post (and all its comments) into a single, clean, easy to copy/paste string. I often like to ask ChatGPT about reddit posts, but copying all the relevant information among a large amount of comments is difficult/impossible. I searched for a tool or library that would help me do this and was astonished to find no such thing! I took it into my own hands and decided to make it myself. Target Audience This project is useable in its current state, and always looking for more feedback/features from the community!"},
{"Title": "Distributing simple handy scripts for Windows - mouse-startable AND editable (the tricky one-liner)", "Author": "galkinvv", "Content": "In short: here is the hacky 2-line header that makes any python script a clickable batch file\n(assuming bundled python in a subfolder) @classmethod # 2>nul & (if not exist \"%~dp0\\python64-win\\python.exe\" (echo Fatal python64-win\\python.exe not found & pause) else (title %~f0 & \"%~dp0\\python64-win\\python.exe\" \"%~f0\" %*)) & exit /B & # noqa: E501\ndef __unused(): \"fake function to help writing header that allows executing same file as python and batch\"\n\n# Normal script starts here"},
{"Title": "Would there be general interest for a library that ensure external application API call safety?", "Author": "SpeakerOk1974", "Content": "Python has become a popular inclusion as a scripting language for many professional software packages. However, the APIs presented by these applications may be unsafe and/or do not include pythonic error handling. As someone working in the energy sector at my day job, I often find myself wrestling issues external to my python code in our power system simulator (usually memory related) that due to the implementation of the API can error at runtime below the exception handling mechanism of the interpreter. I will have have to implement a library for this purpose either internally or as an open-source side project."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Chat with your friends within your (Mac & Linux) Terminal | Textual | Simple & Easy to use", "Author": "Plastic-Payment-934", "Content": "Toschat !What My Project Does?\na lightweight python chat app within your terminal with simple UI and it's built on top of Textual framework. What you can do: - Create a new account - Add your friends to your contact - and chat!\nTarget Audience\nIt's my hobby project to improve my python knowledge but everyone can install and use it. All data store in a live server with Django framework."},
{"Title": "PyPDFCompare PDF Comparison CLI Tool", "Author": "Motox2019", "Content": "First time poster here, Ill preface this post by saying I am not a software engineer by any metric. I am a hobbyist programmer and I mainly just create programs I find particularly useful in my day job as a designer. Figured I would share my handy PDF comparison tool, see if anyone else can find it useful as well. This tool is mostly designed around comparing CAD drawings. It probably isn't great for comparing text documents at the moment though I plan to add this functionality. It works by comparing the pdf's page by page in a raster image format. It creates several output files of different styles:"},
{"Title": "Designing a Pure Python Web Framework", "Author": "Pleasant-Cow-3898", "Content": "From the Article:\nThis provides a good overview of how Reflex works under the hood. TLDR:\nUnder the hood, Reflex apps compile down to a React frontend app and a FastAPI backend app. Only the UI is compiled to Javascript; all the app logic and state management stays in Python and is run on the server. Reflex uses WebSockets to send events from the frontend to the backend, and to send state updates from the backend to the frontend. Full post: https://reflex.dev/blog/2024-03-21-reflex-architecture/#designing-a-pure-python-web-framework"},
{"Title": "I created a way to connect your Python to LLM to provide it with debugger-level context (OpenSource)", "Author": "Financial_Muffin396", "Content": "I recently developed an OpenSource solution that can auto-fix production exceptions for Python servers. Think of it as Datadog, but with the added capability to refactor your code. Currently, it's suitable for experimental use, and yes based on OpenAI API. The source code is available at https://github.com/CaptureFlow/captureflow-py. What My Project Does:\nIt incorporates a tracer client-side Python library and backend that accumulates such traces and is capable of proposing code improvements for your repository. It traverses the execution graph, extracts relevant parts of it, enriches it with implementation data from the GitHub API, and then generates suggestions using the OpenAI API."},
{"Title": "UFO Tools- functional programming in python", "Author": "houseofleft", "Content": "I shared a \"monads in python library\" a little while back on here- since then I've been toying with and expanding things out into a more general project for helping functional programming patterns in python. [I had (am having) a bunch of fun making this - thought I'd share here!](https://github.com/benrutter/ufo-tools) What my project does: A simple library with utilities for functional programming in Python.\nTarget Audience: It's meant for use in actual production contexts, but it's still in a very early and experimental phase. It's probably most helpful right now as a learning resource."},
{"Title": "An efficient modeling interface for mathematical optimization: PyOptInterface", "Author": "c0decs", "Content": "I recently develop an efficient modeling interface for optimization problems in Python called PyOptInterface.\nSource code is at https://github.com/metab0t/PyOptInterface\nDocumentation is at https://metab0t.github.io/PyOptInterface/\nWhat My Project Does It is designed as a very thin wrapper of native C API of optimizers and attempts to provide common abstractions of an algebraic modelling environment including model, variable, constraint and expression with the least overhead of performance."},
{"Title": "Code type checks but then `TypeError`s", "Author": "Kiuhnm", "Content": "Have you noticed that Python's static type system is unsound? Look at this code: from typing import overload\n\n@overload\ndef f(x: int) -> str: ...\n@overload\ndef f(x: str) -> int: ...\ndef f(x: int | str) -> int | str:\n    match x:\n        case int():\n            return 1\n        case str():\n            return 'a'\n\nprint('a' + f(1))\nprint(1 + f('a'))"},
{"Title": "I made a free easy-to-use toast notification library for PyQt and PySide", "Author": "niklashnng", "Content": "Hey guys, since I couldn't find any good libraries for showing modern-looking toast notifications in PyQt, I made one myself. What My Project Does: It supports showing multiple toasts at the same time, queueing of toasts, 6 different positions, multiple screens and much more. Since it's developed with QtPy, an abstraction layer for multiple versions of PyQt and PySide, you can use it with PyQt5, PyQt6, PySide2, and PySide6. Also, basically anything can be completely customized and it's extremely easy to use. Target Audience: This is useful for any Python developer who is working with PyQt or PySide and wants to display clean and modern-looking toast nofifications easily."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter. Weekly news, subscribe for free", "Author": "HP7933", "Content": "With the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe. 10,921 subscribers - the largest Python on hardware newsletter out there. Catch all the weekly news on Python for Microcontrollers with adafruitdaily.com. This ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!"},
{"Title": "Who's coming to PyCon Italia this year?", "Author": "patrick91it", "Content": "Hey folks! Is anyone of you attending this year PyCon Italia? I'm one of the organisers and I'd love to connect to new people this year 😊 See you there! 🐍✨"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python open source Projects", "Author": "Rare-Lion1261", "Content": "I'm seeking for python open source project where I can add things , colaborate with a community on building valuable stuff , Any good suggestions please ?"},
{"Title": "Where are you getting your Python news? (besides right here, of course)", "Author": "wanderingmonster", "Content": "Hello all. I just saw this post about Pandas, which lead to a discussion of Polars being much faster. Polars, which I had never heard about before this morning. This leads me to wonder: where are you all getting your Python news and other information? r/Python obviously, but I fear there are some pipelines or subscriptions for Python news, information about must-have new packages, and the like that I'm currently missing."},
{"Title": "Do you make display-tables in Python? - \"The Design Philosophy of Great Tables\"", "Author": "economicurtis", "Content": "The maintainer of `great_tables` released an article about the design philosophy of his package https://posit-dev.github.io/great-tables/blog/design-philosophy/ Curious about your thoughts. What tools do you prefer to use when you need to share a data table based on work you've done in python?"},
{"Title": "A solver of Le Compte Est Bon and Le Mot Le Plus Long", "Author": "RRTheGuy", "Content": "Hi, I made a new project called dcdljeu (written in French), a solver for the games Le Compte Est Bon and Le Mot Le Plus Long from the TV Show Des Chiffres Et Des Lettres."},
{"Title": "pipxu - a faster alternative to pipx", "Author": "bulletmark", "Content": "What my project does\npipxu installs Python applications, i.e. Python packages which have one or more executable programs, into independent isolated virtual environments on your system. Each package and it's dependencies are thus insulated from all other applications, and from the system Python. pipxu creates links to application executables in a common directory, which you have in your PATH. Packages are typically sourced from PyPI, the Python Package Index."},
{"Title": "UXsim 1.1.0 released: Network traffic flow simulator gets Multilane support", "Author": "Balance-", "Content": "Version 1.1.0 of UXsim is released, which now supports modeling multilane ways. Main Changes\nAdd support for multilane links. More technically, it is a multilane, single-pipe model where vehicles cannot overtake others. This allows us to set traffic capacity significantly larger while keeping consistency to KW theory.\nSeparate Analyzer class from uxsim.py. This means that uxsim.py now contains only the essential codes for the simulation. It makes it easier for users to understand the simulation logic."},
{"Title": "Does it really matter what order you import modules in python?", "Author": "lizziemoon89", "Content": "I am trying to understand why anyone would care whether you import math or numpy first. I am told it is good practise but it just seem pointless to care."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "XZ Vulnerability Anaconda", "Author": "jimtoberfest", "Content": "Is the xz library compromised along with the xz Linux utility? Anaconda seems to auto load this library upon creation of new venvs."},
{"Title": "Nava: Python Light-Weight Sound-Player Library", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/openscilab/nava What My Project Does: Nava is a Python library that allows users to play sound in Python without any dependencies or platform restrictions. It is a cross-platform solution that runs on any operating system, including Windows, macOS, and Linux. Its lightweight and easy-to-use design makes Nava an ideal choice for developers looking to add sound functionality to their Python programs. import time\nfrom nava import play, stop\nsound_id = play(\"alarm.wav\", async_mode=True, loop=False)\ntime.sleep(4)\nstop(sound_id)"},
{"Title": "Python 3.12.3 - The third maintenance release of Python 3.12", "Author": "Neustradamus", "Content": "https://www.python.org/downloads/release/python-3123/"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Adnexus DI/IoC Framework", "Author": "Nictec", "Content": "Repo: https://github.com/Nictec/Adnexus What My Project Does: Adnexus is a declarative and fully typed DI/IoC framework for python. It is inspired by python-dependency-injector because this project is no longer maintained. Target Audience: Currently Adnexus is in heavy development. So expect heavy errors and breaking changes. Eventually if we reach 1.0.0 the project will be ready for production. Comparison: The main difference to existing (and maintained) projects is the \"declarative\" part of the framework. Injectables are declared direclty in the container class using Providers. This takes away the \"magic\" of IoC because it is clear where your dependencies come from. Furthermore all dependencies can be directly configured using the integrated config system (for details see the repo)"},
{"Title": "Docx2Python 2.10.0 will now extract comments from Word files", "Author": "Shay-Hill", "Content": "access comments with Docx2Python You can access docx comments with the comments attribute of the output DocxContent object. with docx2python('path/to/file.docx') as docx_content:\n    print(docx_content.comments) For each comment, this will return a tuple: (reference_text, author, date, comment_text)"},
{"Title": "PGCacheWatch - Supercharge Your Caching Strategy", "Author": "GabelSnabel", "Content": "Hey Python enthusiasts! 👋\nI'm thrilled to introduce PGCacheWatch, my recent project designed to enhance your PostgreSQL databases by bringing real-time event notifications right into your applications. Vastly improved cache invalidation efficiency, without the need for adding any new services or infrastructure.\nWhat My Project Does\nPGCacheWatch capitalizes on PostgreSQL's built-in NOTIFY/LISTEN features to deliver instant, real-time notifications about database events, ensuring your application's cache remains fresh and synchronized with your database."},
{"Title": "Who's going to PyCon US 2024?", "Author": "frocketgaming", "Content": "It's just around the corner. I'll be going on my own so it would be nice to meet up with some people potentially. Who plans to go and what speakers / sessions are you looking forward to?"},
{"Title": "Advanced Macro & Calorie Calculator", "Author": "MCTrovato", "Content": "What My Project Does A macro-nutrient and calorie calculator to help me achieve body composition goals.\nThis calculator is compatible with metric and imperial units. It supports weight changes based on percentage and fixed values (lbs, kg). This is useful when losing weight in a fat loss phase as a percentage, and for gaining at a fixed value during a muscle growth phase.\nThe recommendations are built using scientific research based on lean body mass. If the user's body fat percentage is unknown, then it will be calculated using BMI and the Deurenberg formula.\nGeneral guidance is also available on the ."},
{"Title": "Serverless Python Support in Cloudflare Workers", "Author": "TheMadFratter", "Content": "Today Cloudflare has announced support for Python in their Clouldflare Workers serverless environment. This allows Python to be run at the edge on their global network using a combination of Pyodine and the V8 runtime. Announcement can be found on the Cloudflare Blog: https://blog.cloudflare.com/python-workers"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Security Code Challenge for Developers & Ethical Hackers - Damn Vulnerable RESTaurant API", "Author": "theowni", "Content": "Security Code Challenge for Developers & Ethical Hackers – Damn Vulnerable RESTaurant A FastAPI based intentionally vulnerable web application teaching the most common security vulnerabilities in API through a dedicated game. Damn Vulnerable RESTaurant is operated by a mysterious Chef who has discovered that threat actors were able to compromise his restaurant’s API and the underlying system. He suspects that a competing restaurant located across the street might be involved in this attack! The goal of the challenge is to identify and fix vulnerabilities based on provided hints. During this adventure, you will have the opportunity to investigate how the attack was carried out and fix security issues to safeguard the application. Moreover, you can uncover the identity of the person behind the attack by the end of this adventure."},
{"Title": "Using Jupyter Notebooks with Flox", "Author": "z_mitchell", "Content": "https://flox.dev/blog/jupyter-remote-env Hey everyone, we released Flox 1.0 a few weeks ago and one of the cool things you can do is set up environments with a bunch of dependencies already set up for running a Jupyter notebook. Take a look to see how it all works!"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "\"Mark as read\" plugin for mkdocs-material", "Author": "br2krl", "Content": "Hi everyone, I developed a simple plugin for mkdocs-material. What My Project Does: In simple terms, this plugin allows users to mark pages as read and it shows a checkmark icon in navigation bar for the pages that was marked as read.\nThe plugin adds a button under the page content and when users clicks, it stores read date in localStorage. It shows a checkmark icon in the navigation panels for the pages that marked as read. It also shows a \"document updated\" icon if the pages that marked as read got an update. Target Audience:"},
{"Title": "automathon: A Python library for simulating and visualizing finite automata", "Author": "fexx3l", "Content": "What my project does\nautomathon is a Python library for simulating and visualizing finite automata, is easy to use and have a docs website to read more about the functions that are implemented for DFAs and NFAs. During my CS degree, I learned about automata and this became one of my favorite topics, that's why I started to work on this project, I wanted to create something simple and easy to use.\nTarget audience"},
{"Title": "pointers.py being added to the standard library!", "Author": "ZeroIntensity", "Content": "As of PEP 4124 being accepted, the infamous pointers.py will be added to Python's standard library in 3.13! To quote Guido van Rossum's take on adding this, \"Why the hell not?\" This will also introduce pointer literals, the sizeof operator, and memory errors! from pointers import malloc\n\nptr = &\"spam\"  # Pointer literal\nprint(*ptr)\nmem = malloc(?\"hello\")  # New sizeof operator\nprint(*mem)  # MemoryError: junk 13118820 6422376 4200155 at 0x7649f65a9670\n# MemoryWarning: leak at 0x7649f65a9670"},
{"Title": "An Automated Bash Script for Python Virtual Environment Management", "Author": "SAV_NC", "Content": "Hello r/Python, What My Project Does: This script is designed to automate the management of Python virtual environments and dependencies, streamlining the setup process for Python projects. It facilitates a more efficient workflow for managing project-specific environments and package installations, especially in a professional development setting. Target Audience: This tool is particularly beneficial for developers and IT professionals looking for a systematic approach to environment management. It is designed to integrate into existing workflows, providing a reliable and consistent method for managing Python environments and dependencies."},
{"Title": "pwdgen - a simple password generator", "Author": "RRTheGuy", "Content": "What my project does\nMy project generate simple, strong, memorable and easy-to-type passwords.\nTarget audience\nFor anyone who need to get passwords easily.\nComparison\nMost passwords manager generate completely passwords with completely random characters that aren't very easy to memorize or tape."},
{"Title": "Python isn't dramatic enough", "Author": "treyhunner", "Content": "Ever wished your Python interpreter had the dramatic feeling of a 300 baud modem connection? Today there's a solution: pip install dramatic dramatic on PyPI dramatic on GitHub What My Project Does All text output by Python will print character-by-character. It works as a context manager, as a decorator, or as a simple function call. Other features include a dramatic REPL, ability to run specific Python modules/scripts dramatically, and a --max-drama argument to make all Python programs dramatic all the time. Target Audience Those seeking amusement. Comparison Just like Python usually runs, but with the feeling that you're inside a text-based adventure game."},
{"Title": "Paid libraries may kill Python", "Author": "Glxblt76", "Content": "It appeared too easy to me that we could create entire GUI from Python. I waited for the other shoe to drop, and it dropped. Now Anaconda and PySimpleGUI require payment if ever you want to use the libraries professionally. I wonder whether this will be the end of Python. It seems enshittification is finally reaching Python, where people previously used libraries for free and when they update them find out that they have to pay or stop using the libraries."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "geojson-shave: a command-line tool for reducing the file size of GeoJSON files", "Author": "Ok-Frosting7364", "Content": "Source code: https://github.com/ben-n93/geojson-shave What my Project Does\nReduces the file size of GeoJSON files by truncating coordinates to the specified decimal place, eliminating whitespace and (optionally) replacing the property key with an empty dictionary. Target Audience\nFor anyone that works with geospatial data (and specifically GeoJSON files) - so data analysts, data engineers, data journalists, GIS professionals, etc. Comparison There is a website that reduces the size of GeoJSON files, however it didn't work for me when I tested it. The advantage of my tool is that you can run it from the command-line and don't need an Internet connection."},
{"Title": "async_api_caller - simplifies asynchronous web API calling", "Author": "teamamentum", "Content": "What My Project Does\nMaking asynchronous web API calls with asyncio and aiohttp can be complicated. This async_api_caller package abstracts away that complexity for a common case of needing to make multiple web API calls while varying query parameters. Installation git clone git@github.com:amentumspace/async_api_caller.git\ncd async_api_caller/\npip install ."},
{"Title": "Analyzing Python Malware found in an open-source project", "Author": "42-is-the-number", "Content": "Hi all, I've recently found a Python Malware in a FOSS tool that is currently available on GitHub. I've written about how I found it, what it does and who the author is. The whole malware analysis is available in form of an article. I would appreciate any and all feedback."},
{"Title": "magic-di: Dependency Injector with minimal boilerplate code, built-in support for FastAPI and Celery", "Author": "R1ngoB", "Content": "I’m excited to share something we’ve been working on at Wolt: a new dependency injection library for Python “magic-di”. Born from our experience with a large service that has many components such as: API, event consumers, background workers, and cron jobs. magic-di aims to simplify dependency management without the hassle. from magic_di.fastapi import inject_app, Provide\n\napp = inject_app(FastAPI())\n\n@app.get(path=\"/hello-reddit\") \ndef hello_reddit(service: Provide[Service]) -> dict: \n  return { \n     \"is_connected\": service.is_connected(),\n  }"},
{"Title": "Drawpyo: create Draw.io diagrams with Python", "Author": "MerrimanIndustries", "Content": "This is a project that I initially created in a weekend for my own use after I was surprised to find out there was no easy way to generate Draw.io diagrams in Python. I'm a huge fan of Draw.io for documentation since it's free, lightweight, and the files are plaintext. After building basic initial functionality I decided to use this as a project to make a more mature Python library out of something I initially wrote for myself quick n dirty. I refactored (a lot), wrote docs, tests, build logic, etc. There's still a lot to do to make it as robust as it could be but I think it's good enough to share!"},
{"Title": "3-dimensional/ heatmap peak picking?", "Author": "robbie_s1", "Content": "Hello python community. I’m pretty new to scripting and come from a pure chemistry background. I’m working with 3-D MALDI-trapped ion mobility mass spectrometry data and I’ve been looking for a solid algorithm that can peak pick from two ‘time-resolved’ dimensions (mass and mobility), and the intensity arrays associated with those two dimensions. I need to peak pick from a heatmap essentially. Does anyone know of any good 3-D peak picking algorithms, or otherwise know how I can approach this? Thank you all!"},
{"Title": "ipython-sql has been forked", "Author": "databot_", "Content": "Hi r/Python, In case you didn't know, ipython-sql has been forked. The new project has fixed some long-standing issues and added a bunch of new capapabilities:\nSplitting long SQL queries in multiple cells\nPlotting large-scale datasets\nMore flexibility to open database connections\nThe API remains the same, you can replace projects that depend on ipython-sql with jupysql: pip install jupysql"},
{"Title": "The Best* Python Cheat Sheet", "Author": "kmhnz", "Content": "A dense Python cheat sheet with just what you need.\nDesign principles:\n• Focus on Python core\n• Comprehensive but selective (Just what you need)\n• Densely packed\n• Well-linked\n• Linkable\n• Responsive\n• Printable\nIssues and feedback are tracked at the .\n*It may not be the best Python cheat sheet, but it aspires to be."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Python Inner class feature", "Author": "koldakov", "Content": "test.py import sys\nsys.setrecursionlimit(4)\nclass Foo:\n    class Foo:\n        foo = 1"},
{"Title": "Do folks ever use Pandas when they should use SQL?", "Author": "ChristianPacifist", "Content": "I think I see this a lot. I believe SQL, including like dataframe SQL packages, should always be used over Pandas when possible unless one is doing something Pandas is more suited to or unless someone requires broader Python control structures or features. I am a big believer in sticking to SQL as a baseline data manipulation framework and only using other frameworks if SQL is lacking. One of the biggest ways to accumulate technical debt is solving problems in multiple ways that are not standardized that not all people know."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "🚀 Goprox: Simplify Google searches with automatic proxy handling and user-agent selection.", "Author": "SwiftGloss", "Content": "What My Project Does: Goprox is a Python module that revolutionizes Google searches by automatically checking and using proxies, eliminating the need for user input. With Goprox, users can enjoy seamless searching without worrying about proxy configuration or getting blocked. Target Audience: Goprox is perfect for developers seeking to automate Google searches for web scraping, automation, or data collection tasks. It's also ideal for anyone who desires a hassle-free search experience without the hassle of manual proxy management. Comparison: Compared to existing alternatives, Goprox stands out with its focus on automatic proxy handling. Unlike other solutions that require manual proxy input, Goprox streamlines the process by autonomously managing proxies for each search query."},
{"Title": "Automatically extract phone call insights with LLMs - quick tutorial", "Author": "SleekEagle", "Content": "Hey everyone! I wrote this quick Python script showing how you can automatically extract information from phone calls with LLMS. The call I use is a phone call received by a home building company where the caller is inquiring about an estimate for the cost to build a home on land he may purchase. Here's what the LLM extracted: SUMMARY:\n- The caller is interested in getting an estimate for building a house on a property he is looking to purchase in Westchester.\n\nACTION ITEMS:\n- Have someone call the customer back today to discuss building estimate.\n- Set up time for builder to assess potential property site prior to purchase.\n\nCONTACT INFORMATION:\nName: Lindstrom, Kenny\nPhone number: 610-265-1715"},
{"Title": "AnyPathLib - A unified PathLib-like API for cloud storages", "Author": "kfirgold99", "Content": "Hi everybody, I'm happy to share AnyPathLib 🛣️, a pip package I created to simplify access to different storage resources - S3, Azure, and local storage. What My Project Does: Basically, instead of writing custom code to handle the different storage resources using the SDK (boto3, azure-sdk), you can now just use AnyPathLib: from anypathlib import AnyPath\n  \n\n  \n# Create an AnyPath instance for a local file\n  \n\n  \nlocal_file = AnyPath(\"/path/to/local/file.txt\")\n  \n\n  \n# Create an AnyPath instance for an S3 object\n  \n\n  \ns3_file = AnyPath(\"s3://bucket/path/to/object.txt\")\n  \n\n  \n# Copy a file from local to S3\n  \n\n  \nlocal_file.copy(s3_file)\n  \n\n  \n# Copy a directory from S3 to Azure\n  \n\n  \ns3_dir = AnyPath(\"s3://bucket/path/to/dir\") \n  \nazure_dir = AnyPath(\"https://account_name.blob.core.windows.net/container_name/path\") \n\ns3_dir.copy(azure_dir)"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "With the demise of open Pysimplegui is anyone interested in helping productionise this alternative?", "Author": "Black-DVD-Archiver", "Content": "I wrote my own Pyside6 alternative to Pysimple gui that I use in my projects starting some years back after some unsatisfactory interactions with the author of Pysimple gui. The GIT source for my GUI wrapper is in https://github.com/David-Worboys/Black-DVD-Archiver/blob/main/qtgui.py And the open source project it is used in is https://github.com/David-Worboys/Black-DVD-Archiver Just look for the layout methods in the .py files to see how it is used. https://github.com/David-Worboys/Black-DVD-Archiver/blob/main/video_cutter.py#L2391 is a good place to start, line 953,."},
{"Title": "Portr: Open source self hosted ngrok alternative designed for teams", "Author": "ShiftDefeat", "Content": "https://github.com/amalshaji/portr What my project does? Portr is a tunnelling solution that let's you expose local http/tcp connections to the public internet. Target audience Developers that work with webhooks or callbacks. Or anyone who want to quickly share their dev server with others. Comparison\nMonitor connections, and manage teams and members via the admin dashboard. Watch video\nInspect and replay HTTP requests using portr inspector. Watch video."},
{"Title": "Astrologers have announced the month of Python in Centrifugal Labs: real-time libraries and tutorial", "Author": "FZambia", "Content": "Hello Python community. My name is Alexander – I am the author of Centrifugo project. It's a self-hosted real-time messaging server (alternative to Ably, Pusher, Pubnub services). It was written in Python originally, but then migrated to Go. But it's fully language-agnostic and helps many projects written in Python (and in Django in particular) to add real-time updates to the application. Centrifugo is quite fast, scales well, has super-efficient integration with Redis (~million of publications per second, and more with Redis sharding/Redis Cluster)."},
{"Title": "Automated system testing on GUI app (Nodezator - Public domain generalist Python node editor)", "Author": "KennedyRichard", "Content": "Hello, everyone. I'm Kennedy Guerra, 33, open-source software maintainer. Just wanted to share a new feature I'm working on for the next version of Nodezator (GitHub | website), my public domain generalist Python node editor. In case you don't know Nodezator, the next few sections present it briefly. If you want to know about the new feature I'm working on, you can skip straight to the last subsection, which contains a detailed explanation and links to videos and extra info about the feature, called Automated System Testing."},
{"Title": "Better PDF Layout Detection for LLM's + table support", "Author": "serjester4", "Content": "What's the first step to building 90% of AI applications?\nChunking your documents! Unfortunately there's very few libraries for this and most rely on naively splitting text into N characters. You lose so much valuable information hidden in the layout of the document when you do this. If you give an LLM bad inputs, you're going to get bad results. https://github.com/Filimoa/open-parse/ What it does: The library can detect the layout of a PDF, convert to markdown and extract tables into html in one line of code. You can then feed this directly into your vector database or something like LlamaIndex. It does all this while preserving bounding boxes so you can display citations directly to the user."},
{"Title": "I forked Newspaper3k, fixed bugs and improved its article parsing performance - Newspaper4k package", "Author": "gringo6969", "Content": "Hi all! The Newspaper3k is abandoned (latest release in 2018) without any upgrades and bugfixing. I forked it, and imported all open Issues into my repo. The first two releases (0.9.0 and 0.9.1) were mainly bugfixes and bringing the project more up to date and compatible with python > 3.6 (I started from version 0.9.0 😁). In the latest version, 0.9.3 I not only almost reworked the whole News article parsing process, but also added a lot of new supported languages (around 40 new languages) Repository: https://github.com/AndyTheFactory/newspaper4k Documentation:"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Genuine question: Where should I share my opinion about Python language?", "Author": "HalfAByteIsWord", "Content": "I recently posted my opinions on the import system in Python and how it can be made more intuitive and straightforward. I got some comments, some of them are just snappy as usual and some of them had some suggestions and workarounds. Either way the post got removed, citing that it is not suitable for this sub-reddit. I mean, come on, I cannot talk about Python features in Python sub-reddit? Update: To mods: Thanks for letting me have this conversation. To others who made helpful comments, thank you. Original post: I don't want to recreate the post verbatim here, I don't remember it exactly too. It was basically something like this,"},
{"Title": "We're building a Large Action Model (LAM) project that can do any task for you using Python!", "Author": "nobilis_rex_", "Content": "Hey guys! My friend and I are building Nelima. It's basically a Large Language Model designed to take actions on your behalf with natural language prompts and theoretically automate anything. For example, it can schedule appointments, send emails, check the weather, and even connect to IoT devices to let you command it – you can ask it to publish a website or call an Uber for you! You can integrate your own custom actions, written in Python, to suit your specific needs, and layer multiple actions to perform more complex tasks. When you create these actions or functions, it contributes to the overall capabilities of Nelima, and everyone can now invoke the same action. Right now, it's a quite limited in terms of the # of actions it can do but we're having fun building a few :)"},
{"Title": "Gmail Filter Squasher project", "Author": "unexpected_possum", "Content": "In Gmail I realized that I had way too many filters that performed exactly the same action, but they simply had different \"from\" addresses. To solve this I created this little project that merges similar filters into a single one. It does require a lot of setup due to having to authenticate into Gmail, but if someone is on the same situation as me, it could be helpful. Link to the project: github What My Project Does It connects into a Gmail account, reads their filters and squashes them into a single one. The program requires a manual setup of creating an OAuth credentials screen and downloading relevant credentials, which is cumbersome. But it's a one time effort as you can keep on using the application as long as you keep access to the GCP project."},
{"Title": "Wrote a Python script for downloading images/GIFs from subreddits in bulk.", "Author": "MonsieurKebab", "Content": "What my Project Does\nIt's a program that searches through posts in a specified subreddit and downloads images, gifs etc.\nTarget Audience\nIt's a toy project at this point, but I might extend its functionality if I can find good resources. Maybe even add support for different websites (imgur et al.).\nComparison"},
{"Title": "How to parallelize Pandas with Modin", "Author": "linchpiner", "Content": "Discover the power of Modin in overcoming the performance bottlenecks of Pandas. We'll walk you through how a simple switch can reduce your waiting times and make your workflow smooth and speedy, all without leaving the comfort of Pandas behind. Modin is an active open source project. Take a look to this blog post to see if it is applicable for your code: https://dchigarev.github.io/modin_perf_examples/"},
{"Title": "Is this project worth the time and effort: Camera to Keyboard?", "Author": "mnvoh", "Content": "EDIT: Since there are a lot of upvotes on that comment, yes, this is about seeking strangers' validations. But we're all validation seekers. For instance, we all need someone's validation to make a living (boss, customers, etc.) Your boss ain't gonna tell you \"god damn boy, you suck at your job, here take my money\". But in this case, validation seeking is kind of a broad term, let's use something more specialized like Market Research 😉. Also, thanks for all your comments and inputs. Hello everyone I've been working on this project for the past 3 weeks, and I want people's opinions to determine how much time I should invest in it."},
{"Title": "I made my very first python library! It converts reddit posts to text format for feeding to LLM's!", "Author": "NFeruch", "Content": "Hello everyone, I've been programming for about 4 years now and this is my first ever library that I created! What My Project Does It's called Reddit2Text, and it converts a reddit post (and all its comments) into a single, clean, easy to copy/paste string. I often like to ask ChatGPT about reddit posts, but copying all the relevant information among a large amount of comments is difficult/impossible. I searched for a tool or library that would help me do this and was astonished to find no such thing! I took it into my own hands and decided to make it myself. Target Audience This project is useable in its current state, and always looking for more feedback/features from the community!"},
{"Title": "Does anyone actually use PyPy or Cython?", "Author": "Sc0urge_", "Content": "I have been reading a lot about these tools recently and wondered if they are used in production, especially when building a backend with Python. As far as I know, PyPy is not ideal because of its lack of package support, but Cython seems pretty neat."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Would there be general interest for a library that ensure external application API call safety?", "Author": "SpeakerOk1974", "Content": "Python has become a popular inclusion as a scripting language for many professional software packages. However, the APIs presented by these applications may be unsafe and/or do not include pythonic error handling. As someone working in the energy sector at my day job, I often find myself wrestling issues external to my python code in our power system simulator (usually memory related) that due to the implementation of the API can error at runtime below the exception handling mechanism of the interpreter. I will have have to implement a library for this purpose either internally or as an open-source side project."},
{"Title": "Futurama API written in async Python", "Author": "koldakov", "Content": "I've created a simple API service https://github.com/koldakov/futuramaapi to access Futurama units with async Python + FastAPI + SQLAlchemy (PostgreSQL). I've chosen Hypercorn for a web server to achieve HTTP/2 support - considering I didn't find yet cheap hosting that supports HTTP/2. Heroku doesn't support, render doesn't support. Also it has some code related to GraphQL (I used strawberry). + I didn't find a lot of discussions about Heroku + FastAPI - the problem will be with redirect to https. As default fastapi (starlette) middleware doesn't work with proxies there will be an infinite loop if you try to use . Chain will be: Client https-> Proxy(Hypercorn, for example) http-> fastapi, in that case as you can see the request is secure, but fastapi (starlette) won't understand this and will redirect to https. Here is a simple workaround to support https under proxy:"},
{"Title": "What’s a script that you’ve written that you still use frequently?", "Author": "HiT3Kvoyivoda", "Content": "Mine is a web scraper. It’s only like 50 lines of code. It takes in a link, pulls all the hyperlinks and then does some basic regex to pull out the info I want. Then it spits out a file with all the links. Took me like 20 minutes to code, but I feel like I use it every other week to pull a bunch of links for files I might want to download quickly or to pull data from sites to model."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyPDFCompare PDF Comparison CLI Tool", "Author": "Motox2019", "Content": "First time poster here, Ill preface this post by saying I am not a software engineer by any metric. I am a hobbyist programmer and I mainly just create programs I find particularly useful in my day job as a designer. Figured I would share my handy PDF comparison tool, see if anyone else can find it useful as well. This tool is mostly designed around comparing CAD drawings. It probably isn't great for comparing text documents at the moment though I plan to add this functionality. It works by comparing the pdf's page by page in a raster image format. It creates several output files of different styles:"},
{"Title": "Alternative Queries: Typed and Reusable Handcrafted SQL", "Author": "baluyotraf", "Content": "Hello! It's still early in development, but I just want to know if people are interested. What My Project Does I created a library to integrate Pydantic type checking for handwritten SQL queries. It also allows you to test the types, and create nested queries easily. Alternative Queries Target Audience We had a project recently were we had to use handwritten SQL and managing the parameters and reusing queries was quite a hassle. So I'm planning to use this on my production projects moving forward. Comparison I would say in terms of usage, it's like Pydantic + SqlParams, but only with the python default formatting."},
{"Title": "remove background from image using AI in just 5 lines of python code", "Author": "Maleficent_Yak_993", "Content": "I created a python library \"dis-bg-remover\" based off the \"Highly Accurate Dichotomous Image Segmentation (https://arxiv.org/pdf/2203.03041.pdf), whose results are comparable, if not better, to the premium offerings in the market. Explainer video here https://www.youtube.com/watch?v=js7AYKkZvFI"},
{"Title": "I created a way to connect your Python to LLM to provide it with debugger-level context (OpenSource)", "Author": "Financial_Muffin396", "Content": "I recently developed an OpenSource solution that can auto-fix production exceptions for Python servers. Think of it as Datadog, but with the added capability to refactor your code. Currently, it's suitable for experimental use, and yes based on OpenAI API. The source code is available at https://github.com/CaptureFlow/captureflow-py. What My Project Does:\nIt incorporates a tracer client-side Python library and backend that accumulates such traces and is capable of proposing code improvements for your repository. It traverses the execution graph, extracts relevant parts of it, enriches it with implementation data from the GitHub API, and then generates suggestions using the OpenAI API."},
{"Title": "Finite Element Analysis for Continuum Mechanics of Solid Bodies (FElupe)", "Author": "adtzlr", "Content": "Hi, I'd like to introduce to you my open-source FEA package FElupe, available on GitHub. Its target audience is typically an engineer, e.g. in the field of mechanical or biomedical engineering. It is designed to be both flexible for scientifc research as well as easy-to-use for industry-related problems. Packages with similar scopes are e.g. scikit-fem and Fenics(x). FElupe is a Python 3.8+ 🐍 finite element analysis package 📦 focussing on the formulation and numerical solution of nonlinear problems in continuum mechanics 🔧 of solid bodies 🚂. Its name is a combination of FE (finite element) and the german word Lupe 🔍 (magnifying glass) as a synonym for getting an insight 📖 how a finite element analysis code 🧮 looks like under the hood 🕳️."},
{"Title": "An efficient modeling interface for mathematical optimization: PyOptInterface", "Author": "c0decs", "Content": "I recently develop an efficient modeling interface for optimization problems in Python called PyOptInterface.\nSource code is at https://github.com/metab0t/PyOptInterface\nDocumentation is at https://metab0t.github.io/PyOptInterface/\nWhat My Project Does It is designed as a very thin wrapper of native C API of optimizers and attempts to provide common abstractions of an algebraic modelling environment including model, variable, constraint and expression with the least overhead of performance."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Text extraction lib", "Author": "TraditionalAlps4337", "Content": "I created a simple tool for extracting text from PDF, EPUB, TXT, and DOCX files.It is mainly for personal use, but I would really appreciate a feedback https://github.com/KirillAn/extractText/tree/main"},
{"Title": "SQLModel vs native SQL Alchemy ORM for a web backend?", "Author": "Raz_Crimson", "Content": "Hi there\nI was tasked with migrating from mongoDb to PostgreSQL due to the performance issues.\nThe backend is FastAPI-based web server for a mobile APP with a decent amount if CRUD. We also heavily use Pydantic for data validation and the primary carried of data across the service layers Would like to hear opinions from SQLModel users as to how easy it is to use or what kind of pitfalls am i setting myself up by using it. Last post that I could find was years old and even that was not really conclusive. Now SQLAlchemy 2.0 is released and even SQLModel has support for Pydantic V2, so would like some newer thoughts in this topic."},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter. Weekly news, subscribe for free", "Author": "HP7933", "Content": "With the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe. 10,921 subscribers - the largest Python on hardware newsletter out there. Catch all the weekly news on Python for Microcontrollers with adafruitdaily.com. This ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyBackport: Use instances from newer python releases", "Author": "tan_tata_chan", "Content": "What My Project Does PyBackport holds serves three purposes:\nUse instances from newer python releases in older python versions. For example, using StrEnum (new in python 3.11) in python 3.9\nEnable experimental unreleased classes. For example, define new enums where members are tuples with TupleEnum\nProvide support to commonly used constants. For example, PyBackport allows to import and use to avoid re-defining constant color codes in every new project."},
{"Title": "Python open source Projects", "Author": "Rare-Lion1261", "Content": "I'm seeking for python open source project where I can add things , colaborate with a community on building valuable stuff , Any good suggestions please ?"},
{"Title": "Automating Python with Google Cloud", "Author": "neb2357", "Content": "I just published a tutorial series on how to automate a Python script in Google Cloud using Cloud Functions and/or Cloud Run. Feedback would be great. Thanks!\nAutomating Python with Google Cloud\nAutomating Python with Google Cloud Functions\nAutomating Python with Google Cloud Run"},
{"Title": "Distributing simple handy scripts for Windows - mouse-startable AND editable (the tricky one-liner)", "Author": "galkinvv", "Content": "In short: here is the hacky 2-line header that makes any python script a clickable batch file\n(assuming bundled python in a subfolder) @classmethod # 2>nul & (if not exist \"%~dp0\\python64-win\\python.exe\" (echo Fatal python64-win\\python.exe not found & pause) else (title %~f0 & \"%~dp0\\python64-win\\python.exe\" \"%~f0\" %*)) & exit /B & # noqa: E501\ndef __unused(): \"fake function to help writing header that allows executing same file as python and batch\"\n\n# Normal script starts here"},
{"Title": "Python state management", "Author": "Extreme-Acid", "Content": "Hey all, I love what Django has with django-fsm. I require something but without Django, as there is no user interaction with the workflow. All inputs and outputs are either rabbitmq or another api. This is to be a workflow management system. I am looking for state management backed up by database so we can not suffer if a k8s pod dies with all the states in memory. Some of our workflows could take weeks. Is it still best to make this in Django or is there a database backed state management module available? I see pytransitions but I would have to add database logging to it."},
{"Title": "Where are you getting your Python news? (besides right here, of course)", "Author": "wanderingmonster", "Content": "Hello all. I just saw this post about Pandas, which lead to a discussion of Polars being much faster. Polars, which I had never heard about before this morning. This leads me to wonder: where are you all getting your Python news and other information? r/Python obviously, but I fear there are some pipelines or subscriptions for Python news, information about must-have new packages, and the like that I'm currently missing."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Do you make display-tables in Python? - \"The Design Philosophy of Great Tables\"", "Author": "economicurtis", "Content": "The maintainer of `great_tables` released an article about the design philosophy of his package https://posit-dev.github.io/great-tables/blog/design-philosophy/ Curious about your thoughts. What tools do you prefer to use when you need to share a data table based on work you've done in python?"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Chat with your friends within your (Mac & Linux) Terminal | Textual | Simple & Easy to use", "Author": "Plastic-Payment-934", "Content": "Toschat !What My Project Does?\na lightweight python chat app within your terminal with simple UI and it's built on top of Textual framework. What you can do: - Create a new account - Add your friends to your contact - and chat!\nTarget Audience\nIt's my hobby project to improve my python knowledge but everyone can install and use it. All data store in a live server with Django framework."},
{"Title": "Creating a GeoTIFF raster XYZ tile service in python with caching capability", "Author": "iamgeoknight", "Content": "Creating a GeoTIFF raster XYZ tile service in python with caching capability"},
{"Title": "A solver of Le Compte Est Bon and Le Mot Le Plus Long", "Author": "RRTheGuy", "Content": "Hi, I made a new project called dcdljeu (written in French), a solver for the games Le Compte Est Bon and Le Mot Le Plus Long from the TV Show Des Chiffres Et Des Lettres."},
{"Title": "Designing a Pure Python Web Framework", "Author": "Pleasant-Cow-3898", "Content": "From the Article:\nThis provides a good overview of how Reflex works under the hood. TLDR:\nUnder the hood, Reflex apps compile down to a React frontend app and a FastAPI backend app. Only the UI is compiled to Javascript; all the app logic and state management stays in Python and is run on the server. Reflex uses WebSockets to send events from the frontend to the backend, and to send state updates from the backend to the frontend. Full post: https://reflex.dev/blog/2024-03-21-reflex-architecture/#designing-a-pure-python-web-framework"},
{"Title": "Makefile Parser for Python", "Author": "Cybasura", "Content": "Hello everyone! I am proud to introduce a Makefile Parser for Python that I think will be useful! the link is Thanatisia/makefile-parser-python As an introduction, I have been using python and been following this subreddit for quite awhile now, but this is my first post Recently, I've been planning a side-project involving the use of Makefiles in Python, and I required the use of a Makefile parser ala json or pyyaml - whereby you would import a Makefile into python as objects/dictionary/lists. Hence, I started searching for a Makefile Parser. The only parser I've found is PyMake(2) which is cool but it hasnt been updated since 2017 from what I recall and that it is more of a CLI utility, so with that in mind, I went about to make it"},
{"Title": "pipxu - a faster alternative to pipx", "Author": "bulletmark", "Content": "What my project does\npipxu installs Python applications, i.e. Python packages which have one or more executable programs, into independent isolated virtual environments on your system. Each package and it's dependencies are thus insulated from all other applications, and from the system Python. pipxu creates links to application executables in a common directory, which you have in your PATH. Packages are typically sourced from PyPI, the Python Package Index."},
{"Title": "UXsim 1.1.0 released: Network traffic flow simulator gets Multilane support", "Author": "Balance-", "Content": "Version 1.1.0 of UXsim is released, which now supports modeling multilane ways. Main Changes\nAdd support for multilane links. More technically, it is a multilane, single-pipe model where vehicles cannot overtake others. This allows us to set traffic capacity significantly larger while keeping consistency to KW theory.\nSeparate Analyzer class from uxsim.py. This means that uxsim.py now contains only the essential codes for the simulation. It makes it easier for users to understand the simulation logic."},
{"Title": "Load Apple's .numbers Files into Pandas", "Author": "nez_har", "Content": "I recently ran into some challenges while trying to work with Apple's .numbers files on Linux. After a bit of experimentation, I figured out a workflow that simplifies the process. If you're planning to use .numbers files and need to load them into pandas, I've created a tutorial that covers the required dependencies and the steps to follow: https://nezhar.com/blog/load-apple-numbers-files-python-pandas-using-containers/. Has anyone else here worked with .numbers files in Python? I’d love to hear about your experiences or any tips you might have."},
{"Title": "UFO Tools- functional programming in python", "Author": "houseofleft", "Content": "I shared a \"monads in python library\" a little while back on here- since then I've been toying with and expanding things out into a more general project for helping functional programming patterns in python. [I had (am having) a bunch of fun making this - thought I'd share here!](https://github.com/benrutter/ufo-tools) What my project does: A simple library with utilities for functional programming in Python.\nTarget Audience: It's meant for use in actual production contexts, but it's still in a very early and experimental phase. It's probably most helpful right now as a learning resource."},
{"Title": "Does it really matter what order you import modules in python?", "Author": "lizziemoon89", "Content": "I am trying to understand why anyone would care whether you import math or numpy first. I am told it is good practise but it just seem pointless to care."},
{"Title": "No More Cutting in Line: Crafting Fairness in Queues using RQ in Python", "Author": "soap94", "Content": "I was trying to tackle the problem of queue fairness and here's how I solved it."},
{"Title": "Code type checks but then `TypeError`s", "Author": "Kiuhnm", "Content": "Have you noticed that Python's static type system is unsound? Look at this code: from typing import overload\n\n@overload\ndef f(x: int) -> str: ...\n@overload\ndef f(x: str) -> int: ...\ndef f(x: int | str) -> int | str:\n    match x:\n        case int():\n            return 1\n        case str():\n            return 'a'\n\nprint('a' + f(1))\nprint(1 + f('a'))"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I made a free easy-to-use toast notification library for PyQt and PySide", "Author": "niklashnng", "Content": "Hey guys, since I couldn't find any good libraries for showing modern-looking toast notifications in PyQt, I made one myself. What My Project Does: It supports showing multiple toasts at the same time, queueing of toasts, 6 different positions, multiple screens and much more. Since it's developed with QtPy, an abstraction layer for multiple versions of PyQt and PySide, you can use it with PyQt5, PyQt6, PySide2, and PySide6. Also, basically anything can be completely customized and it's extremely easy to use. Target Audience: This is useful for any Python developer who is working with PyQt or PySide and wants to display clean and modern-looking toast nofifications easily."},
{"Title": "XZ Vulnerability Anaconda", "Author": "jimtoberfest", "Content": "Is the xz library compromised along with the xz Linux utility? Anaconda seems to auto load this library upon creation of new venvs."},
{"Title": "Type-Level Programming: a POC", "Author": "Kiuhnm", "Content": "While Python doesn't explicitly support Type-Level Programming, I've had some success with it. I think this may be of interest to the Python community, so I'm sharing a POC (Proof Of Concept) I've written. This POC is a statically typed list that encodes its length in its type so that, for instance, when you concatenate two lists, the result has the correct length, all done at type-checking time. Read more on GitHub"},
{"Title": "Who's coming to PyCon Italia this year?", "Author": "patrick91it", "Content": "Hey folks! Is anyone of you attending this year PyCon Italia? I'm one of the organisers and I'd love to connect to new people this year 😊 See you there! 🐍✨"},
{"Title": "Nava: Python Light-Weight Sound-Player Library", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/openscilab/nava What My Project Does: Nava is a Python library that allows users to play sound in Python without any dependencies or platform restrictions. It is a cross-platform solution that runs on any operating system, including Windows, macOS, and Linux. Its lightweight and easy-to-use design makes Nava an ideal choice for developers looking to add sound functionality to their Python programs. import time\nfrom nava import play, stop\nsound_id = play(\"alarm.wav\", async_mode=True, loop=False)\ntime.sleep(4)\nstop(sound_id)"},
{"Title": "Open Jupyter Notebooks in Kaggle? (from GitHub)", "Author": "pbeens", "Content": "I have a repo in GitHub with Jupyter Notebooks for students. On each notebook I have a link where the student can open the notebook in Colab (by changing the URL from https://github.com/ to https://githubtocolab.com/). The problem is that some school boards have Colab blocked. Is there a similar technique I can use to open the notebooks in Kaggle? Are there other sites I should be considering? Thanks!"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "does anyone know about an alternative to aeneas that works on python 3.12.1?", "Author": "jonnisaesipylsur", "Content": "i need some python library that can automatically generate a synchronization map between a list of text fragments and an audio file containing the narration of the text. aeneas does exactly that except it doesnt work on higher than 2.7 with windows."},
{"Title": "Docx2Python 2.10.0 will now extract comments from Word files", "Author": "Shay-Hill", "Content": "access comments with Docx2Python You can access docx comments with the comments attribute of the output DocxContent object. with docx2python('path/to/file.docx') as docx_content:\n    print(docx_content.comments) For each comment, this will return a tuple: (reference_text, author, date, comment_text)"},
{"Title": "PyOhio CFP open through May 20", "Author": "catherinedevlin", "Content": "Call for Proposals open through May 20 PyOhio is a fun, friendly, free general Python conference now in its Nth year (N is large). This year it will be Sat & Sun Jul 27-28, 2024 at The Westin Cleveland Downtown in Cleveland, OH (its first year outside Columbus)! Hope to see you there!"},
{"Title": "Who's going to PyCon US 2024?", "Author": "frocketgaming", "Content": "It's just around the corner. I'll be going on my own so it would be nice to meet up with some people potentially. Who plans to go and what speakers / sessions are you looking forward to?"},
{"Title": "Serverless Python Support in Cloudflare Workers", "Author": "TheMadFratter", "Content": "Today Cloudflare has announced support for Python in their Clouldflare Workers serverless environment. This allows Python to be run at the edge on their global network using a combination of Pyodine and the V8 runtime. Announcement can be found on the Cloudflare Blog: https://blog.cloudflare.com/python-workers"},
{"Title": "Security Code Challenge for Developers & Ethical Hackers - Damn Vulnerable RESTaurant API", "Author": "theowni", "Content": "Security Code Challenge for Developers & Ethical Hackers – Damn Vulnerable RESTaurant A FastAPI based intentionally vulnerable web application teaching the most common security vulnerabilities in API through a dedicated game. Damn Vulnerable RESTaurant is operated by a mysterious Chef who has discovered that threat actors were able to compromise his restaurant’s API and the underlying system. He suspects that a competing restaurant located across the street might be involved in this attack! The goal of the challenge is to identify and fix vulnerabilities based on provided hints. During this adventure, you will have the opportunity to investigate how the attack was carried out and fix security issues to safeguard the application. Moreover, you can uncover the identity of the person behind the attack by the end of this adventure."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "pointers.py being added to the standard library!", "Author": "ZeroIntensity", "Content": "As of PEP 4124 being accepted, the infamous pointers.py will be added to Python's standard library in 3.13! To quote Guido van Rossum's take on adding this, \"Why the hell not?\" This will also introduce pointer literals, the sizeof operator, and memory errors! from pointers import malloc\n\nptr = &\"spam\"  # Pointer literal\nprint(*ptr)\nmem = malloc(?\"hello\")  # New sizeof operator\nprint(*mem)  # MemoryError: junk 13118820 6422376 4200155 at 0x7649f65a9670\n# MemoryWarning: leak at 0x7649f65a9670"},
{"Title": "Python isn't dramatic enough", "Author": "treyhunner", "Content": "Ever wished your Python interpreter had the dramatic feeling of a 300 baud modem connection? Today there's a solution: pip install dramatic dramatic on PyPI dramatic on GitHub What My Project Does All text output by Python will print character-by-character. It works as a context manager, as a decorator, or as a simple function call. Other features include a dramatic REPL, ability to run specific Python modules/scripts dramatically, and a --max-drama argument to make all Python programs dramatic all the time. Target Audience Those seeking amusement. Comparison Just like Python usually runs, but with the feeling that you're inside a text-based adventure game."},
{"Title": "geojson-shave: a command-line tool for reducing the file size of GeoJSON files", "Author": "Ok-Frosting7364", "Content": "Source code: https://github.com/ben-n93/geojson-shave What my Project Does\nReduces the file size of GeoJSON files by truncating coordinates to the specified decimal place, eliminating whitespace and (optionally) replacing the property key with an empty dictionary. Target Audience\nFor anyone that works with geospatial data (and specifically GeoJSON files) - so data analysts, data engineers, data journalists, GIS professionals, etc. Comparison There is a website that reduces the size of GeoJSON files, however it didn't work for me when I tested it. The advantage of my tool is that you can run it from the command-line and don't need an Internet connection."},
{"Title": "Drawpyo: create Draw.io diagrams with Python", "Author": "MerrimanIndustries", "Content": "This is a project that I initially created in a weekend for my own use after I was surprised to find out there was no easy way to generate Draw.io diagrams in Python. I'm a huge fan of Draw.io for documentation since it's free, lightweight, and the files are plaintext. After building basic initial functionality I decided to use this as a project to make a more mature Python library out of something I initially wrote for myself quick n dirty. I refactored (a lot), wrote docs, tests, build logic, etc. There's still a lot to do to make it as robust as it could be but I think it's good enough to share!"},
{"Title": "The Best* Python Cheat Sheet", "Author": "kmhnz", "Content": "A dense Python cheat sheet with just what you need.\nDesign principles:\n• Focus on Python core\n• Comprehensive but selective (Just what you need)\n• Densely packed\n• Well-linked\n• Linkable\n• Responsive\n• Printable\nIssues and feedback are tracked at the .\n*It may not be the best Python cheat sheet, but it aspires to be."},
{"Title": "Python Inner class feature", "Author": "koldakov", "Content": "test.py import sys\nsys.setrecursionlimit(4)\nclass Foo:\n    class Foo:\n        foo = 1"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "python notebook+ insightface + inswapper_128", "Author": "Maleficent_Yak_993", "Content": "I moved from C to python and absolutely loving it. While looking into code of available face swappers I realized they are mostly wrapper on insightface and inswapper. So i thought I'll strip it all down to bare minimum, and the results were better than expected. I've captured my learnings in this video, if you're interested. https://www.youtube.com/watch?v=Ju_reA3zQso"},
{"Title": "Leaping: Fix tests instantly with an omniscient debugger", "Author": "kpetkar", "Content": "Link to Repo: https://github.com/leapingio/leaping What My Project Does\nWe’ve all been in hell when you have no idea why a test might be failing. You set a breakpoint, add print statements, and re-run the code, all to realize that you added them in the wrong spot or need to step backward. Leaping is a simple, fast and lightweight omniscient debugger for Python tests. Leaping traces the execution of your code and allows you to retroactively inspect the state of your program at any time, using an LLM-based debugger with natural language. Using Leaping, you can quickly get the answer to questions like:"},
{"Title": "AnyPathLib - A unified PathLib-like API for cloud storages", "Author": "kfirgold99", "Content": "Hi everybody, I'm happy to share AnyPathLib 🛣️, a pip package I created to simplify access to different storage resources - S3, Azure, and local storage. What My Project Does: Basically, instead of writing custom code to handle the different storage resources using the SDK (boto3, azure-sdk), you can now just use AnyPathLib: from anypathlib import AnyPath\n  \n\n  \n# Create an AnyPath instance for a local file\n  \n\n  \nlocal_file = AnyPath(\"/path/to/local/file.txt\")\n  \n\n  \n# Create an AnyPath instance for an S3 object\n  \n\n  \ns3_file = AnyPath(\"s3://bucket/path/to/object.txt\")\n  \n\n  \n# Copy a file from local to S3\n  \n\n  \nlocal_file.copy(s3_file)\n  \n\n  \n# Copy a directory from S3 to Azure\n  \n\n  \ns3_dir = AnyPath(\"s3://bucket/path/to/dir\") \n  \nazure_dir = AnyPath(\"https://account_name.blob.core.windows.net/container_name/path\") \n\ns3_dir.copy(azure_dir)"},
{"Title": "Do you like `def call() -> None: ...`", "Author": "silently--here", "Content": "So, I wanted to get a general idea about how people feel about giving return type hint of None for a function that doesn't return anything. With the introduction of PEP 484, type hints were introduced and we all rejoiced. Lot of my coworkers just don't get the importance of type hints and I worked way too hard to get everyone onboarded so they can see how incredibly useful it is! After some time I met a coworker who is a fan of typing and use it well... except they write -> None everywhere! Now this might be my personal opinion, but I hate this because it's redundant and not to mention ugly (at least to me). It is implicit and by default, functions return None in python, and I just don't see why should be used. We have been arguing a lot over this since we are building a style guide for the team and I wanted to understand what the general consensus is about this. Even in PEP 484, they have mentioned that should be used for functions and I just find that crazy."},
{"Title": "Portr: Open source self hosted ngrok alternative designed for teams", "Author": "ShiftDefeat", "Content": "https://github.com/amalshaji/portr What my project does? Portr is a tunnelling solution that let's you expose local http/tcp connections to the public internet. Target audience Developers that work with webhooks or callbacks. Or anyone who want to quickly share their dev server with others. Comparison\nMonitor connections, and manage teams and members via the admin dashboard. Watch video\nInspect and replay HTTP requests using portr inspector. Watch video."},
{"Title": "EyeGestures: Opensource eyetracking python library", "Author": "TraditionalDistrict9", "Content": "Hey all!\nWanted to share opensource project for all interested in building interfaces based on eyetracking. What My Project Does: EyeGestures is python library offering e2e eyetracking with blinking detection, and gaze fixation. It provides eye-motion-controlled cursor. Comparison: I have not found other e2e eye tracking library with focus on building interfaces. We offer eye-motion following cursor, with built-in switchable configuration, gaze detection and blinking. Furthermore webAPI provides activation zones, and eye-magnetic buttons to ease user control."},
{"Title": "Better PDF Layout Detection for LLM's + table support", "Author": "serjester4", "Content": "What's the first step to building 90% of AI applications?\nChunking your documents! Unfortunately there's very few libraries for this and most rely on naively splitting text into N characters. You lose so much valuable information hidden in the layout of the document when you do this. If you give an LLM bad inputs, you're going to get bad results. https://github.com/Filimoa/open-parse/ What it does: The library can detect the layout of a PDF, convert to markdown and extract tables into html in one line of code. You can then feed this directly into your vector database or something like LlamaIndex. It does all this while preserving bounding boxes so you can display citations directly to the user."},
{"Title": "Free Review Copies of \"Python Real-World Projects\"", "Author": "entreluvkash", "Content": "Packt has published \"Python Real-World Projects\"\nAs part of our marketing activities, we are offering free digital copies of the book in return for unbiased feedback in the form of a reader review. Here is what you will learn from the book:\nExplore core deliverables for an application including documentation and test cases\nDiscover approaches to data acquisition such as file processing, RESTful APIs, and SQL queries\nCreate a data inspection notebook to establish properties of source data"},
{"Title": "Genuine question: Where should I share my opinion about Python language?", "Author": "HalfAByteIsWord", "Content": "I recently posted my opinions on the import system in Python and how it can be made more intuitive and straightforward. I got some comments, some of them are just snappy as usual and some of them had some suggestions and workarounds. Either way the post got removed, citing that it is not suitable for this sub-reddit. I mean, come on, I cannot talk about Python features in Python sub-reddit? Update: To mods: Thanks for letting me have this conversation. To others who made helpful comments, thank you. Original post: I don't want to recreate the post verbatim here, I don't remember it exactly too. It was basically something like this,"},
{"Title": "The wrong way to speed up your code with Numba", "Author": "itamarst", "Content": "If your NumPy-based code is too slow, you can sometimes use Numba to speed it up. Numba is a compiled language that uses the same syntax as Python, and it compiles at runtime, so it’s very easy to write. And because it re-implements a large part of the NumPy APIs, it can also easily be used with existing NumPy-based code.\nHowever, Numba’s NumPy support can be a trap: it can lead you to missing huge optimization opportunities by sticking to NumPy-style code. In this article I show examples of:"},
{"Title": "Wrote a Python script for downloading images/GIFs from subreddits in bulk.", "Author": "MonsieurKebab", "Content": "What my Project Does\nIt's a program that searches through posts in a specified subreddit and downloads images, gifs etc.\nTarget Audience\nIt's a toy project at this point, but I might extend its functionality if I can find good resources. Maybe even add support for different websites (imgur et al.).\nComparison"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "How to parallelize Pandas with Modin", "Author": "linchpiner", "Content": "Discover the power of Modin in overcoming the performance bottlenecks of Pandas. We'll walk you through how a simple switch can reduce your waiting times and make your workflow smooth and speedy, all without leaving the comfort of Pandas behind. Modin is an active open source project. Take a look to this blog post to see if it is applicable for your code: https://dchigarev.github.io/modin_perf_examples/"},
{"Title": "The Python on Microcontrollers (and Raspberry Pi) Newsletter. Weekly news, subscribe for free", "Author": "HP7933", "Content": "With the Python on Microcontrollers newsletter, you get all the latest information on Python running on hardware in one place! MicroPython, CircuitPython and Python on single Board Computers like Raspberry Pi & many more. The Python on Microcontrollers newsletter is the place for the latest news. It arrives Monday morning with all the week’s happenings. No advertising, no spam, easy to unsubscribe. 10,921 subscribers - the largest Python on hardware newsletter out there. Catch all the weekly news on Python for Microcontrollers with adafruitdaily.com. This ad-free, spam-free weekly email is filled with CircuitPython, MicroPython, and Python information that you may have missed, all in one place!"},
{"Title": "Does anyone actually use PyPy or Cython?", "Author": "Sc0urge_", "Content": "I have been reading a lot about these tools recently and wondered if they are used in production, especially when building a backend with Python. As far as I know, PyPy is not ideal because of its lack of package support, but Cython seems pretty neat."},
{"Title": "UXsim: Network traffic flow simulator in pure Python", "Author": "Balance-", "Content": "Disclaimer: Not my project but a very interesting one I encountered recently UXsim is a free, open-source traffic flow simulator designed for large-scale vehicular transportation simulations, developed purely in Python. Whether you're a researcher, student, or enthusiast in transportation, UXsim offers a comprehensive toolkit for macroscopic and mesoscopic traffic flow simulations. What My Project Does UXsim stands out by providing an easy-to-use Python implementation of standard models for dynamic network traffic flow. It's capable of simulating traffic dynamics in large networks, incorporating elements such as traffic signals, inflow control, route guidance, and congestion pricing. The simulator supports dynamic traffic assignments and comes with features for analyzing and visualizing simulation results, making it highly useful for scientific and educational purposes."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Futurama API written in async Python", "Author": "koldakov", "Content": "I've created a simple API service https://github.com/koldakov/futuramaapi to access Futurama units with async Python + FastAPI + SQLAlchemy (PostgreSQL). I've chosen Hypercorn for a web server to achieve HTTP/2 support - considering I didn't find yet cheap hosting that supports HTTP/2. Heroku doesn't support, render doesn't support. Also it has some code related to GraphQL (I used strawberry). + I didn't find a lot of discussions about Heroku + FastAPI - the problem will be with redirect to https. As default fastapi (starlette) middleware doesn't work with proxies there will be an infinite loop if you try to use . Chain will be: Client https-> Proxy(Hypercorn, for example) http-> fastapi, in that case as you can see the request is secure, but fastapi (starlette) won't understand this and will redirect to https. Here is a simple workaround to support https under proxy:"},
{"Title": "🌈 StreamJoy turns your stream of images into animations, in parallel", "Author": "zethiroth", "Content": "Docs here: https://ahuang11.github.io/streamjoy/ Repo here: https://github.com/ahuang11/streamjoy/tree/main What My Project Does Streamjoy turns your images into animations using sensible defaults for fun, hassle-free creation. It cuts down the boilerplate and time to work on animations, and it's simple to start with just a few lines of code. Target Audience For scientists or hobbyists that want to see something in motion and analyze it! It's still in beta, but would love feedback! Comparison Unlike other libraries, this runs in parallel, and I really like how it can add intros and pauses by specifying keywords!"},
{"Title": "Python open source Projects", "Author": "Rare-Lion1261", "Content": "I'm seeking for python open source project where I can add things , colaborate with a community on building valuable stuff , Any good suggestions please ?"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Pyconf from Philly (Carpool/Hotel)", "Author": "the_ultimate_stoic", "Content": "Anyone going to pyconf from Philly?\nLooking to carpool and possibly get a Airbnb near the spot!\nlmk if anyone wants to join."},
{"Title": "Where are you getting your Python news? (besides right here, of course)", "Author": "wanderingmonster", "Content": "Hello all. I just saw this post about Pandas, which lead to a discussion of Polars being much faster. Polars, which I had never heard about before this morning. This leads me to wonder: where are you all getting your Python news and other information? r/Python obviously, but I fear there are some pipelines or subscriptions for Python news, information about must-have new packages, and the like that I'm currently missing."},
{"Title": "remove background from image using AI in just 5 lines of python code", "Author": "Maleficent_Yak_993", "Content": "I created a python library \"dis-bg-remover\" based off the \"Highly Accurate Dichotomous Image Segmentation (https://arxiv.org/pdf/2203.03041.pdf), whose results are comparable, if not better, to the premium offerings in the market. Explainer video here https://www.youtube.com/watch?v=js7AYKkZvFI"},
{"Title": "Do you make display-tables in Python? - \"The Design Philosophy of Great Tables\"", "Author": "economicurtis", "Content": "The maintainer of `great_tables` released an article about the design philosophy of his package https://posit-dev.github.io/great-tables/blog/design-philosophy/ Curious about your thoughts. What tools do you prefer to use when you need to share a data table based on work you've done in python?"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyPI Support Specialist", "Author": "monorepo", "Content": "PSF Official"},
{"Title": "A solver of Le Compte Est Bon and Le Mot Le Plus Long", "Author": "RRTheGuy", "Content": "Hi, I made a new project called dcdljeu (written in French), a solver for the games Le Compte Est Bon and Le Mot Le Plus Long from the TV Show Des Chiffres Et Des Lettres."},
{"Title": "SQLModel vs native SQL Alchemy ORM for a web backend?", "Author": "Raz_Crimson", "Content": "Hi there\nI was tasked with migrating from mongoDb to PostgreSQL due to the performance issues.\nThe backend is FastAPI-based web server for a mobile APP with a decent amount if CRUD. We also heavily use Pydantic for data validation and the primary carried of data across the service layers Would like to hear opinions from SQLModel users as to how easy it is to use or what kind of pitfalls am i setting myself up by using it. Last post that I could find was years old and even that was not really conclusive. Now SQLAlchemy 2.0 is released and even SQLModel has support for Pydantic V2, so would like some newer thoughts in this topic."},
{"Title": "quickapiclient: Create fully typed declarative API clients quickly and easily", "Author": "martinn404", "Content": "Hi all! I've had an idea for a while around creating a library that would allow you to quickly build new API clients that are fully typed. Last week I finally got around to building it and am keen to see what everyone thinks. What My Project Does A library for creating fully typed declarative API clients quickly and easily. So you could build an API integration with other services very quickly, and in a declarative way. And it would ensure that your request/query params are valid/correct before sending them (avoiding potential errors). As well as making the API response easy to work with, matching your own models rather than trying to work with JSON blobs."},
{"Title": "pipxu - a faster alternative to pipx", "Author": "bulletmark", "Content": "What my project does\npipxu installs Python applications, i.e. Python packages which have one or more executable programs, into independent isolated virtual environments on your system. Each package and it's dependencies are thus insulated from all other applications, and from the system Python. pipxu creates links to application executables in a common directory, which you have in your PATH. Packages are typically sourced from PyPI, the Python Package Index."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "UXsim 1.1.0 released: Network traffic flow simulator gets Multilane support", "Author": "Balance-", "Content": "Version 1.1.0 of UXsim is released, which now supports modeling multilane ways. Main Changes\nAdd support for multilane links. More technically, it is a multilane, single-pipe model where vehicles cannot overtake others. This allows us to set traffic capacity significantly larger while keeping consistency to KW theory.\nSeparate Analyzer class from uxsim.py. This means that uxsim.py now contains only the essential codes for the simulation. It makes it easier for users to understand the simulation logic."},
{"Title": "Automating Python with Google Cloud", "Author": "neb2357", "Content": "I just published a tutorial series on how to automate a Python script in Google Cloud using Cloud Functions and/or Cloud Run. Feedback would be great. Thanks!\nAutomating Python with Google Cloud\nAutomating Python with Google Cloud Functions\nAutomating Python with Google Cloud Run"},
{"Title": "Every dunder method in Python", "Author": "treyhunner", "Content": "For years my training students have been asking me for a list of all the dunder methods. The Python docs don't have such a list, so I compiled my own... after having on my to-do list for years. Every dunder method in Python I realized why it took me so long during when I finally finished compiling the table of all of them... there are over 100 dunder methods in Python! 💯 Edit: I should have said \"the Python docs don't have such a list in a single row-by-row table\". The Data Model page does indeed include a giant \"Special Names\" section and a \"Coroutines\" section which document nearly every special method, but it's quite challenging to skim and not *quite* complete."},
{"Title": "Does it really matter what order you import modules in python?", "Author": "lizziemoon89", "Content": "I am trying to understand why anyone would care whether you import math or numpy first. I am told it is good practise but it just seem pointless to care."},
{"Title": "Python state management", "Author": "Extreme-Acid", "Content": "Hey all, I love what Django has with django-fsm. I require something but without Django, as there is no user interaction with the workflow. All inputs and outputs are either rabbitmq or another api. This is to be a workflow management system. I am looking for state management backed up by database so we can not suffer if a k8s pod dies with all the states in memory. Some of our workflows could take weeks. Is it still best to make this in Django or is there a database backed state management module available? I see pytransitions but I would have to add database logging to it."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Grocery delivery with Python (Company Engineering blog post)", "Author": "svena33", "Content": "Hope that sharing this is allowed here, let me know otherwise.\nI just published a new post on our engineering blog on why and how we’re using Python at Picnic (an online supermarket in the EU). I think it might be interesting for this sub as well. https://picnic.app/careers/python-picnic"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "XZ Vulnerability Anaconda", "Author": "jimtoberfest", "Content": "Is the xz library compromised along with the xz Linux utility? Anaconda seems to auto load this library upon creation of new venvs."},
{"Title": "Creating a GeoTIFF raster XYZ tile service in python with caching capability", "Author": "iamgeoknight", "Content": "Creating a GeoTIFF raster XYZ tile service in python with caching capability"},
{"Title": "EOmaps v8.0 is here!", "Author": "se_pp", "Content": "Hey all, I'm excited to announce that EOmaps v8.0 is now released and that it has been accepted into the PyOpenSci ecosystem! What is it? EOmaps is a pyhton package to visualize and analyze geographical datasets. It's 100% free and open-source! You can find all information you need to install (or contribute 🚀) in the documentation and on GitHub! Check it out and let me know what you think! EOmaps v8.0 brings a lot of updates, fixes and improvements like:\nA switch to BSD-3-Clause License"},
{"Title": "Nava: Python Light-Weight Sound-Player Library", "Author": "sepandhaghighi", "Content": "GitHub Repo: https://github.com/openscilab/nava What My Project Does: Nava is a Python library that allows users to play sound in Python without any dependencies or platform restrictions. It is a cross-platform solution that runs on any operating system, including Windows, macOS, and Linux. Its lightweight and easy-to-use design makes Nava an ideal choice for developers looking to add sound functionality to their Python programs. import time\nfrom nava import play, stop\nsound_id = play(\"alarm.wav\", async_mode=True, loop=False)\ntime.sleep(4)\nstop(sound_id)"},
{"Title": "Makefile Parser for Python", "Author": "Cybasura", "Content": "Hello everyone! I am proud to introduce a Makefile Parser for Python that I think will be useful! the link is Thanatisia/makefile-parser-python As an introduction, I have been using python and been following this subreddit for quite awhile now, but this is my first post Recently, I've been planning a side-project involving the use of Makefiles in Python, and I required the use of a Makefile parser ala json or pyyaml - whereby you would import a Makefile into python as objects/dictionary/lists. Hence, I started searching for a Makefile Parser. The only parser I've found is PyMake(2) which is cool but it hasnt been updated since 2017 from what I recall and that it is more of a CLI utility, so with that in mind, I went about to make it"},
{"Title": "Stockstir - Instantly and easily gather real time stock data from any Python script at no cost", "Author": "PatzEdi", "Content": "Hello! It has been a while since I have made a post about Stockstir, the tool to gather stock information from any script at no cost, written in Python. After a couple months from my last post, I have updated and refined bugs and other issues, as well as added new functions for enhanced usability. The latest version is now 2.1.4. What My Project Does Stockstir is an easy way to instantly gather stock data from any of your Python scripts. Not only that, but it includes other features, such as multi data gathering, anti ban, a fail-safe mechanism, random user agents, and much more. Target Audience"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Load Apple's .numbers Files into Pandas", "Author": "nez_har", "Content": "I recently ran into some challenges while trying to work with Apple's .numbers files on Linux. After a bit of experimentation, I figured out a workflow that simplifies the process. If you're planning to use .numbers files and need to load them into pandas, I've created a tutorial that covers the required dependencies and the steps to follow: https://nezhar.com/blog/load-apple-numbers-files-python-pandas-using-containers/. Has anyone else here worked with .numbers files in Python? I’d love to hear about your experiences or any tips you might have."},
{"Title": "Dask Demo Day: Dask on Databricks, scale embedding pipelines, and Prefect on the cloud", "Author": "dask-jeeves", "Content": "I wanted to share the talks from last month’s Dask Demo Day, where folks from the Dask community give short demos to show off ongoing work. Hopefully this helps elevate some of the great work people are doing.\nLast month’s talks:\n- One trillion row challenge\n- Deploy Dask on Databricks with dask-databricks\n- Deploy Prefect workflows on the cloud with Coiled\n- Scale embedding pipelines (LlamaIndex + Dask)\n- Use AWS Cost Explorer to see the cost of public IPv4 addresses\nRecording on YouTube:\nJoin the next one this Thursday, March 21st, 11am ET"},
{"Title": "Docx2Python 2.10.0 will now extract comments from Word files", "Author": "Shay-Hill", "Content": "access comments with Docx2Python You can access docx comments with the comments attribute of the output DocxContent object. with docx2python('path/to/file.docx') as docx_content:\n    print(docx_content.comments) For each comment, this will return a tuple: (reference_text, author, date, comment_text)"},
{"Title": "No More Cutting in Line: Crafting Fairness in Queues using RQ in Python", "Author": "soap94", "Content": "I was trying to tackle the problem of queue fairness and here's how I solved it."},
{"Title": "Who's going to PyCon US 2024?", "Author": "frocketgaming", "Content": "It's just around the corner. I'll be going on my own so it would be nice to meet up with some people potentially. Who plans to go and what speakers / sessions are you looking forward to?"},
{"Title": "slack-progress-bar: A progress bar for your Slack Bots", "Author": "UnemployedPython", "Content": "I built this after having conceptually designed it in an interview but failed to get the job. Figured I might as well build it. Any thoughts or advice welcome! How My Project Works This progress bar connects with your Slack Bot account via tokens to send you a message as something is loading. It updates the progress bar as called by the user to edit the message on Slack, always keeping you up to date on how progress is going (ex. Used in an application that's loading something, running tests, etc.) Target Audience This can be used in a professional setting where you want to notify employees of certain progress. Also can be used for personal projects and / or design teams in universities that use Slack."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Serverless Python Support in Cloudflare Workers", "Author": "TheMadFratter", "Content": "Today Cloudflare has announced support for Python in their Clouldflare Workers serverless environment. This allows Python to be run at the edge on their global network using a combination of Pyodine and the V8 runtime. Announcement can be found on the Cloudflare Blog: https://blog.cloudflare.com/python-workers"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Type-Level Programming: a POC", "Author": "Kiuhnm", "Content": "While Python doesn't explicitly support Type-Level Programming, I've had some success with it. I think this may be of interest to the Python community, so I'm sharing a POC (Proof Of Concept) I've written. This POC is a statically typed list that encodes its length in its type so that, for instance, when you concatenate two lists, the result has the correct length, all done at type-checking time. Read more on GitHub"},
{"Title": "Security Code Challenge for Developers & Ethical Hackers - Damn Vulnerable RESTaurant API", "Author": "theowni", "Content": "Security Code Challenge for Developers & Ethical Hackers – Damn Vulnerable RESTaurant A FastAPI based intentionally vulnerable web application teaching the most common security vulnerabilities in API through a dedicated game. Damn Vulnerable RESTaurant is operated by a mysterious Chef who has discovered that threat actors were able to compromise his restaurant’s API and the underlying system. He suspects that a competing restaurant located across the street might be involved in this attack! The goal of the challenge is to identify and fix vulnerabilities based on provided hints. During this adventure, you will have the opportunity to investigate how the attack was carried out and fix security issues to safeguard the application. Moreover, you can uncover the identity of the person behind the attack by the end of this adventure."},
{"Title": "How To Add Multiple Pages to NiceGUI", "Author": "bitdoze", "Content": "Created an article and a video that will help beginners to NiceGUI add multiple pages to NiceGUI to better structure the app.\nhttps://www.bitdoze.com/nicegui-pages/"},
{"Title": "Open Jupyter Notebooks in Kaggle? (from GitHub)", "Author": "pbeens", "Content": "I have a repo in GitHub with Jupyter Notebooks for students. On each notebook I have a link where the student can open the notebook in Colab (by changing the URL from https://github.com/ to https://githubtocolab.com/). The problem is that some school boards have Colab blocked. Is there a similar technique I can use to open the notebooks in Kaggle? Are there other sites I should be considering? Thanks!"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "does anyone know about an alternative to aeneas that works on python 3.12.1?", "Author": "jonnisaesipylsur", "Content": "i need some python library that can automatically generate a synchronization map between a list of text fragments and an audio file containing the narration of the text. aeneas does exactly that except it doesnt work on higher than 2.7 with windows."},
{"Title": "pointers.py being added to the standard library!", "Author": "ZeroIntensity", "Content": "As of PEP 4124 being accepted, the infamous pointers.py will be added to Python's standard library in 3.13! To quote Guido van Rossum's take on adding this, \"Why the hell not?\" This will also introduce pointer literals, the sizeof operator, and memory errors! from pointers import malloc\n\nptr = &\"spam\"  # Pointer literal\nprint(*ptr)\nmem = malloc(?\"hello\")  # New sizeof operator\nprint(*mem)  # MemoryError: junk 13118820 6422376 4200155 at 0x7649f65a9670\n# MemoryWarning: leak at 0x7649f65a9670"},
{"Title": "btstrm: Torrent Streaming Program for Linux", "Author": "hurleymjohnston", "Content": "I'll disclaim: I'm not a programmer but a litterateur, my code may be quite bad and in some (some!) places written with LLMs - but it works as should be and its simplicity makes me admire Python. // The beginning of lyric digression For the last 7 years I've been writing scripts in bash. I've accumulated quite a lot of them, I would say that it became a kind of escapism for me, in anxious moments of my life, when I was too lazy to do something on my own, I prefer to spend half a night writing a script, so that I could press one button and - bang - everything would work by itself. At one point, Bash became not enough. Despite the fact that it became convenient and fast to write in it, in fact, it works slowly enough to create some serious projects. And at one point, my friend encouraged me to use Python, luckily he knows Python and I had an idea that came to life. So now I use my Python program literally every day."},
{"Title": "PyOhio CFP open through May 20", "Author": "catherinedevlin", "Content": "Call for Proposals open through May 20 PyOhio is a fun, friendly, free general Python conference now in its Nth year (N is large). This year it will be Sat & Sun Jul 27-28, 2024 at The Westin Cleveland Downtown in Cleveland, OH (its first year outside Columbus)! Hope to see you there!"},
{"Title": "Python isn't dramatic enough", "Author": "treyhunner", "Content": "Ever wished your Python interpreter had the dramatic feeling of a 300 baud modem connection? Today there's a solution: pip install dramatic dramatic on PyPI dramatic on GitHub What My Project Does All text output by Python will print character-by-character. It works as a context manager, as a decorator, or as a simple function call. Other features include a dramatic REPL, ability to run specific Python modules/scripts dramatically, and a --max-drama argument to make all Python programs dramatic all the time. Target Audience Those seeking amusement. Comparison Just like Python usually runs, but with the feeling that you're inside a text-based adventure game."},
{"Title": "Type-safe & fast embedded vector database for RAG | OasysDB v0.3.0", "Author": "edwinkys", "Content": "Hey all! In this past few months, I've been working on OasysDB, an embedded vector database inspired by SQLite. OasysDB is written in Rust with interoperability to Python which offers high memory and type safety with high performance. What My Project Does OasysDB helps perform RAG with local AI models or any other small to medium size vector search operation . One of the perfect use case to use OasysDB is if you're building a LLM-based desktop app that doesn't require network connection. Why use OasysDB"},
{"Title": "\"Mark as read\" plugin for mkdocs-material", "Author": "br2krl", "Content": "Hi everyone, I developed a simple plugin for mkdocs-material. What My Project Does: In simple terms, this plugin allows users to mark pages as read and it shows a checkmark icon in navigation bar for the pages that was marked as read.\nThe plugin adds a button under the page content and when users clicks, it stores read date in localStorage. It shows a checkmark icon in the navigation panels for the pages that marked as read. It also shows a \"document updated\" icon if the pages that marked as read got an update. Target Audience:"},
{"Title": "geojson-shave: a command-line tool for reducing the file size of GeoJSON files", "Author": "Ok-Frosting7364", "Content": "Source code: https://github.com/ben-n93/geojson-shave What my Project Does\nReduces the file size of GeoJSON files by truncating coordinates to the specified decimal place, eliminating whitespace and (optionally) replacing the property key with an empty dictionary. Target Audience\nFor anyone that works with geospatial data (and specifically GeoJSON files) - so data analysts, data engineers, data journalists, GIS professionals, etc. Comparison There is a website that reduces the size of GeoJSON files, however it didn't work for me when I tested it. The advantage of my tool is that you can run it from the command-line and don't need an Internet connection."},
{"Title": "The Biggest Hurdle in Learning Python", "Author": "shankarj68", "Content": "What is your biggest hurdle in learning the Python programming language? What specific area is hard for you to understand? Edit: Thank you to all the people who commented and discussed various challenges. Here are the obvious ones:\nInstallation on various OS, along with which packages to use for installation (Pip, conda).\nBootcamp tutorials seem to be boring and repetitive. There is hardly a resource available that mimics real-world scenarios."},
{"Title": "An Automated Bash Script for Python Virtual Environment Management", "Author": "SAV_NC", "Content": "Hello r/Python, What My Project Does: This script is designed to automate the management of Python virtual environments and dependencies, streamlining the setup process for Python projects. It facilitates a more efficient workflow for managing project-specific environments and package installations, especially in a professional development setting. Target Audience: This tool is particularly beneficial for developers and IT professionals looking for a systematic approach to environment management. It is designed to integrate into existing workflows, providing a reliable and consistent method for managing Python environments and dependencies."},
{"Title": "Drawpyo: create Draw.io diagrams with Python", "Author": "MerrimanIndustries", "Content": "This is a project that I initially created in a weekend for my own use after I was surprised to find out there was no easy way to generate Draw.io diagrams in Python. I'm a huge fan of Draw.io for documentation since it's free, lightweight, and the files are plaintext. After building basic initial functionality I decided to use this as a project to make a more mature Python library out of something I initially wrote for myself quick n dirty. I refactored (a lot), wrote docs, tests, build logic, etc. There's still a lot to do to make it as robust as it could be but I think it's good enough to share!"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "The Best* Python Cheat Sheet", "Author": "kmhnz", "Content": "A dense Python cheat sheet with just what you need.\nDesign principles:\n• Focus on Python core\n• Comprehensive but selective (Just what you need)\n• Densely packed\n• Well-linked\n• Linkable\n• Responsive\n• Printable\nIssues and feedback are tracked at the .\n*It may not be the best Python cheat sheet, but it aspires to be."},
{"Title": "Analyzing Python Malware found in an open-source project", "Author": "42-is-the-number", "Content": "Hi all, I've recently found a Python Malware in a FOSS tool that is currently available on GitHub. I've written about how I found it, what it does and who the author is. The whole malware analysis is available in form of an article. I would appreciate any and all feedback."},
{"Title": "Python Inner class feature", "Author": "koldakov", "Content": "test.py import sys\nsys.setrecursionlimit(4)\nclass Foo:\n    class Foo:\n        foo = 1"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "ipython-sql has been forked", "Author": "databot_", "Content": "Hi r/Python, In case you didn't know, ipython-sql has been forked. The new project has fixed some long-standing issues and added a bunch of new capapabilities:\nSplitting long SQL queries in multiple cells\nPlotting large-scale datasets\nMore flexibility to open database connections\nThe API remains the same, you can replace projects that depend on ipython-sql with jupysql: pip install jupysql"},
{"Title": "AnyPathLib - A unified PathLib-like API for cloud storages", "Author": "kfirgold99", "Content": "Hi everybody, I'm happy to share AnyPathLib 🛣️, a pip package I created to simplify access to different storage resources - S3, Azure, and local storage. What My Project Does: Basically, instead of writing custom code to handle the different storage resources using the SDK (boto3, azure-sdk), you can now just use AnyPathLib: from anypathlib import AnyPath\n  \n\n  \n# Create an AnyPath instance for a local file\n  \n\n  \nlocal_file = AnyPath(\"/path/to/local/file.txt\")\n  \n\n  \n# Create an AnyPath instance for an S3 object\n  \n\n  \ns3_file = AnyPath(\"s3://bucket/path/to/object.txt\")\n  \n\n  \n# Copy a file from local to S3\n  \n\n  \nlocal_file.copy(s3_file)\n  \n\n  \n# Copy a directory from S3 to Azure\n  \n\n  \ns3_dir = AnyPath(\"s3://bucket/path/to/dir\") \n  \nazure_dir = AnyPath(\"https://account_name.blob.core.windows.net/container_name/path\") \n\ns3_dir.copy(azure_dir)"},
{"Title": "🚀 Goprox: Simplify Google searches with automatic proxy handling and user-agent selection.", "Author": "SwiftGloss", "Content": "What My Project Does: Goprox is a Python module that revolutionizes Google searches by automatically checking and using proxies, eliminating the need for user input. With Goprox, users can enjoy seamless searching without worrying about proxy configuration or getting blocked. Target Audience: Goprox is perfect for developers seeking to automate Google searches for web scraping, automation, or data collection tasks. It's also ideal for anyone who desires a hassle-free search experience without the hassle of manual proxy management. Comparison: Compared to existing alternatives, Goprox stands out with its focus on automatic proxy handling. Unlike other solutions that require manual proxy input, Goprox streamlines the process by autonomously managing proxies for each search query."},
{"Title": "Portr: Open source self hosted ngrok alternative designed for teams", "Author": "ShiftDefeat", "Content": "https://github.com/amalshaji/portr What my project does? Portr is a tunnelling solution that let's you expose local http/tcp connections to the public internet. Target audience Developers that work with webhooks or callbacks. Or anyone who want to quickly share their dev server with others. Comparison\nMonitor connections, and manage teams and members via the admin dashboard. Watch video\nInspect and replay HTTP requests using portr inspector. Watch video."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Better PDF Layout Detection for LLM's + table support", "Author": "serjester4", "Content": "What's the first step to building 90% of AI applications?\nChunking your documents! Unfortunately there's very few libraries for this and most rely on naively splitting text into N characters. You lose so much valuable information hidden in the layout of the document when you do this. If you give an LLM bad inputs, you're going to get bad results. https://github.com/Filimoa/open-parse/ What it does: The library can detect the layout of a PDF, convert to markdown and extract tables into html in one line of code. You can then feed this directly into your vector database or something like LlamaIndex. It does all this while preserving bounding boxes so you can display citations directly to the user."},
{"Title": "Astrologers have announced the month of Python in Centrifugal Labs: real-time libraries and tutorial", "Author": "FZambia", "Content": "Hello Python community. My name is Alexander – I am the author of Centrifugo project. It's a self-hosted real-time messaging server (alternative to Ably, Pusher, Pubnub services). It was written in Python originally, but then migrated to Go. But it's fully language-agnostic and helps many projects written in Python (and in Django in particular) to add real-time updates to the application. Centrifugo is quite fast, scales well, has super-efficient integration with Redis (~million of publications per second, and more with Redis sharding/Redis Cluster)."},
{"Title": "Genuine question: Where should I share my opinion about Python language?", "Author": "HalfAByteIsWord", "Content": "I recently posted my opinions on the import system in Python and how it can be made more intuitive and straightforward. I got some comments, some of them are just snappy as usual and some of them had some suggestions and workarounds. Either way the post got removed, citing that it is not suitable for this sub-reddit. I mean, come on, I cannot talk about Python features in Python sub-reddit? Update: To mods: Thanks for letting me have this conversation. To others who made helpful comments, thank you. Original post: I don't want to recreate the post verbatim here, I don't remember it exactly too. It was basically something like this,"},
{"Title": "I forked Newspaper3k, fixed bugs and improved its article parsing performance - Newspaper4k package", "Author": "gringo6969", "Content": "Hi all! The Newspaper3k is abandoned (latest release in 2018) without any upgrades and bugfixing. I forked it, and imported all open Issues into my repo. The first two releases (0.9.0 and 0.9.1) were mainly bugfixes and bringing the project more up to date and compatible with python > 3.6 (I started from version 0.9.0 😁). In the latest version, 0.9.3 I not only almost reworked the whole News article parsing process, but also added a lot of new supported languages (around 40 new languages) Repository: https://github.com/AndyTheFactory/newspaper4k Documentation:"},
{"Title": "Wrote a Python script for downloading images/GIFs from subreddits in bulk.", "Author": "MonsieurKebab", "Content": "What my Project Does\nIt's a program that searches through posts in a specified subreddit and downloads images, gifs etc.\nTarget Audience\nIt's a toy project at this point, but I might extend its functionality if I can find good resources. Maybe even add support for different websites (imgur et al.).\nComparison"},
{"Title": "We're building a Large Action Model (LAM) project that can do any task for you using Python!", "Author": "nobilis_rex_", "Content": "Hey guys! My friend and I are building Nelima. It's basically a Large Language Model designed to take actions on your behalf with natural language prompts and theoretically automate anything. For example, it can schedule appointments, send emails, check the weather, and even connect to IoT devices to let you command it – you can ask it to publish a website or call an Uber for you! You can integrate your own custom actions, written in Python, to suit your specific needs, and layer multiple actions to perform more complex tasks. When you create these actions or functions, it contributes to the overall capabilities of Nelima, and everyone can now invoke the same action. Right now, it's a quite limited in terms of the # of actions it can do but we're having fun building a few :)"},
{"Title": "How to parallelize Pandas with Modin", "Author": "linchpiner", "Content": "Discover the power of Modin in overcoming the performance bottlenecks of Pandas. We'll walk you through how a simple switch can reduce your waiting times and make your workflow smooth and speedy, all without leaving the comfort of Pandas behind. Modin is an active open source project. Take a look to this blog post to see if it is applicable for your code: https://dchigarev.github.io/modin_perf_examples/"},
{"Title": "Is this project worth the time and effort: Camera to Keyboard?", "Author": "mnvoh", "Content": "EDIT: Since there are a lot of upvotes on that comment, yes, this is about seeking strangers' validations. But we're all validation seekers. For instance, we all need someone's validation to make a living (boss, customers, etc.) Your boss ain't gonna tell you \"god damn boy, you suck at your job, here take my money\". But in this case, validation seeking is kind of a broad term, let's use something more specialized like Market Research 😉. Also, thanks for all your comments and inputs. Hello everyone I've been working on this project for the past 3 weeks, and I want people's opinions to determine how much time I should invest in it."},
{"Title": "Does anyone actually use PyPy or Cython?", "Author": "Sc0urge_", "Content": "I have been reading a lot about these tools recently and wondered if they are used in production, especially when building a backend with Python. As far as I know, PyPy is not ideal because of its lack of package support, but Cython seems pretty neat."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Futurama API written in async Python", "Author": "koldakov", "Content": "I've created a simple API service https://github.com/koldakov/futuramaapi to access Futurama units with async Python + FastAPI + SQLAlchemy (PostgreSQL). I've chosen Hypercorn for a web server to achieve HTTP/2 support - considering I didn't find yet cheap hosting that supports HTTP/2. Heroku doesn't support, render doesn't support. Also it has some code related to GraphQL (I used strawberry). + I didn't find a lot of discussions about Heroku + FastAPI - the problem will be with redirect to https. As default fastapi (starlette) middleware doesn't work with proxies there will be an infinite loop if you try to use . Chain will be: Client https-> Proxy(Hypercorn, for example) http-> fastapi, in that case as you can see the request is secure, but fastapi (starlette) won't understand this and will redirect to https. Here is a simple workaround to support https under proxy:"},
{"Title": "What’s a script that you’ve written that you still use frequently?", "Author": "HiT3Kvoyivoda", "Content": "Mine is a web scraper. It’s only like 50 lines of code. It takes in a link, pulls all the hyperlinks and then does some basic regex to pull out the info I want. Then it spits out a file with all the links. Took me like 20 minutes to code, but I feel like I use it every other week to pull a bunch of links for files I might want to download quickly or to pull data from sites to model."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Alternative Queries: Typed and Reusable Handcrafted SQL", "Author": "baluyotraf", "Content": "Hello! It's still early in development, but I just want to know if people are interested. What My Project Does I created a library to integrate Pydantic type checking for handwritten SQL queries. It also allows you to test the types, and create nested queries easily. Alternative Queries Target Audience We had a project recently were we had to use handwritten SQL and managing the parameters and reusing queries was quite a hassle. So I'm planning to use this on my production projects moving forward. Comparison I would say in terms of usage, it's like Pydantic + SqlParams, but only with the python default formatting."},
{"Title": "remove background from image using AI in just 5 lines of python code", "Author": "Maleficent_Yak_993", "Content": "I created a python library \"dis-bg-remover\" based off the \"Highly Accurate Dichotomous Image Segmentation (https://arxiv.org/pdf/2203.03041.pdf), whose results are comparable, if not better, to the premium offerings in the market. Explainer video here https://www.youtube.com/watch?v=js7AYKkZvFI"},
{"Title": "Finite Element Analysis for Continuum Mechanics of Solid Bodies (FElupe)", "Author": "adtzlr", "Content": "Hi, I'd like to introduce to you my open-source FEA package FElupe, available on GitHub. Its target audience is typically an engineer, e.g. in the field of mechanical or biomedical engineering. It is designed to be both flexible for scientifc research as well as easy-to-use for industry-related problems. Packages with similar scopes are e.g. scikit-fem and Fenics(x). FElupe is a Python 3.8+ 🐍 finite element analysis package 📦 focussing on the formulation and numerical solution of nonlinear problems in continuum mechanics 🔧 of solid bodies 🚂. Its name is a combination of FE (finite element) and the german word Lupe 🔍 (magnifying glass) as a synonym for getting an insight 📖 how a finite element analysis code 🧮 looks like under the hood 🕳️."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Text extraction lib", "Author": "TraditionalAlps4337", "Content": "I created a simple tool for extracting text from PDF, EPUB, TXT, and DOCX files.It is mainly for personal use, but I would really appreciate a feedback https://github.com/KirillAn/extractText/tree/main"},
{"Title": "SQLModel vs native SQL Alchemy ORM for a web backend?", "Author": "Raz_Crimson", "Content": "Hi there\nI was tasked with migrating from mongoDb to PostgreSQL due to the performance issues.\nThe backend is FastAPI-based web server for a mobile APP with a decent amount if CRUD. We also heavily use Pydantic for data validation and the primary carried of data across the service layers Would like to hear opinions from SQLModel users as to how easy it is to use or what kind of pitfalls am i setting myself up by using it. Last post that I could find was years old and even that was not really conclusive. Now SQLAlchemy 2.0 is released and even SQLModel has support for Pydantic V2, so would like some newer thoughts in this topic."},
{"Title": "Introducing ocrtoolkit: Your Go-To OCR Package", "Author": "ajkdrag_", "Content": "Hey Reddit community! I'm excited to present ocrtoolkit, a powerful OCR package designed to simplify your workflow and elevate your OCR tasks! What My Project Does If you've ever found yourself grappling with complex boilerplate code while tackling OCR-related challenges, you're in luck. ocrtoolkit streamlines the entire OCR process, offering intuitive wrappers for tasks such as image file handling, model execution, result parsing, and much more. Let's delve into the core features:"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "PyBackport: Use instances from newer python releases", "Author": "tan_tata_chan", "Content": "What My Project Does PyBackport holds serves three purposes:\nUse instances from newer python releases in older python versions. For example, using StrEnum (new in python 3.11) in python 3.9\nEnable experimental unreleased classes. For example, define new enums where members are tuples with TupleEnum\nProvide support to commonly used constants. For example, PyBackport allows to import and use to avoid re-defining constant color codes in every new project."},
{"Title": "What's the state of gradual typechecking in Python?", "Author": "messedupwindows123", "Content": "I've been using Ruby with Sorbet for a long time. There are some pain points, and some errors that it misses, but in generally it's a really nice development tool. I can immediately look up the types of different variables, or method signatures. I also get (nearly) immediate feedback in Vim, if I write a function with an obvious type error. Even though typing is \"gradual\", it catches a lot more problems than you would expect. It also is pretty easy to migrate a file to be type-checked, as long as your code isn't too magical. I like it because, tbh, if you can't encode your idea into the type system, you're probably doing something that another person will struggle to understand."},
{"Title": "Automating Python with Google Cloud", "Author": "neb2357", "Content": "I just published a tutorial series on how to automate a Python script in Google Cloud using Cloud Functions and/or Cloud Run. Feedback would be great. Thanks!\nAutomating Python with Google Cloud\nAutomating Python with Google Cloud Functions\nAutomating Python with Google Cloud Run"},
{"Title": "Distributing simple handy scripts for Windows - mouse-startable AND editable (the tricky one-liner)", "Author": "galkinvv", "Content": "In short: here is the hacky 2-line header that makes any python script a clickable batch file\n(assuming bundled python in a subfolder) @classmethod # 2>nul & (if not exist \"%~dp0\\python64-win\\python.exe\" (echo Fatal python64-win\\python.exe not found & pause) else (title %~f0 & \"%~dp0\\python64-win\\python.exe\" \"%~f0\" %*)) & exit /B & # noqa: E501\ndef __unused(): \"fake function to help writing header that allows executing same file as python and batch\"\n\n# Normal script starts here"},
{"Title": "Python state management", "Author": "Extreme-Acid", "Content": "Hey all, I love what Django has with django-fsm. I require something but without Django, as there is no user interaction with the workflow. All inputs and outputs are either rabbitmq or another api. This is to be a workflow management system. I am looking for state management backed up by database so we can not suffer if a k8s pod dies with all the states in memory. Some of our workflows could take weeks. Is it still best to make this in Django or is there a database backed state management module available? I see pytransitions but I would have to add database logging to it."},
{"Title": "Introducing, Taipy-Chess, A chess visualization tool, based on 20,000 games", "Author": "KorieDrakeChaney", "Content": "Taipy-Chess\nWhat my project does\nTaipy-Chess, is a chess visualization tool, based on 20,000 games.You can see all the games, the openings they played, opponents, top played openings and most successful openings. You can see heatmaps and charts on the data. This app was built using the taipy framework for easy data analysis and visualization."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Chat with your friends within your (Mac & Linux) Terminal | Textual | Simple & Easy to use", "Author": "Plastic-Payment-934", "Content": "Toschat !What My Project Does?\na lightweight python chat app within your terminal with simple UI and it's built on top of Textual framework. What you can do: - Create a new account - Add your friends to your contact - and chat!\nTarget Audience\nIt's my hobby project to improve my python knowledge but everyone can install and use it. All data store in a live server with Django framework."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Creating a GeoTIFF raster XYZ tile service in python with caching capability", "Author": "iamgeoknight", "Content": "Creating a GeoTIFF raster XYZ tile service in python with caching capability"},
{"Title": "Designing a Pure Python Web Framework", "Author": "Pleasant-Cow-3898", "Content": "From the Article:\nThis provides a good overview of how Reflex works under the hood. TLDR:\nUnder the hood, Reflex apps compile down to a React frontend app and a FastAPI backend app. Only the UI is compiled to Javascript; all the app logic and state management stays in Python and is run on the server. Reflex uses WebSockets to send events from the frontend to the backend, and to send state updates from the backend to the frontend. Full post: https://reflex.dev/blog/2024-03-21-reflex-architecture/#designing-a-pure-python-web-framework"},
{"Title": "Introducing pixi's multiple environments implementation", "Author": "Accomplished-Treat85", "Content": "Link to Blog post: https://prefix.dev/blog/introducing_multi_env_pixi Pixi is a package manager that allows development using the conda & pypi ecosystem. Effortlessly switch between CUDA, CPU and other specialized software environments for maximum native performance and test against multiple versions of Python🐍."},
{"Title": "Makefile Parser for Python", "Author": "Cybasura", "Content": "Hello everyone! I am proud to introduce a Makefile Parser for Python that I think will be useful! the link is Thanatisia/makefile-parser-python As an introduction, I have been using python and been following this subreddit for quite awhile now, but this is my first post Recently, I've been planning a side-project involving the use of Makefiles in Python, and I required the use of a Makefile parser ala json or pyyaml - whereby you would import a Makefile into python as objects/dictionary/lists. Hence, I started searching for a Makefile Parser. The only parser I've found is PyMake(2) which is cool but it hasnt been updated since 2017 from what I recall and that it is more of a CLI utility, so with that in mind, I went about to make it"},
{"Title": "UFO Tools- functional programming in python", "Author": "houseofleft", "Content": "I shared a \"monads in python library\" a little while back on here- since then I've been toying with and expanding things out into a more general project for helping functional programming patterns in python. [I had (am having) a bunch of fun making this - thought I'd share here!](https://github.com/benrutter/ufo-tools) What my project does: A simple library with utilities for functional programming in Python.\nTarget Audience: It's meant for use in actual production contexts, but it's still in a very early and experimental phase. It's probably most helpful right now as a learning resource."},
{"Title": "Load Apple's .numbers Files into Pandas", "Author": "nez_har", "Content": "I recently ran into some challenges while trying to work with Apple's .numbers files on Linux. After a bit of experimentation, I figured out a workflow that simplifies the process. If you're planning to use .numbers files and need to load them into pandas, I've created a tutorial that covers the required dependencies and the steps to follow: https://nezhar.com/blog/load-apple-numbers-files-python-pandas-using-containers/. Has anyone else here worked with .numbers files in Python? I’d love to hear about your experiences or any tips you might have."},
{"Title": "List of Python Libraries and Resources", "Author": "Basajaun-Eidean", "Content": "Hello r/python!\nI've been compiling a list of Python libraries and resources that I've found useful across various projects. I thought it would be beneficial to share this collection with the community, so I've put together a repository for easy access and reference.\nYou're welcome to check it out here: https://github.com/geru-scotland/pylib-atlas. If you find it useful, please consider starring it for future reference!\nYour feedback and contributions to enhance this collection are also highly appreciated.\nThank you!"},
{"Title": "Code type checks but then `TypeError`s", "Author": "Kiuhnm", "Content": "Have you noticed that Python's static type system is unsound? Look at this code: from typing import overload\n\n@overload\ndef f(x: int) -> str: ...\n@overload\ndef f(x: str) -> int: ...\ndef f(x: int | str) -> int | str:\n    match x:\n        case int():\n            return 1\n        case str():\n            return 'a'\n\nprint('a' + f(1))\nprint(1 + f('a'))"},
{"Title": "No More Cutting in Line: Crafting Fairness in Queues using RQ in Python", "Author": "soap94", "Content": "I was trying to tackle the problem of queue fairness and here's how I solved it."},
{"Title": "retry-later: Retry your functions in the background without stopping the flow of execution", "Author": "Free_Let_8315", "Content": "I was working on a project that needed to send an email for confirmation. I didn't want to wait for the function to complete and retry if it failed, since I could verify from the database later and retry again. To solve this issue, I created a decorator for my personal use but then I decided to create a small library out of it in case it can help others. The decorator @retry_later() when used with your function, will retry your function in the background without stopping the flow of execution. Only use it with functions for which you don't need an immediate return value. In case your function stores the state in the database or somewhere else, this is for you!"},
{"Title": "I made a free easy-to-use toast notification library for PyQt and PySide", "Author": "niklashnng", "Content": "Hey guys, since I couldn't find any good libraries for showing modern-looking toast notifications in PyQt, I made one myself. What My Project Does: It supports showing multiple toasts at the same time, queueing of toasts, 6 different positions, multiple screens and much more. Since it's developed with QtPy, an abstraction layer for multiple versions of PyQt and PySide, you can use it with PyQt5, PyQt6, PySide2, and PySide6. Also, basically anything can be completely customized and it's extremely easy to use. Target Audience: This is useful for any Python developer who is working with PyQt or PySide and wants to display clean and modern-looking toast nofifications easily."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Who's coming to PyCon Italia this year?", "Author": "patrick91it", "Content": "Hey folks! Is anyone of you attending this year PyCon Italia? I'm one of the organisers and I'd love to connect to new people this year 😊 See you there! 🐍✨"},
{"Title": "Type-Level Programming: a POC", "Author": "Kiuhnm", "Content": "While Python doesn't explicitly support Type-Level Programming, I've had some success with it. I think this may be of interest to the Python community, so I'm sharing a POC (Proof Of Concept) I've written. This POC is a statically typed list that encodes its length in its type so that, for instance, when you concatenate two lists, the result has the correct length, all done at type-checking time. Read more on GitHub"},
{"Title": "Prime Number Visualization", "Author": "Aaris_Kazi", "Content": "I tried to visualize the prime numbers in polar coordinates. This project was inspired by 3Blue1Brown channel to understand the relations. https://github.com/Aaris-Kazi/prime-visualization/blob/main/Snapshots/whole.gif To check more try to hit the link source code"},
{"Title": "Open Jupyter Notebooks in Kaggle? (from GitHub)", "Author": "pbeens", "Content": "I have a repo in GitHub with Jupyter Notebooks for students. On each notebook I have a link where the student can open the notebook in Colab (by changing the URL from https://github.com/ to https://githubtocolab.com/). The problem is that some school boards have Colab blocked. Is there a similar technique I can use to open the notebooks in Kaggle? Are there other sites I should be considering? Thanks!"},
{"Title": "does anyone know about an alternative to aeneas that works on python 3.12.1?", "Author": "jonnisaesipylsur", "Content": "i need some python library that can automatically generate a synchronization map between a list of text fragments and an audio file containing the narration of the text. aeneas does exactly that except it doesnt work on higher than 2.7 with windows."},
{"Title": "Today I’m releasing PyBoy v2.0.0! A Game Boy emulator written in Python, focused on AI", "Author": "baekalfen", "Content": "Almost 5 years ago, I released PyBoy v1.0.0 to the public, and it's been incredible to see what people have used it for. Things have changed a lot since then, and you might even have seen the viral video by Peter Whidden, who created an AI to play Pokémon using PyBoy: https://www.youtube.com/watch?v=DcYLT37ImBY I've kept the API stable for all this time, and piled up improvements that I wanted to make. So the time has come for PyBoy v2.0.0 with a new and improved API. The hope is that the new API will be much more ergonomic to use, and still feel familiar to existing users."},
{"Title": "PyOhio CFP open through May 20", "Author": "catherinedevlin", "Content": "Call for Proposals open through May 20 PyOhio is a fun, friendly, free general Python conference now in its Nth year (N is large). This year it will be Sat & Sun Jul 27-28, 2024 at The Westin Cleveland Downtown in Cleveland, OH (its first year outside Columbus)! Hope to see you there!"},
{"Title": "Brain Tumor Classification using Deep learning [project]", "Author": "Feitgemel", "Content": "Welcome to Brain tumor beginner tutorial, where we delve into world of CNNs (Convolutional Neural Networks) and their groundbreaking applications in image classification and brain tumor detection. This is a simple tutorial convolutional neural network tutorial that demonstrates how to brain tumor in a dataset of images. We will build and train a model using CNN and see the model accuracy & loss, and then we will test and predict a tumor using new images. Here is a link to the Github Repo: https://youtu.be/-147KGbGI3g Enjoy Eran #cnnforimageclassification #cnnmachinelearningmodel #cnnml #deeplearningbraintumorclassification #aidetectbraintumor"},
{"Title": "Match statement: wish list", "Author": "Kiuhnm", "Content": "Without a doubt, the match statement is very powerful, but there are a few annoyances or missing features, IMO. Type Aliases Type aliases are not supported, so this won't work: NewType1: TypeAlias = ...\ntype NewType2 = ...\n\nmatch x:\n    case NewType1():\n        ...\n    case NewType2():\n        ..."},
{"Title": "flect - Pure Python full-stack framework", "Author": "UnhappyActivity6133", "Content": "What is flect? flect is a Python framework designed for building full-stack web applications. By leveraging Pydantic models in the backend to correspond with React components in the frontend, flect enables developers to quickly craft interactive and visually appealing user interfaces using Python. Key Features\nFast Development: Empowers writing your entire application in Python, offering a seamless integration between backend logic and frontend UI."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "JSON Serialization", "Author": "Realistic-Sea-666", "Content": "I have been using more and more of Python over the past few weeks because I got sick of JS. When I asked a programmer friend of mine who uses JS religiously what he thought about using Python for web backends, he told me that it would be slow because of JSON serialization. I spent some time researching this, but couldn’t find anything decisive that explained why JSON serialization would be faster in JS. The answers I found said a few things:\nV8 is optimized for this because it’s part of the JS standard"},
{"Title": "Is backend development the most common career path", "Author": "Grandtosh", "Content": "Maybe i worded my title wrong. Taking a look at job listings involving python, backend development seems to be the only listing I come across. Why is that the case ? Are they no other career paths outside backend dev for python developers ?"},
{"Title": "Ralf Gommers, leading maintainer of NumPy, on the release of NumPy 2.0", "Author": "rubiesordiamonds", "Content": "We spoke with Ralf about the upcoming 2.0 release, the first major release in 16 years. Ralf has a great story as to how he got into the open source community in general, and NumPy and SciPy in particular. You can check it out here: https://open.substack.com/pub/onceamaintainer/p/once-a-maintainer-ralf-gommers?r=2773u5&utm_campaign=post&utm_medium=web&showWelcomeOnShare=true"},
{"Title": "\"Mark as read\" plugin for mkdocs-material", "Author": "br2krl", "Content": "Hi everyone, I developed a simple plugin for mkdocs-material. What My Project Does: In simple terms, this plugin allows users to mark pages as read and it shows a checkmark icon in navigation bar for the pages that was marked as read.\nThe plugin adds a button under the page content and when users clicks, it stores read date in localStorage. It shows a checkmark icon in the navigation panels for the pages that marked as read. It also shows a \"document updated\" icon if the pages that marked as read got an update. Target Audience:"},
{"Title": "An Automated Bash Script for Python Virtual Environment Management", "Author": "SAV_NC", "Content": "Hello r/Python, What My Project Does: This script is designed to automate the management of Python virtual environments and dependencies, streamlining the setup process for Python projects. It facilitates a more efficient workflow for managing project-specific environments and package installations, especially in a professional development setting. Target Audience: This tool is particularly beneficial for developers and IT professionals looking for a systematic approach to environment management. It is designed to integrate into existing workflows, providing a reliable and consistent method for managing Python environments and dependencies."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "FlowQ: Your Friendly Neighbourhood Distributed Computing System!", "Author": "StoneSteel_1", "Content": "FlowQ is a Distributed Computing system API, Which aims to make Distributed Computing Free and Simple to use!\nFeatures of FlowQ:\nEffortless Setup: Ditch the complicated configurations! FlowQ runs right out of the box, no ssh headaches or pre-installation required.\nSimple and Secure Connection: Leverages the Hack.Chat and FileBin platforms to establish secure, base-64 encrypted and anonymous connections with your computing cluster."},
{"Title": "Analyzing Python Malware found in an open-source project", "Author": "42-is-the-number", "Content": "Hi all, I've recently found a Python Malware in a FOSS tool that is currently available on GitHub. I've written about how I found it, what it does and who the author is. The whole malware analysis is available in form of an article. I would appreciate any and all feedback."},
{"Title": "ipython-sql has been forked", "Author": "databot_", "Content": "Hi r/Python, In case you didn't know, ipython-sql has been forked. The new project has fixed some long-standing issues and added a bunch of new capapabilities:\nSplitting long SQL queries in multiple cells\nPlotting large-scale datasets\nMore flexibility to open database connections\nThe API remains the same, you can replace projects that depend on ipython-sql with jupysql: pip install jupysql"},
{"Title": "PyYAML documentation and source code offline?", "Author": "Veyron180", "Content": "Hey everyone, Today, I wanted to search for some documentation about PyYAML for a personal project. However, I saw that their documentation and GitHub pages all give 404's. The package is still in PyPi. Does anyone know why? Did they go private?\nhttps://pyyaml.org\nhttps://github.com/yaml/pyyaml\nhttps://pypi.org/project/PyYAML/"},
{"Title": "🚀 Goprox: Simplify Google searches with automatic proxy handling and user-agent selection.", "Author": "SwiftGloss", "Content": "What My Project Does: Goprox is a Python module that revolutionizes Google searches by automatically checking and using proxies, eliminating the need for user input. With Goprox, users can enjoy seamless searching without worrying about proxy configuration or getting blocked. Target Audience: Goprox is perfect for developers seeking to automate Google searches for web scraping, automation, or data collection tasks. It's also ideal for anyone who desires a hassle-free search experience without the hassle of manual proxy management. Comparison: Compared to existing alternatives, Goprox stands out with its focus on automatic proxy handling. Unlike other solutions that require manual proxy input, Goprox streamlines the process by autonomously managing proxies for each search query."},
{"Title": "FuzzTypes: Pydantic Library for Auto-correcting Annotation Types", "Author": "imaurer", "Content": "Repo: https://github.com/genomoncology/FuzzTypes FuzzTypes is a library for defining custom annotation types that auto-correct data. This can be used to clean the structured data generated or extracted using OpenAI Function Calling. Since it is built on Pydantic it will work with FastAPI Custom GPT Actions, Instructor, Marvin, DSPy Typed Predictors and any other library currently using Pydantic to define and validate function calling tools. FuzzTypes comes with a variety of \"usable types\" that can be used immediately such as Fuzzy Dates/Times, Email, Zipcode, Integer Words, Emojis. It's also easy to create your own custom annotation types. Simply:\n- Provide a function that converts an \"bad\" input value to a \"good\" output value.\n- Provide a regex for matching desired patterns (e.g. zipcode, email)\n- Provide a list of \"named entities\" (name + aliases) that can be matched to either exactly, case insensitively, fuzzily or semantically (e.g. country, currency)"},
{"Title": "AnyPathLib - A unified PathLib-like API for cloud storages", "Author": "kfirgold99", "Content": "Hi everybody, I'm happy to share AnyPathLib 🛣️, a pip package I created to simplify access to different storage resources - S3, Azure, and local storage. What My Project Does: Basically, instead of writing custom code to handle the different storage resources using the SDK (boto3, azure-sdk), you can now just use AnyPathLib: from anypathlib import AnyPath\n  \n\n  \n# Create an AnyPath instance for a local file\n  \n\n  \nlocal_file = AnyPath(\"/path/to/local/file.txt\")\n  \n\n  \n# Create an AnyPath instance for an S3 object\n  \n\n  \ns3_file = AnyPath(\"s3://bucket/path/to/object.txt\")\n  \n\n  \n# Copy a file from local to S3\n  \n\n  \nlocal_file.copy(s3_file)\n  \n\n  \n# Copy a directory from S3 to Azure\n  \n\n  \ns3_dir = AnyPath(\"s3://bucket/path/to/dir\") \n  \nazure_dir = AnyPath(\"https://account_name.blob.core.windows.net/container_name/path\") \n\ns3_dir.copy(azure_dir)"},
{"Title": "SCHNOZ: Advanced packet sniffer/analyzer and IDS written in Python", "Author": "OkDevelopment4423", "Content": "What it Does:\nSchnoz is an advanced packet sniffer/analyzer and IDS with several options to conduct network monitoring and threat analysis. My script supports both Windows and Linux and is written in Python.\nFeatures:\nActively sniffs local traffic on specified interfaces\nPassively sniffs traffic from pcap files"},
{"Title": "Portr: Open source self hosted ngrok alternative designed for teams", "Author": "ShiftDefeat", "Content": "https://github.com/amalshaji/portr What my project does? Portr is a tunnelling solution that let's you expose local http/tcp connections to the public internet. Target audience Developers that work with webhooks or callbacks. Or anyone who want to quickly share their dev server with others. Comparison\nMonitor connections, and manage teams and members via the admin dashboard. Watch video\nInspect and replay HTTP requests using portr inspector. Watch video."},
{"Title": "Python devs, whats the best complimentary language for your area and why?", "Author": "Brilliant-Donkey-320", "Content": "Hey Everybody, I have seen Python used for many things and I am just wondering, for those who work with Python and another language, what is the best complimentary language for your area (or just in general in your opinion) and why? Is the language used to make faster libraries (like making a C/C++ library for a CPU intensive task)? Maybe you use a higher level language like C# or Java for an application and Python for some DS, AI/ML section? I am curious which languages work well with Python and why? Thanks! Edit: Thanks everyone for all of this info about languages that are useful with Python. It has been very informative and I will definitely be checking out some of these suggested companion languages. Thanks!"},
{"Title": "Better PDF Layout Detection for LLM's + table support", "Author": "serjester4", "Content": "What's the first step to building 90% of AI applications?\nChunking your documents! Unfortunately there's very few libraries for this and most rely on naively splitting text into N characters. You lose so much valuable information hidden in the layout of the document when you do this. If you give an LLM bad inputs, you're going to get bad results. https://github.com/Filimoa/open-parse/ What it does: The library can detect the layout of a PDF, convert to markdown and extract tables into html in one line of code. You can then feed this directly into your vector database or something like LlamaIndex. It does all this while preserving bounding boxes so you can display citations directly to the user."},
{"Title": "Genuine question: Where should I share my opinion about Python language?", "Author": "HalfAByteIsWord", "Content": "I recently posted my opinions on the import system in Python and how it can be made more intuitive and straightforward. I got some comments, some of them are just snappy as usual and some of them had some suggestions and workarounds. Either way the post got removed, citing that it is not suitable for this sub-reddit. I mean, come on, I cannot talk about Python features in Python sub-reddit? Update: To mods: Thanks for letting me have this conversation. To others who made helpful comments, thank you. Original post: I don't want to recreate the post verbatim here, I don't remember it exactly too. It was basically something like this,"},
{"Title": "deptry 0.14.0: Now up to 10 times faster by leveraging Rust!", "Author": "fpgmaas", "Content": "deptry 0.14.0 was just released, bringing significant speed improvements: It is now up to 10 times faster than the previous release! 🚀 For those unfamiliar with deptry; deptry is a command line tool to check for issues with dependencies in a Python project, such as unused or missing dependencies. [GitHub] For some benchmarks of the new release, see the release notes here. The performance improvement was achieved by leveraging Rust to parse the AST and extract the import statements from .py files, rather than using Python's ast module. The addition of Rust to the project also opens up doors for more optimizations in the future, so stay tuned!"},
{"Title": "Wrote a Python script for downloading images/GIFs from subreddits in bulk.", "Author": "MonsieurKebab", "Content": "What my Project Does\nIt's a program that searches through posts in a specified subreddit and downloads images, gifs etc.\nTarget Audience\nIt's a toy project at this point, but I might extend its functionality if I can find good resources. Maybe even add support for different websites (imgur et al.).\nComparison"},
{"Title": "DSPy: Programming—not prompting—Foundation Models", "Author": "EnoughProject7477", "Content": "DSPy is a framework that aims to solve the fragility problem in language model (LM)-based applications by prioritizing programming over prompting. It allows you to recompile the entire pipeline to optimize it to your specific task — instead of repeating manual rounds of prompt engineering — whenever you change a component. https://github.com/stanfordnlp/dspy"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "How to parallelize Pandas with Modin", "Author": "linchpiner", "Content": "Discover the power of Modin in overcoming the performance bottlenecks of Pandas. We'll walk you through how a simple switch can reduce your waiting times and make your workflow smooth and speedy, all without leaving the comfort of Pandas behind. Modin is an active open source project. Take a look to this blog post to see if it is applicable for your code: https://dchigarev.github.io/modin_perf_examples/"},
{"Title": "I forked pyppeteer and revamped it into a new browser automation package: mokr.", "Author": "lamerlink", "Content": "Hello! Been working on this for awhile and excited to finally drop it. I forked Pyppeteer (no longer maintained) and revamped it, doing a good amount of refactoring and adding features along the way. Project link: https://github.com/michaeleveringham/mokr Documentation link: https://mokr.readthedocs.io/en/latest/index.html\nWhat My Project Does\nOffers automated web browsing for both Chrome and Firefox."},
{"Title": "Astrologers have announced the month of Python in Centrifugal Labs: real-time libraries and tutorial", "Author": "FZambia", "Content": "Hello Python community. My name is Alexander – I am the author of Centrifugo project. It's a self-hosted real-time messaging server (alternative to Ably, Pusher, Pubnub services). It was written in Python originally, but then migrated to Go. But it's fully language-agnostic and helps many projects written in Python (and in Django in particular) to add real-time updates to the application. Centrifugo is quite fast, scales well, has super-efficient integration with Redis (~million of publications per second, and more with Redis sharding/Redis Cluster)."},
{"Title": "Does anyone actually use PyPy or Cython?", "Author": "Sc0urge_", "Content": "I have been reading a lot about these tools recently and wondered if they are used in production, especially when building a backend with Python. As far as I know, PyPy is not ideal because of its lack of package support, but Cython seems pretty neat."},
{"Title": "I forked Newspaper3k, fixed bugs and improved its article parsing performance - Newspaper4k package", "Author": "gringo6969", "Content": "Hi all! The Newspaper3k is abandoned (latest release in 2018) without any upgrades and bugfixing. I forked it, and imported all open Issues into my repo. The first two releases (0.9.0 and 0.9.1) were mainly bugfixes and bringing the project more up to date and compatible with python > 3.6 (I started from version 0.9.0 😁). In the latest version, 0.9.3 I not only almost reworked the whole News article parsing process, but also added a lot of new supported languages (around 40 new languages) Repository: https://github.com/AndyTheFactory/newspaper4k Documentation:"},
{"Title": "API Health Checks", "Author": "BigHeed87", "Content": "Healthy-API What it does Provide an easy interface for defining health checks for web applications written in Flask and FastAPI Target Audience For Python developers who are using Flask and FastAPI Similar Packages\nhttps://pypi.org/project/fastapi-healthchecks/ - This looks more Object/class based, but appears to only handles FastAPI. Also allows you to put up a maintenance page\nhttps://pypi.org/project/Flask-Meter/ - My older package which only handles Flask"},
{"Title": "Futurama API written in async Python", "Author": "koldakov", "Content": "I've created a simple API service https://github.com/koldakov/futuramaapi to access Futurama units with async Python + FastAPI + SQLAlchemy (PostgreSQL). I've chosen Hypercorn for a web server to achieve HTTP/2 support - considering I didn't find yet cheap hosting that supports HTTP/2. Heroku doesn't support, render doesn't support. Also it has some code related to GraphQL (I used strawberry). + I didn't find a lot of discussions about Heroku + FastAPI - the problem will be with redirect to https. As default fastapi (starlette) middleware doesn't work with proxies there will be an infinite loop if you try to use . Chain will be: Client https-> Proxy(Hypercorn, for example) http-> fastapi, in that case as you can see the request is secure, but fastapi (starlette) won't understand this and will redirect to https. Here is a simple workaround to support https under proxy:"},
{"Title": "We're building a Large Action Model (LAM) project that can do any task for you using Python!", "Author": "nobilis_rex_", "Content": "Hey guys! My friend and I are building Nelima. It's basically a Large Language Model designed to take actions on your behalf with natural language prompts and theoretically automate anything. For example, it can schedule appointments, send emails, check the weather, and even connect to IoT devices to let you command it – you can ask it to publish a website or call an Uber for you! You can integrate your own custom actions, written in Python, to suit your specific needs, and layer multiple actions to perform more complex tasks. When you create these actions or functions, it contributes to the overall capabilities of Nelima, and everyone can now invoke the same action. Right now, it's a quite limited in terms of the # of actions it can do but we're having fun building a few :)"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Declarative GUI for Python", "Author": "madnirua", "Content": "Slint is a declarative GUI toolkit to build native user interfaces for desktop and embedded applications. Sometime ago, we had announced that Slint will be supporting Python https://www.reddit.com/r/Python/comments/18mdpig/declarative_gui_for_python/ Today we are excited to share that we released Slint v1.5 introducing Pythonic Slint. Check out all the details at https://slint.dev/blog/slint-1.5-released.html 🚀 Check out the repo at https://github.com/slint-ui/slint/tree/master/api/python#slint-python-alpha"},
{"Title": "Is this project worth the time and effort: Camera to Keyboard?", "Author": "mnvoh", "Content": "EDIT: Since there are a lot of upvotes on that comment, yes, this is about seeking strangers' validations. But we're all validation seekers. For instance, we all need someone's validation to make a living (boss, customers, etc.) Your boss ain't gonna tell you \"god damn boy, you suck at your job, here take my money\". But in this case, validation seeking is kind of a broad term, let's use something more specialized like Market Research 😉. Also, thanks for all your comments and inputs. Hello everyone I've been working on this project for the past 3 weeks, and I want people's opinions to determine how much time I should invest in it."},
{"Title": "remove background from image using AI in just 5 lines of python code", "Author": "Maleficent_Yak_993", "Content": "I created a python library \"dis-bg-remover\" based off the \"Highly Accurate Dichotomous Image Segmentation (https://arxiv.org/pdf/2203.03041.pdf), whose results are comparable, if not better, to the premium offerings in the market. Explainer video here https://www.youtube.com/watch?v=js7AYKkZvFI"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "BrowserForge: Intelligent browser header and fingerprint generator", "Author": "daijro", "Content": "What it does: BrowserForge is a smart browser header and fingerprint generator that mimics the frequency if different browsers, operating systems, and devices found in the wild. Features\nUses a Bayesian generative network to mimic actual web traffic\nExtremely fast runtime (0.1-0.2 miliseconds)\nEasy and simple for humans to use\nExtensive customization options for browsers, operating systems, devices, locales, and HTTP version"},
{"Title": "What’s a script that you’ve written that you still use frequently?", "Author": "HiT3Kvoyivoda", "Content": "Mine is a web scraper. It’s only like 50 lines of code. It takes in a link, pulls all the hyperlinks and then does some basic regex to pull out the info I want. Then it spits out a file with all the links. Took me like 20 minutes to code, but I feel like I use it every other week to pull a bunch of links for files I might want to download quickly or to pull data from sites to model."},
{"Title": "SQLModel vs native SQL Alchemy ORM for a web backend?", "Author": "Raz_Crimson", "Content": "Hi there\nI was tasked with migrating from mongoDb to PostgreSQL due to the performance issues.\nThe backend is FastAPI-based web server for a mobile APP with a decent amount if CRUD. We also heavily use Pydantic for data validation and the primary carried of data across the service layers Would like to hear opinions from SQLModel users as to how easy it is to use or what kind of pitfalls am i setting myself up by using it. Last post that I could find was years old and even that was not really conclusive. Now SQLAlchemy 2.0 is released and even SQLModel has support for Pydantic V2, so would like some newer thoughts in this topic."},
{"Title": "Alternative Queries: Typed and Reusable Handcrafted SQL", "Author": "baluyotraf", "Content": "Hello! It's still early in development, but I just want to know if people are interested. What My Project Does I created a library to integrate Pydantic type checking for handwritten SQL queries. It also allows you to test the types, and create nested queries easily. Alternative Queries Target Audience We had a project recently were we had to use handwritten SQL and managing the parameters and reusing queries was quite a hassle. So I'm planning to use this on my production projects moving forward. Comparison I would say in terms of usage, it's like Pydantic + SqlParams, but only with the python default formatting."},
{"Title": "Fast API code to create/manage Open AI assistants", "Author": "HenryObj", "Content": "Hello everyone, I built a V1 for a SaaS platform to create and manage OpenAI assistants. It is made to be white-labeled. The back-end is in Python (FastAPI). I decided to work on other projects. If the code can be helpful to you, please feel free to use it the way you want 🤝 Link to the repo here 👉 github[dot]com/HenryObj/assistants"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Finite Element Analysis for Continuum Mechanics of Solid Bodies (FElupe)", "Author": "adtzlr", "Content": "Hi, I'd like to introduce to you my open-source FEA package FElupe, available on GitHub. Its target audience is typically an engineer, e.g. in the field of mechanical or biomedical engineering. It is designed to be both flexible for scientifc research as well as easy-to-use for industry-related problems. Packages with similar scopes are e.g. scikit-fem and Fenics(x). FElupe is a Python 3.8+ 🐍 finite element analysis package 📦 focussing on the formulation and numerical solution of nonlinear problems in continuum mechanics 🔧 of solid bodies 🚂. Its name is a combination of FE (finite element) and the german word Lupe 🔍 (magnifying glass) as a synonym for getting an insight 📖 how a finite element analysis code 🧮 looks like under the hood 🕳️."},
{"Title": "Virtual Workshop: Real-time streaming + analytics + visualization (Mar, 19)", "Author": "oli_k", "Content": "Hello,\nI'm organizing a workshop next Tuesday, March 19, 2024, at 4 PM Pacific Time. During this workshop, instructors will build a real-time dashboard for analyzing pizza shop orders using Bytewax, Pinot, and Streamlit.\nFor more details and to RSVP (attendance is free), please visit:\nhttps://bytewax.io/events/real-time-pizza-analytics\nI believe this workshop is especially noteworthy for those interested, as I've personally enjoyed migrating the previous solution from Kafka Streams to Bytewax. The solution is now more Python-friendly, and the complexity of the codebase is significantly reduced. For me, it felt truly refreshing to rewrite it :D\nI am still in the process of updating the repository and will share it later, but here is the previous version:"},
{"Title": "Automating Python with Google Cloud", "Author": "neb2357", "Content": "I just published a tutorial series on how to automate a Python script in Google Cloud using Cloud Functions and/or Cloud Run. Feedback would be great. Thanks!\nAutomating Python with Google Cloud\nAutomating Python with Google Cloud Functions\nAutomating Python with Google Cloud Run"},
{"Title": "Text extraction lib", "Author": "TraditionalAlps4337", "Content": "I created a simple tool for extracting text from PDF, EPUB, TXT, and DOCX files.It is mainly for personal use, but I would really appreciate a feedback https://github.com/KirillAn/extractText/tree/main"},
{"Title": "Python state management", "Author": "Extreme-Acid", "Content": "Hey all, I love what Django has with django-fsm. I require something but without Django, as there is no user interaction with the workflow. All inputs and outputs are either rabbitmq or another api. This is to be a workflow management system. I am looking for state management backed up by database so we can not suffer if a k8s pod dies with all the states in memory. Some of our workflows could take weeks. Is it still best to make this in Django or is there a database backed state management module available? I see pytransitions but I would have to add database logging to it."},
{"Title": "Collecting Dask user quotes", "Author": "mrocklin", "Content": "So I'm updating the dask.org homepage and want to include user quotes of people who Dask has had some positive impact. If you have ...\nLike Dask or found Dask it easy or helpful in some way\ndon't mind having your name and face on the dask.org website\n... then can you leave a comment here with a quote that you wouldn't mind me putting online? Bonus points if you can link to something like a personal homepage or linkedin page where I can scrape a tiny headshot. For long quotes I may tighten up language a bit (let me know if you mind)."},
{"Title": "PyBackport: Use instances from newer python releases", "Author": "tan_tata_chan", "Content": "What My Project Does PyBackport holds serves three purposes:\nUse instances from newer python releases in older python versions. For example, using StrEnum (new in python 3.11) in python 3.9\nEnable experimental unreleased classes. For example, define new enums where members are tuples with TupleEnum\nProvide support to commonly used constants. For example, PyBackport allows to import and use to avoid re-defining constant color codes in every new project."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Comparing hosts / providers for serverless cloud functions (FaaS) for Python", "Author": "hxmartin", "Content": "I was going crazy trying to compare Python cloud function hosts and started taking notes ... hope this helps someone, feedback welcome! https://github.com/hbmartin/comparison-hosts-serverless-cloud-function-faas-for-python"},
{"Title": "Distributing simple handy scripts for Windows - mouse-startable AND editable (the tricky one-liner)", "Author": "galkinvv", "Content": "In short: here is the hacky 2-line header that makes any python script a clickable batch file\n(assuming bundled python in a subfolder) @classmethod # 2>nul & (if not exist \"%~dp0\\python64-win\\python.exe\" (echo Fatal python64-win\\python.exe not found & pause) else (title %~f0 & \"%~dp0\\python64-win\\python.exe\" \"%~f0\" %*)) & exit /B & # noqa: E501\ndef __unused(): \"fake function to help writing header that allows executing same file as python and batch\"\n\n# Normal script starts here"},
{"Title": "Creating a GeoTIFF raster XYZ tile service in python with caching capability", "Author": "iamgeoknight", "Content": "Creating a GeoTIFF raster XYZ tile service in python with caching capability"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Makefile Parser for Python", "Author": "Cybasura", "Content": "Hello everyone! I am proud to introduce a Makefile Parser for Python that I think will be useful! the link is Thanatisia/makefile-parser-python As an introduction, I have been using python and been following this subreddit for quite awhile now, but this is my first post Recently, I've been planning a side-project involving the use of Makefiles in Python, and I required the use of a Makefile parser ala json or pyyaml - whereby you would import a Makefile into python as objects/dictionary/lists. Hence, I started searching for a Makefile Parser. The only parser I've found is PyMake(2) which is cool but it hasnt been updated since 2017 from what I recall and that it is more of a CLI utility, so with that in mind, I went about to make it"},
{"Title": "NiceGUI For Beginners", "Author": "bitdoze", "Content": "Created a beginner guide to NiceGUI and how you can get started, NiceGUI can help you build UIs to Python apps and offers performance and flexibility, in case someone is interested there is an article and a video:\nhttps://www.bitdoze.com/nicegui-get-started/"},
{"Title": "Load Apple's .numbers Files into Pandas", "Author": "nez_har", "Content": "I recently ran into some challenges while trying to work with Apple's .numbers files on Linux. After a bit of experimentation, I figured out a workflow that simplifies the process. If you're planning to use .numbers files and need to load them into pandas, I've created a tutorial that covers the required dependencies and the steps to follow: https://nezhar.com/blog/load-apple-numbers-files-python-pandas-using-containers/. Has anyone else here worked with .numbers files in Python? I’d love to hear about your experiences or any tips you might have."},
{"Title": "Chat with your friends within your (Mac & Linux) Terminal | Textual | Simple & Easy to use", "Author": "Plastic-Payment-934", "Content": "Toschat !What My Project Does?\na lightweight python chat app within your terminal with simple UI and it's built on top of Textual framework. What you can do: - Create a new account - Add your friends to your contact - and chat!\nTarget Audience\nIt's my hobby project to improve my python knowledge but everyone can install and use it. All data store in a live server with Django framework."},
{"Title": "No More Cutting in Line: Crafting Fairness in Queues using RQ in Python", "Author": "soap94", "Content": "I was trying to tackle the problem of queue fairness and here's how I solved it."},
{"Title": "Designing a Pure Python Web Framework", "Author": "Pleasant-Cow-3898", "Content": "From the Article:\nThis provides a good overview of how Reflex works under the hood. TLDR:\nUnder the hood, Reflex apps compile down to a React frontend app and a FastAPI backend app. Only the UI is compiled to Javascript; all the app logic and state management stays in Python and is run on the server. Reflex uses WebSockets to send events from the frontend to the backend, and to send state updates from the backend to the frontend. Full post: https://reflex.dev/blog/2024-03-21-reflex-architecture/#designing-a-pure-python-web-framework"},
{"Title": "PyCon US grants free booth space and conference passes to early-stage startups. Apply by Sunday 3/17", "Author": "jrowley", "Content": "Official Event"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "UFO Tools- functional programming in python", "Author": "houseofleft", "Content": "I shared a \"monads in python library\" a little while back on here- since then I've been toying with and expanding things out into a more general project for helping functional programming patterns in python. [I had (am having) a bunch of fun making this - thought I'd share here!](https://github.com/benrutter/ufo-tools) What my project does: A simple library with utilities for functional programming in Python.\nTarget Audience: It's meant for use in actual production contexts, but it's still in a very early and experimental phase. It's probably most helpful right now as a learning resource."},
{"Title": "Email Testing with Python smtpd module", "Author": "mraza007", "Content": "Python is packed with numerous command-line modules, one of them being smtpd. It allows you to run your own local SMTP server for testing emails. You can read more about it here in my blog post: Email Testing with Python's smtpd Module"},
{"Title": "Type-Level Programming: a POC", "Author": "Kiuhnm", "Content": "While Python doesn't explicitly support Type-Level Programming, I've had some success with it. I think this may be of interest to the Python community, so I'm sharing a POC (Proof Of Concept) I've written. This POC is a statically typed list that encodes its length in its type so that, for instance, when you concatenate two lists, the result has the correct length, all done at type-checking time. Read more on GitHub"},
{"Title": "Code type checks but then `TypeError`s", "Author": "Kiuhnm", "Content": "Have you noticed that Python's static type system is unsound? Look at this code: from typing import overload\n\n@overload\ndef f(x: int) -> str: ...\n@overload\ndef f(x: str) -> int: ...\ndef f(x: int | str) -> int | str:\n    match x:\n        case int():\n            return 1\n        case str():\n            return 'a'\n\nprint('a' + f(1))\nprint(1 + f('a'))"},
{"Title": "No More Docstring Despair: Highlight Them in VSCode!", "Author": "erunosaurus", "Content": "Hey everyone! I'm excited to share a simple yet effective tool I've developed that's all about enhancing your Python coding experience in VSCode. We all know how Docstrings are crucial for understanding and documenting our Python code, but they often blend into the background, treated as standard comments in VSCode. This can make them harder to read and differentiate from the rest of your code. That's why I created a Python Docstring Highlighter for VSCode that recognizes the main styles (Google, NumPy, and Sphinx). This extension not only makes your code more readable but also allows you to customize the highlighting to fit your theme, making your coding environment as comfortable and productive as possible."},
{"Title": "Open Jupyter Notebooks in Kaggle? (from GitHub)", "Author": "pbeens", "Content": "I have a repo in GitHub with Jupyter Notebooks for students. On each notebook I have a link where the student can open the notebook in Colab (by changing the URL from https://github.com/ to https://githubtocolab.com/). The problem is that some school boards have Colab blocked. Is there a similar technique I can use to open the notebooks in Kaggle? Are there other sites I should be considering? Thanks!"},
{"Title": "I made a free easy-to-use toast notification library for PyQt and PySide", "Author": "niklashnng", "Content": "Hey guys, since I couldn't find any good libraries for showing modern-looking toast notifications in PyQt, I made one myself. What My Project Does: It supports showing multiple toasts at the same time, queueing of toasts, 6 different positions, multiple screens and much more. Since it's developed with QtPy, an abstraction layer for multiple versions of PyQt and PySide, you can use it with PyQt5, PyQt6, PySide2, and PySide6. Also, basically anything can be completely customized and it's extremely easy to use. Target Audience: This is useful for any Python developer who is working with PyQt or PySide and wants to display clean and modern-looking toast nofifications easily."},
{"Title": "does anyone know about an alternative to aeneas that works on python 3.12.1?", "Author": "jonnisaesipylsur", "Content": "i need some python library that can automatically generate a synchronization map between a list of text fragments and an audio file containing the narration of the text. aeneas does exactly that except it doesnt work on higher than 2.7 with windows."},
{"Title": "I created a tool that scrapes learncpp.com and make it into a pdf book using asyncio+multiprocessing", "Author": "AstronomerTerrible49", "Content": "Link Github - learncpp_pdf What My Project Does scrape htmls from learncpp.com and make it a pdf book Target Audience people who wants to learn cpp and would like to have a pdf copy of learncpp.com as well as people who wants to learn how to use asyncio and multiprocessing Comparison\namalrajan/learncpp-download Too slow, since it does not make use of asyncio and multiprocessing"},
{"Title": "Who's coming to PyCon Italia this year?", "Author": "patrick91it", "Content": "Hey folks! Is anyone of you attending this year PyCon Italia? I'm one of the organisers and I'd love to connect to new people this year 😊 See you there! 🐍✨"},
{"Title": "PyOhio CFP open through May 20", "Author": "catherinedevlin", "Content": "Call for Proposals open through May 20 PyOhio is a fun, friendly, free general Python conference now in its Nth year (N is large). This year it will be Sat & Sun Jul 27-28, 2024 at The Westin Cleveland Downtown in Cleveland, OH (its first year outside Columbus)! Hope to see you there!"},
{"Title": "Understanding the Python memory footprint provides pointers to improve your code", "Author": "squareape", "Content": "While it is easy to use Python to turn an idea into a program, one will quickly run into bottlenecks that make their code less performant than they might want it to be. One such bottleneck is memory, of which Python consumes a lot compared to statically typed languages. Indeed, someone asking for advice on how to optimize their Python application online will likely receive the following advice: \"Rewrite it in Rust\". For obvious reasons, this is not very practical advice most of the time. Thus, we must make do with what we have: Python, and libraries written for Python. What follows is an exhibition of the memory model behind your Python application: How objects are allocated, where they are stored, and how they are eventually cleaned up."},
{"Title": "\"Mark as read\" plugin for mkdocs-material", "Author": "br2krl", "Content": "Hi everyone, I developed a simple plugin for mkdocs-material. What My Project Does: In simple terms, this plugin allows users to mark pages as read and it shows a checkmark icon in navigation bar for the pages that was marked as read.\nThe plugin adds a button under the page content and when users clicks, it stores read date in localStorage. It shows a checkmark icon in the navigation panels for the pages that marked as read. It also shows a \"document updated\" icon if the pages that marked as read got an update. Target Audience:"},
{"Title": "Disabling the GIL option has been merged into Python.", "Author": "germandiago", "Content": "Exciting to see, after many years, serious work in enabling multithreading that takes advantage of multiple CPUs in a more effective way in Python. One step at a time: https://github.com/python/cpython/pull/116338"},
{"Title": "An Automated Bash Script for Python Virtual Environment Management", "Author": "SAV_NC", "Content": "Hello r/Python, What My Project Does: This script is designed to automate the management of Python virtual environments and dependencies, streamlining the setup process for Python projects. It facilitates a more efficient workflow for managing project-specific environments and package installations, especially in a professional development setting. Target Audience: This tool is particularly beneficial for developers and IT professionals looking for a systematic approach to environment management. It is designed to integrate into existing workflows, providing a reliable and consistent method for managing Python environments and dependencies."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Analyzing Python Malware found in an open-source project", "Author": "42-is-the-number", "Content": "Hi all, I've recently found a Python Malware in a FOSS tool that is currently available on GitHub. I've written about how I found it, what it does and who the author is. The whole malware analysis is available in form of an article. I would appreciate any and all feedback."},
{"Title": "Sudoku game in python - In terminal (TUI)", "Author": "python_game", "Content": "Hello, I made a Sudoku game in python (not really original). The difficult part for me was the user interface with curses library. A diagram is available to explain the algorithm used. The fame is compatible Linux, Mac and Windows. Link to the project here How to install and play? $ pip install play-sudoku\n$ sudoku What My Project Does Sudoku game, made with python & curses library. Play in the terminal. For Linux, Mac OS and Windows."},
{"Title": "ipython-sql has been forked", "Author": "databot_", "Content": "Hi r/Python, In case you didn't know, ipython-sql has been forked. The new project has fixed some long-standing issues and added a bunch of new capapabilities:\nSplitting long SQL queries in multiple cells\nPlotting large-scale datasets\nMore flexibility to open database connections\nThe API remains the same, you can replace projects that depend on ipython-sql with jupysql: pip install jupysql"},
{"Title": "What are the limitations for PSFL and BSD licences within a commercial used software?", "Author": "earthspaceman", "Content": "I'm currently building a program for internal use only to perform some calculations after receiving input from a Tkinter interface, loading and saving data locally. Matplotlib is used to create a graph for better visualisation of the output. libraries used: tkinter, json, os, math, matplotlib From what I understand based on the PSFL licence for tkinter, os, json, math there should be no problem. I think matplotlib BSD licence should also be ok. Libraries haven't been changed at all but only used inside the program by calling functions. Software is for internal use only and not for sell. What are the limitations and what do I have to indicate other and the PSFL licence and Matplotlib BSD?"},
{"Title": "🚀 Goprox: Simplify Google searches with automatic proxy handling and user-agent selection.", "Author": "SwiftGloss", "Content": "What My Project Does: Goprox is a Python module that revolutionizes Google searches by automatically checking and using proxies, eliminating the need for user input. With Goprox, users can enjoy seamless searching without worrying about proxy configuration or getting blocked. Target Audience: Goprox is perfect for developers seeking to automate Google searches for web scraping, automation, or data collection tasks. It's also ideal for anyone who desires a hassle-free search experience without the hassle of manual proxy management. Comparison: Compared to existing alternatives, Goprox stands out with its focus on automatic proxy handling. Unlike other solutions that require manual proxy input, Goprox streamlines the process by autonomously managing proxies for each search query."},
{"Title": "Haystack 2.0 launch", "Author": "tuanacelik", "Content": "Haystack 2.0 stable is live! Try it out for yourself: https://haystack.deepset.ai/blog/haystack-2-release/ Haystack is an open-source AI framework in Python for creating production-ready apps using LLMs and other language models. It's nearly 4 years old - we've been doing NLP and LLM engineering since before it was cool. 😎 and is model and database agnostic — you can use whatever tools make the most sense for your use case. These tools are combined into a full AI app with the use of Haystack's components and pipelines. The aim of the framework is to provide the structure for you to compose your own custom app."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "A Project I Am Working On!", "Author": "sushantshah-dev", "Content": "I am trying to build my own CMS in Python. It is supposed to be simple and useful for developers who like to tinker with the inner workings of their websites. Most mainstream content management systems like WordPress seem too complicated to play around with to me. https://pypi.org/project/sapphirecms/ https://github.com/SapphireCMS/SapphireCMS/ I am asking for help in the sense that I need to know the pain points and issues other developers face with the CMSs they use. This is also an open invitation for collaborators on the project. Your efforts will be credited."},
{"Title": "Astrologers have announced the month of Python in Centrifugal Labs: real-time libraries and tutorial", "Author": "FZambia", "Content": "Hello Python community. My name is Alexander – I am the author of Centrifugo project. It's a self-hosted real-time messaging server (alternative to Ably, Pusher, Pubnub services). It was written in Python originally, but then migrated to Go. But it's fully language-agnostic and helps many projects written in Python (and in Django in particular) to add real-time updates to the application. Centrifugo is quite fast, scales well, has super-efficient integration with Redis (~million of publications per second, and more with Redis sharding/Redis Cluster)."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I forked Newspaper3k, fixed bugs and improved its article parsing performance - Newspaper4k package", "Author": "gringo6969", "Content": "Hi all! The Newspaper3k is abandoned (latest release in 2018) without any upgrades and bugfixing. I forked it, and imported all open Issues into my repo. The first two releases (0.9.0 and 0.9.1) were mainly bugfixes and bringing the project more up to date and compatible with python > 3.6 (I started from version 0.9.0 😁). In the latest version, 0.9.3 I not only almost reworked the whole News article parsing process, but also added a lot of new supported languages (around 40 new languages) Repository: https://github.com/AndyTheFactory/newspaper4k Documentation:"},
{"Title": "We're building a Large Action Model (LAM) project that can do any task for you using Python!", "Author": "nobilis_rex_", "Content": "Hey guys! My friend and I are building Nelima. It's basically a Large Language Model designed to take actions on your behalf with natural language prompts and theoretically automate anything. For example, it can schedule appointments, send emails, check the weather, and even connect to IoT devices to let you command it – you can ask it to publish a website or call an Uber for you! You can integrate your own custom actions, written in Python, to suit your specific needs, and layer multiple actions to perform more complex tasks. When you create these actions or functions, it contributes to the overall capabilities of Nelima, and everyone can now invoke the same action. Right now, it's a quite limited in terms of the # of actions it can do but we're having fun building a few :)"},
{"Title": "CTF-style Python Challenge", "Author": "seunghan_shin", "Content": "Hello everyone, I enjoy solving CTFs, and I often have thought it would be interesting to have CTF events in other domain besides security. Last year, I organized a small Python-themed CTF event for learners at a Korean conference. The response from participants was positive, so I decided to open it for everyone. https://pyctf.seung.de Anyone can read the challenges, but registration is required to submit flags. Since there's no email verification, feel free to try it without concerns. I made it for beginners and learners, so the challenges are generally easy, but there are also challenges for experienced people. I hope you all have fun. There may be mistakes in the moving to English ver., so I would greatly appreciate bug report or any feedback to help improve, and I will be more happier if I get to see more Python CTF events in the future."},
{"Title": "Is this project worth the time and effort: Camera to Keyboard?", "Author": "mnvoh", "Content": "EDIT: Since there are a lot of upvotes on that comment, yes, this is about seeking strangers' validations. But we're all validation seekers. For instance, we all need someone's validation to make a living (boss, customers, etc.) Your boss ain't gonna tell you \"god damn boy, you suck at your job, here take my money\". But in this case, validation seeking is kind of a broad term, let's use something more specialized like Market Research 😉. Also, thanks for all your comments and inputs. Hello everyone I've been working on this project for the past 3 weeks, and I want people's opinions to determine how much time I should invest in it."},
{"Title": "I Built a Squaredle Bot", "Author": "2bytesgoat", "Content": "https://www.youtube.com/watch?v=VtHtAbOSp8E Hey everyone 👋 I’m trying to make a habit out of finishing projects and posting the progress on YouTube Any feedback is more than welcome 🙏 What my project does\nreads on screen\nmocks mouse input\nfinds all words in a squaredle based on a word dictionary"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "What’s a script that you’ve written that you still use frequently?", "Author": "HiT3Kvoyivoda", "Content": "Mine is a web scraper. It’s only like 50 lines of code. It takes in a link, pulls all the hyperlinks and then does some basic regex to pull out the info I want. Then it spits out a file with all the links. Took me like 20 minutes to code, but I feel like I use it every other week to pull a bunch of links for files I might want to download quickly or to pull data from sites to model."},
{"Title": "python notebook+ insightface + inswapper_128", "Author": "Maleficent_Yak_993", "Content": "I moved from C to python and absolutely loving it. While looking into code of available face swappers I realized they are mostly wrapper on insightface and inswapper. So i thought I'll strip it all down to bare minimum, and the results were better than expected. I've captured my learnings in this video, if you're interested. https://www.youtube.com/watch?v=Ju_reA3zQso"},
{"Title": "Alternative Queries: Typed and Reusable Handcrafted SQL", "Author": "baluyotraf", "Content": "Hello! It's still early in development, but I just want to know if people are interested. What My Project Does I created a library to integrate Pydantic type checking for handwritten SQL queries. It also allows you to test the types, and create nested queries easily. Alternative Queries Target Audience We had a project recently were we had to use handwritten SQL and managing the parameters and reusing queries was quite a hassle. So I'm planning to use this on my production projects moving forward. Comparison I would say in terms of usage, it's like Pydantic + SqlParams, but only with the python default formatting."},
{"Title": "Leaping: Fix tests instantly with an omniscient debugger", "Author": "kpetkar", "Content": "Link to Repo: https://github.com/leapingio/leaping What My Project Does\nWe’ve all been in hell when you have no idea why a test might be failing. You set a breakpoint, add print statements, and re-run the code, all to realize that you added them in the wrong spot or need to step backward. Leaping is a simple, fast and lightweight omniscient debugger for Python tests. Leaping traces the execution of your code and allows you to retroactively inspect the state of your program at any time, using an LLM-based debugger with natural language. Using Leaping, you can quickly get the answer to questions like:"},
{"Title": "Finite Element Analysis for Continuum Mechanics of Solid Bodies (FElupe)", "Author": "adtzlr", "Content": "Hi, I'd like to introduce to you my open-source FEA package FElupe, available on GitHub. Its target audience is typically an engineer, e.g. in the field of mechanical or biomedical engineering. It is designed to be both flexible for scientifc research as well as easy-to-use for industry-related problems. Packages with similar scopes are e.g. scikit-fem and Fenics(x). FElupe is a Python 3.8+ 🐍 finite element analysis package 📦 focussing on the formulation and numerical solution of nonlinear problems in continuum mechanics 🔧 of solid bodies 🚂. Its name is a combination of FE (finite element) and the german word Lupe 🔍 (magnifying glass) as a synonym for getting an insight 📖 how a finite element analysis code 🧮 looks like under the hood 🕳️."},
{"Title": "Text extraction lib", "Author": "TraditionalAlps4337", "Content": "I created a simple tool for extracting text from PDF, EPUB, TXT, and DOCX files.It is mainly for personal use, but I would really appreciate a feedback https://github.com/KirillAn/extractText/tree/main"},
{"Title": "Do you like `def call() -> None: ...`", "Author": "silently--here", "Content": "So, I wanted to get a general idea about how people feel about giving return type hint of None for a function that doesn't return anything. With the introduction of PEP 484, type hints were introduced and we all rejoiced. Lot of my coworkers just don't get the importance of type hints and I worked way too hard to get everyone onboarded so they can see how incredibly useful it is! After some time I met a coworker who is a fan of typing and use it well... except they write -> None everywhere! Now this might be my personal opinion, but I hate this because it's redundant and not to mention ugly (at least to me). It is implicit and by default, functions return None in python, and I just don't see why should be used. We have been arguing a lot over this since we are building a style guide for the team and I wanted to understand what the general consensus is about this. Even in PEP 484, they have mentioned that should be used for functions and I just find that crazy."},
{"Title": "PyBackport: Use instances from newer python releases", "Author": "tan_tata_chan", "Content": "What My Project Does PyBackport holds serves three purposes:\nUse instances from newer python releases in older python versions. For example, using StrEnum (new in python 3.11) in python 3.9\nEnable experimental unreleased classes. For example, define new enums where members are tuples with TupleEnum\nProvide support to commonly used constants. For example, PyBackport allows to import and use to avoid re-defining constant color codes in every new project."},
{"Title": "EyeGestures: Opensource eyetracking python library", "Author": "TraditionalDistrict9", "Content": "Hey all!\nWanted to share opensource project for all interested in building interfaces based on eyetracking. What My Project Does: EyeGestures is python library offering e2e eyetracking with blinking detection, and gaze fixation. It provides eye-motion-controlled cursor. Comparison: I have not found other e2e eye tracking library with focus on building interfaces. We offer eye-motion following cursor, with built-in switchable configuration, gaze detection and blinking. Furthermore webAPI provides activation zones, and eye-magnetic buttons to ease user control."},
{"Title": "Distributing simple handy scripts for Windows - mouse-startable AND editable (the tricky one-liner)", "Author": "galkinvv", "Content": "In short: here is the hacky 2-line header that makes any python script a clickable batch file\n(assuming bundled python in a subfolder) @classmethod # 2>nul & (if not exist \"%~dp0\\python64-win\\python.exe\" (echo Fatal python64-win\\python.exe not found & pause) else (title %~f0 & \"%~dp0\\python64-win\\python.exe\" \"%~f0\" %*)) & exit /B & # noqa: E501\ndef __unused(): \"fake function to help writing header that allows executing same file as python and batch\"\n\n# Normal script starts here"},
{"Title": "Free Review Copies of \"Python Real-World Projects\"", "Author": "entreluvkash", "Content": "Packt has published \"Python Real-World Projects\"\nAs part of our marketing activities, we are offering free digital copies of the book in return for unbiased feedback in the form of a reader review. Here is what you will learn from the book:\nExplore core deliverables for an application including documentation and test cases\nDiscover approaches to data acquisition such as file processing, RESTful APIs, and SQL queries\nCreate a data inspection notebook to establish properties of source data"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "The wrong way to speed up your code with Numba", "Author": "itamarst", "Content": "If your NumPy-based code is too slow, you can sometimes use Numba to speed it up. Numba is a compiled language that uses the same syntax as Python, and it compiles at runtime, so it’s very easy to write. And because it re-implements a large part of the NumPy APIs, it can also easily be used with existing NumPy-based code.\nHowever, Numba’s NumPy support can be a trap: it can lead you to missing huge optimization opportunities by sticking to NumPy-style code. In this article I show examples of:"},
{"Title": "Chat with your friends within your (Mac & Linux) Terminal | Textual | Simple & Easy to use", "Author": "Plastic-Payment-934", "Content": "Toschat !What My Project Does?\na lightweight python chat app within your terminal with simple UI and it's built on top of Textual framework. What you can do: - Create a new account - Add your friends to your contact - and chat!\nTarget Audience\nIt's my hobby project to improve my python knowledge but everyone can install and use it. All data store in a live server with Django framework."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Designing a Pure Python Web Framework", "Author": "Pleasant-Cow-3898", "Content": "From the Article:\nThis provides a good overview of how Reflex works under the hood. TLDR:\nUnder the hood, Reflex apps compile down to a React frontend app and a FastAPI backend app. Only the UI is compiled to Javascript; all the app logic and state management stays in Python and is run on the server. Reflex uses WebSockets to send events from the frontend to the backend, and to send state updates from the backend to the frontend. Full post: https://reflex.dev/blog/2024-03-21-reflex-architecture/#designing-a-pure-python-web-framework"},
{"Title": "UXsim: Network traffic flow simulator in pure Python", "Author": "Balance-", "Content": "Disclaimer: Not my project but a very interesting one I encountered recently UXsim is a free, open-source traffic flow simulator designed for large-scale vehicular transportation simulations, developed purely in Python. Whether you're a researcher, student, or enthusiast in transportation, UXsim offers a comprehensive toolkit for macroscopic and mesoscopic traffic flow simulations. What My Project Does UXsim stands out by providing an easy-to-use Python implementation of standard models for dynamic network traffic flow. It's capable of simulating traffic dynamics in large networks, incorporating elements such as traffic signals, inflow control, route guidance, and congestion pricing. The simulator supports dynamic traffic assignments and comes with features for analyzing and visualizing simulation results, making it highly useful for scientific and educational purposes."},
{"Title": "UFO Tools- functional programming in python", "Author": "houseofleft", "Content": "I shared a \"monads in python library\" a little while back on here- since then I've been toying with and expanding things out into a more general project for helping functional programming patterns in python. [I had (am having) a bunch of fun making this - thought I'd share here!](https://github.com/benrutter/ufo-tools) What my project does: A simple library with utilities for functional programming in Python.\nTarget Audience: It's meant for use in actual production contexts, but it's still in a very early and experimental phase. It's probably most helpful right now as a learning resource."},
{"Title": "🌈 StreamJoy turns your stream of images into animations, in parallel", "Author": "zethiroth", "Content": "Docs here: https://ahuang11.github.io/streamjoy/ Repo here: https://github.com/ahuang11/streamjoy/tree/main What My Project Does Streamjoy turns your images into animations using sensible defaults for fun, hassle-free creation. It cuts down the boilerplate and time to work on animations, and it's simple to start with just a few lines of code. Target Audience For scientists or hobbyists that want to see something in motion and analyze it! It's still in beta, but would love feedback! Comparison Unlike other libraries, this runs in parallel, and I really like how it can add intros and pauses by specifying keywords!"},
{"Title": "Code type checks but then `TypeError`s", "Author": "Kiuhnm", "Content": "Have you noticed that Python's static type system is unsound? Look at this code: from typing import overload\n\n@overload\ndef f(x: int) -> str: ...\n@overload\ndef f(x: str) -> int: ...\ndef f(x: int | str) -> int | str:\n    match x:\n        case int():\n            return 1\n        case str():\n            return 'a'\n\nprint('a' + f(1))\nprint(1 + f('a'))"},
{"Title": "Pyconf from Philly (Carpool/Hotel)", "Author": "the_ultimate_stoic", "Content": "Anyone going to pyconf from Philly?\nLooking to carpool and possibly get a Airbnb near the spot!\nlmk if anyone wants to join."},
{"Title": "I made a free easy-to-use toast notification library for PyQt and PySide", "Author": "niklashnng", "Content": "Hey guys, since I couldn't find any good libraries for showing modern-looking toast notifications in PyQt, I made one myself. What My Project Does: It supports showing multiple toasts at the same time, queueing of toasts, 6 different positions, multiple screens and much more. Since it's developed with QtPy, an abstraction layer for multiple versions of PyQt and PySide, you can use it with PyQt5, PyQt6, PySide2, and PySide6. Also, basically anything can be completely customized and it's extremely easy to use. Target Audience: This is useful for any Python developer who is working with PyQt or PySide and wants to display clean and modern-looking toast nofifications easily."},
{"Title": "PyPI Support Specialist", "Author": "monorepo", "Content": "PSF Official"},
{"Title": "Who's coming to PyCon Italia this year?", "Author": "patrick91it", "Content": "Hey folks! Is anyone of you attending this year PyCon Italia? I'm one of the organisers and I'd love to connect to new people this year 😊 See you there! 🐍✨"},
{"Title": "quickapiclient: Create fully typed declarative API clients quickly and easily", "Author": "martinn404", "Content": "Hi all! I've had an idea for a while around creating a library that would allow you to quickly build new API clients that are fully typed. Last week I finally got around to building it and am keen to see what everyone thinks. What My Project Does A library for creating fully typed declarative API clients quickly and easily. So you could build an API integration with other services very quickly, and in a declarative way. And it would ensure that your request/query params are valid/correct before sending them (avoiding potential errors). As well as making the API response easy to work with, matching your own models rather than trying to work with JSON blobs."},
{"Title": "I forked pyppeteer and revamped it into a new browser automation package: mokr.", "Author": "lamerlink", "Content": "Hello! Been working on this for awhile and excited to finally drop it. I forked Pyppeteer (no longer maintained) and revamped it, doing a good amount of refactoring and adding features along the way. Project link: https://github.com/michaeleveringham/mokr Documentation link: https://mokr.readthedocs.io/en/latest/index.html\nWhat My Project Does\nOffers automated web browsing for both Chrome and Firefox."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "API Health Checks", "Author": "BigHeed87", "Content": "Healthy-API What it does Provide an easy interface for defining health checks for web applications written in Flask and FastAPI Target Audience For Python developers who are using Flask and FastAPI Similar Packages\nhttps://pypi.org/project/fastapi-healthchecks/ - This looks more Object/class based, but appears to only handles FastAPI. Also allows you to put up a maintenance page\nhttps://pypi.org/project/Flask-Meter/ - My older package which only handles Flask"},
{"Title": "Every dunder method in Python", "Author": "treyhunner", "Content": "For years my training students have been asking me for a list of all the dunder methods. The Python docs don't have such a list, so I compiled my own... after having on my to-do list for years. Every dunder method in Python I realized why it took me so long during when I finally finished compiling the table of all of them... there are over 100 dunder methods in Python! 💯 Edit: I should have said \"the Python docs don't have such a list in a single row-by-row table\". The Data Model page does indeed include a giant \"Special Names\" section and a \"Coroutines\" section which document nearly every special method, but it's quite challenging to skim and not *quite* complete."},
{"Title": "Declarative GUI for Python", "Author": "madnirua", "Content": "Slint is a declarative GUI toolkit to build native user interfaces for desktop and embedded applications. Sometime ago, we had announced that Slint will be supporting Python https://www.reddit.com/r/Python/comments/18mdpig/declarative_gui_for_python/ Today we are excited to share that we released Slint v1.5 introducing Pythonic Slint. Check out all the details at https://slint.dev/blog/slint-1.5-released.html 🚀 Check out the repo at https://github.com/slint-ui/slint/tree/master/api/python#slint-python-alpha"},
{"Title": "Grocery delivery with Python (Company Engineering blog post)", "Author": "svena33", "Content": "Hope that sharing this is allowed here, let me know otherwise.\nI just published a new post on our engineering blog on why and how we’re using Python at Picnic (an online supermarket in the EU). I think it might be interesting for this sub as well. https://picnic.app/careers/python-picnic"},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "EOmaps v8.0 is here!", "Author": "se_pp", "Content": "Hey all, I'm excited to announce that EOmaps v8.0 is now released and that it has been accepted into the PyOpenSci ecosystem! What is it? EOmaps is a pyhton package to visualize and analyze geographical datasets. It's 100% free and open-source! You can find all information you need to install (or contribute 🚀) in the documentation and on GitHub! Check it out and let me know what you think! EOmaps v8.0 brings a lot of updates, fixes and improvements like:\nA switch to BSD-3-Clause License"},
{"Title": "BrowserForge: Intelligent browser header and fingerprint generator", "Author": "daijro", "Content": "What it does: BrowserForge is a smart browser header and fingerprint generator that mimics the frequency if different browsers, operating systems, and devices found in the wild. Features\nUses a Bayesian generative network to mimic actual web traffic\nExtremely fast runtime (0.1-0.2 miliseconds)\nEasy and simple for humans to use\nExtensive customization options for browsers, operating systems, devices, locales, and HTTP version"},
{"Title": "Stockstir - Instantly and easily gather real time stock data from any Python script at no cost", "Author": "PatzEdi", "Content": "Hello! It has been a while since I have made a post about Stockstir, the tool to gather stock information from any script at no cost, written in Python. After a couple months from my last post, I have updated and refined bugs and other issues, as well as added new functions for enhanced usability. The latest version is now 2.1.4. What My Project Does Stockstir is an easy way to instantly gather stock data from any of your Python scripts. Not only that, but it includes other features, such as multi data gathering, anti ban, a fail-safe mechanism, random user agents, and much more. Target Audience"},
{"Title": "Fast API code to create/manage Open AI assistants", "Author": "HenryObj", "Content": "Hello everyone, I built a V1 for a SaaS platform to create and manage OpenAI assistants. It is made to be white-labeled. The back-end is in Python (FastAPI). I decided to work on other projects. If the code can be helpful to you, please feel free to use it the way you want 🤝 Link to the repo here 👉 github[dot]com/HenryObj/assistants"},
{"Title": "Dask Demo Day: Dask on Databricks, scale embedding pipelines, and Prefect on the cloud", "Author": "dask-jeeves", "Content": "I wanted to share the talks from last month’s Dask Demo Day, where folks from the Dask community give short demos to show off ongoing work. Hopefully this helps elevate some of the great work people are doing.\nLast month’s talks:\n- One trillion row challenge\n- Deploy Dask on Databricks with dask-databricks\n- Deploy Prefect workflows on the cloud with Coiled\n- Scale embedding pipelines (LlamaIndex + Dask)\n- Use AWS Cost Explorer to see the cost of public IPv4 addresses\nRecording on YouTube:\nJoin the next one this Thursday, March 21st, 11am ET"},
{"Title": "Virtual Workshop: Real-time streaming + analytics + visualization (Mar, 19)", "Author": "oli_k", "Content": "Hello,\nI'm organizing a workshop next Tuesday, March 19, 2024, at 4 PM Pacific Time. During this workshop, instructors will build a real-time dashboard for analyzing pizza shop orders using Bytewax, Pinot, and Streamlit.\nFor more details and to RSVP (attendance is free), please visit:\nhttps://bytewax.io/events/real-time-pizza-analytics\nI believe this workshop is especially noteworthy for those interested, as I've personally enjoyed migrating the previous solution from Kafka Streams to Bytewax. The solution is now more Python-friendly, and the complexity of the codebase is significantly reduced. For me, it felt truly refreshing to rewrite it :D\nI am still in the process of updating the repository and will share it later, but here is the previous version:"},
{"Title": "slack-progress-bar: A progress bar for your Slack Bots", "Author": "UnemployedPython", "Content": "I built this after having conceptually designed it in an interview but failed to get the job. Figured I might as well build it. Any thoughts or advice welcome! How My Project Works This progress bar connects with your Slack Bot account via tokens to send you a message as something is loading. It updates the progress bar as called by the user to edit the message on Slack, always keeping you up to date on how progress is going (ex. Used in an application that's loading something, running tests, etc.) Target Audience This can be used in a professional setting where you want to notify employees of certain progress. Also can be used for personal projects and / or design teams in universities that use Slack."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Collecting Dask user quotes", "Author": "mrocklin", "Content": "So I'm updating the dask.org homepage and want to include user quotes of people who Dask has had some positive impact. If you have ...\nLike Dask or found Dask it easy or helpful in some way\ndon't mind having your name and face on the dask.org website\n... then can you leave a comment here with a quote that you wouldn't mind me putting online? Bonus points if you can link to something like a personal homepage or linkedin page where I can scrape a tiny headshot. For long quotes I may tighten up language a bit (let me know if you mind)."},
{"Title": "How To Add Multiple Pages to NiceGUI", "Author": "bitdoze", "Content": "Created an article and a video that will help beginners to NiceGUI add multiple pages to NiceGUI to better structure the app.\nhttps://www.bitdoze.com/nicegui-pages/"},
{"Title": "Comparing hosts / providers for serverless cloud functions (FaaS) for Python", "Author": "hxmartin", "Content": "I was going crazy trying to compare Python cloud function hosts and started taking notes ... hope this helps someone, feedback welcome! https://github.com/hbmartin/comparison-hosts-serverless-cloud-function-faas-for-python"},
{"Title": "btstrm: Torrent Streaming Program for Linux", "Author": "hurleymjohnston", "Content": "I'll disclaim: I'm not a programmer but a litterateur, my code may be quite bad and in some (some!) places written with LLMs - but it works as should be and its simplicity makes me admire Python. // The beginning of lyric digression For the last 7 years I've been writing scripts in bash. I've accumulated quite a lot of them, I would say that it became a kind of escapism for me, in anxious moments of my life, when I was too lazy to do something on my own, I prefer to spend half a night writing a script, so that I could press one button and - bang - everything would work by itself. At one point, Bash became not enough. Despite the fact that it became convenient and fast to write in it, in fact, it works slowly enough to create some serious projects. And at one point, my friend encouraged me to use Python, luckily he knows Python and I had an idea that came to life. So now I use my Python program literally every day."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Type-safe & fast embedded vector database for RAG | OasysDB v0.3.0", "Author": "edwinkys", "Content": "Hey all! In this past few months, I've been working on OasysDB, an embedded vector database inspired by SQLite. OasysDB is written in Rust with interoperability to Python which offers high memory and type safety with high performance. What My Project Does OasysDB helps perform RAG with local AI models or any other small to medium size vector search operation . One of the perfect use case to use OasysDB is if you're building a LLM-based desktop app that doesn't require network connection. Why use OasysDB"},
{"Title": "NiceGUI For Beginners", "Author": "bitdoze", "Content": "Created a beginner guide to NiceGUI and how you can get started, NiceGUI can help you build UIs to Python apps and offers performance and flexibility, in case someone is interested there is an article and a video:\nhttps://www.bitdoze.com/nicegui-get-started/"},
{"Title": "The Biggest Hurdle in Learning Python", "Author": "shankarj68", "Content": "What is your biggest hurdle in learning the Python programming language? What specific area is hard for you to understand? Edit: Thank you to all the people who commented and discussed various challenges. Here are the obvious ones:\nInstallation on various OS, along with which packages to use for installation (Pip, conda).\nBootcamp tutorials seem to be boring and repetitive. There is hardly a resource available that mimics real-world scenarios."},
{"Title": "\"Mark as read\" plugin for mkdocs-material", "Author": "br2krl", "Content": "Hi everyone, I developed a simple plugin for mkdocs-material. What My Project Does: In simple terms, this plugin allows users to mark pages as read and it shows a checkmark icon in navigation bar for the pages that was marked as read.\nThe plugin adds a button under the page content and when users clicks, it stores read date in localStorage. It shows a checkmark icon in the navigation panels for the pages that marked as read. It also shows a \"document updated\" icon if the pages that marked as read got an update. Target Audience:"},
{"Title": "PyCon US grants free booth space and conference passes to early-stage startups. Apply by Sunday 3/17", "Author": "jrowley", "Content": "Official Event"},
{"Title": "An Automated Bash Script for Python Virtual Environment Management", "Author": "SAV_NC", "Content": "Hello r/Python, What My Project Does: This script is designed to automate the management of Python virtual environments and dependencies, streamlining the setup process for Python projects. It facilitates a more efficient workflow for managing project-specific environments and package installations, especially in a professional development setting. Target Audience: This tool is particularly beneficial for developers and IT professionals looking for a systematic approach to environment management. It is designed to integrate into existing workflows, providing a reliable and consistent method for managing Python environments and dependencies."},
{"Title": "Introducing ocrtoolkit: Your Go-To OCR Package", "Author": "ajkdrag_", "Content": "Hey Reddit community! I'm excited to present ocrtoolkit, a powerful OCR package designed to simplify your workflow and elevate your OCR tasks! What My Project Does If you've ever found yourself grappling with complex boilerplate code while tackling OCR-related challenges, you're in luck. ocrtoolkit streamlines the entire OCR process, offering intuitive wrappers for tasks such as image file handling, model execution, result parsing, and much more. Let's delve into the core features:"},
{"Title": "Email Testing with Python smtpd module", "Author": "mraza007", "Content": "Python is packed with numerous command-line modules, one of them being smtpd. It allows you to run your own local SMTP server for testing emails. You can read more about it here in my blog post: Email Testing with Python's smtpd Module"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "What's the state of gradual typechecking in Python?", "Author": "messedupwindows123", "Content": "I've been using Ruby with Sorbet for a long time. There are some pain points, and some errors that it misses, but in generally it's a really nice development tool. I can immediately look up the types of different variables, or method signatures. I also get (nearly) immediate feedback in Vim, if I write a function with an obvious type error. Even though typing is \"gradual\", it catches a lot more problems than you would expect. It also is pretty easy to migrate a file to be type-checked, as long as your code isn't too magical. I like it because, tbh, if you can't encode your idea into the type system, you're probably doing something that another person will struggle to understand."},
{"Title": "Analyzing Python Malware found in an open-source project", "Author": "42-is-the-number", "Content": "Hi all, I've recently found a Python Malware in a FOSS tool that is currently available on GitHub. I've written about how I found it, what it does and who the author is. The whole malware analysis is available in form of an article. I would appreciate any and all feedback."},
{"Title": "Introducing, Taipy-Chess, A chess visualization tool, based on 20,000 games", "Author": "KorieDrakeChaney", "Content": "Taipy-Chess\nWhat my project does\nTaipy-Chess, is a chess visualization tool, based on 20,000 games.You can see all the games, the openings they played, opponents, top played openings and most successful openings. You can see heatmaps and charts on the data. This app was built using the taipy framework for easy data analysis and visualization."},
{"Title": "No More Docstring Despair: Highlight Them in VSCode!", "Author": "erunosaurus", "Content": "Hey everyone! I'm excited to share a simple yet effective tool I've developed that's all about enhancing your Python coding experience in VSCode. We all know how Docstrings are crucial for understanding and documenting our Python code, but they often blend into the background, treated as standard comments in VSCode. This can make them harder to read and differentiate from the rest of your code. That's why I created a Python Docstring Highlighter for VSCode that recognizes the main styles (Google, NumPy, and Sphinx). This extension not only makes your code more readable but also allows you to customize the highlighting to fit your theme, making your coding environment as comfortable and productive as possible."},
{"Title": "ipython-sql has been forked", "Author": "databot_", "Content": "Hi r/Python, In case you didn't know, ipython-sql has been forked. The new project has fixed some long-standing issues and added a bunch of new capapabilities:\nSplitting long SQL queries in multiple cells\nPlotting large-scale datasets\nMore flexibility to open database connections\nThe API remains the same, you can replace projects that depend on ipython-sql with jupysql: pip install jupysql"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "I created a tool that scrapes learncpp.com and make it into a pdf book using asyncio+multiprocessing", "Author": "AstronomerTerrible49", "Content": "Link Github - learncpp_pdf What My Project Does scrape htmls from learncpp.com and make it a pdf book Target Audience people who wants to learn cpp and would like to have a pdf copy of learncpp.com as well as people who wants to learn how to use asyncio and multiprocessing Comparison\namalrajan/learncpp-download Too slow, since it does not make use of asyncio and multiprocessing"},
{"Title": "🚀 Goprox: Simplify Google searches with automatic proxy handling and user-agent selection.", "Author": "SwiftGloss", "Content": "What My Project Does: Goprox is a Python module that revolutionizes Google searches by automatically checking and using proxies, eliminating the need for user input. With Goprox, users can enjoy seamless searching without worrying about proxy configuration or getting blocked. Target Audience: Goprox is perfect for developers seeking to automate Google searches for web scraping, automation, or data collection tasks. It's also ideal for anyone who desires a hassle-free search experience without the hassle of manual proxy management. Comparison: Compared to existing alternatives, Goprox stands out with its focus on automatic proxy handling. Unlike other solutions that require manual proxy input, Goprox streamlines the process by autonomously managing proxies for each search query."},
{"Title": "Introducing pixi's multiple environments implementation", "Author": "Accomplished-Treat85", "Content": "Link to Blog post: https://prefix.dev/blog/introducing_multi_env_pixi Pixi is a package manager that allows development using the conda & pypi ecosystem. Effortlessly switch between CUDA, CPU and other specialized software environments for maximum native performance and test against multiple versions of Python🐍."},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Understanding the Python memory footprint provides pointers to improve your code", "Author": "squareape", "Content": "While it is easy to use Python to turn an idea into a program, one will quickly run into bottlenecks that make their code less performant than they might want it to be. One such bottleneck is memory, of which Python consumes a lot compared to statically typed languages. Indeed, someone asking for advice on how to optimize their Python application online will likely receive the following advice: \"Rewrite it in Rust\". For obvious reasons, this is not very practical advice most of the time. Thus, we must make do with what we have: Python, and libraries written for Python. What follows is an exhibition of the memory model behind your Python application: How objects are allocated, where they are stored, and how they are eventually cleaned up."},
{"Title": "List of Python Libraries and Resources", "Author": "Basajaun-Eidean", "Content": "Hello r/python!\nI've been compiling a list of Python libraries and resources that I've found useful across various projects. I thought it would be beneficial to share this collection with the community, so I've put together a repository for easy access and reference.\nYou're welcome to check it out here: https://github.com/geru-scotland/pylib-atlas. If you find it useful, please consider starring it for future reference!\nYour feedback and contributions to enhance this collection are also highly appreciated.\nThank you!"},
{"Title": "Astrologers have announced the month of Python in Centrifugal Labs: real-time libraries and tutorial", "Author": "FZambia", "Content": "Hello Python community. My name is Alexander – I am the author of Centrifugo project. It's a self-hosted real-time messaging server (alternative to Ably, Pusher, Pubnub services). It was written in Python originally, but then migrated to Go. But it's fully language-agnostic and helps many projects written in Python (and in Django in particular) to add real-time updates to the application. Centrifugo is quite fast, scales well, has super-efficient integration with Redis (~million of publications per second, and more with Redis sharding/Redis Cluster)."},
{"Title": "Disabling the GIL option has been merged into Python.", "Author": "germandiago", "Content": "Exciting to see, after many years, serious work in enabling multithreading that takes advantage of multiple CPUs in a more effective way in Python. One step at a time: https://github.com/python/cpython/pull/116338"},
{"Title": "retry-later: Retry your functions in the background without stopping the flow of execution", "Author": "Free_Let_8315", "Content": "I was working on a project that needed to send an email for confirmation. I didn't want to wait for the function to complete and retry if it failed, since I could verify from the database later and retry again. To solve this issue, I created a decorator for my personal use but then I decided to create a small library out of it in case it can help others. The decorator @retry_later() when used with your function, will retry your function in the background without stopping the flow of execution. Only use it with functions for which you don't need an immediate return value. In case your function stores the state in the database or somewhere else, this is for you!"},
{"Title": "I forked Newspaper3k, fixed bugs and improved its article parsing performance - Newspaper4k package", "Author": "gringo6969", "Content": "Hi all! The Newspaper3k is abandoned (latest release in 2018) without any upgrades and bugfixing. I forked it, and imported all open Issues into my repo. The first two releases (0.9.0 and 0.9.1) were mainly bugfixes and bringing the project more up to date and compatible with python > 3.6 (I started from version 0.9.0 😁). In the latest version, 0.9.3 I not only almost reworked the whole News article parsing process, but also added a lot of new supported languages (around 40 new languages) Repository: https://github.com/AndyTheFactory/newspaper4k Documentation:"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "We're building a Large Action Model (LAM) project that can do any task for you using Python!", "Author": "nobilis_rex_", "Content": "Hey guys! My friend and I are building Nelima. It's basically a Large Language Model designed to take actions on your behalf with natural language prompts and theoretically automate anything. For example, it can schedule appointments, send emails, check the weather, and even connect to IoT devices to let you command it – you can ask it to publish a website or call an Uber for you! You can integrate your own custom actions, written in Python, to suit your specific needs, and layer multiple actions to perform more complex tasks. When you create these actions or functions, it contributes to the overall capabilities of Nelima, and everyone can now invoke the same action. Right now, it's a quite limited in terms of the # of actions it can do but we're having fun building a few :)"},
{"Title": "Prime Number Visualization", "Author": "Aaris_Kazi", "Content": "I tried to visualize the prime numbers in polar coordinates. This project was inspired by 3Blue1Brown channel to understand the relations. https://github.com/Aaris-Kazi/prime-visualization/blob/main/Snapshots/whole.gif To check more try to hit the link source code"},
{"Title": "Sudoku game in python - In terminal (TUI)", "Author": "python_game", "Content": "Hello, I made a Sudoku game in python (not really original). The difficult part for me was the user interface with curses library. A diagram is available to explain the algorithm used. The fame is compatible Linux, Mac and Windows. Link to the project here How to install and play? $ pip install play-sudoku\n$ sudoku What My Project Does Sudoku game, made with python & curses library. Play in the terminal. For Linux, Mac OS and Windows."},
{"Title": "Is this project worth the time and effort: Camera to Keyboard?", "Author": "mnvoh", "Content": "EDIT: Since there are a lot of upvotes on that comment, yes, this is about seeking strangers' validations. But we're all validation seekers. For instance, we all need someone's validation to make a living (boss, customers, etc.) Your boss ain't gonna tell you \"god damn boy, you suck at your job, here take my money\". But in this case, validation seeking is kind of a broad term, let's use something more specialized like Market Research 😉. Also, thanks for all your comments and inputs. Hello everyone I've been working on this project for the past 3 weeks, and I want people's opinions to determine how much time I should invest in it."},
{"Title": "Today I’m releasing PyBoy v2.0.0! A Game Boy emulator written in Python, focused on AI", "Author": "baekalfen", "Content": "Almost 5 years ago, I released PyBoy v1.0.0 to the public, and it's been incredible to see what people have used it for. Things have changed a lot since then, and you might even have seen the viral video by Peter Whidden, who created an AI to play Pokémon using PyBoy: https://www.youtube.com/watch?v=DcYLT37ImBY I've kept the API stable for all this time, and piled up improvements that I wanted to make. So the time has come for PyBoy v2.0.0 with a new and improved API. The hope is that the new API will be much more ergonomic to use, and still feel familiar to existing users."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "What are the limitations for PSFL and BSD licences within a commercial used software?", "Author": "earthspaceman", "Content": "I'm currently building a program for internal use only to perform some calculations after receiving input from a Tkinter interface, loading and saving data locally. Matplotlib is used to create a graph for better visualisation of the output. libraries used: tkinter, json, os, math, matplotlib From what I understand based on the PSFL licence for tkinter, os, json, math there should be no problem. I think matplotlib BSD licence should also be ok. Libraries haven't been changed at all but only used inside the program by calling functions. Software is for internal use only and not for sell. What are the limitations and what do I have to indicate other and the PSFL licence and Matplotlib BSD?"},
{"Title": "Brain Tumor Classification using Deep learning [project]", "Author": "Feitgemel", "Content": "Welcome to Brain tumor beginner tutorial, where we delve into world of CNNs (Convolutional Neural Networks) and their groundbreaking applications in image classification and brain tumor detection. This is a simple tutorial convolutional neural network tutorial that demonstrates how to brain tumor in a dataset of images. We will build and train a model using CNN and see the model accuracy & loss, and then we will test and predict a tumor using new images. Here is a link to the Github Repo: https://youtu.be/-147KGbGI3g Enjoy Eran #cnnforimageclassification #cnnmachinelearningmodel #cnnml #deeplearningbraintumorclassification #aidetectbraintumor"},
{"Title": "What’s a script that you’ve written that you still use frequently?", "Author": "HiT3Kvoyivoda", "Content": "Mine is a web scraper. It’s only like 50 lines of code. It takes in a link, pulls all the hyperlinks and then does some basic regex to pull out the info I want. Then it spits out a file with all the links. Took me like 20 minutes to code, but I feel like I use it every other week to pull a bunch of links for files I might want to download quickly or to pull data from sites to model."},
{"Title": "Haystack 2.0 launch", "Author": "tuanacelik", "Content": "Haystack 2.0 stable is live! Try it out for yourself: https://haystack.deepset.ai/blog/haystack-2-release/ Haystack is an open-source AI framework in Python for creating production-ready apps using LLMs and other language models. It's nearly 4 years old - we've been doing NLP and LLM engineering since before it was cool. 😎 and is model and database agnostic — you can use whatever tools make the most sense for your use case. These tools are combined into a full AI app with the use of Haystack's components and pipelines. The aim of the framework is to provide the structure for you to compose your own custom app."},
{"Title": "Match statement: wish list", "Author": "Kiuhnm", "Content": "Without a doubt, the match statement is very powerful, but there are a few annoyances or missing features, IMO. Type Aliases Type aliases are not supported, so this won't work: NewType1: TypeAlias = ...\ntype NewType2 = ...\n\nmatch x:\n    case NewType1():\n        ...\n    case NewType2():\n        ..."},
{"Title": "Alternative Queries: Typed and Reusable Handcrafted SQL", "Author": "baluyotraf", "Content": "Hello! It's still early in development, but I just want to know if people are interested. What My Project Does I created a library to integrate Pydantic type checking for handwritten SQL queries. It also allows you to test the types, and create nested queries easily. Alternative Queries Target Audience We had a project recently were we had to use handwritten SQL and managing the parameters and reusing queries was quite a hassle. So I'm planning to use this on my production projects moving forward. Comparison I would say in terms of usage, it's like Pydantic + SqlParams, but only with the python default formatting."},
{"Title": "A Project I Am Working On!", "Author": "sushantshah-dev", "Content": "I am trying to build my own CMS in Python. It is supposed to be simple and useful for developers who like to tinker with the inner workings of their websites. Most mainstream content management systems like WordPress seem too complicated to play around with to me. https://pypi.org/project/sapphirecms/ https://github.com/SapphireCMS/SapphireCMS/ I am asking for help in the sense that I need to know the pain points and issues other developers face with the CMSs they use. This is also an open invitation for collaborators on the project. Your efforts will be credited."},
{"Title": "flect - Pure Python full-stack framework", "Author": "UnhappyActivity6133", "Content": "What is flect? flect is a Python framework designed for building full-stack web applications. By leveraging Pydantic models in the backend to correspond with React components in the frontend, flect enables developers to quickly craft interactive and visually appealing user interfaces using Python. Key Features\nFast Development: Empowers writing your entire application in Python, offering a seamless integration between backend logic and frontend UI."},
{"Title": "Finite Element Analysis for Continuum Mechanics of Solid Bodies (FElupe)", "Author": "adtzlr", "Content": "Hi, I'd like to introduce to you my open-source FEA package FElupe, available on GitHub. Its target audience is typically an engineer, e.g. in the field of mechanical or biomedical engineering. It is designed to be both flexible for scientifc research as well as easy-to-use for industry-related problems. Packages with similar scopes are e.g. scikit-fem and Fenics(x). FElupe is a Python 3.8+ 🐍 finite element analysis package 📦 focussing on the formulation and numerical solution of nonlinear problems in continuum mechanics 🔧 of solid bodies 🚂. Its name is a combination of FE (finite element) and the german word Lupe 🔍 (magnifying glass) as a synonym for getting an insight 📖 how a finite element analysis code 🧮 looks like under the hood 🕳️."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Text extraction lib", "Author": "TraditionalAlps4337", "Content": "I created a simple tool for extracting text from PDF, EPUB, TXT, and DOCX files.It is mainly for personal use, but I would really appreciate a feedback https://github.com/KirillAn/extractText/tree/main"},
{"Title": "JSON Serialization", "Author": "Realistic-Sea-666", "Content": "I have been using more and more of Python over the past few weeks because I got sick of JS. When I asked a programmer friend of mine who uses JS religiously what he thought about using Python for web backends, he told me that it would be slow because of JSON serialization. I spent some time researching this, but couldn’t find anything decisive that explained why JSON serialization would be faster in JS. The answers I found said a few things:\nV8 is optimized for this because it’s part of the JS standard"},
{"Title": "PyBackport: Use instances from newer python releases", "Author": "tan_tata_chan", "Content": "What My Project Does PyBackport holds serves three purposes:\nUse instances from newer python releases in older python versions. For example, using StrEnum (new in python 3.11) in python 3.9\nEnable experimental unreleased classes. For example, define new enums where members are tuples with TupleEnum\nProvide support to commonly used constants. For example, PyBackport allows to import and use to avoid re-defining constant color codes in every new project."},
{"Title": "CTF-style Python Challenge", "Author": "seunghan_shin", "Content": "Hello everyone, I enjoy solving CTFs, and I often have thought it would be interesting to have CTF events in other domain besides security. Last year, I organized a small Python-themed CTF event for learners at a Korean conference. The response from participants was positive, so I decided to open it for everyone. https://pyctf.seung.de Anyone can read the challenges, but registration is required to submit flags. Since there's no email verification, feel free to try it without concerns. I made it for beginners and learners, so the challenges are generally easy, but there are also challenges for experienced people. I hope you all have fun. There may be mistakes in the moving to English ver., so I would greatly appreciate bug report or any feedback to help improve, and I will be more happier if I get to see more Python CTF events in the future."},
{"Title": "Is backend development the most common career path", "Author": "Grandtosh", "Content": "Maybe i worded my title wrong. Taking a look at job listings involving python, backend development seems to be the only listing I come across. Why is that the case ? Are they no other career paths outside backend dev for python developers ?"},
{"Title": "Distributing simple handy scripts for Windows - mouse-startable AND editable (the tricky one-liner)", "Author": "galkinvv", "Content": "In short: here is the hacky 2-line header that makes any python script a clickable batch file\n(assuming bundled python in a subfolder) @classmethod # 2>nul & (if not exist \"%~dp0\\python64-win\\python.exe\" (echo Fatal python64-win\\python.exe not found & pause) else (title %~f0 & \"%~dp0\\python64-win\\python.exe\" \"%~f0\" %*)) & exit /B & # noqa: E501\ndef __unused(): \"fake function to help writing header that allows executing same file as python and batch\"\n\n# Normal script starts here"},
{"Title": "I Built a Squaredle Bot", "Author": "2bytesgoat", "Content": "https://www.youtube.com/watch?v=VtHtAbOSp8E Hey everyone 👋 I’m trying to make a habit out of finishing projects and posting the progress on YouTube Any feedback is more than welcome 🙏 What my project does\nreads on screen\nmocks mouse input\nfinds all words in a squaredle based on a word dictionary"},
{"Title": "Ralf Gommers, leading maintainer of NumPy, on the release of NumPy 2.0", "Author": "rubiesordiamonds", "Content": "We spoke with Ralf about the upcoming 2.0 release, the first major release in 16 years. Ralf has a great story as to how he got into the open source community in general, and NumPy and SciPy in particular. You can check it out here: https://open.substack.com/pub/onceamaintainer/p/once-a-maintainer-ralf-gommers?r=2773u5&utm_campaign=post&utm_medium=web&showWelcomeOnShare=true"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Chat with your friends within your (Mac & Linux) Terminal | Textual | Simple & Easy to use", "Author": "Plastic-Payment-934", "Content": "Toschat !What My Project Does?\na lightweight python chat app within your terminal with simple UI and it's built on top of Textual framework. What you can do: - Create a new account - Add your friends to your contact - and chat!\nTarget Audience\nIt's my hobby project to improve my python knowledge but everyone can install and use it. All data store in a live server with Django framework."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Designing a Pure Python Web Framework", "Author": "Pleasant-Cow-3898", "Content": "From the Article:\nThis provides a good overview of how Reflex works under the hood. TLDR:\nUnder the hood, Reflex apps compile down to a React frontend app and a FastAPI backend app. Only the UI is compiled to Javascript; all the app logic and state management stays in Python and is run on the server. Reflex uses WebSockets to send events from the frontend to the backend, and to send state updates from the backend to the frontend. Full post: https://reflex.dev/blog/2024-03-21-reflex-architecture/#designing-a-pure-python-web-framework"},
{"Title": "FlowQ: Your Friendly Neighbourhood Distributed Computing System!", "Author": "StoneSteel_1", "Content": "FlowQ is a Distributed Computing system API, Which aims to make Distributed Computing Free and Simple to use!\nFeatures of FlowQ:\nEffortless Setup: Ditch the complicated configurations! FlowQ runs right out of the box, no ssh headaches or pre-installation required.\nSimple and Secure Connection: Leverages the Hack.Chat and FileBin platforms to establish secure, base-64 encrypted and anonymous connections with your computing cluster."},
{"Title": "Would you use Go / Rust style error handling in Python?", "Author": "ejstembler", "Content": "GitLab snippet \"\"\"v2 Exception instance is a part of the Result\"\"\"\n\nfrom typing import Any, Optional, Tuple\nfrom os import path\n\nResult = Tuple[Optional[Any], Optional[Exception]]\n\n\ndef try_result(result: Result) -> Optional[Any]:\n    # Pre-condition\n    if result is None:\n        raise ValueError('result is None')\n\n    value, error = result\n    if error is not None:\n        raise error\n    return value\n\n\ndef summarize_file_ex(file_path: str) -> Result:\n    # Pre-conditions\n    if file_path is None:\n        return None, ValueError('file_path is None')\n    if file_path.strip() == '':\n        return None, ValueError('file path is blank')\n    if not path.exists(file_path):\n        return None, FileExistsError(f\"file_path \\\"{file_path}\\\" not found\")\n\n    total = 0.0\n    with open(file_path, 'r', encoding='utf-8') as file:\n        for line in file:\n            try:\n                stripped_line: str = line.strip()\n                num = float(stripped_line)\n            except ValueError:\n                return None, RuntimeError(f\"error converting line {line} value \\\"{stripped_line}\\\" to float in file \\\"{file_path}\\\".\")\n            total += num\n    return total, None\n\n\nif __name__ == '__main__':\n    file_path: str = path.join('data', 'file_001.txt')\n    total: float = try_result(summarize_file_ex(file_path=file_path))\n    print(f\"total = {total}\")"},
{"Title": "UFO Tools- functional programming in python", "Author": "houseofleft", "Content": "I shared a \"monads in python library\" a little while back on here- since then I've been toying with and expanding things out into a more general project for helping functional programming patterns in python. [I had (am having) a bunch of fun making this - thought I'd share here!](https://github.com/benrutter/ufo-tools) What my project does: A simple library with utilities for functional programming in Python.\nTarget Audience: It's meant for use in actual production contexts, but it's still in a very early and experimental phase. It's probably most helpful right now as a learning resource."},
{"Title": "PyYAML documentation and source code offline?", "Author": "Veyron180", "Content": "Hey everyone, Today, I wanted to search for some documentation about PyYAML for a personal project. However, I saw that their documentation and GitHub pages all give 404's. The package is still in PyPi. Does anyone know why? Did they go private?\nhttps://pyyaml.org\nhttps://github.com/yaml/pyyaml\nhttps://pypi.org/project/PyYAML/"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Code type checks but then `TypeError`s", "Author": "Kiuhnm", "Content": "Have you noticed that Python's static type system is unsound? Look at this code: from typing import overload\n\n@overload\ndef f(x: int) -> str: ...\n@overload\ndef f(x: str) -> int: ...\ndef f(x: int | str) -> int | str:\n    match x:\n        case int():\n            return 1\n        case str():\n            return 'a'\n\nprint('a' + f(1))\nprint(1 + f('a'))"},
{"Title": "FuzzTypes: Pydantic Library for Auto-correcting Annotation Types", "Author": "imaurer", "Content": "Repo: https://github.com/genomoncology/FuzzTypes FuzzTypes is a library for defining custom annotation types that auto-correct data. This can be used to clean the structured data generated or extracted using OpenAI Function Calling. Since it is built on Pydantic it will work with FastAPI Custom GPT Actions, Instructor, Marvin, DSPy Typed Predictors and any other library currently using Pydantic to define and validate function calling tools. FuzzTypes comes with a variety of \"usable types\" that can be used immediately such as Fuzzy Dates/Times, Email, Zipcode, Integer Words, Emojis. It's also easy to create your own custom annotation types. Simply:\n- Provide a function that converts an \"bad\" input value to a \"good\" output value.\n- Provide a regex for matching desired patterns (e.g. zipcode, email)\n- Provide a list of \"named entities\" (name + aliases) that can be matched to either exactly, case insensitively, fuzzily or semantically (e.g. country, currency)"},
{"Title": "Introducing thread: Extending the built-in threading module", "Author": "caffeine-addictt", "Content": "Good day everyone! I'm here to share a project I have been working on: thread.\nWhat is thread?\nThread is a lightweight and performant library which extends the built-in threading module, enabling you to fetch return values, decorate functions and run functions concurrently.\nComparison\n9 times out of 10, what you are looking for are other built-in modules like multiprocessing, or . Thread is not a replacement for these, but is for improving your experience for that 1 time."},
{"Title": "I made a free easy-to-use toast notification library for PyQt and PySide", "Author": "niklashnng", "Content": "Hey guys, since I couldn't find any good libraries for showing modern-looking toast notifications in PyQt, I made one myself. What My Project Does: It supports showing multiple toasts at the same time, queueing of toasts, 6 different positions, multiple screens and much more. Since it's developed with QtPy, an abstraction layer for multiple versions of PyQt and PySide, you can use it with PyQt5, PyQt6, PySide2, and PySide6. Also, basically anything can be completely customized and it's extremely easy to use. Target Audience: This is useful for any Python developer who is working with PyQt or PySide and wants to display clean and modern-looking toast nofifications easily."},
{"Title": "SCHNOZ: Advanced packet sniffer/analyzer and IDS written in Python", "Author": "OkDevelopment4423", "Content": "What it Does:\nSchnoz is an advanced packet sniffer/analyzer and IDS with several options to conduct network monitoring and threat analysis. My script supports both Windows and Linux and is written in Python.\nFeatures:\nActively sniffs local traffic on specified interfaces\nPassively sniffs traffic from pcap files"},
{"Title": "How often do you find yourself ditching wrapper libraries?", "Author": "BarryTownCouncil", "Content": "I started writing some code to interact with Salesforce and pagerduty. So I found simple-salesforce and pypdras and set to work. After what felt like both too long and not long at all I started to get annoyed by both libraries. They (reasonably enough) worked totally different to each other and documentation would be poor. Alternatively they both wrap an HTTP REST API using the requests module, which has excellent documentation as do their official APIs. Well, relatively speaking of course. Whilst I head to dog a little into he authentication mechanisms and such it was very quickly massively easier to do the API calls myself and be able to program against them in very similar ways. I even decided to use requests_cache to add implicit caching to these backends and a couple of others I also started to use."},
{"Title": "Who's coming to PyCon Italia this year?", "Author": "patrick91it", "Content": "Hey folks! Is anyone of you attending this year PyCon Italia? I'm one of the organisers and I'd love to connect to new people this year 😊 See you there! 🐍✨"},
{"Title": "Python devs, whats the best complimentary language for your area and why?", "Author": "Brilliant-Donkey-320", "Content": "Hey Everybody, I have seen Python used for many things and I am just wondering, for those who work with Python and another language, what is the best complimentary language for your area (or just in general in your opinion) and why? Is the language used to make faster libraries (like making a C/C++ library for a CPU intensive task)? Maybe you use a higher level language like C# or Java for an application and Python for some DS, AI/ML section? I am curious which languages work well with Python and why? Thanks! Edit: Thanks everyone for all of this info about languages that are useful with Python. It has been very informative and I will definitely be checking out some of these suggested companion languages. Thanks!"},
{"Title": "What is the combined size of your Python codebase?", "Author": "serge_databricks", "Content": "What is the combined size of your Python codebase?\n1k-50k lines (Small)\n50k-300k lines (Medium)\n301k-1M lines (Large)\n1M+ lines (Extra Large)\nFor the reference:\n- Requests () is 17k lines\n- Flask () is 34k lines\n- urllib3 () is 35k lines\n- boto3 () is 70k lines\n- black () is 131k lines\n- pip () is 240k lines\n- Ansible () is 366k lines\n- SciKit Learn () is 471k lines\n- Django () is 668k lines\n- NumPy () is 757k lines\n- Airflow () is 1.2M lines\nShould the bucket sizes be adjusted?"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "deptry 0.14.0: Now up to 10 times faster by leveraging Rust!", "Author": "fpgmaas", "Content": "deptry 0.14.0 was just released, bringing significant speed improvements: It is now up to 10 times faster than the previous release! 🚀 For those unfamiliar with deptry; deptry is a command line tool to check for issues with dependencies in a Python project, such as unused or missing dependencies. [GitHub] For some benchmarks of the new release, see the release notes here. The performance improvement was achieved by leveraging Rust to parse the AST and extract the import statements from .py files, rather than using Python's ast module. The addition of Rust to the project also opens up doors for more optimizations in the future, so stay tuned!"},
{"Title": "python notebook+ insightface + inswapper_128", "Author": "Maleficent_Yak_993", "Content": "I moved from C to python and absolutely loving it. While looking into code of available face swappers I realized they are mostly wrapper on insightface and inswapper. So i thought I'll strip it all down to bare minimum, and the results were better than expected. I've captured my learnings in this video, if you're interested. https://www.youtube.com/watch?v=Ju_reA3zQso"},
{"Title": "Github Copilot Lies to me", "Author": "codeguru42", "Content": "My first attempt to get some help from Github Copilot: Me: write a match case statement in python to match the first character of a string is a semicolon Copilot: Python doesn't have a built-in match or case statement like some other languages (e.g., JavaScript, Swift, Rust). However, you can achieve similar functionality using... Strangely, it finally gave me an answer when I made a small change to my prompt:"},
{"Title": "DSPy: Programming—not prompting—Foundation Models", "Author": "EnoughProject7477", "Content": "DSPy is a framework that aims to solve the fragility problem in language model (LM)-based applications by prioritizing programming over prompting. It allows you to recompile the entire pipeline to optimize it to your specific task — instead of repeating manual rounds of prompt engineering — whenever you change a component. https://github.com/stanfordnlp/dspy"},
{"Title": "Leaping: Fix tests instantly with an omniscient debugger", "Author": "kpetkar", "Content": "Link to Repo: https://github.com/leapingio/leaping What My Project Does\nWe’ve all been in hell when you have no idea why a test might be failing. You set a breakpoint, add print statements, and re-run the code, all to realize that you added them in the wrong spot or need to step backward. Leaping is a simple, fast and lightweight omniscient debugger for Python tests. Leaping traces the execution of your code and allows you to retroactively inspect the state of your program at any time, using an LLM-based debugger with natural language. Using Leaping, you can quickly get the answer to questions like:"},
{"Title": "Stockdex: Python Package to Extract Financial Insights From Multiple Sources", "Author": "nginx26", "Content": "Happy weekend every one! A while ago I showcased stockdex in this community. Since then, I've improved data retrieval performance by integrating yahoo finance API besides web scarping from sources. These tweaks have made more detailed data available in returned pandas dataframes while making the queries 5 times faster in average. What My Project Does A lightweight python package designed for the efficient retrieval of financial data from various sources like Yahoo Finance, Nasdaq, and Digrin. It is similar to yfinance python package. Comparison with yfinance It allows data retrieval from more sources, not just yahoo finance API. It also provides more data, for example returns dividends data for the last 5 years at max, but returns the entire dividends history."},
{"Title": "Do you like `def call() -> None: ...`", "Author": "silently--here", "Content": "So, I wanted to get a general idea about how people feel about giving return type hint of None for a function that doesn't return anything. With the introduction of PEP 484, type hints were introduced and we all rejoiced. Lot of my coworkers just don't get the importance of type hints and I worked way too hard to get everyone onboarded so they can see how incredibly useful it is! After some time I met a coworker who is a fan of typing and use it well... except they write -> None everywhere! Now this might be my personal opinion, but I hate this because it's redundant and not to mention ugly (at least to me). It is implicit and by default, functions return None in python, and I just don't see why should be used. We have been arguing a lot over this since we are building a style guide for the team and I wanted to understand what the general consensus is about this. Even in PEP 484, they have mentioned that should be used for functions and I just find that crazy."},
{"Title": "PyCon US 2024 Approaches", "Author": "monorepo", "Content": "Official Event"},
{"Title": "EyeGestures: Opensource eyetracking python library", "Author": "TraditionalDistrict9", "Content": "Hey all!\nWanted to share opensource project for all interested in building interfaces based on eyetracking. What My Project Does: EyeGestures is python library offering e2e eyetracking with blinking detection, and gaze fixation. It provides eye-motion-controlled cursor. Comparison: I have not found other e2e eye tracking library with focus on building interfaces. We offer eye-motion following cursor, with built-in switchable configuration, gaze detection and blinking. Furthermore webAPI provides activation zones, and eye-magnetic buttons to ease user control."},
{"Title": "sdv: MIT created Python library for generating Synthetic Data", "Author": "semicausal", "Content": "MIT's Data-to-AI lab created sdv (synthetic data vault) to generate _realistic_ fake data from real, production data. - CTGAN paper: https://dspace.mit.edu/handle/1721.1/128349 - Vine Copula Models paper: https://dai.lids.mit.edu/wp-content/uploads/2019/01/1812.01226.pdf Code example: from sdv.lite import SingleTablePreset\nfrom sdv.datasets import demo\nimport pandas as pd\n\nreal_data, metadata = download_demo('single_table', 'adult')\nsynthesizer = SingleTablePreset(metadata, name='FAST_ML')\n\nsynthetic_data = synthesizer.sample(num_rows=500)\n# Once the model is trained, you can generate as many \n# look-alike rows of data as you'd like even if original data is smaller\nsynthetic_data_more = synthesizer.sample(num_rows=10_000)"},
{"Title": "Free Review Copies of \"Python Real-World Projects\"", "Author": "entreluvkash", "Content": "Packt has published \"Python Real-World Projects\"\nAs part of our marketing activities, we are offering free digital copies of the book in return for unbiased feedback in the form of a reader review. Here is what you will learn from the book:\nExplore core deliverables for an application including documentation and test cases\nDiscover approaches to data acquisition such as file processing, RESTful APIs, and SQL queries\nCreate a data inspection notebook to establish properties of source data"},
{"Title": "The wrong way to speed up your code with Numba", "Author": "itamarst", "Content": "If your NumPy-based code is too slow, you can sometimes use Numba to speed it up. Numba is a compiled language that uses the same syntax as Python, and it compiles at runtime, so it’s very easy to write. And because it re-implements a large part of the NumPy APIs, it can also easily be used with existing NumPy-based code.\nHowever, Numba’s NumPy support can be a trap: it can lead you to missing huge optimization opportunities by sticking to NumPy-style code. In this article I show examples of:"},
{"Title": "Introducing Ludic: web development with HTMX, async, components, templating with f-strings", "Author": "pdcz", "Content": "A while ago I started experimenting with f-strings a bit, how to make them safe to use for HTML rendering without safety issues, basically I tried to make p(f\"Hello {b(\"World\")}! work. I also experimented with HTMX along the way. It ended as an open-source library. So today I'm releasing Ludic 0.1.0: https://github.com/paveldedik/ludic I'm looking for any feedback, is it something you would find useful? I'm still not sure how flexible this approach is. I know there are quite a lot of similar libraries, like reflex (I started researching when I already had quite a bit of code written as it was quite fun to write it)."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "typedtemplate: A Pydantic approach to text templates", "Author": "Shakakai", "Content": "URL: https://github.com/Shakakai/typedtemplate I'm in the process of releasing a few of my internal libraries for building LLM-based apps. The first release is typedtemplate, a library that allows you to use Pydantic syntax to describe the data required by a template to render.\nWhat does it currently do?\nDocumentation: Provides a class that you can easily generate documentation for. This means all your normal python documentation generators and tooling can provide useful docs for your templates that are easily consumable by your team."},
{"Title": "UXsim: Network traffic flow simulator in pure Python", "Author": "Balance-", "Content": "Disclaimer: Not my project but a very interesting one I encountered recently UXsim is a free, open-source traffic flow simulator designed for large-scale vehicular transportation simulations, developed purely in Python. Whether you're a researcher, student, or enthusiast in transportation, UXsim offers a comprehensive toolkit for macroscopic and mesoscopic traffic flow simulations. What My Project Does UXsim stands out by providing an easy-to-use Python implementation of standard models for dynamic network traffic flow. It's capable of simulating traffic dynamics in large networks, incorporating elements such as traffic signals, inflow control, route guidance, and congestion pricing. The simulator supports dynamic traffic assignments and comes with features for analyzing and visualizing simulation results, making it highly useful for scientific and educational purposes."},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "🌈 StreamJoy turns your stream of images into animations, in parallel", "Author": "zethiroth", "Content": "Docs here: https://ahuang11.github.io/streamjoy/ Repo here: https://github.com/ahuang11/streamjoy/tree/main What My Project Does Streamjoy turns your images into animations using sensible defaults for fun, hassle-free creation. It cuts down the boilerplate and time to work on animations, and it's simple to start with just a few lines of code. Target Audience For scientists or hobbyists that want to see something in motion and analyze it! It's still in beta, but would love feedback! Comparison Unlike other libraries, this runs in parallel, and I really like how it can add intros and pauses by specifying keywords!"},
{"Title": "Pyconf from Philly (Carpool/Hotel)", "Author": "the_ultimate_stoic", "Content": "Anyone going to pyconf from Philly?\nLooking to carpool and possibly get a Airbnb near the spot!\nlmk if anyone wants to join."},
{"Title": "I made a really obfuscated way of doing FizzBuzz in python", "Author": "1cubealot", "Content": "Today I felt bored, so I made a program to do FizzBuzz in the most obfuscated way possible: def d(i,m):return lambda x:m if x%i==0else\"\"\ndef f(n,a):return str(n)if len((m:=(''.join([l(n)for l in a]))))==0else m\ndef r(n):return f(n,[d(3,'\\x46\\x69\\x7a\\x7a'),d(5,'\\x42\\x75\\x7a\\x7a')])\ndef p(l):print(r(l[0]));return None if len(l)==1else p(l[1:])\np([n for n in range(1, 101)]) # Runs it"},
{"Title": "PyPI Support Specialist", "Author": "monorepo", "Content": "PSF Official"},
{"Title": "Website creation using UiWizard", "Author": "TheBoiDec", "Content": "What my project does\nUiWizard allows any python developer to create a website using python. I wanted to have a tool that I could use for my own personal projects with minimal exposure to the underlying technologies like JavaScript, CSS and HTML. This however does not mean that it is not possible to use these tools. UiWizard is made using FastAPI, Tailwind CSS, DaisyUI, HTMX as the major libraries. Target audience Anyone interested in creating a website. I currently would not recommend it for a production use-case in the current state but as it is with anything I'm not going to stop you."},
{"Title": "quickapiclient: Create fully typed declarative API clients quickly and easily", "Author": "martinn404", "Content": "Hi all! I've had an idea for a while around creating a library that would allow you to quickly build new API clients that are fully typed. Last week I finally got around to building it and am keen to see what everyone thinks. What My Project Does A library for creating fully typed declarative API clients quickly and easily. So you could build an API integration with other services very quickly, and in a declarative way. And it would ensure that your request/query params are valid/correct before sending them (avoiding potential errors). As well as making the API response easy to work with, matching your own models rather than trying to work with JSON blobs."},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "DukPy lightweight JS interpreter released for Python 3.12", "Author": "_amol_", "Content": "DukPy is a lightweight and easy to use JavaScript interpreter for Python. It comes with builtin support for various transpilers like SCSS, Less and React JSX thus allowing to build web apps in pure python without the need for NodeJS Release 0.3.1 finally added support for Python 3.12 and provides prebuilt wheels."},
{"Title": "Introducing ocrtoolkit: Your Go-To OCR Package", "Author": "ajkdrag_", "Content": "Hey Reddit community! I'm excited to present ocrtoolkit, a powerful OCR package designed to simplify your workflow and elevate your OCR tasks! What My Project Does If you've ever found yourself grappling with complex boilerplate code while tackling OCR-related challenges, you're in luck. ocrtoolkit streamlines the entire OCR process, offering intuitive wrappers for tasks such as image file handling, model execution, result parsing, and much more. Let's delve into the core features:"},
{"Title": "Every dunder method in Python", "Author": "treyhunner", "Content": "For years my training students have been asking me for a list of all the dunder methods. The Python docs don't have such a list, so I compiled my own... after having on my to-do list for years. Every dunder method in Python I realized why it took me so long during when I finally finished compiling the table of all of them... there are over 100 dunder methods in Python! 💯 Edit: I should have said \"the Python docs don't have such a list in a single row-by-row table\". The Data Model page does indeed include a giant \"Special Names\" section and a \"Coroutines\" section which document nearly every special method, but it's quite challenging to skim and not *quite* complete."},
{"Title": "Friday Daily Thread: r/Python Meta and Free-Talk Fridays", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Grocery delivery with Python (Company Engineering blog post)", "Author": "svena33", "Content": "Hope that sharing this is allowed here, let me know otherwise.\nI just published a new post on our engineering blog on why and how we’re using Python at Picnic (an online supermarket in the EU). I think it might be interesting for this sub as well. https://picnic.app/careers/python-picnic"},
{"Title": "What's the state of gradual typechecking in Python?", "Author": "messedupwindows123", "Content": "I've been using Ruby with Sorbet for a long time. There are some pain points, and some errors that it misses, but in generally it's a really nice development tool. I can immediately look up the types of different variables, or method signatures. I also get (nearly) immediate feedback in Vim, if I write a function with an obvious type error. Even though typing is \"gradual\", it catches a lot more problems than you would expect. It also is pretty easy to migrate a file to be type-checked, as long as your code isn't too magical. I like it because, tbh, if you can't encode your idea into the type system, you're probably doing something that another person will struggle to understand."},
{"Title": "Introducing PyPixelStream: An Open-Source Streaming Tool for Low-Res LED Displays 🚀", "Author": "drboom9", "Content": "Hello, Python community! I'm excited to share a project I've been working on called PyPixelStream. This is an open-source live streaming software, specifically designed for low-resolution LED panels. Inspired by OBS (Open Broadcaster Software), PyPixelStream aims to simplify the management and broadcasting of content to LED screens, addressing the unique challenges presented by low-resolution visual media.\nWhat Does PyPixelStream Do?\nPyPixelStream enables live streaming to low-resolution LED screens, providing a cross-platform (Windows, Linux, macOS) environment to manage and broadcast visual content in a way that's optimized for these displays. It offers a variety of media sources (images, videos, webcam, screen capture, GIFs) and customizable text sources (clocks, timers, dates, cryptocurrency prices), along with dynamic effects and extendable filters to adjust brightness, contrast, apply chroma key, and more.\nTarget Audience\nThis project is aimed at technology enthusiasts, developers, visual artists, and anyone interested in exploring new ways to interact with low-resolution visual media. PyPixelStream is perfect for use in personal projects, artistic experimentation, or even in professional applications where LED displays play a central role.\nComparison With Existing Alternatives\nUnlike other streaming solutions, PyPixelStream is specifically optimized for low-resolution LED panels, offering detailed customization and control over the broadcast content. While OBS is a powerful tool for live streaming in general, PyPixelStream focuses on the efficiency and adaptability needed for low-resolution media, ensuring that performance and quality are not compromised, even on limited-resource devices like the Raspberry Pi.\nThis is an open-source project, and I'm eager to make it as accessible and versatile as possible! Whether you're interested in contributing code, suggesting features, or just providing feedback, your input would be greatly appreciated. Check out the project on GitHub here:"},
{"Title": "EOmaps v8.0 is here!", "Author": "se_pp", "Content": "Hey all, I'm excited to announce that EOmaps v8.0 is now released and that it has been accepted into the PyOpenSci ecosystem! What is it? EOmaps is a pyhton package to visualize and analyze geographical datasets. It's 100% free and open-source! You can find all information you need to install (or contribute 🚀) in the documentation and on GitHub! Check it out and let me know what you think! EOmaps v8.0 brings a lot of updates, fixes and improvements like:\nA switch to BSD-3-Clause License"},
{"Title": "Introducing, Taipy-Chess, A chess visualization tool, based on 20,000 games", "Author": "KorieDrakeChaney", "Content": "Taipy-Chess\nWhat my project does\nTaipy-Chess, is a chess visualization tool, based on 20,000 games.You can see all the games, the openings they played, opponents, top played openings and most successful openings. You can see heatmaps and charts on the data. This app was built using the taipy framework for easy data analysis and visualization."},
{"Title": "Tutorial: Multi-tenant todo list with FastAPI and Postgres", "Author": "gwen_from_nile", "Content": "I'm active in a SaaS community, so there are a lot of conversations about building multi-tenant apps. And FastAPI is super popular. I didn't see a lot of examples though... So I created one: Example: https://github.com/niledatabase/niledatabase/tree/main/examples/quickstart/python\nVideo tutorial: https://youtu.be/Axl63TUf2bc\nWritten tutorial: https://www.thenile.dev/docs/getting-started/languages/python (Disclaimer: The example uses Nile, a serverless Postgres that I'm working on. But it can be modified to work on any Postgres)."},
{"Title": "Stockstir - Instantly and easily gather real time stock data from any Python script at no cost", "Author": "PatzEdi", "Content": "Hello! It has been a while since I have made a post about Stockstir, the tool to gather stock information from any script at no cost, written in Python. After a couple months from my last post, I have updated and refined bugs and other issues, as well as added new functions for enhanced usability. The latest version is now 2.1.4. What My Project Does Stockstir is an easy way to instantly gather stock data from any of your Python scripts. Not only that, but it includes other features, such as multi data gathering, anti ban, a fail-safe mechanism, random user agents, and much more. Target Audience"},
{"Title": "Tuesday Daily Thread: Advanced questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "Dask Demo Day: Dask on Databricks, scale embedding pipelines, and Prefect on the cloud", "Author": "dask-jeeves", "Content": "I wanted to share the talks from last month’s Dask Demo Day, where folks from the Dask community give short demos to show off ongoing work. Hopefully this helps elevate some of the great work people are doing.\nLast month’s talks:\n- One trillion row challenge\n- Deploy Dask on Databricks with dask-databricks\n- Deploy Prefect workflows on the cloud with Coiled\n- Scale embedding pipelines (LlamaIndex + Dask)\n- Use AWS Cost Explorer to see the cost of public IPv4 addresses\nRecording on YouTube:\nJoin the next one this Thursday, March 21st, 11am ET"},
{"Title": "Tests should have 100% coverage", "Author": "Kiuhnm", "Content": "No, I'm not saying what you probably think I am. Keep reading: I'll be brief. Here's what I found today in one of the tests: for bad_fp in _bad_fps:\n    with pytest.raises(BadArgumentError):\n        follow_path(bad_fp, '.')\n        follow_path('.', bad_fp)"},
{"Title": "Introducing pixi's multiple environments implementation", "Author": "Accomplished-Treat85", "Content": "Link to Blog post: https://prefix.dev/blog/introducing_multi_env_pixi Pixi is a package manager that allows development using the conda & pypi ecosystem. Effortlessly switch between CUDA, CPU and other specialized software environments for maximum native performance and test against multiple versions of Python🐍."},
{"Title": "slack-progress-bar: A progress bar for your Slack Bots", "Author": "UnemployedPython", "Content": "I built this after having conceptually designed it in an interview but failed to get the job. Figured I might as well build it. Any thoughts or advice welcome! How My Project Works This progress bar connects with your Slack Bot account via tokens to send you a message as something is loading. It updates the progress bar as called by the user to edit the message on Slack, always keeping you up to date on how progress is going (ex. Used in an application that's loading something, running tests, etc.) Target Audience This can be used in a professional setting where you want to notify employees of certain progress. Also can be used for personal projects and / or design teams in universities that use Slack."},
{"Title": "List of Python Libraries and Resources", "Author": "Basajaun-Eidean", "Content": "Hello r/python!\nI've been compiling a list of Python libraries and resources that I've found useful across various projects. I thought it would be beneficial to share this collection with the community, so I've put together a repository for easy access and reference.\nYou're welcome to check it out here: https://github.com/geru-scotland/pylib-atlas. If you find it useful, please consider starring it for future reference!\nYour feedback and contributions to enhance this collection are also highly appreciated.\nThank you!"},
{"Title": "Meet XposedOrNot: The Python Project Redefining How We Tackle Data Breaches", "Author": "DevaOnBreaches", "Content": "Hello r/Python community! I'm excited to share with you XposedOrNot, an open-source project built using Python to improve how we monitor data breaches. This project isn't just about enhancing security; it's about utilizing the power and flexibility of Python to address one of the most pressing issues in the digital world today.\nWhat My Project Does:\nXposedOrNot is an open-source tool built using Python, designed to enhance data breach monitoring. By leveraging the simplicity and versatility of Python, it offers a set of comprehensive features aimed at improving security practices and data breach awareness. The tool includes a dashboard with a risk score for emails, data breach impact analysis and analytics, visualization tools, and categorized data for better navigation and understanding of breach data."},
{"Title": "Wednesday Daily Thread: Beginner questions", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "retry-later: Retry your functions in the background without stopping the flow of execution", "Author": "Free_Let_8315", "Content": "I was working on a project that needed to send an email for confirmation. I didn't want to wait for the function to complete and retry if it failed, since I could verify from the database later and retry again. To solve this issue, I created a decorator for my personal use but then I decided to create a small library out of it in case it can help others. The decorator @retry_later() when used with your function, will retry your function in the background without stopping the flow of execution. Only use it with functions for which you don't need an immediate return value. In case your function stores the state in the database or somewhere else, this is for you!"},
{"Title": "Thursday Daily Thread: Python Careers, Courses, and Furthering Education!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "How To Add Multiple Pages to NiceGUI", "Author": "bitdoze", "Content": "Created an article and a video that will help beginners to NiceGUI add multiple pages to NiceGUI to better structure the app.\nhttps://www.bitdoze.com/nicegui-pages/"},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "btstrm: Torrent Streaming Program for Linux", "Author": "hurleymjohnston", "Content": "I'll disclaim: I'm not a programmer but a litterateur, my code may be quite bad and in some (some!) places written with LLMs - but it works as should be and its simplicity makes me admire Python. // The beginning of lyric digression For the last 7 years I've been writing scripts in bash. I've accumulated quite a lot of them, I would say that it became a kind of escapism for me, in anxious moments of my life, when I was too lazy to do something on my own, I prefer to spend half a night writing a script, so that I could press one button and - bang - everything would work by itself. At one point, Bash became not enough. Despite the fact that it became convenient and fast to write in it, in fact, it works slowly enough to create some serious projects. And at one point, my friend encouraged me to use Python, luckily he knows Python and I had an idea that came to life. So now I use my Python program literally every day."},
{"Title": "LLM Based NLP Library", "Author": "FareedKhan557", "Content": "What My Project Does\nMy friend and I recently developed an open-source NLP Library based on LLMs in Python, accessible via the pip install command. This library is capable of solving a wide array of NLP tasks for developers with minimal involvement. It contains over 30 features, covering everything from pattern extraction to OCR text extraction and beyond. Currently, it operates with the Gemini 1.0 Pro Model, allowing it to function without the need to run an LLM on your local environment. All that's required is a Gemini API key, which is available for free."},
{"Title": "Prime Number Visualization", "Author": "Aaris_Kazi", "Content": "I tried to visualize the prime numbers in polar coordinates. This project was inspired by 3Blue1Brown channel to understand the relations. https://github.com/Aaris-Kazi/prime-visualization/blob/main/Snapshots/whole.gif To check more try to hit the link source code"},
{"Title": "Type-safe & fast embedded vector database for RAG | OasysDB v0.3.0", "Author": "edwinkys", "Content": "Hey all! In this past few months, I've been working on OasysDB, an embedded vector database inspired by SQLite. OasysDB is written in Rust with interoperability to Python which offers high memory and type safety with high performance. What My Project Does OasysDB helps perform RAG with local AI models or any other small to medium size vector search operation . One of the perfect use case to use OasysDB is if you're building a LLM-based desktop app that doesn't require network connection. Why use OasysDB"},
{"Title": "Sieve of Eratosthenes (Haskell VS Python)", "Author": "Kiuhnm", "Content": "I've just come across an article where a Haskell, a Python, and a JS implementation of the Sieve of Eratosthenes are shown. Here's the Haskell one: primes = sieve [ 2.. ]\n  where\n    sieve (p:x) = p : sieve [ n | n <- x, n `mod` p > 0 ] And here's the Python one:"},
{"Title": "Today I’m releasing PyBoy v2.0.0! A Game Boy emulator written in Python, focused on AI", "Author": "baekalfen", "Content": "Almost 5 years ago, I released PyBoy v1.0.0 to the public, and it's been incredible to see what people have used it for. Things have changed a lot since then, and you might even have seen the viral video by Peter Whidden, who created an AI to play Pokémon using PyBoy: https://www.youtube.com/watch?v=DcYLT37ImBY I've kept the API stable for all this time, and piled up improvements that I wanted to make. So the time has come for PyBoy v2.0.0 with a new and improved API. The hope is that the new API will be much more ergonomic to use, and still feel familiar to existing users."},
{"Title": "The Biggest Hurdle in Learning Python", "Author": "shankarj68", "Content": "What is your biggest hurdle in learning the Python programming language? What specific area is hard for you to understand? Edit: Thank you to all the people who commented and discussed various challenges. Here are the obvious ones:\nInstallation on various OS, along with which packages to use for installation (Pip, conda).\nBootcamp tutorials seem to be boring and repetitive. There is hardly a resource available that mimics real-world scenarios."},
{"Title": "The First Annual Meeting of the Extraordinary League of Runtime Typers", "Author": "monorepo", "Content": "Original Posts\nGitHub Discussion\nPython.org Discussion\nPEP 649\nAs a user of strong typing in Python, and maintainer of libraries that utilize them greatly with plans of further work on a runtime type-using library, I found this quite an interesting read. Basically seeks to bring up implications of Python 3.13's updates on runtime type checkers via PEP 649..."},
{"Title": "Brain Tumor Classification using Deep learning [project]", "Author": "Feitgemel", "Content": "Welcome to Brain tumor beginner tutorial, where we delve into world of CNNs (Convolutional Neural Networks) and their groundbreaking applications in image classification and brain tumor detection. This is a simple tutorial convolutional neural network tutorial that demonstrates how to brain tumor in a dataset of images. We will build and train a model using CNN and see the model accuracy & loss, and then we will test and predict a tumor using new images. Here is a link to the Github Repo: https://youtu.be/-147KGbGI3g Enjoy Eran #cnnforimageclassification #cnnmachinelearningmodel #cnnml #deeplearningbraintumorclassification #aidetectbraintumor"},
{"Title": "Match statement: wish list", "Author": "Kiuhnm", "Content": "Without a doubt, the match statement is very powerful, but there are a few annoyances or missing features, IMO. Type Aliases Type aliases are not supported, so this won't work: NewType1: TypeAlias = ...\ntype NewType2 = ...\n\nmatch x:\n    case NewType1():\n        ...\n    case NewType2():\n        ..."},
{"Title": "flect - Pure Python full-stack framework", "Author": "UnhappyActivity6133", "Content": "What is flect? flect is a Python framework designed for building full-stack web applications. By leveraging Pydantic models in the backend to correspond with React components in the frontend, flect enables developers to quickly craft interactive and visually appealing user interfaces using Python. Key Features\nFast Development: Empowers writing your entire application in Python, offering a seamless integration between backend logic and frontend UI."},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "JSON Serialization", "Author": "Realistic-Sea-666", "Content": "I have been using more and more of Python over the past few weeks because I got sick of JS. When I asked a programmer friend of mine who uses JS religiously what he thought about using Python for web backends, he told me that it would be slow because of JSON serialization. I spent some time researching this, but couldn’t find anything decisive that explained why JSON serialization would be faster in JS. The answers I found said a few things:\nV8 is optimized for this because it’s part of the JS standard"},
{"Title": "Is backend development the most common career path", "Author": "Grandtosh", "Content": "Maybe i worded my title wrong. Taking a look at job listings involving python, backend development seems to be the only listing I come across. Why is that the case ? Are they no other career paths outside backend dev for python developers ?"},
{"Title": "Ralf Gommers, leading maintainer of NumPy, on the release of NumPy 2.0", "Author": "rubiesordiamonds", "Content": "We spoke with Ralf about the upcoming 2.0 release, the first major release in 16 years. Ralf has a great story as to how he got into the open source community in general, and NumPy and SciPy in particular. You can check it out here: https://open.substack.com/pub/onceamaintainer/p/once-a-maintainer-ralf-gommers?r=2773u5&utm_campaign=post&utm_medium=web&showWelcomeOnShare=true"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "FlowQ: Your Friendly Neighbourhood Distributed Computing System!", "Author": "StoneSteel_1", "Content": "FlowQ is a Distributed Computing system API, Which aims to make Distributed Computing Free and Simple to use!\nFeatures of FlowQ:\nEffortless Setup: Ditch the complicated configurations! FlowQ runs right out of the box, no ssh headaches or pre-installation required.\nSimple and Secure Connection: Leverages the Hack.Chat and FileBin platforms to establish secure, base-64 encrypted and anonymous connections with your computing cluster."},
{"Title": "PyYAML documentation and source code offline?", "Author": "Veyron180", "Content": "Hey everyone, Today, I wanted to search for some documentation about PyYAML for a personal project. However, I saw that their documentation and GitHub pages all give 404's. The package is still in PyPi. Does anyone know why? Did they go private?\nhttps://pyyaml.org\nhttps://github.com/yaml/pyyaml\nhttps://pypi.org/project/PyYAML/"},
{"Title": "Saturday Daily Thread: Resource Request and Sharing! Daily Thread", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "FuzzTypes: Pydantic Library for Auto-correcting Annotation Types", "Author": "imaurer", "Content": "Repo: https://github.com/genomoncology/FuzzTypes FuzzTypes is a library for defining custom annotation types that auto-correct data. This can be used to clean the structured data generated or extracted using OpenAI Function Calling. Since it is built on Pydantic it will work with FastAPI Custom GPT Actions, Instructor, Marvin, DSPy Typed Predictors and any other library currently using Pydantic to define and validate function calling tools. FuzzTypes comes with a variety of \"usable types\" that can be used immediately such as Fuzzy Dates/Times, Email, Zipcode, Integer Words, Emojis. It's also easy to create your own custom annotation types. Simply:\n- Provide a function that converts an \"bad\" input value to a \"good\" output value.\n- Provide a regex for matching desired patterns (e.g. zipcode, email)\n- Provide a list of \"named entities\" (name + aliases) that can be matched to either exactly, case insensitively, fuzzily or semantically (e.g. country, currency)"},
{"Title": "python notebook+ insightface + inswapper_128", "Author": "Maleficent_Yak_993", "Content": "I moved from C to python and absolutely loving it. While looking into code of available face swappers I realized they are mostly wrapper on insightface and inswapper. So i thought I'll strip it all down to bare minimum, and the results were better than expected. I've captured my learnings in this video, if you're interested. https://www.youtube.com/watch?v=Ju_reA3zQso"},
{"Title": "SCHNOZ: Advanced packet sniffer/analyzer and IDS written in Python", "Author": "OkDevelopment4423", "Content": "What it Does:\nSchnoz is an advanced packet sniffer/analyzer and IDS with several options to conduct network monitoring and threat analysis. My script supports both Windows and Linux and is written in Python.\nFeatures:\nActively sniffs local traffic on specified interfaces\nPassively sniffs traffic from pcap files"},
{"Title": "Leaping: Fix tests instantly with an omniscient debugger", "Author": "kpetkar", "Content": "Link to Repo: https://github.com/leapingio/leaping What My Project Does\nWe’ve all been in hell when you have no idea why a test might be failing. You set a breakpoint, add print statements, and re-run the code, all to realize that you added them in the wrong spot or need to step backward. Leaping is a simple, fast and lightweight omniscient debugger for Python tests. Leaping traces the execution of your code and allows you to retroactively inspect the state of your program at any time, using an LLM-based debugger with natural language. Using Leaping, you can quickly get the answer to questions like:"},
{"Title": "Python devs, whats the best complimentary language for your area and why?", "Author": "Brilliant-Donkey-320", "Content": "Hey Everybody, I have seen Python used for many things and I am just wondering, for those who work with Python and another language, what is the best complimentary language for your area (or just in general in your opinion) and why? Is the language used to make faster libraries (like making a C/C++ library for a CPU intensive task)? Maybe you use a higher level language like C# or Java for an application and Python for some DS, AI/ML section? I am curious which languages work well with Python and why? Thanks! Edit: Thanks everyone for all of this info about languages that are useful with Python. It has been very informative and I will definitely be checking out some of these suggested companion languages. Thanks!"},
{"Title": "Do you like `def call() -> None: ...`", "Author": "silently--here", "Content": "So, I wanted to get a general idea about how people feel about giving return type hint of None for a function that doesn't return anything. With the introduction of PEP 484, type hints were introduced and we all rejoiced. Lot of my coworkers just don't get the importance of type hints and I worked way too hard to get everyone onboarded so they can see how incredibly useful it is! After some time I met a coworker who is a fan of typing and use it well... except they write -> None everywhere! Now this might be my personal opinion, but I hate this because it's redundant and not to mention ugly (at least to me). It is implicit and by default, functions return None in python, and I just don't see why should be used. We have been arguing a lot over this since we are building a style guide for the team and I wanted to understand what the general consensus is about this. Even in PEP 484, they have mentioned that should be used for functions and I just find that crazy."},
{"Title": "Monday Daily Thread: Project ideas!", "Author": "AutoModerator", "Content": "Daily Thread"},
{"Title": "deptry 0.14.0: Now up to 10 times faster by leveraging Rust!", "Author": "fpgmaas", "Content": "deptry 0.14.0 was just released, bringing significant speed improvements: It is now up to 10 times faster than the previous release! 🚀 For those unfamiliar with deptry; deptry is a command line tool to check for issues with dependencies in a Python project, such as unused or missing dependencies. [GitHub] For some benchmarks of the new release, see the release notes here. The performance improvement was achieved by leveraging Rust to parse the AST and extract the import statements from .py files, rather than using Python's ast module. The addition of Rust to the project also opens up doors for more optimizations in the future, so stay tuned!"},
{"Title": "EyeGestures: Opensource eyetracking python library", "Author": "TraditionalDistrict9", "Content": "Hey all!\nWanted to share opensource project for all interested in building interfaces based on eyetracking. What My Project Does: EyeGestures is python library offering e2e eyetracking with blinking detection, and gaze fixation. It provides eye-motion-controlled cursor. Comparison: I have not found other e2e eye tracking library with focus on building interfaces. We offer eye-motion following cursor, with built-in switchable configuration, gaze detection and blinking. Furthermore webAPI provides activation zones, and eye-magnetic buttons to ease user control."},
{"Title": "Would you use Go / Rust style error handling in Python?", "Author": "ejstembler", "Content": "GitLab snippet \"\"\"v2 Exception instance is a part of the Result\"\"\"\n\nfrom typing import Any, Optional, Tuple\nfrom os import path\n\nResult = Tuple[Optional[Any], Optional[Exception]]\n\n\ndef try_result(result: Result) -> Optional[Any]:\n    # Pre-condition\n    if result is None:\n        raise ValueError('result is None')\n\n    value, error = result\n    if error is not None:\n        raise error\n    return value\n\n\ndef summarize_file_ex(file_path: str) -> Result:\n    # Pre-conditions\n    if file_path is None:\n        return None, ValueError('file_path is None')\n    if file_path.strip() == '':\n        return None, ValueError('file path is blank')\n    if not path.exists(file_path):\n        return None, FileExistsError(f\"file_path \\\"{file_path}\\\" not found\")\n\n    total = 0.0\n    with open(file_path, 'r', encoding='utf-8') as file:\n        for line in file:\n            try:\n                stripped_line: str = line.strip()\n                num = float(stripped_line)\n            except ValueError:\n                return None, RuntimeError(f\"error converting line {line} value \\\"{stripped_line}\\\" to float in file \\\"{file_path}\\\".\")\n            total += num\n    return total, None\n\n\nif __name__ == '__main__':\n    file_path: str = path.join('data', 'file_001.txt')\n    total: float = try_result(summarize_file_ex(file_path=file_path))\n    print(f\"total = {total}\")"},
{"Title": "DSPy: Programming—not prompting—Foundation Models", "Author": "EnoughProject7477", "Content": "DSPy is a framework that aims to solve the fragility problem in language model (LM)-based applications by prioritizing programming over prompting. It allows you to recompile the entire pipeline to optimize it to your specific task — instead of repeating manual rounds of prompt engineering — whenever you change a component. https://github.com/stanfordnlp/dspy"},
{"Title": "Free Review Copies of \"Python Real-World Projects\"", "Author": "entreluvkash", "Content": "Packt has published \"Python Real-World Projects\"\nAs part of our marketing activities, we are offering free digital copies of the book in return for unbiased feedback in the form of a reader review. Here is what you will learn from the book:\nExplore core deliverables for an application including documentation and test cases\nDiscover approaches to data acquisition such as file processing, RESTful APIs, and SQL queries\nCreate a data inspection notebook to establish properties of source data"},
{"Title": "Sunday Daily Thread: What's everyone working on this week?", "Author": "AutoModerator", "Content": "Daily Thread"}